[
    {
        "name": "Node.toString#318",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return objectValue == null ? \"null\" : objectValue.toString();\n    }\n",
        "begin_line": 318,
        "end_line": 321,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.NodeMismatch#2145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NodeMismatch.NodeMismatch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    NodeMismatch(Node nodeA, Node nodeB) {\n      this.nodeA = nodeA;\n      this.nodeB = nodeB;\n    }\n",
        "begin_line": 2145,
        "end_line": 2148,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return String.valueOf(intValue);\n    }\n",
        "begin_line": 350,
        "end_line": 353,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.propToString#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.propToString(int)",
        "snippet": "  private static final String propToString(int propType) {\n      switch (propType) {\n        case BRACELESS_TYPE:     return \"braceless_type\";\n        case VAR_ARGS_NAME:      return \"var_args_name\";\n        case SOURCENAME_PROP:    return \"sourcename\";\n\n        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n\n        case INCRDECR_PROP:      return \"incrdecr\";\n        case PARENTHESIZED_PROP: return \"parenthesized\";\n        case QUOTED_PROP:        return \"quoted\";\n        case OPT_ARG_NAME:       return \"opt_arg\";\n\n        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n        case EMPTY_BLOCK:        return \"empty_block\";\n        case ORIGINALNAME_PROP:  return \"originalname\";\n        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n        case IS_OPTIONAL_PARAM:  return \"is_optional_param\";\n        case IS_VAR_ARGS_PARAM:  return \"is_var_args_param\";\n        case IS_NAMESPACE:       return \"is_namespace\";\n        case IS_DISPATCHER:      return \"is_dispatcher\";\n        case DIRECTIVES:         return \"directives\";\n        case DIRECT_EVAL:        return \"direct_eval\";\n        case FREE_CALL:          return \"free_call\";\n        case STATIC_SOURCE_FILE:    return \"source_file\";\n        case INPUT_ID:  return \"input_id\";\n        case LENGTH:    return \"length\";\n        case SLASH_V:   return \"slash_v\";\n        default:\n          throw new IllegalStateException(\"unexpect prop id \" + propType);\n      }\n  }\n",
        "begin_line": 116,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getSortedPropTypes#878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSortedPropTypes()",
        "snippet": "  private int[] getSortedPropTypes() {\n    int count = 0;\n    for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n      count++;\n    }\n\n    int[] keys = new int[count];\n    for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n      count--;\n      keys[count] = x.getType();\n    }\n\n    Arrays.sort(keys);\n    return keys;\n  }\n",
        "begin_line": 878,
        "end_line": 892,
        "comment": " Gets all the property types, in sorted order.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#934",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toString(true, true, true);\n  }\n",
        "begin_line": 934,
        "end_line": 937,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#948",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(java.lang.StringBuilder, boolean, boolean, boolean)",
        "snippet": "  private void toString(\n      StringBuilder sb,\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    sb.append(Token.name(type));\n    if (this instanceof StringNode) {\n      sb.append(' ');\n      sb.append(getString());\n    } else if (type == Token.FUNCTION) {\n      sb.append(' ');\n      // In the case of JsDoc trees, the first child is often not a string\n      // which causes exceptions to be thrown when calling toString or\n      // toStringTree.\n      if (first == null || first.getType() != Token.NAME) {\n        sb.append(\"<invalid>\");\n      } else {\n        sb.append(first.getString());\n      }\n    } else if (type == Token.NUMBER) {\n      sb.append(' ');\n      sb.append(getDouble());\n    }\n    if (printSource) {\n      int lineno = getLineno();\n      if (lineno != -1) {\n        sb.append(' ');\n        sb.append(lineno);\n      }\n    }\n\n    if (printAnnotations) {\n      int[] keys = getSortedPropTypes();\n      for (int i = 0; i < keys.length; i++) {\n        int type = keys[i];\n        PropListItem x = lookupProperty(type);\n        sb.append(\" [\");\n        sb.append(propToString(type));\n        sb.append(\": \");\n        String value;\n        switch (type) {\n          default:\n            value = x.toString();\n            break;\n        }\n        sb.append(value);\n        sb.append(']');\n      }\n    }\n\n    if (printType) {\n      if (jsType != null) {\n        String jsTypeString = jsType.toString();\n        if (jsTypeString != null) {\n          sb.append(\" : \");\n          sb.append(jsTypeString);\n        }\n      }\n    }\n  }\n",
        "begin_line": 948,
        "end_line": 1007,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTree#1010",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTree()",
        "snippet": "  public String toStringTree() {\n    return toStringTreeImpl();\n  }\n",
        "begin_line": 1010,
        "end_line": 1012,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTreeImpl#1014",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeImpl()",
        "snippet": "  private String toStringTreeImpl() {\n    try {\n      StringBuilder s = new StringBuilder();\n      appendStringTree(s);\n      return s.toString();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Should not happen\\n\" + e);\n    }\n  }\n",
        "begin_line": 1014,
        "end_line": 1022,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.appendStringTree#1024",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.appendStringTree(java.lang.Appendable)",
        "snippet": "  public void appendStringTree(Appendable appendable) throws IOException {\n    toStringTreeHelper(this, 0, appendable);\n  }\n",
        "begin_line": 1024,
        "end_line": 1026,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTreeHelper#1028",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeHelper(com.google.javascript.rhino.Node, int, java.lang.Appendable)",
        "snippet": "  private static void toStringTreeHelper(Node n, int level, Appendable sb)\n      throws IOException {\n    for (int i = 0; i != level; ++i) {\n      sb.append(\"    \");\n    }\n    sb.append(n.toString());\n    sb.append('\\n');\n    for (Node cursor = n.getFirstChild();\n         cursor != null;\n         cursor = cursor.getNext()) {\n      toStringTreeHelper(cursor, level + 1, sb);\n    }\n  }\n",
        "begin_line": 1028,
        "end_line": 1040,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.checkTreeEquals#1427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEquals(com.google.javascript.rhino.Node)",
        "snippet": "  public String checkTreeEquals(Node node2) {\n      NodeMismatch diff = checkTreeEqualsImpl(node2);\n      if (diff != null) {\n        return \"Node tree inequality:\" +\n            \"\\nTree1:\\n\" + toStringTree() +\n            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n      }\n      return null;\n  }\n",
        "begin_line": 1427,
        "end_line": 1437,
        "comment": "\n   * Checks if the subtree under this node is the same as another subtree.\n   * Returns null if it's equal, or a message describing the differences.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.checkTreeEqualsImpl#1444",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEqualsImpl(com.google.javascript.rhino.Node)",
        "snippet": "  NodeMismatch checkTreeEqualsImpl(Node node2) {\n    if (!isEquivalentTo(node2, false, false)) {\n      return new NodeMismatch(this, node2);\n    }\n\n    NodeMismatch res = null;\n    Node n, n2;\n    for (n = first, n2 = node2.first;\n         res == null && n != null;\n         n = n.next, n2 = n2.next) {\n      if (node2 == null) {\n        throw new IllegalStateException();\n      }\n      res = n.checkTreeEqualsImpl(n2);\n      if (res != null) {\n        return res;\n      }\n    }\n    return res;\n  }\n",
        "begin_line": 1444,
        "end_line": 1463,
        "comment": "\n   * Compare this node to node2 recursively and return the first pair of nodes\n   * that differs doing a preorder depth-first traversal. Package private for\n   * testing. Returns null if the nodes are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.toString#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"InputId: \" + getIdName();\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.toString#301",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return fileName;\n  }\n",
        "begin_line": 301,
        "end_line": 304,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.notePreferredLineBreak#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.notePreferredLineBreak()",
        "snippet": "  void notePreferredLineBreak() {\n  }\n",
        "begin_line": 97,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#939",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(boolean, boolean, boolean)",
        "snippet": "  public String toString(\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    StringBuilder sb = new StringBuilder();\n    toString(sb, printSource, printAnnotations, printType);\n    return sb.toString();\n  }\n",
        "begin_line": 939,
        "end_line": 946,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.startNewLine#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.startNewLine()",
        "snippet": "    @Override\n    void startNewLine() {\n      if (lineLength > 0) {\n        prevCutPosition = code.length();\n        prevLineStartPosition = lineStartPosition;\n        code.append('\\n');\n        lineLength = 0;\n        lineIndex++;\n        lineStartPosition = code.length();\n      }\n    }\n",
        "begin_line": 451,
        "end_line": 461,
        "comment": "\n     * Adds a newline to the code, resetting the line length.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.maybeCutLine#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeCutLine()",
        "snippet": "    @Override\n    void maybeCutLine() {\n      if (lineLength > lineLengthThreshold) {\n        // Use the preferred position provided it will break the line.\n        if (preferredBreakPosition > lineStartPosition &&\n            preferredBreakPosition < lineStartPosition + lineLength) {\n          int position = preferredBreakPosition;\n          code.insert(position, '\\n');\n          prevCutPosition = position;\n          reportLineCut(lineIndex, position - lineStartPosition, true);\n          lineIndex++;\n          lineLength -= (position - lineStartPosition);\n          lineStartPosition = position + 1;\n        } else {\n          startNewLine();\n        }\n      }\n    }\n",
        "begin_line": 489,
        "end_line": 506,
        "comment": "\n     * This may start a new line if the current line is longer than the line\n     * length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.hasBlockInliningReferences#900",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.hasBlockInliningReferences()",
        "snippet": "    public boolean hasBlockInliningReferences() {\n      for (Reference r : getReferencesInternal().values()) {\n        if (r.mode == InliningMode.BLOCK) {\n          return true;\n        }\n      }\n      return false;\n    }\n",
        "begin_line": 900,
        "end_line": 907,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.mimimizeCost#689",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.mimimizeCost(com.google.javascript.jscomp.InlineFunctions.FunctionState)",
        "snippet": "  private boolean mimimizeCost(FunctionState fs) {\n    if (!inliningLowersCost(fs)) {\n      // Try again without Block inlining references\n      if (fs.hasBlockInliningReferences()) {\n        fs.setRemove(false);\n        fs.removeBlockInliningReferences();\n        if (!fs.hasReferences() || !inliningLowersCost(fs)) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 689,
        "end_line": 703,
        "comment": "\n   * Determines if the function is worth inlining and potentially\n   * trims references that increase the cost.\n   * @return Whether inlining the references lowers the overall cost.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformTokenType#1148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(int)",
        "snippet": "  private static int transformTokenType(int token) {\n    switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }\n\n    // Token without name\n    throw new IllegalStateException(String.valueOf(token));\n  }\n",
        "begin_line": 1148,
        "end_line": 1328,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.opToStr#2125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.opToStr(int)",
        "snippet": "  static String opToStr(int operator) {\n    switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }\n  }\n",
        "begin_line": 2125,
        "end_line": 2170,
        "comment": "\n   * Converts an operator's token value (see {@link Token}) to a string\n   * representation.\n   *\n   * @param operator the operator's token value to convert\n   * @return the string representation or {@code null} if the token value is\n   * not an operator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.add#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else {\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING_KEY:\n        Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");\n        addJsString(n);\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isStringKey());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n",
        "begin_line": 85,
        "end_line": 732,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineFunctions.trimCanidatesUsingOnCost#665",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.trimCanidatesUsingOnCost()",
        "snippet": "  void trimCanidatesUsingOnCost() {\n    Iterator<Entry<String, FunctionState>> i;\n    for (i = fns.entrySet().iterator(); i.hasNext();) {\n      FunctionState fs = i.next().getValue();\n      if (fs.hasReferences()) {\n        // Only inline function if it decreases the code size.\n        boolean lowersCost = mimimizeCost(fs);\n        if (!lowersCost) {\n          // It shouldn't be inlined; remove it from the list.\n          i.remove();\n        }\n      } else if (!fs.canRemove()) {\n        // Don't bother tracking functions without references that can't be\n        // removed.\n        i.remove();\n      }\n    }\n  }\n",
        "begin_line": 665,
        "end_line": 682,
        "comment": "\n   * Remove entries from the list of candidates that can't be inlined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.visit#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.GatherNoSideEffectFunctions.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n      if (!inExterns && hasNoSideEffectsAnnotation(node)) {\n        traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n      }\n\n      if (node.isGetProp()) {\n        if (parent.isExprResult() &&\n            hasNoSideEffectsAnnotation(node)) {\n          noSideEffectFunctionNames.add(node);\n        }\n      } else if (node.isFunction()) {\n\n        // The annotation may attached to the function node, the\n        // variable declaration or assignment expression.\n        boolean hasAnnotation = hasNoSideEffectsAnnotation(node);\n        List<Node> nameNodes = Lists.newArrayList();\n        nameNodes.add(node.getFirstChild());\n\n        Node nameNode = null;\n\n        if (parent.isName()) {\n          Node gramp = parent.getParent();\n          if (gramp.isVar() &&\n              gramp.hasOneChild() &&\n              hasNoSideEffectsAnnotation(gramp)) {\n            hasAnnotation = true;\n          }\n\n          nameNodes.add(parent);\n        } else if (parent.isAssign()) {\n          if (hasNoSideEffectsAnnotation(parent)) {\n            hasAnnotation = true;\n          }\n\n          nameNodes.add(parent.getFirstChild());\n        }\n\n        if (hasAnnotation) {\n          noSideEffectFunctionNames.addAll(nameNodes);\n        }\n      }\n    }\n",
        "begin_line": 119,
        "end_line": 161,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineCostEstimator.append#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.append(java.lang.String)",
        "snippet": "    @Override\n    void append(String str){\n      last = str.charAt(str.length() - 1);\n      cost += str.length();\n      if (maxCost <= cost) {\n        continueProcessing = false;\n      }\n    }\n",
        "begin_line": 84,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineCostEstimator.CompiledSizeEstimator#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.CompiledSizeEstimator(int)",
        "snippet": "    CompiledSizeEstimator(int costThreshhold) {\n      this.maxCost = costThreshhold;\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1482
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineCostEstimator.add#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.add(com.google.javascript.rhino.Node)",
        "snippet": "    void add(Node root) {\n      CodeGenerator cg = new CodeGenerator(this);\n      cg.add(root);\n    }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1482
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineCostEstimator.getCost#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.getCost()",
        "snippet": "    int getCost() {\n      return cost;\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1482
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineCostEstimator.continueProcessing#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.continueProcessing()",
        "snippet": "    @Override\n    boolean continueProcessing() {\n      return continueProcessing;\n    }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1482
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineCostEstimator.getLastChar#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.getLastChar()",
        "snippet": "    @Override\n    char getLastChar() {\n      return last;\n    }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1482
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineCostEstimator.getCost#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.getCost(com.google.javascript.rhino.Node, int)",
        "snippet": "  static int getCost(Node root, int costThreshhold) {\n    CompiledSizeEstimator estimator = new CompiledSizeEstimator(costThreshhold);\n    estimator.add(root);\n    return estimator.getCost();\n  }\n",
        "begin_line": 45,
        "end_line": 49,
        "comment": "\n   * Determines the estimated size of the js snippet represented by the node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1482
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.CodeGenerator#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer)",
        "snippet": "  CodeGenerator(CodeConsumer consumer) {\n    this(consumer, null);\n  }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1482
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.startSourceMapping#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.startSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "  void startSourceMapping(Node node) {\n  }\n",
        "begin_line": 38,
        "end_line": 39,
        "comment": "\n   * Starts the source mapping for the given\n   * node at the current position.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1482
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endSourceMapping#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "  void endSourceMapping(Node node) {\n  }\n",
        "begin_line": 45,
        "end_line": 46,
        "comment": "\n   * Finishes the source mapping for the given\n   * node at the current position.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1482
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.transformBlock#221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformBlock(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node transformBlock(AstNode node) {\n    Node irNode = transform(node);\n    if (!irNode.isBlock()) {\n      if (irNode.isEmpty()) {\n        irNode.setType(Token.BLOCK);\n        irNode.setWasEmptyNode(true);\n      } else {\n        Node newBlock = newNode(Token.BLOCK, irNode);\n        newBlock.setLineno(irNode.getLineno());\n        newBlock.setCharno(irNode.getCharno());\n        maybeSetLengthFrom(newBlock, node);\n        irNode = newBlock;\n      }\n    }\n    return irNode;\n  }\n",
        "begin_line": 221,
        "end_line": 236,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1414
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addNonEmptyStatement#799",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addNonEmptyStatement(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context, boolean)",
        "snippet": "  private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild) {\n    Node nodeToProcess = n;\n\n    if (!allowNonBlockChild && !n.isBlock()) {\n      throw new Error(\"Missing BLOCK child.\");\n    }\n\n    // Strip unneeded blocks, that is blocks with <2 children unless\n    // the CodePrinter specifically wants to keep them.\n    if (n.isBlock()) {\n      int count = getNonEmptyChildCount(n, 2);\n      if (count == 0) {\n        if (cc.shouldPreserveExtraBlocks()) {\n          cc.beginBlock();\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        } else {\n          cc.endStatement(true);\n        }\n        return;\n      }\n\n      if (count == 1) {\n        // Hack around a couple of browser bugs:\n        //   Safari needs a block around function declarations.\n        //   IE6/7 needs a block around DOs.\n        Node firstAndOnlyChild = getFirstNonEmptyChild(n);\n        boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();\n        if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {\n          cc.beginBlock();\n          add(firstAndOnlyChild, Context.STATEMENT);\n          cc.maybeLineBreak();\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n          return;\n        } else {\n          // Continue with the only child.\n          nodeToProcess = firstAndOnlyChild;\n        }\n      }\n\n      if (count > 1) {\n        context = Context.PRESERVE_BLOCK;\n      }\n    }\n\n    if (nodeToProcess.isEmpty()) {\n      cc.endStatement(true);\n    } else {\n      add(nodeToProcess, context);\n\n      // VAR doesn't include ';' since it gets used in expressions - so any\n      // VAR in a statement context needs a call to endStatement() here.\n      if (nodeToProcess.isVar()) {\n        cc.endStatement();\n      }\n    }\n  }\n",
        "begin_line": 799,
        "end_line": 855,
        "comment": "\n   * Adds a block or expression, substituting a VOID with an empty statement.\n   * This is used for \"for (...);\" and \"if (...);\" type statements.\n   *\n   * @param n The node to print.\n   * @param context The context to determine how the node should be printed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1361
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.isOneExactlyFunctionOrDo#861",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.isLabel()) {\n      Node labeledStatement = n.getLastChild();\n      if (!labeledStatement.isBlock()) {\n        return isOneExactlyFunctionOrDo(labeledStatement);\n      } else {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs\n        // are skipped.\n        if (getNonEmptyChildCount(n, 2) == 1) {\n          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));\n        } else {\n          // Either a empty statement or an block with more than one child,\n          // way it isn't a FUNCTION or DO.\n          return false;\n        }\n      }\n    } else {\n      return (n.isFunction() || n.isDo());\n    }\n  }\n",
        "begin_line": 861,
        "end_line": 881,
        "comment": "\n   * @return Whether the Node is a DO or FUNCTION (with or without\n   * labels).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1361
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.getFirstNonEmptyChild#1145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(com.google.javascript.rhino.Node)",
        "snippet": "  private static Node getFirstNonEmptyChild(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.isBlock()) {\n        Node result = getFirstNonEmptyChild(c);\n        if (result != null) {\n          return result;\n        }\n      } else if (!c.isEmpty()) {\n        return c;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 1145,
        "end_line": 1157,
        "comment": " Gets the first non-empty child of the given node. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1361
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateStatement#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateStatement(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateStatement(Node n) {\n    switch (n.getType()) {\n      case Token.LABEL:\n        validateLabel(n);\n        return;\n      case Token.BLOCK:\n        validateBlock(n);\n        return;\n      case Token.FUNCTION:\n        validateFunctionStatement(n);\n        return;\n      case Token.WITH:\n        validateWith(n);\n        return;\n      case Token.FOR:\n        validateFor(n);\n        return;\n      case Token.WHILE:\n        validateWhile(n);\n        return;\n      case Token.DO:\n        validateDo(n);\n        return;\n      case Token.SWITCH:\n        validateSwitch(n);\n        return;\n      case Token.IF:\n        validateIf(n);\n        return;\n      case Token.VAR:\n        validateVar(n);\n        return;\n      case Token.EXPR_RESULT:\n        validateExprStmt(n);\n        return;\n      case Token.RETURN:\n        validateReturn(n);\n        return;\n      case Token.THROW:\n        validateThrow(n);\n        return;\n      case Token.TRY:\n        validateTry(n);\n        return;\n      case Token.BREAK:\n        validateBreak(n);\n        return;\n      case Token.CONTINUE:\n        validateContinue(n);\n        return;\n      case Token.EMPTY:\n        validateChildless(n);\n        return;\n      case Token.DEBUGGER:\n        validateChildless(n);\n        return;\n      default:\n        violation(\"Expected statement but was \"\n            + Token.name(n.getType()) + \".\", n);\n    }\n  }\n",
        "begin_line": 93,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateIf#462",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateIf(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateIf(Node n) {\n    validateNodeType(Token.IF, n);\n    validateMinimumChildCount(n, 2);\n    validateMaximumChildCount(n, 3);\n    validateExpression(n.getFirstChild());\n    validateBlock(n.getChildAtIndex(1));\n    if (n.getChildCount() == 3) {\n      validateBlock(n.getLastChild());\n    }\n  }\n",
        "begin_line": 462,
        "end_line": 471,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateMinimumChildCount#790",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateMinimumChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateMinimumChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 1) {\n      valid = n.hasChildren();\n    } else if (i == 2) {\n      valid = n.hasMoreThanOneChild();\n    } else {\n      valid = n.getChildCount() >= i;\n    }\n\n    if (!valid) {\n      violation(\n          \"Expected at least \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 790,
        "end_line": 805,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.FunctionVar#1052",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionVar.FunctionVar(com.google.javascript.rhino.Node)",
        "snippet": "    public FunctionVar(Node var) {\n      this.var = var;\n    }\n",
        "begin_line": 1052,
        "end_line": 1054,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.getName#1056",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionVar.getName()",
        "snippet": "    @Override\n    public String getName() {\n      return var.getFirstChild().getString();\n    }\n",
        "begin_line": 1056,
        "end_line": 1059,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.getFunctionNode#1061",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionVar.getFunctionNode()",
        "snippet": "    @Override\n    public Node getFunctionNode() {\n      return var.getFirstChild().getFirstChild();\n    }\n",
        "begin_line": 1061,
        "end_line": 1064,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.findNamedFunctions#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidateFunctions.findNamedFunctions(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {\n      if (!NodeUtil.isStatement(n)) {\n        // There aren't any interesting functions here.\n        return;\n      }\n\n      switch (n.getType()) {\n        // Functions expressions in the form of:\n        //   var fooFn = function(x) { return ... }\n        case Token.VAR:\n          Preconditions.checkState(n.hasOneChild());\n          Node nameNode = n.getFirstChild();\n          if (nameNode.isName() && nameNode.hasChildren()\n              && nameNode.getFirstChild().isFunction()) {\n            maybeAddFunction(new FunctionVar(n), t.getModule());\n          }\n          break;\n\n        // Named functions\n        // function Foo(x) { return ... }\n        case Token.FUNCTION:\n          Preconditions.checkState(NodeUtil.isStatementBlock(parent)\n              || parent.isLabel());\n          if (!NodeUtil.isFunctionExpression(n)) {\n            Function fn = new NamedFunction(n);\n            maybeAddFunction(fn, t.getModule());\n          }\n          break;\n      }\n    }\n",
        "begin_line": 175,
        "end_line": 204,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeSafeDispatcher.process#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
        "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.process(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  public T process(AstNode node) {\n    switch (node.getType()) {\n      case Token.ADD:\n      case Token.AND:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.OR:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return processInfixExpression((InfixExpression) node);\n      case Token.ARRAYLIT:\n        return processArrayLiteral((ArrayLiteral) node);\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return processAssignment((Assignment) node);\n      case Token.BITNOT:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.INC:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.TYPEOF:\n      case Token.VOID:\n        return processUnaryExpression((UnaryExpression) node);\n      case Token.BLOCK:\n        if (node instanceof Block) {\n          return processBlock((Block) node);\n        } else  if (node instanceof Scope) {\n          return processScope((Scope) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n      case Token.CALL:\n        return processFunctionCall((FunctionCall) node);\n      case Token.CASE:\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n      case Token.CATCH:\n        return processCatchClause((CatchClause) node);\n      case Token.COLON:\n        return processObjectProperty((ObjectProperty) node);\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n      case Token.EMPTY:\n        return (node instanceof EmptyExpression) ?\n            processEmptyExpression((EmptyExpression) node) :\n            processEmptyStatement((EmptyStatement) node);\n      case Token.EXPR_RESULT:\n      case Token.EXPR_VOID:\n        if (node instanceof ExpressionStatement) {\n          return processExpressionStatement((ExpressionStatement) node);\n        } else  if (node instanceof LabeledStatement) {\n          return processLabeledStatement((LabeledStatement) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.DEBUGGER:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        return processKeywordLiteral((KeywordLiteral) node);\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else  if (node instanceof ForLoop) {\n          return processForLoop((ForLoop) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.FUNCTION:\n        return processFunctionNode((FunctionNode) node);\n      case Token.GETELEM:\n        return processElementGet((ElementGet) node);\n      case Token.GETPROP:\n        return processPropertyGet((PropertyGet) node);\n      case Token.HOOK:\n        return processConditionalExpression((ConditionalExpression) node);\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n      case Token.LABEL:\n        return processLabel((Label) node);\n      case Token.LP:\n        return processParenthesizedExpression((ParenthesizedExpression) node);\n      case Token.NAME:\n        return processName((Name) node);\n      case Token.NEW:\n        return processNewExpression((NewExpression) node);\n      case Token.NUMBER:\n        return processNumberLiteral((NumberLiteral) node);\n      case Token.OBJECTLIT:\n        return processObjectLiteral((ObjectLiteral) node);\n      case Token.REGEXP:\n        return processRegExpLiteral((RegExpLiteral) node);\n      case Token.RETURN:\n        return processReturnStatement((ReturnStatement) node);\n      case Token.SCRIPT:\n        return processAstRoot((AstRoot) node);\n      case Token.STRING:\n        return processStringLiteral((StringLiteral) node);\n      case Token.SWITCH:\n        return processSwitchStatement((SwitchStatement) node);\n      case Token.THROW:\n        return processThrowStatement((ThrowStatement) node);\n      case Token.TRY:\n        return processTryStatement((TryStatement) node);\n      case Token.CONST:\n      case Token.VAR:\n        if (node instanceof VariableDeclaration) {\n          return processVariableDeclaration((VariableDeclaration) node);\n        } else  if (node instanceof VariableInitializer) {\n          return processVariableInitializer((VariableInitializer) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.WHILE:\n        return processWhileLoop((WhileLoop) node);\n      case Token.WITH:\n        return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n  }\n",
        "begin_line": 120,
        "end_line": 285,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1147
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processIfStatement#710",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processIfStatement(com.google.javascript.rhino.head.ast.IfStatement)",
        "snippet": "    @Override\n    Node processIfStatement(IfStatement statementNode) {\n      Node node = newNode(Token.IF);\n      node.addChildToBack(transform(statementNode.getCondition()));\n      node.addChildToBack(transformBlock(statementNode.getThenPart()));\n      if (statementNode.getElsePart() != null) {\n        node.addChildToBack(transformBlock(statementNode.getElsePart()));\n      }\n      return node;\n    }\n",
        "begin_line": 710,
        "end_line": 719,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1147
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.shouldPreserveExtraBlocks#291",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.shouldPreserveExtraBlocks()",
        "snippet": "  boolean shouldPreserveExtraBlocks() {\n    return false;\n  }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n   * If the body of a for loop or the then clause of an if statement has\n   * a single statement, should it be wrapped in a block?  Doing so can\n   * help when pretty-printing the code, and permits putting a debugging\n   * breakpoint on the statement inside the condition.\n   *\n   * @return {@boolean true} if such expressions should be wrapped\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1147
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineCostEstimator.getCost#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.getCost(com.google.javascript.rhino.Node)",
        "snippet": "  static int getCost(Node root) {\n    return getCost(root, Integer.MAX_VALUE);\n  }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "\n   * Determines the size of the js code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.getNonEmptyChildCount#1131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private static int getNonEmptyChildCount(Node n, int maxCount) {\n    int i = 0;\n    Node c = n.getFirstChild();\n    for (; c != null && i < maxCount; c = c.getNext()) {\n      if (c.isBlock()) {\n        i += getNonEmptyChildCount(c, maxCount-i);\n      } else if (!c.isEmpty()) {\n        i++;\n      }\n    }\n    return i;\n  }\n",
        "begin_line": 1131,
        "end_line": 1142,
        "comment": "\n   * @param maxCount The maximum number of children to look for.\n   * @return The number of children of this node that are non empty up to\n   * maxCount.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateMaximumChildCount#807",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateMaximumChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateMaximumChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 1) {\n      valid = !n.hasMoreThanOneChild();\n    } else {\n      valid = n.getChildCount() <= i;\n    }\n    if (!valid) {\n      violation(\n          \"Expected no more than \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 807,
        "end_line": 819,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isDo#2232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isDo()",
        "snippet": "  public boolean isDo() {\n    return this.getType() == Token.DO;\n  }\n",
        "begin_line": 2232,
        "end_line": 2234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1031
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.visit#295",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.VerifyConstants.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName()) {\n        String name = n.getString();\n        if (n.getString().isEmpty()) {\n          return;\n        }\n\n        boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (checkUserDeclarations) {\n          boolean expectedConst = false;\n          CodingConvention convention = compiler.getCodingConvention();\n          if (NodeUtil.isConstantName(n)\n              || NodeUtil.isConstantByConvention(convention, n, parent)) {\n            expectedConst = true;\n          } else {\n            expectedConst = false;\n\n            JSDocInfo info = null;\n            Var var = t.getScope().getVar(n.getString());\n            if (var != null) {\n              info = var.getJSDocInfo();\n            }\n\n            if (info != null && info.isConstant()) {\n              expectedConst = true;\n            } else {\n              expectedConst = false;\n            }\n          }\n\n          if (expectedConst) {\n            Preconditions.checkState(expectedConst == isConst,\n                \"The name %s is not annotated as constant.\", name);\n          } else {\n            Preconditions.checkState(expectedConst == isConst,\n                \"The name %s should not be annotated as constant.\", name);\n          }\n        }\n\n        Boolean value = constantMap.get(name);\n        if (value == null) {\n          constantMap.put(name, isConst);\n        } else {\n          Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name %s is not consistently annotated as constant.\", name);\n        }\n      }\n    }\n",
        "begin_line": 295,
        "end_line": 343,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processKeywordLiteral#733",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral)",
        "snippet": "    @Override\n    Node processKeywordLiteral(KeywordLiteral literalNode) {\n      return newNode(transformTokenType(literalNode.getType()));\n    }\n",
        "begin_line": 733,
        "end_line": 736,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineFunctions.process#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n\n    NodeTraversal.traverse(compiler, root, new FindCandidateFunctions());\n    if (fns.isEmpty()) {\n      return;  // Nothing left to do.\n    }\n    NodeTraversal.traverse(compiler, root,\n       new FindCandidatesReferences(fns, anonFns));\n    trimCanidatesNotMeetingMinimumRequirements();\n    if (fns.isEmpty()) {\n      return;  // Nothing left to do.\n    }\n\n    // Store the set of function names eligible for inlining and use this to\n    // prevent function names from being moved into temporaries during\n    // expression decomposition. If this movement were allowed it would prevent\n    // the Inline callback from finding the function calls.\n    //\n    // This pass already assumes these are constants, so this is safe for anyone\n    // using function inlining.\n    //\n    Set<String> fnNames = Sets.newHashSet(fns.keySet());\n    injector.setKnownConstants(fnNames);\n\n    trimCanidatesUsingOnCost();\n    if (fns.isEmpty()) {\n      return;  // Nothing left to do.\n    }\n    resolveInlineConflicts();\n    decomposeExpressions(fnNames);\n    NodeTraversal.traverse(compiler, root,\n        new CallVisitor(\n            fns, anonFns, new Inline(injector, specializationState)));\n\n    removeInlinedFunctions();\n  }\n",
        "begin_line": 112,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionInjector.doesLowerCost#797",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.doesLowerCost(com.google.javascript.rhino.Node, int, int, int, int, int, boolean)",
        "snippet": "  private boolean doesLowerCost(\n      Node fnNode, int callCost,\n      int directInlines, int costDeltaDirect,\n      int blockInlines, int costDeltaBlock,\n      boolean removable) {\n\n    // Determine the threshold value for this inequality:\n    //     inline_cost < call_cost\n    // But solve it for the function declaration size so the size of it\n    // is only calculated once and terminated early if possible.\n\n    int fnInstanceCount = directInlines + blockInlines - (removable ? 1 : 0);\n    // Prevent division by zero.\n    if (fnInstanceCount == 0) {\n      // Special case single reference function that are being block inlined:\n      // If the cost of the inline is greater than the function definition size,\n      // don't inline.\n      if (blockInlines > 0 && costDeltaBlock > 0) {\n        return false;\n      }\n      return true;\n    }\n\n    int costDelta = (directInlines * costDeltaDirect) +\n        (blockInlines * costDeltaBlock);\n    int threshold = (callCost - costDelta) / fnInstanceCount;\n\n    return InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;\n  }\n",
        "begin_line": 797,
        "end_line": 825,
        "comment": "\n   * @return Whether inlining will lower cost.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0971
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isControlStructure#1620",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructure(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isControlStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1620,
        "end_line": 1637,
        "comment": "\n   * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.opToStrNoFail#2180",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.opToStrNoFail(int)",
        "snippet": "  static String opToStrNoFail(int operator) {\n    String res = opToStr(operator);\n    if (res == null) {\n      throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));\n    }\n    return res;\n  }\n",
        "begin_line": 2180,
        "end_line": 2187,
        "comment": "\n   * Converts an operator's token value (see {@link Token}) to a string\n   * representation or fails.\n   *\n   * @param operator the operator's token value to convert\n   * @return the string representation\n   * @throws Error if the token value is not an operator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0898
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateExpression#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateExpression(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateExpression(Node n) {\n    switch (n.getType()) {\n      // Childless expressions\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        validateChildless(n);\n        return;\n\n      // General uniary ops\n      case Token.DELPROP:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.INC:\n      case Token.DEC:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.BITNOT:\n        validateUnaryOp(n);\n        return;\n\n      // General binary ops\n      case Token.COMMA:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n        validateBinaryOp(n);\n        return;\n\n      // Assignments\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        validateAssignmentExpression(n);\n        return;\n\n      case Token.HOOK:\n        validateTrinaryOp(n);\n        return;\n\n      // Node types that require special handling\n      case Token.STRING:\n        validateString(n);\n        return;\n\n      case Token.NUMBER:\n        validateNumber(n);\n        return;\n\n      case Token.NAME:\n        validateName(n);\n        return;\n\n      case Token.GETELEM:\n        validateBinaryOp(n);\n        return;\n\n      case Token.GETPROP:\n        validateGetProp(n);\n        return;\n\n      case Token.ARRAYLIT:\n        validateArrayLit(n);\n        return;\n\n      case Token.OBJECTLIT:\n        validateObjectLit(n);\n        return;\n\n      case Token.REGEXP:\n        validateRegExpLit(n);\n        return;\n\n      case Token.CALL:\n        validateCall(n);\n        return;\n\n      case Token.NEW:\n        validateNew(n);\n        return;\n\n      case Token.FUNCTION:\n        validateFunctionExpression(n);\n        return;\n\n      default:\n        violation(\"Expected expression but was \"\n            + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 155,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0884
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateString#637",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateString(Node n) {\n    validateNodeType(Token.STRING, n);\n    validateChildCount(n, 0);\n    try {\n      // Validate that getString doesn't throw\n      n.getString();\n    } catch (UnsupportedOperationException e) {\n      violation(\"Invalid STRING node.\", n);\n    }\n  }\n",
        "begin_line": 637,
        "end_line": 646,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0884
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.jsString#967",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.jsString(java.lang.String, boolean)",
        "snippet": "  private String jsString(String s, boolean useSlashV) {\n    int singleq = 0, doubleq = 0;\n\n    // could count the quotes and pick the optimal quote character\n    for (int i = 0; i < s.length(); i++) {\n      switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }\n    }\n\n    String doublequote, singlequote;\n    char quote;\n    if (singleq < doubleq) {\n      // more double quotes so escape the single quotes\n      quote = '\\'';\n      doublequote = \"\\\"\";\n      singlequote = \"\\\\\\'\";\n    } else {\n      // more single quotes so escape the doubles\n      quote = '\\\"';\n      doublequote = \"\\\\\\\"\";\n      singlequote = \"\\'\";\n    }\n\n    return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV);\n  }\n",
        "begin_line": 967,
        "end_line": 994,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0877
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addJsString#952",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addJsString(com.google.javascript.rhino.Node)",
        "snippet": "  private void addJsString(Node n) {\n    String s = n.getString();\n    boolean useSlashV = n.getBooleanProp(Node.SLASH_V);\n    if (useSlashV) {\n      add(jsString(n.getString(), useSlashV));\n    } else {\n      String cached = ESCAPED_JS_STRINGS.get(s);\n      if (cached == null) {\n        cached = jsString(n.getString(), useSlashV);\n        ESCAPED_JS_STRINGS.put(s, cached);\n      }\n      add(cached);\n    }\n  }\n",
        "begin_line": 952,
        "end_line": 965,
        "comment": " Outputs a js string, using the optimal (single/double) quote character ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.strEscape#1016",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.strEscape(java.lang.String, char, java.lang.String, java.lang.String, java.lang.String, java.nio.charset.CharsetEncoder, boolean)",
        "snippet": "  private static String strEscape(\n      String s, char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        // From the SingleEscapeCharacter grammar production.\n        case '\\b': sb.append(\"\\\\b\"); break;\n        case '\\f': sb.append(\"\\\\f\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n\n        // From LineTerminators (ES5 Section 7.3, Table 3)\n        case '\\u2028': sb.append(\"\\\\u2028\"); break;\n        case '\\u2029': sb.append(\"\\\\u2029\"); break;\n\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }\n    }\n    sb.append(quote);\n    return sb.toString();\n  }\n",
        "begin_line": 1016,
        "end_line": 1103,
        "comment": " Helper to escape javascript string as well as regular expression ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateUnaryOp#743",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateUnaryOp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateUnaryOp(Node n) {\n    validateChildCount(n, 1);\n    validateExpression(n.getFirstChild());\n  }\n",
        "begin_line": 743,
        "end_line": 746,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0811
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addConstant#269",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addConstant(java.lang.String)",
        "snippet": "  void addConstant(String newcode) {\n    add(newcode);\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0796
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processUnaryExpression#1013",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression)",
        "snippet": "    @Override\n    Node processUnaryExpression(UnaryExpression exprNode) {\n      int type = transformTokenType(exprNode.getType());\n      Node operand = transform(exprNode.getOperand());\n      if (type == Token.NEG && operand.isNumber()) {\n        operand.setDouble(-operand.getDouble());\n        return operand;\n      } else {\n        if (type == Token.DELPROP &&\n            !(operand.isGetProp() ||\n              operand.isGetElem() ||\n              operand.isName())) {\n          String msg =\n              \"Invalid delete operand. Only properties can be deleted.\";\n          errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);\n        } else  if (type == Token.INC || type == Token.DEC) {\n          if (!validAssignmentTarget(operand)) {\n            String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";\n            errorReporter.error(\n                msg,\n                sourceName,\n                operand.getLineno(), \"\", 0);\n          }\n        }\n\n        Node node = newNode(type, operand);\n        if (exprNode.isPostfix()) {\n          node.putBooleanProp(Node.INCRDECR_PROP, true);\n        }\n        return node;\n      }\n    }\n",
        "begin_line": 1013,
        "end_line": 1049,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0767
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.getSimplifiedName#135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSimplifiedName(Node node) {\n    if (node.isName()) {\n      String name = node.getString();\n      if (name != null && !name.isEmpty()) {\n        return name;\n      } else {\n        return null;\n      }\n    } else if (node.isGetProp()) {\n      return \"this.\" + node.getLastChild().getString();\n    }\n    return null;\n  }\n",
        "begin_line": 135,
        "end_line": 147,
        "comment": "\n   * Extract a name from a node.  In the case of GETPROP nodes,\n   * replace the namespace or object expression with \"this\" for\n   * simplicity and correctness at the expense of inefficiencies due\n   * to higher chances of name collisions.\n   *\n   * TODO(user) revisit.  it would be helpful to at least use fully\n   * qualified names in the case of namespaces.  Might not matter as\n   * much if this pass runs after \"collapsing properties\".\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.075
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineCostEstimator.addIdentifier#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.addIdentifier(java.lang.String)",
        "snippet": "    @Override\n    void addIdentifier(String identifier) {\n      add(ESTIMATED_IDENTIFIER);\n    }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0745
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateChildless#596",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateChildless(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateChildless(Node n) {\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 596,
        "end_line": 598,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0704
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processStringLiteral#910",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral)",
        "snippet": "    @Override\n    Node processStringLiteral(StringLiteral literalNode) {\n      String value = literalNode.getValue();\n      Node n = newStringNode(value);\n      if (value.indexOf('\\u000B') != -1) {\n        // NOTE(nicksantos): In JavaScript, there are 3 ways to\n        // represent a vertical tab: \\v, \\x0B, \\u000B.\n        // The \\v notation was added later, and is not understood\n        // on IE. So we need to preserve it as-is. This is really\n        // obnoxious, because we do not have a good way to represent\n        // how the original string was encoded without making the\n        // representation of strings much more complicated.\n        //\n        // To handle this, we look at the original source test, and\n        // mark the string as \\v-encoded or not. If a string is\n        // \\v encoded, then all the vertical tabs in that string\n        // will be encoded with a \\v.\n        int start = literalNode.getAbsolutePosition();\n        int end = start + literalNode.getLength();\n        if (start < sourceString.length() &&\n            (sourceString.substring(\n                 start, Math.min(sourceString.length(), end))\n             .indexOf(\"\\\\v\") != -1)) {\n          n.putBooleanProp(Node.SLASH_V, true);\n        }\n      }\n      return n;\n    }\n",
        "begin_line": 910,
        "end_line": 937,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0687
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newStringNode#1347",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(java.lang.String)",
        "snippet": "  private Node newStringNode(String value) {\n    return IR.string(value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1347,
        "end_line": 1349,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0687
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.add#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.add(java.lang.String)",
        "snippet": "  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    } else if (c == '/' && getLastChar() == '/') {\n      // Do not allow a forward slash to appear after a DIV.\n      // For example,\n      // REGEXP DIV REGEXP\n      // is valid and should print like\n      // / // / /\n      append(\" \");\n    }\n\n    append(newcode);\n  }\n",
        "begin_line": 181,
        "end_line": 204,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0677
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefinitionsRemover.getDefinition#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.getDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  static Definition getDefinition(Node n, boolean isExtern) {\n    // TODO(user): Since we have parent pointers handy. A lot of constructors\n    // can be simplified.\n\n    // This logic must match #isDefinitionNode\n    Node parent = n.getParent();\n    if (parent == null) {\n      return null;\n    }\n\n    if (NodeUtil.isVarDeclaration(n) && n.hasChildren()) {\n      return new VarDefinition(n, isExtern);\n    } else if (parent.isFunction() && parent.getFirstChild() == n) {\n      if (!NodeUtil.isFunctionExpression(parent)) {\n        return new NamedFunctionDefinition(parent, isExtern);\n      } else if (!n.getString().equals(\"\")) {\n        return new FunctionExpressionDefinition(parent, isExtern);\n      }\n    } else if (parent.isAssign() && parent.getFirstChild() == n) {\n      return new AssignmentDefinition(parent, isExtern);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(),\n          isExtern);\n    } else if (parent.isParamList()) {\n      Node function = parent.getParent();\n      return new FunctionArgumentDefinition(function, n, isExtern);\n    }\n    return null;\n  }\n",
        "begin_line": 37,
        "end_line": 65,
        "comment": "\n   * @return an {@link Definition} object if the node contains a definition or\n   *     {@code null} otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0665
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isString#2348",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isString()",
        "snippet": "  public boolean isString() {\n    return this.getType() == Token.STRING;\n  }\n",
        "begin_line": 2348,
        "end_line": 2350,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0648
        },
        "num_failing_tests": 2
    },
    {
        "name": "MarkNoSideEffectCalls.visit#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.SetNoSideEffectCallProperty.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n      if (!node.isCall() && !node.isNew()) {\n        return;\n      }\n\n      Collection<Definition> definitions =\n          defFinder.getDefinitionsReferencedAt(node.getFirstChild());\n      if (definitions == null) {\n        return;\n      }\n\n      for (Definition def : definitions) {\n        Node lValue = def.getLValue();\n        Preconditions.checkNotNull(lValue);\n        if (!noSideEffectFunctionNames.contains(lValue) &&\n            definitionTypeContainsFunctionType(def)) {\n          return;\n        }\n      }\n\n      node.setSideEffectFlags(Node.NO_SIDE_EFFECTS);\n    }\n",
        "begin_line": 175,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0648
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newString#512",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(java.lang.String)",
        "snippet": "  public static Node newString(String str) {\n    return new StringNode(Token.STRING, str);\n  }\n",
        "begin_line": 512,
        "end_line": 514,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.string#414",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.string(java.lang.String)",
        "snippet": "  public static Node string(String s) {\n    return Node.newString(s);\n  }\n",
        "begin_line": 414,
        "end_line": 416,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setLineLengthThreshold#612",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineLengthThreshold(int)",
        "snippet": "    Builder setLineLengthThreshold(int threshold) {\n      this.lineLengthThreshold = threshold;\n      return this;\n    }\n",
        "begin_line": 612,
        "end_line": 615,
        "comment": "\n     * Sets the line length threshold that will be used to determine\n     * when to break lines, if line breaking is on.\n     *\n     * @param threshold The line length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0637
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endStatement#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement()",
        "snippet": "  void endStatement() {\n    endStatement(false);\n  }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\n   * Indicates the end of a statement and a ';' may need to be added.\n   * But we don't add it now, in case we're at the end of a block (in which\n   * case we don't have to add the ';').\n   * See maybeEndStatement()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0623
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endStatement#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement(boolean)",
        "snippet": "  void endStatement(boolean needSemiColon) {\n    if (needSemiColon) {\n      append(\";\");\n      maybeLineBreak();\n      statementNeedsEnded = false;\n    } else if (statementStarted) {\n      statementNeedsEnded = true;\n    }\n  }\n",
        "begin_line": 138,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0623
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.getLastChar#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getLastChar()",
        "snippet": "    @Override\n    char getLastChar() {\n      return (code.length() > 0) ? code.charAt(code.length() - 1) : '\\0';\n    }\n",
        "begin_line": 205,
        "end_line": 208,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionInjector.canInlineReferenceDirectly#664",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.canInlineReferenceDirectly(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          if (NodeUtil.mayEffectMutableState(cArg)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }\n",
        "begin_line": 664,
        "end_line": 722,
        "comment": "\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0618
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.append#442",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.append(java.lang.String)",
        "snippet": "    @Override\n    void append(String str) {\n      code.append(str);\n      lineLength += str.length();\n    }\n",
        "begin_line": 442,
        "end_line": 446,
        "comment": "\n     * Appends a string to the code, keeping track of the current line length.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0617
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.notePreferredLineBreak#508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.notePreferredLineBreak()",
        "snippet": "    @Override\n    void notePreferredLineBreak() {\n      preferredBreakPosition = code.length();\n    }\n",
        "begin_line": 508,
        "end_line": 511,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0617
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.maybeEndStatement#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.maybeEndStatement()",
        "snippet": "  void maybeEndStatement() {\n    // Add a ';' if we need to.\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n      endLine();\n      statementNeedsEnded = false;\n    }\n    statementStarted = true;\n  }\n",
        "begin_line": 152,
        "end_line": 161,
        "comment": "\n   * This is to be called when we're in a statement. If the prev statement\n   * needs to be ended, add a ';'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0615
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.isWordChar#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isWordChar(char)",
        "snippet": "  static boolean isWordChar(char ch) {\n    return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));\n  }\n",
        "begin_line": 277,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0615
        },
        "num_failing_tests": 2
    },
    {
        "name": "ParserRunner.initResourceConfig#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.initResourceConfig()",
        "snippet": "  private static synchronized void initResourceConfig() {\n    if (annotationNames != null) {\n      return;\n    }\n\n    ResourceBundle config = ResourceBundle.getBundle(configResource);\n    annotationNames = extractList(config.getString(\"jsdoc.annotations\"));\n    suppressionNames = extractList(config.getString(\"jsdoc.suppressions\"));\n  }\n",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0614
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.newCompilerOptions#1516",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.newCompilerOptions()",
        "snippet": "  protected CompilerOptions newCompilerOptions() {\n    return new CompilerOptions();\n  }\n",
        "begin_line": 1516,
        "end_line": 1518,
        "comment": "\n   * Allow subclasses to override the default CompileOptions object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0613
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initCompilerOptionsIfTesting#1520",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initCompilerOptionsIfTesting()",
        "snippet": "  void initCompilerOptionsIfTesting() {\n    if (options == null) {\n      // initialization for tests that don't initialize the compiler\n      // by the normal mechanisms.\n      initOptions(newCompilerOptions());\n    }\n  }\n",
        "begin_line": 1520,
        "end_line": 1526,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0613
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.parseTestCode#1534",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseTestCode(java.lang.String)",
        "snippet": "  @Override\n  Node parseTestCode(String js) {\n    initCompilerOptionsIfTesting();\n    CompilerInput input = new CompilerInput(\n        SourceFile.fromCode(\"[testcode]\", js));\n    if (inputsById == null) {\n      inputsById = Maps.newHashMap();\n    }\n    putCompilerInput(input.getInputId(), input);\n    return input.getAstRoot(this);\n  }\n",
        "begin_line": 1534,
        "end_line": 1544,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0613
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.MappedCodePrinter#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.MappedCodePrinter(int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    MappedCodePrinter(\n        int lineLengthThreshold,\n        boolean createSrcMap,\n        SourceMap.DetailLevel sourceMapDetailLevel) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      this.lineLengthThreshold = lineLengthThreshold <= 0 ? Integer.MAX_VALUE :\n        lineLengthThreshold;\n      this.createSrcMap = createSrcMap;\n      this.sourceMapDetailLevel = sourceMapDetailLevel;\n      this.mappings = createSrcMap ? new ArrayDeque<Mapping>() : null;\n      this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;\n    }\n",
        "begin_line": 57,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.startSourceMapping#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.startSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void startSourceMapping(Node node) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      Preconditions.checkState(node != null);\n      if (createSrcMap\n          && node.getSourceFileName() != null\n          && node.getLineno() > 0\n          && sourceMapDetailLevel.apply(node)) {\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        Mapping mapping = new Mapping();\n        mapping.node = node;\n        mapping.start = new FilePosition(line, index);\n        mappings.push(mapping);\n        allMappings.add(mapping);\n      }\n    }\n",
        "begin_line": 89,
        "end_line": 106,
        "comment": "\n     * Starts the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.endSourceMapping#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.endSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void endSourceMapping(Node node) {\n      if (createSrcMap && !mappings.isEmpty() && mappings.peek().node == node) {\n        Mapping mapping = mappings.pop();\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        mapping.end = new FilePosition(line, index);\n      }\n    }\n",
        "begin_line": 112,
        "end_line": 121,
        "comment": "\n     * Finishes the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.getCode#201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getCode()",
        "snippet": "    public String getCode() {\n      return code.toString();\n    }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.CompactCodePrinter#431",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.CompactCodePrinter(boolean, boolean, int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    private CompactCodePrinter(boolean lineBreak,\n        boolean preferLineBreakAtEndOfFile, int lineLengthThreshold,\n        boolean createSrcMap, SourceMap.DetailLevel sourceMapDetailLevel) {\n      super(lineLengthThreshold, createSrcMap, sourceMapDetailLevel);\n      this.lineBreak = lineBreak;\n      this.preferLineBreakAtEndOfFile = preferLineBreakAtEndOfFile;\n    }\n",
        "begin_line": 431,
        "end_line": 437,
        "comment": "\n   * @param lineBreak break the lines a bit more aggressively\n   * @param lineLengthThreshold The length of a line after which we force\n   *                            a newline when possible.\n   * @param createSrcMap Whether to gather source position\n   *                            mapping information when printing.\n   * @param sourceMapDetailLevel A filter to control which nodes get mapped into\n   *     the source map.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.endFile#513",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.endFile()",
        "snippet": "    @Override\n    void endFile() {\n      super.endFile();\n      if (!preferLineBreakAtEndOfFile) {\n        return;\n      }\n      if (lineLength > lineLengthThreshold / 2) {\n        // Add an extra break at end of file.\n        append(\";\");\n        startNewLine();\n      } else if (prevCutPosition > 0) {\n        // Shift the previous break to end of file by replacing it with a\n        // <space> and adding a new break at end of file. Adding the space\n        // handles cases like instanceof\\nfoo. (it would be nice to avoid this)\n        code.setCharAt(prevCutPosition, ' ');\n        lineStartPosition = prevLineStartPosition;\n        lineLength = code.length() - lineStartPosition;\n        reportLineCut(lineIndex, prevCutPosition + 1, false);\n        lineIndex--;\n        prevCutPosition = 0;\n        prevLineStartPosition = 0;\n        append(\";\");\n        startNewLine();\n      } else {\n        // A small file with no line breaks. We do nothing in this case to\n        // avoid excessive line breaks. It's not ideal if a lot of these pile\n        // up, but that is reasonably unlikely.\n      }\n    }\n",
        "begin_line": 513,
        "end_line": 541,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.Builder#564",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.Builder(com.google.javascript.rhino.Node)",
        "snippet": "    Builder(Node node) {\n      root = node;\n    }\n",
        "begin_line": 564,
        "end_line": 566,
        "comment": "\n     * Sets the root node from which to generate the source code.\n     * @param node The root node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.build#657",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.build()",
        "snippet": "    String build() {\n      if (root == null) {\n        throw new IllegalStateException(\n            \"Cannot build without root node being specified\");\n      }\n\n      Format outputFormat = outputTypes\n          ? Format.TYPED\n          : prettyPrint\n              ? Format.PRETTY\n              : Format.COMPACT;\n\n      return toSource(root, outputFormat, lineBreak, preferLineBreakAtEndOfFile,\n          lineLengthThreshold, sourceMap, sourceMapDetailLevel, outputCharset,\n          tagAsStrict);\n    }\n",
        "begin_line": 657,
        "end_line": 672,
        "comment": "\n     * Generates the source code and returns it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.toSource#684",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodePrinter.Format, boolean, boolean, int, com.google.javascript.jscomp.SourceMap, com.google.javascript.jscomp.SourceMap.DetailLevel, java.nio.charset.Charset, boolean)",
        "snippet": "  private static String toSource(Node root, Format outputFormat,\n                                 boolean lineBreak,  boolean preferEndOfFileBreak,\n                                 int lineLengthThreshold,\n                                 SourceMap sourceMap,\n                                 SourceMap.DetailLevel sourceMapDetailLevel,\n                                 Charset outputCharset,\n                                 boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel != null);\n\n    boolean createSourceMap = (sourceMap != null);\n    MappedCodePrinter mcp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, preferEndOfFileBreak, lineLengthThreshold,\n            createSourceMap, sourceMapDetailLevel)\n        : new PrettyCodePrinter(\n            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(mcp, outputCharset)\n        : new CodeGenerator(mcp, outputCharset);\n\n    if (tagAsStrict) {\n      cg.tagAsStrict();\n    }\n\n    cg.add(root);\n    mcp.endFile();\n\n    String code = mcp.getCode();\n\n    if (createSourceMap) {\n      mcp.generateSourceMap(sourceMap);\n    }\n\n    return code;\n  }\n",
        "begin_line": 684,
        "end_line": 720,
        "comment": "\n   * Converts a tree to js code\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.continueProcessing#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.continueProcessing()",
        "snippet": "  boolean continueProcessing() {\n    return true;\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n   * Provides a means of interrupting the CodeGenerator. Derived classes should\n   * return false to stop further processing.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endFile#303",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFile()",
        "snippet": "  void endFile() {}\n",
        "begin_line": 303,
        "end_line": 303,
        "comment": " Called when we're at the end of a file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.CodeGenerator#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer, java.nio.charset.Charset)",
        "snippet": "  CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset) {\n    cc = consumer;\n    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {\n      // If we want our default (pretending to be UTF-8, but escaping anything\n      // outside of straight ASCII), then don't use the encoder, but\n      // just special-case the code.  This keeps the normal path through\n      // the code identical to how it's been for years.\n      this.outputCharsetEncoder = null;\n    } else {\n      this.outputCharsetEncoder = outputCharset.newEncoder();\n    }\n  }\n",
        "begin_line": 48,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0609
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.add#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node)",
        "snippet": "  void add(Node n) {\n    add(n, Context.OTHER);\n  }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0609
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionInjector.inlineCostDelta#856",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(com.google.javascript.rhino.Node, java.util.Set<java.lang.String>, com.google.javascript.jscomp.FunctionInjector.InliningMode)",
        "snippet": "  private static int inlineCostDelta(\n      Node fnNode, Set<String> namesToAlias, InliningMode mode) {\n    // The part of the function that is never inlined:\n    //    \"function xx(xx,xx){}\" (15 + (param count * 3) -1;\n    int paramCount = NodeUtil.getFunctionParameters(fnNode).getChildCount();\n    int commaCount = (paramCount > 1) ? paramCount - 1 : 0;\n    int costDeltaFunctionOverhead = 15 + commaCount +\n        (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);\n\n    Node block = fnNode.getLastChild();\n    if (!block.hasChildren()) {\n      // Assume the inline cost is zero for empty functions.\n      return -costDeltaFunctionOverhead;\n    }\n\n    if (mode == InliningMode.DIRECT) {\n      // The part of the function that is inlined using direct inlining:\n      //    \"return \" (7)\n      return -(costDeltaFunctionOverhead + 7);\n    } else {\n      int aliasCount = namesToAlias.size();\n\n      // Originally, we estimated purely base on the function code size, relying\n      // on later optimizations. But that did not produce good results, so here\n      // we try to estimate the something closer to the actual inlined coded.\n\n      // NOTE 1: Result overhead is only if there is an assignment, but\n      // getting that information would require some refactoring.\n      // NOTE 2: The aliasing overhead is currently an under-estimate,\n      // as some parameters are aliased because of the parameters used.\n      // Perhaps we should just assume all parameters will be aliased?\n      final int INLINE_BLOCK_OVERHEAD = 4; // \"X:{}\"\n      final int PER_RETURN_OVERHEAD = 2;   // \"return\" --> \"break X\"\n      final int PER_RETURN_RESULT_OVERHEAD = 3; // \"XX=\"\n      final int PER_ALIAS_OVERHEAD = 3; // \"XX=\"\n\n      // TODO(johnlenz): Counting the number of returns is relatively expensive\n      //   this information should be determined during the traversal and\n      //   cached.\n      int returnCount = NodeUtil.getNodeTypeReferenceCount(\n          block, Token.RETURN, new NodeUtil.MatchShallowStatement());\n      int resultCount = (returnCount > 0) ? returnCount - 1 : 0;\n      int baseOverhead = (returnCount > 0) ? INLINE_BLOCK_OVERHEAD : 0;\n\n      int overhead = baseOverhead\n          + returnCount * PER_RETURN_OVERHEAD\n          + resultCount * PER_RETURN_RESULT_OVERHEAD\n          + aliasCount * PER_ALIAS_OVERHEAD;\n\n      return (overhead - costDeltaFunctionOverhead);\n    }\n  }\n",
        "begin_line": 856,
        "end_line": 907,
        "comment": "\n   * @return The difference between the function definition cost and\n   *     inline cost.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0604
        },
        "num_failing_tests": 1
    },
    {
        "name": "LoggerErrorManager.LoggerErrorManager#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.LoggerErrorManager(com.google.javascript.jscomp.MessageFormatter, java.util.logging.Logger)",
        "snippet": "  public LoggerErrorManager(MessageFormatter formatter, Logger logger) {\n    this.formatter = formatter;\n    this.logger = logger;\n  }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n   * Creates an instance.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0593
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.Compiler#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler()",
        "snippet": "  public Compiler() {\n    this((PrintStream) null);\n  }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "\n   * Creates a Compiler that reports errors and warnings to its logger.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0593
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.initOptions#242",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = composedGuards;\n  }\n",
        "begin_line": 242,
        "end_line": 305,
        "comment": "\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0593
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionInjector.inliningLowersCost#736",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.inliningLowersCost(com.google.javascript.jscomp.JSModule, com.google.javascript.rhino.Node, java.util.Collection<? extends com.google.javascript.jscomp.FunctionInjector.Reference>, java.util.Set<java.lang.String>, boolean, boolean)",
        "snippet": "  boolean inliningLowersCost(\n      JSModule fnModule, Node fnNode, Collection<? extends Reference> refs,\n      Set<String> namesToAlias, boolean isRemovable, boolean referencesThis) {\n    int referenceCount = refs.size();\n    if (referenceCount == 0) {\n      return true;\n    }\n\n    int referencesUsingBlockInlining = 0;\n\n    boolean checkModules = isRemovable && fnModule != null;\n    JSModuleGraph moduleGraph = compiler.getModuleGraph();\n\n    for (Reference ref : refs) {\n      if (ref.mode == InliningMode.BLOCK) {\n        referencesUsingBlockInlining++;\n      }\n\n      // Check if any of the references cross the module boundaries.\n      if (checkModules && ref.module != null) {\n        if (ref.module != fnModule &&\n            !moduleGraph.dependsOn(ref.module, fnModule)) {\n          // Calculate the cost as if the function were non-removable,\n          // if it still lowers the cost inline it.\n          isRemovable = false;\n          checkModules = false;  // no need to check additional modules.\n        }\n      }\n    }\n\n    int referencesUsingDirectInlining = referenceCount -\n        referencesUsingBlockInlining;\n\n    // Don't bother calculating the cost of function for simple functions where\n    // possible.\n    // However, when inlining a complex function, even a single reference may be\n    // larger than the original function if there are many returns (resulting\n    // in additional assignments) or many parameters that need to be aliased\n    // so use the cost estimating.\n    if (referenceCount == 1 && isRemovable &&\n        referencesUsingDirectInlining == 1) {\n      return true;\n    }\n\n    int callCost = estimateCallCost(fnNode, referencesThis);\n    int overallCallCost = callCost * referenceCount;\n\n    int costDeltaDirect = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.DIRECT);\n    int costDeltaBlock = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.BLOCK);\n\n    return doesLowerCost(fnNode, overallCallCost,\n        referencesUsingDirectInlining, costDeltaDirect,\n        referencesUsingBlockInlining, costDeltaBlock,\n        isRemovable);\n  }\n",
        "begin_line": 736,
        "end_line": 792,
        "comment": "\n   * Determine if inlining the function is likely to reduce the code size.\n   * @param namesToAlias\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0591
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionInjector.estimateCallCost#832",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.estimateCallCost(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private static int estimateCallCost(Node fnNode, boolean referencesThis) {\n    Node argsNode = NodeUtil.getFunctionParameters(fnNode);\n    int numArgs = argsNode.getChildCount();\n\n    int callCost = NAME_COST_ESTIMATE + PAREN_COST;\n    if (numArgs > 0) {\n      callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);\n    }\n\n    if (referencesThis) {\n      // TODO(johnlenz): Update this if we start supporting inlining\n      // other functions that reference this.\n      // The only functions that reference this that are currently inlined\n      // are those that are called via \".call\" with an explicit \"this\".\n      callCost += 5 + 5;  // \".call\" + \"this,\"\n    }\n\n    return callCost;\n  }\n",
        "begin_line": 832,
        "end_line": 850,
        "comment": "\n   * Gets an estimate of the cost in characters of making the function call:\n   * the sum of the identifiers and the separators.\n   * @param referencesThis\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0591
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getCount#2683",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getCount(com.google.javascript.rhino.Node, com.google.common.base.Predicate<com.google.javascript.rhino.Node>, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {\n    int total = 0;\n\n    if (pred.apply(n)) {\n      total++;\n    }\n\n    if (traverseChildrenPred.apply(n)) {\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        total += getCount(c, pred, traverseChildrenPred);\n      }\n    }\n\n    return total;\n  }\n",
        "begin_line": 2683,
        "end_line": 2698,
        "comment": "\n   * @return The number of times the the predicate is true for the node\n   * or any of its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processExpressionStatement#576",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement)",
        "snippet": "    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n",
        "begin_line": 576,
        "end_line": 581,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0574
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isVar#2380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isVar()",
        "snippet": "  public boolean isVar() {\n    return this.getType() == Token.VAR;\n  }\n",
        "begin_line": 2380,
        "end_line": 2382,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0573
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionInjector.canInlineReferenceToFunction#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.canInlineReferenceToFunction(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.util.Set<java.lang.String>, com.google.javascript.jscomp.FunctionInjector.InliningMode, boolean, boolean)",
        "snippet": "  CanInlineResult canInlineReferenceToFunction(NodeTraversal t,\n      Node callNode, Node fnNode, Set<String> needAliases,\n      InliningMode mode, boolean referencesThis, boolean containsFunctions) {\n    // TODO(johnlenz): This function takes too many parameter, without\n    // context.  Modify the API to take a structure describing the function.\n\n    // Allow direct function calls or \"fn.call\" style calls.\n    if (!isSupportedCallType(callNode)) {\n      return CanInlineResult.NO;\n    }\n\n    // Limit where functions that contain functions can be inline.  Introducing\n    // an inner function into another function can capture a variable and cause\n    // a memory leak.  This isn't a problem in the global scope as those values\n    // last until explicitly cleared.\n    if (containsFunctions) {\n      if (!assumeMinimumCapture && !t.inGlobalScope()) {\n        // TODO(johnlenz): Allow inlining into any scope without local names or\n        // inner functions.\n        return CanInlineResult.NO;\n      } else if (NodeUtil.isWithinLoop(callNode)) {\n        // An inner closure maybe relying on a local value holding a value for a\n        // single iteration through a loop.\n        return CanInlineResult.NO;\n      }\n    }\n\n    // TODO(johnlenz): Add support for 'apply'\n    if (referencesThis && !NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Allow 'this' references to be replaced with a\n      // global 'this' object.\n      return CanInlineResult.NO;\n    }\n\n    if (mode == InliningMode.DIRECT) {\n      return canInlineReferenceDirectly(callNode, fnNode);\n    } else {\n      return canInlineReferenceAsStatementBlock(\n          t, callNode, fnNode, needAliases);\n    }\n  }\n",
        "begin_line": 175,
        "end_line": 215,
        "comment": "\n   * @param t  The traversal use to reach the call site.\n   * @param callNode The CALL node.\n   * @param fnNode The function to evaluate for inlining.\n   * @param needAliases A set of function parameter names that can not be\n   *     used without aliasing. Returned by getUnsafeParameterNames().\n   * @param mode Inlining mode to be used.\n   * @param referencesThis Whether fnNode contains references to its this\n   *     object.\n   * @param containsFunctions Whether fnNode contains inner functions.\n   * @return Whether the inlining can occur.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.VarDefinition#372",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.VarDefinition.VarDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    VarDefinition(Node node, boolean inExterns) {\n      super(inExterns);\n      Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n      Preconditions.checkArgument(node.hasChildren(),\n          \"VAR Declaration of %sshould be assigned a value.\", node.getString());\n      name = node;\n    }\n",
        "begin_line": 372,
        "end_line": 378,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0568
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.getLValue#391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.VarDefinition.getLValue()",
        "snippet": "    @Override\n    public Node getLValue() {\n      return name;\n    }\n",
        "begin_line": 391,
        "end_line": 394,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0568
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.getRValue#396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.VarDefinition.getRValue()",
        "snippet": "    @Override\n    public Node getRValue() {\n      return name.getFirstChild();\n    }\n",
        "begin_line": 396,
        "end_line": 399,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0568
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionInjector.isDirectCallNodeReplacementPossible#519",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.isDirectCallNodeReplacementPossible(com.google.javascript.rhino.Node)",
        "snippet": "  boolean isDirectCallNodeReplacementPossible(Node fnNode) {\n    // Only inline single-statement functions\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    // Check if this function is suitable for direct replacement of a CALL node:\n    // a function that consists of single return that returns an expression.\n    if (!block.hasChildren()) {\n      // special case empty functions.\n      return true;\n    } else if (block.hasOneChild()) {\n      // Only inline functions that return something.\n      if (block.getFirstChild().isReturn()\n          && block.getFirstChild().getFirstChild() != null) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 519,
        "end_line": 537,
        "comment": "\n   * Checks if the given function matches the criteria for an inlinable\n   * function, and if so, adds it to our set of inlinable functions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0561
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#1508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "  boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n    if (type != node.getType()\n        || getChildCount() != node.getChildCount()\n        || this.getClass() != node.getClass()) {\n      return false;\n    }\n\n    if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n      return false;\n    }\n\n    if (type == Token.INC || type == Token.DEC) {\n      int post1 = this.getIntProp(INCRDECR_PROP);\n      int post2 = node.getIntProp(INCRDECR_PROP);\n      if (post1 != post2) {\n        return false;\n      }\n    } else if (type == Token.STRING || type == Token.STRING_KEY) {\n      if (type == Token.STRING_KEY) {\n        int quoted1 = this.getIntProp(QUOTED_PROP);\n        int quoted2 = node.getIntProp(QUOTED_PROP);\n        if (quoted1 != quoted2) {\n          return false;\n        }\n      }\n\n      int slashV1 = this.getIntProp(SLASH_V);\n      int slashV2 = node.getIntProp(SLASH_V);\n      if (slashV1 != slashV2) {\n        return false;\n      }\n    } else if (type == Token.CALL) {\n      if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n        return false;\n      }\n    }\n\n    if (recurse) {\n      Node n, n2;\n      for (n = first, n2 = node.first;\n           n != null;\n           n = n.next, n2 = n2.next) {\n        if (!n.isEquivalentTo(n2, compareJsType, true)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 1508,
        "end_line": 1557,
        "comment": "\n   * @param compareJsType Whether to compare the JSTypes of the nodes.\n   * @param recurse Whether to compare the children of the current node, if\n   *    not only the the count of the children are compared.\n   * @return Whether this node is equivalent semantically to the provided node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0557
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.maybeAddFunction#242",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.maybeAddFunction(com.google.javascript.jscomp.InlineFunctions.Function, com.google.javascript.jscomp.JSModule)",
        "snippet": "  private void maybeAddFunction(Function fn, JSModule module) {\n    String name = fn.getName();\n    FunctionState fs = getOrCreateFunctionState(name);\n\n    // TODO(johnlenz): Maybe \"smarten\" FunctionState by adding this logic\n    // to it?\n\n    // If the function has multiple definitions, don't inline it.\n    if (fs.hasExistingFunctionDefinition()) {\n      fs.setInline(false);\n    } else {\n      // verify the function hasn't already been marked as \"don't inline\"\n      if (fs.canInline()) {\n        // store it for use when inlining.\n        fs.setFn(fn);\n        if (injector.isDirectCallNodeReplacementPossible(\n            fn.getFunctionNode())) {\n          fs.inlineDirectly(true);\n        }\n\n        // verify the function meets all the requirements.\n        // TODO(johnlenz): Minimum requirement checks are about 5% of the\n        // runtime cost of this pass.\n        if (!isCandidateFunction(fn)) {\n          // It doesn't meet the requirements.\n          fs.setInline(false);\n        }\n\n        // Set the module and gather names that need temporaries.\n        if (fs.canInline()) {\n          fs.setModule(module);\n\n          Node fnNode = fn.getFunctionNode();\n          Set<String> namesToAlias =\n              FunctionArgumentInjector.findModifiedParameters(fnNode);\n          if (!namesToAlias.isEmpty()) {\n            fs.inlineDirectly(false);\n            fs.setNamesToAlias(namesToAlias);\n          }\n\n          Node block = NodeUtil.getFunctionBody(fnNode);\n          if (NodeUtil.referencesThis(block)) {\n            fs.setReferencesThis(true);\n          }\n\n          if (NodeUtil.containsFunction(block)) {\n            fs.setHasInnerFunctions(true);\n            // If there are inner functions, we can inline into global scope\n            // if there are no local vars or named functions.\n            // TODO(johnlenz): this can be improved by looking at the possible\n            // values for locals.  If there are simple values, or constants\n            // we could still inline.\n            if (!assumeMinimumCapture && hasLocalNames(fnNode)) {\n              fs.setInline(false);\n            }\n          }\n        }\n\n        // Check if block inlining is allowed.\n        if (fs.canInline() && !fs.canInlineDirectly()) {\n          if (!blockFunctionInliningEnabled) {\n            fs.setInline(false);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 242,
        "end_line": 308,
        "comment": "\n   * Updates the FunctionState object for the given function. Checks if the\n   * given function matches the criteria for an inlinable function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0557
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.enables#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup otherGroup) {\n    if (level.isOn()) {\n      for (DiagnosticType type : otherGroup.getTypes()) {\n        if (group.matches(type)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0553
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getLastChild#544",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastChild()",
        "snippet": "  public Node getLastChild() {\n    return last;\n  }\n",
        "begin_line": 544,
        "end_line": 546,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0552
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setWarningLevel#1047",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n  }\n",
        "begin_line": 1047,
        "end_line": 1049,
        "comment": "\n   * Configure the given type of warning to the given level.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0552
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getErrorCount#2068",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorManager.getErrorCount();\n  }\n",
        "begin_line": 2068,
        "end_line": 2070,
        "comment": "\n   * Gets the number of errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0552
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.addWarningsGuard#1073",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.addWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  public void addWarningsGuard(WarningsGuard guard) {\n    warningsGuard.addGuard(guard);\n  }\n",
        "begin_line": 1073,
        "end_line": 1075,
        "comment": "\n   * Add a guard to the set of warnings guards.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0551
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processAstRoot#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAstRoot(com.google.javascript.rhino.head.ast.AstRoot)",
        "snippet": "    @Override\n    Node processAstRoot(AstRoot rootNode) {\n      Node node = newNode(Token.SCRIPT);\n      for (com.google.javascript.rhino.head.Node child : rootNode) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      parseDirectives(node);\n      return node;\n    }\n",
        "begin_line": 451,
        "end_line": 459,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.055
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.isDirective#487",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isDirective(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n",
        "begin_line": 487,
        "end_line": 494,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.055
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getChildCount#1405",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildCount()",
        "snippet": "  public int getChildCount() {\n    int c = 0;\n    for (Node n = first; n != null; n = n.next)\n      c++;\n\n    return c;\n  }\n",
        "begin_line": 1405,
        "end_line": 1411,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isFunction#2252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isFunction()",
        "snippet": "  public boolean isFunction() {\n    return this.getType() == Token.FUNCTION;\n  }\n",
        "begin_line": 2252,
        "end_line": 2254,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "ParserRunner.createConfig#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean, java.util.Set<java.lang.String>)",
        "snippet": "  public static Config createConfig(boolean isIdeMode,\n                                    LanguageMode languageMode,\n                                    boolean acceptConstKeyword,\n                                    Set<String> extraAnnotationNames) {\n    initResourceConfig();\n    Set<String> effectiveAnnotationNames;\n    if (extraAnnotationNames == null) {\n      effectiveAnnotationNames = annotationNames;\n    } else {\n      effectiveAnnotationNames = new HashSet<String>(annotationNames);\n      effectiveAnnotationNames.addAll(extraAnnotationNames);\n    }\n    return new Config(effectiveAnnotationNames, suppressionNames,\n        isIdeMode, languageMode, acceptConstKeyword);\n  }\n",
        "begin_line": 60,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicErrorManager.getErrorCount#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrorCount()",
        "snippet": "  @Override\n  public int getErrorCount() {\n    return errorCount;\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.chain#355",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.chain(com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    @Override\n    public PropListItem chain(PropListItem next) {\n      return new IntPropListItem(getType(), intValue, next);\n    }\n",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getNext#548",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNext()",
        "snippet": "  public Node getNext() {\n    return next;\n  }\n",
        "begin_line": 548,
        "end_line": 550,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.addChildToBack#608",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildToBack(Node child) {\n    Preconditions.checkArgument(child.parent == null);\n    Preconditions.checkArgument(child.next == null);\n    child.parent = this;\n    child.next = null;\n    if (last == null) {\n      first = last = child;\n      return;\n    }\n    last.next = child;\n    last = child;\n  }\n",
        "begin_line": 608,
        "end_line": 619,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.clonePropsFrom#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.clonePropsFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node clonePropsFrom(Node other) {\n    Preconditions.checkState(this.propListHead == null,\n        \"Node has existing properties.\");\n    this.propListHead = other.propListHead;\n    return this;\n  }\n",
        "begin_line": 774,
        "end_line": 779,
        "comment": "\n   * Clone the properties from the provided node without copying\n   * the property object.  The recieving node may not have any\n   * existing properties.\n   * @param other The node to clone properties from.\n   * @return this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.removeProp#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(int)",
        "snippet": "  public void removeProp(int propType) {\n    PropListItem result = removeProp(propListHead, propType);\n    if (result != propListHead) {\n      propListHead = result;\n    }\n  }\n",
        "begin_line": 781,
        "end_line": 786,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.removeProp#794",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(com.google.javascript.rhino.Node.PropListItem, int)",
        "snippet": "  private PropListItem removeProp(PropListItem item, int propType) {\n    if (item == null) {\n      return null;\n    } else if (item.getType() == propType) {\n      return item.getNext();\n    } else {\n      PropListItem result = removeProp(item.getNext(), propType);\n      if (result != item.getNext()) {\n        return item.chain(result);\n      } else {\n        return item;\n      }\n    }\n  }\n",
        "begin_line": 794,
        "end_line": 807,
        "comment": "\n   * @param item The item to inspect\n   * @param propType The property to look for\n   * @return The replacement list if the property was removed, or\n   *   'item' otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getLineno#1140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLineno()",
        "snippet": "  public int getLineno() {\n    return extractLineno(sourcePosition);\n  }\n",
        "begin_line": 1140,
        "end_line": 1142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setCharno#1172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setCharno(int)",
        "snippet": "  public void setCharno(int charno) {\n      sourcePosition = mergeLineCharNo(getLineno(), charno);\n  }\n",
        "begin_line": 1172,
        "end_line": 1174,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.extractLineno#1209",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractLineno(int)",
        "snippet": "  protected static int extractLineno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo >>> COLUMN_BITS;\n    }\n  }\n",
        "begin_line": 1209,
        "end_line": 1215,
        "comment": "\n   * Extracts the line number and character number from a merged line char\n   * number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getJsDocBuilderForNode#1836",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJsDocBuilderForNode()",
        "snippet": "  public FileLevelJsDocBuilder getJsDocBuilderForNode() {\n    return new FileLevelJsDocBuilder();\n  }\n",
        "begin_line": 1836,
        "end_line": 1838,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isObjectLit#2320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isObjectLit()",
        "snippet": "  public boolean isObjectLit() {\n    return this.getType() == Token.OBJECTLIT;\n  }\n",
        "begin_line": 2320,
        "end_line": 2322,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "ParserRunner.extractList#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.extractList(java.lang.String)",
        "snippet": "  private static Set<String> extractList(String configProp) {\n    String[] names = configProp.split(\",\");\n    Set<String> trimmedNames = Sets.newHashSet();\n    for (String name : names) {\n      trimmedNames.add(name.trim());\n    }\n    return ImmutableSet.copyOf(trimmedNames);\n  }\n",
        "begin_line": 86,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "ParserRunner.parse#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.parse(com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter, java.util.logging.Logger)",
        "snippet": "  public static Node parse(StaticSourceFile sourceFile,\n                           String sourceString,\n                           Config config,\n                           ErrorReporter errorReporter,\n                           Logger logger) throws IOException {\n    Context cx = Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv = new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n\n    // ES5 specifically allows trailing commas\n    compilerEnv.setWarnTrailingComma(\n        config.languageMode == LanguageMode.ECMASCRIPT3);\n\n    // Do our own identifier check for ECMASCRIPT 5\n    boolean acceptEs5 =\n        config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n\n    Parser p = new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot = null;\n    try {\n      astRoot = p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n      logger.info(\n          \"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n      Context.exit();\n    }\n    Node root = null;\n    if (astRoot != null) {\n      root = IRFactory.transformTree(\n          astRoot, sourceFile, sourceString, config, errorReporter);\n      root.setIsSyntheticBlock(true);\n    }\n    return root;\n  }\n",
        "begin_line": 104,
        "end_line": 147,
        "comment": "\n   * Parses the JavaScript text given by a reader.\n   *\n   * @param sourceString Source code from the file.\n   * @param errorReporter An error.\n   * @param logger A logger.\n   * @return The AST of the given text.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.parseDirectives#470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.parseDirectives(com.google.javascript.rhino.Node)",
        "snippet": "    private void parseDirectives(Node node) {\n      // Remove all the directives, and encode them in the AST.\n      Set<String> directives = null;\n      while (isDirective(node.getFirstChild())) {\n        String directive = node.removeFirstChild().getFirstChild().getString();\n        if (directives == null) {\n          directives = Sets.newHashSet(directive);\n        } else {\n          directives.add(directive);\n        }\n      }\n\n      if (directives != null) {\n        node.setDirectives(directives);\n      }\n    }\n",
        "begin_line": 470,
        "end_line": 485,
        "comment": "\n     * Parse the directives, encode them in the AST, and remove their nodes.\n     *\n     * For information on ES5 directives, see section 14.1 of\n     * Ecma-262, Edition 5.\n     *\n     * It would be nice if Rhino would eventually take care of this for\n     * us, but right now their directive-processing is a one-off.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.IRFactory#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.IRFactory(java.lang.String, com.google.javascript.rhino.jstype.StaticSourceFile, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter) {\n    this.sourceString = sourceString;\n    this.sourceFile = sourceFile;\n\n    // Sometimes this will be null in tests.\n    this.sourceName = sourceFile == null ? null : sourceFile.getName();\n\n    this.config = config;\n    this.errorReporter = errorReporter;\n    this.transformDispatcher = new TransformDispatcher();\n    // The template node properties are applied to all nodes in this transform.\n    this.templateNode = createTemplateNode();\n\n    switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }\n  }\n",
        "begin_line": 134,
        "end_line": 164,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.createTemplateNode#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createTemplateNode()",
        "snippet": "  private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode = new Node(Token.SCRIPT);\n    templateNode.setStaticSourceFile(sourceFile);\n    return templateNode;\n  }\n",
        "begin_line": 169,
        "end_line": 174,
        "comment": " This reduces the cost of these properties to O(nodes) to O(files).",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.transformTree#176",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTree(com.google.javascript.rhino.head.ast.AstRoot, com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter) {\n    IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);\n    Node irNode = irFactory.transform(node);\n\n    if (node.getComments() != null) {\n      for (Comment comment : node.getComments()) {\n        if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment)) {\n          irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);\n        } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {\n          irFactory.handleBlockComment(comment);\n        }\n      }\n    }\n\n    irFactory.setFileOverviewJsDoc(irNode);\n\n    return irNode;\n  }\n",
        "begin_line": 176,
        "end_line": 199,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.setFileOverviewJsDoc#201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setFileOverviewJsDoc(com.google.javascript.rhino.Node)",
        "snippet": "  private void setFileOverviewJsDoc(Node irNode) {\n    // Only after we've seen all @fileoverview entries, attach the\n    // last one to the root node, and copy the found license strings\n    // to that node.\n    JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();\n    if (rootNodeJsDoc != null) {\n      irNode.setJSDocInfo(rootNodeJsDoc);\n      rootNodeJsDoc.setAssociatedNode(irNode);\n    }\n\n    if (fileOverviewInfo != null) {\n      if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null)) {\n        fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n      }\n      irNode.setJSDocInfo(fileOverviewInfo);\n      fileOverviewInfo.setAssociatedNode(irNode);\n    }\n  }\n",
        "begin_line": 201,
        "end_line": 219,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.handleJsDoc#270",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.handleJsDoc(com.google.javascript.rhino.head.ast.AstNode, com.google.javascript.rhino.Node)",
        "snippet": "  private JSDocInfo handleJsDoc(AstNode node, Node irNode) {\n    Comment comment = node.getJsDocNode();\n    if (comment != null) {\n      JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);\n      parsedComments.add(comment);\n      if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n        return jsDocParser.retrieveAndResetParsedJSDocInfo();\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 270,
        "end_line": 280,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.transform#282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transform(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node transform(AstNode node) {\n    Node irNode = justTransform(node);\n    JSDocInfo jsDocInfo = handleJsDoc(node, irNode);\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 282,
        "end_line": 290,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.setSourceInfo#323",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setSourceInfo(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void setSourceInfo(Node irNode, AstNode node) {\n    if (irNode.getLineno() == -1) {\n      // If we didn't already set the line, then set it now. This avoids\n      // cases like ParenthesizedExpression where we just return a previous\n      // node, but don't want the new node to get its parent's line number.\n      int lineno = node.getLineno();\n      irNode.setLineno(lineno);\n      int charno = position2charno(node.getAbsolutePosition());\n      irNode.setCharno(charno);\n      maybeSetLengthFrom(irNode, node);\n    }\n  }\n",
        "begin_line": 323,
        "end_line": 334,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.maybeSetLengthFrom#370",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.maybeSetLengthFrom(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void maybeSetLengthFrom(Node node, AstNode source) {\n    if (config.isIdeMode) {\n      node.setLength(source.getLength());\n    }\n  }\n",
        "begin_line": 370,
        "end_line": 374,
        "comment": " Set the length on the node if we're in IDE mode.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.position2charno#376",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.position2charno(int)",
        "snippet": "  private int position2charno(int position) {\n    int lineIndex = sourceString.lastIndexOf('\\n', position);\n    if (lineIndex == -1) {\n      return position;\n    } else {\n      // Subtract one for initial position being 0.\n      return position - lineIndex - 1;\n    }\n  }\n",
        "begin_line": 376,
        "end_line": 384,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.justTransform#386",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.justTransform(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node justTransform(AstNode node) {\n    return transformDispatcher.process(node);\n  }\n",
        "begin_line": 386,
        "end_line": 388,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.newNode#1331",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int)",
        "snippet": "  private Node newNode(int type) {\n    return new Node(type).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1331,
        "end_line": 1333,
        "comment": " Simple helper to create nodes and set the initial node properties.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Config.Config#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.Config(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>, boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean)",
        "snippet": "  Config(Set<String> annotationWhitelist, Set<String> suppressionNames,\n      boolean isIdeMode, LanguageMode languageMode,\n      boolean acceptConstKeyword) {\n    this.annotationNames = buildAnnotationNames(annotationWhitelist);\n    this.parseJsDocDocumentation = isIdeMode;\n    this.suppressionNames = suppressionNames;\n    this.isIdeMode = isIdeMode;\n    this.languageMode = languageMode;\n    this.acceptConstKeyword = acceptConstKeyword;\n  }\n",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Config.buildAnnotationNames#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.buildAnnotationNames(java.util.Set<java.lang.String>)",
        "snippet": "  private static Map<String, Annotation> buildAnnotationNames(\n      Set<String> annotationWhitelist) {\n    ImmutableMap.Builder<String, Annotation> annotationBuilder =\n        ImmutableMap.builder();\n    annotationBuilder.putAll(Annotation.recognizedAnnotations);\n    for (String unrecognizedAnnotation : annotationWhitelist) {\n      if (!Annotation.recognizedAnnotations.containsKey(\n              unrecognizedAnnotation)) {\n        annotationBuilder.put(\n            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n      }\n    }\n    return annotationBuilder.build();\n  }\n",
        "begin_line": 88,
        "end_line": 101,
        "comment": "\n   * Create the annotation names from the user-specified\n   * annotation whitelist.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.getCode#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return code;\n  }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n   * Gets all the code in this source file.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.setIsExtern#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setIsExtern(boolean)",
        "snippet": "  void setIsExtern(boolean newVal) {\n    isExternFile = newVal;\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": " Sets that this is an extern. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.PrepareAnnotations#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.PrepareAnnotations(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    PrepareAnnotations(AbstractCompiler compiler) {\n      this.convention = compiler.getCodingConvention();\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.shouldTraverse#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.isObjectLit()) {\n        normalizeObjectLiteralAnnotations(n);\n      }\n      return true;\n    }\n",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.visit#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.CALL:\n          annotateCalls(n);\n          break;\n\n        case Token.FUNCTION:\n          annotateFunctions(n, parent);\n          annotateDispatchers(n, parent);\n          break;\n      }\n    }\n",
        "begin_line": 137,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.PrepareAst#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  PrepareAst(AbstractCompiler compiler) {\n    this(compiler, false);\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.PrepareAst#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  PrepareAst(AbstractCompiler compiler, boolean checkOnly) {\n    this.compiler = compiler;\n    this.checkOnly = checkOnly;\n  }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.process#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (checkOnly) {\n      normalizeNodeTypes(root);\n    } else {\n      // Don't perform \"PrepareAnnotations\" when doing checks as\n      // they currently aren't valid during sanity checks.  In particular,\n      // they DIRECT_EVAL shouldn't be applied after inlining has been\n      // performed.\n      if (externs != null) {\n        NodeTraversal.traverse(\n            compiler, externs, new PrepareAnnotations(compiler));\n      }\n      if (root != null) {\n        NodeTraversal.traverse(\n            compiler, root, new PrepareAnnotations(compiler));\n      }\n    }\n  }\n",
        "begin_line": 56,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseBranch#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseBranch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      inputId = n.getInputId();\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }\n",
        "begin_line": 476,
        "end_line": 505,
        "comment": "\n   * Traverses a branch.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsAst.JsAst#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.JsAst(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public JsAst(SourceFile sourceFile) {\n    this.inputId = new InputId(sourceFile.getName());\n    this.sourceFile = sourceFile;\n    this.fileName = sourceFile.getName();\n  }\n",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsAst.getAstRoot#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    if (root == null) {\n      parse(compiler);\n      root.setInputId(inputId);\n    }\n    return root;\n  }\n",
        "begin_line": 49,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsAst.getInputId#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return inputId;\n  }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsAst.getSourceFile#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getSourceFile()",
        "snippet": "  @Override\n  public SourceFile getSourceFile() {\n    return sourceFile;\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsAst.parse#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.parse(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private void parse(AbstractCompiler compiler) {\n    try {\n      logger_.fine(\"Parsing: \" + sourceFile.getName());\n      root = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n\n    if (root == null || compiler.hasHaltingErrors()) {\n      // There was a parse error or IOException, so use a dummy block.\n      root = IR.script();\n    } else {\n      compiler.prepareAst(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.setStaticSourceFile(sourceFile);\n  }\n",
        "begin_line": 83,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.CompilerInput#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, boolean isExtern) {\n    this(ast, ast.getInputId(), isExtern);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.CompilerInput#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, com.google.javascript.rhino.InputId, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, InputId inputId, boolean isExtern) {\n    this.ast = ast;\n    this.id = inputId;\n\n    // TODO(nicksantos): Add a precondition check here. People are passing\n    // in null, but they should not be.\n    if (ast != null && ast.getSourceFile() != null) {\n      ast.getSourceFile().setIsExtern(isExtern);\n    }\n  }\n",
        "begin_line": 72,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.CompilerInput#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public CompilerInput(SourceFile file) {\n    this(file, false);\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.CompilerInput#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceFile, boolean)",
        "snippet": "  public CompilerInput(SourceFile file, boolean isExtern) {\n    this(new JsAst(file), isExtern);\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.acceptEcmaScript5#1960",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptEcmaScript5()",
        "snippet": "  @Override\n  public boolean acceptEcmaScript5() {\n    switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 1960,
        "end_line": 1968,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getDefaultErrorReporter#1546",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDefaultErrorReporter()",
        "snippet": "  @Override\n  ErrorReporter getDefaultErrorReporter() {\n    return defaultErrorReporter;\n  }\n",
        "begin_line": 1546,
        "end_line": 1549,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.prepareAst#1899",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.prepareAst(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void prepareAst(Node root) {\n    CompilerPass pass = new PrepareAst(this);\n    pass.process(null, root);\n  }\n",
        "begin_line": 1899,
        "end_line": 1903,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.acceptConstKeyword#1974",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptConstKeyword()",
        "snippet": "  @Override\n  public boolean acceptConstKeyword() {\n    return options.acceptConstKeyword;\n  }\n",
        "begin_line": 1974,
        "end_line": 1977,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getParserConfig#1979",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getParserConfig()",
        "snippet": "  @Override\n  Config getParserConfig() {\n    if (parserConfig == null) {\n      Config.LanguageMode mode;\n      switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }\n\n      parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);\n    }\n    return parserConfig;\n  }\n",
        "begin_line": 1979,
        "end_line": 2004,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineFunctions.inlineDirectly#952",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.inlineDirectly(boolean)",
        "snippet": "    public void inlineDirectly(boolean directReplacement) {\n      this.inlineDirectly = directReplacement;\n    }\n",
        "begin_line": 952,
        "end_line": 954,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.ObjectPropListItem#303",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.ObjectPropListItem(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    ObjectPropListItem(int propType, Object objectValue, PropListItem next) {\n      super(propType, next);\n      this.objectValue = objectValue;\n    }\n",
        "begin_line": 303,
        "end_line": 306,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getObjectValue#313",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.getObjectValue()",
        "snippet": "    @Override\n    public Object getObjectValue() {\n      return objectValue;\n    }\n",
        "begin_line": 313,
        "end_line": 316,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.IntPropListItem#335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.IntPropListItem(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    IntPropListItem(int propType, int intValue, PropListItem next) {\n      super(propType, next);\n      this.intValue = intValue;\n    }\n",
        "begin_line": 335,
        "end_line": 338,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.AbstractPropListItem#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.AbstractPropListItem(int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    AbstractPropListItem(int propType, PropListItem next) {\n      this.propType = propType;\n      this.next = next;\n    }\n",
        "begin_line": 277,
        "end_line": 280,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getType#282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getType()",
        "snippet": "    @Override\n    public int getType() {\n      return propType;\n    }\n",
        "begin_line": 282,
        "end_line": 285,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getNext#287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getNext()",
        "snippet": "    @Override\n    public PropListItem getNext() {\n      return next;\n    }\n",
        "begin_line": 287,
        "end_line": 290,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.Node#361",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int)",
        "snippet": "  public Node(int nodeType) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 361,
        "end_line": 365,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getType#528",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getType()",
        "snippet": "  public int getType() {\n    return type;\n  }\n",
        "begin_line": 528,
        "end_line": 530,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getFirstChild#540",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getFirstChild()",
        "snippet": "  public Node getFirstChild() {\n    return first;\n  }\n",
        "begin_line": 540,
        "end_line": 542,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.lookupProperty#758",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.lookupProperty(int)",
        "snippet": "  @VisibleForTesting\n  PropListItem lookupProperty(int propType) {\n    PropListItem x = propListHead;\n    while (x != null && propType != x.getType()) {\n      x = x.getNext();\n    }\n    return x;\n  }\n",
        "begin_line": 758,
        "end_line": 765,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getProp#809",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getProp(int)",
        "snippet": "  public Object getProp(int propType) {\n    if (propType == SOURCENAME_PROP) {\n      return getSourceFileName();\n    }\n\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return null;\n    }\n    return item.getObjectValue();\n  }\n",
        "begin_line": 809,
        "end_line": 819,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.putProp#845",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putProp(int, java.lang.Object)",
        "snippet": "  public void putProp(int propType, Object value) {\n    if (propType == SOURCENAME_PROP) {\n      putProp(\n          STATIC_SOURCE_FILE, new SimpleSourceFile((String) value, false));\n      return;\n    }\n\n    removeProp(propType);\n    if (value != null) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 845,
        "end_line": 856,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.putBooleanProp#858",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
        "snippet": "  public void putBooleanProp(int propType, boolean value) {\n    putIntProp(propType, value ? 1 : 0);\n  }\n",
        "begin_line": 858,
        "end_line": 860,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.putIntProp#862",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
        "snippet": "  public void putIntProp(int propType, int value) {\n    removeProp(propType);\n    if (value != 0) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 862,
        "end_line": 867,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.createProp#869",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, Object value, PropListItem next) {\n    return new ObjectPropListItem(propType, value, next);\n  }\n",
        "begin_line": 869,
        "end_line": 871,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.createProp#873",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, int value, PropListItem next) {\n    return new IntPropListItem(propType, value, next);\n  }\n",
        "begin_line": 873,
        "end_line": 875,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setStaticSourceFile#1094",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile)",
        "snippet": "  public void setStaticSourceFile(StaticSourceFile file) {\n    this.putProp(STATIC_SOURCE_FILE, file);\n  }\n",
        "begin_line": 1094,
        "end_line": 1096,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getSourceFileName#1103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSourceFileName()",
        "snippet": "  public String getSourceFileName() {\n    StaticSourceFile file = getStaticSourceFile();\n    return file == null ? null : file.getName();\n  }\n",
        "begin_line": 1103,
        "end_line": 1106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getStaticSourceFile#1109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getStaticSourceFile()",
        "snippet": "  public StaticSourceFile getStaticSourceFile() {\n    return ((StaticSourceFile) this.getProp(STATIC_SOURCE_FILE));\n  }\n",
        "begin_line": 1109,
        "end_line": 1111,
        "comment": " Returns the source file associated with this input. May be null ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setInputId#1116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setInputId(com.google.javascript.rhino.InputId)",
        "snippet": "  public void setInputId(InputId inputId) {\n    this.putProp(INPUT_ID, inputId);\n  }\n",
        "begin_line": 1116,
        "end_line": 1118,
        "comment": "\n   * @param inputId\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getInputId#1123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getInputId()",
        "snippet": "  public InputId getInputId() {\n    return ((InputId) this.getProp(INPUT_ID));\n  }\n",
        "begin_line": 1123,
        "end_line": 1125,
        "comment": "\n   * @return The Id of the CompilerInput associated with this Node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getCharno#1144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getCharno()",
        "snippet": "  public int getCharno() {\n    return extractCharno(sourcePosition);\n  }\n",
        "begin_line": 1144,
        "end_line": 1146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setLineno#1164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLineno(int)",
        "snippet": "  public void setLineno(int lineno) {\n      int charno = getCharno();\n      if (charno == -1) {\n        charno = 0;\n      }\n      sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 1164,
        "end_line": 1170,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.mergeLineCharNo#1195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.mergeLineCharNo(int, int)",
        "snippet": "  protected static int mergeLineCharNo(int lineno, int charno) {\n    if (lineno < 0 || charno < 0) {\n      return -1;\n    } else if ((charno & ~COLUMN_MASK) != 0) {\n      return lineno << COLUMN_BITS | COLUMN_MASK;\n    } else {\n      return lineno << COLUMN_BITS | (charno & COLUMN_MASK);\n    }\n  }\n",
        "begin_line": 1195,
        "end_line": 1203,
        "comment": "\n   * Merges the line number and character number in one integer. The Character\n   * number takes the first 12 bits and the line number takes the rest. If\n   * the character number is greater than <code>2<sup>12</sup>-1</code> it is\n   * adjusted to <code>2<sup>12</sup>-1</code>.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.extractCharno#1221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractCharno(int)",
        "snippet": "  protected static int extractCharno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo & COLUMN_MASK;\n    }\n  }\n",
        "begin_line": 1221,
        "end_line": 1227,
        "comment": "\n   * Extracts the character number and character number from a merged line\n   * char number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getJSDocInfo#1870",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSDocInfo()",
        "snippet": "  public JSDocInfo getJSDocInfo() {\n    return (JSDocInfo) getProp(JSDOC_INFO_PROP);\n  }\n",
        "begin_line": 1870,
        "end_line": 1872,
        "comment": "\n   * Get the {@link JSDocInfo} attached to this node.\n   * @return the information or {@code null} if no JSDoc is attached to this\n   * node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setIsSyntheticBlock#1921",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setIsSyntheticBlock(boolean)",
        "snippet": "  public void setIsSyntheticBlock(boolean val) {\n    putBooleanProp(SYNTHETIC_BLOCK_PROP, val);\n  }\n",
        "begin_line": 1921,
        "end_line": 1923,
        "comment": "\n   * Sets whether this is a synthetic block that should not be considered\n   * a real source block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isScript#2340",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isScript()",
        "snippet": "  public boolean isScript() {\n    return this.getType() == Token.SCRIPT;\n  }\n",
        "begin_line": 2340,
        "end_line": 2342,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "InputId.InputId#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.InputId(java.lang.String)",
        "snippet": "  public InputId(String id) {\n    this.id = id;\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "InputId.hashCode#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return id.hashCode();\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SyntacticScopeCreator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = new DefaultRedeclarationHandler();\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "\n   * Creates a ScopeCreator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.getName#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return fileName;\n  }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": " Returns a unique name for the source file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.getInputId#2861",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getInputId(com.google.javascript.rhino.Node)",
        "snippet": "  public static InputId getInputId(Node n) {\n    while (n != null && !n.isScript()) {\n      n = n.getParent();\n    }\n\n    return (n != null && n.isScript()) ? n.getInputId() : null;\n  }\n",
        "begin_line": 2861,
        "end_line": 2867,
        "comment": "\n   * @param n The node.\n   * @return The InputId property on the node or its ancestors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.NodeTraversal#221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb) {\n    this(compiler, cb, new SyntacticScopeCreator(compiler));\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": "\n   * Creates a node traversal using the specified callback interface.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.NodeTraversal#229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb,\n      ScopeCreator scopeCreator) {\n    this.callback = cb;\n    if (cb instanceof ScopedCallback) {\n      this.scopeCallback = (ScopedCallback) cb;\n    }\n    this.compiler = compiler;\n    this.inputId = null;\n    this.sourceName = \"\";\n    this.scopeCreator = scopeCreator;\n  }\n",
        "begin_line": 229,
        "end_line": 239,
        "comment": "\n   * Creates a node traversal using the specified callback interface\n   * and the scope creator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverse#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  public void traverse(Node root) {\n    try {\n      inputId = NodeUtil.getInputId(root);\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 271,
        "end_line": 282,
        "comment": "\n   * Traverses a parse tree recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverse#452",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }\n",
        "begin_line": 452,
        "end_line": 456,
        "comment": "\n   * Traverses a node recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.pushScope#562",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.rhino.Node)",
        "snippet": "  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 562,
        "end_line": 569,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.popScope#582",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.popScope()",
        "snippet": "  private void popScope() {\n    if (scopeCallback != null) {\n      scopeCallback.exitScope(this);\n    }\n    if (scopeRoots.isEmpty()) {\n      scopes.pop();\n    } else {\n      scopeRoots.pop();\n    }\n    cfgs.pop();\n  }\n",
        "begin_line": 582,
        "end_line": 592,
        "comment": " Pops back to the previous scope (e.g. when leaving a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getSourceName#653",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSourceName(Node n) {\n    String name = n.getSourceFileName();\n    return name == null ? \"\" : name;\n  }\n",
        "begin_line": 653,
        "end_line": 656,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getInputId#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return id;\n  }\n",
        "begin_line": 92,
        "end_line": 95,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getAstRoot#114",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    Node root = ast.getAstRoot(compiler);\n    // The root maybe null if the AST can not be created.\n    if (root != null) {\n      Preconditions.checkState(root.isScript());\n      Preconditions.checkNotNull(root.getInputId());\n    }\n    return root;\n  }\n",
        "begin_line": 114,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.setCompiler#146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setCompiler(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public void setCompiler(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": " Sets an abstract compiler for doing parsing. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.putCompilerInput#1034",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.putCompilerInput(com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  private CompilerInput putCompilerInput(InputId id, CompilerInput input) {\n    input.setCompiler(this);\n    return inputsById.put(id, input);\n  }\n",
        "begin_line": 1034,
        "end_line": 1037,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.isIdeMode#1955",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.isIdeMode()",
        "snippet": "  @Override\n  public boolean isIdeMode() {\n    return options.ideMode;\n  }\n",
        "begin_line": 1955,
        "end_line": 1958,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.hasHaltingErrors#2079",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasHaltingErrors()",
        "snippet": "  @Override\n  boolean hasHaltingErrors() {\n    return !isIdeMode() && getErrorCount() > 0;\n  }\n",
        "begin_line": 2079,
        "end_line": 2082,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "SuppressDocWarningsGuard.SuppressDocWarningsGuard#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.SuppressDocWarningsGuard(java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup>)",
        "snippet": "  SuppressDocWarningsGuard(Map<String, DiagnosticGroup> suppressableGroups) {\n    for (Map.Entry<String, DiagnosticGroup> entry :\n             suppressableGroups.entrySet()) {\n      suppressors.put(\n          entry.getKey(),\n          new DiagnosticGroupWarningsGuard(\n              entry.getValue(),\n              CheckLevel.OFF));\n    }\n  }\n",
        "begin_line": 40,
        "end_line": 49,
        "comment": "\n   * The suppressable groups, indexed by name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "SuppressDocWarningsGuard.getPriority#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.getPriority()",
        "snippet": "  @Override\n  public int getPriority() {\n    // Happens after path-based filtering, but before other times\n    // of filtering.\n    return WarningsGuard.Priority.SUPPRESS_DOC.value;\n  }\n",
        "begin_line": 95,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider, com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    Preconditions.checkNotNull(source);\n    this.excerpt = excerpt;\n  }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "ErrorFormat.toFormatter#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ErrorFormat.java",
        "class_name": "com.google.javascript.jscomp.ErrorFormat",
        "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
        "snippet": "    @Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter = new LightweightMessageFormatter(\n          source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }\n",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroups.getRegisteredGroups#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.getRegisteredGroups()",
        "snippet": "  protected Map<String, DiagnosticGroup> getRegisteredGroups() {\n    return ImmutableMap.copyOf(groupsByName);\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": " Get the registered diagnostic groups, indexed by name. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.matches#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public boolean matches(DiagnosticType type) {\n    return types.contains(type);\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n   * Returns whether the given type matches a type in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.getTypes#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.getTypes()",
        "snippet": "  public Iterable<DiagnosticType> getTypes() {\n    return types;\n  }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n   * Returns an iterable over all the types in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.compare#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.compare(com.google.javascript.jscomp.WarningsGuard, com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "    @Override\n    public int compare(WarningsGuard a, WarningsGuard b) {\n      int priorityDiff = a.getPriority() - b.getPriority();\n      if (priorityDiff != 0) {\n        return priorityDiff;\n      }\n\n      // If the warnings guards have the same priority, the one that\n      // was added last wins.\n      return orderOfAddition.get(b).intValue() -\n          orderOfAddition.get(a).intValue();\n    }\n",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.addGuard#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  void addGuard(WarningsGuard guard) {\n    if (guard instanceof ComposeWarningsGuard) {\n      ComposeWarningsGuard composeGuard = (ComposeWarningsGuard) guard;\n      if (composeGuard.demoteErrors) {\n        this.demoteErrors = composeGuard.demoteErrors;\n      }\n\n      // Reverse the guards, so that they have the same order in the result.\n      addGuards(Lists.newArrayList(composeGuard.guards.descendingSet()));\n    } else {\n      numberOfAdds++;\n      orderOfAddition.put(guard, numberOfAdds);\n      guards.remove(guard);\n      guards.add(guard);\n    }\n  }\n",
        "begin_line": 87,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.addGuards#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuards(java.lang.Iterable<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  private void addGuards(Iterable<WarningsGuard> guards) {\n    for (WarningsGuard guard : guards) {\n      addGuard(guard);\n    }\n  }\n",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.enables#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup group) {\n    for (WarningsGuard guard : guards) {\n      if (guard.enables(group)) {\n        return true;\n      } else if (guard.disables(group)) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 148,
        "end_line": 159,
        "comment": "\n   * Determines whether this guard will \"elevate\" the status of any disabled\n   * diagnostic type in the group to a warning or an error.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.enables#1032",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean enables(DiagnosticGroup type) {\n    return warningsGuard.enables(type);\n  }\n",
        "begin_line": 1032,
        "end_line": 1034,
        "comment": "\n   * Whether the warnings guard in this Options object enables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.getWarningsGuard#1051",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getWarningsGuard()",
        "snippet": "  WarningsGuard getWarningsGuard() {\n    return warningsGuard;\n  }\n",
        "begin_line": 1051,
        "end_line": 1053,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.shouldColorizeErrorOutput#1241",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shouldColorizeErrorOutput()",
        "snippet": "  public boolean shouldColorizeErrorOutput() {\n    return colorizeErrorOutput;\n  }\n",
        "begin_line": 1241,
        "end_line": 1243,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.getCodingConvention#1282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getCodingConvention()",
        "snippet": "  public CodingConvention getCodingConvention() {\n    return codingConvention;\n  }\n",
        "begin_line": 1282,
        "end_line": 1284,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.getLanguageIn#1376",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageIn()",
        "snippet": "  public LanguageMode getLanguageIn() {\n    return languageIn;\n  }\n",
        "begin_line": 1376,
        "end_line": 1378,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.setErrorManager#223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setErrorManager(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public void setErrorManager(ErrorManager errorManager) {\n    Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 223,
        "end_line": 227,
        "comment": "\n   * Sets the error manager.\n   *\n   * @param errorManager the error manager, it cannot be {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.createMessageFormatter#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createMessageFormatter()",
        "snippet": "  private MessageFormatter createMessageFormatter() {\n    boolean colorize = options.shouldColorizeErrorOutput();\n    return options.errorFormat.toFormatter(this, colorize);\n  }\n",
        "begin_line": 233,
        "end_line": 236,
        "comment": "\n   * Creates a message formatter instance corresponding to the value of\n   * {@link CompilerOptions}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getCodingConvention#1948",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getCodingConvention()",
        "snippet": "  @Override\n  public CodingConvention getCodingConvention() {\n    CodingConvention convention = options.getCodingConvention();\n    convention = convention != null ? convention : defaultCodingConvention;\n    return convention;\n  }\n",
        "begin_line": 1948,
        "end_line": 1953,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckLevel.isOn#29",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckLevel.java",
        "class_name": "com.google.javascript.jscomp.CheckLevel",
        "signature": "com.google.javascript.jscomp.CheckLevel.isOn()",
        "snippet": "  boolean isOn() {\n    return this != OFF;\n  }\n",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractMessageFormatter.AbstractMessageFormatter#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.AbstractMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public AbstractMessageFormatter(SourceExcerptProvider source) {\n    this.source = source;\n  }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractMessageFormatter.setColorize#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.setColorize(boolean)",
        "snippet": "  public void setColorize(boolean colorize) {\n    this.colorize = colorize;\n  }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.createDelegateSuffix#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix(java.lang.String)",
        "snippet": "  public static String createDelegateSuffix(String suffix) {\n    return \"(\" + suffix + \")\";\n  }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n   * Creates a suffix for a proxy delegate.\n   * @see #getNormalizedReferenceName\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScriptRuntime.getMessage0#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage0(java.lang.String)",
        "snippet": "    public static String getMessage0(String messageId) {\n        return getMessage(messageId, null);\n    }\n",
        "begin_line": 366,
        "end_line": 368,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScriptRuntime.getMessage#379",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage(java.lang.String, java.lang.Object[])",
        "snippet": "    public static String getMessage(String messageId, Object[] arguments) {\n        final String defaultResource\n            = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n\n        Locale locale = Locale.getDefault();\n\n        // ResourceBundle does cacheing.\n        ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);\n\n        String formatString;\n        try {\n            formatString = rb.getString(messageId);\n        } catch (java.util.MissingResourceException mre) {\n            throw new RuntimeException\n                (\"no message resource found for message property \"+ messageId);\n        }\n\n        /*\n         * It's OK to format the string, even if 'arguments' is null;\n         * we need to format it anyway, to make double ''s collapse to\n         * single 's.\n         */\n        // TODO: MessageFormat is not available on pJava\n        MessageFormat formatter = new MessageFormat(formatString);\n        return formatter.format(arguments);\n    }\n",
        "begin_line": 379,
        "end_line": 404,
        "comment": " OPT there's a noticable delay for the first error!  Maybe it'd\n     * make sense to use a ListResourceBundle instead of a properties\n     * file to avoid (synchronized) text parsing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "WarningsGuard.Priority#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.Priority.Priority(int)",
        "snippet": "    Priority(int value) {\n      this.value = value;\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "WarningsGuard.getPriority#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.getPriority()",
        "snippet": "  protected int getPriority() {\n    return Priority.DEFAULT.value;\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n   * The priority in which warnings guards are applied. Lower means the\n   * guard will be applied sooner. Expressed on a scale of 1 to 100.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.Preloaded#421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String originalPath, String code) {\n      super(fileName);\n      super.setOriginalPath(originalPath);\n      super.setCode(code);\n    }\n",
        "begin_line": 421,
        "end_line": 425,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.Builder#368",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Builder.Builder()",
        "snippet": "    public Builder() {}\n",
        "begin_line": 368,
        "end_line": 368,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.buildFromCode#390",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Builder.buildFromCode(java.lang.String, java.lang.String)",
        "snippet": "    public SourceFile buildFromCode(String fileName, String code) {\n      return new Preloaded(fileName, originalPath, code);\n    }\n",
        "begin_line": 390,
        "end_line": 392,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.setCode#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setCode(java.lang.String)",
        "snippet": "  private void setCode(String sourceCode) {\n    code = sourceCode;\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.setOriginalPath#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setOriginalPath(java.lang.String)",
        "snippet": "  public void setOriginalPath(String originalPath) {\n    this.originalPath = originalPath;\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.fromCode#322",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static SourceFile fromCode(String fileName, String code) {\n    return builder().buildFromCode(fileName, code);\n  }\n",
        "begin_line": 322,
        "end_line": 324,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.builder#354",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.builder()",
        "snippet": "  public static Builder builder() {\n    return new Builder();\n  }\n",
        "begin_line": 354,
        "end_line": 356,
        "comment": " Create a new builder for source files. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.OldRhinoErrorReporter#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.OldRhinoErrorReporter.OldRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private OldRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.NewRhinoErrorReporter#154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.NewRhinoErrorReporter.NewRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private NewRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.replacePlaceHolders#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.replacePlaceHolders(java.lang.String)",
        "snippet": "  private Pattern replacePlaceHolders(String s) {\n    s = Pattern.quote(s);\n    return Pattern.compile(s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\"));\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\n   * For each message such as \"Not a good use of {0}\", replace the place\n   * holder {0} with a wild card that matches all possible strings.\n   * Also put the any non-place-holder in quotes for regex matching later.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.RhinoErrorReporter#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private RhinoErrorReporter(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    typeMap = ImmutableMap.of(\n        // Trailing comma\n        replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime\n              .getMessage0(\"msg.extra.trailing.comma\")),\n        TRAILING_COMMA,\n\n        // Duplicate parameter\n        replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime\n              .getMessage0(\"msg.dup.parms\")),\n        DUPLICATE_PARAM,\n\n        // Unknown @annotations.\n        replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n        BAD_JSDOC_ANNOTATION,\n\n        // Type annotation errors.\n        Pattern.compile(\"^Bad type annotation.*\"),\n        TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 70,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.forNewRhino#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static com.google.javascript.rhino.head.ErrorReporter\n      forNewRhino(AbstractCompiler compiler) {\n    return new NewRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.forOldRhino#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n    return new OldRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.TweakFunction#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String)",
        "snippet": "    TweakFunction(String name) {\n      this(name, null, Token.ERROR, Token.ERROR, null);\n    }\n",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.TweakFunction#127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA) {\n      this(name, expectedTypeName, validNodeTypeA, Token.ERROR, null);\n    }\n",
        "begin_line": 127,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.TweakFunction#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB) {\n      this(name, expectedTypeName, validNodeTypeA, validNodeTypeB, null);\n    }\n",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.TweakFunction#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, TweakFunction registerFunction) {\n      this(name, null, Token.ERROR, Token.ERROR, registerFunction);\n    }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.TweakFunction#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB,\n        TweakFunction registerFunction) {\n      this.name = name;\n      this.expectedTypeName = expectedTypeName;\n      this.validNodeTypeA = validNodeTypeA;\n      this.validNodeTypeB = validNodeTypeB;\n      this.registerFunction = registerFunction;\n    }\n",
        "begin_line": 141,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.getName#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.getName()",
        "snippet": "    String getName() {\n      return name;\n    }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "PassFactory.PassFactory#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.PassFactory(java.lang.String, boolean)",
        "snippet": "  protected PassFactory(String name, boolean isOneTimePass) {\n    this.name = name;\n    this.isOneTimePass = isOneTimePass;\n  }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n   * @param name The name of the pass that this factory creates.\n   * @param isOneTimePass If true, the pass produced by this factory can\n   *     only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.error#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.error(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType error(String name, String descriptionFormat) {\n    return make(name, CheckLevel.ERROR, descriptionFormat);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.ERROR\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.warning#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.warning(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType warning(String name, String descriptionFormat) {\n    return make(name, CheckLevel.WARNING, descriptionFormat);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.WARNING\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.disabled#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.disabled(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType disabled(String name,\n      String descriptionFormat) {\n    return make(name, CheckLevel.OFF, descriptionFormat);\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.OFF\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.make#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.make(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
        "snippet": "  public static DiagnosticType make(String name, CheckLevel level,\n                                    String descriptionFormat) {\n    return\n        new DiagnosticType(name, level, new MessageFormat(descriptionFormat));\n  }\n",
        "begin_line": 88,
        "end_line": 92,
        "comment": "\n   * Create a DiagnosticType at a given CheckLevel.\n   *\n   * @param name An identifier\n   * @param level Either CheckLevel.ERROR or CheckLevel.WARNING\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.DiagnosticType#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.DiagnosticType(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.text.MessageFormat)",
        "snippet": "  private DiagnosticType(String key, CheckLevel level, MessageFormat format) {\n    this.key = key;\n    this.defaultLevel = level;\n    this.format = format;\n\n    this.level = this.defaultLevel;\n  }\n",
        "begin_line": 97,
        "end_line": 103,
        "comment": "\n   * Create a DiagnosticType. Private to force use of static factory methods.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.equals#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object type) {\n    return type instanceof DiagnosticType &&\n        ((DiagnosticType) type).key.equals(key);\n  }\n",
        "begin_line": 113,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.hashCode#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return key.hashCode();\n  }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroups.DiagnosticGroups#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DiagnosticGroups()",
        "snippet": "  public DiagnosticGroups() {}\n",
        "begin_line": 33,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroups.registerDeprecatedGroup#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerDeprecatedGroup(java.lang.String)",
        "snippet": "  static DiagnosticGroup registerDeprecatedGroup(String name) {\n    return registerGroup(name, new DiagnosticGroup(name, UNUSED));\n  }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroups.registerGroup#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup group) {\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroups.registerGroup#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticType ... types) {\n    DiagnosticGroup group = new DiagnosticGroup(name, types);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroups.registerGroup#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup ... groups) {\n    DiagnosticGroup group = new DiagnosticGroup(name, groups);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public DiagnosticGroupWarningsGuard(\n      DiagnosticGroup group, CheckLevel level) {\n    this.group = group;\n    this.level = level;\n  }\n",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  DiagnosticGroup(String name, DiagnosticType ...types) {\n    this.name = name;\n    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n  }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  public DiagnosticGroup(DiagnosticType ...types) {\n    this(null, types);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  public DiagnosticGroup(String name, DiagnosticGroup ...groups) {\n    Set<DiagnosticType> set = Sets.newHashSet();\n\n    for (DiagnosticGroup group : groups) {\n      set.addAll(group.types);\n    }\n\n    this.name = name;\n    this.types = ImmutableSet.copyOf(set);\n  }\n",
        "begin_line": 87,
        "end_line": 96,
        "comment": "\n   * Create a composite group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.GuardComparator#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.GuardComparator(java.util.Map<com.google.javascript.jscomp.WarningsGuard, java.lang.Integer>)",
        "snippet": "    private GuardComparator(Map<WarningsGuard, Integer> orderOfAddition) {\n      this.orderOfAddition = orderOfAddition;\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(java.util.List<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  public ComposeWarningsGuard(List<WarningsGuard> guards) {\n    addGuards(guards);\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(com.google.javascript.jscomp.WarningsGuard...)",
        "snippet": "  public ComposeWarningsGuard(WarningsGuard... guards) {\n    this(Lists.newArrayList(guards));\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.CompilerOptions#779",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.CompilerOptions()",
        "snippet": "  public CompilerOptions() {\n    // Accepted language\n    languageIn = LanguageMode.ECMASCRIPT3;\n\n    // Language variation\n    acceptConstKeyword = false;\n\n    // Checks\n    skipAllPasses = false;\n    nameAnonymousFunctionsOnly = false;\n    devMode = DevMode.OFF;\n    checkSymbols = false;\n    aggressiveVarCheck = CheckLevel.OFF;\n    checkSuspiciousCode = false;\n    checkControlStructures = false;\n    checkTypes = false;\n    tightenTypes = false;\n    reportMissingOverride = CheckLevel.OFF;\n    reportUnknownTypes = CheckLevel.OFF;\n    checkRequires = CheckLevel.OFF;\n    checkProvides = CheckLevel.OFF;\n    checkGlobalNamesLevel = CheckLevel.OFF;\n    brokenClosureRequiresLevel = CheckLevel.ERROR;\n    checkGlobalThisLevel = CheckLevel.OFF;\n    checkUnreachableCode = CheckLevel.OFF;\n    checkMissingReturn = CheckLevel.OFF;\n    checkMissingGetCssNameLevel = CheckLevel.OFF;\n    checkMissingGetCssNameBlacklist = null;\n    checkCaja = false;\n    computeFunctionSideEffects = false;\n    chainCalls = false;\n    extraAnnotationNames = null;\n\n    // Optimizations\n    foldConstants = false;\n    coalesceVariableNames = false;\n    deadAssignmentElimination = false;\n    inlineConstantVars = false;\n    inlineFunctions = false;\n    inlineLocalFunctions = false;\n    assumeStrictThis = false;\n    assumeClosuresOnlyCaptureReferences = false;\n    inlineProperties = false;\n    crossModuleCodeMotion = false;\n    crossModuleMethodMotion = false;\n    inlineGetters = false;\n    inlineVariables = false;\n    inlineLocalVariables = false;\n    smartNameRemoval = false;\n    removeDeadCode = false;\n    extractPrototypeMemberDeclarations = false;\n    removeUnusedPrototypeProperties = false;\n    removeUnusedPrototypePropertiesInExterns = false;\n    removeUnusedVars = false;\n    removeUnusedLocalVars = false;\n    aliasExternals = false;\n    collapseVariableDeclarations = false;\n    groupVariableDeclarations = false;\n    collapseAnonymousFunctions = false;\n    aliasableStrings = Collections.emptySet();\n    aliasStringsBlacklist = \"\";\n    aliasAllStrings = false;\n    outputJsStringUsage = false;\n    convertToDottedProperties = false;\n    rewriteFunctionExpressions = false;\n    optimizeParameters = false;\n    optimizeReturns = false;\n\n    // Renaming\n    variableRenaming = VariableRenamingPolicy.OFF;\n    propertyRenaming = PropertyRenamingPolicy.OFF;\n    propertyAffinity = false;\n    labelRenaming = false;\n    generatePseudoNames = false;\n    shadowVariables = false;\n    renamePrefix = null;\n    aliasKeywords = false;\n    collapseProperties = false;\n    collapsePropertiesOnExternTypes = false;\n    collapseObjectLiterals = false;\n    devirtualizePrototypeMethods = false;\n    disambiguateProperties = false;\n    ambiguateProperties = false;\n    anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;\n    exportTestFunctions = false;\n\n    // Alterations\n    runtimeTypeCheck = false;\n    runtimeTypeCheckLogFunction = null;\n    ignoreCajaProperties = false;\n    syntheticBlockStartMarker = null;\n    syntheticBlockEndMarker = null;\n    locale = null;\n    markAsCompiled = false;\n    removeTryCatchFinally = false;\n    closurePass = false;\n    jqueryPass = false;\n    rewriteNewDateGoogNow = true;\n    removeAbstractMethods = true;\n    removeClosureAsserts = false;\n    stripTypes = Collections.emptySet();\n    stripNameSuffixes = Collections.emptySet();\n    stripNamePrefixes = Collections.emptySet();\n    stripTypePrefixes = Collections.emptySet();\n    customPasses = null;\n    markNoSideEffectCalls = false;\n    defineReplacements = Maps.newHashMap();\n    tweakProcessing = TweakProcessing.OFF;\n    tweakReplacements = Maps.newHashMap();\n    moveFunctionDeclarations = false;\n    instrumentationTemplate = null;\n    appNameStr = \"\";\n    recordFunctionInformation = false;\n    generateExports = false;\n    cssRenamingMap = null;\n    processObjectPropertyString = false;\n    idGenerators = Collections.emptySet();\n    replaceStringsFunctionDescriptions = Collections.emptyList();\n    replaceStringsPlaceholderToken = \"\";\n    replaceStringsReservedStrings = Collections.emptySet();\n    propertyInvalidationErrors = Maps.newHashMap();\n\n    // Output\n    printInputDelimiter = false;\n    prettyPrint = false;\n    lineBreak = false;\n    preferLineBreakAtEndOfFile = false;\n    reportPath = null;\n    tracer = TracerMode.OFF;\n    colorizeErrorOutput = false;\n    errorFormat = ErrorFormat.SINGLELINE;\n    debugFunctionSideEffectsPath = null;\n    externExports = false;\n    nameReferenceReportPath = null;\n    nameReferenceGraphPath = null;\n\n    // Debugging\n    aliasHandler = NULL_ALIAS_TRANSFORMATION_HANDLER;\n    errorHandler = null;\n  }\n",
        "begin_line": 779,
        "end_line": 918,
        "comment": "\n   * Initializes compiler options. All options are disabled by default.\n   *\n   * Command-line frontends to the compiler should set these properties\n   * like a builder.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.Compiler#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler(java.io.PrintStream)",
        "snippet": "  public Compiler(PrintStream stream) {\n    addChangeHandler(recentChange);\n    outStream = stream;\n  }\n",
        "begin_line": 205,
        "end_line": 208,
        "comment": "\n   * Creates n Compiler that reports errors and warnings to an output\n   * stream.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.addChangeHandler#1926",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void addChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.add(handler);\n  }\n",
        "begin_line": 1926,
        "end_line": 1929,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getDiagnosticGroups#2020",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDiagnosticGroups()",
        "snippet": "  protected DiagnosticGroups getDiagnosticGroups() {\n    return new DiagnosticGroups();\n  }\n",
        "begin_line": 2020,
        "end_line": 2022,
        "comment": "\n   * The warning classes that are available from the command-line, and\n   * are suppressable by the {@code @suppress} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.Proxy#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.Proxy(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "    protected Proxy(CodingConvention convention) {\n      this.nextConvention = convention;\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention()",
        "snippet": "  public ClosureCodingConvention() {\n    this(CodingConventions.getDefault());\n  }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public ClosureCodingConvention(CodingConvention wrapped) {\n    super(wrapped);\n  }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy(char[])",
        "snippet": "  AnonymousFunctionNamingPolicy(char[] reservedCharacters) {\n    this.reservedCharacters = reservedCharacters;\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.SourceFile#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.SourceFile(java.lang.String)",
        "snippet": "  public SourceFile(String fileName) {\n    if (fileName == null || fileName.isEmpty()) {\n      throw new IllegalArgumentException(\"a source must have a name\");\n    }\n    this.fileName = fileName;\n  }\n",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\n   * Construct a new abstract source file.\n   *\n   * @param fileName The file name of the source file. It does not necessarily\n   *     need to correspond to a real path. But it should be unique. Will\n   *     appear in warning messages emitted by the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.getDefault#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.getDefault()",
        "snippet": "  public static CodingConvention getDefault() {\n    return new DefaultCodingConvention();\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": " Gets the default coding convention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.getNodeTypeReferenceCount#2627",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(com.google.javascript.rhino.Node, int, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred) {\n    return getCount(node, new MatchNodeType(type), traverseChildrenPred);\n  }\n",
        "begin_line": 2627,
        "end_line": 2630,
        "comment": "\n   * Finds the number of times a type is referenced within the node tree.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.053
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.getDefinitionsReferencedAt#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.getDefinitionsReferencedAt(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public Collection<Definition> getDefinitionsReferencedAt(Node useSite) {\n    if (definitionSiteMap.containsKey(useSite)) {\n      return null;\n    }\n\n    if (useSite.isGetProp()) {\n      String propName = useSite.getLastChild().getString();\n      if (propName.equals(\"apply\") || propName.equals(\"call\")) {\n        useSite = useSite.getFirstChild();\n      }\n    }\n\n    String name = getSimplifiedName(useSite);\n    if (name != null) {\n      Collection<Definition> defs = nameDefinitionMultimap.get(name);\n      if (!defs.isEmpty()) {\n        return defs;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 76,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0527
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getFunctionJSDocInfo#2814",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(com.google.javascript.rhino.Node)",
        "snippet": "  public static JSDocInfo getFunctionJSDocInfo(Node n) {\n    Preconditions.checkState(n.isFunction());\n    JSDocInfo fnInfo = n.getJSDocInfo();\n    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {\n      // Look for the info on other nodes.\n      Node parent = n.getParent();\n      if (parent.isAssign()) {\n        // on ASSIGNs\n        fnInfo = parent.getJSDocInfo();\n      } else if (parent.isName()) {\n        // on var NAME = function() { ... };\n        fnInfo = parent.getParent().getJSDocInfo();\n      }\n    }\n    return fnInfo;\n  }\n",
        "begin_line": 2814,
        "end_line": 2829,
        "comment": "\n   * Get the JSDocInfo for a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0513
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.precedence#1163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.precedence(int)",
        "snippet": "  static int precedence(int type) {\n    switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Token.name(type) +\n                               \" (type \" + type + \")\");\n    }\n  }\n",
        "begin_line": 1163,
        "end_line": 1236,
        "comment": "\n   *  0 comma ,\n   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=\n   *  2 conditional ?:\n   *  3 logical-or ||\n   *  4 logical-and &&\n   *  5 bitwise-or |\n   *  6 bitwise-xor ^\n   *  7 bitwise-and &\n   *  8 equality == !=\n   *  9 relational < <= > >=\n   * 10 bitwise shift << >> >>>\n   * 11 addition/subtraction + -\n   * 12 multiply/divide * / %\n   * 13 negation/increment ! ~ - ++ --\n   * 14 call, member () [] .\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0494
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.getNamesToAlias#982",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getNamesToAlias()",
        "snippet": "    public Set<String> getNamesToAlias() {\n      if (namesToAlias == null) {\n        return Collections.emptySet();\n      }\n      return Collections.unmodifiableSet(namesToAlias);\n    }\n",
        "begin_line": 982,
        "end_line": 987,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.Reference#1114",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.Reference.Reference(com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.FunctionInjector.InliningMode, boolean)",
        "snippet": "    Reference(\n        Node callNode, JSModule module, InliningMode mode, boolean decompose) {\n      super(callNode, module, mode);\n      this.requiresDecomposition = decompose;\n    }\n",
        "begin_line": 1114,
        "end_line": 1118,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.getReferencesInternal#960",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getReferencesInternal()",
        "snippet": "    private Map<Node, Reference> getReferencesInternal() {\n      if (references == null) {\n        return Collections.emptyMap();\n      }\n      return references;\n    }\n",
        "begin_line": 960,
        "end_line": 965,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.addReference#967",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.addReference(com.google.javascript.jscomp.InlineFunctions.Reference)",
        "snippet": "    public void addReference(Reference ref) {\n      if (references == null) {\n        references = Maps.newHashMap();\n      }\n      references.put(ref.callNode, ref);\n    }\n",
        "begin_line": 967,
        "end_line": 972,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.getModule#997",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getModule()",
        "snippet": "    public JSModule getModule() {\n      return module;\n    }\n",
        "begin_line": 997,
        "end_line": 999,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.maybeAddReferenceUsingMode#517",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.maybeAddReferenceUsingMode(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.InlineFunctions.FunctionState, com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.FunctionInjector.InliningMode)",
        "snippet": "    private boolean maybeAddReferenceUsingMode(\n        NodeTraversal t, FunctionState fs, Node callNode,\n        JSModule module, InliningMode mode) {\n\n      if (specializationState != null) {\n        // If we're specializing, make sure we can fixup\n        // the containing function before inlining\n        Node containingFunction = getContainingFunction(t);\n        if (containingFunction != null && !specializationState.canFixupFunction(\n            containingFunction)) {\n            return false;\n        }\n      }\n\n      CanInlineResult result = injector.canInlineReferenceToFunction(\n          t, callNode, fs.getFn().getFunctionNode(),\n          fs.getNamesToAlias(), mode, fs.getReferencesThis(),\n          fs.hasInnerFunctions());\n      if (result != CanInlineResult.NO) {\n        // Yeah!\n        boolean decompose =\n          (result == CanInlineResult.AFTER_DECOMPOSITION);\n        fs.addReference(new Reference(callNode, module, mode, decompose));\n        return true;\n      }\n\n      return false;\n    }\n",
        "begin_line": 517,
        "end_line": 544,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.inliningLowersCost#708",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.inliningLowersCost(com.google.javascript.jscomp.InlineFunctions.FunctionState)",
        "snippet": "  private boolean inliningLowersCost(FunctionState fs) {\n    return injector.inliningLowersCost(\n        fs.getModule(),\n        fs.getFn().getFunctionNode(),\n        fs.getReferences(),\n        fs.getNamesToAlias(),\n        fs.canRemove(),\n        fs.getReferencesThis());\n  }\n",
        "begin_line": 708,
        "end_line": 716,
        "comment": "\n   * @return Whether inlining the function reduces code size.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionInjector.Reference#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.Reference.Reference(com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.FunctionInjector.InliningMode)",
        "snippet": "    Reference(Node callNode, JSModule module, InliningMode mode){\n      this.callNode = callNode;\n      this.module = module;\n      this.mode = mode;\n    }\n",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.getReferences#974",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getReferences()",
        "snippet": "    public Collection<Reference> getReferences() {\n      return getReferencesInternal().values();\n    }\n",
        "begin_line": 974,
        "end_line": 976,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0481
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateReturn#479",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateReturn(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateReturn(Node n) {\n    validateNodeType(Token.RETURN, n);\n    validateMaximumChildCount(n, 1);\n    if (n.hasChildren()) {\n      validateExpression(n.getFirstChild());\n    }\n  }\n",
        "begin_line": 479,
        "end_line": 485,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0479
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.visit#388",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.CallVisitor.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        // Function calls\n        case Token.CALL:\n          Node child = n.getFirstChild();\n          String name = null;\n          // NOTE: The normalization pass insures that local names do not\n          // collide with global names.\n          if (child.isName()) {\n            name = child.getString();\n          } else if (child.isFunction()) {\n            name = anonFunctionMap.get(child);\n          } else if (NodeUtil.isFunctionObjectCall(n)) {\n            Preconditions.checkState(NodeUtil.isGet(child));\n            Node fnIdentifingNode = child.getFirstChild();\n            if (fnIdentifingNode.isName()) {\n              name = fnIdentifingNode.getString();\n            } else if (fnIdentifingNode.isFunction()) {\n              name = anonFunctionMap.get(fnIdentifingNode);\n            }\n          }\n\n          if (name != null) {\n            FunctionState fs = functionMap.get(name);\n            // Only visit call-sites for functions that can be inlined.\n            if (fs != null) {\n              callback.visitCallSite(t, n, parent, fs);\n            }\n          }\n          break;\n      }\n    }\n",
        "begin_line": 388,
        "end_line": 420,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0475
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.isCandidateUsage#427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.isCandidateUsage(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isCandidateUsage(Node name) {\n    Node parent = name.getParent();\n    Preconditions.checkState(name.isName());\n    if (parent.isVar() || parent.isFunction()) {\n      // This is a declaration.  Duplicate declarations are handle during\n      // function candidate gathering.\n      return true;\n    }\n\n    if (parent.isCall() && parent.getFirstChild() == name) {\n      // This is a normal reference to the function.\n      return true;\n    }\n\n    // Check for a \".call\" to the named function:\n    //   CALL\n    //     GETPROP/GETELEM\n    //       NAME\n    //       STRING == \"call\"\n    //     This-Value\n    //     Function-parameter-1\n    //     ...\n    if (NodeUtil.isGet(parent)\n         && name == parent.getFirstChild()\n         && name.getNext().isString()\n         && name.getNext().getString().equals(\"call\")) {\n      Node gramps = name.getAncestor(2);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        // Yep, a \".call\".\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 427,
        "end_line": 461,
        "comment": "\n   * @return Whether the name is used in a way that might be a candidate\n   *   for inlining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0475
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.getReferencesThis#877",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getReferencesThis()",
        "snippet": "    public boolean getReferencesThis() {\n      return this.referencesThis;\n    }\n",
        "begin_line": 877,
        "end_line": 879,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0474
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.hasInnerFunctions#886",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.hasInnerFunctions()",
        "snippet": "    public boolean hasInnerFunctions() {\n      return hasInnerFunctions;\n    }\n",
        "begin_line": 886,
        "end_line": 888,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0474
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.maybeAddReference#490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.maybeAddReference(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.InlineFunctions.FunctionState, com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule)",
        "snippet": "    void maybeAddReference(NodeTraversal t, FunctionState fs,\n        Node callNode, JSModule module) {\n      if (!fs.canInline()) {\n        return;\n      }\n\n      boolean referenceAdded = false;\n      InliningMode mode = fs.canInlineDirectly()\n           ? InliningMode.DIRECT : InliningMode.BLOCK;\n      referenceAdded = maybeAddReferenceUsingMode(\n          t, fs, callNode, module, mode);\n      if (!referenceAdded &&\n          mode == InliningMode.DIRECT && blockFunctionInliningEnabled) {\n        // This reference can not be directly inlined, see if\n        // block replacement inlining is possible.\n        mode = InliningMode.BLOCK;\n        referenceAdded = maybeAddReferenceUsingMode(\n            t, fs, callNode, module, mode);\n      }\n\n      if (!referenceAdded) {\n        // Don't try to remove a function if we can't inline all\n        // the references.\n        fs.setRemove(false);\n      }\n    }\n",
        "begin_line": 490,
        "end_line": 515,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0472
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.apply#2614",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchShallowStatement.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node n) {\n      Node parent = n.getParent();\n      return n.isBlock()\n          || (!n.isFunction() && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));\n    }\n",
        "begin_line": 2614,
        "end_line": 2621,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.getFn#909",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getFn()",
        "snippet": "    public Function getFn() {\n      return fn;\n    }\n",
        "begin_line": 909,
        "end_line": 911,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.canRemove#940",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.canRemove()",
        "snippet": "    public boolean canRemove() {\n      return remove;\n    }\n",
        "begin_line": 940,
        "end_line": 942,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0461
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.hasReferences#956",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.hasReferences()",
        "snippet": "    public boolean hasReferences() {\n      return (references != null && !references.isEmpty());\n    }\n",
        "begin_line": 956,
        "end_line": 958,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0461
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.visitCallSite#484",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.visitCallSite(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineFunctions.FunctionState)",
        "snippet": "    @Override\n    public void visitCallSite(\n        NodeTraversal t, Node callNode, Node parent, FunctionState fs) {\n      maybeAddReference(t, fs, callNode, t.getModule());\n    }\n",
        "begin_line": 484,
        "end_line": 488,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.046
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.canInlineDirectly#948",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.canInlineDirectly()",
        "snippet": "    public boolean canInlineDirectly() {\n      return inlineDirectly;\n    }\n",
        "begin_line": 948,
        "end_line": 950,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.setModule#993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.setModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "    public void setModule(JSModule module) {\n      this.module = module;\n    }\n",
        "begin_line": 993,
        "end_line": 995,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.definitionTypeContainsFunctionType#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.definitionTypeContainsFunctionType(com.google.javascript.jscomp.DefinitionsRemover.Definition)",
        "snippet": "  private static boolean definitionTypeContainsFunctionType(Definition def) {\n    Node rhs = def.getRValue();\n    if (rhs == null) {\n      return true;\n    }\n\n    switch (rhs.getType()) {\n      case Token.ASSIGN:\n      case Token.AND:\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.FUNCTION:\n      case Token.HOOK:\n      case Token.NAME:\n      case Token.NEW:\n      case Token.OR:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 77,
        "end_line": 98,
        "comment": "\n   * Determines if the type of the value of the rhs expression can\n   * be a function node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0457
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionInjector.apply#146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.Anonymous-db6c53f5-f887-4abf-9c7f-3c0afa1a8b09.apply(com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public boolean apply(Node n) {\n        if (n.isName()) {\n          return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));\n        }\n        return false;\n      }\n",
        "begin_line": 146,
        "end_line": 156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0455
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionInjector.setKnownConstants#913",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.setKnownConstants(java.util.Set<java.lang.String>)",
        "snippet": "  public void setKnownConstants(Set<String> knownConstants) {\n    // This is only expected to be set once. The same set should be used\n    // when evaluating call-sites and inlining calls.\n    Preconditions.checkState(this.knownConstants.isEmpty());\n    this.knownConstants = knownConstants;\n  }\n",
        "begin_line": 913,
        "end_line": 918,
        "comment": "\n   * Store the names of known constants to be used when classifying call-sites\n   * in expressions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0455
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.isCandidateFunction#335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.isCandidateFunction(com.google.javascript.jscomp.InlineFunctions.Function)",
        "snippet": "  private boolean isCandidateFunction(Function fn) {\n    // Don't inline exported functions.\n    String fnName = fn.getName();\n    if (compiler.getCodingConvention().isExported(fnName)) {\n      // TODO(johnlenz): Should we allow internal references to be inlined?\n      // An exported name can be replaced externally, any inlined instance\n      // would not reflect this change.\n      // To allow inlining we need to be able to distinguish between exports\n      // that are used in a read-only fashion and those that can be replaced\n      // by external definitions.\n      return false;\n    }\n\n    // Don't inline this special function\n    if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) {\n      return false;\n    }\n\n    // Don't inline if we are specializing and the function can't be fixed up\n    if (specializationState != null &&\n        !specializationState.canFixupFunction(fn.getFunctionNode())) {\n      return false;\n    }\n\n    Node fnNode = fn.getFunctionNode();\n    return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);\n  }\n",
        "begin_line": 335,
        "end_line": 361,
        "comment": "\n   * Checks if the given function matches the criteria for an inlinable\n   * function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0455
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionInjector.doesFunctionMeetMinimumRequirements#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.doesFunctionMeetMinimumRequirements(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  boolean doesFunctionMeetMinimumRequirements(\n      final String fnName, Node fnNode) {\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    // Basic restrictions on functions that can be inlined:\n    // 0) The function is inlinable by convention\n    // 1) It contains a reference to itself.\n    // 2) It uses its parameters indirectly using \"arguments\" (it isn't\n    //    handled yet.\n    // 3) It references \"eval\". Inline a function containing eval can have\n    //    large performance implications.\n\n    if (!compiler.getCodingConvention().isInlinableFunction(fnNode)) {\n      return false;\n    }\n\n    final String fnRecursionName = fnNode.getFirstChild().getString();\n    Preconditions.checkState(fnRecursionName != null);\n\n    // If the function references \"arguments\" directly in the function\n    boolean referencesArguments = NodeUtil.isNameReferenced(\n        block, \"arguments\", NodeUtil.MATCH_NOT_FUNCTION);\n\n    // or it references \"eval\" or one of its names anywhere.\n    Predicate<Node> p = new Predicate<Node>(){\n      @Override\n      public boolean apply(Node n) {\n        if (n.isName()) {\n          return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));\n        }\n        return false;\n      }\n    };\n\n    return !referencesArguments\n        && !NodeUtil.has(block, p, Predicates.<Node>alwaysTrue());\n  }\n",
        "begin_line": 121,
        "end_line": 161,
        "comment": "\n   * @param fnName The name of this function. This either the name of the\n   *  variable to which the function is assigned or the name from the FUNCTION\n   *  node.\n   * @param fnNode The FUNCTION node of the function to inspect.\n   * @return Whether the function node meets the minimum requirements for\n   * inlining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0455
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.VerifyConstants#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.VerifyConstants.VerifyConstants(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations) {\n      this.compiler = compiler;\n      this.checkUserDeclarations = checkUserDeclarations;\n    }\n",
        "begin_line": 278,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.process#283",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.VerifyConstants.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      Node externsAndJs = root.getParent();\n      Preconditions.checkState(externsAndJs != null);\n      Preconditions.checkState(externsAndJs.hasChild(externs));\n\n      NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);\n    }\n",
        "begin_line": 283,
        "end_line": 291,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.hasExistingFunctionDefinition#869",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.hasExistingFunctionDefinition()",
        "snippet": "    boolean hasExistingFunctionDefinition() {\n      return (fn != null);\n    }\n",
        "begin_line": 869,
        "end_line": 871,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.setFn#913",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.setFn(com.google.javascript.jscomp.InlineFunctions.Function)",
        "snippet": "    public void setFn(Function fn) {\n      Preconditions.checkState(this.fn == null);\n      this.fn = fn;\n    }\n",
        "begin_line": 913,
        "end_line": 916,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.canInline#926",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.canInline()",
        "snippet": "    public boolean canInline() {\n      return inline;\n    }\n",
        "begin_line": 926,
        "end_line": 928,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.FindCandidatesReferences#469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.FindCandidatesReferences(java.util.Map<java.lang.String, com.google.javascript.jscomp.InlineFunctions.FunctionState>, java.util.Map<com.google.javascript.rhino.Node, java.lang.String>)",
        "snippet": "    FindCandidatesReferences(\n        Map<String, FunctionState> fns,\n        Map<Node, String> anonFns) {\n      super(fns, anonFns, null);\n      this.callback = this;\n    }\n",
        "begin_line": 469,
        "end_line": 474,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.visit#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      super.visit(t, n, parent);\n      if (n.isName()) {\n        checkNameUsage(t, n, parent);\n      }\n    }\n",
        "begin_line": 476,
        "end_line": 482,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.checkNameUsage#549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.checkNameUsage(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n      Preconditions.checkState(n.isName());\n\n      if (isCandidateUsage(n)) {\n        return;\n      }\n\n      // Other refs to a function name remove its candidacy for inlining\n      String name = n.getString();\n      FunctionState fs = fns.get(name);\n      if (fs == null) {\n        return;\n      }\n\n      // Unlike normal call/new parameters, references passed to\n      // JSCompiler_ObjectPropertyString are not aliases of a value, but\n      // a reference to the name itself, as such the value of the name is\n      // unknown and can not be inlined.\n      if (parent.isNew()) {\n        Node target = parent.getFirstChild();\n        if (target.isName() && target.getString().equals(\n            ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n          // This method is going to be replaced so don't inline it anywhere.\n          fs.setInline(false);\n        }\n      }\n\n      // If the name is being assigned to it can not be inlined.\n      if (parent.isAssign() && parent.getFirstChild() == n) {\n        // e.g. bar = something; <== we can't inline \"bar\"\n        // so mark the function as uninlinable.\n        // TODO(johnlenz): Should we just remove it from fns here?\n        fs.setInline(false);\n      } else {\n        // e.g. var fn = bar; <== we can't inline \"bar\"\n        // As this reference can't be inlined mark the function as\n        // unremovable.\n        fs.setRemove(false);\n      }\n    }\n",
        "begin_line": 549,
        "end_line": 588,
        "comment": "\n     * Find functions that can be inlined.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.CallVisitor#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.CallVisitor.CallVisitor(java.util.Map<java.lang.String, com.google.javascript.jscomp.InlineFunctions.FunctionState>, java.util.Map<com.google.javascript.rhino.Node, java.lang.String>, com.google.javascript.jscomp.InlineFunctions.CallVisitorCallback)",
        "snippet": "    CallVisitor(Map<String, FunctionState> fns,\n                Map<Node, String> anonFns,\n                CallVisitorCallback callback) {\n      this.functionMap = fns;\n      this.anonFunctionMap = anonFns;\n      this.callback = callback;\n    }\n",
        "begin_line": 380,
        "end_line": 386,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.getOrCreateFunctionState#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.getOrCreateFunctionState(java.lang.String)",
        "snippet": "  FunctionState getOrCreateFunctionState(String fnName) {\n    FunctionState fs = fns.get(fnName);\n    if (fs == null) {\n      fs = new FunctionState();\n      fns.put(fnName, fs);\n    }\n    return fs;\n  }\n",
        "begin_line": 97,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.trimCanidatesNotMeetingMinimumRequirements#652",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.trimCanidatesNotMeetingMinimumRequirements()",
        "snippet": "  private void trimCanidatesNotMeetingMinimumRequirements() {\n   Iterator<Entry<String, FunctionState>> i;\n   for (i = fns.entrySet().iterator(); i.hasNext();) {\n     FunctionState fs = i.next().getValue();\n     if (!fs.hasExistingFunctionDefinition() || !fs.canInline()) {\n       i.remove();\n     }\n   }\n  }\n",
        "begin_line": 652,
        "end_line": 660,
        "comment": "\n   * Remove entries that aren't a valid inline candidates, from the list of\n   * encountered names.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isNameReferenced#2635",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isNameReferenced(com.google.javascript.rhino.Node, java.lang.String, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred) {\n    return has(node, new MatchNameNode(name), traverseChildrenPred);\n  }\n",
        "begin_line": 2635,
        "end_line": 2639,
        "comment": "\n   * Whether a simple name is referenced within the node tree.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0449
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.isInlinableFunction#161",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isInlinableFunction(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean isInlinableFunction(Node n) {\n      return nextConvention.isInlinableFunction(n);\n    }\n",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0449
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.isInlinableFunction#349",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.DefaultCodingConvention.isInlinableFunction(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean isInlinableFunction(Node n) {\n      Preconditions.checkState(n.isFunction());\n      return true;\n    }\n",
        "begin_line": 349,
        "end_line": 353,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0449
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.findFunctionExpressions#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidateFunctions.findFunctionExpressions(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "    public void findFunctionExpressions(NodeTraversal t, Node n) {\n      switch (n.getType()) {\n        // Functions expressions in the form of:\n        //   (function(){})();\n        case Token.CALL:\n          Node fnNode = null;\n          if (n.getFirstChild().isFunction()) {\n            fnNode = n.getFirstChild();\n          } else if (NodeUtil.isFunctionObjectCall(n)) {\n            Node fnIdentifingNode = n.getFirstChild().getFirstChild();\n            if (fnIdentifingNode.isFunction()) {\n              fnNode = fnIdentifingNode;\n            }\n          }\n\n          // If a interesting function was discovered, add it.\n          if (fnNode != null) {\n            Function fn = new FunctionExpression(fnNode, callsSeen++);\n            maybeAddFunction(fn, t.getModule());\n            anonFns.put(fnNode, fn.getName());\n          }\n          break;\n      }\n    }\n",
        "begin_line": 212,
        "end_line": 235,
        "comment": "\n     * Find function expressions that are called directly in the form of\n     *   (function(a,b,...){...})(a,b,...)\n     * or\n     *   (function(a,b,...){...}).call(this,a,b, ...)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0446
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.maybeLineBreak#463",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeLineBreak()",
        "snippet": "    @Override\n    void maybeLineBreak() {\n      if (lineBreak) {\n        if (sawFunction) {\n          startNewLine();\n          sawFunction = false;\n        }\n      }\n\n      // Since we are at a legal line break, can we upgrade the\n      // preferred break position?  We prefer to break after a\n      // semicolon rather than before it.\n      int len = code.length();\n      if (preferredBreakPosition == len - 1) {\n        char ch = code.charAt(len - 1);\n        if (ch == ';') {\n          preferredBreakPosition = len;\n        }\n      }\n      maybeCutLine();\n    }\n",
        "begin_line": 463,
        "end_line": 483,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0446
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.process#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    requiresLineNumbers = false;\n\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0442
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.shouldTraverse#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    // Each JavaScript file is rooted in a script node, so we'll only\n    // have line number information inside the script node.\n    if (n.isScript()) {\n      requiresLineNumbers = true;\n    }\n    return true;\n  }\n",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0442
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.visit#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isScript()) {\n      requiresLineNumbers = false;\n    } else if (requiresLineNumbers) {\n      if (n.getLineno() == -1) {\n        // The tree version of the node is really the best diagnostic\n        // info we have to offer here.\n        compiler.report(\n            t.makeError(n, MISSING_LINE_INFO,\n                n.toStringTree()));\n      }\n    }\n  }\n",
        "begin_line": 67,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0442
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.isIndirectEval#787",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.isIndirectEval(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isIndirectEval(Node n) {\n    return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);\n  }\n",
        "begin_line": 787,
        "end_line": 790,
        "comment": "\n   * @return Whether the name is an indirect eval.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.isImplicitPrototype#469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final boolean isImplicitPrototype(ObjectType prototype) {\n    for (ObjectType current = this;\n         current != null;\n         current = current.getImplicitPrototype()) {\n      if (current.isEquivalentTo(prototype)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 469,
        "end_line": 478,
        "comment": "\n   * Checks that the prototype is an implicit prototype of this object. Since\n   * each object has an implicit prototype, an implicit prototype's\n   * implicit prototype is also this implicit prototype's.\n   *\n   * @param prototype any prototype based object\n   *\n   * @return {@code true} if {@code prototype} is {@code equal} to any\n   *         object in this object's implicit prototype chain.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.isEquivalentTo#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isEquivalentTo(JSType that) {\n    if (this == that) {\n      return true;\n    } else if (this.isNominalType()) {\n      ObjectType thatObj = ObjectType.cast(that);\n      if (thatObj != null && thatObj.isNominalType()) {\n        return getReferenceName().equals(thatObj.getReferenceName());\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 156,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0436
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.addAlternate#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType = isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown = alternate instanceof UnknownType;\n    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked = areAllUnknownsChecked &&\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType && !isNativeUnknownType) {\n      if (alternate.isUnionType()) {\n        UnionType union = alternate.toMaybeUnionType();\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (alternates.size() > maxUnionSize) {\n          return this;\n        }\n\n        // Function types are special, because they have their\n        // own bizarro sub-lattice. See the commants on\n        // FunctionType#supAndInf helper and above at functionTypePosition.\n        if (alternate.isFunctionType() && functionTypePosition != -1) {\n          // See the comments on functionTypePosition above.\n          FunctionType other =\n              alternates.get(functionTypePosition).toMaybeFunctionType();\n          FunctionType supremum =\n              alternate.toMaybeFunctionType().supAndInfHelper(other, true);\n          alternates.set(functionTypePosition, supremum);\n          result = null;\n          return this;\n        }\n\n        // Look through the alternates we've got so far,\n        // and check if any of them are duplicates of\n        // one another.\n        int currentIndex = 0;\n        Iterator<JSType> it = alternates.iterator();\n        while (it.hasNext()) {\n          JSType current = it.next();\n\n          // Unknown and NoResolved types may just be names that haven't\n          // been resolved yet. So keep these in the union, and just use\n          // equality checking for simple de-duping.\n          if (alternate.isUnknownType() ||\n              current.isUnknownType() ||\n              alternate.isNoResolvedType() ||\n              current.isNoResolvedType()) {\n            if (alternate.isEquivalentTo(current)) {\n              // Alternate is unnecessary.\n              return this;\n            }\n          } else {\n            if (alternate.isSubtype(current)) {\n              // Alternate is unnecessary.\n              return this;\n            } else if (current.isSubtype(alternate)) {\n              // Alternate makes current obsolete\n              it.remove();\n\n              if (currentIndex == functionTypePosition) {\n                functionTypePosition = -1;\n              } else if (currentIndex < functionTypePosition) {\n                functionTypePosition--;\n                currentIndex--;\n              }\n            }\n          }\n          currentIndex++;\n        }\n\n        if (alternate.isFunctionType()) {\n          // See the comments on functionTypePosition above.\n          Preconditions.checkState(functionTypePosition == -1);\n          functionTypePosition = alternates.size();\n        }\n\n        alternates.add(alternate);\n        result = null; // invalidate the memoized result\n      }\n    } else {\n      result = null;\n    }\n    return this;\n  }\n",
        "begin_line": 121,
        "end_line": 212,
        "comment": "\n   * Adds an alternate to the union type under construction. Returns this\n   * for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0434
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNominalType#353",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
        "snippet": "  public boolean isNominalType() {\n    return false;\n  }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n   * Whether this type is a nominal type (a named instance object or\n   * a named enum).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0434
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.SetNoSideEffectCallProperty#171",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.SetNoSideEffectCallProperty.SetNoSideEffectCallProperty(com.google.javascript.jscomp.SimpleDefinitionFinder)",
        "snippet": "    SetNoSideEffectCallProperty(SimpleDefinitionFinder defFinder) {\n      this.defFinder = defFinder;\n    }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0428
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.GatherNoSideEffectFunctions#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.GatherNoSideEffectFunctions.GatherNoSideEffectFunctions(boolean)",
        "snippet": "    GatherNoSideEffectFunctions(boolean inExterns) {\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0428
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.MarkNoSideEffectCalls#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.MarkNoSideEffectCalls(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  MarkNoSideEffectCalls(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.noSideEffectFunctionNames = Sets.newHashSet();\n  }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0428
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.process#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);\n    defFinder.process(externs, root);\n\n    // Gather the list of function nodes that have @nosideeffect annotations.\n    // For use by SetNoSideEffectCallProperty.\n    NodeTraversal.traverse(\n        compiler, externs, new GatherNoSideEffectFunctions(true));\n    NodeTraversal.traverse(\n        compiler, root, new GatherNoSideEffectFunctions(false));\n\n    NodeTraversal.traverse(compiler, root,\n                           new SetNoSideEffectCallProperty(defFinder));\n  }\n",
        "begin_line": 57,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0428
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.hasNoSideEffectsAnnotation#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.hasNoSideEffectsAnnotation(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean hasNoSideEffectsAnnotation(Node node) {\n    JSDocInfo docInfo = node.getJSDocInfo();\n    return docInfo != null && docInfo.isNoSideEffects();\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "\n   * Get the value of the @nosideeffects annotation stored in the\n   * doc info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0428
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addNumber#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addNumber(double)",
        "snippet": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        addConstant(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        addConstant(Long.toString(value));\n      }\n    } else {\n      addConstant(String.valueOf(x));\n    }\n  }\n",
        "begin_line": 240,
        "end_line": 267,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0426
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.isNegativeZero#273",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isNegativeZero(double)",
        "snippet": "  static boolean isNegativeZero(double x) {\n    return x == 0.0 && Math.copySign(1, x) == -1.0;\n  }\n",
        "begin_line": 273,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0426
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateRoot#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateRoot(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateRoot(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    validateIsSynthetic(n);\n    validateChildCount(n, 2);\n    validateCodeRoot(n.getFirstChild());\n    validateCodeRoot(n.getLastChild());\n  }\n",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0425
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasChild#1414",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChild(com.google.javascript.rhino.Node)",
        "snippet": "  public boolean hasChild(Node child) {\n    for (Node n = first; n != null; n = n.getNext()) {\n      if (child == n) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 1414,
        "end_line": 1421,
        "comment": " Intended for testing and verification only.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 1
    },
    {
        "name": "GoogleCodingConvention.isExported#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isExported(java.lang.String, boolean)",
        "snippet": "  @Override\n  public boolean isExported(String name, boolean local) {\n    return super.isExported(name, local) ||\n        (!local && name.startsWith(\"_\"));\n  }\n",
        "begin_line": 139,
        "end_line": 143,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>In Google code, any global name starting with an underscore is\n   * considered exported.\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.CodingConventions.Proxy": null
        },
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.visit#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidateFunctions.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if ((t.inGlobalScope() && inlineGlobalFunctions)\n          || (!t.inGlobalScope() && inlineLocalFunctions)) {\n        findNamedFunctions(t, n, parent);\n\n        findFunctionExpressions(t, n);\n      }\n    }\n",
        "begin_line": 165,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0419
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isConstantName#2793",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isConstantName(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isConstantName(Node node) {\n    return node.getBooleanProp(Node.IS_CONSTANT_NAME);\n  }\n",
        "begin_line": 2793,
        "end_line": 2795,
        "comment": "\n   * Returns true if a name node represents a constant variable.\n   *\n   * <p>Determining whether a variable is constant has three steps:\n   * <ol>\n   * <li>In CodingConventionAnnotator, any name that matches the\n   *     {@link CodingConvention#isConstant(String)} is annotated with an\n   *     IS_CONSTANT_NAME property.\n   * <li>The normalize pass renames any variable with the IS_CONSTANT_NAME\n   *     annotation and that is initialized to a constant value with\n   *     a variable name inlucding $$constant.\n   * <li>Return true here if the variable includes $$constant in its name.\n   * </ol>\n   *\n   * @param node A NAME or STRING node\n   * @return True if the variable is constant\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0417
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isObjectCallMethod#1936",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  static boolean isObjectCallMethod(Node callNode, String methodName) {\n    if (callNode.isCall()) {\n      Node functionIndentifyingExpression = callNode.getFirstChild();\n      if (isGet(functionIndentifyingExpression)) {\n        Node last = functionIndentifyingExpression.getLastChild();\n        if (last != null && last.isString()) {\n          String propName = last.getString();\n          return (propName.equals(methodName));\n        }\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 1936,
        "end_line": 1948,
        "comment": "\n   * @return Whether node is a call to methodName.\n   *    a.f(...)\n   *    a['f'](...)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0417
        },
        "num_failing_tests": 1
    },
    {
        "name": "UseSite.UseSite#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "class_name": "com.google.javascript.jscomp.UseSite",
        "signature": "com.google.javascript.jscomp.UseSite.UseSite(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.JSModule)",
        "snippet": "  UseSite(Node node, Scope scope, JSModule module) {\n    this.node = node;\n    this.scope = scope;\n    this.module = module;\n  }\n",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0414
        },
        "num_failing_tests": 1
    },
    {
        "name": "UseSite.hashCode#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "class_name": "com.google.javascript.jscomp.UseSite",
        "signature": "com.google.javascript.jscomp.UseSite.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return this.node.hashCode();\n  }\n",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0414
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.visit#272",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.UseSiteGatheringCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n\n      Collection<Definition> defs = getDefinitionsReferencedAt(node);\n      if (defs == null) {\n        return;\n      }\n\n      Definition first = defs.iterator().next();\n\n      String name = getSimplifiedName(first.getLValue());\n      Preconditions.checkNotNull(name);\n      nameUseSiteMultimap.put(\n          name,\n          new UseSite(node, traversal.getScope(), traversal.getModule()));\n    }\n",
        "begin_line": 272,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0414
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.visit#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Note: Constant properties annotations are not propagated.\n      if (n.isName()) {\n        if (n.getString().isEmpty()) {\n          return;\n        }\n\n        JSDocInfo info = null;\n        // Find the JSDocInfo for a top level variable.\n        Var var = t.getScope().getVar(n.getString());\n        if (var != null) {\n          info = var.getJSDocInfo();\n        }\n\n        boolean shouldBeConstant =\n            (info != null && info.isConstant()) ||\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent);\n        boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (shouldBeConstant && !isMarkedConstant) {\n          if (assertOnChange) {\n            String name = n.getString();\n            throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());\n          }\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n      }\n    }\n",
        "begin_line": 235,
        "end_line": 266,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0414
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.MatchNameNode#2561",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNameNode.MatchNameNode(java.lang.String)",
        "snippet": "    MatchNameNode(String name){\n      this.name = name;\n    }\n",
        "begin_line": 2561,
        "end_line": 2563,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0414
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.apply#2565",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNameNode.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node n) {\n      return n.isName() && n.getString().equals(name);\n    }\n",
        "begin_line": 2565,
        "end_line": 2568,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0414
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#1490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node)",
        "snippet": "  public boolean isEquivalentTo(Node node) {\n    return isEquivalentTo(node, false, true);\n  }\n",
        "begin_line": 1490,
        "end_line": 1492,
        "comment": " Returns true if this node is equivalent semantically to another ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0412
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.defineDeclaredProperty#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public final boolean defineDeclaredProperty(String propertyName,\n      JSType type, Node propertyNode) {\n    boolean result = defineProperty(propertyName, type, false,\n        propertyNode);\n\n    // All property definitions go through this method\n    // or defineDeclaredProperty. Because the properties defined an an\n    // object can affect subtyping, it's slightly more efficient\n    // to register this after defining the property.\n    registry.registerPropertyOnType(propertyName, this);\n\n    return result;\n  }\n",
        "begin_line": 271,
        "end_line": 283,
        "comment": "\n   * Defines a property whose type is synthesized (i.e. not inferred).\n   * @param propertyName the property's name\n   * @param type the type\n   * @param propertyNode the node corresponding to the declaration of property\n   *        which might later be accessed using {@code getPropertyNode}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0412
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createNullableType#977",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));\n  }\n",
        "begin_line": 977,
        "end_line": 979,
        "comment": "\n   * Creates a type representing nullable values of the given type.\n   * @return the union of the type and the Null type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0412
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getDouble#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.getDouble()",
        "snippet": "    @Override\n    public double getDouble() {\n      return this.number;\n    }\n",
        "begin_line": 165,
        "end_line": 168,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0412
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.hasOwnProperty#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasOwnProperty(java.lang.String)",
        "snippet": "  @Override\n  public boolean hasOwnProperty(String propertyName) {\n    return properties.get(propertyName) != null;\n  }\n",
        "begin_line": 172,
        "end_line": 175,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0411
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.defineProperty#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    if (hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    Property newProp = new Property(\n        name, type, inferred, propertyNode);\n    Property oldProp = properties.get(name);\n    if (oldProp != null) {\n      // This is to keep previously inferred jsdoc info, e.g., in a\n      // replaceScript scenario.\n      newProp.setJSDocInfo(oldProp.getJSDocInfo());\n    }\n    properties.put(name, newProp);\n    return true;\n  }\n",
        "begin_line": 233,
        "end_line": 249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0411
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getConstructor#406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return null;\n  }\n",
        "begin_line": 406,
        "end_line": 409,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0411
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getReferenceName#427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (className != null) {\n      return className;\n    } else if (ownerFunction != null) {\n      return ownerFunction.getReferenceName() + \".prototype\";\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 427,
        "end_line": 436,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0411
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.hasOwnDeclaredProperty#425",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnDeclaredProperty(java.lang.String)",
        "snippet": "  boolean hasOwnDeclaredProperty(String name) {\n    return hasOwnProperty(name) && isPropertyTypeDeclared(name);\n  }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "\n   * Whether the given property is declared on this object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0411
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.defineProperty#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    ObjectType proto = getImplicitPrototype();\n    if (proto != null && proto.hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    return super.defineProperty(name, type, inferred, propertyNode);\n  }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0411
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateOptionalName#344",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateOptionalName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateOptionalName(Node n) {\n    validateNodeType(Token.NAME, n);\n    validateNonNullString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 344,
        "end_line": 348,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0408
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateFunctionExpression#358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateFunctionExpression(Node n) {\n    validateNodeType(Token.FUNCTION, n);\n    validateChildCount(n, 3);\n    validateOptionalName(n.getFirstChild());\n    validateParameters(n.getChildAtIndex(1));\n    validateBlock(n.getLastChild());\n  }\n",
        "begin_line": 358,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0408
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.LineNumberCheck#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.LineNumberCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  LineNumberCheck(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0408
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isFunctionObjectCall#1956",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionObjectCall(Node callNode) {\n    return isObjectCallMethod(callNode, \"call\");\n  }\n",
        "begin_line": 1956,
        "end_line": 1958,
        "comment": "\n   * @return Whether the callNode represents an expression in the form of:\n   *    x.call(...)\n   *    x['call'](...)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0406
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.visit#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n      // Arguments of external functions should not count as name\n      // definitions.  They are placeholder names for documentation\n      // purposes only which are not reachable from anywhere.\n      if (inExterns && node.isName() && parent.isParamList()) {\n        return;\n      }\n\n      Definition def =\n          DefinitionsRemover.getDefinition(node, inExterns);\n      if (def != null) {\n        String name = getSimplifiedName(def.getLValue());\n        if (name != null) {\n          Node rValue = def.getRValue();\n          if ((rValue != null) &&\n              !NodeUtil.isImmutableValue(rValue) &&\n              !rValue.isFunction()) {\n\n            // Unhandled complex expression\n            Definition unknownDef =\n                new UnknownDefinition(def.getLValue(), inExterns);\n            def = unknownDef;\n          }\n\n          // TODO(johnlenz) : remove this stub dropping code if it becomes\n          // illegal to have untyped stubs in the externs definitions.\n          if (inExterns) {\n            // We need special handling of untyped externs stubs here:\n            //    the stub should be dropped if the name is provided elsewhere.\n\n            List<Definition> stubsToRemove = Lists.newArrayList();\n            String qualifiedName = node.getQualifiedName();\n\n            // If there is no qualified name for this, then there will be\n            // no stubs to remove. This will happen if node is an object\n            // literal key.\n            if (qualifiedName != null) {\n              for (Definition prevDef : nameDefinitionMultimap.get(name)) {\n                if (prevDef instanceof ExternalNameOnlyDefinition\n                    && !jsdocContainsDeclarations(node)) {\n                  String prevName = prevDef.getLValue().getQualifiedName();\n                  if (qualifiedName.equals(prevName)) {\n                    // Drop this stub, there is a real definition.\n                    stubsToRemove.add(prevDef);\n                  }\n                }\n              }\n\n              for (Definition prevDef : stubsToRemove) {\n                nameDefinitionMultimap.remove(name, prevDef);\n              }\n            }\n          }\n\n          nameDefinitionMultimap.put(name, def);\n          definitionSiteMap.put(node,\n                                new DefinitionSite(node,\n                                                   def,\n                                                   traversal.getModule(),\n                                                   traversal.inGlobalScope(),\n                                                   inExterns));\n        }\n      }\n\n      if (inExterns && (parent != null) && parent.isExprResult()) {\n        String name = getSimplifiedName(node);\n        if (name != null) {\n\n          // TODO(johnlenz) : remove this code if it becomes illegal to have\n          // stubs in the externs definitions.\n\n          // We need special handling of untyped externs stubs here:\n          //    the stub should be dropped if the name is provided elsewhere.\n          // We can't just drop the stub now as it needs to be used as the\n          //    externs definition if no other definition is provided.\n\n          boolean dropStub = false;\n          if (!jsdocContainsDeclarations(node)) {\n            String qualifiedName = node.getQualifiedName();\n            if (qualifiedName != null) {\n              for (Definition prevDef : nameDefinitionMultimap.get(name)) {\n                String prevName = prevDef.getLValue().getQualifiedName();\n                if (qualifiedName.equals(prevName)) {\n                  dropStub = true;\n                  break;\n                }\n              }\n            }\n          }\n\n          if (!dropStub) {\n            // Incomplete definition\n            Definition definition = new ExternalNameOnlyDefinition(node);\n            nameDefinitionMultimap.put(name, definition);\n            definitionSiteMap.put(node,\n                                  new DefinitionSite(node,\n                                                     definition,\n                                                     traversal.getModule(),\n                                                     traversal.inGlobalScope(),\n                                                     inExterns));\n          }\n        }\n      }\n    }\n",
        "begin_line": 156,
        "end_line": 260,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0402
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.Definition#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.Definition.Definition(boolean)",
        "snippet": "    Definition(boolean isExtern) {\n      this.isExtern = isExtern;\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0402
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionSite.DefinitionSite#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "signature": "com.google.javascript.jscomp.DefinitionSite.DefinitionSite(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DefinitionsRemover.Definition, com.google.javascript.jscomp.JSModule, boolean, boolean)",
        "snippet": "  DefinitionSite(Node node,\n                 Definition definition,\n                 JSModule module,\n                 boolean inGlobalScope,\n                 boolean inExterns) {\n    this.node = node;\n    this.definition = definition;\n    this.module = module;\n    this.inGlobalScope = inGlobalScope;\n    this.inExterns = inExterns;\n  }\n",
        "begin_line": 36,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0402
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateVar#389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateVar(Node n) {\n    validateNodeType(Token.VAR, n);\n    this.validateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      // Don't use the validateName here as the NAME is allowed to have\n      // a child.\n      validateNodeType(Token.NAME, c);\n      validateNonEmptyString(c);\n      validateMaximumChildCount(c, 1);\n      if (c.hasChildren()) {\n        validateExpression(c.getFirstChild());\n      }\n    }\n  }\n",
        "begin_line": 389,
        "end_line": 402,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.DefinitionGatheringCallback#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback.DefinitionGatheringCallback(boolean)",
        "snippet": "    DefinitionGatheringCallback(boolean inExterns) {\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.SimpleDefinitionFinder#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.SimpleDefinitionFinder(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public SimpleDefinitionFinder(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.definitionSiteMap = Maps.newLinkedHashMap();\n    this.nameDefinitionMultimap = LinkedHashMultimap.create();\n    this.nameUseSiteMultimap = LinkedHashMultimap.create();\n  }\n",
        "begin_line": 51,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.process#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node source) {\n    NodeTraversal.traverse(\n        compiler, externs, new DefinitionGatheringCallback(true));\n    NodeTraversal.traverse(\n        compiler, source, new DefinitionGatheringCallback(false));\n    NodeTraversal.traverse(\n        compiler, source, new UseSiteGatheringCallback());\n  }\n",
        "begin_line": 102,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getVar#539",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVar(java.lang.String)",
        "snippet": "  public Var getVar(String name) {\n    Var var = vars.get(name);\n    if (var != null) {\n      return var;\n    } else if (parent != null) { // Recurse up the parent Scope\n      return parent.getVar(name);\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 539,
        "end_line": 548,
        "comment": "\n   * Returns the variable, may be null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0393
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateBlock#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateBlock(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateBlock(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateStatement(c);\n    }\n  }\n",
        "begin_line": 277,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0392
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isNew#2304",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isNew()",
        "snippet": "  public boolean isNew() {\n    return this.getType() == Token.NEW;\n  }\n",
        "begin_line": 2304,
        "end_line": 2306,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.cloneTree#1706",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneTree()",
        "snippet": "  public Node cloneTree() {\n    Node result = cloneNode();\n    for (Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {\n      Node n2clone = n2.cloneTree();\n      n2clone.parent = result;\n      if (result.last != null) {\n        result.last.next = n2clone;\n      }\n      if (result.first == null) {\n        result.first = n2clone;\n      }\n      result.last = n2clone;\n    }\n    return result;\n  }\n",
        "begin_line": 1706,
        "end_line": 1720,
        "comment": "\n   * @return A detached clone of the Node and all its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.shouldTraverse#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidateFunctions.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent) {\n      // Don't traverse into function bodies\n      // if we aren't inlining local functions.\n      return inlineLocalFunctions || nodeTraversal.inGlobalScope();\n    }\n",
        "begin_line": 157,
        "end_line": 163,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "InlineFunctions.InlineFunctions#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.InlineFunctions(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>, boolean, boolean, boolean, boolean, boolean)",
        "snippet": "  InlineFunctions(AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean inlineGlobalFunctions,\n      boolean inlineLocalFunctions,\n      boolean blockFunctionInliningEnabled,\n      boolean assumeStrictThis,\n      boolean assumeMinimumCapture) {\n    Preconditions.checkArgument(compiler != null);\n    Preconditions.checkArgument(safeNameIdSupplier != null);\n    this.compiler = compiler;\n\n    this.inlineGlobalFunctions = inlineGlobalFunctions;\n    this.inlineLocalFunctions = inlineLocalFunctions;\n    this.blockFunctionInliningEnabled = blockFunctionInliningEnabled;\n    this.assumeMinimumCapture = assumeMinimumCapture;\n\n    this.injector = new FunctionInjector(\n        compiler, safeNameIdSupplier,\n        true, assumeStrictThis, assumeMinimumCapture);\n  }\n",
        "begin_line": 76,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionArgumentInjector.findModifiedParameters#195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.findModifiedParameters(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.util.Set<java.lang.String>, java.util.Set<java.lang.String>, boolean)",
        "snippet": "  private static Set<String> findModifiedParameters(\n      Node n, Node parent, Set<String> names, Set<String> unsafe,\n      boolean inInnerFunction) {\n    Preconditions.checkArgument(unsafe != null);\n    if (n.isName()) {\n      if (names.contains(n.getString())) {\n        if (inInnerFunction || canNameValueChange(n, parent)) {\n          unsafe.add(n.getString());\n        }\n      }\n    } else if (n.isFunction()) {\n      // A function parameter can not be replaced with a direct inlined value\n      // if it is referred to by an inner function. The inner function\n      // can out live the call we are replacing, so inner function must\n      // capture a unique name.  This approach does not work within loop\n      // bodies so those are forbidden elsewhere.\n      inInnerFunction = true;\n    }\n\n    for (Node c : n.children()) {\n      findModifiedParameters(c, n, names, unsafe, inInnerFunction);\n    }\n\n    return unsafe;\n  }\n",
        "begin_line": 195,
        "end_line": 219,
        "comment": "\n   * Check for uses of the named value that imply a pass-by-value\n   * parameter is expected.  This is used to prevent cases like:\n   *\n   *   function (x) {\n   *     x=2;\n   *     return x;\n   *   }\n   *\n   * We don't want \"undefined\" to be substituted for \"x\", and get\n   *   undefined=2\n   *\n   * @param n The node in question.\n   * @param parent The parent of the node.\n   * @param names The set of names to check.\n   * @param unsafe The set of names that require aliases.\n   * @param inInnerFunction Whether the inspection is occurring on a inner\n   *     function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0387
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endFunction#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFunction(boolean)",
        "snippet": "  void endFunction(boolean statementContext) {\n    sawFunction = true;\n    if (statementContext) {\n      endLine();\n    }\n  }\n",
        "begin_line": 167,
        "end_line": 172,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0386
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionInjector.isSupportedCallType#222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.isSupportedCallType(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isSupportedCallType(Node callNode) {\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        if (!assumeStrictThis) {\n          Node thisValue = callNode.getFirstChild().getNext();\n          if (thisValue == null || !thisValue.isThis()) {\n            return false;\n          }\n        }\n      } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 222,
        "end_line": 237,
        "comment": "\n   * Only \".call\" calls and direct calls to functions are supported.\n   * @param callNode The call evaluate.\n   * @return Whether the call is of a type that is supported.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isImmutableValue#490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isImmutableValue(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isImmutableValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }\n\n    return false;\n  }\n",
        "begin_line": 490,
        "end_line": 513,
        "comment": "\n   * Returns true if this is an immutable value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0382
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processReturnStatement#896",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement)",
        "snippet": "    @Override\n    Node processReturnStatement(ReturnStatement statementNode) {\n      Node node = newNode(Token.RETURN);\n      if (statementNode.getReturnValue() != null) {\n        node.addChildToBack(transform(statementNode.getReturnValue()));\n      }\n      return node;\n    }\n",
        "begin_line": 896,
        "end_line": 903,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0382
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateCall#373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateCall(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateCall(Node n) {\n    validateNodeType(Token.CALL, n);\n    validateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateExpression(c);\n    }\n  }\n",
        "begin_line": 373,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0382
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processFunctionNode#626",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode)",
        "snippet": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        int functionType = functionNode.getFunctionType();\n        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n\n          // Return the bare minimum to put the AST in a valid state.\n          return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n        }\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n        maybeSetLengthFrom(newName, name);\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.PARAM_LIST);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        Node paramNode = transform(param);\n        // When in ideMode Rhino can generate a param list with only a single\n        // ErrorNode. This is transformed into an EMPTY node. Drop this node in\n        // ideMode to keep the AST in a valid state.\n        if (paramNode.isName()) {\n          lp.addChildToBack(paramNode);\n        } else {\n          // We expect this in ideMode or when there is an error handling\n          // destructuring parameter assignments which aren't supported\n          // (an error has already been reported).\n          Preconditions.checkState(\n              config.isIdeMode\n              || paramNode.isObjectLit()\n              || paramNode.isArrayLit());\n        }\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      if (!bodyNode.isBlock()) {\n        // When in ideMode Rhino tries to parse some constructs the compiler\n        // doesn't support, repair it here. see Rhino's\n        // Parser#parseFunctionBodyExpr.\n        Preconditions.checkState(config.isIdeMode);\n        bodyNode = IR.block();\n      }\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
        "begin_line": 626,
        "end_line": 708,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.038
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.appendBlockStart#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockStart()",
        "snippet": "  void appendBlockStart() {\n    append(\"{\");\n  }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.038
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.appendBlockEnd#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockEnd()",
        "snippet": "  void appendBlockEnd() {\n    append(\"}\");\n  }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.038
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.beginBlock#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.beginBlock()",
        "snippet": "  void beginBlock() {\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n    }\n    appendBlockStart();\n\n    endLine();\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 100,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.038
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endBlock#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endBlock(boolean)",
        "snippet": "  void endBlock(boolean shouldEndLine) {\n    appendBlockEnd();\n    if (shouldEndLine) {\n      endLine();\n    }\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.038
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.breakAfterBlockFor#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.breakAfterBlockFor(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  boolean breakAfterBlockFor(Node n, boolean statementContext) {\n    return statementContext;\n  }\n",
        "begin_line": 298,
        "end_line": 300,
        "comment": "\n   * @return Whether the a line break can be added after the specified BLOCK.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.038
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseFunction#510",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.isFunction());\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.isBlock(), body);\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
        "begin_line": 510,
        "end_line": 545,
        "comment": "\n   * Traverses a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0379
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processFunctionCall#612",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall)",
        "snippet": "    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));\n      for (AstNode child : callNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n\n      node.setLineno(node.getFirstChild().getLineno());\n      node.setCharno(node.getFirstChild().getCharno());\n      maybeSetLengthFrom(node, callNode);\n      return node;\n    }\n",
        "begin_line": 612,
        "end_line": 624,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0378
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processNumberLiteral#799",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral)",
        "snippet": "    @Override\n    Node processNumberLiteral(NumberLiteral literalNode) {\n      return newNumberNode(literalNode.getNumber());\n    }\n",
        "begin_line": 799,
        "end_line": 802,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0378
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNumberNode#1355",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNumberNode(java.lang.Double)",
        "snippet": "  private Node newNumberNode(Double value) {\n    return IR.number(value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1355,
        "end_line": 1357,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0378
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.resetUniqueNameId#963",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.resetUniqueNameId()",
        "snippet": "  @VisibleForTesting\n  void resetUniqueNameId() {\n    uniqueNameId = 0;\n  }\n",
        "begin_line": 963,
        "end_line": 966,
        "comment": "\n   * Resets the unique name id counter\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0377
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isReturn#2336",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isReturn()",
        "snippet": "  public boolean isReturn() {\n    return this.getType() == Token.RETURN;\n  }\n",
        "begin_line": 2336,
        "end_line": 2338,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0376
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.isExported#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isExported(java.lang.String)",
        "snippet": "    @Override\n    public final boolean isExported(String name) {\n      return isExported(name, false) || isExported(name, true);\n    }\n",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0374
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.moveNamedFunctions#640",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.moveNamedFunctions(com.google.javascript.rhino.Node)",
        "snippet": "    private void moveNamedFunctions(Node functionBody) {\n      Preconditions.checkState(\n          functionBody.getParent().isFunction());\n      Node previous = null;\n      Node current = functionBody.getFirstChild();\n      // Skip any declarations at the beginning of the function body, they\n      // are already in the right place.\n      while (current != null && NodeUtil.isFunctionDeclaration(current)) {\n        previous = current;\n        current = current.getNext();\n      }\n\n      // Find any remaining declarations and move them.\n      Node insertAfter = previous;\n      while (current != null) {\n        // Save off the next node as the current node maybe removed.\n        Node next = current.getNext();\n        if (NodeUtil.isFunctionDeclaration(current)) {\n          // Remove the declaration from the body.\n          Preconditions.checkNotNull(previous);\n          functionBody.removeChildAfter(previous);\n\n          // Readd the function at the top of the function body (after any\n          // previous declarations).\n          insertAfter = addToFront(functionBody, current, insertAfter);\n          reportCodeChange(\"Move function declaration not at top of function\");\n        } else {\n          // Update the previous only if the current node hasn't been moved.\n          previous = current;\n        }\n        current = next;\n      }\n    }\n",
        "begin_line": 640,
        "end_line": 672,
        "comment": "\n     * Move all the functions that are valid at the execution of the first\n     * statement of the function to the beginning of the function definition.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0374
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.cloneNode#1687",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneNode()",
        "snippet": "  public Node cloneNode() {\n    Node result;\n    try {\n      result = (Node) super.clone();\n      // PropListItem lists are immutable and can be shared so there is no\n      // need to clone them here.\n      result.next = null;\n      result.first = null;\n      result.last = null;\n      result.parent = null;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e.getMessage());\n    }\n    return result;\n  }\n",
        "begin_line": 1687,
        "end_line": 1701,
        "comment": "\n   * @return A detached clone of the Node, specifically excluding its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0372
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.referencesThis#1497",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.referencesThis(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean referencesThis(Node n) {\n    Node start = (n.isFunction()) ? n.getLastChild() : n;\n    return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);\n  }\n",
        "begin_line": 1497,
        "end_line": 1500,
        "comment": "\n   * Returns true if the shallow scope contains references to 'this' keyword\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0372
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getFunctionParameters#2770",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionParameters(com.google.javascript.rhino.Node)",
        "snippet": "  public static Node getFunctionParameters(Node fnNode) {\n    // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]\n    Preconditions.checkArgument(fnNode.isFunction());\n    return fnNode.getFirstChild().getNext();\n  }\n",
        "begin_line": 2770,
        "end_line": 2774,
        "comment": "\n    * @param fnNode The function.\n    * @return The Node containing the Function parameters.\n    ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0372
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionArgumentInjector.findModifiedParameters#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.findModifiedParameters(com.google.javascript.rhino.Node)",
        "snippet": "  static Set<String> findModifiedParameters(Node fnNode) {\n    Set<String> names = getFunctionParameterSet(fnNode);\n    Set<String> unsafeNames = Sets.newHashSet();\n    return findModifiedParameters(\n        fnNode.getLastChild(), null, names, unsafeNames, false);\n  }\n",
        "begin_line": 169,
        "end_line": 174,
        "comment": "\n   * Retrieve a set of names that can not be safely substituted in place.\n   * Example:\n   *   function(a) {\n   *     a = 0;\n   *   }\n   * Inlining this without taking precautions would cause the call site value\n   * to be modified (bad).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0372
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionArgumentInjector.getFunctionParameterSet#495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionParameterSet(com.google.javascript.rhino.Node)",
        "snippet": "  private static Set<String> getFunctionParameterSet(Node fnNode) {\n    Set<String> set = Sets.newHashSet();\n    for (Node n : NodeUtil.getFunctionParameters(fnNode).children()) {\n      set.add(n.getString());\n    }\n    return set;\n  }\n",
        "begin_line": 495,
        "end_line": 501,
        "comment": "\n   * Get a set of function parameter names.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0372
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.isExported#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isExported(java.lang.String, boolean)",
        "snippet": "    @Override\n    public boolean isExported(String name, boolean local) {\n      return nextConvention.isExported(name, local);\n    }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0372
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.isExported#275",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.DefaultCodingConvention.isExported(java.lang.String, boolean)",
        "snippet": "    @Override\n    public boolean isExported(String name, boolean local) {\n      return local && name.startsWith(\"$super\");\n    }\n",
        "begin_line": 275,
        "end_line": 278,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0372
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getModule#439",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getModule()",
        "snippet": "  public JSModule getModule() {\n    CompilerInput input = getInput();\n    return input == null ? null : input.getModule();\n  }\n",
        "begin_line": 439,
        "end_line": 442,
        "comment": "\n   * Gets the current input module.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0371
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getModuleGraph#1125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getModuleGraph()",
        "snippet": "  @Override\n  JSModuleGraph getModuleGraph() {\n    return moduleGraph;\n  }\n",
        "begin_line": 1125,
        "end_line": 1128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0368
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processVariableInitializer#1075",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer)",
        "snippet": "    @Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n      Node node = transform(initializerNode.getTarget());\n      if (initializerNode.getInitializer() != null) {\n        Node initalizer = transform(initializerNode.getInitializer());\n        node.addChildToBack(initalizer);\n      }\n      return node;\n    }\n",
        "begin_line": 1075,
        "end_line": 1083,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0367
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.detachFromParent#1622",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.detachFromParent()",
        "snippet": "  public Node detachFromParent() {\n    Preconditions.checkState(parent != null);\n    parent.removeChild(this);\n    return this;\n  }\n",
        "begin_line": 1622,
        "end_line": 1626,
        "comment": "\n   * Removes this node from its parent. Equivalent to:\n   * node.getParent().removeChild();\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.has#2659",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.rhino.Node, com.google.common.base.Predicate<com.google.javascript.rhino.Node>, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred) {\n    if (pred.apply(node)) {\n      return true;\n    }\n\n    if (!traverseChildrenPred.apply(node)) {\n      return false;\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      if (has(c, pred, traverseChildrenPred)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 2659,
        "end_line": 2677,
        "comment": "\n   * @return Whether the predicate is true for the node or any of its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0365
        },
        "num_failing_tests": 1
    },
    {
        "name": "WarningsGuard.disables#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  protected boolean disables(DiagnosticGroup group) {\n    return false;\n  }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n   * Returns whether all warnings in the given diagnostic group will be\n   * filtered out. Used to determine which passes to skip.\n   *\n   * @param group A group of DiagnosticTypes.\n   * @return Whether all warnings of these types are disabled by this guard.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0365
        },
        "num_failing_tests": 1
    },
    {
        "name": "WarningsGuard.enables#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  protected boolean enables(DiagnosticGroup group) {\n    return false;\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "\n   * Returns whether any of the warnings in the given diagnostic group will be\n   * upgraded to a warning or error.\n   *\n   * @param group A group of DiagnosticTypes.\n   * @return Whether any warnings of these types are enabled by this guard.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0365
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.isSubGroup#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.isSubGroup(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean isSubGroup(DiagnosticGroup group) {\n    for (DiagnosticType type : group.types) {\n      if (!matches(type)) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 116,
        "end_line": 123,
        "comment": "\n   * Returns whether all of the types in the given group are in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0364
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getFunctionBody#1850",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionBody(com.google.javascript.rhino.Node)",
        "snippet": "  static Node getFunctionBody(Node fn) {\n    Preconditions.checkArgument(fn.isFunction());\n    return fn.getLastChild();\n  }\n",
        "begin_line": 1850,
        "end_line": 1853,
        "comment": "\n   * Return a BLOCK node for the given FUNCTION node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0364
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.disables#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean disables(DiagnosticGroup otherGroup) {\n    return !level.isOn() && group.isSubGroup(otherGroup);\n  }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0364
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setLanguageIn#1371",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode)",
        "snippet": "  public void setLanguageIn(LanguageMode languageIn) {\n    this.languageIn = languageIn;\n    this.languageOut = languageIn;\n  }\n",
        "begin_line": 1371,
        "end_line": 1374,
        "comment": "\n   * Sets how goog.tweak calls are processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0364
        },
        "num_failing_tests": 1
    },
    {
        "name": "GoogleCodingConvention.isConstant#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isConstant(java.lang.String)",
        "snippet": "  @Override\n  public boolean isConstant(String name) {\n    if (name.length() <= 1) {\n      return false;\n    }\n\n    // In compiled code, '$' is often a namespace delimiter. To allow inlining\n    // of namespaced constants, we strip off any namespaces here.\n    int pos = name.lastIndexOf('$');\n    if (pos >= 0) {\n      name = name.substring(pos + 1);\n      if (name.length() == 0) {\n        return false;\n      }\n    }\n\n    return isConstantKey(name);\n  }\n",
        "begin_line": 70,
        "end_line": 87,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>This enforces the Google const name convention, that the first character\n   * after the last $ must be an upper-case letter and all subsequent letters\n   * must be upper case. The name must be at least 2 characters long.\n   *\n   * <p>Examples:\n   * <pre>\n   *      aaa          Not constant - lower-case letters in the name\n   *      A            Not constant - too short\n   *      goog$A       Constant - letters after the $ are upper-case.\n   *      AA17         Constant - digits can appear after the first letter\n   *      goog$7A      Not constant - first character after the $ must be\n   *                   upper case.\n   *      $A           Constant - doesn't have to be anything in front of the $\n   * </pre>\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.CodingConventions.Proxy": null
        },
        "susp": {
            "ochiai_susp": 0.0362
        },
        "num_failing_tests": 1
    },
    {
        "name": "GoogleCodingConvention.isConstantKey#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isConstantKey(java.lang.String)",
        "snippet": "  @Override\n  public boolean isConstantKey(String name) {\n    if (name.isEmpty() || !Character.isUpperCase(name.charAt(0))) {\n      return false;\n    }\n\n    // hack way of checking that there aren't any lower-case letters\n    return name.toUpperCase().equals(name);\n  }\n",
        "begin_line": 89,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0362
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.disables#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean disables(DiagnosticGroup group) {\n    nextSingleton:\n    for (DiagnosticType type : group.getTypes()) {\n      DiagnosticGroup singleton = DiagnosticGroup.forType(type);\n\n      for (WarningsGuard guard : guards) {\n        if (guard.disables(singleton)) {\n          continue nextSingleton;\n        } else if (guard.enables(singleton)) {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n",
        "begin_line": 124,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.apply#2602",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNotFunction.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node n) {\n      return !n.isFunction();\n    }\n",
        "begin_line": 2602,
        "end_line": 2605,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private DiagnosticGroup(DiagnosticType type) {\n    this.name = null;\n    this.types = ImmutableSet.of(type);\n  }\n",
        "begin_line": 60,
        "end_line": 63,
        "comment": "\n   * Create a diagnostic group with no name that only matches the given type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.forType#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public static DiagnosticGroup forType(DiagnosticType type) {\n    if (!singletons.containsKey(type)) {\n      singletons.put(type, new DiagnosticGroup(type));\n    }\n    return singletons.get(type);\n  }\n",
        "begin_line": 70,
        "end_line": 75,
        "comment": " Create a diagnostic group that matches only the given type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.disables#1040",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean disables(DiagnosticGroup type) {\n    return warningsGuard.disables(type);\n  }\n",
        "begin_line": 1040,
        "end_line": 1042,
        "comment": "\n   * Whether the warnings guard in this Options object disables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addOp#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addOp(java.lang.String, boolean)",
        "snippet": "  void addOp(String op, boolean binOp) {\n    maybeEndStatement();\n\n    char first = op.charAt(0);\n    char prev = getLastChar();\n\n    if ((first == '+' || first == '-') && prev == first) {\n      // This is not pretty printing. This is to prevent misparsing of\n      // things like \"x + ++y\" or \"x++ + ++y\"\n      append(\" \");\n    } else if (Character.isLetter(first) &&\n               isWordChar(prev)) {\n      // Make sure there is a space after e.g. instanceof , typeof\n      append(\" \");\n    } else if (prev == '-' && first == '>') {\n      // Make sure that we don't emit -->\n      append(\" \");\n    }\n\n    // Allow formating around the operator.\n    appendOp(op, binOp);\n\n    // Line breaking after an operator is always safe. Line breaking before an\n    // operator on the other hand is not. We only line break after a bin op\n    // because it looks strange.\n    if (binOp) {\n      maybeCutLine();\n    }\n  }\n",
        "begin_line": 210,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.removeChild#699",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeChild(com.google.javascript.rhino.Node)",
        "snippet": "  public void removeChild(Node child) {\n    Node prev = getChildBefore(child);\n    if (prev == null)\n        first = first.next;\n    else\n        prev.next = child.next;\n    if (child == last) last = prev;\n    child.next = null;\n    child.parent = null;\n  }\n",
        "begin_line": 699,
        "end_line": 708,
        "comment": "\n   * Detach a child from its parent and siblings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0358
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.splitVarDeclarations#617",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.splitVarDeclarations(com.google.javascript.rhino.Node)",
        "snippet": "    private void splitVarDeclarations(Node n) {\n      for (Node next, c = n.getFirstChild(); c != null; c = next) {\n        next = c.getNext();\n        if (c.isVar()) {\n          if (assertOnChange && !c.hasChildren()) {\n            throw new IllegalStateException(\"Empty VAR node.\");\n          }\n\n          while (c.getFirstChild() != c.getLastChild()) {\n            Node name = c.getFirstChild();\n            c.removeChild(name);\n            Node newVar = IR.var(name).srcref(n);\n            n.addChildBefore(newVar, c);\n            reportCodeChange(\"VAR with multiple children\");\n          }\n        }\n      }\n    }\n",
        "begin_line": 617,
        "end_line": 634,
        "comment": "\n     * Split a var node such as:\n     *   var a, b;\n     * into individual statements:\n     *   var a;\n     *   var b;\n     * @param n The whose children we should inspect.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0356
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.containsFunction#1490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.containsFunction(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean containsFunction(Node n) {\n    return containsType(n, Token.FUNCTION);\n  }\n",
        "begin_line": 1490,
        "end_line": 1492,
        "comment": "\n   * Determines if the given node contains a function statement or function\n   * expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0356
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.findDeclaredNames#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.findDeclaredNames(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.MakeDeclaredNamesUnique.Renamer)",
        "snippet": "  private void findDeclaredNames(Node n, Node parent, Renamer renamer) {\n    // Do a shallow traversal, so don't traverse into function declarations,\n    // except for the name of the function itself.\n    if (parent == null\n        || !parent.isFunction()\n        || n == parent.getFirstChild()) {\n      if (NodeUtil.isVarDeclaration(n)) {\n        renamer.addDeclaredName(n.getString());\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        Node nameNode = n.getFirstChild();\n        renamer.addDeclaredName(nameNode.getString());\n      }\n\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        findDeclaredNames(c, n, renamer);\n      }\n    }\n  }\n",
        "begin_line": 212,
        "end_line": 229,
        "comment": "\n   * Traverses the current scope and collects declared names.  Does not\n   * decent into functions or add CATCH exceptions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0356
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.containsType#2201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.containsType(com.google.javascript.rhino.Node, int)",
        "snippet": "  static boolean containsType(Node node, int type) {\n    return containsType(node, type, Predicates.<Node>alwaysTrue());\n  }\n",
        "begin_line": 2201,
        "end_line": 2203,
        "comment": "\n   * @return true if n or any of its children are of the specified type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0356
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.children#1241",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.children()",
        "snippet": "  public Iterable<Node> children() {\n    if (first == null) {\n      return Collections.emptySet();\n    } else {\n      return new SiblingNodeIterable(first);\n    }\n  }\n",
        "begin_line": 1241,
        "end_line": 1247,
        "comment": "\n   * <p>Return an iterable object that iterates over this nodes's children.\n   * The iterator does not support the optional operation\n   * {@link Iterator#remove()}.</p>\n   *\n   * <p>To iterate over a node's siblings, one can write</p>\n   * <pre>Node n = ...;\n   * for (Node child : n.children()) { ...</pre>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0354
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.getContextForNoInOperator#1183",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private  Context getContextForNoInOperator(Context context) {\n    return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);\n  }\n",
        "begin_line": 1183,
        "end_line": 1186,
        "comment": "\n   * If we're in a IN_FOR_INIT_CLAUSE, we can't permit in operators in the\n   * expression.  Pass on the IN_FOR_INIT_CLAUSE flag through subexpressions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0354
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getBestJSDocInfo#3005",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(com.google.javascript.rhino.Node)",
        "snippet": "  static JSDocInfo getBestJSDocInfo(Node n) {\n    JSDocInfo info = n.getJSDocInfo();\n    if (info == null) {\n      Node parent = n.getParent();\n      if (parent == null) {\n        return null;\n      }\n\n      if (parent.isName()) {\n        return getBestJSDocInfo(parent);\n      } else if (parent.isAssign()) {\n        return parent.getJSDocInfo();\n      } else if (isObjectLitKey(parent, parent.getParent())) {\n        return parent.getJSDocInfo();\n      } else if (parent.isFunction()) {\n        return parent.getJSDocInfo();\n      } else if (parent.isVar() && parent.hasOneChild()) {\n        return parent.getJSDocInfo();\n      } else if ((parent.isHook() && parent.getFirstChild() != n) ||\n                 parent.isOr() ||\n                 parent.isAnd() ||\n                 (parent.isComma() && parent.getFirstChild() != n)) {\n        return getBestJSDocInfo(parent);\n      }\n    }\n    return info;\n  }\n",
        "begin_line": 3005,
        "end_line": 3031,
        "comment": " Find the best JSDoc for the given node. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0351
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.SiblingNodeIterable#1271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.SiblingNodeIterable(com.google.javascript.rhino.Node)",
        "snippet": "    SiblingNodeIterable(Node start) {\n      this.start = start;\n      this.current = start;\n      this.used = false;\n    }\n",
        "begin_line": 1271,
        "end_line": 1275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.iterator#1277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.iterator()",
        "snippet": "    @Override\n    public Iterator<Node> iterator() {\n      if (!used) {\n        used = true;\n        return this;\n      } else {\n        // We have already used the current object as an iterator;\n        // we must create a new SiblingNodeIterable based on this\n        // iterable's start node.\n        //\n        // Since the primary use case for Node.children is in for\n        // loops, this branch is extremely unlikely.\n        return (new SiblingNodeIterable(start)).iterator();\n      }\n    }\n",
        "begin_line": 1277,
        "end_line": 1291,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasNext#1293",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.hasNext()",
        "snippet": "    @Override\n    public boolean hasNext() {\n      return current != null;\n    }\n",
        "begin_line": 1293,
        "end_line": 1296,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.next#1298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.next()",
        "snippet": "    @Override\n    public Node next() {\n      if (current == null) {\n        throw new NoSuchElementException();\n      }\n      try {\n        return current;\n      } finally {\n        current = current.getNext();\n      }\n    }\n",
        "begin_line": 1298,
        "end_line": 1308,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.scanVars#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void scanVars(Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.VAR:\n        // Declare all variables. e.g. var x = 1, y, z;\n        for (Node child = n.getFirstChild();\n             child != null;) {\n          Node next = child.getNext();\n          declareVar(child);\n          child = next;\n        }\n        return;\n\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n)) {\n          return;\n        }\n\n        String fnName = n.getFirstChild().getString();\n        if (fnName.isEmpty()) {\n          // This is invalid, but allow it so the checks can catch it.\n          return;\n        }\n        declareVar(n.getFirstChild());\n        return;   // should not examine function's children\n\n      case Token.CATCH:\n        Preconditions.checkState(n.getChildCount() == 2);\n        Preconditions.checkState(n.getFirstChild().isName());\n        // the first child is the catch var and the third child\n        // is the code block\n\n        final Node var = n.getFirstChild();\n        final Node block = var.getNext();\n\n        declareVar(var);\n        scanVars(block, n);\n        return;  // only one child to scan\n\n      case Token.SCRIPT:\n        inputId = n.getInputId();\n        Preconditions.checkNotNull(inputId);\n        break;\n    }\n\n    // Variables can only occur in statement-level nodes, so\n    // we only need to traverse children in a couple special cases.\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n      for (Node child = n.getFirstChild();\n           child != null;) {\n        Node next = child.getNext();\n        scanVars(child, n);\n        child = next;\n      }\n    }\n  }\n",
        "begin_line": 124,
        "end_line": 178,
        "comment": "\n   * Scans and gather variables declarations under a Node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.appendOp#206",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendOp(java.lang.String, boolean)",
        "snippet": "  void appendOp(String op, boolean binOp) {\n    append(op);\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.annotateCalls#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateCalls(com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }\n",
        "begin_line": 164,
        "end_line": 180,
        "comment": "\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.MatchNodeType#2577",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNodeType.MatchNodeType(int)",
        "snippet": "    MatchNodeType(int type){\n      this.type = type;\n    }\n",
        "begin_line": 2577,
        "end_line": 2579,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0349
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.apply#2581",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNodeType.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node n) {\n      return n.getType() == type;\n    }\n",
        "begin_line": 2581,
        "end_line": 2584,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0349
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.containsType#2192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.containsType(com.google.javascript.rhino.Node, int, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred) {\n    return has(node, new MatchNodeType(type), traverseChildrenPred);\n  }\n",
        "begin_line": 2192,
        "end_line": 2196,
        "comment": "\n   * @return true if n or any of its children are of the specified type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0349
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addList#903",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext) {\n    for (Node n = firstInList; n != null; n = n.getNext()) {\n      boolean isFirst = n == firstInList;\n      if (isFirst) {\n        addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);\n      } else {\n        cc.listSeparator();\n        addExpr(n, isArrayOrFunctionArgument ? 1 : 0, Context.OTHER);\n      }\n    }\n  }\n",
        "begin_line": 903,
        "end_line": 914,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0349
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addList#895",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node)",
        "snippet": "  void addList(Node firstInList) {\n    addList(firstInList, true, Context.OTHER);\n  }\n",
        "begin_line": 895,
        "end_line": 897,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0349
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeChangeHandler.reset#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reset()",
        "snippet": "    void reset() {\n      hasChanged = false;\n    }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0347
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEmpty#2236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEmpty()",
        "snippet": "  public boolean isEmpty() {\n    return this.getType() == Token.EMPTY;\n  }\n",
        "begin_line": 2236,
        "end_line": 2238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getChildBefore#552",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildBefore(com.google.javascript.rhino.Node)",
        "snippet": "  public Node getChildBefore(Node child) {\n    if (child == first) {\n      return null;\n    }\n    Node n = first;\n    while (n.next != child) {\n      n = n.next;\n      if (n == null) {\n        throw new RuntimeException(\"node is not a child\");\n      }\n    }\n    return n;\n  }\n",
        "begin_line": 552,
        "end_line": 564,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.number#422",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.number(double)",
        "snippet": "  public static Node number(double d) {\n    return Node.newNumber(d);\n  }\n",
        "begin_line": 422,
        "end_line": 424,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.NumberNode#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.NumberNode(double)",
        "snippet": "    NumberNode(double number) {\n      super(Token.NUMBER);\n      this.number = number;\n    }\n",
        "begin_line": 155,
        "end_line": 158,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0344
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newNumber#504",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newNumber(double)",
        "snippet": "  public static Node newNumber(double number) {\n    return new NumberNode(number);\n  }\n",
        "begin_line": 504,
        "end_line": 506,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0344
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endLine#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endLine()",
        "snippet": "  void endLine() {\n  }\n",
        "begin_line": 94,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.034
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasMoreThanOneChild#1401",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasMoreThanOneChild()",
        "snippet": "  public boolean hasMoreThanOneChild() {\n    return first != null && first != last;\n  }\n",
        "begin_line": 1401,
        "end_line": 1403,
        "comment": "\n   * Check for more than one child more efficiently than by iterating over all\n   * the children as is done with Node.getChildCount().\n   *\n   * @return Whether the node more than one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0336
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isComma#2208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isComma()",
        "snippet": "  public boolean isComma() {\n    return this.getType() == Token.COMMA;\n  }\n",
        "begin_line": 2208,
        "end_line": 2210,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0335
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateExprStmt#473",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateExprStmt(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateExprStmt(Node n) {\n    validateNodeType(Token.EXPR_RESULT, n);\n    validateChildCount(n, 1);\n    validateExpression(n.getFirstChild());\n  }\n",
        "begin_line": 473,
        "end_line": 477,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateChildCount#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 0) {\n      valid = !n.hasChildren();\n    } else if (i == 1) {\n      valid = n.hasOneChild();\n    } else {\n      valid = (n.getChildCount() == i);\n    }\n    if (!valid) {\n      violation(\n          \"Expected \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 774,
        "end_line": 788,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionInjector.FunctionInjector#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.FunctionInjector(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>, boolean, boolean, boolean)",
        "snippet": "  public FunctionInjector(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean allowDecomposition,\n      boolean assumeStrictThis,\n      boolean assumeMinimumCapture) {\n    Preconditions.checkNotNull(compiler);\n    Preconditions.checkNotNull(safeNameIdSupplier);\n    this.compiler = compiler;\n    this.safeNameIdSupplier = safeNameIdSupplier;\n    this.allowDecomposition = allowDecomposition;\n    this.assumeStrictThis = assumeStrictThis;\n    this.assumeMinimumCapture = assumeMinimumCapture;\n  }\n",
        "begin_line": 54,
        "end_line": 67,
        "comment": "\n   * @param allowDecomposition Whether an effort should be made to break down\n   * expressions into simpler expressions to allow functions to be injected\n   * where they would otherwise be disallowed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0329
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getUniqueNameIdSupplier#968",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getUniqueNameIdSupplier()",
        "snippet": "  @Override\n  Supplier<String> getUniqueNameIdSupplier() {\n    final Compiler self = this;\n    return new Supplier<String>() {\n      @Override\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };\n  }\n",
        "begin_line": 968,
        "end_line": 977,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0328
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processVariableDeclaration#1061",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration)",
        "snippet": "    @Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n      if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST) {\n        processIllegalToken(declarationNode);\n      }\n\n      Node node = newNode(Token.VAR);\n      for (VariableInitializer child : declarationNode.getVariables()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }\n",
        "begin_line": 1061,
        "end_line": 1073,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0327
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processGeneric#391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processGeneric(com.google.javascript.rhino.head.Node)",
        "snippet": "    private Node processGeneric(\n        com.google.javascript.rhino.head.Node n) {\n      Node node = newNode(transformTokenType(n.getType()));\n      for (com.google.javascript.rhino.head.Node child : n) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      return node;\n    }\n",
        "begin_line": 391,
        "end_line": 398,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0326
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateParameters#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateParameters(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateParameters(Node n) {\n    validateNodeType(Token.PARAM_LIST, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateName(c);\n    }\n  }\n",
        "begin_line": 366,
        "end_line": 371,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0325
        },
        "num_failing_tests": 1
    },
    {
        "name": "GoogleCodingConvention.GoogleCodingConvention#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention()",
        "snippet": "  public GoogleCodingConvention() {\n    this(new ClosureCodingConvention());\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": " By default, decorate the ClosureCodingConvention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0325
        },
        "num_failing_tests": 1
    },
    {
        "name": "GoogleCodingConvention.GoogleCodingConvention#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public GoogleCodingConvention(CodingConvention convention) {\n    super(convention);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": " Decorates a wrapped CodingConvention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0325
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getChildAtIndex#566",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildAtIndex(int)",
        "snippet": "  public Node getChildAtIndex(int i) {\n    Node n = first;\n    while (i > 0) {\n      n = n.next;\n      i--;\n    }\n    return n;\n  }\n",
        "begin_line": 566,
        "end_line": 573,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0324
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseRoots#461",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.rhino.Node>, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverseRoots(\n      AbstractCompiler compiler, List<Node> roots, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverseRoots(roots);\n  }\n",
        "begin_line": 461,
        "end_line": 465,
        "comment": "\n   * Traverses a list of node trees.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0324
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.toSource#1740",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  String toSource(Node n) {\n    initCompilerOptionsIfTesting();\n    return toSource(n, null, true);\n  }\n",
        "begin_line": 1740,
        "end_line": 1744,
        "comment": "\n   * Generates JavaScript source code for an AST, doesn't generate source\n   * map info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0323
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateName#338",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateName(Node n) {\n    validateNodeType(Token.NAME, n);\n    validateNonEmptyString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 338,
        "end_line": 342,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0322
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateNonEmptyString#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNonEmptyString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNonEmptyString(Node n) {\n    validateNonNullString(n);\n    if (n.getString().isEmpty()) {\n      violation(\"Expected non-empty string.\", n);\n    }\n  }\n",
        "begin_line": 325,
        "end_line": 330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getLanguageOut#1380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageOut()",
        "snippet": "  public LanguageMode getLanguageOut() {\n    return languageOut;\n  }\n",
        "begin_line": 1380,
        "end_line": 1382,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.toSource#1749",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.SourceMap, boolean)",
        "snippet": "  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n    builder.setLineLengthThreshold(options.lineLengthThreshold);\n\n    Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;\n    builder.setOutputCharset(charset);\n\n    return builder.build();\n  }\n",
        "begin_line": 1749,
        "end_line": 1765,
        "comment": "\n   * Generates JavaScript source code for an AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setPreferLineBreakAtEndOfFile#592",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setPreferLineBreakAtEndOfFile(boolean)",
        "snippet": "    Builder setPreferLineBreakAtEndOfFile(boolean lineBreakAtEnd) {\n      this.preferLineBreakAtEndOfFile = lineBreakAtEnd;\n      return this;\n    }\n",
        "begin_line": 592,
        "end_line": 595,
        "comment": "\n     * Sets whether line breaking is preferred at end of file. This is useful\n     * if JS serving code needs a place to insert code, such as script tags,\n     * without interfering with source maps.\n     * @param lineBreakAtEnd If true, prefer line breaking at end of file.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setSourceMapDetailLevel#631",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    Builder setSourceMapDetailLevel(SourceMap.DetailLevel level) {\n      Preconditions.checkState(level != null);\n      this.sourceMapDetailLevel = level;\n      return this;\n    }\n",
        "begin_line": 631,
        "end_line": 635,
        "comment": "\n     * @param level The detail level to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setOutputCharset#641",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setOutputCharset(java.nio.charset.Charset)",
        "snippet": "    Builder setOutputCharset(Charset outCharset) {\n      this.outputCharset = outCharset;\n      return this;\n    }\n",
        "begin_line": 641,
        "end_line": 644,
        "comment": "\n     * Set the charset to use when determining what characters need to be\n     * escaped in the output.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setTagAsStrict#649",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setTagAsStrict(boolean)",
        "snippet": "    Builder setTagAsStrict(boolean tagAsStrict) {\n      this.tagAsStrict = tagAsStrict;\n      return this;\n    }\n",
        "begin_line": 649,
        "end_line": 652,
        "comment": "\n     * Set whether the output should be tags as ECMASCRIPT 5 Strict.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateScript#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateScript(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateScript(Node n) {\n    validateNodeType(Token.SCRIPT, n);\n    validateIsSynthetic(n);\n    validateHasSourceName(n);\n    validateHasInputId(n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateStatement(c);\n    }\n  }\n",
        "begin_line": 83,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateNonNullString#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNonNullString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNonNullString(Node n) {\n    if (n.getString() == null) {\n      violation(\"Expected non-null string.\", n);\n    }\n  }\n",
        "begin_line": 332,
        "end_line": 336,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.AstValidator#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.AstValidator()",
        "snippet": "  public AstValidator() {\n    this.violationHandler = new ViolationHandler() {\n      @Override\n      public void handleViolation(String message, Node n) {\n        throw new IllegalStateException(\n            message + \" Reference node \" + n.toString());\n      }\n    };\n  }\n",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateCodeRoot#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateCodeRoot(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateCodeRoot(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    validateIsSynthetic(n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateScript(c);\n    }\n  }\n",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateIsSynthetic#292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateIsSynthetic(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateIsSynthetic(Node n) {\n    if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n      violation(\"Missing 'synthetic block' annotation.\", n);\n    }\n  }\n",
        "begin_line": 292,
        "end_line": 296,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateHasSourceName#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateHasSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateHasSourceName(Node n) {\n    String sourceName = n.getSourceFileName();\n    if (sourceName == null || sourceName.isEmpty()) {\n      violation(\"Missing 'source name' annotation.\", n);\n    }\n  }\n",
        "begin_line": 298,
        "end_line": 303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateHasInputId#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateHasInputId(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateHasInputId(Node n) {\n    InputId inputId = n.getInputId();\n    if (inputId == null) {\n      violation(\"Missing 'input id' annotation.\", n);\n    }\n  }\n",
        "begin_line": 305,
        "end_line": 310,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateNodeType#766",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNodeType(int, com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNodeType(int type, Node n) {\n    if (n.getType() != type) {\n      violation(\n          \"Expected \" + Token.name(type) + \" but was \"\n              + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 766,
        "end_line": 772,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "    @Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      return (super.isEquivalentTo(node, compareJsType, recurse)\n          && this.str.equals(((StringNode) node).str));\n    }\n",
        "begin_line": 233,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.addDeclaredName#461",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.addDeclaredName(java.lang.String)",
        "snippet": "    @Override\n    public void addDeclaredName(String name) {\n      if (!name.equals(ARGUMENTS)) {\n        if (global) {\n          reserveName(name);\n        } else {\n          // It hasn't been declared locally yet, so increment the count.\n          if (!declarations.containsKey(name)) {\n            int id = incrementNameCount(name);\n            String newName = null;\n            if (id != 0) {\n              newName = getUniqueName(name, id);\n            }\n            declarations.put(name, newName);\n          }\n        }\n      }\n    }\n",
        "begin_line": 461,
        "end_line": 478,
        "comment": "\n     * Adds a name to the map of names declared in this scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.reserveName#492",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.reserveName(java.lang.String)",
        "snippet": "    private void reserveName(String name) {\n      nameUsage.setCount(name, 0, 1);\n    }\n",
        "begin_line": 492,
        "end_line": 494,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addExpr#883",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private void addExpr(Node n, int minPrecedence, Context context) {\n    if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.isIn()))){\n      add(\"(\");\n      add(n, clearContextForNoInOperator(context));\n      add(\")\");\n    } else {\n      add(n, context);\n    }\n  }\n",
        "begin_line": 883,
        "end_line": 893,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0316
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getJSDocInfo#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getJSDocInfo()",
        "snippet": "    @Override\n    public JSDocInfo getJSDocInfo() {\n      return info;\n    }\n",
        "begin_line": 271,
        "end_line": 274,
        "comment": "\n     * Gets the JSDocInfo for the variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0316
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addIdentifier#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addIdentifier(java.lang.String)",
        "snippet": "  void addIdentifier(String identifier) {\n    add(identifier);\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0315
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.visit#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.WHILE:\n          if (CONVERT_WHILE_TO_FOR) {\n            Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            Node empty = IR.empty();\n            empty.copyInformationFrom(n);\n            n.addChildBefore(empty, expr);\n            n.addChildAfter(empty.cloneNode(), expr);\n            reportCodeChange(\"WHILE node\");\n          }\n          break;\n\n        case Token.FUNCTION:\n          normalizeFunctionDeclaration(n);\n          break;\n\n        case Token.NAME:\n        case Token.STRING:\n        case Token.STRING_KEY:\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n          if (!compiler.getLifeCycleStage().isNormalizedObfuscated()) {\n            annotateConstantsByConvention(n, parent);\n          }\n          break;\n      }\n    }\n",
        "begin_line": 380,
        "end_line": 409,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0314
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.normalizeFunctionDeclaration#454",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.normalizeFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "    private void normalizeFunctionDeclaration(Node n) {\n      Preconditions.checkState(n.isFunction());\n      if (!NodeUtil.isFunctionExpression(n)\n          && !NodeUtil.isHoistedFunctionDeclaration(n)) {\n        rewriteFunctionDeclaration(n);\n      }\n    }\n",
        "begin_line": 454,
        "end_line": 460,
        "comment": "\n     * Rewrite named unhoisted functions declarations to a known\n     * consistent behavior so we don't to different logic paths for the same\n     * code. From:\n     *    function f() {}\n     * to:\n     *    var f = function () {};\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0314
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.doStatementNormalizations#498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.doStatementNormalizations(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void doStatementNormalizations(\n        NodeTraversal t, Node n, Node parent) {\n      if (n.isLabel()) {\n        normalizeLabels(n);\n      }\n\n      // Only inspect the children of SCRIPTs, BLOCKs and LABELs, as all these\n      // are the only legal place for VARs and FOR statements.\n      if (NodeUtil.isStatementBlock(n) || n.isLabel()) {\n        extractForInitializer(n, null, null);\n      }\n\n      // Only inspect the children of SCRIPTs, BLOCKs, as all these\n      // are the only legal place for VARs.\n      if (NodeUtil.isStatementBlock(n)) {\n        splitVarDeclarations(n);\n      }\n\n      if (n.isFunction()) {\n        moveNamedFunctions(n.getLastChild());\n      }\n    }\n",
        "begin_line": 498,
        "end_line": 519,
        "comment": "\n     * Do normalizations that introduce new siblings or parents.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0314
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenamer#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.ContextualRenamer(com.google.common.collect.Multiset<java.lang.String>)",
        "snippet": "    private ContextualRenamer(Multiset<String> nameUsage) {\n      this.global = false;\n      this.nameUsage = nameUsage;\n    }\n",
        "begin_line": 445,
        "end_line": 448,
        "comment": "\n     * Constructor for child scopes.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0314
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.forChildScope#453",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.forChildScope()",
        "snippet": "    @Override\n    public Renamer forChildScope() {\n      return new ContextualRenamer(nameUsage);\n    }\n",
        "begin_line": 453,
        "end_line": 456,
        "comment": "\n     * Create a ContextualRenamer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0314
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.enterScope#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          !declarationRoot.isFunction() ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (!declarationRoot.isFunction()) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n",
        "begin_line": 75,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0314
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.exitScope#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    if (!t.inGlobalScope()) {\n      nameStack.pop();\n    }\n  }\n",
        "begin_line": 98,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0314
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.shouldTraverse#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.PARAM_LIST: {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // Add the function parameters\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n          }\n\n          // Add the function body declarations\n          Node functionBody = n.getNext();\n          findDeclaredNames(functionBody, null, renamer);\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n",
        "begin_line": 105,
        "end_line": 156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0314
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.visit#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        nameStack.pop();\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n      case Token.PARAM_LIST:\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n        break;\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n",
        "begin_line": 158,
        "end_line": 192,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0314
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getScope#595",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScope()",
        "snippet": "  public Scope getScope() {\n    Scope scope = scopes.isEmpty() ? null : scopes.peek();\n    if (scopeRoots.isEmpty()) {\n      return scope;\n    }\n\n    Iterator<Node> it = scopeRoots.descendingIterator();\n    while (it.hasNext()) {\n      scope = scopeCreator.createScope(it.next(), scope);\n      scopes.push(scope);\n    }\n    scopeRoots.clear();\n\n    return scope;\n  }\n",
        "begin_line": 595,
        "end_line": 609,
        "comment": " Gets the current scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0313
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getIntValue#340",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.getIntValue()",
        "snippet": "    @Override\n    public int getIntValue() {\n      return intValue;\n    }\n",
        "begin_line": 340,
        "end_line": 343,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0313
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getIntProp#829",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getIntProp(int)",
        "snippet": "  public int getIntProp(int propType) {\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return 0;\n    }\n    return item.getIntValue();\n  }\n",
        "begin_line": 829,
        "end_line": 835,
        "comment": "\n   * Returns the integer value for the property, or 0 if the property\n   * is not defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0313
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isGetElem#2260",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isGetElem()",
        "snippet": "  public boolean isGetElem() {\n    return this.getType() == Token.GETELEM;\n  }\n",
        "begin_line": 2260,
        "end_line": 2262,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0313
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.add#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(java.lang.String)",
        "snippet": "  void add(String str) {\n    cc.add(str);\n  }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0313
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addIdentifier#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addIdentifier(java.lang.String)",
        "snippet": "  private void addIdentifier(String identifier) {\n    cc.addIdentifier(identifierEscape(identifier));\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0313
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.identifierEscape#1105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.identifierEscape(java.lang.String)",
        "snippet": "  static String identifierEscape(String s) {\n    // First check if escaping is needed at all -- in most cases it isn't.\n    if (NodeUtil.isLatin(s)) {\n      return s;\n    }\n\n    // Now going through the string to escape non-latin characters if needed.\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // Identifiers should always go to Latin1/ ASCII characters because\n      // different browser's rules for valid identifier characters are\n      // crazy.\n      if (c > 0x1F && c < 0x7F) {\n        sb.append(c);\n      } else {\n        appendHexJavaScriptRepresentation(sb, c);\n      }\n    }\n    return sb.toString();\n  }\n",
        "begin_line": 1105,
        "end_line": 1125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0313
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.annotateConstantsByConvention#414",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.annotateConstantsByConvention(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateConstantsByConvention(Node n, Node parent) {\n      Preconditions.checkState(\n          n.isName()\n          || n.isString()\n          || n.isStringKey()\n          || n.isGetterDef()\n          || n.isSetterDef());\n\n      // There are only two cases where a string token\n      // may be a variable reference: The right side of a GETPROP\n      // or an OBJECTLIT key.\n      boolean isObjLitKey = NodeUtil.isObjectLitKey(n, parent);\n      boolean isProperty = isObjLitKey ||\n          (parent.isGetProp() &&\n           parent.getLastChild() == n);\n      if (n.isName() || isProperty) {\n        boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant &&\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent)) {\n          if (assertOnChange) {\n            String name = n.getString();\n            throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());\n          }\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n      }\n    }\n",
        "begin_line": 414,
        "end_line": 444,
        "comment": "\n     * Mark names and properties that are constants by convention.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isLatin#2401",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLatin(java.lang.String)",
        "snippet": "  static boolean isLatin(String s) {\n    char LARGEST_BASIC_LATIN = 0x7f;\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c > LARGEST_BASIC_LATIN) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 2401,
        "end_line": 2411,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isConstantByConvention#2798",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isConstantByConvention(com.google.javascript.jscomp.CodingConvention, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent) {\n    String name = node.getString();\n    if (parent.isGetProp() &&\n        node == parent.getLastChild()) {\n      return convention.isConstantKey(name);\n    } else if (isObjectLitKey(node, parent)) {\n      return convention.isConstantKey(name);\n    } else {\n      return convention.isConstant(name);\n    }\n  }\n",
        "begin_line": 2798,
        "end_line": 2809,
        "comment": " Whether the given name is constant by coding convention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.getReplacementName#480",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.getReplacementName(java.lang.String)",
        "snippet": "    @Override\n    public String getReplacementName(String oldName) {\n      return declarations.get(oldName);\n    }\n",
        "begin_line": 480,
        "end_line": 483,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.getReplacementName#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.getReplacementName(java.lang.String)",
        "snippet": "  private String getReplacementName(String oldName) {\n    for (Renamer names : nameStack) {\n      String newName = names.getReplacementName(oldName);\n      if (newName != null) {\n        return newName;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 198,
        "end_line": 206,
        "comment": "\n   * Walks the stack of name maps and finds the replacement name for the\n   * current scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCompiler.isNormalizedObfuscated#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.isNormalizedObfuscated()",
        "snippet": "    boolean isNormalizedObfuscated() {\n      return this == NORMALIZED_OBFUSCATED;\n    }\n",
        "begin_line": 294,
        "end_line": 296,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isLabel#2288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isLabel()",
        "snippet": "  public boolean isLabel() {\n    return this.getType() == Token.LABEL;\n  }\n",
        "begin_line": 2288,
        "end_line": 2290,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.SyntacticScopeCreator.RedeclarationHandler)",
        "snippet": "  SyntacticScopeCreator(\n      AbstractCompiler compiler, RedeclarationHandler redeclarationHandler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = redeclarationHandler;\n  }\n",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.declareVar#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void declareVar(Node n) {\n    Preconditions.checkState(n.isName());\n\n    CompilerInput input = compiler.getInput(inputId);\n    String name = n.getString();\n    if (scope.isDeclared(name, false)\n        || (scope.isLocal() && name.equals(ARGUMENTS))) {\n      redeclarationHandler.onRedeclaration(\n          scope, name, n, input);\n    } else {\n      scope.declare(name, n, null, input);\n    }\n  }\n",
        "begin_line": 233,
        "end_line": 245,
        "comment": "\n   * Declares a variable.\n   *\n   * @param n The node corresponding to the variable name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.Var#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.Var(boolean, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.Scope, int, com.google.javascript.jscomp.CompilerInput, boolean, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    private Var(boolean inferred, String name, Node nameNode, JSType type,\n                Scope scope, int index, CompilerInput input, boolean isDefine,\n                JSDocInfo info) {\n      this.name = name;\n      this.nameNode = nameNode;\n      this.type = type;\n      this.scope = scope;\n      this.index = index;\n      this.input = input;\n      this.isDefine = isDefine;\n      this.info = info;\n      this.typeInferred = inferred;\n    }\n",
        "begin_line": 130,
        "end_line": 142,
        "comment": "\n     * Creates a variable.\n     *\n     * @param inferred whether its type is inferred (as opposed to declared)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.declare#484",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  Var declare(String name, Node nameNode, JSType type, CompilerInput input) {\n    return declare(name, nameNode, type, input, true);\n  }\n",
        "begin_line": 484,
        "end_line": 486,
        "comment": "\n   * Declares a variable whose type is inferred.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.declare#498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput, boolean)",
        "snippet": "  Var declare(String name, Node nameNode,\n      JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name != null && name.length() > 0);\n\n    // Make sure that it's declared only once\n    Preconditions.checkState(vars.get(name) == null);\n\n    // native variables do not have a name node.\n    JSDocInfo info = nameNode == null\n        ? null : NodeUtil.getBestJSDocInfo(nameNode);\n\n    Var var = new Var(inferred, name, nameNode, type, this, vars.size(), input,\n        info != null && info.isDefine(), info);\n\n    vars.put(name, var);\n    return var;\n  }\n",
        "begin_line": 498,
        "end_line": 514,
        "comment": "\n   * Declares a variable.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   * @param inferred Whether this variable's type is inferred (as opposed\n   *     to declared).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isDeclared#563",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isDeclared(java.lang.String, boolean)",
        "snippet": "  public boolean isDeclared(String name, boolean recurse) {\n    Scope scope = this;\n    if (scope.vars.containsKey(name))\n      return true;\n\n    if (scope.parent != null && recurse) {\n      return scope.parent.isDeclared(name, recurse);\n    }\n    return false;\n  }\n",
        "begin_line": 563,
        "end_line": 572,
        "comment": "\n   * Returns true if a variable is declared.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isGlobal#613",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isGlobal()",
        "snippet": "  public boolean isGlobal() {\n    return parent == null;\n  }\n",
        "begin_line": 613,
        "end_line": 615,
        "comment": "\n   * Returns whether this is the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isLocal#620",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isLocal()",
        "snippet": "  public boolean isLocal() {\n    return !isGlobal();\n  }\n",
        "begin_line": 620,
        "end_line": 622,
        "comment": "\n   * Returns whether this is a local scope (i.e. not the global scope).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.enterScope#820",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      // Cause the scope to be created, which will cause duplicate\n      // to be found.\n      t.getScope();\n    }\n",
        "begin_line": 820,
        "end_line": 825,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.exitScope#827",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {\n      // Nothing to do.\n    }\n",
        "begin_line": 827,
        "end_line": 830,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.shouldTraverse#832",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent) {\n      return true;\n    }\n",
        "begin_line": 832,
        "end_line": 836,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.visit#838",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Nothing to do.\n    }\n",
        "begin_line": 838,
        "end_line": 841,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.PropagateConstantAnnotationsOverVars#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.PropagateConstantAnnotationsOverVars(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    PropagateConstantAnnotationsOverVars(\n        AbstractCompiler compiler, boolean forbidChanges) {\n      this.compiler = compiler;\n      this.assertOnChange = forbidChanges;\n    }\n",
        "begin_line": 224,
        "end_line": 228,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.process#230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      new NodeTraversal(compiler, this).traverseRoots(externs, root);\n    }\n",
        "begin_line": 230,
        "end_line": 233,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.NormalizeStatements#360",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.NormalizeStatements(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange) {\n      this.compiler = compiler;\n      this.assertOnChange = assertOnChange;\n    }\n",
        "begin_line": 360,
        "end_line": 363,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.shouldTraverse#373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      doStatementNormalizations(t, n, parent);\n\n      return true;\n    }\n",
        "begin_line": 373,
        "end_line": 378,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.extractForInitializer#560",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.extractForInitializer(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void extractForInitializer(\n        Node n, Node before, Node beforeParent) {\n\n      for (Node next, c = n.getFirstChild(); c != null; c = next) {\n        next = c.getNext();\n        Node insertBefore = (before == null) ? c : before;\n        Node insertBeforeParent = (before == null) ? n : beforeParent;\n        switch (c.getType()) {\n          case Token.LABEL:\n            extractForInitializer(c, insertBefore, insertBeforeParent);\n            break;\n          case Token.FOR:\n            if (NodeUtil.isForIn(c)) {\n              Node first = c.getFirstChild();\n              if (first.isVar()) {\n                // Transform:\n                //    for (var a = 1 in b) {}\n                // to:\n                //    var a = 1; for (a in b) {};\n                Node newStatement = first;\n                // Clone just the node, to remove any initialization.\n                Node name = newStatement.getFirstChild().cloneNode();\n                first.getParent().replaceChild(first, name);\n                insertBeforeParent.addChildBefore(newStatement, insertBefore);\n                reportCodeChange(\"FOR-IN var declaration\");\n              }\n            } else if (!c.getFirstChild().isEmpty()) {\n              Node init = c.getFirstChild();\n              Node empty = IR.empty();\n              empty.copyInformationFrom(c);\n              c.replaceChild(init, empty);\n\n              Node newStatement;\n              // Only VAR statements, and expressions are allowed,\n              // but are handled differently.\n              if (init.isVar()) {\n                newStatement = init;\n              } else {\n                newStatement = NodeUtil.newExpr(init);\n              }\n\n              insertBeforeParent.addChildBefore(newStatement, insertBefore);\n              reportCodeChange(\"FOR initializer\");\n            }\n            break;\n        }\n      }\n    }\n",
        "begin_line": 560,
        "end_line": 607,
        "comment": "\n     * Bring the initializers out of FOR loops.  These need to be placed\n     * before any associated LABEL nodes. This needs to be done from the top\n     * level label first so this is called as a pre-order callback (from\n     * shouldTraverse).\n     *\n     * @param n The node to inspect.\n     * @param before The node to insert the initializer before.\n     * @param beforeParent The parent of the node before which the initializer\n     *     will be inserted.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.visit#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.FindExposeAnnotations.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (NodeUtil.isExprAssign(n)) {\n        Node assign = n.getFirstChild();\n        Node lhs = assign.getFirstChild();\n        if (lhs.isGetProp() && isMarkedExpose(assign)) {\n          exposedProperties.add(lhs.getLastChild().getString());\n        }\n      } else if (n.isStringKey() && isMarkedExpose(n)) {\n        exposedProperties.add(n.getString());\n      }\n    }\n",
        "begin_line": 167,
        "end_line": 177,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.Normalize#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.Normalize(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  Normalize(AbstractCompiler compiler, boolean assertOnChange) {\n    this.compiler = compiler;\n    this.assertOnChange = assertOnChange;\n\n    // TODO(nicksantos): assertOnChange should only be true if the tree\n    // is normalized.\n  }\n",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.process#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    new NodeTraversal(\n        compiler, new NormalizeStatements(compiler, assertOnChange))\n        .traverseRoots(externs, root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    // It is important that removeDuplicateDeclarations runs after\n    // MakeDeclaredNamesUnique in order for catch block exception names to be\n    // handled properly. Specifically, catch block exception names are\n    // only valid within the catch block, but our currect Scope logic\n    // has no concept of this and includes it in the containing function\n    // (or global scope). MakeDeclaredNamesUnique makes the catch exception\n    // names unique so that removeDuplicateDeclarations() will properly handle\n    // cases where a function scope variable conflict with a exception name:\n    //   function f() {\n    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}\n    //      var e = 1; // f scope 'e'\n    //   }\n    // otherwise 'var e = 1' would be rewritten as 'e = 1'.\n    // TODO(johnlenz): Introduce a seperate scope for catch nodes.\n    removeDuplicateDeclarations(externs, root);\n    new PropagateConstantAnnotationsOverVars(compiler, assertOnChange)\n        .process(externs, root);\n\n    FindExposeAnnotations findExposeAnnotations = new FindExposeAnnotations();\n    NodeTraversal.traverse(compiler, root, findExposeAnnotations);\n    if (!findExposeAnnotations.exposedProperties.isEmpty()) {\n      NodeTraversal.traverse(compiler, root,\n          new RewriteExposedProperties(\n              findExposeAnnotations.exposedProperties));\n    }\n\n    if (!compiler.getLifeCycleStage().isNormalized()) {\n      compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);\n    }\n  }\n",
        "begin_line": 120,
        "end_line": 159,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.removeDuplicateDeclarations#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.removeDuplicateDeclarations(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void removeDuplicateDeclarations(Node externs, Node root) {\n    Callback tickler = new ScopeTicklingCallback();\n    ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());\n    NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);\n    t.traverseRoots(externs, root);\n  }\n",
        "begin_line": 692,
        "end_line": 698,
        "comment": "\n   * Remove duplicate VAR declarations.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenamer#437",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.ContextualRenamer()",
        "snippet": "    ContextualRenamer() {\n      this.global = true;\n      nameUsage = HashMultiset.create();\n    }\n",
        "begin_line": 437,
        "end_line": 440,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.MakeDeclaredNamesUnique#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.MakeDeclaredNamesUnique()",
        "snippet": "  MakeDeclaredNamesUnique() {\n    this(new ContextualRenamer());\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.MakeDeclaredNamesUnique#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.MakeDeclaredNamesUnique(com.google.javascript.jscomp.MakeDeclaredNamesUnique.Renamer)",
        "snippet": "  MakeDeclaredNamesUnique(Renamer renamer) {\n    this.rootRenamer = renamer;\n  }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCompiler.setLifeCycleStage#247",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage)",
        "snippet": "  void setLifeCycleStage(LifeCycleStage stage) {\n    this.stage = stage;\n  }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "\n   * Set the current life-cycle state.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.createScope#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  @Override\n  public Scope createScope(Node n, Scope parent) {\n    inputId = null;\n    if (parent == null) {\n      scope = new Scope(n, compiler);\n    } else {\n      scope = new Scope(parent, n);\n    }\n\n    scanRoot(n, parent);\n\n    inputId = null;\n    Scope returnedScope = scope;\n    scope = null;\n    return returnedScope;\n  }\n",
        "begin_line": 67,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.scanRoot#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  private void scanRoot(Node n, Scope parent) {\n    if (n.isFunction()) {\n      if (inputId == null) {\n        inputId = NodeUtil.getInputId(n);\n        // TODO(johnlenz): inputId maybe null if the FUNCTION node is detached\n        // from the AST.\n        // Is it meaningful to build a scope for detached FUNCTION node?\n      }\n\n      final Node fnNameNode = n.getFirstChild();\n      final Node args = fnNameNode.getNext();\n      final Node body = args.getNext();\n\n      // Bleed the function name into the scope, if it hasn't\n      // been declared in the outer scope.\n      String fnName = fnNameNode.getString();\n      if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n        declareVar(fnNameNode);\n      }\n\n      // Args: Declare function variables\n      Preconditions.checkState(args.isParamList());\n      for (Node a = args.getFirstChild(); a != null;\n           a = a.getNext()) {\n        Preconditions.checkState(a.isName());\n        declareVar(a);\n      }\n\n      // Body\n      scanVars(body, n);\n    } else {\n      // It's the global block\n      Preconditions.checkState(scope.getParent() == null);\n      scanVars(n, null);\n    }\n  }\n",
        "begin_line": 84,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.Scope#390",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.Node)",
        "snippet": "  Scope(Scope parent, Node rootNode) {\n    Preconditions.checkNotNull(parent);\n    Preconditions.checkArgument(rootNode != parent.rootNode);\n\n    this.parent = parent;\n    this.rootNode = rootNode;\n    JSType nodeType = rootNode.getJSType();\n    if (nodeType != null && nodeType.isFunctionType()) {\n      thisType = nodeType.toMaybeFunctionType().getTypeOfThis();\n    } else {\n      thisType = parent.thisType;\n    }\n    this.isBottom = false;\n    this.depth = parent.depth + 1;\n  }\n",
        "begin_line": 390,
        "end_line": 404,
        "comment": "\n   * Creates a Scope given the parent Scope and the root node of the scope.\n   * @param parent  The parent Scope. Cannot be null.\n   * @param rootNode  Typically the FUNCTION node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseRoots#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.rhino.Node...)",
        "snippet": "  public void traverseRoots(Node ... roots) {\n    traverseRoots(Lists.newArrayList(roots));\n  }\n",
        "begin_line": 284,
        "end_line": 286,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getJSType#1828",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSType()",
        "snippet": "  public JSType getJSType() {\n      return jsType;\n  }\n",
        "begin_line": 1828,
        "end_line": 1830,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isStringKey#2352",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isStringKey()",
        "snippet": "  public boolean isStringKey() {\n    return this.getType() == Token.STRING_KEY;\n  }\n",
        "begin_line": 2352,
        "end_line": 2354,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCompiler.isNormalized#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.isNormalized()",
        "snippet": "    boolean isNormalized() {\n      return this == NORMALIZED || this == NORMALIZED_OBFUSCATED;\n    }\n",
        "begin_line": 286,
        "end_line": 288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCompiler.getLifeCycleStage#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.getLifeCycleStage()",
        "snippet": "  LifeCycleStage getLifeCycleStage() {\n    return stage;\n  }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n   * @return The current life-cycle stage of the AST we're working on.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isVarDeclaration#1515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isVarDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isVarDeclaration(Node n) {\n    // There is no need to verify that parent != null because a NAME node\n    // always has a parent in a valid parse tree.\n    return n.isName() && n.getParent().isVar();\n  }\n",
        "begin_line": 1515,
        "end_line": 1519,
        "comment": "\n   * Is this node the name of a variable being declared?\n   *\n   * @param n The node\n   * @return True if {@code n} is NAME and {@code parent} is VAR\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isStatementParent#1709",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementParent(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementParent(Node parent) {\n    // It is not possible to determine definitely if a node is a statement\n    // or not if it is not part of the AST.  A FUNCTION node can be\n    // either part of an expression or a statement.\n    Preconditions.checkState(parent != null);\n    switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1709,
        "end_line": 1722,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNode#1335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1) {\n    return new Node(type, child1).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1335,
        "end_line": 1337,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0309
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getModule#319",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getModule()",
        "snippet": "  public JSModule getModule() {\n    return module;\n  }\n",
        "begin_line": 319,
        "end_line": 321,
        "comment": " Returns the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0309
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isParamList#2328",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isParamList()",
        "snippet": "  public boolean isParamList() {\n    return this.getType() == Token.PARAM_LIST;\n  }\n",
        "begin_line": 2328,
        "end_line": 2330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0309
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getInput#432",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getInput()",
        "snippet": "  public CompilerInput getInput() {\n    return compiler.getInput(inputId);\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "\n   * Gets the current input source.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0309
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseRoots#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(java.util.List<com.google.javascript.rhino.Node>)",
        "snippet": "  public void traverseRoots(List<Node> roots) {\n    if (roots.isEmpty()) {\n      return;\n    }\n\n    try {\n      Node scopeRoot = roots.get(0).getParent();\n      Preconditions.checkState(scopeRoot != null);\n\n      inputId = NodeUtil.getInputId(scopeRoot);\n      sourceName = \"\";\n      curNode = scopeRoot;\n      pushScope(scopeRoot);\n\n      for (Node root : roots) {\n        Preconditions.checkState(root.getParent() == scopeRoot);\n        traverseBranch(root, scopeRoot);\n      }\n\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 288,
        "end_line": 311,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0309
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.Scope#411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  Scope(Node rootNode, AbstractCompiler compiler) {\n    this.parent = null;\n    this.rootNode = rootNode;\n    thisType = compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);\n    this.isBottom = false;\n    this.depth = 0;\n  }\n",
        "begin_line": 411,
        "end_line": 417,
        "comment": "\n   * Creates a global Scope.\n   * @param rootNode  Typically the global BLOCK node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getParent#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getParent()",
        "snippet": "  public Scope getParent() {\n    return parent;\n  }\n",
        "begin_line": 451,
        "end_line": 453,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getWarnings#944",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return errorManager.getWarnings();\n  }\n",
        "begin_line": 944,
        "end_line": 946,
        "comment": "\n   * Returns the array of warnings (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getInput#998",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getInput(com.google.javascript.rhino.InputId)",
        "snippet": "  @Override\n  public CompilerInput getInput(InputId id) {\n    return inputsById.get(id);\n  }\n",
        "begin_line": 998,
        "end_line": 1001,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getWarnings#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarnings()",
        "snippet": "  @Override\n  public JSError[] getWarnings() {\n    return toArray(CheckLevel.WARNING);\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getWarningCount#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarningCount()",
        "snippet": "  @Override\n  public int getWarningCount() {\n    return warningCount;\n  }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isObjectLitKey#2045",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isObjectLitKey(Node node, Node parent) {\n    switch (node.getType()) {\n      case Token.STRING_KEY:\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 2045,
        "end_line": 2053,
        "comment": "\n   * Determines whether a node represents an object literal key\n   * (e.g. key1 in {key1: value1, key2: value2}).\n   *\n   * @param node A node\n   * @param parent The node's parent\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0306
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.shouldTraverse#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }\n",
        "begin_line": 130,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setPrettyPrint#572",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setPrettyPrint(boolean)",
        "snippet": "    Builder setPrettyPrint(boolean prettyPrint) {\n      this.prettyPrint = prettyPrint;\n      return this;\n    }\n",
        "begin_line": 572,
        "end_line": 575,
        "comment": "\n     * Sets whether pretty printing should be used.\n     * @param prettyPrint If true, pretty printing will be used.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setLineBreak#581",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineBreak(boolean)",
        "snippet": "    Builder setLineBreak(boolean lineBreak) {\n      this.lineBreak = lineBreak;\n      return this;\n    }\n",
        "begin_line": 581,
        "end_line": 584,
        "comment": "\n     * Sets whether line breaking should be done automatically.\n     * @param lineBreak If true, line breaking is done automatically.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setSourceMap#623",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMap(com.google.javascript.jscomp.SourceMap)",
        "snippet": "    Builder setSourceMap(SourceMap sourceMap) {\n      this.sourceMap = sourceMap;\n      return this;\n    }\n",
        "begin_line": 623,
        "end_line": 626,
        "comment": "\n     * Sets the source map to which to write the metadata about\n     * the generated source code.\n     *\n     * @param sourceMap The source map.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getScopeRoot#623",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeRoot()",
        "snippet": "  public Node getScopeRoot() {\n    if (scopeRoots.isEmpty()) {\n      return scopes.peek().getRootNode();\n    } else {\n      return scopeRoots.peek();\n    }\n  }\n",
        "begin_line": 623,
        "end_line": 629,
        "comment": " Returns the current scope's root. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0303
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isExprAssign#1544",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExprAssign(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExprAssign(Node n) {\n    return n.isExprResult()\n        && n.getFirstChild().isAssign();\n  }\n",
        "begin_line": 1544,
        "end_line": 1547,
        "comment": "\n   * Is this node an assignment expression statement?\n   *\n   * @param n The node\n   * @return True if {@code n} is EXPR_RESULT and {@code n}'s\n   *     first child is ASSIGN\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.init#319",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(java.util.List<T1>, java.util.List<T2>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public <T1 extends SourceFile, T2 extends SourceFile> void init(\n      List<T1> externs,\n      List<T2> inputs,\n      CompilerOptions options) {\n    JSModule module = new JSModule(SINGLETON_MODULE_NAME);\n    for (SourceFile input : inputs) {\n      module.add(input);\n    }\n\n    initModules(externs, Lists.newArrayList(module), options);\n  }\n",
        "begin_line": 319,
        "end_line": 329,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0301
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasOneChild#1391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasOneChild()",
        "snippet": "  public boolean hasOneChild() {\n    return first != null && first == last;\n  }\n",
        "begin_line": 1391,
        "end_line": 1393,
        "comment": "\n   * Check for one child more efficiently than by iterating over all the\n   * children as is done with Node.getChildCount().\n   *\n   * @return Whether the node has exactly one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.03
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isGet#1505",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isGet(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isGet(Node n) {\n    return n.isGetProp() || n.isGetElem();\n  }\n",
        "begin_line": 1505,
        "end_line": 1507,
        "comment": "\n   * Is this a GETPROP or GETELEM node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0299
        },
        "num_failing_tests": 1
    },
    {
        "name": "VoidType.VoidType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "VoidType.toStringHelper#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "VoidType.getDisplayName#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"undefined\";\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueType.ValueType#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnknownType.UnknownType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked = isChecked;\n  }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry) {\n    this(registry, DEFAULT_MAX_UNION_SIZE);\n  }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry, int)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry, int maxUnionSize) {\n    this.registry = registry;\n    this.maxUnionSize = maxUnionSize;\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.reduceAlternatesWithoutUnion#219",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.reduceAlternatesWithoutUnion()",
        "snippet": "  private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n      return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n      if (areAllUnknownsChecked) {\n        return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n      } else {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      int size = alternates.size();\n      if (size > maxUnionSize) {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      } else if (size > 1) {\n        return null;\n      } else if (size == 1) {\n        return alternates.iterator().next();\n      } else {\n        return registry.getNativeType(NO_TYPE);\n      }\n    }\n  }\n",
        "begin_line": 219,
        "end_line": 240,
        "comment": "\n   * Reduce the alternates into a non-union type.\n   * If the alternates can't be accurately represented with a non-union\n   * type, return null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.build#247",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
        "snippet": "  JSType build() {\n    if (result == null) {\n      result = reduceAlternatesWithoutUnion();\n      if (result == null) {\n        result = new UnionType(registry, getAlternateListCopy());\n      }\n    }\n    return result;\n  }\n",
        "begin_line": 247,
        "end_line": 255,
        "comment": "\n   * Creates a union.\n   * @return A UnionType if it has two or more alternates, the\n   *    only alternate if it has one and otherwise {@code NO_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.getAlternateListCopy#257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.getAlternateListCopy()",
        "snippet": "  private Collection<JSType> getAlternateListCopy() {\n    return ImmutableList.copyOf(alternates);\n  }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionType.UnionType#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Collection<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  UnionType(JSTypeRegistry registry, Collection<JSType> alternates) {\n    super(registry);\n    this.alternates = alternates;\n    this.hashcode = this.alternates.hashCode();\n  }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "\n   * Creates a union type.\n   *\n   * @param alternates the alternates of the union\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringType.StringType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  StringType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringType.toStringHelper#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringType.getDisplayName#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"string\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n    this(registry, className, implicitPrototype, false);\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "\n   * Creates an object type.\n   *\n   * @param className the name of the class.  May be {@code null} to\n   *        denote an anonymous class.\n   *\n   * @param implicitPrototype the implicit prototype\n   *        (a.k.a. {@code [[Prototype]]}) as defined by ECMA-262. If the\n   *        implicit prototype is {@code null} the implicit prototype will be\n   *        set to the {@link JSTypeNative#OBJECT_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType) {\n    super(registry);\n    this.properties = Maps.newTreeMap();\n    this.className = className;\n    this.nativeType = nativeType;\n    if (nativeType || implicitPrototype != null) {\n      setImplicitPrototype(implicitPrototype);\n    } else {\n      setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n    }\n  }\n",
        "begin_line": 113,
        "end_line": 125,
        "comment": "\n   * Creates an object type, allowing specification of the implicit prototype\n   * when creating native objects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.setPrettyPrint#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setPrettyPrint(boolean)",
        "snippet": "  void setPrettyPrint(boolean prettyPrint) {\n    this.prettyPrint = prettyPrint;\n  }\n",
        "begin_line": 398,
        "end_line": 400,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getImplicitPrototype#411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototypeFallback;\n  }\n",
        "begin_line": 411,
        "end_line": 414,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.setImplicitPrototype#422",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototypeFallback = implicitPrototype;\n  }\n",
        "begin_line": 422,
        "end_line": 425,
        "comment": "\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.hasReferenceName#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return className != null || ownerFunction != null;\n  }\n",
        "begin_line": 438,
        "end_line": 441,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.isSubtype#443",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    }\n\n    // Union types\n    if (that.isUnionType()) {\n      // The static {@code JSType.isSubtype} check already decomposed\n      // union types, so we don't need to check those again.\n      return false;\n    }\n\n    // record types\n    if (that.isRecordType()) {\n      return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n\n    // Interfaces\n    // Find all the interfaces implemented by this class and compare each one\n    // to the interface instance.\n    ObjectType thatObj = that.toObjectType();\n    ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();\n    if (thatCtor != null && thatCtor.isInterface()) {\n      Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();\n      for (ObjectType thisInterface : thisInterfaces) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    if (getConstructor() != null && getConstructor().isInterface()) {\n      for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    // other prototype based objects\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n      // If unsure, say 'yes', to avoid spurious warnings.\n      // TODO(user): resolve the prototype chain completely in all cases,\n      // to avoid guessing.\n      return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n  }\n",
        "begin_line": 443,
        "end_line": 491,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.implicitPrototypeChainIsUnknown#493",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeChainIsUnknown()",
        "snippet": "  private boolean implicitPrototypeChainIsUnknown() {\n    ObjectType p = getImplicitPrototype();\n    while (p != null) {\n      if (p.isUnknownType()) {\n        return true;\n      }\n      p = p.getImplicitPrototype();\n    }\n    return false;\n  }\n",
        "begin_line": 493,
        "end_line": 502,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.hasCachedValues#504",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }\n",
        "begin_line": 504,
        "end_line": 507,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.isNativeObjectType#510",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
        "snippet": "  @Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }\n",
        "begin_line": 510,
        "end_line": 513,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.setOwnerFunction#515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  @Override\n  void setOwnerFunction(FunctionType type) {\n    Preconditions.checkState(ownerFunction == null || type == null);\n    ownerFunction = type;\n  }\n",
        "begin_line": 515,
        "end_line": 519,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getOwnerFunction#521",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getOwnerFunction()",
        "snippet": "  @Override\n  public FunctionType getOwnerFunction() {\n    return ownerFunction;\n  }\n",
        "begin_line": 521,
        "end_line": 524,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getCtorExtendedInterfaces#533",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();\n  }\n",
        "begin_line": 533,
        "end_line": 538,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.Property#602",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.Property.Property(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "    Property(String name, JSType type, boolean inferred,\n        Node propertyNode) {\n      this.name = name;\n      this.type = type;\n      this.inferred = inferred;\n      this.propertyNode = propertyNode;\n    }\n",
        "begin_line": 602,
        "end_line": 608,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.getType#635",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.Property.getType()",
        "snippet": "    @Override\n    public JSType getType() {\n      return type;\n    }\n",
        "begin_line": 635,
        "end_line": 638,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.ObjectType#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.isUnknownType#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto = getImplicitPrototype();\n      if (implicitProto == null ||\n          implicitProto.isNativeObjectType()) {\n        unknown = false;\n        for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n          if (interfaceType.isUnknownType()) {\n            unknown = true;\n            break;\n          }\n        }\n      } else {\n        unknown = implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }\n",
        "begin_line": 489,
        "end_line": 509,
        "comment": "\n   * We treat this as the unknown type if any of its implicit prototype\n   * properties is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.hasCachedValues#521",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
        "snippet": "  public boolean hasCachedValues() {\n    return !unknown;\n  }\n",
        "begin_line": 521,
        "end_line": 523,
        "comment": "\n   * Returns true if any cached values have been set for this type.  If true,\n   * then the prototype chain should not be changed, as it might invalidate the\n   * cached values.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.cast#541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.cast(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public static ObjectType cast(JSType type) {\n    return type == null ? null : type.toObjectType();\n  }\n",
        "begin_line": 541,
        "end_line": 543,
        "comment": "\n   * A null-safe version of JSType#toObjectType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.isFunctionPrototypeType#545",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isFunctionPrototypeType()",
        "snippet": "  @Override\n  public final boolean isFunctionPrototypeType() {\n    return getOwnerFunction() != null;\n  }\n",
        "begin_line": 545,
        "end_line": 548,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberType.NumberType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberType.getDisplayName#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"number\";\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.NullType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NullType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.toStringHelper#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.getDisplayName#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"null\";\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoType.NoType#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoType.isNoType#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
        "snippet": "  @Override\n  public boolean isNoType() {\n    return true;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoResolvedType.NoResolvedType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.NoResolvedType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoResolvedType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoObjectType.NoObjectType#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null,\n          registry.createArrowType(null, null),\n          null, null, true, true);\n    getInternalArrowType().returnType = this;\n    this.setInstanceType(this);\n  }\n",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.initializeBuiltInTypes#246",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
        "snippet": "  private void initializeBuiltInTypes() {\n    // These locals shouldn't be all caps.\n    BooleanType BOOLEAN_TYPE = new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE = new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE = new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE = new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n\n    VoidType VOID_TYPE = new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE = new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other's results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    PrototypeObjectType TOP_LEVEL_PROTOTYPE =\n        new PrototypeObjectType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Object\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n\n    OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE =\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE = new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    NoObjectType NO_RESOLVED_TYPE = new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE =\n      new FunctionType(this, \"Array\", null,\n          createArrowType(createParametersWithVarArgs(ALL_TYPE), null),\n          null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType =\n        ARRAY_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Boolean\", null,\n            createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE),\n            null, null, true, true);\n    ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,\n        BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE =\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE =\n      new FunctionType(this, \"Date\", null,\n          createArrowType(\n              createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n                  UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n              STRING_TYPE),\n          null, null, true, true);\n    ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE,\n        REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE =\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Number\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE =\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE =\n      new FunctionType(this, \"RegExp\", null,\n          createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)),\n          null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType =\n        REGEXP_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"String\", null,\n            createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE),\n            null, null, true, true);\n    ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE =\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN =\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE =\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE =\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -> ?\n    FunctionType U2U_FUNCTION_TYPE =\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -> ? with the NoObject type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE =\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(UNKNOWN_TYPE),\n                UNKNOWN_TYPE),\n            NO_OBJECT_TYPE, null, true, true) {\n          private static final long serialVersionUID = 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it's the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -> NoType\n    FunctionType LEAST_FUNCTION_TYPE =\n        createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the 'this' object in the global scope\n    FunctionType GLOBAL_THIS_CTOR =\n        new FunctionType(this, \"global this\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -> All\n    FunctionType GREATEST_FUNCTION_TYPE =\n      createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n\n    // Register the prototype property. See the comments below in\n    // registerPropertyOnType about the bootstrapping process.\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n  }\n",
        "begin_line": 246,
        "end_line": 559,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)",
        "snippet": "  public JSTypeRegistry(\n      ErrorReporter reporter, boolean tolerateUndefinedValues) {\n    this.reporter = reporter;\n    nativeTypes = new JSType[JSTypeNative.values().length];\n    namesToTypes = new HashMap<String, JSType>();\n    resetForTypeCheck();\n    this.tolerateUndefinedValues = tolerateUndefinedValues;\n  }\n",
        "begin_line": 205,
        "end_line": 212,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.resetForTypeCheck#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
        "snippet": "  public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    eachRefTypeIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }\n",
        "begin_line": 237,
        "end_line": 244,
        "comment": "\n   * Reset to run the TypeCheck pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.initializeRegistry#561",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
        "snippet": "  private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }\n",
        "begin_line": 561,
        "end_line": 585,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.register#587",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void register(JSType type) {\n    register(type, type.toString());\n  }\n",
        "begin_line": 587,
        "end_line": 589,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.register#591",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  private void register(JSType type, String name) {\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf('.') > 0) {\n      name = name.substring(0, name.lastIndexOf('.'));\n      namespaces.add(name);\n    }\n  }\n",
        "begin_line": 591,
        "end_line": 599,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.registerNativeType#601",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] = type;\n  }\n",
        "begin_line": 601,
        "end_line": 603,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.registerPropertyOnType#617",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);\n    if (typeSet == null) {\n      typeSet = new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n      typesIndexedByProperty.put(propertyName, typeSet);\n    }\n\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n\n    // Clear cached values that depend on typesIndexedByProperty.\n    greatestSubtypeByProperty.remove(propertyName);\n  }\n",
        "begin_line": 617,
        "end_line": 629,
        "comment": "\n   * Tells the type system that {@code owner} may have a property named\n   * {@code propertyName}. This allows the registry to keep track of what\n   * types a property is defined upon.\n   *\n   * This is NOT the same as saying that {@code owner} must have a property\n   * named type. ObjectType#hasProperty attempts to minimize false positives\n   * (\"if we're not sure, then don't type check this property\"). The type\n   * registry, on the other hand, should attempt to minimize false negatives\n   * (\"if this property is assigned anywhere in the program, it must\n   * show up in the type registry\").\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.addReferenceTypeIndexedByProperty#631",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.addReferenceTypeIndexedByProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void addReferenceTypeIndexedByProperty(\n      String propertyName, JSType type) {\n    if (type instanceof ObjectType && ((ObjectType) type).hasReferenceName()) {\n      Map<String, ObjectType> typeSet =\n          eachRefTypeIndexedByProperty.get(propertyName);\n      if (typeSet == null) {\n        typeSet = Maps.newHashMap();\n        eachRefTypeIndexedByProperty.put(propertyName, typeSet);\n      }\n      ObjectType objType = (ObjectType) type;\n      typeSet.put(objType.getReferenceName(), objType);\n    } else if (type instanceof NamedType) {\n      addReferenceTypeIndexedByProperty(\n          propertyName, ((NamedType) type).getReferencedType());\n    } else if (type.isUnionType()) {\n      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n        addReferenceTypeIndexedByProperty(propertyName, alternate);\n      }\n    }\n  }\n",
        "begin_line": 631,
        "end_line": 650,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getNativeType#874",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }\n",
        "begin_line": 874,
        "end_line": 876,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getNativeObjectType#878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }\n",
        "begin_line": 878,
        "end_line": 880,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getNativeFunctionType#882",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }\n",
        "begin_line": 882,
        "end_line": 884,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createOptionalType#955",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }\n",
        "begin_line": 955,
        "end_line": 961,
        "comment": "\n   * Creates a type representing optional values of the given type.\n   * @return the union of the type and the void type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createUnionType#993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }\n",
        "begin_line": 993,
        "end_line": 999,
        "comment": "\n   * Creates a union type whose variants are the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createArrowType#1029",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType createArrowType(Node parametersNode, JSType returnType) {\n    return new ArrowType(this, parametersNode, returnType);\n  }\n",
        "begin_line": 1029,
        "end_line": 1031,
        "comment": "\n   * Creates an arrow type, an abstract representation of the parameters\n   * and return value of a function.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   * @param returnType the function's return type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createArrowType#1039",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node)",
        "snippet": "  ArrowType createArrowType(Node parametersNode) {\n    return new ArrowType(this, parametersNode, null);\n  }\n",
        "begin_line": 1039,
        "end_line": 1041,
        "comment": "\n   * Creates an arrow type with an unknown return type.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1085",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }\n",
        "begin_line": 1085,
        "end_line": 1089,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createParametersWithVarArgs#1192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }\n",
        "begin_line": 1192,
        "end_line": 1194,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list. The last\n   * parameter type is considered a variable length argument.\n   *\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument.\n   * @return a tree hierarchy representing a typed argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createOptionalParameters#1200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }\n",
        "begin_line": 1200,
        "end_line": 1204,
        "comment": "\n   * Creates a tree hierarchy representing a typed parameter list in which\n   * every parameter is optional.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createParameters#1216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    int max = parameterTypes.length - 1;\n    for (int i = 0; i <= max; i++) {\n      if (lastVarArgs && i == max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 1216,
        "end_line": 1227,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list.\n   *\n   * @param lastVarArgs whether the last type should considered as a variable\n   *     length argument.\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument is {@code lastVarArgs} is\n   *     {@code true}.\n   * @return a tree hierarchy representing a typed argument list\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }\n",
        "begin_line": 1236,
        "end_line": 1243,
        "comment": "\n   * Creates a function type.\n   * @param returnType the function's return type\n   * @param lastVarArgs whether the last parameter type should be considered as\n   * an extensible var_args parameter\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionType createFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .build();\n  }\n",
        "begin_line": 1279,
        "end_line": 1285,
        "comment": "\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.JSType#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  JSType(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.getNativeType#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n   * Utility method for less verbose code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNoType#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
        "snippet": "  public boolean isNoType() {\n    return false;\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNoResolvedType#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoResolvedType()",
        "snippet": "  public boolean isNoResolvedType() {\n    return false;\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNoObjectType#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
        "snippet": "  public boolean isNoObjectType() {\n    return false;\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isEmptyType#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
        "snippet": "  public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n  }\n",
        "begin_line": 156,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isAllType#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
        "snippet": "  public boolean isAllType() {\n    return false;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isUnknownType#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
        "snippet": "  public boolean isUnknownType() {\n    return false;\n  }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isUnionType#245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnionType()",
        "snippet": "  public final boolean isUnionType() {\n    return toMaybeUnionType() != null;\n  }\n",
        "begin_line": 245,
        "end_line": 247,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeUnionType#254",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeUnionType()",
        "snippet": "  public UnionType toMaybeUnionType() {\n    return null;\n  }\n",
        "begin_line": 254,
        "end_line": 256,
        "comment": "\n   * Downcasts this to a UnionType, or returns null if this is not a UnionType.\n   *\n   * Named in honor of Haskell's Maybe type constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isFunctionType#264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isFunctionType()",
        "snippet": "  public final boolean isFunctionType() {\n    return toMaybeFunctionType() != null;\n  }\n",
        "begin_line": 264,
        "end_line": 266,
        "comment": " Returns true if toMaybeFunctionType returns a non-null FunctionType. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeFunctionType#280",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType()",
        "snippet": "  public FunctionType toMaybeFunctionType() {\n    return null;\n  }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "\n   * Downcasts this to a FunctionType, or returns null if this is not\n   * a function.\n   *\n   * For the purposes of this function, we define a MaybeFunctionType as any\n   * type in the sub-lattice\n   * { x | LEAST_FUNCTION_TYPE <= x <= GREATEST_FUNCTION_TYPE }\n   * This definition excludes bottom types like NoType and NoObjectType.\n   *\n   * This definition is somewhat arbitrary and axiomatic, but this is the\n   * definition that makes the most sense for the most callers.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isRecordType#317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isRecordType()",
        "snippet": "  public boolean isRecordType() {\n    return toMaybeRecordType() != null;\n  }\n",
        "begin_line": 317,
        "end_line": 319,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeRecordType#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeRecordType()",
        "snippet": "  RecordType toMaybeRecordType() {\n    return null;\n  }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "\n   * Downcasts this to a RecordType, or returns null if this is not\n   * a RecordType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isEquivalentTo#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isEquivalentTo(JSType jsType) {\n    if (jsType instanceof ProxyObjectType) {\n      return jsType.isEquivalentTo(this);\n    }\n    // Relies on the fact that for the base {@link JSType}, only one\n    // instance of each sub-type will ever be created in a given registry, so\n    // there is no need to verify members. If the object pointers are not\n    // identical, then the type member must be different.\n    return this == jsType;\n  }\n",
        "begin_line": 408,
        "end_line": 417,
        "comment": "\n   * Checks if two types are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.hashCode#430",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 430,
        "end_line": 433,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toObjectType#554",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toObjectType()",
        "snippet": "  public ObjectType toObjectType() {\n    return this instanceof ObjectType ? (ObjectType) this : null;\n  }\n",
        "begin_line": 554,
        "end_line": 556,
        "comment": "\n   * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n   *\n   * Does not change the underlying JS type. If you want to simulate JS\n   * autoboxing or dereferencing, you should use autoboxesTo() or dereference().\n   * Those methods may change the underlying JS type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isSubtype#989",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n  }\n",
        "begin_line": 989,
        "end_line": 991,
        "comment": "\n   * Checks whether {@code this} is a subtype of {@code that}.<p>\n   *\n   * Subtyping rules:\n   * <ul>\n   * <li>(unknown) &mdash; every type is a subtype of the Unknown type.</li>\n   * <li>(no) &mdash; the No type is a subtype of every type.</li>\n   * <li>(no-object) &mdash; the NoObject type is a subtype of every object\n   * type (i.e. subtypes of the Object type).</li>\n   * <li>(ref) &mdash; a type is a subtype of itself.</li>\n   * <li>(union-l) &mdash; A union type is a subtype of a type U if all the\n   * union type's constituents are a subtype of U. Formally<br>\n   * {@code (T<sub>1</sub>, &hellip;, T<sub>n</sub>) &lt;: U} if and only\n   * {@code T<sub>k</sub> &lt;: U} for all {@code k &isin; 1..n}.</li>\n   * <li>(union-r) &mdash; A type U is a subtype of a union type if it is a\n   * subtype of one of the union type's constituents. Formally<br>\n   * {@code U &lt;: (T<sub>1</sub>, &hellip;, T<sub>n</sub>)} if and only\n   * if {@code U &lt;: T<sub>k</sub>} for some index {@code k}.</li>\n   * <li>(objects) &mdash; an Object {@code O<sub>1</sub>} is a subtype\n   * of an object {@code O<sub>2</sub>} if it has more properties\n   * than {@code O<sub>2</sub>} and all common properties are\n   * pairwise subtypes.</li>\n   * </ul>\n   *\n   * @return {@code this &lt;: that}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isSubtypeHelper#1014",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // equality\n    if (thisType.isEquivalentTo(thatType)) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // unions\n    if (thatType.isUnionType()) {\n      UnionType union = thatType.toMaybeUnionType();\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n    }\n    // proxy types\n    if (thatType instanceof ProxyObjectType) {\n      return thisType.isSubtype(\n          ((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n  }\n",
        "begin_line": 1014,
        "end_line": 1042,
        "comment": "\n   * A generic implementation meant to be used as a helper for common subtyping\n   * cases.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toString#1147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toStringHelper(false);\n  }\n",
        "begin_line": 1147,
        "end_line": 1150,
        "comment": "\n   * A string representation of this type, suitable for printing\n   * in warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.InstanceObjectType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean)",
        "snippet": "  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType) {\n    super(registry, null, null, isNativeType);\n    Preconditions.checkNotNull(constructor);\n    this.constructor = constructor;\n  }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getReferenceName#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    return getConstructor().getReferenceName();\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.hasReferenceName#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return getConstructor().hasReferenceName();\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getImplicitPrototype#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getConstructor#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (constructor.hasReferenceName()) {\n      return constructor.getReferenceName();\n    } else {\n      return super.toStringHelper(forAnnotations);\n    }\n  }\n",
        "begin_line": 95,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.isNominalType#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
        "snippet": "  @Override\n  public boolean isNominalType() {\n    return hasReferenceName();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.hashCode#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    if (hasReferenceName()) {\n      return getReferenceName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }\n",
        "begin_line": 173,
        "end_line": 180,
        "comment": "\n   * If this is equal to a NamedType object, its hashCode must be equal\n   * to the hashCode of the NamedType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getCtorExtendedInterfaces#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return getConstructor().getExtendedInterfaces();\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.FunctionType#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.ObjectType, java.lang.String, boolean, boolean)",
        "snippet": "  FunctionType(JSTypeRegistry registry, String name, Node source,\n      ArrowType arrowType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);\n    setPrettyPrint(true);\n\n    Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());\n    Preconditions.checkNotNull(arrowType);\n    this.source = source;\n    this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;\n    if (isConstructor) {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n    } else {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    this.call = arrowType;\n    this.templateTypeName = templateTypeName;\n  }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": " Creates an instance for a function that might be a constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.isConstructor#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
        "snippet": "  @Override\n  public boolean isConstructor() {\n    return kind == Kind.CONSTRUCTOR;\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.isInterface#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
        "snippet": "  @Override\n  public boolean isInterface() {\n    return kind == Kind.INTERFACE;\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.toMaybeFunctionType#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.toMaybeFunctionType()",
        "snippet": "  @Override\n  public FunctionType toMaybeFunctionType() {\n    return this;\n  }\n",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getInternalArrowType#274",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInternalArrowType()",
        "snippet": "  ArrowType getInternalArrowType() {\n    return call;\n  }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": " Gets the internal arrow type. For use by subclasses only. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getPrototype#308",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
        "snippet": "  public ObjectType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototypeSlot == null) {\n      String refName = getReferenceName();\n      if (refName == null) {\n        // Someone is trying to access the prototype of a structural function.\n        // We don't want to give real properties to this prototype, because\n        // then it would propagate to all structural functions.\n        setPrototype(\n           registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE),\n           null);\n      } else {\n        setPrototype(\n            new PrototypeObjectType(\n                registry,\n                this.getReferenceName() + \".prototype\",\n                registry.getNativeObjectType(OBJECT_TYPE),\n                isNativeObjectType()),\n            null);\n      }\n    }\n    return (ObjectType) prototypeSlot.getType();\n  }\n",
        "begin_line": 308,
        "end_line": 330,
        "comment": "\n   * Gets the {@code prototype} property of this function type. This is\n   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#337",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    setPrototypeBasedOn(baseType, null);\n  }\n",
        "begin_line": 337,
        "end_line": 339,
        "comment": "\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#341",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    // This is a bit weird. We need to successfully handle these\n    // two cases:\n    // Foo.prototype = new Bar();\n    // and\n    // Foo.prototype = {baz: 3};\n    // In the first case, we do not want new properties to get\n    // added to Bar. In the second case, we do want new properties\n    // to get added to the type of the anonymous object.\n    //\n    // We handle this by breaking it into two cases:\n    //\n    // In the first case, we create a new PrototypeObjectType and set\n    // its implicit prototype to the type being assigned. This ensures\n    // that Bar will not get any properties of Foo.prototype, but properties\n    // later assigned to Bar will get inherited properly.\n    //\n    // In the second case, we just use the anonymous object as the prototype.\n    if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType()) {\n\n      baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype(baseType, propertyNode);\n  }\n",
        "begin_line": 341,
        "end_line": 367,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototype#374",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  boolean setPrototype(ObjectType prototype, Node propertyNode) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n\n    ObjectType oldPrototype = prototypeSlot == null\n        ? null : (ObjectType) prototypeSlot.getType();\n    boolean replacedPrototype = oldPrototype != null;\n\n    this.prototypeSlot = new Property(\"prototype\", prototype, true,\n        propertyNode == null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n\n    if (oldPrototype != null) {\n      // Disassociating the old prototype makes this easier to debug--\n      // we don't have to worry about two prototypes running around.\n      oldPrototype.setOwnerFunction(null);\n    }\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n\n      if (isInterface()) {\n        for (ObjectType interfaceType : getExtendedInterfaces()) {\n          if (interfaceType.getConstructor() != null) {\n            interfaceType.getConstructor().addSubType(this);\n          }\n        }\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }\n",
        "begin_line": 374,
        "end_line": 417,
        "comment": "\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getExtendedInterfaces#504",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getExtendedInterfaces()",
        "snippet": "  public Iterable<ObjectType> getExtendedInterfaces() {\n    return extendedInterfaces;\n  }\n",
        "begin_line": 504,
        "end_line": 506,
        "comment": " Returns interfaces directly extended by an interface ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getSuperClassConstructor#764",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
        "snippet": "  public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType == null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }\n",
        "begin_line": 764,
        "end_line": 771,
        "comment": "\n   * Given a constructor or an interface type, get its superclass constructor\n   * or {@code null} if none exists.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getInstanceType#995",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
        "snippet": "  public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis;\n  }\n",
        "begin_line": 995,
        "end_line": 998,
        "comment": "\n   * Gets the type of instance of this function.\n   * @throws IllegalStateException if this function is not a constructor\n   *         (see {@link #isConstructor()}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setInstanceType#1004",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setInstanceType(ObjectType instanceType) {\n    typeOfThis = instanceType;\n  }\n",
        "begin_line": 1004,
        "end_line": 1006,
        "comment": "\n   * Sets the instance type. This should only be used for special\n   * native types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.hasInstanceType#1011",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
        "snippet": "  public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }\n",
        "begin_line": 1011,
        "end_line": 1013,
        "comment": "\n   * Returns whether this function type has an instance type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.addSubType#1050",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void addSubType(FunctionType subType) {\n    if (subTypes == null) {\n      subTypes = Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }\n",
        "begin_line": 1050,
        "end_line": 1055,
        "comment": " Adds a type to the list of subtypes for this type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.hasCachedValues#1087",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return prototypeSlot != null || super.hasCachedValues();\n  }\n",
        "begin_line": 1087,
        "end_line": 1090,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.FunctionParamBuilder#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.addRequiredParams#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }\n",
        "begin_line": 62,
        "end_line": 71,
        "comment": "\n   * Add parameters of the given type to the end of the param list.\n   * @return False if this is called after optional params are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.addOptionalParams#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n   * Add optional parameters of the given type to the end of the param list.\n   * @param types Types for each optional parameter. The builder will make them\n   *     undefineable.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.addVarArgs#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type = registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n   * Add variable arguments to the end of the parameter list.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.newParameter#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node newParameter(JSType type) {\n    Node paramNode = Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }\n",
        "begin_line": 134,
        "end_line": 139,
        "comment": " Add a parameter to the list with the given type.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.build#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
        "snippet": "  public Node build() {\n    return root;\n  }\n",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.hasOptionalOrVarArgs#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
        "snippet": "  private boolean hasOptionalOrVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null &&\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }\n",
        "begin_line": 145,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.hasVarArgs#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
        "snippet": "  public boolean hasVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null && lastChild.isVarArgs();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.FunctionBuilder#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.FunctionBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.withParamsNode#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withParamsNode(com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionBuilder withParamsNode(Node parametersNode) {\n    this.parametersNode = parametersNode;\n    return this;\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n   * Set the parameters of the function type with a specially-formatted node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.withReturnType#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withReturnType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public FunctionBuilder withReturnType(JSType returnType) {\n    this.returnType = returnType;\n    return this;\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": " Set the return type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.build#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.build()",
        "snippet": "  public FunctionType build() {\n    return new FunctionType(registry, name, sourceNode,\n        new ArrowType(registry, parametersNode, returnType, inferredReturnType),\n        typeOfThis, templateTypeName, isConstructor, isNativeType);\n  }\n",
        "begin_line": 158,
        "end_line": 162,
        "comment": " Construct a new function type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ErrorFunctionType.ErrorFunctionType#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(\n        registry, name, null,\n        registry.createArrowType(\n            registry.createOptionalParameters(\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE)),\n            null),\n        null, null, true, true);\n\n    // NOTE(nicksantos): Errors have the weird behavior in that they can\n    // be called as functions, and they will return instances of themselves.\n    // Error('x') instanceof Error => true\n    //\n    // In user-defined types, we would deal with this case by creating\n    // a NamedType with the name \"Error\" and then resolve it later.\n    //\n    // For native types, we don't really want the native types to\n    // depend on type-resolution. So we just set the return type manually\n    // at the end of construction.\n    //\n    // There's similar logic in JSTypeRegistry for Array and RegExp.\n    getInternalArrowType().returnType = getInstanceType();\n  }\n",
        "begin_line": 50,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanType.BooleanType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanType.toStringHelper#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanType.getDisplayName#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"boolean\";\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrowType.ArrowType#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrowType.ArrowType#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n\n    this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred = returnTypeInferred;\n  }\n",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "AllType.AllType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "AllType.isAllType#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
        "snippet": "  @Override\n  public boolean isAllType() {\n    return true;\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setJSType#1832",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void setJSType(JSType jsType) {\n      this.jsType = jsType;\n  }\n",
        "begin_line": 1832,
        "end_line": 1834,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setVarArgs#1886",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
        "snippet": "  public void setVarArgs(boolean varArgs) {\n    putBooleanProp(VAR_ARGS_NAME, varArgs);\n  }\n",
        "begin_line": 1886,
        "end_line": 1888,
        "comment": "\n   * Sets whether this node is a variable length argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setOptionalArg#1904",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
        "snippet": "  public void setOptionalArg(boolean optionalArg) {\n    putBooleanProp(OPT_ARG_NAME, optionalArg);\n  }\n",
        "begin_line": 1904,
        "end_line": 1906,
        "comment": "\n   * Sets whether this node is an optional argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getTypeRegistry#1138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getTypeRegistry()",
        "snippet": "  @Override\n  public JSTypeRegistry getTypeRegistry() {\n    if (typeRegistry == null) {\n      typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);\n    }\n    return typeRegistry;\n  }\n",
        "begin_line": 1138,
        "end_line": 1144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isStatementBlock#1698",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementBlock(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementBlock(Node n) {\n    return n.isScript() || n.isBlock();\n  }\n",
        "begin_line": 1698,
        "end_line": 1700,
        "comment": "\n   * @return Whether the node is of a type that contain other statements.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0297
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isFunctionDeclaration#1867",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionDeclaration(Node n) {\n    return n.isFunction() && isStatement(n);\n  }\n",
        "begin_line": 1867,
        "end_line": 1869,
        "comment": "\n   * Is this node a function declaration? A function declaration is a function\n   * that has a name that is added to the current scope (i.e. a function that\n   * is not part of a expression; see {@link #isFunctionExpression}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0297
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.parseInputs#1236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseInputs()",
        "snippet": "  Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main js sources.\n    jsRoot = IR.block();\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot = IR.block();\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot = IR.block(externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot, options.tracer);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n      // Parse externs sources.\n      for (CompilerInput input : externs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      // Modules inferred in ProcessCommonJS pass.\n      if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n        processAMDAndCommonJSModules();\n      }\n\n      hoistExterns(externsRoot);\n\n      // Check if the sources need to be re-ordered.\n      boolean staleInputs = false;\n      if (options.dependencyOptions.needsManagement() &&\n          options.closurePass) {\n        for (CompilerInput input : inputs) {\n          // Forward-declare all the provided types, so that they\n          // are not flagged even if they are dropped from the process.\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n        try {\n          inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);\n          staleInputs = true;\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n\n          // If in IDE mode, we ignore the error and keep going.\n          if (hasErrors()) {\n            return null;\n          }\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n\n          // If in IDE mode, we ignore the error and keep going.\n          if (hasErrors()) {\n            return null;\n          }\n        }\n      }\n\n      hoistNoCompileFiles();\n\n      if (staleInputs) {\n        repartitionInputs();\n      }\n\n      // Build the AST.\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      if (hasErrors()) {\n        return null;\n      }\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }\n",
        "begin_line": 1236,
        "end_line": 1359,
        "comment": "\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0296
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasChildren#536",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChildren()",
        "snippet": "  public boolean hasChildren() {\n    return first != null;\n  }\n",
        "begin_line": 536,
        "end_line": 538,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0296
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getBooleanProp#821",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getBooleanProp(int)",
        "snippet": "  public boolean getBooleanProp(int propType) {\n    return getIntProp(propType) != 0;\n  }\n",
        "begin_line": 821,
        "end_line": 823,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0296
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hoistExterns#1364",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hoistExterns(com.google.javascript.rhino.Node)",
        "snippet": "  private void hoistExterns(Node externsRoot) {\n    boolean staleInputs = false;\n    for (CompilerInput input : inputs) {\n      if (options.dependencyOptions.needsManagement() &&\n          options.closurePass) {\n        // If we're doing scanning dependency info anyway, use that\n        // information to skip sources that obviously aren't externs.\n        if (!input.getProvides().isEmpty() || !input.getRequires().isEmpty()) {\n          continue;\n        }\n      }\n\n      Node n = input.getAstRoot(this);\n\n      // Inputs can have a null AST on a parse error.\n      if (n == null) {\n        continue;\n      }\n\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && info.isExterns()) {\n        // If the input file is explicitly marked as an externs file, then\n        // assume the programmer made a mistake and throw it into\n        // the externs pile anyways.\n        externsRoot.addChildToBack(n);\n        input.setIsExtern(true);\n\n        input.getModule().remove(input);\n\n        externs.add(input);\n        staleInputs = true;\n      }\n    }\n\n    if (staleInputs) {\n      repartitionInputs();\n    }\n  }\n",
        "begin_line": 1364,
        "end_line": 1401,
        "comment": "\n   * Hoists inputs with the @externs annotation into the externs list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0296
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.makeCompilerInput#388",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.makeCompilerInput(java.util.List<T>, boolean)",
        "snippet": "  private <T extends SourceFile> List<CompilerInput> makeCompilerInput(\n      List<T> files, boolean isExtern) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    for (T file : files) {\n      inputs.add(new CompilerInput(file, isExtern));\n    }\n    return inputs;\n  }\n",
        "begin_line": 388,
        "end_line": 395,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initInputsByIdMap#482",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initInputsByIdMap()",
        "snippet": "  void initInputsByIdMap() {\n    inputsById = new HashMap<InputId, CompilerInput>();\n    for (CompilerInput input : externs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = putCompilerInput(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n      }\n    }\n    for (CompilerInput input : inputs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = putCompilerInput(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_INPUT, input.getName()));\n      }\n    }\n  }\n",
        "begin_line": 482,
        "end_line": 498,
        "comment": "\n   * Creates a map to make looking up an input by name fast. Also checks for\n   * duplicate inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getErrors#937",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return errorManager.getErrors();\n  }\n",
        "begin_line": 937,
        "end_line": 939,
        "comment": "\n   * Returns the array of errors (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setCodingConvention#1278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public void setCodingConvention(CodingConvention codingConvention) {\n    this.codingConvention = codingConvention;\n  }\n",
        "begin_line": 1278,
        "end_line": 1280,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initModules#345",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initModules(java.util.List<T>, java.util.List<com.google.javascript.jscomp.JSModule>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public <T extends SourceFile> void initModules(\n      List<T> externs, List<JSModule> modules, CompilerOptions options) {\n    initOptions(options);\n\n    checkFirstModule(modules);\n    fillEmptyModules(modules);\n\n    this.externs = makeCompilerInput(externs, true);\n\n    // Generate the module graph, and report any errors in the module\n    // specification as errors.\n    this.modules = modules;\n    if (modules.size() > 1) {\n      try {\n        this.moduleGraph = new JSModuleGraph(modules);\n      } catch (JSModuleGraph.ModuleDependenceException e) {\n        // problems with the module format.  Report as an error.  The\n        // message gives all details.\n        report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));\n        return;\n      }\n    } else {\n      this.moduleGraph = null;\n    }\n\n    this.inputs = getAllInputsFromModules(modules);\n    initBasedOnOptions();\n\n    initInputsByIdMap();\n  }\n",
        "begin_line": 345,
        "end_line": 375,
        "comment": "\n   * Initializes the instance state needed for a compile job if the sources\n   * are in modules.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hoistNoCompileFiles#1406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hoistNoCompileFiles()",
        "snippet": "  private void hoistNoCompileFiles() {\n    boolean staleInputs = false;\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n\n      // Inputs can have a null AST on a parse error.\n      if (n == null) {\n        continue;\n      }\n\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && info.isNoCompile()) {\n        input.getModule().remove(input);\n        staleInputs = true;\n      }\n    }\n\n    if (staleInputs) {\n      repartitionInputs();\n    }\n  }\n",
        "begin_line": 1406,
        "end_line": 1426,
        "comment": "\n   * Hoists inputs with the @nocompiler annotation out of the inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getErrors#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrors()",
        "snippet": "  @Override\n  public JSError[] getErrors() {\n    return toArray(CheckLevel.ERROR);\n  }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.toArray#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.toArray(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private JSError[] toArray(CheckLevel level) {\n    List<JSError> errors = new ArrayList<JSError>(messages.size());\n    for (ErrorWithLevel p : messages) {\n      if (p.level == level) {\n        errors.add(p.error);\n      }\n    }\n    return errors.toArray(new JSError[errors.size()]);\n  }\n",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.inGlobalScope#634",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.inGlobalScope()",
        "snippet": "  boolean inGlobalScope() {\n    return getScopeDepth() <= 1;\n  }\n",
        "begin_line": 634,
        "end_line": 636,
        "comment": "\n   * Determines whether the traversal is currently in the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getScopeDepth#638",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeDepth()",
        "snippet": "  int getScopeDepth() {\n    return scopes.size() + scopeRoots.size();\n  }\n",
        "begin_line": 638,
        "end_line": 640,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.add#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public void add(SourceFile file) {\n    add(new CompilerInput(file));\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": " Adds a source file input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.getIdName#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.getIdName()",
        "snippet": "  public String getIdName() {\n    return id;\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.block#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block()",
        "snippet": "  public static Node block() {\n    Node block = new Node(Token.BLOCK);\n    return block;\n  }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.block#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block(com.google.javascript.rhino.Node...)",
        "snippet": "  public static Node block(Node ... stmts) {\n    Node block = new Node(Token.BLOCK);\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatement(stmt));\n      block.addChildToBack(stmt);\n    }\n    return block;\n  }\n",
        "begin_line": 102,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.mayBeStatement#471",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.mayBeStatement(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean mayBeStatement(Node n) {\n    switch (n.getType()) {\n      case Token.EMPTY:\n      case Token.FUNCTION:\n        // EMPTY and FUNCTION are used both in expression and statement\n        // contexts\n        return true;\n\n      case Token.BLOCK:\n      case Token.BREAK:\n      case Token.CONST:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.DO:\n      case Token.EXPR_RESULT:\n      case Token.FOR:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.RETURN:\n      case Token.SWITCH:\n      case Token.THROW:\n      case Token.TRY:\n      case Token.VAR:\n      case Token.WHILE:\n      case Token.WITH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 471,
        "end_line": 501,
        "comment": "\n   * It isn't possible to always determine if a detached node is a expression,\n   * so make a best guess.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.isInitialized#745",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.ThreadTrace.isInitialized()",
        "snippet": "    boolean isInitialized() {\n      return isInitialized;\n    }\n",
        "begin_line": 745,
        "end_line": 747,
        "comment": " Is initialized? ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.currentTimeMillis#222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Anonymous-1cf840c9-8904-4bae-99a2-e7eef9173bf6.currentTimeMillis()",
        "snippet": "    @Override\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n",
        "begin_line": 222,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.Tracer#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Tracer(java.lang.String, java.lang.String)",
        "snippet": "  Tracer(@Nullable String type, @Nullable String comment) {\n    this.type = type;\n    this.comment = comment == null ? \"\" : comment;\n    startTimeMs = clock.currentTimeMillis();\n    startThread = Thread.currentThread();\n    if (!extraTracingStatistics.isEmpty()) {\n      int size = extraTracingStatistics.size();\n      extraTracingValues = new long[size];\n      int i = 0;\n      for (TracingStatistic tracingStatistic : extraTracingStatistics) {\n        extraTracingValues[i] = tracingStatistic.start(startThread);\n        i++;\n      }\n    }\n\n    ThreadTrace trace = getThreadTrace();\n\n    // Do nothing if the current thread trace wasn't initialized.\n    if (!trace.isInitialized()) {\n      return;\n    }\n\n    // Check if we are creating too many Tracers.\n    if (trace.events.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Giant thread trace. Too many Tracers created. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateEvents();\n    }\n\n    // Check if we forgot to close the Tracers.\n    if (trace.outstandingEvents.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Too many outstanding Tracers. Tracer.stop() is missing \"\n                    + \"or Tracer.stop() is not wrapped in a \"\n                    + \"try/finally block. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateOutstandingEvents();\n    }\n\n    trace.startEvent(this);\n  }\n",
        "begin_line": 235,
        "end_line": 278,
        "comment": "\n   * Create and start a tracer.\n   * Both type and comment may be null. See class comment for usage.\n   *\n   * @param type The type for totalling\n   * @param comment Comment about this tracer\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.stop#407",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop(int)",
        "snippet": "  long stop(int silence_threshold) {\n    Preconditions.checkState(Thread.currentThread() == startThread);\n\n    ThreadTrace trace = getThreadTrace();\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    stopTimeMs = clock.currentTimeMillis();\n    if (extraTracingValues != null) {\n      // We use extraTracingValues.length rather than\n      // extraTracingStatistics.size() because a new statistic may\n      // have been added\n      for (int i = 0; i < extraTracingValues.length; i++) {\n        long value = extraTracingStatistics.get(i).stop(startThread);\n        extraTracingValues[i] = value - extraTracingValues[i];\n      }\n    }\n\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    trace.endEvent(this, silence_threshold);\n    return stopTimeMs - startTimeMs;\n  }\n",
        "begin_line": 407,
        "end_line": 434,
        "comment": "\n   * Stop the trace.\n   * This may only be done once and must be done from the same thread\n   * that started it.\n   * @param silence_threshold Traces for time less than silence_threshold\n   * ms will be left out of the trace report. A value of -1 indicates\n   * that the current ThreadTrace silence_threshold should be used.\n   * @return The time that this trace actually ran\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.stop#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop()",
        "snippet": "  long stop() {\n    return stop(-1);\n  }\n",
        "begin_line": 440,
        "end_line": 442,
        "comment": " Stop the trace using the default silence_threshold\n   *\n   * @return  The time that this trace actually ran.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.getThreadTrace#958",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.getThreadTrace()",
        "snippet": "  static ThreadTrace getThreadTrace() {\n    ThreadTrace t = traces.get();\n    if (t == null) {\n      t = new ThreadTrace();\n      t.prettyPrint = defaultPrettyPrint;\n      traces.set(t);\n    }\n    return t;\n  }\n",
        "begin_line": 958,
        "end_line": 966,
        "comment": "\n   * Get the ThreadTrace for the current thread, creating one if necessary.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.JSModule#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.JSModule(java.lang.String)",
        "snippet": "  public JSModule(String name) {\n    this.name = name;\n    this.depth = -1;\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\n   * Creates an instance.\n   *\n   * @param name A unique name for the module\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.add#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  public void add(CompilerInput input) {\n    inputs.add(input);\n    input.setModule(this);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": " Adds a source code input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.getInputs#204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getInputs()",
        "snippet": "  public List<CompilerInput> getInputs() {\n    return inputs;\n  }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n   * Gets this module's list of source code inputs.\n   *\n   * @return A list that may be empty but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "DependencyOptions.needsManagement#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.needsManagement()",
        "snippet": "  boolean needsManagement() {\n    return sortDependencies || pruneDependencies;\n  }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": " Returns whether re-ordering of files is needed. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.isOn#1957",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TracerMode.isOn()",
        "snippet": "    boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 1957,
        "end_line": 1959,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getName#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return id.getIdName();\n  }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.setModule#324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "  public void setModule(JSModule module) {\n    // An input may only belong to one module.\n    Preconditions.checkArgument(\n        module == null || this.module == null || this.module == module);\n    this.module = module;\n  }\n",
        "begin_line": 324,
        "end_line": 329,
        "comment": " Sets the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initBasedOnOptions#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initBasedOnOptions()",
        "snippet": "  private void initBasedOnOptions() {\n    // Create the source map if necessary.\n    if (options.sourceMapOutputPath != null) {\n      sourceMap = options.sourceMapFormat.getInstance();\n      sourceMap.setPrefixMappings(options.sourceMapLocationMappings);\n    }\n  }\n",
        "begin_line": 380,
        "end_line": 386,
        "comment": "\n   * Do any initialization that is dependent on the compiler options.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.checkFirstModule#409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private void checkFirstModule(List<JSModule> modules) {\n    if (modules.isEmpty()) {\n      report(JSError.make(EMPTY_MODULE_LIST_ERROR));\n    } else if (modules.get(0).getInputs().isEmpty() && modules.size() > 1) {\n      // The root module may only be empty if there is exactly 1 module.\n      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));\n    }\n  }\n",
        "begin_line": 409,
        "end_line": 417,
        "comment": "\n   * Verifies that at least one module has been provided and that the first one\n   * has at least one source code input.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.fillEmptyModules#431",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (module.getInputs().isEmpty()) {\n        module.add(SourceFile.fromCode(\n            createFillFileName(module.getName()), \"\"));\n      }\n    }\n  }\n",
        "begin_line": 431,
        "end_line": 438,
        "comment": "\n   * Fill any empty modules with a place holder file. It makes any cross module\n   * motion easier.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getAllInputsFromModules#454",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    Map<String, JSModule> inputMap = Maps.newHashMap();\n    for (JSModule module : modules) {\n      for (CompilerInput input : module.getInputs()) {\n        String inputName = input.getName();\n\n        // NOTE(nicksantos): If an input is in more than one module,\n        // it will show up twice in the inputs list, and then we\n        // will get an error down the line.\n        inputs.add(input);\n        inputMap.put(inputName, module);\n      }\n    }\n    return inputs;\n  }\n",
        "begin_line": 454,
        "end_line": 470,
        "comment": "\n   * Builds a single list of all module inputs. Verifies that it contains no\n   * duplicates.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.newTracer#900",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.newTracer(java.lang.String)",
        "snippet": "  Tracer newTracer(String passName) {\n    String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (options.tracer.isOn()) {\n      tracker.recordPassStart(passName);\n    }\n    return new Tracer(\"Compiler\", comment);\n  }\n",
        "begin_line": 900,
        "end_line": 907,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.stopTracer#909",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
        "snippet": "  void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (options.tracer.isOn()) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 909,
        "end_line": 914,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hasErrors#2093",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasErrors()",
        "snippet": "  public boolean hasErrors() {\n    return hasHaltingErrors();\n  }\n",
        "begin_line": 2093,
        "end_line": 2095,
        "comment": "\n   * Consults the {@link ErrorManager} to see if we've encountered errors\n   * that should halt compilation. <p>\n   *\n   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n   * always returns {@code false} without consulting the error manager. The\n   * error manager will continue to be told about new errors and warnings, but\n   * the compiler will complete compilation of all inputs.<p>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeChangeHandler.hasCodeChanged#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.hasCodeChanged()",
        "snippet": "    boolean hasCodeChanged() {\n      return hasChanged;\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isExprResult#2240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isExprResult()",
        "snippet": "  public boolean isExprResult() {\n    return this.getType() == Token.EXPR_RESULT;\n  }\n",
        "begin_line": 2240,
        "end_line": 2242,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0293
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isAssign#2180",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isAssign()",
        "snippet": "  public boolean isAssign() {\n    return this.getType() == Token.ASSIGN;\n  }\n",
        "begin_line": 2180,
        "end_line": 2182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#367",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node child) {\n    Preconditions.checkArgument(child.parent == null,\n        \"new child has existing parent\");\n    Preconditions.checkArgument(child.next == null,\n        \"new child has existing sibling\");\n\n    type = nodeType;\n    parent = null;\n    first = last = child;\n    child.next = null;\n    child.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 367,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0289
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isCall#2196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isCall()",
        "snippet": "  public boolean isCall() {\n    return this.getType() == Token.CALL;\n  }\n",
        "begin_line": 2196,
        "end_line": 2198,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0282
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isGetProp#2264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isGetProp()",
        "snippet": "  public boolean isGetProp() {\n    return this.getType() == Token.GETPROP;\n  }\n",
        "begin_line": 2264,
        "end_line": 2266,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.028
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processBlock#496",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processBlock(com.google.javascript.rhino.head.ast.Block)",
        "snippet": "    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n",
        "begin_line": 496,
        "end_line": 499,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.028
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.annotateDispatchers#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateDispatchers(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateDispatchers(Node n, Node parent) {\n      Preconditions.checkState(n.isFunction());\n      if (parent.getJSDocInfo() != null\n          && parent.getJSDocInfo().isJavaDispatch()) {\n        if (parent.isAssign()) {\n          Preconditions.checkState(parent.getLastChild() == n);\n          n.putBooleanProp(Node.IS_DISPATCHER, true);\n        }\n      }\n    }\n",
        "begin_line": 185,
        "end_line": 194,
        "comment": "\n     * Translate dispatcher info into the property expected node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.028
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.annotateFunctions#223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateFunctions(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateFunctions(Node n, Node parent) {\n      JSDocInfo fnInfo = NodeUtil.getFunctionJSDocInfo(n);\n\n      // Compute which function parameters are optional and\n      // which are var_args.\n      Node args = n.getFirstChild().getNext();\n      for (Node arg = args.getFirstChild();\n           arg != null;\n           arg = arg.getNext()) {\n        String argName = arg.getString();\n        JSTypeExpression typeExpr = fnInfo == null ?\n            null : fnInfo.getParameterType(argName);\n\n        if (convention.isOptionalParameter(arg) ||\n            typeExpr != null && typeExpr.isOptionalArg()) {\n          arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);\n        }\n        if (convention.isVarArgsParameter(arg) ||\n            typeExpr != null && typeExpr.isVarArgs()) {\n          arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);\n        }\n      }\n    }\n",
        "begin_line": 223,
        "end_line": 245,
        "comment": "\n     * Annotate optional and var_arg function parameters.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.028
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isFunctionExpression#1905",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionExpression(Node n) {\n    return n.isFunction() && !isStatement(n);\n  }\n",
        "begin_line": 1905,
        "end_line": 1907,
        "comment": "\n   * Is a FUNCTION node an function expression? An function expression is one\n   * that has either no name or a name that is not added to the current scope.\n   *\n   * <p>Some examples of function expressions:\n   * <pre>\n   * (function () {})\n   * (function f() {})()\n   * [ function f() {} ]\n   * var f = function f() {};\n   * for (function f() {};;) {}\n   * </pre>\n   *\n   * <p>Some examples of functions that are <em>not</em> expressions:\n   * <pre>\n   * function f() {}\n   * if (x); else function f() {}\n   * for (;;) { function f() {} }\n   * </pre>\n   *\n   * @param n A node\n   * @return Whether n is an function used within an expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.028
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isStatement#1705",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatement(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatement(Node n) {\n    return isStatementParent(n.getParent());\n  }\n",
        "begin_line": 1705,
        "end_line": 1707,
        "comment": "\n   * @return Whether the node is used as a statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.028
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isBlock#2188",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isBlock()",
        "snippet": "  public boolean isBlock() {\n    return this.getType() == Token.BLOCK;\n  }\n",
        "begin_line": 2188,
        "end_line": 2190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0278
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isName#2296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isName()",
        "snippet": "  public boolean isName() {\n    return this.getType() == Token.NAME;\n  }\n",
        "begin_line": 2296,
        "end_line": 2298,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0277
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getString#216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.getString()",
        "snippet": "    @Override\n    public String getString() {\n      return this.str;\n    }\n",
        "begin_line": 216,
        "end_line": 219,
        "comment": "\n     * returns the string content.\n     * @return non null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0276
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processName#768",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.rhino.head.ast.Name)",
        "snippet": "    @Override\n    Node processName(Name nameNode) {\n      return processName(nameNode, false);\n    }\n",
        "begin_line": 768,
        "end_line": 771,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processName#773",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.rhino.head.ast.Name, boolean)",
        "snippet": "    Node processName(Name nameNode, boolean asString) {\n      if (asString) {\n        return newStringNode(Token.STRING, nameNode.getIdentifier());\n      } else {\n        if (isReservedKeyword(nameNode.getIdentifier())) {\n          errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);\n        }\n        return newStringNode(Token.NAME, nameNode.getIdentifier());\n      }\n    }\n",
        "begin_line": 773,
        "end_line": 785,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.isReservedKeyword#790",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isReservedKeyword(java.lang.String)",
        "snippet": "    private boolean isReservedKeyword(String identifier) {\n      return reservedKeywords != null && reservedKeywords.contains(identifier);\n    }\n",
        "begin_line": 790,
        "end_line": 792,
        "comment": "\n     * @return Whether the\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newStringNode#1351",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(int, java.lang.String)",
        "snippet": "  private Node newStringNode(int type, String value) {\n    return Node.newString(type, value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1351,
        "end_line": 1353,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.StringNode#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String)",
        "snippet": "    StringNode(int type, String str) {\n      super(type);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 196,
        "end_line": 202,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newString#516",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
        "snippet": "  public static Node newString(int type, String str) {\n    return new StringNode(type, str);\n  }\n",
        "begin_line": 516,
        "end_line": 518,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getParent#1323",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getParent()",
        "snippet": "  public Node getParent() {\n    return parent;\n  }\n",
        "begin_line": 1323,
        "end_line": 1325,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 1
    }
]