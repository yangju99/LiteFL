[
    {
        "name": "Frequency.addValue#108",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.addValue(java.lang.Object)",
        "snippet": "    @Deprecated\n    public void addValue(Object v) {\n    \n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n     */\n        Object obj = v;\n        if (v instanceof Integer) {\n           obj = Long.valueOf(((Integer) v).longValue());\n        }\n        try {\n            Long count = (Long) freqTable.get(obj);\n            if (count == null) {\n                freqTable.put(obj, Long.valueOf(1));\n            } else {\n                freqTable.put(obj, Long.valueOf(count.longValue() + 1));\n            }\n        } catch (ClassCastException ex) {   \n            //TreeMap will throw ClassCastException if v is not comparable\n            throw new IllegalArgumentException(\"Value not comparable to existing values.\");\n        }\n    }\n",
        "begin_line": 108,
        "end_line": 136,
        "comment": "\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n     * @throws ClassCastException if <code>v</code> is not Comparable\n     * @deprecated use {@link #addValue(Comparable)} instead\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.Frequency#57",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.Frequency()",
        "snippet": "    public Frequency() {\n        freqTable = new TreeMap();\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    }
]