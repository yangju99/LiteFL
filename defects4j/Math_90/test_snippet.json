[
    {
        "class_name": "org.apache.commons.math.stat.FrequencyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
        "signature": "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(java.lang.String)",
        "snippet": "    public FrequencyTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.FrequencyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
        "signature": "org.apache.commons.math.stat.FrequencyTest.setUp()",
        "snippet": "    @Override\n    public void setUp() {  \n        f = new Frequency();\n    }\n",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.FrequencyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
        "signature": "org.apache.commons.math.stat.FrequencyTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(FrequencyTest.class);\n        suite.setName(\"Frequency Tests\");\n        return suite;\n    }\n",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 61)",
            "(line 57,col 9)-(line 57,col 41)",
            "(line 58,col 9)-(line 58,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.FrequencyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
        "signature": "org.apache.commons.math.stat.FrequencyTest.testCounts()",
        "snippet": "    public void testCounts() {\n        assertEquals(\"total count\",0,f.getSumFreq());\n        f.addValue(oneL);\n        f.addValue(twoL);\n        f.addValue(1);\n        f.addValue(oneI);\n        assertEquals(\"one frequency count\",3,f.getCount(1));\n        assertEquals(\"two frequency count\",1,f.getCount(2));\n        assertEquals(\"three frequency count\",0,f.getCount(3));\n        assertEquals(\"total count\",4,f.getSumFreq());\n        assertEquals(\"zero cumulative frequency\", 0, f.getCumFreq(0));\n        assertEquals(\"one cumulative frequency\", 3,  f.getCumFreq(1));\n        assertEquals(\"two cumulative frequency\", 4,  f.getCumFreq(2));\n        assertEquals(\"Integer argument cum freq\",4, f.getCumFreq(Integer.valueOf(2)));\n        assertEquals(\"five cumulative frequency\", 4,  f.getCumFreq(5));\n        assertEquals(\"foo cumulative frequency\", 0,  f.getCumFreq(\"foo\"));\n        \n        f.clear();\n        assertEquals(\"total count\",0,f.getSumFreq());\n        \n        // userguide examples -------------------------------------------------------------------\n        f.addValue(\"one\");\n        f.addValue(\"One\");\n        f.addValue(\"oNe\");\n        f.addValue(\"Z\");\n        assertEquals(\"one cumulative frequency\", 1 ,  f.getCount(\"one\"));\n        assertEquals(\"Z cumulative pct\", 0.5,  f.getCumPct(\"Z\"), tolerance);\n        assertEquals(\"z cumulative pct\", 1.0,  f.getCumPct(\"z\"), tolerance);\n        assertEquals(\"Ot cumulative pct\", 0.25,  f.getCumPct(\"Ot\"), tolerance);\n        f.clear();\n        \n        f = null;\n        Frequency f = new Frequency();\n        f.addValue(1);\n        f.addValue(Integer.valueOf(1));\n        f.addValue(Long.valueOf(1));\n        f.addValue(2);\n        f.addValue(Integer.valueOf(-1));\n        assertEquals(\"1 count\", 3, f.getCount(1));\n        assertEquals(\"1 count\", 3, f.getCount(Integer.valueOf(1)));\n        assertEquals(\"0 cum pct\", 0.2, f.getCumPct(0), tolerance);\n        assertEquals(\"1 pct\", 0.6, f.getPct(Integer.valueOf(1)), tolerance);\n        assertEquals(\"-2 cum pct\", 0, f.getCumPct(-2), tolerance);\n        assertEquals(\"10 cum pct\", 1, f.getCumPct(10), tolerance);   \n        \n        f = null;\n        f = new Frequency(String.CASE_INSENSITIVE_ORDER);\n        f.addValue(\"one\");\n        f.addValue(\"One\");\n        f.addValue(\"oNe\");\n        f.addValue(\"Z\");\n        assertEquals(\"one count\", 3 ,  f.getCount(\"one\"));\n        assertEquals(\"Z cumulative pct -- case insensitive\", 1 ,  f.getCumPct(\"Z\"), tolerance);\n        assertEquals(\"z cumulative pct -- case insensitive\", 1 ,  f.getCumPct(\"z\"), tolerance);\n\n        f = null;\n        f = new Frequency();\n        assertEquals(0L, f.getCount('a'));\n        assertEquals(0L, f.getCumFreq('b'));\n        TestUtils.assertEquals(Double.NaN, f.getPct('a'), 0.0);\n        TestUtils.assertEquals(Double.NaN, f.getCumPct('b'), 0.0);\n        f.addValue('a');\n        f.addValue('b');\n        f.addValue('c');\n        f.addValue('d');\n        assertEquals(1L, f.getCount('a'));\n        assertEquals(2L, f.getCumFreq('b'));\n        assertEquals(0.25, f.getPct('a'), 0.0);\n        assertEquals(0.5, f.getCumPct('b'), 0.0);\n        assertEquals(1.0, f.getCumPct('e'), 0.0);\n    }     \n",
        "begin_line": 62,
        "end_line": 132,
        "comment": " test freq counts ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 53)",
            "(line 64,col 9)-(line 64,col 25)",
            "(line 65,col 9)-(line 65,col 25)",
            "(line 66,col 9)-(line 66,col 22)",
            "(line 67,col 9)-(line 67,col 25)",
            "(line 68,col 9)-(line 68,col 60)",
            "(line 69,col 9)-(line 69,col 60)",
            "(line 70,col 9)-(line 70,col 62)",
            "(line 71,col 9)-(line 71,col 53)",
            "(line 72,col 9)-(line 72,col 70)",
            "(line 73,col 9)-(line 73,col 70)",
            "(line 74,col 9)-(line 74,col 70)",
            "(line 75,col 9)-(line 75,col 86)",
            "(line 76,col 9)-(line 76,col 71)",
            "(line 77,col 9)-(line 77,col 74)",
            "(line 79,col 9)-(line 79,col 18)",
            "(line 80,col 9)-(line 80,col 53)",
            "(line 83,col 9)-(line 83,col 26)",
            "(line 84,col 9)-(line 84,col 26)",
            "(line 85,col 9)-(line 85,col 26)",
            "(line 86,col 9)-(line 86,col 24)",
            "(line 87,col 9)-(line 87,col 73)",
            "(line 88,col 9)-(line 88,col 76)",
            "(line 89,col 9)-(line 89,col 76)",
            "(line 90,col 9)-(line 90,col 79)",
            "(line 91,col 9)-(line 91,col 18)",
            "(line 93,col 9)-(line 93,col 17)",
            "(line 94,col 9)-(line 94,col 38)",
            "(line 95,col 9)-(line 95,col 22)",
            "(line 96,col 9)-(line 96,col 39)",
            "(line 97,col 9)-(line 97,col 36)",
            "(line 98,col 9)-(line 98,col 22)",
            "(line 99,col 9)-(line 99,col 40)",
            "(line 100,col 9)-(line 100,col 50)",
            "(line 101,col 9)-(line 101,col 67)",
            "(line 102,col 9)-(line 102,col 66)",
            "(line 103,col 9)-(line 103,col 76)",
            "(line 104,col 9)-(line 104,col 66)",
            "(line 105,col 9)-(line 105,col 66)",
            "(line 107,col 9)-(line 107,col 17)",
            "(line 108,col 9)-(line 108,col 57)",
            "(line 109,col 9)-(line 109,col 26)",
            "(line 110,col 9)-(line 110,col 26)",
            "(line 111,col 9)-(line 111,col 26)",
            "(line 112,col 9)-(line 112,col 24)",
            "(line 113,col 9)-(line 113,col 58)",
            "(line 114,col 9)-(line 114,col 95)",
            "(line 115,col 9)-(line 115,col 95)",
            "(line 117,col 9)-(line 117,col 17)",
            "(line 118,col 9)-(line 118,col 28)",
            "(line 119,col 9)-(line 119,col 42)",
            "(line 120,col 9)-(line 120,col 44)",
            "(line 121,col 9)-(line 121,col 63)",
            "(line 122,col 9)-(line 122,col 66)",
            "(line 123,col 9)-(line 123,col 24)",
            "(line 124,col 9)-(line 124,col 24)",
            "(line 125,col 9)-(line 125,col 24)",
            "(line 126,col 9)-(line 126,col 24)",
            "(line 127,col 9)-(line 127,col 42)",
            "(line 128,col 9)-(line 128,col 44)",
            "(line 129,col 9)-(line 129,col 47)",
            "(line 130,col 9)-(line 130,col 49)",
            "(line 131,col 9)-(line 131,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.FrequencyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
        "signature": "org.apache.commons.math.stat.FrequencyTest.testPcts()",
        "snippet": "    public void testPcts() {\n        f.addValue(oneL);\n        f.addValue(twoL);\n        f.addValue(oneI);\n        f.addValue(twoI);\n        f.addValue(threeL);\n        f.addValue(threeL);\n        f.addValue(3);\n        f.addValue(threeI);\n        assertEquals(\"one pct\",0.25,f.getPct(1),tolerance);\n        assertEquals(\"two pct\",0.25,f.getPct(Long.valueOf(2)),tolerance);\n        assertEquals(\"three pct\",0.5,f.getPct(threeL),tolerance);\n        assertEquals(\"five pct\",0,f.getPct(5),tolerance);\n        assertEquals(\"foo pct\",0,f.getPct(\"foo\"),tolerance);\n        assertEquals(\"one cum pct\",0.25,f.getCumPct(1),tolerance);\n        assertEquals(\"two cum pct\",0.50,f.getCumPct(Long.valueOf(2)),tolerance);\n        assertEquals(\"Integer argument\",0.50,f.getCumPct(Integer.valueOf(2)),tolerance);\n        assertEquals(\"three cum pct\",1.0,f.getCumPct(threeL),tolerance);\n        assertEquals(\"five cum pct\",1.0,f.getCumPct(5),tolerance);\n        assertEquals(\"zero cum pct\",0.0,f.getCumPct(0),tolerance);\n        assertEquals(\"foo cum pct\",0,f.getCumPct(\"foo\"),tolerance);\n    }\n",
        "begin_line": 135,
        "end_line": 156,
        "comment": " test pcts ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 25)",
            "(line 137,col 9)-(line 137,col 25)",
            "(line 138,col 9)-(line 138,col 25)",
            "(line 139,col 9)-(line 139,col 25)",
            "(line 140,col 9)-(line 140,col 27)",
            "(line 141,col 9)-(line 141,col 27)",
            "(line 142,col 9)-(line 142,col 22)",
            "(line 143,col 9)-(line 143,col 27)",
            "(line 144,col 9)-(line 144,col 59)",
            "(line 145,col 9)-(line 145,col 73)",
            "(line 146,col 9)-(line 146,col 65)",
            "(line 147,col 9)-(line 147,col 57)",
            "(line 148,col 9)-(line 148,col 60)",
            "(line 149,col 9)-(line 149,col 66)",
            "(line 150,col 9)-(line 150,col 80)",
            "(line 151,col 9)-(line 151,col 88)",
            "(line 152,col 9)-(line 152,col 72)",
            "(line 153,col 9)-(line 153,col 66)",
            "(line 154,col 9)-(line 154,col 66)",
            "(line 155,col 9)-(line 155,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.FrequencyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
        "signature": "org.apache.commons.math.stat.FrequencyTest.testAdd()",
        "snippet": "    public void testAdd() {\n        char aChar = 'a';\n        char bChar = 'b';\n        String aString = \"a\";\n        f.addValue(aChar);\n        f.addValue(bChar);\n        try {\n            f.addValue(aString);    \n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            f.addValue(2);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        assertEquals(\"a pct\",0.5,f.getPct(aChar),tolerance);\n        assertEquals(\"b cum pct\",1.0,f.getCumPct(bChar),tolerance);\n        assertEquals(\"a string pct\",0.0,f.getPct(aString),tolerance);\n        assertEquals(\"a string cum pct\",0.0,f.getCumPct(aString),tolerance);\n        \n        f = new Frequency();\n        f.addValue(\"One\");\n        try {\n            f.addValue(new Integer(\"One\")); \n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 159,
        "end_line": 190,
        "comment": " test adding incomparable values ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 25)",
            "(line 161,col 9)-(line 161,col 25)",
            "(line 162,col 9)-(line 162,col 29)",
            "(line 163,col 9)-(line 163,col 26)",
            "(line 164,col 9)-(line 164,col 26)",
            "(line 165,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 176,col 9)",
            "(line 177,col 9)-(line 177,col 60)",
            "(line 178,col 9)-(line 178,col 67)",
            "(line 179,col 9)-(line 179,col 69)",
            "(line 180,col 9)-(line 180,col 76)",
            "(line 182,col 9)-(line 182,col 28)",
            "(line 183,col 9)-(line 183,col 26)",
            "(line 184,col 9)-(line 189,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.FrequencyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
        "signature": "org.apache.commons.math.stat.FrequencyTest.testAddNonComparable()",
        "snippet": "    public void testAddNonComparable(){\n        try {\n            f.addValue(new Object()); // This was OK\n            fail(\"Expected ClassCastException\");\n        } catch (ClassCastException expected) {\n        }\n        f.clear();\n        f.addValue(1);\n        try {\n            f.addValue(new Object());\n            fail(\"Expected ClassCastException\"); // Previously would have been IllegalArgument\n        } catch (ClassCastException expected) {\n        }\n    }\n",
        "begin_line": 193,
        "end_line": 206,
        "comment": " Check what happens when non-Comparable objects are added",
        "child_ranges": [
            "(line 194,col 9)-(line 198,col 9)",
            "(line 199,col 9)-(line 199,col 18)",
            "(line 200,col 9)-(line 200,col 22)",
            "(line 201,col 9)-(line 205,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.FrequencyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
        "signature": "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()",
        "snippet": "    public void testEmptyTable() {\n        assertEquals(\"freq sum, empty table\", 0, f.getSumFreq());\n        assertEquals(\"count, empty table\", 0, f.getCount(0));\n        assertEquals(\"count, empty table\",0, f.getCount(Integer.valueOf(0)));\n        assertEquals(\"cum freq, empty table\", 0, f.getCumFreq(0));\n        assertEquals(\"cum freq, empty table\", 0, f.getCumFreq(\"x\"));\n        assertTrue(\"pct, empty table\", Double.isNaN(f.getPct(0)));\n        assertTrue(\"pct, empty table\", Double.isNaN(f.getPct(Integer.valueOf(0))));\n        assertTrue(\"cum pct, empty table\", Double.isNaN(f.getCumPct(0)));\n        assertTrue(\"cum pct, empty table\", Double.isNaN(f.getCumPct(Integer.valueOf(0))));   \n    }\n",
        "begin_line": 209,
        "end_line": 219,
        "comment": " test empty table ",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 65)",
            "(line 211,col 9)-(line 211,col 61)",
            "(line 212,col 9)-(line 212,col 77)",
            "(line 213,col 9)-(line 213,col 66)",
            "(line 214,col 9)-(line 214,col 68)",
            "(line 215,col 9)-(line 215,col 66)",
            "(line 216,col 9)-(line 216,col 83)",
            "(line 217,col 9)-(line 217,col 73)",
            "(line 218,col 9)-(line 218,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.FrequencyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
        "signature": "org.apache.commons.math.stat.FrequencyTest.testToString()",
        "snippet": "    public void testToString(){\n        f.addValue(oneL);\n        f.addValue(twoL);\n        f.addValue(oneI);\n        f.addValue(twoI);\n        \n        String s = f.toString();\n        //System.out.println(s);\n        assertNotNull(s);\n        BufferedReader reader = new BufferedReader(new StringReader(s));\n        try {\n            String line = reader.readLine(); // header line\n            assertNotNull(line);\n            \n            line = reader.readLine(); // one's or two's line\n            assertNotNull(line);\n                        \n            line = reader.readLine(); // one's or two's line\n            assertNotNull(line);\n\n            line = reader.readLine(); // no more elements\n            assertNull(line);\n        } catch(IOException ex){\n            fail(ex.getMessage());\n        }        \n    }\n",
        "begin_line": 224,
        "end_line": 249,
        "comment": "\n     * Tests toString() \n     ",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 25)",
            "(line 226,col 9)-(line 226,col 25)",
            "(line 227,col 9)-(line 227,col 25)",
            "(line 228,col 9)-(line 228,col 25)",
            "(line 230,col 9)-(line 230,col 32)",
            "(line 232,col 9)-(line 232,col 25)",
            "(line 233,col 9)-(line 233,col 72)",
            "(line 234,col 9)-(line 248,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.FrequencyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
        "signature": "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()",
        "snippet": "    public void testIntegerValues() {\n        Object obj1 = null;\n        obj1 = Integer.valueOf(1);\n        Integer int1 = Integer.valueOf(1);\n        f.addValue(obj1);\n        f.addValue(int1);\n        f.addValue(2);\n        f.addValue(Long.valueOf(2));\n        assertEquals(\"Integer 1 count\", 2, f.getCount(1));\n        assertEquals(\"Integer 1 count\", 2, f.getCount(Integer.valueOf(1)));\n        assertEquals(\"Integer 1 count\", 2, f.getCount(Long.valueOf(1)));\n        assertEquals(\"Integer 1 cumPct\", 0.5, f.getCumPct(1), tolerance);\n        assertEquals(\"Integer 1 cumPct\", 0.5, f.getCumPct(Long.valueOf(1)), tolerance);\n        assertEquals(\"Integer 1 cumPct\", 0.5, f.getCumPct(Integer.valueOf(1)), tolerance);\n        Iterator<?> it = f.valuesIterator();\n        while (it.hasNext()) {\n            assertTrue(it.next() instanceof Long);\n        }     \n    }\n",
        "begin_line": 250,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 27)",
            "(line 252,col 9)-(line 252,col 34)",
            "(line 253,col 9)-(line 253,col 42)",
            "(line 254,col 9)-(line 254,col 25)",
            "(line 255,col 9)-(line 255,col 25)",
            "(line 256,col 9)-(line 256,col 22)",
            "(line 257,col 9)-(line 257,col 36)",
            "(line 258,col 9)-(line 258,col 58)",
            "(line 259,col 9)-(line 259,col 75)",
            "(line 260,col 9)-(line 260,col 72)",
            "(line 261,col 9)-(line 261,col 73)",
            "(line 262,col 9)-(line 262,col 87)",
            "(line 263,col 9)-(line 263,col 90)",
            "(line 264,col 9)-(line 264,col 44)",
            "(line 265,col 9)-(line 267,col 9)"
        ]
    }
]