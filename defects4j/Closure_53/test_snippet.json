[
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.InlineObjectLiteralsTest()",
        "snippet": "  public InlineObjectLiteralsTest() {\n    enableNormalize();\n  }\n",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 5)-(line 27,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    super.enableLineNumberCheck(true);\n  }\n",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(final Compiler compiler) {\n    return new InlineObjectLiterals(\n        compiler,\n        compiler.getUniqueNameIdSupplier());\n  }\n",
        "begin_line": 35,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 37,col 5)-(line 39,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject0()",
        "snippet": "  public void testObject0() {\n    // Don't mess with global variables, that is the job of CollapseProperties.\n    testSame(\"var a = {x:1}; f(a.x);\");\n  }\n",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 5)-(line 46,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject1()",
        "snippet": "  public void testObject1() {\n    testLocal(\"var a = {x:x(), y:y()}; f(a.x, a.y);\",\n         \"var JSCompiler_object_inline_x_0=x();\" +\n         \"var JSCompiler_object_inline_y_1=y();\" +\n         \"f(JSCompiler_object_inline_x_0, JSCompiler_object_inline_y_1);\");\n  }\n",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 50,col 5)-(line 53,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject1a()",
        "snippet": "  public void testObject1a() {\n    testLocal(\"var a; a = {x:x, y:y}; f(a.x, a.y);\",\n         \"var JSCompiler_object_inline_x_0;\" +\n         \"var JSCompiler_object_inline_y_1;\" +\n         \"(JSCompiler_object_inline_x_0=x,\" +\n         \"JSCompiler_object_inline_y_1=y, true);\" +\n         \"f(JSCompiler_object_inline_x_0, JSCompiler_object_inline_y_1);\");\n  }\n",
        "begin_line": 56,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 62,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject2()",
        "snippet": "  public void testObject2() {\n    testLocal(\"var a = {y:y}; a.x = z; f(a.x, a.y);\",\n         \"var JSCompiler_object_inline_y_0 = y;\" +\n         \"var JSCompiler_object_inline_x_1;\" +\n         \"JSCompiler_object_inline_x_1=z;\" +\n         \"f(JSCompiler_object_inline_x_1, JSCompiler_object_inline_y_0);\");\n  }\n",
        "begin_line": 65,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 70,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject3()",
        "snippet": "  public void testObject3() {\n    // Inlining the 'y' would cause the 'this' to be different in the\n    // target function.\n    testSameLocal(\"var a = {y:y,x:x}; a.y(); f(a.x);\");\n    testSameLocal(\"var a; a = {y:y,x:x}; a.y(); f(a.x);\");\n  }\n",
        "begin_line": 73,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 55)",
            "(line 77,col 5)-(line 77,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject4()",
        "snippet": "  public void testObject4() {\n    // Object literal is escaped.\n    testSameLocal(\"var a = {y:y}; a.x = z; f(a.x, a.y); g(a);\");\n    testSameLocal(\"var a; a = {y:y}; a.x = z; f(a.x, a.y); g(a);\");\n  }\n",
        "begin_line": 80,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 82,col 64)",
            "(line 83,col 5)-(line 83,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject5()",
        "snippet": "  public void testObject5() {\n    testLocal(\"var a = {x:x, y:y}; var b = {a:a}; f(b.a.x, b.a.y);\",\n         \"var a = {x:x, y:y};\" +\n         \"var JSCompiler_object_inline_a_0=a;\" +\n         \"f(JSCompiler_object_inline_a_0.x, JSCompiler_object_inline_a_0.y);\");\n  }\n",
        "begin_line": 86,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 90,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject6()",
        "snippet": "  public void testObject6() {\n    testLocal(\"for (var i = 0; i < 5; i++) { var a = {i:i,x:x}; f(a.i, a.x); }\",\n         \"for (var i = 0; i < 5; i++) {\" +\n         \"  var JSCompiler_object_inline_i_0=i;\" +\n         \"  var JSCompiler_object_inline_x_1=x;\" +\n         \"  f(JSCompiler_object_inline_i_0,JSCompiler_object_inline_x_1)\" +\n         \"}\");\n    testLocal(\"if (c) { var a = {i:i,x:x}; f(a.i, a.x); }\",\n         \"if (c) {\" +\n         \"  var JSCompiler_object_inline_i_0=i;\" +\n         \"  var JSCompiler_object_inline_x_1=x;\" +\n         \"  f(JSCompiler_object_inline_i_0,JSCompiler_object_inline_x_1)\" +\n         \"}\");\n  }\n",
        "begin_line": 93,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 99,col 14)",
            "(line 100,col 5)-(line 105,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject7()",
        "snippet": "  public void testObject7() {\n    testLocal(\"var a = {x:x, y:f()}; g(a.x);\",\n      \"var JSCompiler_object_inline_x_0=x;\" +\n         \"var JSCompiler_object_inline_y_1=f();\" +\n         \"g(JSCompiler_object_inline_x_0)\");\n  }\n",
        "begin_line": 108,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 112,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject8()",
        "snippet": "  public void testObject8() {\n    testSameLocal(\"var a = {x:x,y:y}; var b = {x:y}; f((c?a:b).x);\");\n\n    testLocal(\"var a; if(c) { a={x:x, y:y}; } else { a={x:y}; } f(a.x);\",\n         \"var JSCompiler_object_inline_x_0;\" +\n         \"var JSCompiler_object_inline_y_1;\" +\n         \"if(c) JSCompiler_object_inline_x_0=x,\" +\n         \"      JSCompiler_object_inline_y_1=y,\" +\n         \"      true;\" +\n         \"else JSCompiler_object_inline_x_0=y,\" +\n         \"     JSCompiler_object_inline_y_1=void 0,\" +\n         \"     true;\" +\n         \"f(JSCompiler_object_inline_x_0)\");\n    testLocal(\"var a = {x:x,y:y}; var b = {x:y}; c ? f(a.x) : f(b.x);\",\n         \"var JSCompiler_object_inline_x_0 = x; \" +\n         \"var JSCompiler_object_inline_y_1 = y; \" +\n         \"var JSCompiler_object_inline_x_2 = y; \" +\n         \"c ? f(JSCompiler_object_inline_x_0):f(JSCompiler_object_inline_x_2)\");\n  }\n",
        "begin_line": 115,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 116,col 69)",
            "(line 118,col 5)-(line 127,col 44)",
            "(line 128,col 5)-(line 132,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject9()",
        "snippet": "  public void testObject9() {\n    // There is a call, so no inlining\n    testSameLocal(\"function f(a,b) {\" +\n             \"  var x = {a:a,b:b}; x.a(); return x.b;\" +\n             \"}\");\n\n    testLocal(\"function f(a,b) {\" +\n         \"  var x = {a:a,b:b}; g(x.a); x = {a:a,b:2}; return x.b;\" +\n         \"}\",\n         \"function f(a,b) {\" +\n         \"  var JSCompiler_object_inline_a_0 = a;\" +\n         \"  var JSCompiler_object_inline_b_1 = b;\" +\n         \"  g(JSCompiler_object_inline_a_0);\" +\n         \"  JSCompiler_object_inline_a_0 = a,\" +\n         \"  JSCompiler_object_inline_b_1=2,\" +\n         \"  true;\" +\n         \"  return JSCompiler_object_inline_b_1\" +\n         \"}\");\n\n    testLocal(\"function f(a,b) { \" +\n         \"  var x = {a:a,b:b}; g(x.a); x.b = x.c = 2; return x.b; \" +\n         \"}\",\n         \"function f(a,b) { \" +\n         \"  var JSCompiler_object_inline_a_0=a;\" +\n         \"  var JSCompiler_object_inline_b_1=b; \" +\n         \"  var JSCompiler_object_inline_c_2;\" +\n         \"  g(JSCompiler_object_inline_a_0);\" +\n         \"  JSCompiler_object_inline_b_1=JSCompiler_object_inline_c_2=2;\" +\n         \"  return JSCompiler_object_inline_b_1\" +\n         \"}\");\n  }\n",
        "begin_line": 135,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 139,col 18)",
            "(line 141,col 5)-(line 152,col 14)",
            "(line 154,col 5)-(line 164,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject10()",
        "snippet": "  public void testObject10() {\n    testLocal(\"var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);\",\n         \"var JSCompiler_object_inline_a_0;\" +\n         \"var JSCompiler_object_inline_b_1;\" +\n         \"var b = f();\" +\n         \"JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;\" +\n         \"if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)\");\n    testLocal(\"var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c\",\n         \"var JSCompiler_object_inline_a_0;\" +\n         \"var JSCompiler_object_inline_b_1;\" +\n         \"var JSCompiler_object_inline_c_2;\" +\n         \"var b=f();\" +\n         \"JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,\" +\n         \"  JSCompiler_object_inline_c_2=void 0,true;\" +\n         \"if(JSCompiler_object_inline_a_0) \" +\n         \"  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2\");\n    testLocal(\"var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c\",\n         \"var JSCompiler_object_inline_a_0;\" +\n         \"var JSCompiler_object_inline_b_1;\" +\n         \"var JSCompiler_object_inline_c_2;\" +\n         \"var b = f();\" +\n         \"JSCompiler_object_inline_a_0 = a,JSCompiler_object_inline_b_1 = b, \" +\n         \"  JSCompiler_object_inline_c_2=void 0,true;\" +\n         \"JSCompiler_object_inline_c_2 = c;\" +\n         \"if (JSCompiler_object_inline_a_0)\" +\n         \"  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;\");\n    testLocal(\"var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);\",\n         \"var JSCompiler_object_inline_a_0 = a;\" +\n         \"var JSCompiler_object_inline_b_1;\" +\n         \"if(b) JSCompiler_object_inline_b_1 = b,\" +\n         \"      JSCompiler_object_inline_a_0 = void 0,\" +\n         \"      true;\" +\n         \"f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)\");\n    testLocal(\"var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);\",\n         \"var JSCompiler_object_inline_a_0;\" +\n         \"var JSCompiler_object_inline_b_1;\" +\n         \"var JSCompiler_object_inline_c_2;\" +\n         \"var y=5;\" +\n         \"JSCompiler_object_inline_a_0=a,\" +\n         \"JSCompiler_object_inline_b_1=b,\" +\n         \"JSCompiler_object_inline_c_2=c,\" +\n         \"true;\" +\n         \"if (b) JSCompiler_object_inline_b_1=b,\" +\n         \"       JSCompiler_object_inline_a_0=void 0,\" +\n         \"       JSCompiler_object_inline_c_2=void 0,\" +\n         \"       true;\" +\n         \"f(JSCompiler_object_inline_a_0||JSCompiler_object_inline_b_1)\");\n  }\n",
        "begin_line": 167,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 173,col 77)",
            "(line 174,col 5)-(line 182,col 77)",
            "(line 183,col 5)-(line 192,col 78)",
            "(line 193,col 5)-(line 199,col 76)",
            "(line 200,col 5)-(line 213,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject11()",
        "snippet": "  public void testObject11() {\n    testSameLocal(\"var x = {a:b}; (x = {a:a}).c = 5; f(x.a);\");\n    testSameLocal(\"var x = {a:a}; f(x[a]); g(x[a]);\");\n  }\n",
        "begin_line": 216,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 63)",
            "(line 218,col 5)-(line 218,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject12()",
        "snippet": "  public void testObject12() {\n    testLocal(\"var a; a = {x:1, y:2}; f(a.x, a.y2);\",\n         \"var JSCompiler_object_inline_x_0;\" +\n         \"var JSCompiler_object_inline_y_1;\" +\n         \"var JSCompiler_object_inline_y2_2;\" +\n         \"JSCompiler_object_inline_x_0=1,\" +\n         \"JSCompiler_object_inline_y_1=2,\" +\n         \"JSCompiler_object_inline_y2_2=void 0,\" +\n         \"true;\" +\n         \"f(JSCompiler_object_inline_x_0, JSCompiler_object_inline_y2_2);\");\n  }\n",
        "begin_line": 221,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 230,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject13()",
        "snippet": "  public void testObject13() {\n    testSameLocal(\"var x = {a:1, b:2}; x = {a:3, b:x.a};\");\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject14()",
        "snippet": "  public void testObject14() {\n    testSameLocal(\"var x = {a:1}; if ('a' in x) { f(); }\");\n    testSameLocal(\"var x = {a:1}; for (var y in x) { f(y); }\");\n  }\n",
        "begin_line": 237,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 238,col 5)-(line 238,col 59)",
            "(line 239,col 5)-(line 239,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject15()",
        "snippet": "  public void testObject15() {\n    testSameLocal(\"x = x || {}; f(x.a);\");\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject16()",
        "snippet": "  public void testObject16() {\n    testLocal(\"function f(e) { bar(); x = {a: foo()}; var x; print(x.a); }\",\n         \"function f(e) { \" +\n         \"  var JSCompiler_object_inline_a_0;\" +\n         \"  bar();\" +\n         \"  JSCompiler_object_inline_a_0 = foo(), true;\" +\n         \"  print(JSCompiler_object_inline_a_0);\" +\n         \"}\");\n  }\n",
        "begin_line": 246,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 247,col 5)-(line 253,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject17()",
        "snippet": "  public void testObject17() {\n    // Note: Some day, with careful analysis, these two uses could be\n    // disambiguated, and the second assignment could be inlined.\n    testSameLocal(\n      \"var a = {a: function(){}};\" +\n      \"a.a();\" +\n      \"a = {a1: 100};\" +\n      \"print(a.a1);\");\n  }\n",
        "begin_line": 256,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 259,col 5)-(line 263,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject18()",
        "snippet": "  public void testObject18() {\n    testSameLocal(\"var a,b; b=a={x:x, y:y}; f(b.x);\");\n  }\n",
        "begin_line": 266,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 267,col 5)-(line 267,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject19()",
        "snippet": "  public void testObject19() {\n    testSameLocal(\"var a,b; if(c) { b=a={x:x, y:y}; } else { b=a={x:y}; } f(b.x);\");\n  }\n",
        "begin_line": 270,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 84)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject20()",
        "snippet": "  public void testObject20() {\n    testSameLocal(\"var a,b; if(c) { b=a={x:x, y:y}; } else { b=a={x:y}; } f(a.x);\");\n  }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 275,col 5)-(line 275,col 84)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject21()",
        "snippet": "  public void testObject21() {\n    testSameLocal(\"var a,b; b=a={x:x, y:y};\");\n    testSameLocal(\"var a,b; if(c) { b=a={x:x, y:y}; }\" +\n             \"else { b=a={x:y}; } f(a.x); f(b.x)\");\n    testSameLocal(\"var a, b; if(c) { if (a={x:x, y:y}) f(); } \" +\n             \"else { b=a={x:y}; } f(a.x);\");\n    testSameLocal(\"var a,b; b = (a = {x:x, y:x});\");\n    testSameLocal(\"var a,b; a = {x:x, y:x}; b = a\");\n    testSameLocal(\"var a,b; a = {x:x, y:x}; b = x || a\");\n    testSameLocal(\"var a,b; a = {x:x, y:x}; b = y && a\");\n    testSameLocal(\"var a,b; a = {x:x, y:x}; b = y ? a : a\");\n    testSameLocal(\"var a,b; a = {x:x, y:x}; b = y , a\");\n    testSameLocal(\"b = x || (a = {x:1, y:2});\");\n  }\n",
        "begin_line": 278,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 279,col 5)-(line 279,col 46)",
            "(line 280,col 5)-(line 281,col 51)",
            "(line 282,col 5)-(line 283,col 44)",
            "(line 284,col 5)-(line 284,col 52)",
            "(line 285,col 5)-(line 285,col 52)",
            "(line 286,col 5)-(line 286,col 57)",
            "(line 287,col 5)-(line 287,col 57)",
            "(line 288,col 5)-(line 288,col 60)",
            "(line 289,col 5)-(line 289,col 56)",
            "(line 290,col 5)-(line 290,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject22()",
        "snippet": "  public void testObject22() {\n    testLocal(\"while(1) { var a = {y:1}; if (b) a.x = 2; f(a.y, a.x);}\",\n      \"for(;1;){\" +\n      \" var JSCompiler_object_inline_y_0=1;\" +\n      \" var JSCompiler_object_inline_x_1;\" +\n      \" if(b) JSCompiler_object_inline_x_1=2;\" +\n      \" f(JSCompiler_object_inline_y_0,JSCompiler_object_inline_x_1)\" +\n      \"}\");\n\n    testLocal(\"var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}\",\n      \"var JSCompiler_object_inline_x_0;\" +\n      \"var JSCompiler_object_inline_y_1;\" +\n      \"for(;1;) {\" +\n      \" f(JSCompiler_object_inline_x_0,JSCompiler_object_inline_y_1);\" +\n      \" JSCompiler_object_inline_x_0=1,\" +\n      \" JSCompiler_object_inline_y_1=1,\" +\n      \" true\" +\n      \"}\");\n  }\n",
        "begin_line": 293,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 294,col 5)-(line 300,col 11)",
            "(line 302,col 5)-(line 310,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject23()",
        "snippet": "  public void testObject23() {\n    testLocal(\"function f() {\\n\" +\n         \"  var templateData = {\\n\" +\n         \"    linkIds: {\\n\" +\n         \"      CHROME: 'cl',\\n\" +\n         \"      DISMISS: 'd'\\n\" +\n         \"    }\\n\" +\n         \"  };\\n\" +\n         \"  var html = templateData.linkIds.CHROME \\n\" +\n         \"       + \\\":\\\" + templateData.linkIds.DISMISS;\\n\" +\n         \"}\",\n         \"function f(){\" +\n         \"var JSCompiler_object_inline_CHROME_1='cl';\" +\n         \"var JSCompiler_object_inline_DISMISS_2='d';\" +\n         \"var html=JSCompiler_object_inline_CHROME_1 +\" +\n         \" ':' +JSCompiler_object_inline_DISMISS_2}\");\n  }\n",
        "begin_line": 313,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 314,col 5)-(line 328,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject24()",
        "snippet": "  public void testObject24() {\n    testLocal(\"function f() {\\n\" +\n         \"  var linkIds = {\\n\" +\n         \"      CHROME: 1,\\n\" +\n         \"  };\\n\" +\n         \"  var g = function () {var o = {a: linkIds};}\\n\" +\n         \"}\",\n         \"function f(){var linkIds={CHROME:1};\" +\n         \"var g=function(){var JSCompiler_object_inline_a_0=linkIds}}\");\n  }\n",
        "begin_line": 331,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 339,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject25()",
        "snippet": "  public void testObject25() {\n    testLocal(\"var a = {x:f(), y:g()}; a = {y:g(), x:f()}; f(a.x, a.y);\",\n         \"var JSCompiler_object_inline_x_0=f();\" +\n         \"var JSCompiler_object_inline_y_1=g();\" +\n         \"JSCompiler_object_inline_y_1=g(),\" +\n         \"  JSCompiler_object_inline_x_0=f(),\" +\n         \"  true;\" +\n         \"f(JSCompiler_object_inline_x_0,JSCompiler_object_inline_y_1)\");\n  }\n",
        "begin_line": 342,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 343,col 5)-(line 349,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testObject26()",
        "snippet": "  public void testObject26() {\n    testLocal(\"var a = {}; a.b = function() {}; new a.b.c\",\n         \"var JSCompiler_object_inline_b_0;\" +\n         \"JSCompiler_object_inline_b_0=function(){};\" +\n         \"new JSCompiler_object_inline_b_0.c\");\n  }\n",
        "begin_line": 352,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 353,col 5)-(line 356,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testBug545()",
        "snippet": "  public void testBug545() {\n    testLocal(\"var a = {}\", \"\");\n    testLocal(\"var a; a = {}\", \"true\");\n  }\n",
        "begin_line": 359,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 360,col 5)-(line 360,col 32)",
            "(line 361,col 5)-(line 361,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testLocal(java.lang.String, java.lang.String)",
        "snippet": "  private void testLocal(String code, String result) {\n    test(LOCAL_PREFIX + code + LOCAL_POSTFIX,\n         LOCAL_PREFIX + result + LOCAL_POSTFIX);\n  }\n",
        "begin_line": 367,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 368,col 5)-(line 369,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiteralsTest.testSameLocal(java.lang.String)",
        "snippet": "  private void testSameLocal(String code) {\n    testLocal(code, code);\n  }\n",
        "begin_line": 372,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 373,col 5)-(line 373,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 118,
        "end_line": 124,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 119,col 5)-(line 121,col 6)",
            "(line 122,col 5)-(line 122,col 39)",
            "(line 123,col 5)-(line 123,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 147,
        "end_line": 147,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 156,
        "end_line": 171,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 52)",
            "(line 159,col 5)-(line 161,col 5)",
            "(line 165,col 5)-(line 165,col 32)",
            "(line 167,col 5)-(line 168,col 65)",
            "(line 169,col 5)-(line 169,col 55)",
            "(line 170,col 5)-(line 170,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 181,
        "end_line": 185,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 219,
        "end_line": 222,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 29)",
            "(line 221,col 5)-(line 221,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 258,
        "end_line": 261,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 28)",
            "(line 260,col 5)-(line 260,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 276,
        "end_line": 278,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 284,col 5)-(line 284,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 288,
        "end_line": 296,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 290,col 5)-(line 292,col 40)",
            "(line 294,col 5)-(line 295,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 304,
        "end_line": 306,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 305,col 5)-(line 305,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 316,
        "end_line": 318,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 317,col 5)-(line 317,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 333,col 5)-(line 333,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 346,
        "end_line": 349,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 348,col 5)-(line 348,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 362,
        "end_line": 365,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 364,col 5)-(line 364,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 381,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 384,col 5)-(line 386,col 6)",
            "(line 387,col 5)-(line 387,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 404,
        "end_line": 424,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 407,col 5)-(line 407,col 41)",
            "(line 408,col 5)-(line 408,col 28)",
            "(line 410,col 5)-(line 410,col 43)",
            "(line 412,col 5)-(line 414,col 5)",
            "(line 417,col 5)-(line 417,col 39)",
            "(line 418,col 5)-(line 419,col 58)",
            "(line 421,col 5)-(line 421,col 71)",
            "(line 423,col 5)-(line 423,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 433,col 5)-(line 433,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 444,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 445,col 5)-(line 445,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 458,
        "end_line": 461,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 460,col 5)-(line 460,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 476,
        "end_line": 487,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 478,col 5)-(line 478,col 41)",
            "(line 479,col 5)-(line 479,col 28)",
            "(line 481,col 5)-(line 481,col 56)",
            "(line 482,col 5)-(line 484,col 5)",
            "(line 485,col 5)-(line 485,col 55)",
            "(line 486,col 5)-(line 486,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 495,
        "end_line": 497,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 496,col 5)-(line 496,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 507,
        "end_line": 510,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 509,col 5)-(line 509,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 522,
        "end_line": 529,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 524,col 5)-(line 524,col 41)",
            "(line 525,col 5)-(line 525,col 28)",
            "(line 527,col 5)-(line 527,col 56)",
            "(line 528,col 5)-(line 528,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 536,
        "end_line": 538,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 537,col 5)-(line 537,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 547,
        "end_line": 549,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 548,col 5)-(line 548,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 559,
        "end_line": 565,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 560,col 5)-(line 564,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 575,
        "end_line": 577,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 576,col 5)-(line 576,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 588,
        "end_line": 595,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 590,col 5)-(line 594,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 608,
        "end_line": 614,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 610,col 5)-(line 612,col 6)",
            "(line 613,col 5)-(line 613,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 621,
        "end_line": 623,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 622,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 632,
        "end_line": 634,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 633,col 5)-(line 633,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 644,
        "end_line": 647,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 646,col 5)-(line 646,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 654,
        "end_line": 656,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 655,col 5)-(line 655,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 664,
        "end_line": 677,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 665,col 5)-(line 676,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 690,
        "end_line": 693,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 692,col 5)-(line 692,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 710,
        "end_line": 916,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 713,col 5)-(line 713,col 51)",
            "(line 714,col 5)-(line 714,col 44)",
            "(line 716,col 5)-(line 716,col 39)",
            "(line 717,col 5)-(line 718,col 66)",
            "(line 720,col 5)-(line 722,col 5)",
            "(line 723,col 5)-(line 723,col 44)",
            "(line 724,col 5)-(line 724,col 40)",
            "(line 727,col 5)-(line 727,col 38)",
            "(line 728,col 5)-(line 728,col 54)",
            "(line 729,col 5)-(line 729,col 50)",
            "(line 731,col 5)-(line 731,col 45)",
            "(line 732,col 5)-(line 732,col 68)",
            "(line 733,col 5)-(line 733,col 34)",
            "(line 734,col 5)-(line 734,col 59)",
            "(line 735,col 5)-(line 735,col 35)",
            "(line 737,col 5)-(line 738,col 39)",
            "(line 740,col 5)-(line 783,col 5)",
            "(line 785,col 5)-(line 915,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 918,
        "end_line": 922,
        "comment": "",
        "child_ranges": [
            "(line 920,col 5)-(line 920,col 57)",
            "(line 921,col 5)-(line 921,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 927,
        "end_line": 945,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 928,col 5)-(line 928,col 41)",
            "(line 929,col 5)-(line 929,col 62)",
            "(line 930,col 5)-(line 932,col 5)",
            "(line 933,col 5)-(line 933,col 55)",
            "(line 934,col 5)-(line 934,col 39)",
            "(line 935,col 5)-(line 936,col 66)",
            "(line 937,col 5)-(line 937,col 44)",
            "(line 938,col 5)-(line 938,col 42)",
            "(line 940,col 5)-(line 943,col 5)",
            "(line 944,col 5)-(line 944,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 947,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 948,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 955,
        "end_line": 961,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 47)",
            "(line 957,col 5)-(line 959,col 5)",
            "(line 960,col 5)-(line 960,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 967,
        "end_line": 973,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 47)",
            "(line 969,col 5)-(line 971,col 5)",
            "(line 972,col 5)-(line 972,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 980,
        "end_line": 987,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 981,col 5)-(line 981,col 48)",
            "(line 982,col 5)-(line 982,col 47)",
            "(line 983,col 5)-(line 985,col 5)",
            "(line 986,col 5)-(line 986,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 994,
        "end_line": 1000,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 995,col 5)-(line 995,col 47)",
            "(line 996,col 5)-(line 998,col 5)",
            "(line 999,col 5)-(line 999,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1006,
        "end_line": 1013,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1007,col 5)-(line 1007,col 53)",
            "(line 1008,col 5)-(line 1011,col 5)",
            "(line 1012,col 5)-(line 1012,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1016,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 7)-(line 1017,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1020,
        "end_line": 1021,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1023,
        "end_line": 1024,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1027,
        "end_line": 1030,
        "comment": "",
        "child_ranges": [
            "(line 1028,col 5)-(line 1028,col 39)",
            "(line 1029,col 5)-(line 1029,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1032,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1033,col 5)-(line 1033,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1037,
        "end_line": 1049,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1038,col 5)-(line 1038,col 52)",
            "(line 1039,col 5)-(line 1047,col 39)",
            "(line 1048,col 5)-(line 1048,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.InlineObjectLiteralsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-cf5a94d7-a4e6-4a3a-a2e7-f8c0ed94c0ab.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1041,
        "end_line": 1045,
        "comment": "",
        "child_ranges": [
            "(line 1042,col 13)-(line 1044,col 13)"
        ]
    }
]