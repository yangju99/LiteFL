[
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInitOutofbounds1()",
        "snippet": "    @Test(expected = NumberIsTooLargeException.class)\n    public void testInitOutofbounds1() {\n        double[] startPoint = point(DIM,3);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 47,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 43)",
            "(line 50,col 9)-(line 50,col 32)",
            "(line 51,col 9)-(line 51,col 53)",
            "(line 52,col 9)-(line 53,col 51)",
            "(line 54,col 9)-(line 56,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInitOutofbounds2()",
        "snippet": "    @Test(expected = NumberIsTooSmallException.class)\n    public void testInitOutofbounds2() {\n        double[] startPoint = point(DIM, -2);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 58,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 45)",
            "(line 61,col 9)-(line 61,col 32)",
            "(line 62,col 9)-(line 62,col 53)",
            "(line 63,col 9)-(line 64,col 51)",
            "(line 65,col 9)-(line 67,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testBoundariesDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testBoundariesDimensionMismatch() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM+1,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 70,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 45)",
            "(line 73,col 9)-(line 73,col 32)",
            "(line 74,col 9)-(line 74,col 55)",
            "(line 75,col 9)-(line 76,col 51)",
            "(line 77,col 9)-(line 79,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testUnsupportedBoundaries1()",
        "snippet": "    @Test(expected = MathUnsupportedOperationException.class)\n    public void testUnsupportedBoundaries1() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM,-1, Double.POSITIVE_INFINITY);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 82,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 45)",
            "(line 85,col 9)-(line 85,col 32)",
            "(line 86,col 9)-(line 86,col 77)",
            "(line 87,col 9)-(line 88,col 51)",
            "(line 89,col 9)-(line 91,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testUnsupportedBoundaries2()",
        "snippet": "    @Test(expected = MathUnsupportedOperationException.class)\n    public void testUnsupportedBoundaries2() {\n        double[] startPoint = point(DIM, 0.5);\n        double[] insigma = null;\n        final double[] lB = new double[] { -1, -1, -1, -1, -1, Double.NEGATIVE_INFINITY, -1, -1, -1, -1, -1, -1, -1 };\n        final double[] uB = new double[] { 2, 2, 2, Double.POSITIVE_INFINITY, 2, 2, 2, 2, 2, 2, 2, 2, 2 };\n        double[][] boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 94,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 46)",
            "(line 97,col 9)-(line 97,col 32)",
            "(line 98,col 9)-(line 98,col 118)",
            "(line 99,col 9)-(line 99,col 106)",
            "(line 100,col 9)-(line 100,col 48)",
            "(line 101,col 9)-(line 101,col 27)",
            "(line 102,col 9)-(line 102,col 27)",
            "(line 103,col 9)-(line 104,col 51)",
            "(line 105,col 9)-(line 107,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaNegative()",
        "snippet": "    @Test(expected = NotPositiveException.class)\n    public void testInputSigmaNegative() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM,-0.5);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 110,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 45)",
            "(line 113,col 9)-(line 113,col 43)",
            "(line 114,col 9)-(line 114,col 37)",
            "(line 115,col 9)-(line 116,col 51)",
            "(line 117,col 9)-(line 119,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaOutOfRange()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testInputSigmaOutOfRange() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM, 1.1);\n        double[][] boundaries = boundaries(DIM,-0.5,0.5);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 122,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 45)",
            "(line 125,col 9)-(line 125,col 43)",
            "(line 126,col 9)-(line 126,col 57)",
            "(line 127,col 9)-(line 128,col 51)",
            "(line 129,col 9)-(line 131,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testInputSigmaDimensionMismatch() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM+1,-0.5);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 134,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 45)",
            "(line 137,col 9)-(line 137,col 45)",
            "(line 138,col 9)-(line 138,col 37)",
            "(line 139,col 9)-(line 140,col 51)",
            "(line 141,col 9)-(line 143,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testRosen()",
        "snippet": "    @Test\n    @Retry(3)\n    public void testRosen() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 146,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 45)",
            "(line 150,col 9)-(line 150,col 42)",
            "(line 151,col 9)-(line 151,col 37)",
            "(line 152,col 9)-(line 153,col 51)",
            "(line 154,col 9)-(line 156,col 47)",
            "(line 157,col 9)-(line 159,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testMaximize()",
        "snippet": "    @Test\n    @Retry(3)\n    public void testMaximize() {}\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testEllipse()",
        "snippet": "    @Test\n    public void testEllipse() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Elli(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Elli(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 185,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 45)",
            "(line 188,col 9)-(line 188,col 42)",
            "(line 189,col 9)-(line 189,col 37)",
            "(line 190,col 9)-(line 191,col 51)",
            "(line 192,col 9)-(line 194,col 47)",
            "(line 195,col 9)-(line 197,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testElliRotated()",
        "snippet": "    @Test\n    public void testElliRotated() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new ElliRotated(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new ElliRotated(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 200,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 45)",
            "(line 203,col 9)-(line 203,col 42)",
            "(line 204,col 9)-(line 204,col 37)",
            "(line 205,col 9)-(line 206,col 51)",
            "(line 207,col 9)-(line 209,col 47)",
            "(line 210,col 9)-(line 212,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testCigar()",
        "snippet": "    @Test\n    public void testCigar() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 215,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 45)",
            "(line 218,col 9)-(line 218,col 42)",
            "(line 219,col 9)-(line 219,col 37)",
            "(line 220,col 9)-(line 221,col 51)",
            "(line 222,col 9)-(line 224,col 47)",
            "(line 225,col 9)-(line 227,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testTwoAxes()",
        "snippet": "    @Test\n    public void testTwoAxes() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new TwoAxes(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new TwoAxes(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-8, 1e-3, 200000, expected);\n    }\n",
        "begin_line": 230,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 45)",
            "(line 233,col 9)-(line 233,col 42)",
            "(line 234,col 9)-(line 234,col 37)",
            "(line 235,col 9)-(line 236,col 51)",
            "(line 237,col 9)-(line 239,col 47)",
            "(line 240,col 9)-(line 242,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testCigTab()",
        "snippet": "    @Test\n    public void testCigTab() {}\n",
        "begin_line": 245,
        "end_line": 246,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testSphere()",
        "snippet": "    @Test\n    public void testSphere() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Sphere(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Sphere(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 263,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 45)",
            "(line 266,col 9)-(line 266,col 42)",
            "(line 267,col 9)-(line 267,col 37)",
            "(line 268,col 9)-(line 269,col 51)",
            "(line 270,col 9)-(line 272,col 47)",
            "(line 273,col 9)-(line 275,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testTablet()",
        "snippet": "    @Test\n    public void testTablet() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Tablet(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Tablet(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 278,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 45)",
            "(line 281,col 9)-(line 281,col 42)",
            "(line 282,col 9)-(line 282,col 37)",
            "(line 283,col 9)-(line 284,col 51)",
            "(line 285,col 9)-(line 287,col 47)",
            "(line 288,col 9)-(line 290,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testDiffPow()",
        "snippet": "    @Test\n    public void testDiffPow() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new DiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, true, 0, 1e-13,\n                1e-8, 1e-1, 100000, expected);\n        doTest(new DiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, false, 0, 1e-13,\n                1e-8, 2e-1, 100000, expected);\n    }\n",
        "begin_line": 293,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 45)",
            "(line 296,col 9)-(line 296,col 42)",
            "(line 297,col 9)-(line 297,col 37)",
            "(line 298,col 9)-(line 299,col 51)",
            "(line 300,col 9)-(line 302,col 46)",
            "(line 303,col 9)-(line 305,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testSsDiffPow()",
        "snippet": "    @Test\n    public void testSsDiffPow() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new SsDiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, true, 0, 1e-13,\n                1e-4, 1e-1, 200000, expected);\n        doTest(new SsDiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, false, 0, 1e-13,\n                1e-4, 1e-1, 200000, expected);\n    }\n",
        "begin_line": 308,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 45)",
            "(line 311,col 9)-(line 311,col 42)",
            "(line 312,col 9)-(line 312,col 37)",
            "(line 313,col 9)-(line 314,col 51)",
            "(line 315,col 9)-(line 317,col 46)",
            "(line 318,col 9)-(line 320,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testAckley()",
        "snippet": "    @Test\n    public void testAckley() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,1.0);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Ackley(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-9, 1e-5, 100000, expected);\n        doTest(new Ackley(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-9, 1e-5, 100000, expected);\n    }\n",
        "begin_line": 323,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 45)",
            "(line 326,col 9)-(line 326,col 42)",
            "(line 327,col 9)-(line 327,col 37)",
            "(line 328,col 9)-(line 329,col 51)",
            "(line 330,col 9)-(line 332,col 46)",
            "(line 333,col 9)-(line 335,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testRastrigin()",
        "snippet": "    @Test\n    public void testRastrigin() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Rastrigin(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Rastrigin(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n    }\n",
        "begin_line": 338,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 340,col 9)-(line 340,col 45)",
            "(line 341,col 9)-(line 341,col 42)",
            "(line 342,col 9)-(line 342,col 37)",
            "(line 343,col 9)-(line 344,col 51)",
            "(line 345,col 9)-(line 347,col 47)",
            "(line 348,col 9)-(line 350,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testConstrainedRosen()",
        "snippet": "    @Test\n    public void testConstrainedRosen() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = boundaries(DIM,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 353,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 45)",
            "(line 356,col 9)-(line 356,col 42)",
            "(line 357,col 9)-(line 357,col 53)",
            "(line 358,col 9)-(line 359,col 51)",
            "(line 360,col 9)-(line 362,col 47)",
            "(line 363,col 9)-(line 365,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testDiagonalRosen()",
        "snippet": "    @Test\n    public void testDiagonalRosen() {}\n",
        "begin_line": 368,
        "end_line": 369,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testMath864()",
        "snippet": "    @Test\n    public void testMath864() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                @Override\n                public double value(double[] parameters) {\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 0 };\n        final double[] lower = { -1e6 };\n        final double[] upper = { 0.5 };\n        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start, lower, upper).getPoint();\n        Assert.assertTrue(\"Out of bounds (\" + result[0] + \" > \" + upper[0] + \")\",\n                          result[0] <= upper[0]);\n    }\n",
        "begin_line": 383,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 62)",
            "(line 386,col 9)-(line 393,col 14)",
            "(line 395,col 9)-(line 395,col 37)",
            "(line 396,col 9)-(line 396,col 40)",
            "(line 397,col 9)-(line 397,col 39)",
            "(line 398,col 9)-(line 399,col 83)",
            "(line 400,col 9)-(line 401,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Anonymous-b4ee8045-fffe-4dfd-bb77-27894418fdb5.value(double[])",
        "snippet": "                @Override\n                public double value(double[] parameters) {\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n",
        "begin_line": 387,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 389,col 21)-(line 389,col 44)",
            "(line 390,col 21)-(line 390,col 64)",
            "(line 391,col 21)-(line 391,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.doTest(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[], double[][], org.apache.commons.math3.optimization.GoalType, int, boolean, int, double, double, double, int, org.apache.commons.math3.optimization.PointValuePair)",
        "snippet": "    private void doTest(MultivariateFunction func,\n            double[] startPoint,\n            double[] inSigma,\n            double[][] boundaries,\n            GoalType goal,\n            int lambda,\n            boolean isActive,\n            int diagonalOnly, \n            double stopValue,\n            double fTol,\n            double pointTol,\n            int maxEvaluations,\n            PointValuePair expected) {\n        int dim = startPoint.length;\n        // test diagonalOnly = 0 - slow but normally fewer feval#\n        CMAESOptimizer optim = new CMAESOptimizer( lambda, inSigma, 30000,\n                                                   stopValue, isActive, diagonalOnly,\n                                                   0, new MersenneTwister(), false);\n        final double[] lB = boundaries == null ? null : boundaries[0];\n        final double[] uB = boundaries == null ? null : boundaries[1];\n        PointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);\n        Assert.assertEquals(expected.getValue(),\n                result.getValue(), fTol);\n        for (int i = 0; i < dim; i++) {\n            Assert.assertEquals(expected.getPoint()[i],\n                    result.getPoint()[i], pointTol);\n        }\n    }\n",
        "begin_line": 419,
        "end_line": 446,
        "comment": "\n     * @param func Function to optimize.\n     * @param startPoint Starting point.\n     * @param inSigma Individual input sigma.\n     * @param boundaries Upper / lower point limit.\n     * @param goal Minimization or maximization.\n     * @param lambda Population size used for offspring.\n     * @param isActive Covariance update mechanism.\n     * @param diagonalOnly Simplified covariance update.\n     * @param stopValue Termination criteria for optimization.\n     * @param fTol Tolerance relative error on the objective function.\n     * @param pointTol Tolerance for checking that the optimum is correct.\n     * @param maxEvaluations Maximum number of evaluations.\n     * @param expected Expected point / value.\n     ",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 36)",
            "(line 434,col 9)-(line 436,col 84)",
            "(line 437,col 9)-(line 437,col 70)",
            "(line 438,col 9)-(line 438,col 70)",
            "(line 439,col 9)-(line 439,col 95)",
            "(line 440,col 9)-(line 441,col 41)",
            "(line 442,col 9)-(line 445,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.point(int, double)",
        "snippet": "    private static double[] point(int n, double value) {\n        double[] ds = new double[n];\n        Arrays.fill(ds, value);\n        return ds;\n    }\n",
        "begin_line": 448,
        "end_line": 452,
        "comment": "",
        "child_ranges": [
            "(line 449,col 9)-(line 449,col 36)",
            "(line 450,col 9)-(line 450,col 31)",
            "(line 451,col 9)-(line 451,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.boundaries(int, double, double)",
        "snippet": "    private static double[][] boundaries(int dim,\n            double lower, double upper) {\n        double[][] boundaries = new double[2][dim];\n        for (int i = 0; i < dim; i++)\n            boundaries[0][i] = lower;\n        for (int i = 0; i < dim; i++)\n            boundaries[1][i] = upper;\n        return boundaries;\n    }\n",
        "begin_line": 454,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 456,col 9)-(line 456,col 51)",
            "(line 457,col 9)-(line 458,col 37)",
            "(line 459,col 9)-(line 460,col 37)",
            "(line 461,col 9)-(line 461,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Sphere.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 466,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 467,col 13)-(line 467,col 25)",
            "(line 468,col 13)-(line 469,col 33)",
            "(line 470,col 13)-(line 470,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Cigar.Cigar()",
        "snippet": "        Cigar() {\n            this(1e3);\n        }\n",
        "begin_line": 477,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 478,col 13)-(line 478,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Cigar.Cigar(double)",
        "snippet": "        Cigar(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 481,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 482,col 13)-(line 482,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Cigar.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = x[0] * x[0];\n            for (int i = 1; i < x.length; ++i)\n                f += factor * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 485,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 486,col 13)-(line 486,col 35)",
            "(line 487,col 13)-(line 488,col 42)",
            "(line 489,col 13)-(line 489,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Tablet.Tablet()",
        "snippet": "        Tablet() {\n            this(1e3);\n        }\n",
        "begin_line": 496,
        "end_line": 498,
        "comment": "",
        "child_ranges": [
            "(line 497,col 13)-(line 497,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Tablet.Tablet(double)",
        "snippet": "        Tablet(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 500,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 501,col 13)-(line 501,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Tablet.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = factor * x[0] * x[0];\n            for (int i = 1; i < x.length; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 504,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 505,col 13)-(line 505,col 44)",
            "(line 506,col 13)-(line 507,col 33)",
            "(line 508,col 13)-(line 508,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.CigTab.CigTab()",
        "snippet": "        CigTab() {\n            this(1e4);\n        }\n",
        "begin_line": 515,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 516,col 13)-(line 516,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.CigTab.CigTab(double)",
        "snippet": "        CigTab(double axisratio) {\n            factor = axisratio;\n        }\n",
        "begin_line": 519,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 520,col 13)-(line 520,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.CigTab.value(double[])",
        "snippet": "        public double value(double[] x) {\n            int end = x.length - 1;\n            double f = x[0] * x[0] / factor + factor * x[end] * x[end];\n            for (int i = 1; i < end; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 523,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 524,col 13)-(line 524,col 35)",
            "(line 525,col 13)-(line 525,col 71)",
            "(line 526,col 13)-(line 527,col 33)",
            "(line 528,col 13)-(line 528,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.TwoAxes.TwoAxes()",
        "snippet": "        TwoAxes() {\n            this(1e6);\n        }\n",
        "begin_line": 536,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 537,col 13)-(line 537,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.TwoAxes.TwoAxes(double)",
        "snippet": "        TwoAxes(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 540,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 541,col 13)-(line 541,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.TwoAxes.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += (i < x.length / 2 ? factor : 1) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 544,
        "end_line": 549,
        "comment": "",
        "child_ranges": [
            "(line 545,col 13)-(line 545,col 25)",
            "(line 546,col 13)-(line 547,col 67)",
            "(line 548,col 13)-(line 548,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.ElliRotated.ElliRotated()",
        "snippet": "        ElliRotated() {\n            this(1e3);\n        }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "",
        "child_ranges": [
            "(line 557,col 13)-(line 557,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.ElliRotated.ElliRotated(double)",
        "snippet": "        ElliRotated(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 560,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 561,col 13)-(line 561,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.ElliRotated.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            x = B.Rotate(x);\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 564,
        "end_line": 570,
        "comment": "",
        "child_ranges": [
            "(line 565,col 13)-(line 565,col 25)",
            "(line 566,col 13)-(line 566,col 28)",
            "(line 567,col 13)-(line 568,col 73)",
            "(line 569,col 13)-(line 569,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Elli.Elli()",
        "snippet": "        Elli() {\n            this(1e3);\n        }\n",
        "begin_line": 577,
        "end_line": 579,
        "comment": "",
        "child_ranges": [
            "(line 578,col 13)-(line 578,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Elli.Elli(double)",
        "snippet": "        Elli(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 581,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 582,col 13)-(line 582,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Elli.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 585,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 586,col 13)-(line 586,col 25)",
            "(line 587,col 13)-(line 588,col 73)",
            "(line 589,col 13)-(line 589,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.MinusElli.value(double[])",
        "snippet": "        public double value(double[] x) {\n            return 1.0-(new Elli().value(x));\n        }\n",
        "begin_line": 595,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 596,col 13)-(line 596,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.DiffPow.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i\n                        / (x.length - 1.));\n            return f;\n        }\n",
        "begin_line": 602,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 603,col 13)-(line 603,col 25)",
            "(line 604,col 13)-(line 606,col 43)",
            "(line 607,col 13)-(line 607,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.SsDiffPow.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = Math.pow(new DiffPow().value(x), 0.25);\n            return f;\n        }\n",
        "begin_line": 613,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 614,col 13)-(line 614,col 62)",
            "(line 615,col 13)-(line 615,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rosen.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length - 1; ++i)\n                f += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])\n                + (x[i] - 1.) * (x[i] - 1.);\n            return f;\n        }\n",
        "begin_line": 621,
        "end_line": 627,
        "comment": "",
        "child_ranges": [
            "(line 622,col 13)-(line 622,col 25)",
            "(line 623,col 13)-(line 625,col 44)",
            "(line 626,col 13)-(line 626,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Ackley.Ackley(double)",
        "snippet": "        Ackley(double axra) {\n            axisratio = axra;\n        }\n",
        "begin_line": 633,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 634,col 13)-(line 634,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Ackley.Ackley()",
        "snippet": "        public Ackley() {\n            this(1);\n        }\n",
        "begin_line": 637,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 638,col 13)-(line 638,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Ackley.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            double res2 = 0;\n            double fac = 0;\n            for (int i = 0; i < x.length; ++i) {\n                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));\n                f += fac * fac * x[i] * x[i];\n                res2 += Math.cos(2. * Math.PI * fac * x[i]);\n            }\n            f = (20. - 20. * Math.exp(-0.2 * Math.sqrt(f / x.length))\n                    + Math.exp(1.) - Math.exp(res2 / x.length));\n            return f;\n        }\n",
        "begin_line": 641,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 642,col 13)-(line 642,col 25)",
            "(line 643,col 13)-(line 643,col 28)",
            "(line 644,col 13)-(line 644,col 27)",
            "(line 645,col 13)-(line 649,col 13)",
            "(line 650,col 13)-(line 651,col 64)",
            "(line 652,col 13)-(line 652,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rastrigin.Rastrigin()",
        "snippet": "        Rastrigin() {\n            this(1, 10);\n        }\n",
        "begin_line": 661,
        "end_line": 663,
        "comment": "",
        "child_ranges": [
            "(line 662,col 13)-(line 662,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rastrigin.Rastrigin(double, double)",
        "snippet": "        Rastrigin(double axisratio, double amplitude) {\n            this.axisratio = axisratio;\n            this.amplitude = amplitude;\n        }\n",
        "begin_line": 665,
        "end_line": 668,
        "comment": "",
        "child_ranges": [
            "(line 666,col 13)-(line 666,col 39)",
            "(line 667,col 13)-(line 667,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rastrigin.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            double fac;\n            for (int i = 0; i < x.length; ++i) {\n                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));\n                if (i == 0 && x[i] < 0)\n                    fac *= 1.;\n                f += fac * fac * x[i] * x[i] + amplitude\n                * (1. - Math.cos(2. * Math.PI * fac * x[i]));\n            }\n            return f;\n        }\n",
        "begin_line": 670,
        "end_line": 681,
        "comment": "",
        "child_ranges": [
            "(line 671,col 13)-(line 671,col 25)",
            "(line 672,col 13)-(line 672,col 23)",
            "(line 673,col 13)-(line 679,col 13)",
            "(line 680,col 13)-(line 680,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Basis.Rotate(double[])",
        "snippet": "        double[] Rotate(double[] x) {\n            GenBasis(x.length);\n            double[] y = new double[x.length];\n            for (int i = 0; i < x.length; ++i) {\n                y[i] = 0;\n                for (int j = 0; j < x.length; ++j)\n                    y[i] += basis[i][j] * x[j];\n            }\n            return y;\n        }\n",
        "begin_line": 688,
        "end_line": 697,
        "comment": "",
        "child_ranges": [
            "(line 689,col 13)-(line 689,col 31)",
            "(line 690,col 13)-(line 690,col 46)",
            "(line 691,col 13)-(line 695,col 13)",
            "(line 696,col 13)-(line 696,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Basis.GenBasis(int)",
        "snippet": "        void GenBasis(int DIM) {\n            if (basis != null ? basis.length == DIM : false)\n                return;\n\n            double sp;\n            int i, j, k;\n\n            /* generate orthogonal basis */\n            basis = new double[DIM][DIM];\n            for (i = 0; i < DIM; ++i) {\n                /* sample components gaussian */\n                for (j = 0; j < DIM; ++j)\n                    basis[i][j] = rand.nextGaussian();\n                /* substract projection of previous vectors */\n                for (j = i - 1; j >= 0; --j) {\n                    for (sp = 0., k = 0; k < DIM; ++k)\n                        sp += basis[i][k] * basis[j][k]; /* scalar product */\n                    for (k = 0; k < DIM; ++k)\n                        basis[i][k] -= sp * basis[j][k]; /* substract */\n                }\n                /* normalize */\n                for (sp = 0., k = 0; k < DIM; ++k)\n                    sp += basis[i][k] * basis[i][k]; /* squared norm */\n                for (k = 0; k < DIM; ++k)\n                    basis[i][k] /= Math.sqrt(sp);\n            }\n        }\n",
        "begin_line": 699,
        "end_line": 725,
        "comment": "",
        "child_ranges": [
            "(line 700,col 13)-(line 701,col 23)",
            "(line 703,col 13)-(line 703,col 22)",
            "(line 704,col 13)-(line 704,col 24)",
            "(line 707,col 13)-(line 707,col 41)",
            "(line 708,col 13)-(line 724,col 13)"
        ]
    }
]