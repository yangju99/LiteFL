[
    {
        "name": "Week.Week#173",
        "is_bug": true,
        "src_path": "source/org/jfree/data/time/Week.java",
        "class_name": "org.jfree.data.time.Week",
        "signature": "org.jfree.data.time.Week.Week(java.util.Date, java.util.TimeZone)",
        "snippet": "    public Week(Date time, TimeZone zone) {\n        // defer argument checking...\n        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n    }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": "\r\n     * Creates a time period for the week in which the specified date/time\r\n     * falls, calculated relative to the specified time zone.\r\n     *\r\n     * @param time  the date/time (<code>null</code> not permitted).\r\n     * @param zone  the time zone (<code>null</code> not permitted).\r\n     *\r\n     * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Week.Week#188",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Week.java",
        "class_name": "org.jfree.data.time.Week",
        "signature": "org.jfree.data.time.Week.Week(java.util.Date, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public Week(Date time, TimeZone zone, Locale locale) {\n        if (time == null) {\n            throw new IllegalArgumentException(\"Null 'time' argument.\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        if (locale == null) {\n            throw new IllegalArgumentException(\"Null 'locale' argument.\");\n        }\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n\n        // sometimes the last few days of the year are considered to fall in\n        // the *first* week of the following year.  Refer to the Javadocs for\n        // GregorianCalendar.\n        int tempWeek = calendar.get(Calendar.WEEK_OF_YEAR);\n        if (tempWeek == 1\n                && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {\n            this.week = 1;\n            this.year = (short) (calendar.get(Calendar.YEAR) + 1);\n        }\n        else {\n            this.week = (byte) Math.min(tempWeek, LAST_WEEK_IN_YEAR);\n            int yyyy = calendar.get(Calendar.YEAR);\n            // alternatively, sometimes the first few days of the year are\n            // considered to fall in the *last* week of the previous year...\n            if (calendar.get(Calendar.MONTH) == Calendar.JANUARY\n                    && this.week >= 52) {\n                yyyy--;\n            }\n            this.year = (short) yyyy;\n        }\n        peg(calendar);\n    }\n",
        "begin_line": 188,
        "end_line": 222,
        "comment": "\r\n     * Creates a time period for the week in which the specified date/time\r\n     * falls, calculated relative to the specified time zone.\r\n     *\r\n     * @param time  the date/time (<code>null</code> not permitted).\r\n     * @param zone  the time zone (<code>null</code> not permitted).\r\n     * @param locale  the locale (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Week.getWeek#247",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Week.java",
        "class_name": "org.jfree.data.time.Week",
        "signature": "org.jfree.data.time.Week.getWeek()",
        "snippet": "    public int getWeek() {\n        return this.week;\n    }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "\r\n     * Returns the week.\r\n     *\r\n     * @return The week.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "Week.Week#127",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Week.java",
        "class_name": "org.jfree.data.time.Week",
        "signature": "org.jfree.data.time.Week.Week(int, int)",
        "snippet": "    public Week(int week, int year) {\n        if ((week < FIRST_WEEK_IN_YEAR) && (week > LAST_WEEK_IN_YEAR)) {\n            throw new IllegalArgumentException(\n                    \"The 'week' argument must be in the range 1 - 53.\");\n        }\n        this.week = (byte) week;\n        this.year = (short) year;\n        peg(Calendar.getInstance());\n    }\n",
        "begin_line": 127,
        "end_line": 135,
        "comment": "\r\n     * Creates a time period representing the week in the specified year.\r\n     *\r\n     * @param week  the week (1 to 53).\r\n     * @param year  the year (1900 to 9999).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 1
    },
    {
        "name": "Week.peg#287",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Week.java",
        "class_name": "org.jfree.data.time.Week",
        "signature": "org.jfree.data.time.Week.peg(java.util.Calendar)",
        "snippet": "    public void peg(Calendar calendar) {\n        this.firstMillisecond = getFirstMillisecond(calendar);\n        this.lastMillisecond = getLastMillisecond(calendar);\n    }\n",
        "begin_line": 287,
        "end_line": 290,
        "comment": "\r\n     * Recalculates the start date/time and end date/time for this time period\r\n     * relative to the supplied calendar (which incorporates a time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 1
    },
    {
        "name": "Week.getFirstMillisecond#379",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Week.java",
        "class_name": "org.jfree.data.time.Week",
        "signature": "org.jfree.data.time.Week.getFirstMillisecond(java.util.Calendar)",
        "snippet": "    public long getFirstMillisecond(Calendar calendar) {\n        Calendar c = (Calendar) calendar.clone();\n        c.clear();\n        c.set(Calendar.YEAR, this.year);\n        c.set(Calendar.WEEK_OF_YEAR, this.week);\n        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());\n        c.set(Calendar.HOUR, 0);\n        c.set(Calendar.MINUTE, 0);\n        c.set(Calendar.SECOND, 0);\n        c.set(Calendar.MILLISECOND, 0);\n        //return c.getTimeInMillis();  // this won't work for JDK 1.3\n        return c.getTime().getTime();\n    }\n",
        "begin_line": 379,
        "end_line": 391,
        "comment": "\r\n     * Returns the first millisecond of the week, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The first millisecond of the week.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 1
    },
    {
        "name": "Week.getLastMillisecond#404",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Week.java",
        "class_name": "org.jfree.data.time.Week",
        "signature": "org.jfree.data.time.Week.getLastMillisecond(java.util.Calendar)",
        "snippet": "    public long getLastMillisecond(Calendar calendar) {\n        Calendar c = (Calendar) calendar.clone();\n        c.clear();\n        c.set(Calendar.YEAR, this.year);\n        c.set(Calendar.WEEK_OF_YEAR, this.week + 1);\n        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());\n        c.set(Calendar.HOUR, 0);\n        c.set(Calendar.MINUTE, 0);\n        c.set(Calendar.SECOND, 0);\n        c.set(Calendar.MILLISECOND, 0);\n        //return c.getTimeInMillis();  // this won't work for JDK 1.3\n        return c.getTime().getTime() - 1;\n    }\n",
        "begin_line": 404,
        "end_line": 416,
        "comment": "\r\n     * Returns the last millisecond of the week, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The last millisecond of the week.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 1
    }
]