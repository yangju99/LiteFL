[
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(WeekTests.class);\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.WeekTests(java.lang.String)",
        "snippet": "    public WeekTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.w1Y1900 = new Week(1, 1900);\n        this.w2Y1900 = new Week(2, 1900);\n        this.w51Y9999 = new Week(51, 9999);\n        this.w52Y9999 = new Week(52, 9999);\n    }\n",
        "begin_line": 110,
        "end_line": 115,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 41)",
            "(line 112,col 9)-(line 112,col 41)",
            "(line 113,col 9)-(line 113,col 43)",
            "(line 114,col 9)-(line 114,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testEquals()",
        "snippet": "    public void testEquals() {\n        Week w1 = new Week(1, 2002);\n        Week w2 = new Week(1, 2002);\n        assertTrue(w1.equals(w2));\n        assertTrue(w2.equals(w1));\n\n        w1 = new Week(2, 2002);\n        assertFalse(w1.equals(w2));\n        w2 = new Week(2, 2002);\n        assertTrue(w1.equals(w2));\n\n        w1 = new Week(2, 2003);\n        assertFalse(w1.equals(w2));\n        w2 = new Week(2, 2003);\n        assertTrue(w1.equals(w2));\n    }\n",
        "begin_line": 120,
        "end_line": 135,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 36)",
            "(line 122,col 9)-(line 122,col 36)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 126,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 31)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 131,col 9)-(line 131,col 31)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 31)",
            "(line 134,col 9)-(line 134,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testW1Y1900Previous()",
        "snippet": "    public void testW1Y1900Previous() {\n        Week previous = (Week) this.w1Y1900.previous();\n        assertNull(previous);\n    }\n",
        "begin_line": 140,
        "end_line": 143,
        "comment": "\n     * Request the week before week 1, 1900: it should be <code>null</code>.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 55)",
            "(line 142,col 9)-(line 142,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testW1Y1900Next()",
        "snippet": "    public void testW1Y1900Next() {\n        Week next = (Week) this.w1Y1900.next();\n        assertEquals(this.w2Y1900, next);\n    }\n",
        "begin_line": 148,
        "end_line": 151,
        "comment": "\n     * Request the week after week 1, 1900: it should be week 2, 1900.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 47)",
            "(line 150,col 9)-(line 150,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testW52Y9999Previous()",
        "snippet": "    public void testW52Y9999Previous() {\n        Week previous = (Week) this.w52Y9999.previous();\n        assertEquals(this.w51Y9999, previous);\n    }\n",
        "begin_line": 156,
        "end_line": 159,
        "comment": "\n     * Request the week before w52, 9999: it should be week 51, 9999.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 56)",
            "(line 158,col 9)-(line 158,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testW52Y9999Next()",
        "snippet": "    public void testW52Y9999Next() {\n        Week next = (Week) this.w52Y9999.next();\n        assertNull(next);\n    }\n",
        "begin_line": 164,
        "end_line": 167,
        "comment": "\n     * Request the week after w52, 9999: it should be <code>null</code>.\n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 48)",
            "(line 166,col 9)-(line 166,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        Week w1 = new Week(24, 1999);\n        Week w2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(w1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            w2 = (Week) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(w1, w2);\n\n    }\n",
        "begin_line": 172,
        "end_line": 193,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 37)",
            "(line 175,col 9)-(line 175,col 23)",
            "(line 177,col 9)-(line 190,col 9)",
            "(line 191,col 9)-(line 191,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        Week w1 = new Week(2, 2003);\n        Week w2 = new Week(2, 2003);\n        assertTrue(w1.equals(w2));\n        int h1 = w1.hashCode();\n        int h2 = w2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 198,
        "end_line": 205,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode.\n     ",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 36)",
            "(line 200,col 9)-(line 200,col 36)",
            "(line 201,col 9)-(line 201,col 34)",
            "(line 202,col 9)-(line 202,col 31)",
            "(line 203,col 9)-(line 203,col 31)",
            "(line 204,col 9)-(line 204,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testNotCloneable()",
        "snippet": "    public void testNotCloneable() {\n        Week w = new Week(1, 1999);\n        assertFalse(w instanceof Cloneable);\n    }\n",
        "begin_line": 210,
        "end_line": 213,
        "comment": "\n     * The {@link Week} class is immutable, so should not be {@link Cloneable}.\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 35)",
            "(line 212,col 9)-(line 212,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testWeek12005()",
        "snippet": "    public void testWeek12005() {\n        Week w1 = new Week(1, 2005);\n        Calendar c1 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"Europe/London\"), Locale.UK);\n        c1.setMinimalDaysInFirstWeek(4);  // see Java Bug ID 4960215\n        assertEquals(1104710400000L, w1.getFirstMillisecond(c1));\n        assertEquals(1105315199999L, w1.getLastMillisecond(c1));\n        Calendar c2 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"Europe/Paris\"), Locale.FRANCE);\n        c2.setMinimalDaysInFirstWeek(4);  // see Java Bug ID 4960215\n        assertEquals(1104706800000L, w1.getFirstMillisecond(c2));\n        assertEquals(1105311599999L, w1.getLastMillisecond(c2));\n        Calendar c3 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"America/New_York\"), Locale.US);\n        assertEquals(1104037200000L, w1.getFirstMillisecond(c3));\n        assertEquals(1104641999999L, w1.getLastMillisecond(c3));\n    }\n",
        "begin_line": 235,
        "end_line": 251,
        "comment": "\n     * The first week in 2005 should span the range:\n     *\n     * TimeZone         | Start Millis  | End Millis    | Start Date  | End Date\n     * -----------------+---------------+---------------+-------------+------------\n     * Europe/London    | 1104710400000 | 1105315199999 |  3-Jan-2005 | 9-Jan-2005\n     * Europe/Paris     | 1104706800000 | 1105311599999 |  3-Jan-2005 | 2-Jan-2005\n     * America/New_York | 1104037200000 | 1104641999999 | 26-Dec-2004 | 1-Jan-2005\n     *\n     * In London and Paris, Monday is the first day of the week, while in the\n     * US it is Sunday.\n     *\n     * Previously, we were using these values, but see Java Bug ID 4960215:\n     *\n     * TimeZone         | Start Millis  | End Millis    | Start Date  | End Date\n     * -----------------+---------------+---------------+-------------+------------\n     * Europe/London    | 1104105600000 | 1104710399999 | 27-Dec-2004 | 2-Jan-2005\n     * Europe/Paris     | 1104102000000 | 1104706799999 | 27-Dec-2004 | 2-Jan-2005\n     * America/New_York | 1104037200000 | 1104641999999 | 26-Dec-2004 | 1-Jan-2005\n     ",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 36)",
            "(line 237,col 9)-(line 238,col 66)",
            "(line 239,col 9)-(line 239,col 40)",
            "(line 240,col 9)-(line 240,col 65)",
            "(line 241,col 9)-(line 241,col 64)",
            "(line 242,col 9)-(line 243,col 69)",
            "(line 244,col 9)-(line 244,col 40)",
            "(line 245,col 9)-(line 245,col 65)",
            "(line 246,col 9)-(line 246,col 64)",
            "(line 247,col 9)-(line 248,col 69)",
            "(line 249,col 9)-(line 249,col 65)",
            "(line 250,col 9)-(line 250,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testWeek532005()",
        "snippet": "    public void testWeek532005() {\n        Week w1 = new Week(53, 2004);\n        Calendar c1 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"Europe/London\"), Locale.UK);\n        c1.setMinimalDaysInFirstWeek(4);  // see Java Bug ID 4960215\n        assertEquals(1104105600000L, w1.getFirstMillisecond(c1));\n        assertEquals(1104710399999L, w1.getLastMillisecond(c1));\n        Calendar c2 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"Europe/Paris\"), Locale.FRANCE);\n        c2.setMinimalDaysInFirstWeek(4);  // see Java Bug ID 4960215\n        assertEquals(1104102000000L, w1.getFirstMillisecond(c2));\n        assertEquals(1104706799999L, w1.getLastMillisecond(c2));\n        w1 = new Week(53, 2005);\n        Calendar c3 = Calendar.getInstance(\n                TimeZone.getTimeZone(\"America/New_York\"), Locale.US);\n        assertEquals(1135486800000L, w1.getFirstMillisecond(c3));\n        assertEquals(1136091599999L, w1.getLastMillisecond(c3));\n    }\n",
        "begin_line": 270,
        "end_line": 287,
        "comment": "\n     * The 53rd week in 2004 in London and Paris should span the range:\n     *\n     * TimeZone         | Start Millis  | End Millis    | Start Date  | End Date\n     * -----------------+---------------+---------------+-------------+------------\n     * Europe/London    | 1104105600000 | 1104710399999 | 27-Dec-2004 | 02-Jan-2005\n     * Europe/Paris     | 1104102000000 | 1104706799999 | 27-Dec-2004 | 02-Jan-2005\n     *\n     * The 53rd week in 2005 in New York should span the range:\n     *\n     * TimeZone         | Start Millis  | End Millis    | Start Date  | End Date\n     * -----------------+---------------+---------------+-------------+------------\n     * America/New_York | 1135486800000 | 1136091599999 | 25-Dec-2005 | 31-Dec-2005\n     *\n     * In London and Paris, Monday is the first day of the week, while in the\n     * US it is Sunday.\n     ",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 37)",
            "(line 272,col 9)-(line 273,col 66)",
            "(line 274,col 9)-(line 274,col 40)",
            "(line 275,col 9)-(line 275,col 65)",
            "(line 276,col 9)-(line 276,col 64)",
            "(line 277,col 9)-(line 278,col 69)",
            "(line 279,col 9)-(line 279,col 40)",
            "(line 280,col 9)-(line 280,col 65)",
            "(line 281,col 9)-(line 281,col 64)",
            "(line 282,col 9)-(line 282,col 32)",
            "(line 283,col 9)-(line 284,col 69)",
            "(line 285,col 9)-(line 285,col 65)",
            "(line 286,col 9)-(line 286,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testBug1448828()",
        "snippet": "    public void testBug1448828() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        try {\n            Week w = new Week(new Date(1136109830000l),\n                    TimeZone.getTimeZone(\"GMT\"));\n            assertEquals(2005, w.getYearValue());\n            assertEquals(52, w.getWeek());\n        }\n        finally {\n            Locale.setDefault(saved);\n        }\n    }\n",
        "begin_line": 292,
        "end_line": 304,
        "comment": "\n     * A test case for bug 1448828.\n     ",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 43)",
            "(line 294,col 9)-(line 294,col 37)",
            "(line 295,col 9)-(line 303,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testBug1498805()",
        "snippet": "    public void testBug1498805() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        try {\n            TimeZone zone = TimeZone.getTimeZone(\"GMT\");\n            GregorianCalendar gc = new GregorianCalendar(zone);\n            gc.set(2005, Calendar.JANUARY, 1, 12, 0, 0);\n            Week w = new Week(gc.getTime(), zone);\n            assertEquals(53, w.getWeek());\n            assertEquals(new Year(2004), w.getYear());\n        }\n        finally {\n            Locale.setDefault(saved);\n        }\n    }\n",
        "begin_line": 309,
        "end_line": 323,
        "comment": "\n     * A test case for bug 1498805.\n     ",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 43)",
            "(line 311,col 9)-(line 311,col 37)",
            "(line 312,col 9)-(line 322,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetFirstMillisecond()",
        "snippet": "    public void testGetFirstMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Week w = new Week(3, 1970);\n        assertEquals(946800000L, w.getFirstMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }\n",
        "begin_line": 328,
        "end_line": 337,
        "comment": "\n     * Some checks for the getFirstMillisecond() method.\n     ",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 43)",
            "(line 330,col 9)-(line 330,col 37)",
            "(line 331,col 9)-(line 331,col 51)",
            "(line 332,col 9)-(line 332,col 67)",
            "(line 333,col 9)-(line 333,col 35)",
            "(line 334,col 9)-(line 334,col 58)",
            "(line 335,col 9)-(line 335,col 33)",
            "(line 336,col 9)-(line 336,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetFirstMillisecondWithTimeZone()",
        "snippet": "    public void testGetFirstMillisecondWithTimeZone() {}\n",
        "begin_line": 342,
        "end_line": 342,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetFirstMillisecondWithCalendar()",
        "snippet": "    public void testGetFirstMillisecondWithCalendar() {\n        Week w = new Week(1, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(978307200000L, w.getFirstMillisecond(calendar));\n\n        // try null calendar\n        boolean pass = false;\n        try {\n            w.getFirstMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 371,
        "end_line": 386,
        "comment": "\n     * Some checks for the getFirstMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 35)",
            "(line 373,col 9)-(line 373,col 75)",
            "(line 374,col 9)-(line 374,col 71)",
            "(line 375,col 9)-(line 375,col 69)",
            "(line 378,col 9)-(line 378,col 29)",
            "(line 379,col 9)-(line 384,col 9)",
            "(line 385,col 9)-(line 385,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetLastMillisecond()",
        "snippet": "    public void testGetLastMillisecond() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n        TimeZone savedZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Week w = new Week(31, 1970);\n        assertEquals(18485999999L, w.getLastMillisecond());\n        Locale.setDefault(saved);\n        TimeZone.setDefault(savedZone);\n    }\n",
        "begin_line": 391,
        "end_line": 400,
        "comment": "\n     * Some checks for the getLastMillisecond() method.\n     ",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 43)",
            "(line 393,col 9)-(line 393,col 37)",
            "(line 394,col 9)-(line 394,col 51)",
            "(line 395,col 9)-(line 395,col 67)",
            "(line 396,col 9)-(line 396,col 36)",
            "(line 397,col 9)-(line 397,col 59)",
            "(line 398,col 9)-(line 398,col 33)",
            "(line 399,col 9)-(line 399,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetLastMillisecondWithTimeZone()",
        "snippet": "    public void testGetLastMillisecondWithTimeZone() {}\n",
        "begin_line": 405,
        "end_line": 405,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetLastMillisecondWithCalendar()",
        "snippet": "    public void testGetLastMillisecondWithCalendar() {\n        Week w = new Week(52, 2001);\n        GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"Europe/Frankfurt\"));\n        assertEquals(1009756799999L, w.getLastMillisecond(calendar));\n\n        // try null calendar\n        boolean pass = false;\n        try {\n            w.getLastMillisecond((Calendar) null);\n        }\n        catch (NullPointerException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 434,
        "end_line": 449,
        "comment": "\n     * Some checks for the getLastMillisecond(TimeZone) method.\n     ",
        "child_ranges": [
            "(line 435,col 9)-(line 435,col 36)",
            "(line 436,col 9)-(line 436,col 75)",
            "(line 437,col 9)-(line 437,col 71)",
            "(line 438,col 9)-(line 438,col 69)",
            "(line 441,col 9)-(line 441,col 29)",
            "(line 442,col 9)-(line 447,col 9)",
            "(line 448,col 9)-(line 448,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetSerialIndex()",
        "snippet": "    public void testGetSerialIndex() {\n        Week w = new Week(1, 2000);\n        assertEquals(106001L, w.getSerialIndex());\n        w = new Week(1, 1900);\n        assertEquals(100701L, w.getSerialIndex());\n    }\n",
        "begin_line": 454,
        "end_line": 459,
        "comment": "\n     * Some checks for the getSerialIndex() method.\n     ",
        "child_ranges": [
            "(line 455,col 9)-(line 455,col 35)",
            "(line 456,col 9)-(line 456,col 50)",
            "(line 457,col 9)-(line 457,col 30)",
            "(line 458,col 9)-(line 458,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testNext()",
        "snippet": "    public void testNext() {\n        Week w = new Week(12, 2000);\n        w = (Week) w.next();\n        assertEquals(new Year(2000), w.getYear());\n        assertEquals(13, w.getWeek());\n        w = new Week(53, 9999);\n        assertNull(w.next());\n    }\n",
        "begin_line": 464,
        "end_line": 471,
        "comment": "\n     * Some checks for the testNext() method.\n     ",
        "child_ranges": [
            "(line 465,col 9)-(line 465,col 36)",
            "(line 466,col 9)-(line 466,col 28)",
            "(line 467,col 9)-(line 467,col 50)",
            "(line 468,col 9)-(line 468,col 38)",
            "(line 469,col 9)-(line 469,col 31)",
            "(line 470,col 9)-(line 470,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetStart()",
        "snippet": "    public void testGetStart() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 16, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Week w = new Week(3, 2006);\n        assertEquals(cal.getTime(), w.getStart());\n        Locale.setDefault(saved);\n    }\n",
        "begin_line": 476,
        "end_line": 485,
        "comment": "\n     * Some checks for the getStart() method.\n     ",
        "child_ranges": [
            "(line 477,col 9)-(line 477,col 43)",
            "(line 478,col 9)-(line 478,col 40)",
            "(line 479,col 9)-(line 479,col 58)",
            "(line 480,col 9)-(line 480,col 53)",
            "(line 481,col 9)-(line 481,col 41)",
            "(line 482,col 9)-(line 482,col 35)",
            "(line 483,col 9)-(line 483,col 50)",
            "(line 484,col 9)-(line 484,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testGetEnd()",
        "snippet": "    public void testGetEnd() {\n        Locale saved = Locale.getDefault();\n        Locale.setDefault(Locale.ITALY);\n        Calendar cal = Calendar.getInstance(Locale.ITALY);\n        cal.set(2006, Calendar.JANUARY, 8, 23, 59, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        Week w = new Week(1, 2006);\n        assertEquals(cal.getTime(), w.getEnd());\n        Locale.setDefault(saved);\n    }\n",
        "begin_line": 490,
        "end_line": 499,
        "comment": "\n     * Some checks for the getEnd() method.\n     ",
        "child_ranges": [
            "(line 491,col 9)-(line 491,col 43)",
            "(line 492,col 9)-(line 492,col 40)",
            "(line 493,col 9)-(line 493,col 58)",
            "(line 494,col 9)-(line 494,col 55)",
            "(line 495,col 9)-(line 495,col 43)",
            "(line 496,col 9)-(line 496,col 35)",
            "(line 497,col 9)-(line 497,col 48)",
            "(line 498,col 9)-(line 498,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.WeekTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/WeekTests.java",
        "signature": "org.jfree.data.time.junit.WeekTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        Locale savedLocale = Locale.getDefault();\n        TimeZone savedZone = TimeZone.getDefault();\n        Locale.setDefault(new Locale(\"da\", \"DK\"));\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n        GregorianCalendar cal = (GregorianCalendar) Calendar.getInstance(\n                TimeZone.getDefault(), Locale.getDefault());\n\n        // first day of week is monday\n        assertEquals(Calendar.MONDAY, cal.getFirstDayOfWeek());\n        cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date t = cal.getTime();\n        Week w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n        assertEquals(34, w.getWeek());\n\n        Locale.setDefault(Locale.US);\n        TimeZone.setDefault(TimeZone.getTimeZone(\"US/Detroit\"));\n        cal = (GregorianCalendar) Calendar.getInstance(TimeZone.getDefault());\n        // first day of week is Sunday\n        assertEquals(Calendar.SUNDAY, cal.getFirstDayOfWeek());\n        cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n\n        t = cal.getTime();\n        w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n        assertEquals(35, w.getWeek());\n        w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"),\n                new Locale(\"da\", \"DK\"));\n        assertEquals(34, w.getWeek());\n\n        Locale.setDefault(savedLocale);\n        TimeZone.setDefault(savedZone);\n    }\n",
        "begin_line": 504,
        "end_line": 537,
        "comment": "\n     * A test for a problem in constructing a new Week instance.\n     ",
        "child_ranges": [
            "(line 505,col 9)-(line 505,col 49)",
            "(line 506,col 9)-(line 506,col 51)",
            "(line 507,col 9)-(line 507,col 50)",
            "(line 508,col 9)-(line 508,col 71)",
            "(line 509,col 9)-(line 510,col 60)",
            "(line 513,col 9)-(line 513,col 63)",
            "(line 514,col 9)-(line 514,col 52)",
            "(line 515,col 9)-(line 515,col 41)",
            "(line 516,col 9)-(line 516,col 31)",
            "(line 517,col 9)-(line 517,col 72)",
            "(line 518,col 9)-(line 518,col 38)",
            "(line 520,col 9)-(line 520,col 37)",
            "(line 521,col 9)-(line 521,col 64)",
            "(line 522,col 9)-(line 522,col 78)",
            "(line 524,col 9)-(line 524,col 63)",
            "(line 525,col 9)-(line 525,col 52)",
            "(line 526,col 9)-(line 526,col 41)",
            "(line 528,col 9)-(line 528,col 26)",
            "(line 529,col 9)-(line 529,col 67)",
            "(line 530,col 9)-(line 530,col 38)",
            "(line 531,col 9)-(line 532,col 40)",
            "(line 533,col 9)-(line 533,col 38)",
            "(line 535,col 9)-(line 535,col 39)",
            "(line 536,col 9)-(line 536,col 39)"
        ]
    }
]