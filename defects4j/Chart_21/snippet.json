[
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.add#144",
        "is_bug": true,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void add(BoxAndWhiskerItem item, Comparable rowKey, \n            Comparable columnKey) {\n\n        this.data.addObject(item, rowKey, columnKey);\n        \n        // update cached min and max values\n        int r = this.data.getRowIndex(rowKey);\n        int c = this.data.getColumnIndex(columnKey);\n        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn \n                == c) || (this.minimumRangeValueRow == r \n                && this.minimumRangeValueColumn == c))  {\n            updateBounds();\n        }\n        \n            double minval = Double.NaN;\n            if (item.getMinOutlier() != null) {\n                minval = item.getMinOutlier().doubleValue();\n            }\n            double maxval = Double.NaN;\n            if (item.getMaxOutlier() != null) {\n                maxval = item.getMaxOutlier().doubleValue();\n            }\n        \n            if (Double.isNaN(this.maximumRangeValue)) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n            else if (maxval > this.maximumRangeValue) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n        \n            if (Double.isNaN(this.minimumRangeValue)) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n            else if (minval < this.minimumRangeValue) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n        \n        this.rangeBounds = new Range(this.minimumRangeValue,\n              this.maximumRangeValue);\n        fireDatasetChanged();\n\n    }\n",
        "begin_line": 144,
        "end_line": 193,
        "comment": "\r\n     * Adds a list of values relating to one Box and Whisker entity to the \r\n     * table.  The various median values are calculated.\r\n     *\r\n     * @param item  a box and whisker item (<code>null</code> not permitted).\r\n     * @param rowKey  the row key (<code>null</code> not permitted).\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     * \r\n     * @see #add(List, Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Range.equals#329",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (!(obj instanceof Range)) {\n            return false;\n        }\n        Range range = (Range) obj;\n        if (!(this.lower == range.lower)) {\n            return false;\n        }\n        if (!(this.upper == range.upper)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 329,
        "end_line": 341,
        "comment": "\r\n     * Tests this object for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object to test against (<code>null</code> permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Range.toString#364",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.toString()",
        "snippet": "    public String toString() {\n        return (\"Range[\" + this.lower + \",\" + this.upper + \"]\");\n    }\n",
        "begin_line": 364,
        "end_line": 366,
        "comment": "\r\n     * Returns a string representation of this Range.\r\n     *\r\n     * @return A String \"Range[lower,upper]\" where lower=lower range and \r\n     *         upper=upper range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.updateBounds#739",
        "is_bug": true,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.updateBounds()",
        "snippet": "    private void updateBounds() {\n        this.minimumRangeValue = Double.NaN;\n        this.maximumRangeValue = Double.NaN;\n    }\n",
        "begin_line": 739,
        "end_line": 742,
        "comment": "\r\n     * Resets the cached bounds, by iterating over the entire dataset to find\r\n     * the current bounds.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects.setObject#200",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.setObject(java.lang.Comparable, java.lang.Object)",
        "snippet": "    public void setObject(Comparable key, Object object) {\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            KeyedObject ko = (KeyedObject) this.data.get(keyIndex);\n            ko.setObject(object);\n        }\n        else {\n            KeyedObject ko = new KeyedObject(key, object);\n            this.data.add(ko);\n        }\n    }\n",
        "begin_line": 200,
        "end_line": 210,
        "comment": "\r\n     * Replaces an existing object, or adds a new object to the collection.\r\n     * This is the same as the {@link #addObject(Comparable, Object)} \r\n     * method.\r\n     *\r\n     * @param key  the key (<code>null</code> not permitted).\r\n     * @param object  the object.\r\n     * \r\n     * @see #getObject(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObject.setObject#102",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "class_name": "org.jfree.data.KeyedObject",
        "signature": "org.jfree.data.KeyedObject.setObject(java.lang.Object)",
        "snippet": "    public void setObject(Object object) {\n        this.object = object;\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\r\n     * Sets the object.\r\n     *\r\n     * @param object  the object (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "BoxAndWhiskerItem.BoxAndWhiskerItem#142",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.BoxAndWhiskerItem(double, double, double, double, double, double, double, double, java.util.List)",
        "snippet": "    public BoxAndWhiskerItem(double mean, double median, double q1, double q3,\n            double minRegularValue, double maxRegularValue, double minOutlier,\n            double maxOutlier, List outliers) {\n        \n        // pass values to other constructor\n        this(new Double(mean), new Double(median), new Double(q1), \n                new Double(q3), new Double(minRegularValue), \n                new Double(maxRegularValue), new Double(minOutlier), \n                new Double(maxOutlier), outliers);\n        \n    }\n",
        "begin_line": 142,
        "end_line": 152,
        "comment": "\r\n     * Creates a new box-and-whisker item.\r\n     * \r\n     * @param mean  the mean.\r\n     * @param median  the median\r\n     * @param q1  the first quartile.\r\n     * @param q3  the third quartile.\r\n     * @param minRegularValue  the minimum regular value.\r\n     * @param maxRegularValue  the maximum regular value.\r\n     * @param minOutlier  the minimum outlier value.\r\n     * @param maxOutlier  the maximum outlier value.\r\n     * @param outliers  a list of the outliers.\r\n     * \r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects2D.setObject#260",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.setObject(java.lang.Object, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void setObject(Object object, Comparable rowKey, \n            Comparable columnKey) {\n\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        KeyedObjects row;\n        int rowIndex = this.rowKeys.indexOf(rowKey);\n        if (rowIndex >= 0) {\n            row = (KeyedObjects) this.rows.get(rowIndex);\n        }\n        else {\n            this.rowKeys.add(rowKey);\n            row = new KeyedObjects();\n            this.rows.add(row);\n        }\n        row.setObject(columnKey, object);\n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n\n    }\n",
        "begin_line": 260,
        "end_line": 285,
        "comment": "\r\n     * Adds or updates an object.\r\n     *\r\n     * @param object  the object.\r\n     * @param rowKey  the row key (<code>null</code> not permitted).\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.getRangeBounds#531",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRangeBounds(boolean)",
        "snippet": "    public Range getRangeBounds(boolean includeInterval) {\n        return this.rangeBounds;\n    }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "\r\n     * Returns the range of the values in this dataset's range.\r\n     *\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *                         y-interval is taken into account.\r\n     * \r\n     * @return The range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects.getIndex#127",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.getIndex(java.lang.Comparable)",
        "snippet": "    public int getIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        int i = 0;\n        Iterator iterator = this.data.iterator();\n        while (iterator.hasNext()) {\n            KeyedObject ko = (KeyedObject) iterator.next();\n            if (ko.getKey().equals(key)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n",
        "begin_line": 127,
        "end_line": 141,
        "comment": "\r\n     * Returns the index for a given key, or <code>-1</code>.\r\n     *\r\n     * @param key  the key (<code>null</code> not permitted).\r\n     *\r\n     * @return The index, or <code>-1</code> if the key is unrecognised.\r\n     * \r\n     * @see #getKey(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObject.getKey#84",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "class_name": "org.jfree.data.KeyedObject",
        "signature": "org.jfree.data.KeyedObject.getKey()",
        "snippet": "    public Comparable getKey() {\n        return this.key;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\r\n     * Returns the key.\r\n     *\r\n     * @return The key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "BoxAndWhiskerItem.BoxAndWhiskerItem#105",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.BoxAndWhiskerItem(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.util.List)",
        "snippet": "    public BoxAndWhiskerItem(Number mean,\n                             Number median,\n                             Number q1,\n                             Number q3,\n                             Number minRegularValue,\n                             Number maxRegularValue,\n                             Number minOutlier,\n                             Number maxOutlier,\n                             List outliers) {\n                                 \n        this.mean = mean;\n        this.median = median;    \n        this.q1 = q1;\n        this.q3 = q3;\n        this.minRegularValue = minRegularValue;\n        this.maxRegularValue = maxRegularValue;\n        this.minOutlier = minOutlier;\n        this.maxOutlier = maxOutlier;\n        this.outliers = outliers;\n        \n    }\n",
        "begin_line": 105,
        "end_line": 125,
        "comment": "\r\n     * Creates a new box-and-whisker item.\r\n     * \r\n     * @param mean  the mean (<code>null</code> permitted).\r\n     * @param median  the median (<code>null</code> permitted).\r\n     * @param q1  the first quartile (<code>null</code> permitted).\r\n     * @param q3  the third quartile (<code>null</code> permitted).\r\n     * @param minRegularValue  the minimum regular value (<code>null</code> \r\n     *                         permitted).\r\n     * @param maxRegularValue  the maximum regular value (<code>null</code> \r\n     *                         permitted).\r\n     * @param minOutlier  the minimum outlier (<code>null</code> permitted).\r\n     * @param maxOutlier  the maximum outlier (<code>null</code> permitted).\r\n     * @param outliers  the outliers (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "BoxAndWhiskerItem.getMinOutlier#213",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.getMinOutlier()",
        "snippet": "    public Number getMinOutlier() {\n        return this.minOutlier;\n    }\n",
        "begin_line": 213,
        "end_line": 215,
        "comment": "\r\n     * Returns the minimum outlier.\r\n     * \r\n     * @return The minimum outlier (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "BoxAndWhiskerItem.getMaxOutlier#222",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.getMaxOutlier()",
        "snippet": "    public Number getMaxOutlier() {\n        return this.maxOutlier;\n    }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "\r\n     * Returns the maximum outlier.\r\n     * \r\n     * @return The maximum outlier (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects2D.getRowIndex#149",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getRowIndex(java.lang.Comparable)",
        "snippet": "    public int getRowIndex(Comparable key) {\n        return this.rowKeys.indexOf(key);\n    }\n",
        "begin_line": 149,
        "end_line": 151,
        "comment": "\r\n     * Returns the row index for a given key.\r\n     *\r\n     * @param key  the key.\r\n     *\r\n     * @return The row index.\r\n     * \r\n     * @see #getRowKey(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects2D.getColumnIndex#186",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getColumnIndex(java.lang.Comparable)",
        "snippet": "    public int getColumnIndex(Comparable key) {\n        return this.columnKeys.indexOf(key);\n    }\n",
        "begin_line": 186,
        "end_line": 188,
        "comment": "\r\n     * Returns the column index for a given key.\r\n     *\r\n     * @param key  the key.\r\n     *\r\n     * @return The column index.\r\n     * \r\n     * @see #getColumnKey(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects2D.addObject#248",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.addObject(java.lang.Object, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addObject(Object object, Comparable rowKey, \n            Comparable columnKey) {\n        setObject(object, rowKey, columnKey);\n    }\n",
        "begin_line": 248,
        "end_line": 251,
        "comment": "\r\n     * Adds an object to the table.  Performs the same function as setObject().\r\n     *\r\n     * @param object  the object.\r\n     * @param rowKey  the row key (<code>null</code> not permitted).\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects.KeyedObjects#67",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.KeyedObjects()",
        "snippet": "    public KeyedObjects() {\n        this.data = new java.util.ArrayList();\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\r\n     * Creates a new collection (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObject.KeyedObject#74",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "class_name": "org.jfree.data.KeyedObject",
        "signature": "org.jfree.data.KeyedObject.KeyedObject(java.lang.Comparable, java.lang.Object)",
        "snippet": "    public KeyedObject(Comparable key, Object object) {\n        this.key = key;\n        this.object = object;\n    }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "\r\n     * Creates a new (key, object) pair.\r\n     *\r\n     * @param key  the key.\r\n     * @param object  the object (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.DefaultBoxAndWhiskerCategoryDataset#106",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.DefaultBoxAndWhiskerCategoryDataset()",
        "snippet": "    public DefaultBoxAndWhiskerCategoryDataset() {\n        this.data = new KeyedObjects2D();\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.rangeBounds = new Range(0.0, 0.0);\n    }\n",
        "begin_line": 106,
        "end_line": 115,
        "comment": "\r\n     * Creates a new dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetChangeEvent.DatasetChangeEvent#72",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetChangeEvent.java",
        "class_name": "org.jfree.data.general.DatasetChangeEvent",
        "signature": "org.jfree.data.general.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset)",
        "snippet": "    public DatasetChangeEvent(Object source, Dataset dataset) {\n        super(source);\n        this.dataset = dataset;\n    }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "\r\n     * Constructs a new event.  The source is either the dataset or the \r\n     * {@link org.jfree.chart.plot.Plot} class.  The dataset can be \r\n     * <code>null</code> (in this case the source will be the \r\n     * {@link org.jfree.chart.plot.Plot} class).\r\n     *\r\n     * @param source  the source of the event.\r\n     * @param dataset  the dataset that generated the event (<code>null</code>\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.fireDatasetChanged#171",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.fireDatasetChanged()",
        "snippet": "    protected void fireDatasetChanged() {\n        notifyListeners(new DatasetChangeEvent(this, this));\n    }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     * \r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.notifyListeners#184",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.notifyListeners(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    protected void notifyListeners(DatasetChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == DatasetChangeListener.class) {\n                ((DatasetChangeListener) listeners[i + 1]).datasetChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 184,
        "end_line": 194,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     *\r\n     * @param event  contains information about the event that triggered the \r\n     *               notification.\r\n     *               \r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     * @see #removeChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects2D.KeyedObjects2D#74",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.KeyedObjects2D()",
        "snippet": "    public KeyedObjects2D() {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n    }\n",
        "begin_line": 74,
        "end_line": 78,
        "comment": "\r\n     * Creates a new instance (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetGroup.DatasetGroup#64",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "class_name": "org.jfree.data.general.DatasetGroup",
        "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup()",
        "snippet": "    public DatasetGroup() {\n        super();\n        this.id = \"NOID\";\n    }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "\r\n     * Constructs a new group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.AbstractDataset#96",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset()",
        "snippet": "    protected AbstractDataset() {\n        this.group = new DatasetGroup();\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 96,
        "end_line": 99,
        "comment": "\r\n     * Constructs a dataset. By default, the dataset is assigned to its own \r\n     * group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Range.Range#85",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.Range(double, double)",
        "snippet": "    public Range(double lower, double upper) {\n        if (lower > upper) {\n            String msg = \"Range(double, double): require lower (\" + lower \n                + \") <= upper (\" + upper + \").\";\n            throw new IllegalArgumentException(msg);\n        }\n        this.lower = lower;\n        this.upper = upper;\n    }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "\r\n     * Creates a new range.\r\n     *\r\n     * @param lower  the lower bound (must be <= upper bound).\r\n     * @param upper  the upper bound (must be >= lower bound).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    }
]