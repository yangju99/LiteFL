[
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultBoxAndWhiskerCategoryDatasetTests.class);\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 77)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.DefaultBoxAndWhiskerCategoryDatasetTests(java.lang.String)",
        "snippet": "    public DefaultBoxAndWhiskerCategoryDatasetTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                new Double(3.0), new Double(4.0), new Double(5.0), \n                new Double(6.0), new Double(7.0), new Double(8.0), \n                new ArrayList()), \"ROW1\", \"COLUMN1\");\n        DefaultBoxAndWhiskerCategoryDataset d2 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d2.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                new Double(3.0), new Double(4.0), new Double(5.0), \n                new Double(6.0), new Double(7.0), new Double(8.0),\n                new ArrayList()), \"ROW1\", \"COLUMN1\");\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n    }\n",
        "begin_line": 89,
        "end_line": 104,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 91,col 60)",
            "(line 92,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 97,col 60)",
            "(line 98,col 9)-(line 101,col 53)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                new Double(3.0), new Double(4.0), new Double(5.0), \n                new Double(6.0), new Double(7.0), new Double(8.0),\n                new ArrayList()), \"ROW1\", \"COLUMN1\");\n        DefaultBoxAndWhiskerCategoryDataset d2 = null;\n        \n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            d2 = (DefaultBoxAndWhiskerCategoryDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n    }\n",
        "begin_line": 109,
        "end_line": 135,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 112,col 60)",
            "(line 113,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 54)",
            "(line 119,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                new Double(3.0), new Double(4.0), new Double(5.0), \n                new Double(6.0), new Double(7.0), new Double(8.0),\n                new ArrayList()), \"ROW1\", \"COLUMN1\");\n        DefaultBoxAndWhiskerCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultBoxAndWhiskerCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // test independence\n        d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                new Double(3.0), new Double(4.0), new Double(5.0), \n                new Double(6.0), new Double(7.0), new Double(8.0),\n                new ArrayList()), \"ROW2\", \"COLUMN1\");\n        assertFalse(d1.equals(d2));\n    }\n",
        "begin_line": 140,
        "end_line": 164,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 142,col 60)",
            "(line 143,col 9)-(line 146,col 53)",
            "(line 147,col 9)-(line 147,col 54)",
            "(line 148,col 9)-(line 153,col 9)",
            "(line 154,col 9)-(line 154,col 29)",
            "(line 155,col 9)-(line 155,col 51)",
            "(line 156,col 9)-(line 156,col 34)",
            "(line 159,col 9)-(line 162,col 53)",
            "(line 163,col 9)-(line 163,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.test1701822()",
        "snippet": "    public void test1701822() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        try {\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                    new Double(3.0), new Double(4.0), new Double(5.0), \n                    new Double(6.0), null, new Double(8.0),\n                    new ArrayList()), \"ROW1\", \"COLUMN1\");\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), \n                    new Double(3.0), new Double(4.0), new Double(5.0), \n                    new Double(6.0), new Double(7.0), null,\n                    new ArrayList()), \"ROW1\", \"COLUMN2\");\n        }\n        catch (NullPointerException e) {\n            assertTrue(false);\n        }\n        \n    }\n",
        "begin_line": 169,
        "end_line": 186,
        "comment": "\n     * A simple test for bug report 1701822.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 171,col 60)",
            "(line 172,col 9)-(line 184,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testAdd()",
        "snippet": "    public void testAdd() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, \n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(item1, \"R1\", \"C1\");\n       \n        assertEquals(2.0, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.0, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(2.0, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(3.0, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(4.0, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(5.0, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(6.0, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.0, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(8.0, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(new Range(7.0, 8.0), dataset.getRangeBounds(false));\n    }\n",
        "begin_line": 193,
        "end_line": 218,
        "comment": "\n     * Some checks for the add() method.\n     ",
        "child_ranges": [
            "(line 194,col 9)-(line 195,col 60)",
            "(line 196,col 9)-(line 197,col 53)",
            "(line 198,col 9)-(line 198,col 39)",
            "(line 200,col 9)-(line 200,col 79)",
            "(line 201,col 9)-(line 202,col 25)",
            "(line 203,col 9)-(line 204,col 25)",
            "(line 205,col 9)-(line 206,col 25)",
            "(line 207,col 9)-(line 208,col 25)",
            "(line 209,col 9)-(line 210,col 25)",
            "(line 211,col 9)-(line 212,col 25)",
            "(line 213,col 9)-(line 214,col 25)",
            "(line 215,col 9)-(line 216,col 25)",
            "(line 217,col 9)-(line 217,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testAddUpdatesCachedRange()",
        "snippet": "    public void testAddUpdatesCachedRange() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, \n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(item1, \"R1\", \"C1\");\n       \n        // now overwrite this item with another\n        BoxAndWhiskerItem item2 = new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, \n                5.5, 6.5, 7.5, 8.5, new ArrayList());\n        dataset.add(item2, \"R1\", \"C1\");\n\n        assertEquals(2.5, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.5, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(2.5, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(3.5, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(4.5, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(5.5, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(6.5, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.5, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(8.5, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(), \n                EPSILON);\n        assertEquals(new Range(7.5, 8.5), dataset.getRangeBounds(false));\n    }\n",
        "begin_line": 223,
        "end_line": 253,
        "comment": "\n     * Some checks for the add() method.\n     ",
        "child_ranges": [
            "(line 224,col 9)-(line 225,col 60)",
            "(line 226,col 9)-(line 227,col 53)",
            "(line 228,col 9)-(line 228,col 39)",
            "(line 231,col 9)-(line 232,col 53)",
            "(line 233,col 9)-(line 233,col 39)",
            "(line 235,col 9)-(line 235,col 79)",
            "(line 236,col 9)-(line 237,col 25)",
            "(line 238,col 9)-(line 239,col 25)",
            "(line 240,col 9)-(line 241,col 25)",
            "(line 242,col 9)-(line 243,col 25)",
            "(line 244,col 9)-(line 245,col 25)",
            "(line 246,col 9)-(line 247,col 25)",
            "(line 248,col 9)-(line 249,col 25)",
            "(line 250,col 9)-(line 251,col 25)",
            "(line 252,col 9)-(line 252,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        assertEquals(0, dataset.getColumnCount());\n        assertEquals(0, dataset.getRowCount());\n        assertTrue(Double.isNaN(dataset.getRangeLowerBound(false)));\n        assertTrue(Double.isNaN(dataset.getRangeUpperBound(false)));\n    }\n",
        "begin_line": 258,
        "end_line": 265,
        "comment": "\n     * Some basic checks for the constructor.\n     ",
        "child_ranges": [
            "(line 259,col 9)-(line 260,col 60)",
            "(line 261,col 9)-(line 261,col 50)",
            "(line 262,col 9)-(line 262,col 47)",
            "(line 263,col 9)-(line 263,col 68)",
            "(line 264,col 9)-(line 264,col 68)"
        ]
    },
    {
        "class_name": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
        "signature": "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testGetRangeBounds()",
        "snippet": "    public void testGetRangeBounds() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));\n    }\n",
        "begin_line": 270,
        "end_line": 294,
        "comment": "\n     * Some checks for the getRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 271,col 9)-(line 272,col 60)",
            "(line 273,col 9)-(line 274,col 46)",
            "(line 275,col 9)-(line 275,col 68)",
            "(line 276,col 9)-(line 276,col 67)",
            "(line 278,col 9)-(line 279,col 46)",
            "(line 280,col 9)-(line 280,col 68)",
            "(line 281,col 9)-(line 281,col 67)",
            "(line 283,col 9)-(line 284,col 46)",
            "(line 285,col 9)-(line 285,col 68)",
            "(line 286,col 9)-(line 286,col 67)",
            "(line 290,col 9)-(line 291,col 46)",
            "(line 292,col 9)-(line 292,col 68)",
            "(line 293,col 9)-(line 293,col 67)"
        ]
    }
]