[
    {
        "name": "BisectionSolver.solve#70",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
        "class_name": "org.apache.commons.math.analysis.solvers.BisectionSolver",
        "signature": "org.apache.commons.math.analysis.solvers.BisectionSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double)",
        "snippet": "    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        return solve(min, max);\n    }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl": null,
            "org.apache.commons.math.ConvergingAlgorithmImpl": null,
            "org.apache.commons.math.analysis.solvers.UnivariateRealSolver": "\n     * Solve for a zero in the given interval, start at startValue.\n     * <p>A solver may require that the interval brackets a single zero root.\n     * Solvers that do require bracketing should be able to handle the case\n     * where one of the endpoints is itself a root.</p>\n     *\n     * @param f the function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param startValue the start value to use\n     * @return a value where the function is zero\n     * @throws ConvergenceException if the maximum iteration count is exceeded\n     * or the solver detects convergence problems otherwise.\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if min > max or the arguments do not\n     * satisfy the requirements specified by the solver\n     * @since 2.0\n     ",
            "org.apache.commons.math.ConvergingAlgorithm": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "BisectionSolver.solve#63",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
        "class_name": "org.apache.commons.math.analysis.solvers.BisectionSolver",
        "signature": "org.apache.commons.math.analysis.solvers.BisectionSolver.solve(double, double)",
        "snippet": "    @Deprecated\n    public double solve(double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        return solve(f, min, max);\n    }\n",
        "begin_line": 63,
        "end_line": 67,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl": null,
            "org.apache.commons.math.ConvergingAlgorithmImpl": null,
            "org.apache.commons.math.analysis.solvers.UnivariateRealSolver": "\n     * Solve for a zero root in the given interval.\n     * <p>A solver may require that the interval brackets a single zero root.\n     * Solvers that do require bracketing should be able to handle the case\n     * where one of the endpoints is itself a root.</p>\n     *\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return a value where the function is zero\n     * @throws ConvergenceException if the maximum iteration count is exceeded\n     * or the solver detects convergence problems otherwise.\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if min > max or the endpoints do not\n     * satisfy the requirements specified by the solver\n     * @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double)}\n     * since 2.0\n     ",
            "org.apache.commons.math.ConvergingAlgorithm": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnivariateRealSolverUtils.midpoint#222",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java",
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(double, double)",
        "snippet": "    public static double midpoint(double a, double b) {\n        return (a + b) * .5;\n    }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "\n     * Compute the midpoint of two values.\n     *\n     * @param a first value.\n     * @param b second value.\n     * @return the midpoint.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnivariateRealSolverImpl.clearResult#164",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java",
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult()",
        "snippet": "    protected final void clearResult() {\n        this.iterationCount = 0;\n        this.resultComputed = false;\n    }\n",
        "begin_line": 164,
        "end_line": 167,
        "comment": "\n     * Convenience function for implementations.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnivariateRealSolverImpl.verifyInterval#207",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java",
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double)",
        "snippet": "    protected void verifyInterval(final double lower, final double upper) {\n        if (lower >= upper) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                    \"endpoints do not specify an interval: [{0}, {1}]\",\n                    lower, upper);\n        }\n    }\n",
        "begin_line": 207,
        "end_line": 213,
        "comment": "\n     * Verifies that the endpoints specify an interval,\n     * throws IllegalArgumentException if not\n     *\n     * @param lower  lower endpoint\n     * @param upper upper endpoint\n     * @throws IllegalArgumentException\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "BisectionSolver.solve#76",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
        "class_name": "org.apache.commons.math.analysis.solvers.BisectionSolver",
        "signature": "org.apache.commons.math.analysis.solvers.BisectionSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double)",
        "snippet": "    public double solve(final UnivariateRealFunction f, double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifyInterval(min,max);\n        double m;\n        double fm;\n        double fmin;\n\n        int i = 0;\n        while (i < maximalIterationCount) {\n            m = UnivariateRealSolverUtils.midpoint(min, max);\n           fmin = f.value(min);\n           fm = f.value(m);\n\n            if (fm * fmin > 0.0) {\n                // max and m bracket the root.\n                min = m;\n            } else {\n                // min and m bracket the root.\n                max = m;\n            }\n\n            if (Math.abs(max - min) <= absoluteAccuracy) {\n                m = UnivariateRealSolverUtils.midpoint(min, max);\n                setResult(m, i);\n                return m;\n            }\n            ++i;\n        }\n\n        throw new MaxIterationsExceededException(maximalIterationCount);\n    }\n",
        "begin_line": 76,
        "end_line": 108,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl": null,
            "org.apache.commons.math.ConvergingAlgorithmImpl": null,
            "org.apache.commons.math.analysis.solvers.UnivariateRealSolver": "\n     * Solve for a zero root in the given interval.\n     * <p>A solver may require that the interval brackets a single zero root.\n     * Solvers that do require bracketing should be able to handle the case\n     * where one of the endpoints is itself a root.</p>\n     *\n     * @param f the function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return a value where the function is zero\n     * @throws ConvergenceException if the maximum iteration count is exceeded\n     * or the solver detects convergence problems otherwise.\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if min > max or the endpoints do not\n     * satisfy the requirements specified by the solver\n     * @since 2.0\n     ",
            "org.apache.commons.math.ConvergingAlgorithm": null
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "BisectionSolver.BisectionSolver#51",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
        "class_name": "org.apache.commons.math.analysis.solvers.BisectionSolver",
        "signature": "org.apache.commons.math.analysis.solvers.BisectionSolver.BisectionSolver()",
        "snippet": "    public BisectionSolver() {\n        super(100, 1E-6);\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n     * Construct a solver.\n     *\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnivariateRealSolverImpl.UnivariateRealSolverImpl#91",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java",
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double)",
        "snippet": "    protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,\n                                       final double defaultAbsoluteAccuracy) {\n        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);\n        this.defaultFunctionValueAccuracy = 1.0e-15;\n        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n    }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "\n     * Construct a solver with given iteration count and accuracy.\n     *\n     * @param defaultAbsoluteAccuracy maximum absolute error\n     * @param defaultMaximalIterationCount maximum number of iterations\n     * @throws IllegalArgumentException if f is null or the\n     * defaultAbsoluteAccuracy is not valid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "ConvergingAlgorithmImpl.ConvergingAlgorithmImpl#60",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double)",
        "snippet": "    protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,\n                                      final double defaultAbsoluteAccuracy) {\n        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\n        this.defaultRelativeAccuracy = 1.0e-14;\n        this.absoluteAccuracy = defaultAbsoluteAccuracy;\n        this.relativeAccuracy = defaultRelativeAccuracy;\n        this.defaultMaximalIterationCount = defaultMaximalIterationCount;\n        this.maximalIterationCount = defaultMaximalIterationCount;\n        this.iterationCount = 0;\n    }\n",
        "begin_line": 60,
        "end_line": 69,
        "comment": "\n     * Construct an algorithm with given iteration count and accuracy.\n     *\n     * @param defaultAbsoluteAccuracy maximum absolute error\n     * @param defaultMaximalIterationCount maximum number of iterations\n     * @throws IllegalArgumentException if f is null or the\n     * defaultAbsoluteAccuracy is not valid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    }
]