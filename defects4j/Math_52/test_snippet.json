[
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testIdentity()",
        "snippet": "  @Test\n  public void testIdentity() {\n\n    Rotation r = Rotation.IDENTITY;\n    checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_I);\n    checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.PLUS_J);\n    checkVector(r.applyTo(Vector3D.PLUS_K), Vector3D.PLUS_K);\n    checkAngle(r.getAngle(), 0);\n\n    r = new Rotation(-1, 0, 0, 0, false);\n    checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_I);\n    checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.PLUS_J);\n    checkVector(r.applyTo(Vector3D.PLUS_K), Vector3D.PLUS_K);\n    checkAngle(r.getAngle(), 0);\n\n    r = new Rotation(42, 0, 0, 0, true);\n    checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_I);\n    checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.PLUS_J);\n    checkVector(r.applyTo(Vector3D.PLUS_K), Vector3D.PLUS_K);\n    checkAngle(r.getAngle(), 0);\n\n  }\n",
        "begin_line": 28,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 31,col 5)-(line 31,col 35)",
            "(line 32,col 5)-(line 32,col 61)",
            "(line 33,col 5)-(line 33,col 61)",
            "(line 34,col 5)-(line 34,col 61)",
            "(line 35,col 5)-(line 35,col 32)",
            "(line 37,col 5)-(line 37,col 41)",
            "(line 38,col 5)-(line 38,col 61)",
            "(line 39,col 5)-(line 39,col 61)",
            "(line 40,col 5)-(line 40,col 61)",
            "(line 41,col 5)-(line 41,col 32)",
            "(line 43,col 5)-(line 43,col 40)",
            "(line 44,col 5)-(line 44,col 61)",
            "(line 45,col 5)-(line 45,col 61)",
            "(line 46,col 5)-(line 46,col 61)",
            "(line 47,col 5)-(line 47,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testAxisAngle()",
        "snippet": "  @Test\n  public void testAxisAngle() {\n\n    Rotation r = new Rotation(new Vector3D(10, 10, 10), 2 * FastMath.PI / 3);\n    checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_J);\n    checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.PLUS_K);\n    checkVector(r.applyTo(Vector3D.PLUS_K), Vector3D.PLUS_I);\n    double s = 1 / FastMath.sqrt(3);\n    checkVector(r.getAxis(), new Vector3D(s, s, s));\n    checkAngle(r.getAngle(), 2 * FastMath.PI / 3);\n\n    try {\n      new Rotation(new Vector3D(0, 0, 0), 2 * FastMath.PI / 3);\n      Assert.fail(\"an exception should have been thrown\");\n    } catch (ArithmeticException e) {\n    }\n\n    r = new Rotation(Vector3D.PLUS_K, 1.5 * FastMath.PI);\n    checkVector(r.getAxis(), new Vector3D(0, 0, -1));\n    checkAngle(r.getAngle(), 0.5 * FastMath.PI);\n\n    r = new Rotation(Vector3D.PLUS_J, FastMath.PI);\n    checkVector(r.getAxis(), Vector3D.PLUS_J);\n    checkAngle(r.getAngle(), FastMath.PI);\n\n    checkVector(Rotation.IDENTITY.getAxis(), Vector3D.PLUS_I);\n\n  }\n",
        "begin_line": 51,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 77)",
            "(line 55,col 5)-(line 55,col 61)",
            "(line 56,col 5)-(line 56,col 61)",
            "(line 57,col 5)-(line 57,col 61)",
            "(line 58,col 5)-(line 58,col 36)",
            "(line 59,col 5)-(line 59,col 52)",
            "(line 60,col 5)-(line 60,col 50)",
            "(line 62,col 5)-(line 66,col 5)",
            "(line 68,col 5)-(line 68,col 57)",
            "(line 69,col 5)-(line 69,col 53)",
            "(line 70,col 5)-(line 70,col 48)",
            "(line 72,col 5)-(line 72,col 51)",
            "(line 73,col 5)-(line 73,col 46)",
            "(line 74,col 5)-(line 74,col 42)",
            "(line 76,col 5)-(line 76,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testRevert()",
        "snippet": "  @Test\n  public void testRevert() {\n    Rotation r = new Rotation(0.001, 0.36, 0.48, 0.8, true);\n    Rotation reverted = r.revert();\n    checkRotation(r.applyTo(reverted), 1, 0, 0, 0);\n    checkRotation(reverted.applyTo(r), 1, 0, 0, 0);\n    Assert.assertEquals(r.getAngle(), reverted.getAngle(), 1.0e-12);\n    Assert.assertEquals(-1, Vector3D.dotProduct(r.getAxis(), reverted.getAxis()), 1.0e-12);\n  }\n",
        "begin_line": 80,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 82,col 60)",
            "(line 83,col 5)-(line 83,col 35)",
            "(line 84,col 5)-(line 84,col 51)",
            "(line 85,col 5)-(line 85,col 51)",
            "(line 86,col 5)-(line 86,col 68)",
            "(line 87,col 5)-(line 87,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testVectorOnePair()",
        "snippet": "  @Test\n  public void testVectorOnePair() {\n\n    Vector3D u = new Vector3D(3, 2, 1);\n    Vector3D v = new Vector3D(-4, 2, 2);\n    Rotation r = new Rotation(u, v);\n    checkVector(r.applyTo(u.scalarMultiply(v.getNorm())), v.scalarMultiply(u.getNorm()));\n\n    checkAngle(new Rotation(u, u.negate()).getAngle(), FastMath.PI);\n\n    try {\n        new Rotation(u, Vector3D.ZERO);\n        Assert.fail(\"an exception should have been thrown\");\n    } catch (IllegalArgumentException e) {\n        // expected behavior\n    }\n\n  }\n",
        "begin_line": 90,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 93,col 39)",
            "(line 94,col 5)-(line 94,col 40)",
            "(line 95,col 5)-(line 95,col 36)",
            "(line 96,col 5)-(line 96,col 89)",
            "(line 98,col 5)-(line 98,col 68)",
            "(line 100,col 5)-(line 105,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testVectorTwoPairs()",
        "snippet": "  @Test\n  public void testVectorTwoPairs() {\n\n    Vector3D u1 = new Vector3D(3, 0, 0);\n    Vector3D u2 = new Vector3D(0, 5, 0);\n    Vector3D v1 = new Vector3D(0, 0, 2);\n    Vector3D v2 = new Vector3D(-2, 0, 2);\n    Rotation r = new Rotation(u1, u2, v1, v2);\n    checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_K);\n    checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.MINUS_I);\n\n    r = new Rotation(u1, u2, u1.negate(), u2.negate());\n    Vector3D axis = r.getAxis();\n    if (Vector3D.dotProduct(axis, Vector3D.PLUS_K) > 0) {\n      checkVector(axis, Vector3D.PLUS_K);\n    } else {\n      checkVector(axis, Vector3D.MINUS_K);\n    }\n    checkAngle(r.getAngle(), FastMath.PI);\n\n    double sqrt = FastMath.sqrt(2) / 2;\n    r = new Rotation(Vector3D.PLUS_I,  Vector3D.PLUS_J,\n                     new Vector3D(0.5, 0.5,  sqrt),\n                     new Vector3D(0.5, 0.5, -sqrt));\n    checkRotation(r, sqrt, 0.5, 0.5, 0);\n\n    r = new Rotation(u1, u2, u1, Vector3D.crossProduct(u1, u2));\n    checkRotation(r, sqrt, -sqrt, 0, 0);\n\n    checkRotation(new Rotation(u1, u2, u1, u2), 1, 0, 0, 0);\n\n    try {\n        new Rotation(u1, u2, Vector3D.ZERO, v2);\n        Assert.fail(\"an exception should have been thrown\");\n    } catch (IllegalArgumentException e) {\n      // expected behavior\n    }\n\n  }\n",
        "begin_line": 109,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 40)",
            "(line 113,col 5)-(line 113,col 40)",
            "(line 114,col 5)-(line 114,col 40)",
            "(line 115,col 5)-(line 115,col 41)",
            "(line 116,col 5)-(line 116,col 46)",
            "(line 117,col 5)-(line 117,col 61)",
            "(line 118,col 5)-(line 118,col 62)",
            "(line 120,col 5)-(line 120,col 55)",
            "(line 121,col 5)-(line 121,col 32)",
            "(line 122,col 5)-(line 126,col 5)",
            "(line 127,col 5)-(line 127,col 42)",
            "(line 129,col 5)-(line 129,col 39)",
            "(line 130,col 5)-(line 132,col 52)",
            "(line 133,col 5)-(line 133,col 40)",
            "(line 135,col 5)-(line 135,col 64)",
            "(line 136,col 5)-(line 136,col 40)",
            "(line 138,col 5)-(line 138,col 60)",
            "(line 140,col 5)-(line 145,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testMatrix()",
        "snippet": "  @Test\n  public void testMatrix()\n    throws NotARotationMatrixException {\n\n    try {\n      new Rotation(new double[][] {\n                     { 0.0, 1.0, 0.0 },\n                     { 1.0, 0.0, 0.0 }\n                   }, 1.0e-7);\n      Assert.fail(\"Expecting NotARotationMatrixException\");\n    } catch (NotARotationMatrixException nrme) {\n      // expected behavior\n    }\n\n    try {\n      new Rotation(new double[][] {\n                     {  0.445888,  0.797184, -0.407040 },\n                     {  0.821760, -0.184320,  0.539200 },\n                     { -0.354816,  0.574912,  0.737280 }\n                   }, 1.0e-7);\n      Assert.fail(\"Expecting NotARotationMatrixException\");\n    } catch (NotARotationMatrixException nrme) {\n      // expected behavior\n    }\n\n    try {\n        new Rotation(new double[][] {\n                       {  0.4,  0.8, -0.4 },\n                       { -0.4,  0.6,  0.7 },\n                       {  0.8, -0.2,  0.5 }\n                     }, 1.0e-15);\n        Assert.fail(\"Expecting NotARotationMatrixException\");\n      } catch (NotARotationMatrixException nrme) {\n        // expected behavior\n      }\n\n    checkRotation(new Rotation(new double[][] {\n                                 {  0.445888,  0.797184, -0.407040 },\n                                 { -0.354816,  0.574912,  0.737280 },\n                                 {  0.821760, -0.184320,  0.539200 }\n                               }, 1.0e-10),\n                  0.8, 0.288, 0.384, 0.36);\n\n    checkRotation(new Rotation(new double[][] {\n                                 {  0.539200,  0.737280,  0.407040 },\n                                 {  0.184320, -0.574912,  0.797184 },\n                                 {  0.821760, -0.354816, -0.445888 }\n                              }, 1.0e-10),\n                  0.36, 0.8, 0.288, 0.384);\n\n    checkRotation(new Rotation(new double[][] {\n                                 { -0.445888,  0.797184, -0.407040 },\n                                 {  0.354816,  0.574912,  0.737280 },\n                                 {  0.821760,  0.184320, -0.539200 }\n                               }, 1.0e-10),\n                  0.384, 0.36, 0.8, 0.288);\n\n    checkRotation(new Rotation(new double[][] {\n                                 { -0.539200,  0.737280,  0.407040 },\n                                 { -0.184320, -0.574912,  0.797184 },\n                                 {  0.821760,  0.354816,  0.445888 }\n                               }, 1.0e-10),\n                  0.288, 0.384, 0.36, 0.8);\n\n    double[][] m1 = { { 0.0, 1.0, 0.0 },\n                      { 0.0, 0.0, 1.0 },\n                      { 1.0, 0.0, 0.0 } };\n    Rotation r = new Rotation(m1, 1.0e-7);\n    checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_K);\n    checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.PLUS_I);\n    checkVector(r.applyTo(Vector3D.PLUS_K), Vector3D.PLUS_J);\n\n    double[][] m2 = { { 0.83203, -0.55012, -0.07139 },\n                      { 0.48293,  0.78164, -0.39474 },\n                      { 0.27296,  0.29396,  0.91602 } };\n    r = new Rotation(m2, 1.0e-12);\n\n    double[][] m3 = r.getMatrix();\n    double d00 = m2[0][0] - m3[0][0];\n    double d01 = m2[0][1] - m3[0][1];\n    double d02 = m2[0][2] - m3[0][2];\n    double d10 = m2[1][0] - m3[1][0];\n    double d11 = m2[1][1] - m3[1][1];\n    double d12 = m2[1][2] - m3[1][2];\n    double d20 = m2[2][0] - m3[2][0];\n    double d21 = m2[2][1] - m3[2][1];\n    double d22 = m2[2][2] - m3[2][2];\n\n    Assert.assertTrue(FastMath.abs(d00) < 6.0e-6);\n    Assert.assertTrue(FastMath.abs(d01) < 6.0e-6);\n    Assert.assertTrue(FastMath.abs(d02) < 6.0e-6);\n    Assert.assertTrue(FastMath.abs(d10) < 6.0e-6);\n    Assert.assertTrue(FastMath.abs(d11) < 6.0e-6);\n    Assert.assertTrue(FastMath.abs(d12) < 6.0e-6);\n    Assert.assertTrue(FastMath.abs(d20) < 6.0e-6);\n    Assert.assertTrue(FastMath.abs(d21) < 6.0e-6);\n    Assert.assertTrue(FastMath.abs(d22) < 6.0e-6);\n\n    Assert.assertTrue(FastMath.abs(d00) > 4.0e-7);\n    Assert.assertTrue(FastMath.abs(d01) > 4.0e-7);\n    Assert.assertTrue(FastMath.abs(d02) > 4.0e-7);\n    Assert.assertTrue(FastMath.abs(d10) > 4.0e-7);\n    Assert.assertTrue(FastMath.abs(d11) > 4.0e-7);\n    Assert.assertTrue(FastMath.abs(d12) > 4.0e-7);\n    Assert.assertTrue(FastMath.abs(d20) > 4.0e-7);\n    Assert.assertTrue(FastMath.abs(d21) > 4.0e-7);\n    Assert.assertTrue(FastMath.abs(d22) > 4.0e-7);\n\n    for (int i = 0; i < 3; ++i) {\n      for (int j = 0; j < 3; ++j) {\n        double m3tm3 = m3[i][0] * m3[j][0]\n                     + m3[i][1] * m3[j][1]\n                     + m3[i][2] * m3[j][2];\n        if (i == j) {\n          Assert.assertTrue(FastMath.abs(m3tm3 - 1.0) < 1.0e-10);\n        } else {\n          Assert.assertTrue(FastMath.abs(m3tm3) < 1.0e-10);\n        }\n      }\n    }\n\n    checkVector(r.applyTo(Vector3D.PLUS_I),\n                new Vector3D(m3[0][0], m3[1][0], m3[2][0]));\n    checkVector(r.applyTo(Vector3D.PLUS_J),\n                new Vector3D(m3[0][1], m3[1][1], m3[2][1]));\n    checkVector(r.applyTo(Vector3D.PLUS_K),\n                new Vector3D(m3[0][2], m3[1][2], m3[2][2]));\n\n    double[][] m4 = { { 1.0,  0.0,  0.0 },\n                      { 0.0, -1.0,  0.0 },\n                      { 0.0,  0.0, -1.0 } };\n    r = new Rotation(m4, 1.0e-7);\n    checkAngle(r.getAngle(), FastMath.PI);\n\n    try {\n      double[][] m5 = { { 0.0, 0.0, 1.0 },\n                        { 0.0, 1.0, 0.0 },\n                        { 1.0, 0.0, 0.0 } };\n      r = new Rotation(m5, 1.0e-7);\n      Assert.fail(\"got \" + r + \", should have caught an exception\");\n    } catch (NotARotationMatrixException e) {\n      // expected\n    }\n\n  }\n",
        "begin_line": 149,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 161,col 5)",
            "(line 163,col 5)-(line 172,col 5)",
            "(line 174,col 5)-(line 183,col 7)",
            "(line 185,col 5)-(line 190,col 43)",
            "(line 192,col 5)-(line 197,col 43)",
            "(line 199,col 5)-(line 204,col 43)",
            "(line 206,col 5)-(line 211,col 43)",
            "(line 213,col 5)-(line 215,col 42)",
            "(line 216,col 5)-(line 216,col 42)",
            "(line 217,col 5)-(line 217,col 61)",
            "(line 218,col 5)-(line 218,col 61)",
            "(line 219,col 5)-(line 219,col 61)",
            "(line 221,col 5)-(line 223,col 56)",
            "(line 224,col 5)-(line 224,col 34)",
            "(line 226,col 5)-(line 226,col 34)",
            "(line 227,col 5)-(line 227,col 37)",
            "(line 228,col 5)-(line 228,col 37)",
            "(line 229,col 5)-(line 229,col 37)",
            "(line 230,col 5)-(line 230,col 37)",
            "(line 231,col 5)-(line 231,col 37)",
            "(line 232,col 5)-(line 232,col 37)",
            "(line 233,col 5)-(line 233,col 37)",
            "(line 234,col 5)-(line 234,col 37)",
            "(line 235,col 5)-(line 235,col 37)",
            "(line 237,col 5)-(line 237,col 50)",
            "(line 238,col 5)-(line 238,col 50)",
            "(line 239,col 5)-(line 239,col 50)",
            "(line 240,col 5)-(line 240,col 50)",
            "(line 241,col 5)-(line 241,col 50)",
            "(line 242,col 5)-(line 242,col 50)",
            "(line 243,col 5)-(line 243,col 50)",
            "(line 244,col 5)-(line 244,col 50)",
            "(line 245,col 5)-(line 245,col 50)",
            "(line 247,col 5)-(line 247,col 50)",
            "(line 248,col 5)-(line 248,col 50)",
            "(line 249,col 5)-(line 249,col 50)",
            "(line 250,col 5)-(line 250,col 50)",
            "(line 251,col 5)-(line 251,col 50)",
            "(line 252,col 5)-(line 252,col 50)",
            "(line 253,col 5)-(line 253,col 50)",
            "(line 254,col 5)-(line 254,col 50)",
            "(line 255,col 5)-(line 255,col 50)",
            "(line 257,col 5)-(line 268,col 5)",
            "(line 270,col 5)-(line 271,col 60)",
            "(line 272,col 5)-(line 273,col 60)",
            "(line 274,col 5)-(line 275,col 60)",
            "(line 277,col 5)-(line 279,col 44)",
            "(line 280,col 5)-(line 280,col 33)",
            "(line 281,col 5)-(line 281,col 42)",
            "(line 283,col 5)-(line 291,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testAngles()",
        "snippet": "  @Test\n  public void testAngles()\n    throws CardanEulerSingularityException {\n\n    RotationOrder[] CardanOrders = {\n      RotationOrder.XYZ, RotationOrder.XZY, RotationOrder.YXZ,\n      RotationOrder.YZX, RotationOrder.ZXY, RotationOrder.ZYX\n    };\n\n    for (int i = 0; i < CardanOrders.length; ++i) {\n      for (double alpha1 = 0.1; alpha1 < 6.2; alpha1 += 0.3) {\n        for (double alpha2 = -1.55; alpha2 < 1.55; alpha2 += 0.3) {\n          for (double alpha3 = 0.1; alpha3 < 6.2; alpha3 += 0.3) {\n            Rotation r = new Rotation(CardanOrders[i], alpha1, alpha2, alpha3);\n            double[] angles = r.getAngles(CardanOrders[i]);\n            checkAngle(angles[0], alpha1);\n            checkAngle(angles[1], alpha2);\n            checkAngle(angles[2], alpha3);\n          }\n        }\n      }\n    }\n\n    RotationOrder[] EulerOrders = {\n            RotationOrder.XYX, RotationOrder.XZX, RotationOrder.YXY,\n            RotationOrder.YZY, RotationOrder.ZXZ, RotationOrder.ZYZ\n          };\n\n    for (int i = 0; i < EulerOrders.length; ++i) {\n      for (double alpha1 = 0.1; alpha1 < 6.2; alpha1 += 0.3) {\n        for (double alpha2 = 0.05; alpha2 < 3.1; alpha2 += 0.3) {\n          for (double alpha3 = 0.1; alpha3 < 6.2; alpha3 += 0.3) {\n            Rotation r = new Rotation(EulerOrders[i],\n                                      alpha1, alpha2, alpha3);\n            double[] angles = r.getAngles(EulerOrders[i]);\n            checkAngle(angles[0], alpha1);\n            checkAngle(angles[1], alpha2);\n            checkAngle(angles[2], alpha3);\n          }\n        }\n      }\n    }\n\n  }\n",
        "begin_line": 295,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 299,col 5)-(line 302,col 6)",
            "(line 304,col 5)-(line 316,col 5)",
            "(line 318,col 5)-(line 321,col 12)",
            "(line 323,col 5)-(line 336,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testSingularities()",
        "snippet": "  @Test\n  public void testSingularities() {\n\n    RotationOrder[] CardanOrders = {\n      RotationOrder.XYZ, RotationOrder.XZY, RotationOrder.YXZ,\n      RotationOrder.YZX, RotationOrder.ZXY, RotationOrder.ZYX\n    };\n\n    double[] singularCardanAngle = { FastMath.PI / 2, -FastMath.PI / 2 };\n    for (int i = 0; i < CardanOrders.length; ++i) {\n      for (int j = 0; j < singularCardanAngle.length; ++j) {\n        Rotation r = new Rotation(CardanOrders[i], 0.1, singularCardanAngle[j], 0.3);\n        try {\n          r.getAngles(CardanOrders[i]);\n          Assert.fail(\"an exception should have been caught\");\n        } catch (CardanEulerSingularityException cese) {\n          // expected behavior\n        }\n      }\n    }\n\n    RotationOrder[] EulerOrders = {\n            RotationOrder.XYX, RotationOrder.XZX, RotationOrder.YXY,\n            RotationOrder.YZY, RotationOrder.ZXZ, RotationOrder.ZYZ\n          };\n\n    double[] singularEulerAngle = { 0, FastMath.PI };\n    for (int i = 0; i < EulerOrders.length; ++i) {\n      for (int j = 0; j < singularEulerAngle.length; ++j) {\n        Rotation r = new Rotation(EulerOrders[i], 0.1, singularEulerAngle[j], 0.3);\n        try {\n          r.getAngles(EulerOrders[i]);\n          Assert.fail(\"an exception should have been caught\");\n        } catch (CardanEulerSingularityException cese) {\n          // expected behavior\n        }\n      }\n    }\n\n\n  }\n",
        "begin_line": 340,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 343,col 5)-(line 346,col 6)",
            "(line 348,col 5)-(line 348,col 73)",
            "(line 349,col 5)-(line 359,col 5)",
            "(line 361,col 5)-(line 364,col 12)",
            "(line 366,col 5)-(line 366,col 53)",
            "(line 367,col 5)-(line 377,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testQuaternion()",
        "snippet": "  @Test\n  public void testQuaternion() {\n\n    Rotation r1 = new Rotation(new Vector3D(2, -3, 5), 1.7);\n    double n = 23.5;\n    Rotation r2 = new Rotation(n * r1.getQ0(), n * r1.getQ1(),\n                               n * r1.getQ2(), n * r1.getQ3(),\n                               true);\n    for (double x = -0.9; x < 0.9; x += 0.2) {\n      for (double y = -0.9; y < 0.9; y += 0.2) {\n        for (double z = -0.9; z < 0.9; z += 0.2) {\n          Vector3D u = new Vector3D(x, y, z);\n          checkVector(r2.applyTo(u), r1.applyTo(u));\n        }\n      }\n    }\n\n    r1 = new Rotation( 0.288,  0.384,  0.36,  0.8, false);\n    checkRotation(r1, -r1.getQ0(), -r1.getQ1(), -r1.getQ2(), -r1.getQ3());\n\n  }\n",
        "begin_line": 382,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 385,col 5)-(line 385,col 60)",
            "(line 386,col 5)-(line 386,col 20)",
            "(line 387,col 5)-(line 389,col 37)",
            "(line 390,col 5)-(line 397,col 5)",
            "(line 399,col 5)-(line 399,col 58)",
            "(line 400,col 5)-(line 400,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testCompose()",
        "snippet": "  @Test\n  public void testCompose() {\n\n    Rotation r1 = new Rotation(new Vector3D(2, -3, 5), 1.7);\n    Rotation r2 = new Rotation(new Vector3D(-1, 3, 2), 0.3);\n    Rotation r3 = r2.applyTo(r1);\n\n    for (double x = -0.9; x < 0.9; x += 0.2) {\n      for (double y = -0.9; y < 0.9; y += 0.2) {\n        for (double z = -0.9; z < 0.9; z += 0.2) {\n          Vector3D u = new Vector3D(x, y, z);\n          checkVector(r2.applyTo(r1.applyTo(u)), r3.applyTo(u));\n        }\n      }\n    }\n\n  }\n",
        "begin_line": 404,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 407,col 5)-(line 407,col 60)",
            "(line 408,col 5)-(line 408,col 60)",
            "(line 409,col 5)-(line 409,col 33)",
            "(line 411,col 5)-(line 418,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testComposeInverse()",
        "snippet": "  @Test\n  public void testComposeInverse() {\n\n    Rotation r1 = new Rotation(new Vector3D(2, -3, 5), 1.7);\n    Rotation r2 = new Rotation(new Vector3D(-1, 3, 2), 0.3);\n    Rotation r3 = r2.applyInverseTo(r1);\n\n    for (double x = -0.9; x < 0.9; x += 0.2) {\n      for (double y = -0.9; y < 0.9; y += 0.2) {\n        for (double z = -0.9; z < 0.9; z += 0.2) {\n          Vector3D u = new Vector3D(x, y, z);\n          checkVector(r2.applyInverseTo(r1.applyTo(u)), r3.applyTo(u));\n        }\n      }\n    }\n\n  }\n",
        "begin_line": 422,
        "end_line": 438,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 425,col 60)",
            "(line 426,col 5)-(line 426,col 60)",
            "(line 427,col 5)-(line 427,col 40)",
            "(line 429,col 5)-(line 436,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testApplyInverseTo()",
        "snippet": "  @Test\n  public void testApplyInverseTo() {\n\n    Rotation r = new Rotation(new Vector3D(2, -3, 5), 1.7);\n    for (double lambda = 0; lambda < 6.2; lambda += 0.2) {\n      for (double phi = -1.55; phi < 1.55; phi += 0.2) {\n          Vector3D u = new Vector3D(FastMath.cos(lambda) * FastMath.cos(phi),\n                                    FastMath.sin(lambda) * FastMath.cos(phi),\n                                    FastMath.sin(phi));\n          r.applyInverseTo(r.applyTo(u));\n          checkVector(u, r.applyInverseTo(r.applyTo(u)));\n          checkVector(u, r.applyTo(r.applyInverseTo(u)));\n      }\n    }\n\n    r = Rotation.IDENTITY;\n    for (double lambda = 0; lambda < 6.2; lambda += 0.2) {\n      for (double phi = -1.55; phi < 1.55; phi += 0.2) {\n          Vector3D u = new Vector3D(FastMath.cos(lambda) * FastMath.cos(phi),\n                                    FastMath.sin(lambda) * FastMath.cos(phi),\n                                    FastMath.sin(phi));\n          checkVector(u, r.applyInverseTo(r.applyTo(u)));\n          checkVector(u, r.applyTo(r.applyInverseTo(u)));\n      }\n    }\n\n    r = new Rotation(Vector3D.PLUS_K, FastMath.PI);\n    for (double lambda = 0; lambda < 6.2; lambda += 0.2) {\n      for (double phi = -1.55; phi < 1.55; phi += 0.2) {\n          Vector3D u = new Vector3D(FastMath.cos(lambda) * FastMath.cos(phi),\n                                    FastMath.sin(lambda) * FastMath.cos(phi),\n                                    FastMath.sin(phi));\n          checkVector(u, r.applyInverseTo(r.applyTo(u)));\n          checkVector(u, r.applyTo(r.applyInverseTo(u)));\n      }\n    }\n\n  }\n",
        "begin_line": 440,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 443,col 5)-(line 443,col 59)",
            "(line 444,col 5)-(line 453,col 5)",
            "(line 455,col 5)-(line 455,col 26)",
            "(line 456,col 5)-(line 464,col 5)",
            "(line 466,col 5)-(line 466,col 51)",
            "(line 467,col 5)-(line 475,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testIssue639()",
        "snippet": "  @Test\n  public void testIssue639(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);\n      Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);\n      Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);\n      Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);\n  }\n",
        "begin_line": 479,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 481,col 7)-(line 483,col 69)",
            "(line 484,col 7)-(line 486,col 69)",
            "(line 487,col 7)-(line 487,col 75)",
            "(line 488,col 7)-(line 488,col 78)",
            "(line 489,col 7)-(line 489,col 78)",
            "(line 490,col 7)-(line 490,col 78)",
            "(line 491,col 7)-(line 491,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.checkVector(org.apache.commons.math.geometry.euclidean.threed.Vector3D, org.apache.commons.math.geometry.euclidean.threed.Vector3D)",
        "snippet": "  private void checkVector(Vector3D v1, Vector3D v2) {\n    Assert.assertTrue(v1.subtract(v2).getNorm() < 1.0e-10);\n  }\n",
        "begin_line": 494,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 495,col 5)-(line 495,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.checkAngle(double, double)",
        "snippet": "  private void checkAngle(double a1, double a2) {\n    Assert.assertEquals(a1, MathUtils.normalizeAngle(a2, a1), 1.0e-10);\n  }\n",
        "begin_line": 498,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 499,col 5)-(line 499,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "signature": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.checkRotation(org.apache.commons.math.geometry.euclidean.threed.Rotation, double, double, double, double)",
        "snippet": "  private void checkRotation(Rotation r, double q0, double q1, double q2, double q3) {\n    Assert.assertEquals(0, Rotation.distance(r, new Rotation(q0, q1, q2, q3, false)), 1.0e-12);\n  }\n",
        "begin_line": 502,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 503,col 5)-(line 503,col 95)"
        ]
    }
]