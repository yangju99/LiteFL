[
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.ProcessClosurePrimitivesTest()",
        "snippet": "  public ProcessClosurePrimitivesTest() {\n    enableLineNumberCheck(true);\n  }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.setUp()",
        "snippet": "  @Override protected void setUp() {\n    additionalCode = null;\n    additionalEndCode = null;\n    addAdditionalNamespace = false;\n  }\n",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 26)",
            "(line 48,col 5)-(line 48,col 29)",
            "(line 49,col 5)-(line 49,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override public CompilerPass getProcessor(final Compiler compiler) {\n    if ((additionalCode == null) && (additionalEndCode == null)) {\n      return new ProcessClosurePrimitives(compiler, CheckLevel.ERROR, true);\n    } else {\n      return new CompilerPass() {\n        public void process(Node externs, Node root) {\n          // Process the original code.\n          new ProcessClosurePrimitives(compiler, CheckLevel.OFF, true)\n              .process(externs, root);\n\n          // Inject additional code at the beginning.\n          if (additionalCode != null) {\n            JSSourceFile file =\n                JSSourceFile.fromCode(\"additionalcode\", additionalCode);\n            Node scriptNode = root.getFirstChild();\n            Node newScriptNode = new CompilerInput(file).getAstRoot(compiler);\n            if (addAdditionalNamespace) {\n              newScriptNode.getFirstChild()\n                  .putBooleanProp(Node.IS_NAMESPACE, true);\n            }\n            while (newScriptNode.getLastChild() != null) {\n              Node lastChild = newScriptNode.getLastChild();\n              newScriptNode.removeChild(lastChild);\n              scriptNode.addChildBefore(lastChild, scriptNode.getFirstChild());\n            }\n          }\n\n          // Inject additional code at the end.\n          if (additionalEndCode != null) {\n            JSSourceFile file =\n                JSSourceFile.fromCode(\"additionalendcode\", additionalEndCode);\n            Node scriptNode = root.getFirstChild();\n            Node newScriptNode = new CompilerInput(file).getAstRoot(compiler);\n            if (addAdditionalNamespace) {\n              newScriptNode.getFirstChild()\n                  .putBooleanProp(Node.IS_NAMESPACE, true);\n            }\n            while (newScriptNode.getFirstChild() != null) {\n              Node firstChild = newScriptNode.getFirstChild();\n              newScriptNode.removeChild(firstChild);\n              scriptNode.addChildToBack(firstChild);\n            }\n          }\n\n          // Process the tree a second time.\n          new ProcessClosurePrimitives(compiler, CheckLevel.ERROR, true)\n              .process(externs, root);\n        }\n      };\n    }\n  }\n",
        "begin_line": 52,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 101,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.Anonymous-2e59f8bf-51ec-4bbf-bf25-6d66d71bf794.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        public void process(Node externs, Node root) {\n          // Process the original code.\n          new ProcessClosurePrimitives(compiler, CheckLevel.OFF, true)\n              .process(externs, root);\n\n          // Inject additional code at the beginning.\n          if (additionalCode != null) {\n            JSSourceFile file =\n                JSSourceFile.fromCode(\"additionalcode\", additionalCode);\n            Node scriptNode = root.getFirstChild();\n            Node newScriptNode = new CompilerInput(file).getAstRoot(compiler);\n            if (addAdditionalNamespace) {\n              newScriptNode.getFirstChild()\n                  .putBooleanProp(Node.IS_NAMESPACE, true);\n            }\n            while (newScriptNode.getLastChild() != null) {\n              Node lastChild = newScriptNode.getLastChild();\n              newScriptNode.removeChild(lastChild);\n              scriptNode.addChildBefore(lastChild, scriptNode.getFirstChild());\n            }\n          }\n\n          // Inject additional code at the end.\n          if (additionalEndCode != null) {\n            JSSourceFile file =\n                JSSourceFile.fromCode(\"additionalendcode\", additionalEndCode);\n            Node scriptNode = root.getFirstChild();\n            Node newScriptNode = new CompilerInput(file).getAstRoot(compiler);\n            if (addAdditionalNamespace) {\n              newScriptNode.getFirstChild()\n                  .putBooleanProp(Node.IS_NAMESPACE, true);\n            }\n            while (newScriptNode.getFirstChild() != null) {\n              Node firstChild = newScriptNode.getFirstChild();\n              newScriptNode.removeChild(firstChild);\n              scriptNode.addChildToBack(firstChild);\n            }\n          }\n\n          // Process the tree a second time.\n          new ProcessClosurePrimitives(compiler, CheckLevel.ERROR, true)\n              .process(externs, root);\n        }\n",
        "begin_line": 57,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 59,col 11)-(line 60,col 38)",
            "(line 63,col 11)-(line 77,col 11)",
            "(line 80,col 11)-(line 94,col 11)",
            "(line 97,col 11)-(line 98,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.getNumRepetitions()",
        "snippet": "  @Override public int getNumRepetitions() {\n    return 1;\n  }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testSimpleProvides()",
        "snippet": "  public void testSimpleProvides() {\n    test(\"goog.provide('foo');\",\n         \"var foo={};\");\n    test(\"goog.provide('foo.bar');\",\n         \"var foo={}; foo.bar={};\");\n    test(\"goog.provide('foo.bar.baz');\",\n         \"var foo={}; foo.bar={}; foo.bar.baz={};\");\n    test(\"goog.provide('foo.bar.baz.boo');\",\n         \"var foo={}; foo.bar={}; foo.bar.baz={}; foo.bar.baz.boo={};\");\n    test(\"goog.provide('goog.bar');\",\n         \"goog.bar={};\");  // goog is special-cased\n  }\n",
        "begin_line": 108,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 110,col 24)",
            "(line 111,col 5)-(line 112,col 36)",
            "(line 113,col 5)-(line 114,col 52)",
            "(line 115,col 5)-(line 116,col 72)",
            "(line 117,col 5)-(line 118,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testMultipleProvides()",
        "snippet": "  public void testMultipleProvides() {\n    test(\"goog.provide('foo.bar'); goog.provide('foo.baz');\",\n         \"var foo={}; foo.bar={}; foo.baz={};\");\n    test(\"goog.provide('foo.bar.baz'); goog.provide('foo.boo.foo');\",\n         \"var foo={}; foo.bar={}; foo.bar.baz={}; foo.boo={}; foo.boo.foo={};\");\n    test(\"goog.provide('foo.bar.baz'); goog.provide('foo.bar.boo');\",\n         \"var foo={}; foo.bar={}; foo.bar.baz={}; foo.bar.boo={};\");\n    test(\"goog.provide('foo.bar.baz'); goog.provide('goog.bar.boo');\",\n         \"var foo={}; foo.bar={}; foo.bar.baz={}; goog.bar={}; \" +\n         \"goog.bar.boo={};\");\n  }\n",
        "begin_line": 121,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 123,col 48)",
            "(line 124,col 5)-(line 125,col 80)",
            "(line 126,col 5)-(line 127,col 68)",
            "(line 128,col 5)-(line 130,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRemovalOfProvidedObjLit()",
        "snippet": "  public void testRemovalOfProvidedObjLit() {\n    test(\"goog.provide('foo'); foo = 0;\",\n         \"var foo = 0;\");\n    test(\"goog.provide('foo'); foo = {a: 0};\",\n         \"var foo = {a: 0};\");\n    test(\"goog.provide('foo'); foo = function(){};\",\n         \"var foo = function(){};\");\n    test(\"goog.provide('foo'); var foo = 0;\",\n         \"var foo = 0;\");\n    test(\"goog.provide('foo'); var foo = {a: 0};\",\n         \"var foo = {a: 0};\");\n    test(\"goog.provide('foo'); var foo = function(){};\",\n         \"var foo = function(){};\");\n    test(\"goog.provide('foo.bar.Baz'); foo.bar.Baz=function(){};\",\n         \"var foo={}; foo.bar={}; foo.bar.Baz=function(){};\");\n    test(\"goog.provide('foo.bar.moo'); foo.bar.moo={E:1,S:2};\",\n         \"var foo={}; foo.bar={}; foo.bar.moo={E:1,S:2};\");\n    test(\"goog.provide('foo.bar.moo'); foo.bar.moo={E:1}; foo.bar.moo={E:2};\",\n         \"var foo={}; foo.bar={}; foo.bar.moo={E:1}; foo.bar.moo={E:2};\");\n  }\n",
        "begin_line": 133,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 135,col 25)",
            "(line 136,col 5)-(line 137,col 30)",
            "(line 138,col 5)-(line 139,col 36)",
            "(line 140,col 5)-(line 141,col 25)",
            "(line 142,col 5)-(line 143,col 30)",
            "(line 144,col 5)-(line 145,col 36)",
            "(line 146,col 5)-(line 147,col 62)",
            "(line 148,col 5)-(line 149,col 59)",
            "(line 150,col 5)-(line 151,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvidedDeclaredFunctionError()",
        "snippet": "  public void testProvidedDeclaredFunctionError() {\n    test(\"goog.provide('foo'); function foo(){}\",\n         null, FUNCTION_NAMESPACE_ERROR);\n  }\n",
        "begin_line": 154,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 156,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRemovalMultipleAssignment1()",
        "snippet": "  public void testRemovalMultipleAssignment1() {\n    test(\"goog.provide('foo'); foo = 0; foo = 1\",\n         \"var foo = 0; foo = 1;\");\n  }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 161,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRemovalMultipleAssignment2()",
        "snippet": "  public void testRemovalMultipleAssignment2() {\n    test(\"goog.provide('foo'); var foo = 0; foo = 1\",\n         \"var foo = 0; foo = 1;\");\n  }\n",
        "begin_line": 164,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 166,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRemovalMultipleAssignment3()",
        "snippet": "  public void testRemovalMultipleAssignment3() {\n    test(\"goog.provide('foo'); foo = 0; var foo = 1\",\n         \"foo = 0; var foo = 1;\");\n  }\n",
        "begin_line": 169,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 170,col 5)-(line 171,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRemovalMultipleAssignment4()",
        "snippet": "  public void testRemovalMultipleAssignment4() {\n    test(\"goog.provide('foo.bar'); foo.bar = 0; foo.bar = 1\",\n         \"var foo = {}; foo.bar = 0; foo.bar = 1\");\n  }\n",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 176,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testNoRemovalFunction1()",
        "snippet": "  public void testNoRemovalFunction1() {\n    test(\"goog.provide('foo'); function f(){foo = 0}\",\n         \"var foo = {}; function f(){foo = 0}\");\n  }\n",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 181,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testNoRemovalFunction2()",
        "snippet": "  public void testNoRemovalFunction2() {\n    test(\"goog.provide('foo'); function f(){var foo = 0}\",\n         \"var foo = {}; function f(){var foo = 0}\");\n  }\n",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 186,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRemovalMultipleAssignmentInIf1()",
        "snippet": "  public void testRemovalMultipleAssignmentInIf1() {\n    test(\"goog.provide('foo'); if (true) { var foo = 0 } else { foo = 1 }\",\n         \"if (true) { var foo = 0 } else { foo = 1 }\");\n  }\n",
        "begin_line": 189,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 191,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRemovalMultipleAssignmentInIf2()",
        "snippet": "  public void testRemovalMultipleAssignmentInIf2() {\n    test(\"goog.provide('foo'); if (true) { foo = 0 } else { var foo = 1 }\",\n         \"if (true) { foo = 0 } else { var foo = 1 }\");\n  }\n",
        "begin_line": 194,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 196,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRemovalMultipleAssignmentInIf3()",
        "snippet": "  public void testRemovalMultipleAssignmentInIf3() {\n    test(\"goog.provide('foo'); if (true) { foo = 0 } else { foo = 1 }\",\n         \"if (true) { var foo = 0 } else { foo = 1 }\");\n  }\n",
        "begin_line": 199,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 200,col 5)-(line 201,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRemovalMultipleAssignmentInIf4()",
        "snippet": "  public void testRemovalMultipleAssignmentInIf4() {\n    test(\"goog.provide('foo.bar');\" +\n         \"if (true) { foo.bar = 0 } else { foo.bar = 1 }\",\n         \"var foo = {}; if (true) { foo.bar = 0 } else { foo.bar = 1 }\");\n  }\n",
        "begin_line": 204,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 207,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testMultipleDeclarationError1()",
        "snippet": "  public void testMultipleDeclarationError1() {\n    String rest = \"if (true) { foo.bar = 0 } else { foo.bar = 1 }\";\n    test(\"goog.provide('foo.bar');\" + \"var foo = {};\" + rest,\n         \"var foo = {};\" + \"var foo = {};\" + rest);\n  }\n",
        "begin_line": 210,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 211,col 67)",
            "(line 212,col 5)-(line 213,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testMultipleDeclarationError2()",
        "snippet": "  public void testMultipleDeclarationError2() {\n    test(\"goog.provide('foo.bar');\" +\n         \"if (true) { var foo = {}; foo.bar = 0 } else { foo.bar = 1 }\",\n         \"var foo = {};\" +\n         \"if (true) {\" +\n         \"  var foo = {}; foo.bar = 0\" +\n         \"} else {\" +\n         \"  foo.bar = 1\" +\n         \"}\");\n  }\n",
        "begin_line": 216,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 224,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testMultipleDeclarationError3()",
        "snippet": "  public void testMultipleDeclarationError3() {\n    test(\"goog.provide('foo.bar');\" +\n         \"if (true) { foo.bar = 0 } else { var foo = {}; foo.bar = 1 }\",\n         \"var foo = {};\" +\n         \"if (true) {\" +\n         \"  foo.bar = 0\" +\n         \"} else {\" +\n         \"  var foo = {}; foo.bar = 1\" +\n         \"}\");\n  }\n",
        "begin_line": 227,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 228,col 5)-(line 235,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideAfterDeclarationError()",
        "snippet": "  public void testProvideAfterDeclarationError() {\n    test(\"var x = 42; goog.provide('x');\",\n         \"var x = 42; var x = {}\");\n  }\n",
        "begin_line": 238,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 239,col 5)-(line 240,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideErrorCases()",
        "snippet": "  public void testProvideErrorCases() {\n    test(\"goog.provide();\", \"\", NULL_ARGUMENT_ERROR);\n    test(\"goog.provide(5);\", \"\", INVALID_ARGUMENT_ERROR);\n    test(\"goog.provide([]);\", \"\", INVALID_ARGUMENT_ERROR);\n    test(\"goog.provide({});\", \"\", INVALID_ARGUMENT_ERROR);\n    test(\"goog.provide('foo', 'bar');\", \"\", TOO_MANY_ARGUMENTS_ERROR);\n    test(\"goog.provide('foo'); goog.provide('foo');\", \"\",\n        DUPLICATE_NAMESPACE_ERROR);\n    test(\"goog.provide('foo.bar'); goog.provide('foo'); goog.provide('foo');\",\n        \"\", DUPLICATE_NAMESPACE_ERROR);\n  }\n",
        "begin_line": 243,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 244,col 5)-(line 244,col 53)",
            "(line 245,col 5)-(line 245,col 57)",
            "(line 246,col 5)-(line 246,col 58)",
            "(line 247,col 5)-(line 247,col 58)",
            "(line 248,col 5)-(line 248,col 70)",
            "(line 249,col 5)-(line 250,col 35)",
            "(line 251,col 5)-(line 252,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRemovalOfRequires()",
        "snippet": "  public void testRemovalOfRequires() {\n    test(\"goog.provide('foo'); goog.require('foo');\",\n         \"var foo={};\");\n    test(\"goog.provide('foo.bar'); goog.require('foo.bar');\",\n         \"var foo={}; foo.bar={};\");\n    test(\"goog.provide('foo.bar.baz'); goog.require('foo.bar.baz');\",\n         \"var foo={}; foo.bar={}; foo.bar.baz={};\");\n    test(\"goog.provide('foo'); var x = 3; goog.require('foo'); something();\",\n         \"var foo={}; var x = 3; something();\");\n    testSame(\"foo.require('foo.bar');\");\n  }\n",
        "begin_line": 255,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 256,col 5)-(line 257,col 24)",
            "(line 258,col 5)-(line 259,col 36)",
            "(line 260,col 5)-(line 261,col 52)",
            "(line 262,col 5)-(line 263,col 48)",
            "(line 264,col 5)-(line 264,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRequireErrorCases()",
        "snippet": "  public void testRequireErrorCases() {\n    test(\"goog.require();\", \"\", NULL_ARGUMENT_ERROR);\n    test(\"goog.require(5);\", \"\", INVALID_ARGUMENT_ERROR);\n    test(\"goog.require([]);\", \"\", INVALID_ARGUMENT_ERROR);\n    test(\"goog.require({});\", \"\", INVALID_ARGUMENT_ERROR);\n  }\n",
        "begin_line": 267,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 53)",
            "(line 269,col 5)-(line 269,col 57)",
            "(line 270,col 5)-(line 270,col 58)",
            "(line 271,col 5)-(line 271,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testLateProvides()",
        "snippet": "  public void testLateProvides() {\n    test(\"goog.require('foo'); goog.provide('foo');\",\n         \"var foo={};\", LATE_PROVIDE_ERROR);\n    test(\"goog.require('foo.bar'); goog.provide('foo.bar');\",\n         \"var foo={}; foo.bar={};\", LATE_PROVIDE_ERROR);\n    test(\"goog.provide('foo.bar'); goog.require('foo'); goog.provide('foo');\",\n         \"var foo={}; foo.bar={};\", LATE_PROVIDE_ERROR);\n  }\n",
        "begin_line": 274,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 275,col 5)-(line 276,col 44)",
            "(line 277,col 5)-(line 278,col 56)",
            "(line 279,col 5)-(line 280,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testMissingProvides()",
        "snippet": "  public void testMissingProvides() {\n    test(\"goog.require('foo');\",\n         \"\", MISSING_PROVIDE_ERROR);\n    test(\"goog.provide('foo'); goog.require('Foo');\",\n         \"var foo={};\", MISSING_PROVIDE_ERROR);\n    test(\"goog.provide('foo'); goog.require('foo.bar');\",\n         \"var foo={};\", MISSING_PROVIDE_ERROR);\n    test(\"goog.provide('foo'); var EXPERIMENT_FOO = true; \" +\n             \"if (EXPERIMENT_FOO) {goog.require('foo.bar');}\",\n         \"var foo={}; var EXPERIMENT_FOO = true; if (EXPERIMENT_FOO) {}\",\n         MISSING_PROVIDE_ERROR);\n  }\n",
        "begin_line": 283,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 284,col 5)-(line 285,col 36)",
            "(line 286,col 5)-(line 287,col 47)",
            "(line 288,col 5)-(line 289,col 47)",
            "(line 290,col 5)-(line 293,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testNewDateGoogNowSimplification()",
        "snippet": "  public void testNewDateGoogNowSimplification() {\n    test(\"var x = new Date(goog.now());\", \"var x = new Date();\");\n    testSame(\"var x = new Date(goog.now() + 1);\");\n    testSame(\"var x = new Date(goog.now(1));\");\n    testSame(\"var x = new Date(1, goog.now());\");\n    testSame(\"var x = new Date(1);\");\n    testSame(\"var x = new Date();\");\n  }\n",
        "begin_line": 296,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 297,col 5)-(line 297,col 65)",
            "(line 298,col 5)-(line 298,col 50)",
            "(line 299,col 5)-(line 299,col 47)",
            "(line 300,col 5)-(line 300,col 49)",
            "(line 301,col 5)-(line 301,col 37)",
            "(line 302,col 5)-(line 302,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testAddDependency()",
        "snippet": "  public void testAddDependency() {\n    test(\"goog.addDependency('x.js', ['A', 'B'], []);\", \"0\");\n\n    Compiler compiler = getLastCompiler();\n    assertTrue(compiler.getTypeRegistry().isForwardDeclaredType(\"A\"));\n    assertTrue(compiler.getTypeRegistry().isForwardDeclaredType(\"B\"));\n    assertFalse(compiler.getTypeRegistry().isForwardDeclaredType(\"C\"));\n  }\n",
        "begin_line": 305,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 306,col 5)-(line 306,col 61)",
            "(line 308,col 5)-(line 308,col 42)",
            "(line 309,col 5)-(line 309,col 70)",
            "(line 310,col 5)-(line 310,col 70)",
            "(line 311,col 5)-(line 311,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testValidSetCssNameMapping()",
        "snippet": "  public void testValidSetCssNameMapping() {\n    test(\"goog.setCssNameMapping({foo:'bar',\\\"biz\\\":'baz'});\", \"\");\n    CssRenamingMap map = getLastCompiler().getCssRenamingMap();\n    assertNotNull(map);\n    assertEquals(\"bar\", map.get(\"foo\"));\n    assertEquals(\"baz\", map.get(\"biz\"));\n  }\n",
        "begin_line": 314,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 67)",
            "(line 316,col 5)-(line 316,col 63)",
            "(line 317,col 5)-(line 317,col 23)",
            "(line 318,col 5)-(line 318,col 40)",
            "(line 319,col 5)-(line 319,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testSetCssNameMappingNonStringValueReturnsError()",
        "snippet": "  public void testSetCssNameMappingNonStringValueReturnsError() {\n    // Make sure the argument is an object literal.\n    test(\"var BAR = {foo:'bar'}; goog.setCssNameMapping(BAR);\", \"\",\n        INVALID_ARGUMENT_ERROR);\n    test(\"goog.setCssNameMapping([]);\", \"\",\n        INVALID_ARGUMENT_ERROR);\n    test(\"goog.setCssNameMapping(false);\", \"\",\n        INVALID_ARGUMENT_ERROR);\n    test(\"goog.setCssNameMapping(null);\", \"\",\n        INVALID_ARGUMENT_ERROR);\n    test(\"goog.setCssNameMapping(undefined);\", \"\",\n        INVALID_ARGUMENT_ERROR);\n\n    // Make sure all values of the object literal are string literals.\n    test(\"var BAR = 'bar'; goog.setCssNameMapping({foo:BAR});\", \"\",\n        NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR);\n    test(\"goog.setCssNameMapping({foo:6});\", \"\",\n        NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR);\n    test(\"goog.setCssNameMapping({foo:false});\", \"\",\n        NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR);\n    test(\"goog.setCssNameMapping({foo:null});\", \"\",\n        NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR);\n    test(\"goog.setCssNameMapping({foo:undefined});\", \"\",\n        NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR);\n  }\n",
        "begin_line": 322,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 324,col 5)-(line 325,col 32)",
            "(line 326,col 5)-(line 327,col 32)",
            "(line 328,col 5)-(line 329,col 32)",
            "(line 330,col 5)-(line 331,col 32)",
            "(line 332,col 5)-(line 333,col 32)",
            "(line 336,col 5)-(line 337,col 57)",
            "(line 338,col 5)-(line 339,col 57)",
            "(line 340,col 5)-(line 341,col 57)",
            "(line 342,col 5)-(line 343,col 57)",
            "(line 344,col 5)-(line 345,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testBadCrossModuleRequire()",
        "snippet": "  public void testBadCrossModuleRequire() {\n    test(\n        createModuleStar(\n            \"\",\n            \"goog.provide('goog.ui');\",\n            \"goog.require('goog.ui');\"),\n        new String[] {\n          \"\",\n          \"goog.ui = {};\",\n          \"\"\n        },\n        null,\n        XMODULE_REQUIRE_ERROR);\n  }\n",
        "begin_line": 348,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 349,col 5)-(line 360,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testGoodCrossModuleRequire1()",
        "snippet": "  public void testGoodCrossModuleRequire1() {\n    test(\n        createModuleStar(\n            \"goog.provide('goog.ui');\",\n            \"\",\n            \"goog.require('goog.ui');\"),\n        new String[] {\n            \"goog.ui = {};\",\n            \"\",\n            \"\",\n        });\n  }\n",
        "begin_line": 363,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 364,col 5)-(line 373,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testGoodCrossModuleRequire2()",
        "snippet": "  public void testGoodCrossModuleRequire2() {\n    test(\n        createModuleStar(\n            \"\",\n            \"\",\n            \"goog.provide('goog.ui'); goog.require('goog.ui');\"),\n        new String[] {\n            \"\",\n            \"\",\n            \"goog.ui = {};\",\n        });\n  }\n",
        "begin_line": 376,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 377,col 5)-(line 386,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testSimpleAdditionalProvide()",
        "snippet": "  public void testSimpleAdditionalProvide() {\n    additionalCode = \"goog.provide('b.B'); b.B = {};\";\n    test(\"goog.provide('a.A'); a.A = {};\",\n         \"var b={};b.B={};var a={};a.A={};\");\n  }\n",
        "begin_line": 390,
        "end_line": 394,
        "comment": " Tests providing additional code with non-overlapping var namespace.",
        "child_ranges": [
            "(line 391,col 5)-(line 391,col 54)",
            "(line 392,col 5)-(line 393,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testSimpleAdditionalProvideAtEnd()",
        "snippet": "  public void testSimpleAdditionalProvideAtEnd() {\n    additionalEndCode = \"goog.provide('b.B'); b.B = {};\";\n    test(\"goog.provide('a.A'); a.A = {};\",\n         \"var a={};a.A={};var b={};b.B={};\");\n  }\n",
        "begin_line": 397,
        "end_line": 401,
        "comment": " Same as above, but with the additional code added after the original.",
        "child_ranges": [
            "(line 398,col 5)-(line 398,col 57)",
            "(line 399,col 5)-(line 400,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testSimpleDottedAdditionalProvide()",
        "snippet": "  public void testSimpleDottedAdditionalProvide() {\n    additionalCode = \"goog.provide('a.b.B'); a.b.B = {};\";\n    test(\"goog.provide('c.d.D'); c.d.D = {};\",\n         \"var a={};a.b={};a.b.B={};var c={};c.d={};c.d.D={};\");\n  }\n",
        "begin_line": 404,
        "end_line": 408,
        "comment": " Tests providing additional code with non-overlapping dotted namespace.",
        "child_ranges": [
            "(line 405,col 5)-(line 405,col 58)",
            "(line 406,col 5)-(line 407,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testOverlappingAdditionalProvide()",
        "snippet": "  public void testOverlappingAdditionalProvide() {\n    additionalCode = \"goog.provide('a.B'); a.B = {};\";\n    test(\"goog.provide('a.A'); a.A = {};\",\n         \"var a={};a.B={};a.A={};\");\n  }\n",
        "begin_line": 411,
        "end_line": 415,
        "comment": " Tests providing additional code with overlapping var namespace.",
        "child_ranges": [
            "(line 412,col 5)-(line 412,col 54)",
            "(line 413,col 5)-(line 414,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testOverlappingAdditionalProvideAtEnd()",
        "snippet": "  public void testOverlappingAdditionalProvideAtEnd() {\n    additionalEndCode = \"goog.provide('a.B'); a.B = {};\";\n    test(\"goog.provide('a.A'); a.A = {};\",\n         \"var a={};a.A={};a.B={};\");\n  }\n",
        "begin_line": 418,
        "end_line": 422,
        "comment": " Tests providing additional code with overlapping var namespace.",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 57)",
            "(line 420,col 5)-(line 421,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testOverlappingDottedAdditionalProvide()",
        "snippet": "  public void testOverlappingDottedAdditionalProvide() {\n    additionalCode = \"goog.provide('a.b.B'); a.b.B = {};\";\n    test(\"goog.provide('a.b.C'); a.b.C = {};\",\n         \"var a={};a.b={};a.b.B={};a.b.C={};\");\n  }\n",
        "begin_line": 425,
        "end_line": 429,
        "comment": " Tests providing additional code with overlapping dotted namespace.",
        "child_ranges": [
            "(line 426,col 5)-(line 426,col 58)",
            "(line 427,col 5)-(line 428,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRequireOfAdditionalProvide()",
        "snippet": "  public void testRequireOfAdditionalProvide() {\n    additionalCode = \"goog.provide('b.B'); b.B = {};\";\n    test(\"goog.require('b.B'); goog.provide('a.A'); a.A = {};\",\n         \"var b={};b.B={};var a={};a.A={};\");\n  }\n",
        "begin_line": 432,
        "end_line": 436,
        "comment": " Tests that a require of additional code generates no error.",
        "child_ranges": [
            "(line 433,col 5)-(line 433,col 54)",
            "(line 434,col 5)-(line 435,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testMissingRequireWithAdditionalProvide()",
        "snippet": "  public void testMissingRequireWithAdditionalProvide() {\n    additionalCode = \"goog.provide('b.B'); b.B = {};\";\n    test(\"goog.require('b.C'); goog.provide('a.A'); a.A = {};\",\n         \"var b={};b.B={};var a={};a.A={};\",\n         MISSING_PROVIDE_ERROR);\n  }\n",
        "begin_line": 439,
        "end_line": 444,
        "comment": " Tests that a require not in additional code generates (only) one error.",
        "child_ranges": [
            "(line 440,col 5)-(line 440,col 54)",
            "(line 441,col 5)-(line 443,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testLateRequire()",
        "snippet": "  public void testLateRequire() {\n    additionalEndCode = \"goog.require('a.A');\";\n    test(\"goog.provide('a.A'); a.A = {};\",\n         \"var a={};a.A={};\");\n  }\n",
        "begin_line": 447,
        "end_line": 451,
        "comment": " Tests that a require in additional code generates no error.",
        "child_ranges": [
            "(line 448,col 5)-(line 448,col 47)",
            "(line 449,col 5)-(line 450,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testReorderedProvides()",
        "snippet": "  public void testReorderedProvides() {\n    additionalCode = \"a.B = {};\";  // as if a.B was after a.A originally\n    addAdditionalNamespace = true;\n    test(\"goog.provide('a.A'); a.A = {};\",\n         \"var a={};a.B={};a.A={};\");\n  }\n",
        "begin_line": 455,
        "end_line": 460,
        "comment": " provides are processed again.",
        "child_ranges": [
            "(line 456,col 5)-(line 456,col 33)",
            "(line 457,col 5)-(line 457,col 34)",
            "(line 458,col 5)-(line 459,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testReorderedProvides2()",
        "snippet": "  public void testReorderedProvides2() {\n    additionalEndCode = \"a.B = {};\";\n    addAdditionalNamespace = true;\n    test(\"goog.provide('a.A'); a.A = {};\",\n         \"var a={};a.A={};a.B={};\");\n  }\n",
        "begin_line": 463,
        "end_line": 468,
        "comment": " Another version of above.",
        "child_ranges": [
            "(line 464,col 5)-(line 464,col 36)",
            "(line 465,col 5)-(line 465,col 34)",
            "(line 466,col 5)-(line 467,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideOrder1()",
        "snippet": "  public void testProvideOrder1() {\n    additionalEndCode = \"\";\n    addAdditionalNamespace = false;\n    // TODO(johnlenz):  This test confirms that the constructor (a.b) isn't\n    // improperly removed, but this result isn't really what we want as the\n    // reassign of a.b removes the definition of \"a.b.c\".\n    test(\"goog.provide('a.b');\" +\n         \"goog.provide('a.b.c');\" +\n         \"a.b.c;\" +\n         \"a.b = function(x,y) {};\",\n         \"var a = {};\" +\n         \"a.b = {};\" +\n         \"a.b.c = {};\" +\n         \"a.b.c;\" +\n         \"a.b = function(x,y) {};\");\n  }\n",
        "begin_line": 472,
        "end_line": 487,
        "comment": " parent namespace.",
        "child_ranges": [
            "(line 473,col 5)-(line 473,col 27)",
            "(line 474,col 5)-(line 474,col 35)",
            "(line 478,col 5)-(line 486,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideOrder2()",
        "snippet": "  public void testProvideOrder2() {\n    additionalEndCode = \"\";\n    addAdditionalNamespace = false;\n    // TODO(johnlenz):  This test confirms that the constructor (a.b) isn't\n    // improperly removed, but this result isn't really what we want as\n    // namespace placeholders for a.b and a.b.c remain.\n    test(\"goog.provide('a.b');\" +\n         \"goog.provide('a.b.c');\" +\n         \"a.b = function(x,y) {};\" +\n         \"a.b.c;\",\n         \"var a = {};\" +\n         \"a.b = {};\" +\n         \"a.b.c = {};\" +\n         \"a.b = function(x,y) {};\" +\n         \"a.b.c;\");\n  }\n",
        "begin_line": 491,
        "end_line": 506,
        "comment": " parent namespace.",
        "child_ranges": [
            "(line 492,col 5)-(line 492,col 27)",
            "(line 493,col 5)-(line 493,col 35)",
            "(line 497,col 5)-(line 505,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideOrder3a()",
        "snippet": "  public void testProvideOrder3a() {\n    test(\"goog.provide('a.b');\" +\n         \"a.b = function(x,y) {};\" +\n         \"goog.provide('a.b.c');\" +\n         \"a.b.c;\",\n         \"var a = {};\" +\n         \"a.b = function(x,y) {};\" +\n         \"a.b.c = {};\" +\n         \"a.b.c;\");\n  }\n",
        "begin_line": 510,
        "end_line": 519,
        "comment": " parent namespace.",
        "child_ranges": [
            "(line 511,col 5)-(line 518,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideOrder3b()",
        "snippet": "  public void testProvideOrder3b() {\n    additionalEndCode = \"\";\n    addAdditionalNamespace = false;\n    // This tests a cleanly provided name, below a function namespace.\n    test(\"goog.provide('a.b');\" +\n         \"a.b = function(x,y) {};\" +\n         \"goog.provide('a.b.c');\" +\n         \"a.b.c;\",\n         \"var a = {};\" +\n         \"a.b = function(x,y) {};\" +\n         \"a.b.c = {};\" +\n         \"a.b.c;\");\n  }\n",
        "begin_line": 521,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 522,col 5)-(line 522,col 27)",
            "(line 523,col 5)-(line 523,col 35)",
            "(line 525,col 5)-(line 532,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideOrder4a()",
        "snippet": "  public void testProvideOrder4a() {\n    test(\"goog.provide('goog.a');\" +\n         \"goog.provide('goog.a.b');\" +\n         \"if (x) {\" +\n         \"  goog.a.b = 1;\" +\n         \"} else {\" +\n         \"  goog.a.b = 2;\" +\n         \"}\",\n\n         \"goog.a={};\" +\n         \"if(x)\" +\n         \"  goog.a.b=1;\" +\n         \"else\" +\n         \"  goog.a.b=2;\");\n  }\n",
        "begin_line": 535,
        "end_line": 549,
        "comment": "",
        "child_ranges": [
            "(line 536,col 5)-(line 548,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideOrder4b()",
        "snippet": "  public void testProvideOrder4b() {\n    additionalEndCode = \"\";\n    addAdditionalNamespace = false;\n    // This tests a cleanly provided name, below a namespace.\n    test(\"goog.provide('goog.a');\" +\n         \"goog.provide('goog.a.b');\" +\n         \"if (x) {\" +\n         \"  goog.a.b = 1;\" +\n         \"} else {\" +\n         \"  goog.a.b = 2;\" +\n         \"}\",\n\n         \"goog.a={};\" +\n         \"if(x)\" +\n         \"  goog.a.b=1;\" +\n         \"else\" +\n         \"  goog.a.b=2;\");\n  }\n",
        "begin_line": 551,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 552,col 5)-(line 552,col 27)",
            "(line 553,col 5)-(line 553,col 35)",
            "(line 555,col 5)-(line 567,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testInvalidProvide()",
        "snippet": "  public void testInvalidProvide() {\n    test(\"goog.provide('a.class');\", null, INVALID_PROVIDE_ERROR);\n  }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 571,col 5)-(line 571,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testInvalidBase1()",
        "snippet": "  public void testInvalidBase1() {\n    test(\"goog.base(this, 'method');\", null, BASE_CLASS_ERROR);\n  }\n",
        "begin_line": 580,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 581,col 5)-(line 581,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testInvalidBase2()",
        "snippet": "  public void testInvalidBase2() {\n    test(\"function Foo() {}\" +\n         \"Foo.method = function() {\" +\n         \"  goog.base(this, 'method');\" +\n         \"};\", null, BASE_CLASS_ERROR);\n  }\n",
        "begin_line": 584,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 585,col 5)-(line 588,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testInvalidBase3()",
        "snippet": "  public void testInvalidBase3() {\n    test(String.format(METHOD_FORMAT, \"goog.base();\"),\n         null, BASE_CLASS_ERROR);\n  }\n",
        "begin_line": 591,
        "end_line": 594,
        "comment": "",
        "child_ranges": [
            "(line 592,col 5)-(line 593,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testInvalidBase4()",
        "snippet": "  public void testInvalidBase4() {\n    test(String.format(METHOD_FORMAT, \"goog.base(this, 'bar');\"),\n         null, BASE_CLASS_ERROR);\n  }\n",
        "begin_line": 596,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 597,col 5)-(line 598,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testInvalidBase5()",
        "snippet": "  public void testInvalidBase5() {\n    test(String.format(METHOD_FORMAT, \"goog.base('foo', 'method');\"),\n         null, BASE_CLASS_ERROR);\n  }\n",
        "begin_line": 601,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 602,col 5)-(line 603,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testInvalidBase6()",
        "snippet": "  public void testInvalidBase6() {\n    test(String.format(METHOD_FORMAT, \"goog.base.call(null, this, 'method');\"),\n         null, BASE_CLASS_ERROR);\n  }\n",
        "begin_line": 606,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 607,col 5)-(line 608,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testInvalidBase7()",
        "snippet": "  public void testInvalidBase7() {\n    test(\"function Foo() { goog.base(this); }\",\n         null, BASE_CLASS_ERROR);\n  }\n",
        "begin_line": 611,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 612,col 5)-(line 613,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testInvalidBase8()",
        "snippet": "  public void testInvalidBase8() {\n    test(\"var Foo = function() { goog.base(this); }\",\n         null, BASE_CLASS_ERROR);\n  }\n",
        "begin_line": 616,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 617,col 5)-(line 618,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testInvalidBase9()",
        "snippet": "  public void testInvalidBase9() {\n    test(\"var goog = {}; goog.Foo = function() { goog.base(this); }\",\n         null, BASE_CLASS_ERROR);\n  }\n",
        "begin_line": 621,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 622,col 5)-(line 623,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testValidBase1()",
        "snippet": "  public void testValidBase1() {\n    test(String.format(METHOD_FORMAT, \"goog.base(this, 'method');\"),\n         String.format(METHOD_FORMAT, \"Foo.superClass_.method.call(this)\"));\n  }\n",
        "begin_line": 626,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 627,col 5)-(line 628,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testValidBase2()",
        "snippet": "  public void testValidBase2() {\n    test(String.format(METHOD_FORMAT, \"goog.base(this, 'method', 1, 2);\"),\n         String.format(METHOD_FORMAT,\n             \"Foo.superClass_.method.call(this, 1, 2)\"));\n  }\n",
        "begin_line": 631,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 632,col 5)-(line 634,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testValidBase3()",
        "snippet": "  public void testValidBase3() {\n    test(String.format(METHOD_FORMAT, \"return goog.base(this, 'method');\"),\n         String.format(METHOD_FORMAT,\n             \"return Foo.superClass_.method.call(this)\"));\n  }\n",
        "begin_line": 637,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 638,col 5)-(line 640,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testValidBase4()",
        "snippet": "  public void testValidBase4() {\n    test(\"function Foo() { goog.base(this, 1, 2); }\" + FOO_INHERITS,\n         \"function Foo() { BaseFoo.call(this, 1, 2); } \" + FOO_INHERITS);\n  }\n",
        "begin_line": 643,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 644,col 5)-(line 645,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testValidBase5()",
        "snippet": "  public void testValidBase5() {\n    test(\"var Foo = function() { goog.base(this, 1); };\" + FOO_INHERITS,\n         \"var Foo = function() { BaseFoo.call(this, 1); }; \" + FOO_INHERITS);\n  }\n",
        "begin_line": 648,
        "end_line": 651,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 650,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testValidBase6()",
        "snippet": "  public void testValidBase6() {\n    test(\"var goog = {}; goog.Foo = function() { goog.base(this); }; \" +\n         \"goog.inherits(goog.Foo, goog.BaseFoo);\",\n         \"var goog = {}; goog.Foo = function() { goog.BaseFoo.call(this); }; \" +\n         \"goog.inherits(goog.Foo, goog.BaseFoo);\");\n  }\n",
        "begin_line": 653,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 654,col 5)-(line 657,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testImplicitAndExplicitProvide()",
        "snippet": "  public void testImplicitAndExplicitProvide() {\n    test(\"var goog = {}; \" +\n         \"goog.provide('goog.foo.bar'); goog.provide('goog.foo');\",\n         \"var goog = {}; goog.foo = {}; goog.foo.bar = {};\");\n  }\n",
        "begin_line": 660,
        "end_line": 664,
        "comment": "",
        "child_ranges": [
            "(line 661,col 5)-(line 663,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testImplicitProvideInIndependentModules()",
        "snippet": "  public void testImplicitProvideInIndependentModules() {\n    test(\n        createModuleStar(\n            \"\",\n            \"goog.provide('apps.A');\",\n            \"goog.provide('apps.B');\"),\n        new String[] {\n            \"var apps = {};\",\n            \"apps.A = {};\",\n            \"apps.B = {};\",\n        });\n  }\n",
        "begin_line": 666,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 667,col 5)-(line 676,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testImplicitProvideInIndependentModules2()",
        "snippet": "  public void testImplicitProvideInIndependentModules2() {\n    test(\n        createModuleStar(\n            \"goog.provide('apps');\",\n            \"goog.provide('apps.foo.A');\",\n            \"goog.provide('apps.foo.B');\"),\n        new String[] {\n            \"var apps = {}; apps.foo = {};\",\n            \"apps.foo.A = {};\",\n            \"apps.foo.B = {};\",\n        });\n  }\n",
        "begin_line": 679,
        "end_line": 690,
        "comment": "",
        "child_ranges": [
            "(line 680,col 5)-(line 689,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testImplicitProvideInIndependentModules3()",
        "snippet": "  public void testImplicitProvideInIndependentModules3() {\n    test(\n        createModuleStar(\n            \"var goog = {};\",\n            \"goog.provide('goog.foo.A');\",\n            \"goog.provide('goog.foo.B');\"),\n        new String[] {\n            \"var goog = {}; goog.foo = {};\",\n            \"goog.foo.A = {};\",\n            \"goog.foo.B = {};\",\n        });\n  }\n",
        "begin_line": 692,
        "end_line": 703,
        "comment": "",
        "child_ranges": [
            "(line 693,col 5)-(line 702,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideInIndependentModules1()",
        "snippet": "  public void testProvideInIndependentModules1() {\n    test(\n        createModuleStar(\n            \"goog.provide('apps');\",\n            \"goog.provide('apps.foo');\",\n            \"goog.provide('apps.foo.B');\"),\n        new String[] {\n            \"var apps = {}; apps.foo = {};\",\n            \"\",\n            \"apps.foo.B = {};\",\n        });\n  }\n",
        "begin_line": 705,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 706,col 5)-(line 715,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideInIndependentModules2()",
        "snippet": "  public void testProvideInIndependentModules2() {\n    // TODO(nicksantos): Make this an error.\n    test(\n        createModuleStar(\n            \"goog.provide('apps');\",\n            \"goog.provide('apps.foo'); apps.foo = {};\",\n            \"goog.provide('apps.foo.B');\"),\n        new String[] {\n            \"var apps = {};\",\n            \"apps.foo = {};\",\n            \"apps.foo.B = {};\",\n        });\n  }\n",
        "begin_line": 718,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 720,col 5)-(line 729,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideInIndependentModules2b()",
        "snippet": "  public void testProvideInIndependentModules2b() {\n    // TODO(nicksantos): Make this an error.\n    test(\n        createModuleStar(\n            \"goog.provide('apps');\",\n            \"goog.provide('apps.foo'); apps.foo = function() {};\",\n            \"goog.provide('apps.foo.B');\"),\n        new String[] {\n            \"var apps = {};\",\n            \"apps.foo = function() {};\",\n            \"apps.foo.B = {};\",\n        });\n  }\n",
        "begin_line": 732,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 734,col 5)-(line 743,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideInIndependentModules3()",
        "snippet": "  public void testProvideInIndependentModules3() {\n    test(\n        createModuleStar(\n            \"goog.provide('apps');\",\n            \"goog.provide('apps.foo.B');\",\n            \"goog.provide('apps.foo'); goog.require('apps.foo');\"),\n        new String[] {\n            \"var apps = {}; apps.foo = {};\",\n            \"apps.foo.B = {};\",\n            \"\",\n        });\n  }\n",
        "begin_line": 746,
        "end_line": 757,
        "comment": "",
        "child_ranges": [
            "(line 747,col 5)-(line 756,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideInIndependentModules3b()",
        "snippet": "  public void testProvideInIndependentModules3b() {\n    // TODO(nicksantos): Make this an error.\n    test(\n        createModuleStar(\n            \"goog.provide('apps');\",\n            \"goog.provide('apps.foo.B');\",\n            \"goog.provide('apps.foo'); apps.foo = function() {}; \" +\n            \"goog.require('apps.foo');\"),\n        new String[] {\n            \"var apps = {};\",\n            \"apps.foo.B = {};\",\n            \"apps.foo = function() {};\",\n        });\n  }\n",
        "begin_line": 759,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 761,col 5)-(line 771,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideInIndependentModules4()",
        "snippet": "  public void testProvideInIndependentModules4() {\n    // Regression test for bug 261:\n    // http://code.google.com/p/closure-compiler/issues/detail?id=261\n    test(\n        createModuleStar(\n            \"goog.provide('apps');\",\n            \"goog.provide('apps.foo.bar.B');\",\n            \"goog.provide('apps.foo.bar.C');\"),\n        new String[] {\n            \"var apps = {};apps.foo = {};apps.foo.bar = {}\",\n            \"apps.foo.bar.B = {};\",\n            \"apps.foo.bar.C = {};\",\n        });\n  }\n",
        "begin_line": 774,
        "end_line": 787,
        "comment": "",
        "child_ranges": [
            "(line 777,col 5)-(line 786,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testRequireOfBaseGoog()",
        "snippet": "  public void testRequireOfBaseGoog() {\n    test(\"goog.require('goog');\",\n         \"\", MISSING_PROVIDE_ERROR);\n  }\n",
        "begin_line": 789,
        "end_line": 792,
        "comment": "",
        "child_ranges": [
            "(line 790,col 5)-(line 791,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 101,
        "end_line": 107,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 102,col 5)-(line 104,col 6)",
            "(line 105,col 5)-(line 105,col 39)",
            "(line 106,col 5)-(line 106,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 130,
        "end_line": 130,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 139,
        "end_line": 150,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 52)",
            "(line 144,col 5)-(line 144,col 32)",
            "(line 146,col 5)-(line 147,col 65)",
            "(line 148,col 5)-(line 148,col 55)",
            "(line 149,col 5)-(line 149,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 160,
        "end_line": 164,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 173,col 5)-(line 173,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 184,
        "end_line": 187,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 29)",
            "(line 186,col 5)-(line 186,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 193,col 5)-(line 193,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 212,col 5)-(line 212,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 223,
        "end_line": 226,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 28)",
            "(line 225,col 5)-(line 225,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 232,
        "end_line": 234,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 233,col 5)-(line 233,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 241,
        "end_line": 243,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 242,col 5)-(line 242,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 246,
        "end_line": 254,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 248,col 5)-(line 250,col 40)",
            "(line 252,col 5)-(line 253,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 262,
        "end_line": 264,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 275,col 5)-(line 275,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 289,
        "end_line": 292,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 304,
        "end_line": 307,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 306,col 5)-(line 306,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 320,
        "end_line": 323,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 322,col 5)-(line 322,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 339,
        "end_line": 346,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 342,col 5)-(line 344,col 6)",
            "(line 345,col 5)-(line 345,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 362,
        "end_line": 378,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 365,col 5)-(line 365,col 41)",
            "(line 366,col 5)-(line 366,col 28)",
            "(line 368,col 5)-(line 368,col 43)",
            "(line 371,col 5)-(line 371,col 39)",
            "(line 372,col 5)-(line 373,col 58)",
            "(line 375,col 5)-(line 375,col 71)",
            "(line 377,col 5)-(line 377,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 386,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 387,col 5)-(line 387,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 398,
        "end_line": 400,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 399,col 5)-(line 399,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 412,
        "end_line": 415,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 414,col 5)-(line 414,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 430,
        "end_line": 441,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 432,col 5)-(line 432,col 41)",
            "(line 433,col 5)-(line 433,col 28)",
            "(line 435,col 5)-(line 435,col 56)",
            "(line 436,col 5)-(line 438,col 5)",
            "(line 439,col 5)-(line 439,col 55)",
            "(line 440,col 5)-(line 440,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 449,
        "end_line": 451,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 450,col 5)-(line 450,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 461,
        "end_line": 464,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 463,col 5)-(line 463,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 476,
        "end_line": 483,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 478,col 5)-(line 478,col 41)",
            "(line 479,col 5)-(line 479,col 28)",
            "(line 481,col 5)-(line 481,col 56)",
            "(line 482,col 5)-(line 482,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 490,
        "end_line": 492,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 491,col 5)-(line 491,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 501,
        "end_line": 503,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 502,col 5)-(line 502,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 513,
        "end_line": 519,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 514,col 5)-(line 518,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 529,
        "end_line": 531,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 530,col 5)-(line 530,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 542,
        "end_line": 549,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 544,col 5)-(line 548,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 562,
        "end_line": 568,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 564,col 5)-(line 566,col 6)",
            "(line 567,col 5)-(line 567,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 575,
        "end_line": 577,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 576,col 5)-(line 576,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 586,
        "end_line": 588,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 587,col 5)-(line 587,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 608,col 5)-(line 608,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 617,
        "end_line": 630,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 618,col 5)-(line 629,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 643,
        "end_line": 646,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 645,col 5)-(line 645,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 663,
        "end_line": 851,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 666,col 5)-(line 666,col 51)",
            "(line 667,col 5)-(line 667,col 44)",
            "(line 669,col 5)-(line 669,col 39)",
            "(line 670,col 5)-(line 671,col 66)",
            "(line 673,col 5)-(line 673,col 44)",
            "(line 674,col 5)-(line 674,col 40)",
            "(line 677,col 5)-(line 677,col 38)",
            "(line 678,col 5)-(line 678,col 54)",
            "(line 679,col 5)-(line 679,col 50)",
            "(line 681,col 5)-(line 681,col 45)",
            "(line 682,col 5)-(line 682,col 68)",
            "(line 683,col 5)-(line 683,col 34)",
            "(line 684,col 5)-(line 684,col 59)",
            "(line 685,col 5)-(line 685,col 35)",
            "(line 687,col 5)-(line 688,col 39)",
            "(line 690,col 5)-(line 730,col 5)",
            "(line 732,col 5)-(line 850,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 853,
        "end_line": 857,
        "comment": "",
        "child_ranges": [
            "(line 855,col 5)-(line 855,col 57)",
            "(line 856,col 5)-(line 856,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 862,
        "end_line": 880,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 863,col 5)-(line 863,col 41)",
            "(line 864,col 5)-(line 864,col 62)",
            "(line 865,col 5)-(line 867,col 5)",
            "(line 868,col 5)-(line 868,col 55)",
            "(line 869,col 5)-(line 869,col 39)",
            "(line 870,col 5)-(line 871,col 66)",
            "(line 872,col 5)-(line 872,col 44)",
            "(line 873,col 5)-(line 873,col 42)",
            "(line 875,col 5)-(line 878,col 5)",
            "(line 879,col 5)-(line 879,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 882,
        "end_line": 884,
        "comment": "",
        "child_ranges": [
            "(line 883,col 5)-(line 883,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 890,
        "end_line": 896,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 891,col 5)-(line 891,col 47)",
            "(line 892,col 5)-(line 894,col 5)",
            "(line 895,col 5)-(line 895,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 902,
        "end_line": 908,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 903,col 5)-(line 903,col 47)",
            "(line 904,col 5)-(line 906,col 5)",
            "(line 907,col 5)-(line 907,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 915,
        "end_line": 922,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 916,col 5)-(line 916,col 48)",
            "(line 917,col 5)-(line 917,col 47)",
            "(line 918,col 5)-(line 920,col 5)",
            "(line 921,col 5)-(line 921,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 929,
        "end_line": 935,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 930,col 5)-(line 930,col 47)",
            "(line 931,col 5)-(line 933,col 5)",
            "(line 934,col 5)-(line 934,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 941,
        "end_line": 948,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 942,col 5)-(line 942,col 53)",
            "(line 943,col 5)-(line 946,col 5)",
            "(line 947,col 5)-(line 947,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 951,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 952,col 7)-(line 952,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 955,
        "end_line": 956,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 958,
        "end_line": 959,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  private Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 962,
        "end_line": 965,
        "comment": "",
        "child_ranges": [
            "(line 963,col 5)-(line 963,col 39)",
            "(line 964,col 5)-(line 964,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessClosurePrimitivesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 967,
        "end_line": 969,
        "comment": "",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 41)"
        ]
    }
]