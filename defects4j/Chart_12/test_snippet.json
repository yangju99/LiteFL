[
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MultiplePiePlotTests.class);\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.plotChanged(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "\tpublic void plotChanged(PlotChangeEvent event) {\n\t\tthis.lastEvent = event;\n\t}\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Receives a plot change event and records it.  Some tests will use this\n     * to check that events have been generated (or not) when required.\n     ",
        "child_ranges": [
            "(line 89,col 3)-(line 89,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.MultiplePiePlotTests(java.lang.String)",
        "snippet": "    public MultiplePiePlotTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n    \tMultiplePiePlot plot = new MultiplePiePlot();\n    \tassertNull(plot.getDataset());\n\n    \t// the following checks that the plot registers itself as a listener\n    \t// with the dataset passed to the constructor - see patch 1943021\n    \tDefaultCategoryDataset dataset = new DefaultCategoryDataset();\n    \tplot = new MultiplePiePlot(dataset);\n    \tassertTrue(dataset.hasListener(plot));\n    }\n",
        "begin_line": 104,
        "end_line": 113,
        "comment": "\n     * Some checks for the constructors.\n     ",
        "child_ranges": [
            "(line 105,col 6)-(line 105,col 50)",
            "(line 106,col 6)-(line 106,col 35)",
            "(line 110,col 6)-(line 110,col 67)",
            "(line 111,col 6)-(line 111,col 41)",
            "(line 112,col 6)-(line 112,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MultiplePiePlot p1 = new MultiplePiePlot();\n        MultiplePiePlot p2 = new MultiplePiePlot();\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.equals(p1));\n\n        p1.setDataExtractOrder(TableOrder.BY_ROW);\n        assertFalse(p1.equals(p2));\n        p2.setDataExtractOrder(TableOrder.BY_ROW);\n        assertTrue(p1.equals(p2));\n\n        p1.setLimit(1.23);\n        assertFalse(p1.equals(p2));\n        p2.setLimit(1.23);\n        assertTrue(p1.equals(p2));\n\n        p1.setAggregatedItemsKey(\"Aggregated Items\");\n        assertFalse(p1.equals(p2));\n        p2.setAggregatedItemsKey(\"Aggregated Items\");\n        assertTrue(p1.equals(p2));\n\n        p1.setAggregatedItemsPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(p1.equals(p2));\n        p2.setAggregatedItemsPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(p1.equals(p2));\n\n        p1.setPieChart(ChartFactory.createPieChart(\"Title\", null, true, true,\n                true));\n        assertFalse(p1.equals(p2));\n        p2.setPieChart(ChartFactory.createPieChart(\"Title\", null, true, true,\n                true));\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 118,
        "end_line": 152,
        "comment": "\n     * Check that the equals() method distinguishes the required fields.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 124,col 9)-(line 124,col 50)",
            "(line 125,col 9)-(line 125,col 35)",
            "(line 126,col 9)-(line 126,col 50)",
            "(line 127,col 9)-(line 127,col 34)",
            "(line 129,col 9)-(line 129,col 26)",
            "(line 130,col 9)-(line 130,col 35)",
            "(line 131,col 9)-(line 131,col 26)",
            "(line 132,col 9)-(line 132,col 34)",
            "(line 134,col 9)-(line 134,col 53)",
            "(line 135,col 9)-(line 135,col 35)",
            "(line 136,col 9)-(line 136,col 53)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 139,col 9)-(line 140,col 43)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 143,col 43)",
            "(line 144,col 9)-(line 144,col 34)",
            "(line 146,col 9)-(line 147,col 23)",
            "(line 148,col 9)-(line 148,col 35)",
            "(line 149,col 9)-(line 150,col 23)",
            "(line 151,col 9)-(line 151,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MultiplePiePlot p1 = new MultiplePiePlot();\n        MultiplePiePlot p2 = null;\n        try {\n            p2 = (MultiplePiePlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 157,
        "end_line": 170,
        "comment": "\n     * Some basic checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 51)",
            "(line 159,col 9)-(line 159,col 34)",
            "(line 160,col 9)-(line 166,col 9)",
            "(line 167,col 9)-(line 167,col 29)",
            "(line 168,col 9)-(line 168,col 51)",
            "(line 169,col 9)-(line 169,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "signature": "org.jfree.chart.plot.junit.MultiplePiePlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        MultiplePiePlot p1 = new MultiplePiePlot(null);\n        p1.setAggregatedItemsPaint(new GradientPaint(1.0f, 2.0f, Color.yellow,\n                3.0f, 4.0f, Color.red));\n        MultiplePiePlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (MultiplePiePlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(p1, p2);\n    }\n",
        "begin_line": 175,
        "end_line": 196,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 55)",
            "(line 177,col 9)-(line 178,col 40)",
            "(line 179,col 9)-(line 179,col 34)",
            "(line 180,col 9)-(line 194,col 9)",
            "(line 195,col 9)-(line 195,col 29)"
        ]
    }
]