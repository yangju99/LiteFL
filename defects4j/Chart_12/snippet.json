[
    {
        "name": "MultiplePiePlot.getDataset#165",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.getDataset()",
        "snippet": "    public CategoryDataset getDataset() {\n        return this.dataset;\n    }\n",
        "begin_line": 165,
        "end_line": 167,
        "comment": "\r\n     * Returns the dataset used by the plot.\r\n     *\r\n     * @return The dataset (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.hasListener#159",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.hasListener(java.util.EventListener)",
        "snippet": "    public boolean hasListener(EventListener listener) {\n        List list = Arrays.asList(this.listenerList.getListenerList());\n        return list.contains(listener);\n    }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "\r\n     * Returns <code>true</code> if the specified object is registered with\r\n     * the dataset as a listener.  Most applications won't need to call this \r\n     * method, it exists mainly for use by unit testing code.\r\n     * \r\n     * @param listener  the listener.\r\n     * \r\n     * @return A boolean.\r\n     * \r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     * @see #removeChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "MultiplePiePlot.MultiplePiePlot#134",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.MultiplePiePlot()",
        "snippet": "    public MultiplePiePlot() {\n        this(null);\n    }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\r\n     * Creates a new plot with no data.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "TableOrder.TableOrder#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/TableOrder.java",
        "class_name": "org.jfree.chart.util.TableOrder",
        "signature": "org.jfree.chart.util.TableOrder.TableOrder(java.lang.String)",
        "snippet": "    private TableOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.equals#540",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof LegendTitle)) {\n            return false;   \n        }\n        if (!super.equals(obj)) {\n            return false;   \n        }\n        LegendTitle that = (LegendTitle) obj;\n        if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {\n            return false;   \n        }\n        if (this.legendItemGraphicEdge != that.legendItemGraphicEdge) {\n            return false;   \n        }\n        if (this.legendItemGraphicAnchor != that.legendItemGraphicAnchor) {\n            return false;   \n        }\n        if (this.legendItemGraphicLocation != that.legendItemGraphicLocation) {\n            return false;   \n        }\n        if (!this.itemFont.equals(that.itemFont)) {\n            return false;   \n        }\n        if (!this.itemPaint.equals(that.itemPaint)) {\n            return false;   \n        }\n        if (!this.hLayout.equals(that.hLayout)) {\n            return false;   \n        }\n        if (!this.vLayout.equals(that.vLayout)) {\n            return false;   \n        }\n        return true;\n    }\n",
        "begin_line": 540,
        "end_line": 576,
        "comment": "\r\n     * Tests this title for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "MultiplePiePlot.MultiplePiePlot#143",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/plot/MultiplePiePlot.java",
        "class_name": "org.jfree.chart.plot.MultiplePiePlot",
        "signature": "org.jfree.chart.plot.MultiplePiePlot.MultiplePiePlot(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public MultiplePiePlot(CategoryDataset dataset) {\n        super();\n        this.dataset = dataset;\n        PiePlot piePlot = new PiePlot(null);\n        this.pieChart = new JFreeChart(piePlot);\n        this.pieChart.removeLegend();\n        this.dataExtractOrder = TableOrder.BY_COLUMN;\n        this.pieChart.setBackgroundPaint(null);\n        TextTitle seriesTitle = new TextTitle(\"Series Title\",\n                new Font(\"SansSerif\", Font.BOLD, 12));\n        seriesTitle.setPosition(RectangleEdge.BOTTOM);\n        this.pieChart.setTitle(seriesTitle);\n        this.aggregatedItemsKey = \"Other\";\n        this.aggregatedItemsPaint = Color.lightGray;\n        this.sectionPaints = new HashMap();\n    }\n",
        "begin_line": 143,
        "end_line": 158,
        "comment": "\r\n     * Creates a new plot.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.removeLegend#663",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.removeLegend()",
        "snippet": "    public void removeLegend() {\n        removeSubtitle(getLegend());\n    }\n",
        "begin_line": 663,
        "end_line": 665,
        "comment": "\r\n     * Removes the first legend in the chart and sends a \r\n     * {@link ChartChangeEvent} to all registered listeners.\r\n     * \r\n     * @see #getLegend()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.removeSubtitle#794",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.removeSubtitle(org.jfree.chart.title.Title)",
        "snippet": "    public void removeSubtitle(Title title) {\n        this.subtitles.remove(title);\n        fireChartChanged();\n    }\n",
        "begin_line": 794,
        "end_line": 797,
        "comment": "\r\n     * Removes the specified subtitle and sends a {@link ChartChangeEvent} to\r\n     * all registered listeners.\r\n     * \r\n     * @param title  the title.\r\n     * \r\n     * @see #addSubtitle(Title)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.setTitle#570",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.setTitle(org.jfree.chart.title.TextTitle)",
        "snippet": "    public void setTitle(TextTitle title) {\n        if (this.title != null) {\n            this.title.removeChangeListener(this);\n        }\n        this.title = title;\n        if (title != null) {\n            title.addChangeListener(this);\n        }\n        fireChartChanged();\n    }\n",
        "begin_line": 570,
        "end_line": 579,
        "comment": "\r\n     * Sets the main title for the chart and sends a {@link ChartChangeEvent} \r\n     * to all registered listeners.  If you do not want a title for the \r\n     * chart, set it to <code>null</code>.  If you want more than one title on\r\n     * a chart, use the {@link #addSubtitle(Title)} method.\r\n     *\r\n     * @param title  the title (<code>null</code> permitted).\r\n     * \r\n     * @see #getTitle()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.setBackgroundPaint#957",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.setBackgroundPaint(java.awt.Paint)",
        "snippet": "    public void setBackgroundPaint(Paint paint) {\n\n        if (this.backgroundPaint != null) {\n            if (!this.backgroundPaint.equals(paint)) {\n                this.backgroundPaint = paint;\n                fireChartChanged();\n            }\n        }\n        else {\n            if (paint != null) {\n                this.backgroundPaint = paint;\n                fireChartChanged();\n            }\n        }\n\n    }\n",
        "begin_line": 957,
        "end_line": 972,
        "comment": "\r\n     * Sets the paint used to fill the chart background and sends a \r\n     * {@link ChartChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (<code>null</code> permitted).\r\n     * \r\n     * @see #getBackgroundPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.getLegend#627",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.getLegend()",
        "snippet": "    public LegendTitle getLegend() {\n        return getLegend(0);\n    }\n",
        "begin_line": 627,
        "end_line": 629,
        "comment": "\r\n     * Returns the legend for the chart, if there is one.  Note that a chart\r\n     * can have more than one legend - this method returns the first.\r\n     * \r\n     * @return The legend (possibly <code>null</code>).\r\n     * \r\n     * @see #getLegend(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.getLegend#640",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.getLegend(int)",
        "snippet": "    public LegendTitle getLegend(int index) {\n        int seen = 0;\n        Iterator iterator = this.subtitles.iterator();\n        while (iterator.hasNext()) {\n            Title subtitle = (Title) iterator.next();\n            if (subtitle instanceof LegendTitle) {\n                if (seen == index) {\n                    return (LegendTitle) subtitle;\n                }\n                else {\n                    seen++;   \n                }\n            }\n        }\n        return null;        \n    }\n",
        "begin_line": 640,
        "end_line": 655,
        "comment": "\r\n     * Returns the nth legend for a chart, or <code>null</code>.\r\n     * \r\n     * @param index  the legend index (zero-based).\r\n     * \r\n     * @return The legend (possibly <code>null</code>).\r\n     * \r\n     * @see #addLegend(LegendTitle)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.fireChartChanged#1485",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.fireChartChanged()",
        "snippet": "    public void fireChartChanged() {\n        ChartChangeEvent event = new ChartChangeEvent(this);\n        notifyListeners(event);\n    }\n",
        "begin_line": 1485,
        "end_line": 1488,
        "comment": "\r\n     * Sends a default {@link ChartChangeEvent} to all registered listeners.\r\n     * <P>\r\n     * This method is for convenience only.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.JFreeChart#326",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.JFreeChart(org.jfree.chart.plot.Plot)",
        "snippet": "    public JFreeChart(Plot plot) {\n        this(null, null, plot, true);\n    }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "\r\n     * Creates a new chart based on the supplied plot.  The chart will have\r\n     * a legend added automatically, but no title (although you can easily add\r\n     * one later).  \r\n     * <br><br>\r\n     * Note that the  {@link ChartFactory} class contains a range \r\n     * of static methods that will return ready-made charts, and often this\r\n     * is a more convenient way to create charts than using this constructor.\r\n     *\r\n     * @param plot  the plot (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "Rotation.Rotation#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Rotation.java",
        "class_name": "org.jfree.chart.util.Rotation",
        "signature": "org.jfree.chart.util.Rotation.Rotation(java.lang.String, double)",
        "snippet": "    private Rotation(final String name, final double factor) {\n        this.name = name;\n        this.factor = factor;\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     * @param factor  the rotation factor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "PiePlot.PiePlot#503",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PiePlot.java",
        "class_name": "org.jfree.chart.plot.PiePlot",
        "signature": "org.jfree.chart.plot.PiePlot.PiePlot(org.jfree.data.general.PieDataset)",
        "snippet": "    public PiePlot(PieDataset dataset) {\n        super();\n        this.dataset = dataset;\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        this.pieIndex = 0;\n        \n        this.interiorGap = DEFAULT_INTERIOR_GAP;\n        this.circular = true;\n        this.startAngle = DEFAULT_START_ANGLE;\n        this.direction = Rotation.CLOCKWISE;\n        this.minimumArcAngleToDraw = DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n\n        this.sectionPaintMap = new PaintMap();\n        this.baseSectionPaint = Color.gray;\n\n        this.sectionOutlinesVisible = true;\n        this.sectionOutlinePaintMap = new PaintMap();\n        this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;\n\n        this.sectionOutlineStrokeMap = new StrokeMap();\n        this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        \n        this.explodePercentages = new TreeMap();\n\n        this.labelGenerator = new StandardPieSectionLabelGenerator();\n        this.labelFont = DEFAULT_LABEL_FONT;\n        this.labelPaint = DEFAULT_LABEL_PAINT;\n        this.labelBackgroundPaint = DEFAULT_LABEL_BACKGROUND_PAINT;\n        this.labelOutlinePaint = DEFAULT_LABEL_OUTLINE_PAINT;\n        this.labelOutlineStroke = DEFAULT_LABEL_OUTLINE_STROKE;\n        this.labelShadowPaint = DEFAULT_LABEL_SHADOW_PAINT;\n        this.labelLinksVisible = true;\n        this.labelDistributor = new PieLabelDistributor(0);\n        \n        this.simpleLabels = false;\n        this.simpleLabelOffset = new RectangleInsets(UnitType.RELATIVE, 0.18, \n                0.18, 0.18, 0.18);\n        this.labelPadding = new RectangleInsets(2, 2, 2, 2);\n        \n        this.toolTipGenerator = null;\n        this.urlGenerator = null;\n        this.legendLabelGenerator = new StandardPieSectionLabelGenerator();\n        this.legendLabelToolTipGenerator = null;\n        this.legendLabelURLGenerator = null;\n        this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;\n        \n        this.ignoreNullValues = false;\n        this.ignoreZeroValues = false;\n    }\n",
        "begin_line": 503,
        "end_line": 553,
        "comment": "\r\n     * Creates a plot that will draw a pie chart for the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "PieLabelLinkStyle.PieLabelLinkStyle#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PieLabelLinkStyle.java",
        "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
        "signature": "org.jfree.chart.plot.PieLabelLinkStyle.PieLabelLinkStyle(java.lang.String)",
        "snippet": "    private PieLabelLinkStyle(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "PieLabelDistributor.PieLabelDistributor#62",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PieLabelDistributor.java",
        "class_name": "org.jfree.chart.plot.PieLabelDistributor",
        "signature": "org.jfree.chart.plot.PieLabelDistributor.PieLabelDistributor(int)",
        "snippet": "    public PieLabelDistributor(int labelCount) {\n        super();\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\r\n     * Creates a new distributor.\r\n     * \r\n     * @param labelCount  the number of labels (ignored).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPieLabelDistributor.AbstractPieLabelDistributor#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/AbstractPieLabelDistributor.java",
        "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
        "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.AbstractPieLabelDistributor()",
        "snippet": "    public AbstractPieLabelDistributor() {\n        this.labels = new java.util.ArrayList();\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#89",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator()",
        "snippet": "    public StandardPieSectionLabelGenerator() {\n        this(DEFAULT_SECTION_LABEL_FORMAT, NumberFormat.getNumberInstance(), \n                NumberFormat.getPercentInstance());\n    }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\r\n     * Creates a new section label generator using \r\n     * {@link #DEFAULT_SECTION_LABEL_FORMAT} as the label format string, and \r\n     * platform default number and percentage formatters.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#139",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    public StandardPieSectionLabelGenerator(String labelFormat,\n            NumberFormat numberFormat, NumberFormat percentFormat) {\n        super(labelFormat, numberFormat, percentFormat);\n        this.attributedLabels = new ObjectList();\n    }\n",
        "begin_line": 139,
        "end_line": 143,
        "comment": "\r\n     * Creates an item label generator using the specified number formatters.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not \r\n     *                     permitted).\r\n     * @param numberFormat  the format object for the values (<code>null</code>\r\n     *                      not permitted).\r\n     * @param percentFormat  the format object for the percentages \r\n     *                       (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractPieItemLabelGenerator.AbstractPieItemLabelGenerator#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
        "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.AbstractPieItemLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    protected AbstractPieItemLabelGenerator(String labelFormat,\n                                            NumberFormat numberFormat, \n                                            NumberFormat percentFormat) {\n\n        if (labelFormat == null) {\n            throw new IllegalArgumentException(\"Null 'labelFormat' argument.\");\n        }\n        if (numberFormat == null) {\n            throw new IllegalArgumentException(\"Null 'numberFormat' argument.\");\n        }\n        if (percentFormat == null) {\n            throw new IllegalArgumentException(\n                \"Null 'percentFormat' argument.\"\n            );   \n        }\n        this.labelFormat = labelFormat;\n        this.numberFormat = numberFormat;\n        this.percentFormat = percentFormat;\n\n    }\n",
        "begin_line": 80,
        "end_line": 99,
        "comment": "\r\n     * Creates an item label generator using the specified number formatters.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not\r\n     *                     permitted).\r\n     * @param numberFormat  the format object for the values (<code>null</code>\r\n     *                      not permitted).\r\n     * @param percentFormat  the format object for the percentages\r\n     *                       (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrokeMap.StrokeMap#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/StrokeMap.java",
        "class_name": "org.jfree.chart.StrokeMap",
        "signature": "org.jfree.chart.StrokeMap.StrokeMap()",
        "snippet": "    public StrokeMap() {\n        this.store = new TreeMap();    \n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\r\n     * Creates a new (empty) map.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "PaintMap.PaintMap#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/PaintMap.java",
        "class_name": "org.jfree.chart.PaintMap",
        "signature": "org.jfree.chart.PaintMap.PaintMap()",
        "snippet": "    public PaintMap() {\n        this.store = new HashMap();    \n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\r\n     * Creates a new (empty) map.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultCategoryDataset.DefaultCategoryDataset#73",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.DefaultCategoryDataset()",
        "snippet": "    public DefaultCategoryDataset() {\n        this.data = new DefaultKeyedValues2D();\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\r\n     * Creates a new (empty) dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.14
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultKeyedValues2D.DefaultKeyedValues2D#94",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.DefaultKeyedValues2D()",
        "snippet": "    public DefaultKeyedValues2D() {\n        this(false);\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\r\n     * Creates a new instance (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.14
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultKeyedValues2D.DefaultKeyedValues2D#103",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.DefaultKeyedValues2D(boolean)",
        "snippet": "    public DefaultKeyedValues2D(boolean sortRowKeys) {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n        this.sortRowKeys = sortRowKeys;\n    }\n",
        "begin_line": 103,
        "end_line": 108,
        "comment": "\r\n     * Creates a new instance (initially empty).\r\n     * \r\n     * @param sortRowKeys  if the row keys should be sorted.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.14
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.notifyListeners#1496",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "    protected void notifyListeners(ChartChangeEvent event) {\n        if (this.notify) {\n            Object[] listeners = this.changeListeners.getListenerList();\n            for (int i = listeners.length - 2; i >= 0; i -= 2) {\n                if (listeners[i] == ChartChangeListener.class) {\n                    ((ChartChangeListener) listeners[i + 1]).chartChanged(\n                            event);\n                }\n            }\n        }\n    }\n",
        "begin_line": 1496,
        "end_line": 1506,
        "comment": "\r\n     * Sends a {@link ChartChangeEvent} to all registered listeners.\r\n     *\r\n     * @param event  information about the event that triggered the \r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.Title#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.Title()",
        "snippet": "    protected Title() {\n        this(Title.DEFAULT_POSITION,\n                Title.DEFAULT_HORIZONTAL_ALIGNMENT,\n                Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING);\n    }\n",
        "begin_line": 130,
        "end_line": 134,
        "comment": "\r\n     * Creates a new title, using default attributes where necessary.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.setPosition#215",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.setPosition(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public void setPosition(RectangleEdge position) {\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");\n        }\n        if (this.position != position) {\n            this.position = position;\n            notifyListeners(new TitleChangeEvent(this));\n        }\n    }\n",
        "begin_line": 215,
        "end_line": 223,
        "comment": "\r\n     * Sets the position for the title and sends a {@link TitleChangeEvent} to \r\n     * all registered listeners.\r\n     *\r\n     * @param position  the position (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.notifyListeners#356",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.notifyListeners(org.jfree.chart.event.TitleChangeEvent)",
        "snippet": "    protected void notifyListeners(TitleChangeEvent event) {\n        if (this.notify) {\n            Object[] listeners = this.listenerList.getListenerList();\n            for (int i = listeners.length - 2; i >= 0; i -= 2) {\n                if (listeners[i] == TitleChangeListener.class) {\n                    ((TitleChangeListener) listeners[i + 1]).titleChanged(\n                            event);\n                }\n            }\n        }\n    }\n",
        "begin_line": 356,
        "end_line": 366,
        "comment": "\r\n     * Notifies all registered listeners that the chart title has changed in \r\n     * some way.\r\n     *\r\n     * @param event  an object that contains information about the change to \r\n     *               the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.LegendTitle#161",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource)",
        "snippet": "    public LegendTitle(LegendItemSource source) {\n        this(source, new FlowArrangement(), new ColumnArrangement());\n    }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\r\n     * Constructs a new (empty) legend for the specified source.\r\n     * \r\n     * @param source  the source.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.LegendTitle#174",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource, org.jfree.chart.block.Arrangement, org.jfree.chart.block.Arrangement)",
        "snippet": "    public LegendTitle(LegendItemSource source, \n                       Arrangement hLayout, Arrangement vLayout) {\n        this.sources = new LegendItemSource[] {source};\n        this.items = new BlockContainer(hLayout);\n        this.hLayout = hLayout;\n        this.vLayout = vLayout;\n        this.backgroundPaint = null;  \n        this.legendItemGraphicEdge = RectangleEdge.LEFT;\n        this.legendItemGraphicAnchor = RectangleAnchor.CENTER;\n        this.legendItemGraphicLocation = RectangleAnchor.CENTER;\n        this.legendItemGraphicPadding = new RectangleInsets(2.0, 2.0, 2.0, 2.0);\n        this.itemFont = DEFAULT_ITEM_FONT;\n        this.itemPaint = DEFAULT_ITEM_PAINT;\n        this.itemLabelPadding = new RectangleInsets(2.0, 2.0, 2.0, 2.0);\n    }\n",
        "begin_line": 174,
        "end_line": 188,
        "comment": "\r\n     * Creates a new legend title with the specified arrangement.\r\n     * \r\n     * @param source  the source.\r\n     * @param hLayout  the horizontal item arrangement (<code>null</code> not\r\n     *                 permitted).\r\n     * @param vLayout  the vertical item arrangement (<code>null</code> not\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.setBackgroundPaint#228",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.setBackgroundPaint(java.awt.Paint)",
        "snippet": "    public void setBackgroundPaint(Paint paint) {\n        this.backgroundPaint = paint;   \n        notifyListeners(new TitleChangeEvent(this));\n    }\n",
        "begin_line": 228,
        "end_line": 231,
        "comment": "\r\n     * Sets the background paint for the legend and sends a \r\n     * {@link TitleChangeEvent} to all registered listeners.\r\n     * \r\n     * @param paint  the paint (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "TitleChangeEvent.TitleChangeEvent#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/TitleChangeEvent.java",
        "class_name": "org.jfree.chart.event.TitleChangeEvent",
        "signature": "org.jfree.chart.event.TitleChangeEvent.TitleChangeEvent(org.jfree.chart.title.Title)",
        "snippet": "    public TitleChangeEvent(Title title) {\n        super(title);\n        this.title = title;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\r\n     * Default constructor.\r\n     *\r\n     * @param title  the chart title that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineBorder.LineBorder#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.LineBorder()",
        "snippet": "    public LineBorder() {\n        this(Color.black, new BasicStroke(1.0f), new RectangleInsets(1.0, 1.0, \n                1.0, 1.0));\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\r\n     * Creates a default border.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineBorder.LineBorder#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.LineBorder(java.awt.Paint, java.awt.Stroke, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public LineBorder(Paint paint, Stroke stroke, RectangleInsets insets) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        this.paint = paint;\n        this.stroke = stroke;\n        this.insets = insets;\n    }  \n",
        "begin_line": 93,
        "end_line": 106,
        "comment": "\r\n     * Creates a new border with the specified color.\r\n     * \r\n     * @param paint  the color (<code>null</code> not permitted).\r\n     * @param stroke  the border stroke (<code>null</code> not permitted).\r\n     * @param insets  the insets (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "FlowArrangement.FlowArrangement#79",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement()",
        "snippet": "    public FlowArrangement() {   \n        this(HorizontalAlignment.CENTER, VerticalAlignment.CENTER, 2.0, 2.0);\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "FlowArrangement.FlowArrangement#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement(org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, double, double)",
        "snippet": "    public FlowArrangement(HorizontalAlignment hAlign, VerticalAlignment vAlign,\n                           double hGap, double vGap) {   \n        this.horizontalAlignment = hAlign;\n        this.verticalAlignment = vAlign;\n        this.horizontalGap = hGap;\n        this.verticalGap = vGap;\n    }\n",
        "begin_line": 91,
        "end_line": 97,
        "comment": "\r\n     * Creates a new instance.\r\n     * \r\n     * @param hAlign  the horizontal alignment (currently ignored).\r\n     * @param vAlign  the vertical alignment (currently ignored).\r\n     * @param hGap  the horizontal gap.\r\n     * @param vGap  the vertical gap.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "ColumnArrangement.ColumnArrangement#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "signature": "org.jfree.chart.block.ColumnArrangement.ColumnArrangement()",
        "snippet": "    public ColumnArrangement() {   \n    }\n",
        "begin_line": 78,
        "end_line": 79,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockContainer.BlockContainer#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.BlockContainer(org.jfree.chart.block.Arrangement)",
        "snippet": "    public BlockContainer(Arrangement arrangement) {\n        if (arrangement == null) {\n            throw new IllegalArgumentException(\"Null 'arrangement' argument.\");\n        }\n        this.arrangement = arrangement;\n        this.blocks = new ArrayList();\n    }    \n",
        "begin_line": 95,
        "end_line": 101,
        "comment": "\r\n     * Creates a new instance with the specified arrangement.\r\n     * \r\n     * @param arrangement  the arrangement manager (<code>null</code> not \r\n     *                     permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.setMargin#208",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setMargin(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setMargin(RectangleInsets margin) {\n        if (margin == null) {\n            throw new IllegalArgumentException(\"Null 'margin' argument.\");   \n        }\n        this.margin = margin;\n    }\n",
        "begin_line": 208,
        "end_line": 213,
        "comment": "\r\n     * Sets the margin (use {@link RectangleInsets#ZERO_INSETS} for no \r\n     * padding).\r\n     * \r\n     * @param margin  the margin (<code>null</code> not permitted).\r\n     * \r\n     * @see #getMargin()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.setFrame#250",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setFrame(org.jfree.chart.block.BlockFrame)",
        "snippet": "    public void setFrame(BlockFrame frame) {\n        if (frame == null) {\n            throw new IllegalArgumentException(\"Null 'frame' argument.\");   \n        }\n        this.frame = frame;\n    }\n",
        "begin_line": 250,
        "end_line": 255,
        "comment": "\r\n     * Sets the frame (or border).\r\n     * \r\n     * @param frame  the frame (<code>null</code> not permitted).\r\n     * \r\n     * @since 1.0.5\r\n     * @see #getFrame()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.JFreeChart#363",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.JFreeChart(java.lang.String, java.awt.Font, org.jfree.chart.plot.Plot, boolean)",
        "snippet": "    public JFreeChart(String title, Font titleFont, Plot plot, \n                      boolean createLegend) {\n\n        if (plot == null) {\n            throw new NullPointerException(\"Null 'plot' argument.\");\n        }\n\n        // create storage for listeners...\n        this.progressListeners = new EventListenerList();\n        this.changeListeners = new EventListenerList();\n        this.notify = true;  // default is to notify listeners when the \n                             // chart changes\n\n        this.renderingHints = new RenderingHints(\n                RenderingHints.KEY_ANTIALIASING, \n                RenderingHints.VALUE_ANTIALIAS_ON);\n\n        this.borderVisible = false;\n        this.borderStroke = new BasicStroke(1.0f);\n        this.borderPaint = Color.black;\n\n        this.padding = RectangleInsets.ZERO_INSETS;\n        \n        this.plot = plot;\n        plot.addChangeListener(this);\n\n        this.subtitles = new ArrayList();\n\n        // create a legend, if requested...\n        if (createLegend) {\n            LegendTitle legend = new LegendTitle(this.plot);\n            legend.setMargin(new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n            legend.setFrame(new LineBorder());\n            legend.setBackgroundPaint(Color.white);\n            legend.setPosition(RectangleEdge.BOTTOM);\n            this.subtitles.add(legend);\n            legend.addChangeListener(this);\n        }\n\n        // add the chart title, if one has been specified...\n        if (title != null) {\n            if (titleFont == null) {\n                titleFont = DEFAULT_TITLE_FONT;\n            }\n            this.title = new TextTitle(title, titleFont);\n            this.title.addChangeListener(this);\n        }\n\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n\n        this.backgroundImage = DEFAULT_BACKGROUND_IMAGE;\n        this.backgroundImageAlignment = DEFAULT_BACKGROUND_IMAGE_ALIGNMENT;\n        this.backgroundImageAlpha = DEFAULT_BACKGROUND_IMAGE_ALPHA;\n\n    }\n",
        "begin_line": 363,
        "end_line": 417,
        "comment": "\r\n     * Creates a new chart with the given title and plot.  The \r\n     * <code>createLegend</code> argument specifies whether or not a legend\r\n     * should be added to the chart.  \r\n     * <br><br>\r\n     * Note that the  {@link ChartFactory} class contains a range \r\n     * of static methods that will return ready-made charts, and often this\r\n     * is a more convenient way to create charts than using this constructor.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param titleFont  the font for displaying the chart title \r\n     *                   (<code>null</code> permitted).\r\n     * @param plot  controller of the visual representation of the data \r\n     *              (<code>null</code> not permitted).\r\n     * @param createLegend  a flag indicating whether or not a legend should   \r\n     *                      be created for the chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextTitle.TextTitle#186",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font)",
        "snippet": "    public TextTitle(String text, Font font) {\n        this(text, font, TextTitle.DEFAULT_TEXT_PAINT, Title.DEFAULT_POSITION,\n                Title.DEFAULT_HORIZONTAL_ALIGNMENT, \n                Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING);\n    }\n",
        "begin_line": 186,
        "end_line": 190,
        "comment": "\r\n     * Creates a new title, using default attributes where necessary.\r\n     *\r\n     * @param text  the title text (<code>null</code> not permitted).\r\n     * @param font  the title font (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextTitle.TextTitle#205",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font, java.awt.Paint, org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public TextTitle(String text, Font font, Paint paint, \n                     RectangleEdge position, \n                     HorizontalAlignment horizontalAlignment, \n                     VerticalAlignment verticalAlignment,\n                     RectangleInsets padding) {\n\n        super(position, horizontalAlignment, verticalAlignment, padding);\n        \n        if (text == null) {\n            throw new NullPointerException(\"Null 'text' argument.\");\n        }\n        if (font == null) {\n            throw new NullPointerException(\"Null 'font' argument.\");\n        }\n        if (paint == null) {\n            throw new NullPointerException(\"Null 'paint' argument.\");\n        }\n        this.text = text;\n        this.font = font;\n        this.paint = paint;\n        // the textAlignment and the horizontalAlignment are separate things,\n        // but it makes sense for the default textAlignment to match the\n        // title's horizontal alignment...\n        this.textAlignment = horizontalAlignment;\n        this.backgroundPaint = null;\n        this.content = null;\n        this.toolTipText = null;\n        this.urlText = null;\n        \n    }\n",
        "begin_line": 205,
        "end_line": 234,
        "comment": "\r\n     * Creates a new title.\r\n     *\r\n     * @param text  the text for the title (<code>null</code> not permitted).\r\n     * @param font  the title font (<code>null</code> not permitted).\r\n     * @param paint  the title paint (<code>null</code> not permitted).\r\n     * @param position  the title position (<code>null</code> not permitted).\r\n     * @param horizontalAlignment  the horizontal alignment (<code>null</code> \r\n     *                             not permitted).\r\n     * @param verticalAlignment  the vertical alignment (<code>null</code> not \r\n     *                           permitted).\r\n     * @param padding  the space to leave around the outside of the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "VerticalAlignment.VerticalAlignment#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "signature": "org.jfree.chart.util.VerticalAlignment.VerticalAlignment(java.lang.String)",
        "snippet": "    private VerticalAlignment(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "HorizontalAlignment.HorizontalAlignment#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "signature": "org.jfree.chart.util.HorizontalAlignment.HorizontalAlignment(java.lang.String)",
        "snippet": "    private HorizontalAlignment(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProjectInfo.ProjectInfo#67",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.ProjectInfo()",
        "snippet": "    public ProjectInfo() {\n        // nothing required\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Constructs an empty project info object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProjectInfo.setLogo#110",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setLogo(java.awt.Image)",
        "snippet": "    public void setLogo(final Image logo) {\n        this.logo = logo;\n    }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n     * Sets the project logo.\n     *\n     * @param logo  the project logo.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProjectInfo.setLicenceText#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setLicenceText(java.lang.String)",
        "snippet": "    public void setLicenceText(final String licenceText) {\n        this.licenceText = licenceText;\n    }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n     * Sets the project licence text.\n     *\n     * @param licenceText  the licence text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProjectInfo.setContributors#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setContributors(java.util.List)",
        "snippet": "    public void setContributors(final List contributors) {\n        this.contributors = contributors;\n    }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n     * Sets the list of contributors.\n     *\n     * @param contributors  the list of contributors.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Licences.getInstance#798",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "class_name": "org.jfree.chart.ui.Licences",
        "signature": "org.jfree.chart.ui.Licences.getInstance()",
        "snippet": "    public static Licences getInstance() {\n        if (singleton == null) {\n            singleton = new Licences();\n        }\n        return singleton;\n    }\n",
        "begin_line": 798,
        "end_line": 803,
        "comment": "\n     * Returns a reference to this class.\n     *\n     * @return the instance reference.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Licences.getLGPL#821",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "class_name": "org.jfree.chart.ui.Licences",
        "signature": "org.jfree.chart.ui.Licences.getLGPL()",
        "snippet": "    public String getLGPL() {\n        return LGPL;\n    }\n",
        "begin_line": 821,
        "end_line": 823,
        "comment": "\n     * Returns the LGPL text in a non static way to prevent the compiler\n     * to copy the contents of the field.\n     *\n     * @return the LGPL licence text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Library.Library#82",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.Library()",
        "snippet": "    protected Library() {\n        // nothing required\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Creates a new library reference.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Library.setInfo#127",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setInfo(java.lang.String)",
        "snippet": "    protected void setInfo(String info) {\n        this.info = info;\n    }\n",
        "begin_line": 127,
        "end_line": 129,
        "comment": "\n     * Sets the project info.\n     * \n     * @param info  the project info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Library.setLicenceName#136",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setLicenceName(java.lang.String)",
        "snippet": "    protected void setLicenceName(String licenceName) {\n        this.licenceName = licenceName;\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\n     * Sets the licence name.\n     * \n     * @param licenceName  the licence name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Library.setName#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setName(java.lang.String)",
        "snippet": "    protected void setName(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n     * Sets the project name.\n     * \n     * @param name  the project name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Library.setVersion#154",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setVersion(java.lang.String)",
        "snippet": "    protected void setVersion(String version) {\n        this.version = version;\n    }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "\n     * Sets the version identifier.\n     * \n     * @param version  the version identifier.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Contributor.Contributor#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Contributor.java",
        "class_name": "org.jfree.chart.ui.Contributor",
        "signature": "org.jfree.chart.ui.Contributor.Contributor(java.lang.String, java.lang.String)",
        "snippet": "    public Contributor(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\n     * Creates a new contributor.\n     *\n     * @param name  the name.\n     * @param email  the e-mail address.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.BasicProjectInfo#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.BasicProjectInfo()",
        "snippet": "    public BasicProjectInfo() {\n        this.libraries = new ArrayList();\n        this.optionalLibraries = new ArrayList();\n    }\n",
        "begin_line": 145,
        "end_line": 148,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.setCopyright#197",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setCopyright(java.lang.String)",
        "snippet": "    public void setCopyright(String copyright) {\n        this.copyright = copyright;\n    }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "\n     * Sets the project copyright statement.\n     *\n     * @param copyright  the project copyright statement.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.setInfo#206",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setInfo(java.lang.String)",
        "snippet": "    public void setInfo(String info) {\n        super.setInfo(info);\n    }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n     * Sets the project info string (for example, this could be the project URL).\n     * \n     * @param info  the info string.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.setLicenceName#215",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setLicenceName(java.lang.String)",
        "snippet": "    public void setLicenceName(String licence) {\n        super.setLicenceName(licence);\n    }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n     * Sets the license name.\n     * \n     * @param licence  the license name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.setName#224",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setName(java.lang.String)",
        "snippet": "    public void setName(String name) {\n        super.setName(name);\n    }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n     * Sets the project name.\n     * \n     * @param name  the project name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicProjectInfo.setVersion#233",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setVersion(java.lang.String)",
        "snippet": "    public void setVersion(String version) {\n        super.setVersion(version);\n    }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n     * Sets the project version number.\n     * \n     * @param version  the version number.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.Title#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.Title(org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    protected Title(RectangleEdge position,\n                    HorizontalAlignment horizontalAlignment, \n                    VerticalAlignment verticalAlignment,\n                    RectangleInsets padding) {\n\n        // check arguments...\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");\n        }\n        if (horizontalAlignment == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'horizontalAlignment' argument.\");\n        }\n\n        if (verticalAlignment == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'verticalAlignment' argument.\");\n        }\n        if (padding == null) {\n            throw new IllegalArgumentException(\"Null 'spacer' argument.\");\n        }\n\n        this.position = position;\n        this.horizontalAlignment = horizontalAlignment;\n        this.verticalAlignment = verticalAlignment;\n        setPadding(padding);\n        this.listenerList = new EventListenerList();\n        this.notify = true;\n\n    }\n",
        "begin_line": 169,
        "end_line": 198,
        "comment": "\r\n     * Creates a new title.\r\n     *\r\n     * @param position  the position of the title (<code>null</code> not \r\n     *                  permitted).\r\n     * @param horizontalAlignment  the horizontal alignment of the title (LEFT,\r\n     *                             CENTER or RIGHT, <code>null</code> not \r\n     *                             permitted).\r\n     * @param verticalAlignment  the vertical alignment of the title (TOP, \r\n     *                           MIDDLE or BOTTOM, <code>null</code> not \r\n     *                           permitted).\r\n     * @param padding  the amount of space to leave around the outside of the \r\n     *                 title (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "Title.addChangeListener#336",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.addChangeListener(org.jfree.chart.event.TitleChangeListener)",
        "snippet": "    public void addChangeListener(TitleChangeListener listener) {\n        this.listenerList.add(TitleChangeListener.class, listener);\n    }\n",
        "begin_line": 336,
        "end_line": 338,
        "comment": "\r\n     * Registers an object for notification of changes to the title.\r\n     *\r\n     * @param listener  the object that is being registered.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChartResources.getContents#51",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/resources/JFreeChartResources.java",
        "class_name": "org.jfree.chart.resources.JFreeChartResources",
        "signature": "org.jfree.chart.resources.JFreeChartResources.getContents()",
        "snippet": "    public Object[][] getContents() {\n        return CONTENTS;\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\r\n     * Returns the array of strings in the resource bundle.\r\n     *\r\n     * @return The resources.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockBorder.BlockBorder#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.BlockBorder(org.jfree.chart.util.RectangleInsets, java.awt.Paint)",
        "snippet": "    public BlockBorder(RectangleInsets insets, Paint paint) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");   \n        }\n        this.insets = insets;\n        this.paint = paint;\n    }\n",
        "begin_line": 128,
        "end_line": 137,
        "comment": "\r\n     * Creates a new border.\r\n     * \r\n     * @param insets  the border insets (<code>null</code> not permitted).\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.AbstractBlock#109",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.AbstractBlock()",
        "snippet": "    protected AbstractBlock() {\n        this.id = null;\n        this.width = 0.0;\n        this.height = 0.0;\n        this.bounds = new Rectangle2D.Float();\n        this.margin = RectangleInsets.ZERO_INSETS;\n        this.frame = BlockBorder.NONE; \n        this.padding = RectangleInsets.ZERO_INSETS;\n    }\n",
        "begin_line": 109,
        "end_line": 117,
        "comment": "\r\n     * Creates a new block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.setPadding#276",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setPadding(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setPadding(RectangleInsets padding) {\n        if (padding == null) {\n            throw new IllegalArgumentException(\"Null 'padding' argument.\");   \n        }\n        this.padding = padding;\n    }\n",
        "begin_line": 276,
        "end_line": 281,
        "comment": "\r\n     * Sets the padding (use {@link RectangleInsets#ZERO_INSETS} for no \r\n     * padding).\r\n     * \r\n     * @param padding  the padding (<code>null</code> not permitted).\r\n     * \r\n     * @see #getPadding()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleEdge.RectangleEdge#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.RectangleEdge(java.lang.String)",
        "snippet": "    private RectangleEdge(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0924
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.addChangeListener#867",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.addChangeListener(org.jfree.chart.event.PlotChangeListener)",
        "snippet": "    public void addChangeListener(PlotChangeListener listener) {\n        this.listenerList.add(PlotChangeListener.class, listener);\n    }\n",
        "begin_line": 867,
        "end_line": 869,
        "comment": "\r\n     * Registers an object for notification of changes to the plot.\r\n     *\r\n     * @param listener  the object to be registered.\r\n     * \r\n     * @see #removeChangeListener(PlotChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0924
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetGroup.DatasetGroup#62",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "class_name": "org.jfree.data.general.DatasetGroup",
        "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup()",
        "snippet": "    public DatasetGroup() {\n        super();\n        this.id = \"NOID\";\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Constructs a new group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0921
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.AbstractDataset#94",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset()",
        "snippet": "    protected AbstractDataset() {\n        this.group = new DatasetGroup();\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "\r\n     * Constructs a dataset. By default, the dataset is assigned to its own \r\n     * group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0921
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleAnchor.RectangleAnchor#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.RectangleAnchor(java.lang.String)",
        "snippet": "    private RectangleAnchor(final String name) {\n        this.name = name;\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0905
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.Plot#284",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.Plot()",
        "snippet": "    protected Plot() {\n\n        this.parent = null;\n        this.insets = DEFAULT_INSETS;\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n        this.backgroundAlpha = DEFAULT_BACKGROUND_ALPHA;\n        this.backgroundImage = null;\n        this.outlineVisible = true;\n        this.outlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.outlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.foregroundAlpha = DEFAULT_FOREGROUND_ALPHA;\n\n        this.noDataMessage = null;\n        this.noDataMessageFont = new Font(\"SansSerif\", Font.PLAIN, 12);\n        this.noDataMessagePaint = Color.black;\n\n        this.drawingSupplier = new DefaultDrawingSupplier();\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 284,
        "end_line": 304,
        "comment": "\r\n     * Creates a new plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0791
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier()",
        "snippet": "    public DefaultDrawingSupplier() {\n\n        this(DEFAULT_PAINT_SEQUENCE, DEFAULT_FILL_PAINT_SEQUENCE,\n             DEFAULT_OUTLINE_PAINT_SEQUENCE,\n             DEFAULT_STROKE_SEQUENCE,\n             DEFAULT_OUTLINE_STROKE_SEQUENCE,\n             DEFAULT_SHAPE_SEQUENCE);\n\n    }\n",
        "begin_line": 148,
        "end_line": 156,
        "comment": "\r\n     * Creates a new supplier, with default sequences for fill paint, outline \r\n     * paint, stroke and shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0791
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#194",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])",
        "snippet": "    public DefaultDrawingSupplier(Paint[] paintSequence, \n            Paint[] fillPaintSequence, Paint[] outlinePaintSequence,\n            Stroke[] strokeSequence, Stroke[] outlineStrokeSequence,\n            Shape[] shapeSequence) {\n\n        this.paintSequence = paintSequence;\n        this.fillPaintSequence = fillPaintSequence;\n        this.outlinePaintSequence = outlinePaintSequence;\n        this.strokeSequence = strokeSequence;\n        this.outlineStrokeSequence = outlineStrokeSequence;\n        this.shapeSequence = shapeSequence;\n    }\n",
        "begin_line": 194,
        "end_line": 205,
        "comment": "\r\n     * Creates a new supplier.\r\n     *\r\n     * @param paintSequence  the paint sequence.\r\n     * @param fillPaintSequence  the fill paint sequence.\r\n     * @param outlinePaintSequence  the outline paint sequence.\r\n     * @param strokeSequence  the stroke sequence.\r\n     * @param outlineStrokeSequence  the outline stroke sequence.\r\n     * @param shapeSequence  the shape sequence.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0791
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.createStandardSeriesShapes#287",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes()",
        "snippet": "    public static Shape[] createStandardSeriesShapes() {\n\n        Shape[] result = new Shape[10];\n\n        double size = 6.0;\n        double delta = size / 2.0;\n        int[] xpoints = null;\n        int[] ypoints = null;\n\n        // square\n        result[0] = new Rectangle2D.Double(-delta, -delta, size, size);\n        // circle\n        result[1] = new Ellipse2D.Double(-delta, -delta, size, size);\n\n        // up-pointing triangle\n        xpoints = intArray(0.0, delta, -delta);\n        ypoints = intArray(-delta, delta, delta);\n        result[2] = new Polygon(xpoints, ypoints, 3);\n\n        // diamond\n        xpoints = intArray(0.0, delta, 0.0, -delta);\n        ypoints = intArray(-delta, 0.0, delta, 0.0);\n        result[3] = new Polygon(xpoints, ypoints, 4);\n\n        // horizontal rectangle\n        result[4] = new Rectangle2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // down-pointing triangle\n        xpoints = intArray(-delta, +delta, 0.0);\n        ypoints = intArray(-delta, -delta, delta);\n        result[5] = new Polygon(xpoints, ypoints, 3);\n\n        // horizontal ellipse\n        result[6] = new Ellipse2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // right-pointing triangle\n        xpoints = intArray(-delta, delta, -delta);\n        ypoints = intArray(-delta, 0.0, delta);\n        result[7] = new Polygon(xpoints, ypoints, 3);\n\n        // vertical rectangle\n        result[8] = new Rectangle2D.Double(-delta / 2, -delta, size / 2, size);\n\n        // left-pointing triangle\n        xpoints = intArray(-delta, delta, delta);\n        ypoints = intArray(0.0, -delta, +delta);\n        result[9] = new Polygon(xpoints, ypoints, 3);\n\n        return result;\n\n    }\n",
        "begin_line": 287,
        "end_line": 337,
        "comment": "\r\n     * Creates an array of standard shapes to display for the items in series \r\n     * on charts.\r\n     *\r\n     * @return The array of shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0791
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.intArray#516",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c) {\n        return new int[] {(int) a, (int) b, (int) c};\n    }\n",
        "begin_line": 516,
        "end_line": 518,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     *\r\n     * @return int[3] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0791
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.intArray#531",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c, double d) {\n        return new int[] {(int) a, (int) b, (int) c, (int) d};\n    }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     * @param d  t\r\n     *\r\n     * @return int[4] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0791
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartColor.createDefaultPaintArray#149",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "class_name": "org.jfree.chart.ChartColor",
        "signature": "org.jfree.chart.ChartColor.createDefaultPaintArray()",
        "snippet": "    public static Paint[] createDefaultPaintArray() {\n\n        return new Paint[] {\n            new Color(0xFF, 0x55, 0x55),\n            new Color(0x55, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0x55),\n            new Color(0xFF, 0xFF, 0x55),\n            new Color(0xFF, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0xFF),\n            Color.pink,\n            Color.gray,\n            ChartColor.DARK_RED,\n            ChartColor.DARK_BLUE,\n            ChartColor.DARK_GREEN,\n            ChartColor.DARK_YELLOW,\n            ChartColor.DARK_MAGENTA,\n            ChartColor.DARK_CYAN,\n            Color.darkGray,\n            ChartColor.LIGHT_RED,\n            ChartColor.LIGHT_BLUE,\n            ChartColor.LIGHT_GREEN,\n            ChartColor.LIGHT_YELLOW,\n            ChartColor.LIGHT_MAGENTA,\n            ChartColor.LIGHT_CYAN,\n            Color.lightGray,\n            ChartColor.VERY_DARK_RED,\n            ChartColor.VERY_DARK_BLUE,\n            ChartColor.VERY_DARK_GREEN,\n            ChartColor.VERY_DARK_YELLOW,\n            ChartColor.VERY_DARK_MAGENTA,\n            ChartColor.VERY_DARK_CYAN,\n            ChartColor.VERY_LIGHT_RED,\n            ChartColor.VERY_LIGHT_BLUE,\n            ChartColor.VERY_LIGHT_GREEN,\n            ChartColor.VERY_LIGHT_YELLOW,\n            ChartColor.VERY_LIGHT_MAGENTA,\n            ChartColor.VERY_LIGHT_CYAN\n        };\n    }\n",
        "begin_line": 149,
        "end_line": 187,
        "comment": "\r\n     * Convenience method to return an array of <code>Paint</code> objects that\r\n     * represent the pre-defined colors in the <code>Color<code> and \r\n     * <code>ChartColor</code> objects.\r\n     *\r\n     * @return An array of objects with the <code>Paint</code> interface.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0791
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.RectangleInsets#100",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double)",
        "snippet": "    public RectangleInsets(double top, double left, double bottom, \n            double right) {\n        this(UnitType.ABSOLUTE, top, left, bottom, right);   \n    }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "\n     * Creates a new instance with the specified insets (as 'absolute' units).\n     * \n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0758
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.RectangleInsets#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double)",
        "snippet": "    public RectangleInsets(UnitType unitType, double top, double left, \n                           double bottom, double right) {\n        if (unitType == null) {\n            throw new IllegalArgumentException(\"Null 'unitType' argument.\");\n        }\n        this.unitType = unitType;\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n",
        "begin_line": 115,
        "end_line": 125,
        "comment": "\n     * Creates a new instance.\n     * \n     * @param unitType  absolute or relative units (<code>null</code> not \n     *                  permitted).\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0758
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnitType.UnitType#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.UnitType(java.lang.String)",
        "snippet": "    private UnitType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.075
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectList.ObjectList#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.ObjectList()",
        "snippet": "    public ObjectList() {\n    }\n",
        "begin_line": 58,
        "end_line": 59,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0733
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList()",
        "snippet": "    protected AbstractObjectList() {\n        this(DEFAULT_INITIAL_CAPACITY);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Creates a new list with the default initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0733
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity) {\n        this (initialCapacity, initialCapacity);\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0733
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity, int increment) {\n        this.objects = new Object[initialCapacity];\n        this.increment = increment;\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\n     * Creates a new list.\n     * \n     * @param initialCapacity  the initial capacity.\n     * @param increment  the increment.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0733
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEventType.ChartChangeEventType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String)",
        "snippet": "    private ChartChangeEventType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0729
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object)",
        "snippet": "    public ChartChangeEvent(Object source) {\n        this(source, null, ChartChangeEventType.GENERAL);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, \r\n     *                an axis etc.)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0729
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public ChartChangeEvent(Object source, JFreeChart chart, \n                            ChartChangeEventType type) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an\r\n                      axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0729
        },
        "num_failing_tests": 1
    }
]