[
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.StringUtilsEqualsIndexOfTest(java.lang.String)",
        "snippet": "    public StringUtilsEqualsIndexOfTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringUtilsEqualsIndexOfTest.class);\n        suite.setName(\"StringUtilsEqualsIndexOf Tests\");\n        return suite;\n    }\n",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 76)",
            "(line 50,col 9)-(line 50,col 56)",
            "(line 51,col 9)-(line 51,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n    }\n",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(true, StringUtils.equals(null, null));\n        assertEquals(true, StringUtils.equals(FOO, FOO));\n        assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));\n        assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));\n        assertEquals(false, StringUtils.equals(FOO, BAR));\n        assertEquals(false, StringUtils.equals(FOO, null));\n        assertEquals(false, StringUtils.equals(null, FOO));\n    }\n",
        "begin_line": 66,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 59)",
            "(line 68,col 9)-(line 68,col 57)",
            "(line 69,col 9)-(line 69,col 94)",
            "(line 70,col 9)-(line 70,col 95)",
            "(line 71,col 9)-(line 71,col 58)",
            "(line 72,col 9)-(line 72,col 59)",
            "(line 73,col 9)-(line 73,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testEqualsIgnoreCase()",
        "snippet": "    public void testEqualsIgnoreCase() {\n        assertEquals(true, StringUtils.equalsIgnoreCase(null, null));\n        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO));\n        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));\n        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));\n        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, BAR));\n        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, null));\n        assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO));\n    }\n",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 69)",
            "(line 78,col 9)-(line 78,col 67)",
            "(line 79,col 9)-(line 79,col 104)",
            "(line 80,col 9)-(line 80,col 104)",
            "(line 81,col 9)-(line 81,col 68)",
            "(line 82,col 9)-(line 82,col 69)",
            "(line 83,col 9)-(line 83,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_char()",
        "snippet": "    public void testIndexOf_char() {\n        assertEquals(-1, StringUtils.indexOf(null, ' '));\n        assertEquals(-1, StringUtils.indexOf(\"\", ' '));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a'));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b'));\n    }\n",
        "begin_line": 87,
        "end_line": 92,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 57)",
            "(line 89,col 9)-(line 89,col 55)",
            "(line 90,col 9)-(line 90,col 62)",
            "(line 91,col 9)-(line 91,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_charInt()",
        "snippet": "    public void testIndexOf_charInt() {\n        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));\n        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));\n        assertEquals(-1, StringUtils.indexOf(\"\", ' ', 0));\n        assertEquals(-1, StringUtils.indexOf(\"\", ' ', -1));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a', 0));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', 0));\n        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", 'b', 3));\n        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", 'b', 9));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', -1));\n    }\n",
        "begin_line": 94,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 60)",
            "(line 96,col 9)-(line 96,col 61)",
            "(line 97,col 9)-(line 97,col 58)",
            "(line 98,col 9)-(line 98,col 59)",
            "(line 99,col 9)-(line 99,col 65)",
            "(line 100,col 9)-(line 100,col 65)",
            "(line 101,col 9)-(line 101,col 65)",
            "(line 102,col 9)-(line 102,col 66)",
            "(line 103,col 9)-(line 103,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_String()",
        "snippet": "    public void testIndexOf_String() {\n        assertEquals(-1, StringUtils.indexOf(null, null));\n        assertEquals(-1, StringUtils.indexOf(\"\", null));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\"));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\"));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\n        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"\"));\n    }\n",
        "begin_line": 106,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 58)",
            "(line 108,col 9)-(line 108,col 56)",
            "(line 109,col 9)-(line 109,col 53)",
            "(line 110,col 9)-(line 110,col 62)",
            "(line 111,col 9)-(line 111,col 62)",
            "(line 112,col 9)-(line 112,col 63)",
            "(line 113,col 9)-(line 113,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testOrdinalIndexOf()",
        "snippet": "    public void testOrdinalIndexOf() {\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MIN_VALUE));\n        \n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", -1));\n\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 0));\n\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 1));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 1));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1));\n        assertEquals(2, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1));\n        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1));\n\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 2));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 2));\n        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2));\n        assertEquals(5, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2));\n        assertEquals(4, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2));\n        \n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MAX_VALUE));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MAX_VALUE));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MAX_VALUE));\n        \n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 0));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 1));\n        assertEquals(1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 2));\n        assertEquals(2, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 3));\n        assertEquals(3, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 4));\n        assertEquals(4, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 5));\n        assertEquals(5, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 6));\n        assertEquals(6, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 7));\n        assertEquals(7, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 8));\n        assertEquals(8, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 9));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 10));\n    }\n",
        "begin_line": 116,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 84)",
            "(line 118,col 9)-(line 118,col 82)",
            "(line 119,col 9)-(line 119,col 80)",
            "(line 120,col 9)-(line 120,col 89)",
            "(line 121,col 9)-(line 121,col 89)",
            "(line 122,col 9)-(line 122,col 90)",
            "(line 123,col 9)-(line 123,col 88)",
            "(line 125,col 9)-(line 125,col 69)",
            "(line 126,col 9)-(line 126,col 67)",
            "(line 127,col 9)-(line 127,col 65)",
            "(line 128,col 9)-(line 128,col 74)",
            "(line 129,col 9)-(line 129,col 74)",
            "(line 130,col 9)-(line 130,col 75)",
            "(line 131,col 9)-(line 131,col 73)",
            "(line 133,col 9)-(line 133,col 68)",
            "(line 134,col 9)-(line 134,col 66)",
            "(line 135,col 9)-(line 135,col 64)",
            "(line 136,col 9)-(line 136,col 73)",
            "(line 137,col 9)-(line 137,col 73)",
            "(line 138,col 9)-(line 138,col 74)",
            "(line 139,col 9)-(line 139,col 72)",
            "(line 141,col 9)-(line 141,col 68)",
            "(line 142,col 9)-(line 142,col 66)",
            "(line 143,col 9)-(line 143,col 63)",
            "(line 144,col 9)-(line 144,col 72)",
            "(line 145,col 9)-(line 145,col 72)",
            "(line 146,col 9)-(line 146,col 73)",
            "(line 147,col 9)-(line 147,col 71)",
            "(line 149,col 9)-(line 149,col 68)",
            "(line 150,col 9)-(line 150,col 66)",
            "(line 151,col 9)-(line 151,col 63)",
            "(line 152,col 9)-(line 152,col 72)",
            "(line 153,col 9)-(line 153,col 72)",
            "(line 154,col 9)-(line 154,col 73)",
            "(line 155,col 9)-(line 155,col 71)",
            "(line 157,col 9)-(line 157,col 84)",
            "(line 158,col 9)-(line 158,col 82)",
            "(line 159,col 9)-(line 159,col 79)",
            "(line 160,col 9)-(line 160,col 89)",
            "(line 161,col 9)-(line 161,col 89)",
            "(line 162,col 9)-(line 162,col 90)",
            "(line 163,col 9)-(line 163,col 87)",
            "(line 165,col 9)-(line 165,col 74)",
            "(line 166,col 9)-(line 166,col 73)",
            "(line 167,col 9)-(line 167,col 73)",
            "(line 168,col 9)-(line 168,col 73)",
            "(line 169,col 9)-(line 169,col 73)",
            "(line 170,col 9)-(line 170,col 73)",
            "(line 171,col 9)-(line 171,col 73)",
            "(line 172,col 9)-(line 172,col 73)",
            "(line 173,col 9)-(line 173,col 73)",
            "(line 174,col 9)-(line 174,col 73)",
            "(line 175,col 9)-(line 175,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_StringInt()",
        "snippet": "    public void testIndexOf_StringInt() {\n        assertEquals(-1, StringUtils.indexOf(null, null, 0));\n        assertEquals(-1, StringUtils.indexOf(null, null, -1));\n        assertEquals(-1, StringUtils.indexOf(null, \"\", 0));\n        assertEquals(-1, StringUtils.indexOf(null, \"\", -1));\n        assertEquals(-1, StringUtils.indexOf(\"\", null, 0));\n        assertEquals(-1, StringUtils.indexOf(\"\", null, -1));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\", 0));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\", -1));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\", 9));\n        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", 0));\n        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", -1));\n        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 9));\n        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 3));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\", 0));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", 0));\n        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\", 0));\n        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", \"b\", 3));\n        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", \"b\", 9));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", -1));\n        assertEquals(2,StringUtils.indexOf(\"aabaabaa\", \"\", 2)); \n    }\n",
        "begin_line": 178,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 61)",
            "(line 180,col 9)-(line 180,col 62)",
            "(line 181,col 9)-(line 181,col 59)",
            "(line 182,col 9)-(line 182,col 60)",
            "(line 183,col 9)-(line 183,col 59)",
            "(line 184,col 9)-(line 184,col 60)",
            "(line 185,col 9)-(line 185,col 56)",
            "(line 186,col 9)-(line 186,col 57)",
            "(line 187,col 9)-(line 187,col 56)",
            "(line 188,col 9)-(line 188,col 59)",
            "(line 189,col 9)-(line 189,col 60)",
            "(line 190,col 9)-(line 190,col 59)",
            "(line 191,col 9)-(line 191,col 59)",
            "(line 192,col 9)-(line 192,col 65)",
            "(line 193,col 9)-(line 193,col 65)",
            "(line 194,col 9)-(line 194,col 66)",
            "(line 195,col 9)-(line 195,col 65)",
            "(line 196,col 9)-(line 196,col 66)",
            "(line 197,col 9)-(line 197,col 66)",
            "(line 198,col 9)-(line 198,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_char()",
        "snippet": "    public void testLastIndexOf_char() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' '));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a'));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b'));\n    }\n",
        "begin_line": 202,
        "end_line": 207,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 61)",
            "(line 204,col 9)-(line 204,col 59)",
            "(line 205,col 9)-(line 205,col 66)",
            "(line 206,col 9)-(line 206,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_charInt()",
        "snippet": "    public void testLastIndexOf_charInt() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));\n        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', -1));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 8));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8));\n        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 3));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9));\n        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1));\n        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0));\n    }\n",
        "begin_line": 209,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 64)",
            "(line 211,col 9)-(line 211,col 65)",
            "(line 212,col 9)-(line 212,col 62)",
            "(line 213,col 9)-(line 213,col 63)",
            "(line 214,col 9)-(line 214,col 69)",
            "(line 215,col 9)-(line 215,col 69)",
            "(line 216,col 9)-(line 216,col 69)",
            "(line 217,col 9)-(line 217,col 69)",
            "(line 218,col 9)-(line 218,col 71)",
            "(line 219,col 9)-(line 219,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_String()",
        "snippet": "    public void testLastIndexOf_String() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, null));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", null));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"a\"));\n        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\"));\n        assertEquals(8, StringUtils.lastIndexOf(\"aabaabaa\", \"\"));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\"));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\"));\n        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\"));\n    }\n",
        "begin_line": 222,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 62)",
            "(line 224,col 9)-(line 224,col 60)",
            "(line 225,col 9)-(line 225,col 59)",
            "(line 226,col 9)-(line 226,col 57)",
            "(line 227,col 9)-(line 227,col 65)",
            "(line 228,col 9)-(line 228,col 66)",
            "(line 229,col 9)-(line 229,col 66)",
            "(line 230,col 9)-(line 230,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_StringInt()",
        "snippet": "    public void testLastIndexOf_StringInt() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));\n        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));\n        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", -1));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, -1));\n        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"\", -1));\n        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 9));\n        assertEquals(0, StringUtils.lastIndexOf(\"abc\", \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"abc\", \"\", -1));\n        assertEquals(3, StringUtils.lastIndexOf(\"abc\", \"\", 9));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8));\n        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8));\n        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 3));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9));\n        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1));\n        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0));\n        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0));\n    }\n",
        "begin_line": 233,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 65)",
            "(line 235,col 9)-(line 235,col 66)",
            "(line 236,col 9)-(line 236,col 63)",
            "(line 237,col 9)-(line 237,col 64)",
            "(line 238,col 9)-(line 238,col 63)",
            "(line 239,col 9)-(line 239,col 64)",
            "(line 240,col 9)-(line 240,col 60)",
            "(line 241,col 9)-(line 241,col 62)",
            "(line 242,col 9)-(line 242,col 60)",
            "(line 243,col 9)-(line 243,col 63)",
            "(line 244,col 9)-(line 244,col 65)",
            "(line 245,col 9)-(line 245,col 63)",
            "(line 246,col 9)-(line 246,col 69)",
            "(line 247,col 9)-(line 247,col 69)",
            "(line 248,col 9)-(line 248,col 70)",
            "(line 249,col 9)-(line 249,col 69)",
            "(line 250,col 9)-(line 250,col 69)",
            "(line 251,col 9)-(line 251,col 71)",
            "(line 252,col 9)-(line 252,col 70)",
            "(line 253,col 9)-(line 253,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsChar()",
        "snippet": "    public void testContainsChar() {\n        assertEquals(false, StringUtils.contains(null, ' '));\n        assertEquals(false, StringUtils.contains(\"\", ' '));\n        assertEquals(false, StringUtils.contains(\"\",null));\n        assertEquals(false, StringUtils.contains(null,null));\n        assertEquals(true, StringUtils.contains(\"abc\", 'a'));\n        assertEquals(true, StringUtils.contains(\"abc\", 'b'));\n        assertEquals(true, StringUtils.contains(\"abc\", 'c'));\n        assertEquals(false, StringUtils.contains(\"abc\", 'z'));\n    }\n",
        "begin_line": 257,
        "end_line": 266,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 61)",
            "(line 259,col 9)-(line 259,col 59)",
            "(line 260,col 9)-(line 260,col 59)",
            "(line 261,col 9)-(line 261,col 61)",
            "(line 262,col 9)-(line 262,col 61)",
            "(line 263,col 9)-(line 263,col 61)",
            "(line 264,col 9)-(line 264,col 61)",
            "(line 265,col 9)-(line 265,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsString()",
        "snippet": "    public void testContainsString() {\n        assertEquals(false, StringUtils.contains(null, null));\n        assertEquals(false, StringUtils.contains(null, \"\"));\n        assertEquals(false, StringUtils.contains(null, \"a\"));\n        assertEquals(false, StringUtils.contains(\"\", null));\n        assertEquals(true, StringUtils.contains(\"\", \"\"));\n        assertEquals(false, StringUtils.contains(\"\", \"a\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"a\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"b\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"c\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"abc\"));\n        assertEquals(false, StringUtils.contains(\"abc\", \"z\"));\n    }\n",
        "begin_line": 268,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 62)",
            "(line 270,col 9)-(line 270,col 60)",
            "(line 271,col 9)-(line 271,col 61)",
            "(line 272,col 9)-(line 272,col 60)",
            "(line 273,col 9)-(line 273,col 57)",
            "(line 274,col 9)-(line 274,col 59)",
            "(line 275,col 9)-(line 275,col 61)",
            "(line 276,col 9)-(line 276,col 61)",
            "(line 277,col 9)-(line 277,col 61)",
            "(line 278,col 9)-(line 278,col 63)",
            "(line 279,col 9)-(line 279,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_StringString()",
        "snippet": "    public void testContainsIgnoreCase_StringString() {\n        assertFalse(StringUtils.containsIgnoreCase(null, null));\n        \n        // Null tests\n        assertFalse(StringUtils.containsIgnoreCase(null, \"\"));\n        assertFalse(StringUtils.containsIgnoreCase(null, \"a\"));\n        assertFalse(StringUtils.containsIgnoreCase(null, \"abc\"));\n        \n        assertFalse(StringUtils.containsIgnoreCase(\"\", null));\n        assertFalse(StringUtils.containsIgnoreCase(\"a\", null));\n        assertFalse(StringUtils.containsIgnoreCase(\"abc\", null));\n        \n        // Match len = 0\n        assertTrue(StringUtils.containsIgnoreCase(\"\", \"\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"\"));\n\n        // Match len = 1\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"a\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"a\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"a\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"A\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"A\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"A\"));\n        \n        // Match len > 1\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"abc\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"abc\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"abc\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"ABC\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"ABC\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"ABC\"));\n    }\n",
        "begin_line": 282,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 64)",
            "(line 286,col 9)-(line 286,col 62)",
            "(line 287,col 9)-(line 287,col 63)",
            "(line 288,col 9)-(line 288,col 65)",
            "(line 290,col 9)-(line 290,col 62)",
            "(line 291,col 9)-(line 291,col 63)",
            "(line 292,col 9)-(line 292,col 65)",
            "(line 295,col 9)-(line 295,col 59)",
            "(line 296,col 9)-(line 296,col 60)",
            "(line 297,col 9)-(line 297,col 62)",
            "(line 300,col 9)-(line 300,col 61)",
            "(line 301,col 9)-(line 301,col 61)",
            "(line 302,col 9)-(line 302,col 63)",
            "(line 303,col 9)-(line 303,col 61)",
            "(line 304,col 9)-(line 304,col 61)",
            "(line 305,col 9)-(line 305,col 63)",
            "(line 308,col 9)-(line 308,col 63)",
            "(line 309,col 9)-(line 309,col 64)",
            "(line 310,col 9)-(line 310,col 67)",
            "(line 311,col 9)-(line 311,col 63)",
            "(line 312,col 9)-(line 312,col 64)",
            "(line 313,col 9)-(line 313,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_LocaleIndependence()",
        "snippet": "    public void testContainsIgnoreCase_LocaleIndependence() {\n        Locale orig = Locale.getDefault();\n\n        Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\n\n        String[][] tdata = { \n            { \"i\", \"I\" },\n            { \"I\", \"i\" },\n            { \"\\u03C2\", \"\\u03C3\" },\n            { \"\\u03A3\", \"\\u03C2\" },\n            { \"\\u03A3\", \"\\u03C3\" },\n        };\n\n        String[][] fdata = { \n            { \"\\u00DF\", \"SS\" },\n        };\n\n        try {\n            for (int i = 0; i < locales.length; i++) {\n                Locale.setDefault(locales[i]);\n                for (int j = 0; j < tdata.length; j++) {\n                    assertTrue(Locale.getDefault() + \": \" + j + \" \" + tdata[j][0] + \" \" + tdata[j][1], StringUtils\n                            .containsIgnoreCase(tdata[j][0], tdata[j][1]));\n                }\n                for (int j = 0; j < fdata.length; j++) {\n                    assertFalse(Locale.getDefault() + \": \" + j + \" \" + fdata[j][0] + \" \" + fdata[j][1], StringUtils\n                            .containsIgnoreCase(fdata[j][0], fdata[j][1]));\n                }\n            }\n        } finally {\n            Locale.setDefault(orig);\n        }\n    }\n",
        "begin_line": 316,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 42)",
            "(line 319,col 9)-(line 319,col 85)",
            "(line 321,col 9)-(line 327,col 10)",
            "(line 329,col 9)-(line 331,col 10)",
            "(line 333,col 9)-(line 347,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringarray()",
        "snippet": "    public void testIndexOfAny_StringStringarray() {\n        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));\n        assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));\n        assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));\n        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[0]));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {\"llll\"}));\n        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {\"\"}));\n        assertEquals(0, StringUtils.indexOfAny(\"\", new String[] {\"\"}));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {\"a\"}));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {null}));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));\n        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));\n    }\n",
        "begin_line": 351,
        "end_line": 366,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 352,col 9)-(line 352,col 72)",
            "(line 353,col 9)-(line 353,col 73)",
            "(line 354,col 9)-(line 354,col 74)",
            "(line 355,col 9)-(line 355,col 74)",
            "(line 356,col 9)-(line 356,col 72)",
            "(line 357,col 9)-(line 357,col 70)",
            "(line 358,col 9)-(line 358,col 68)",
            "(line 359,col 9)-(line 359,col 80)",
            "(line 360,col 9)-(line 360,col 75)",
            "(line 361,col 9)-(line 361,col 71)",
            "(line 362,col 9)-(line 362,col 73)",
            "(line 363,col 9)-(line 363,col 74)",
            "(line 364,col 9)-(line 364,col 78)",
            "(line 365,col 9)-(line 365,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOfAny_StringStringarray()",
        "snippet": "    public void testLastIndexOfAny_StringStringarray() {\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, null));\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));\n        assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));\n        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[0]));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"llll\"}));\n        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"\"}));\n        assertEquals(0, StringUtils.lastIndexOfAny(\"\", new String[] {\"\"}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {\"a\"}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {null}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));\n    }\n",
        "begin_line": 368,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 369,col 9)-(line 369,col 65)",
            "(line 370,col 9)-(line 370,col 77)",
            "(line 371,col 9)-(line 371,col 67)",
            "(line 372,col 9)-(line 372,col 78)",
            "(line 373,col 9)-(line 373,col 76)",
            "(line 374,col 9)-(line 374,col 74)",
            "(line 375,col 9)-(line 375,col 72)",
            "(line 376,col 9)-(line 376,col 84)",
            "(line 377,col 9)-(line 377,col 79)",
            "(line 378,col 9)-(line 378,col 75)",
            "(line 379,col 9)-(line 379,col 77)",
            "(line 380,col 9)-(line 380,col 78)",
            "(line 381,col 9)-(line 381,col 82)",
            "(line 382,col 9)-(line 382,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringChararray()",
        "snippet": "    public void testIndexOfAny_StringChararray() {\n        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));\n        assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"\", (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[0]));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (char[]) null)); \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", new char[0])); \n        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'z','a'})); \n        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'b','y'}));\n        assertEquals(-1, StringUtils.indexOfAny(\"ab\", new char[] {'z'}));\n    }\n",
        "begin_line": 386,
        "end_line": 400,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 387,col 9)-(line 387,col 70)",
            "(line 388,col 9)-(line 388,col 68)",
            "(line 389,col 9)-(line 389,col 77)",
            "(line 391,col 9)-(line 391,col 68)",
            "(line 392,col 9)-(line 392,col 66)",
            "(line 393,col 9)-(line 393,col 75)",
            "(line 395,col 9)-(line 395,col 78)",
            "(line 396,col 9)-(line 396,col 76)",
            "(line 397,col 9)-(line 397,col 84)",
            "(line 398,col 9)-(line 398,col 84)",
            "(line 399,col 9)-(line 399,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringString()",
        "snippet": "    public void testIndexOfAny_StringString() {\n        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));\n        assertEquals(-1, StringUtils.indexOfAny(null, \"\"));\n        assertEquals(-1, StringUtils.indexOfAny(null, \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"\", (String) null));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", \"\"));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (String) null)); \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", \"\")); \n        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", \"za\")); \n        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", \"by\"));\n        assertEquals(-1, StringUtils.indexOfAny(\"ab\", \"z\"));\n    }\n",
        "begin_line": 402,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 70)",
            "(line 404,col 9)-(line 404,col 59)",
            "(line 405,col 9)-(line 405,col 61)",
            "(line 407,col 9)-(line 407,col 68)",
            "(line 408,col 9)-(line 408,col 57)",
            "(line 409,col 9)-(line 409,col 59)",
            "(line 411,col 9)-(line 411,col 78)",
            "(line 412,col 9)-(line 412,col 67)",
            "(line 413,col 9)-(line 413,col 68)",
            "(line 414,col 9)-(line 414,col 68)",
            "(line 415,col 9)-(line 415,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsAny_StringChararray()",
        "snippet": "    public void testContainsAny_StringChararray() {\n        assertFalse(StringUtils.containsAny(null, (char[]) null));\n        assertFalse(StringUtils.containsAny(null, new char[0]));\n        assertFalse(StringUtils.containsAny(null, new char[] {'a','b'}));\n        \n        assertFalse(StringUtils.containsAny(\"\", (char[]) null));\n        assertFalse(StringUtils.containsAny(\"\", new char[0]));\n        assertFalse(StringUtils.containsAny(\"\", new char[] {'a','b'}));\n        \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (char[]) null)); \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", new char[0])); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] {'z','a'})); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] {'b','y'}));\n        assertFalse(StringUtils.containsAny(\"ab\", new char[] {'z'}));\n    }\n",
        "begin_line": 419,
        "end_line": 433,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 66)",
            "(line 421,col 9)-(line 421,col 64)",
            "(line 422,col 9)-(line 422,col 73)",
            "(line 424,col 9)-(line 424,col 64)",
            "(line 425,col 9)-(line 425,col 62)",
            "(line 426,col 9)-(line 426,col 71)",
            "(line 428,col 9)-(line 428,col 74)",
            "(line 429,col 9)-(line 429,col 72)",
            "(line 430,col 9)-(line 430,col 80)",
            "(line 431,col 9)-(line 431,col 80)",
            "(line 432,col 9)-(line 432,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsAny_StringString()",
        "snippet": "    public void testContainsAny_StringString() {\n        assertFalse(StringUtils.containsAny(null, (String) null));\n        assertFalse(StringUtils.containsAny(null, \"\"));\n        assertFalse(StringUtils.containsAny(null, \"ab\"));\n        \n        assertFalse(StringUtils.containsAny(\"\", (String) null));\n        assertFalse(StringUtils.containsAny(\"\", \"\"));\n        assertFalse(StringUtils.containsAny(\"\", \"ab\"));\n        \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (String) null)); \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", \"\")); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"za\")); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"by\"));\n        assertFalse(StringUtils.containsAny(\"ab\", \"z\"));\n    }\n",
        "begin_line": 435,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 436,col 9)-(line 436,col 66)",
            "(line 437,col 9)-(line 437,col 55)",
            "(line 438,col 9)-(line 438,col 57)",
            "(line 440,col 9)-(line 440,col 64)",
            "(line 441,col 9)-(line 441,col 53)",
            "(line 442,col 9)-(line 442,col 55)",
            "(line 444,col 9)-(line 444,col 74)",
            "(line 445,col 9)-(line 445,col 63)",
            "(line 446,col 9)-(line 446,col 64)",
            "(line 447,col 9)-(line 447,col 64)",
            "(line 448,col 9)-(line 448,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringChararray()",
        "snippet": "    public void testIndexOfAnyBut_StringChararray() {\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[0]));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[0]));\n        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'z','a'})); \n        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'b','y'})); \n        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", new char[] {'z'}));\n    }\n",
        "begin_line": 452,
        "end_line": 466,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 73)",
            "(line 454,col 9)-(line 454,col 71)",
            "(line 455,col 9)-(line 455,col 80)",
            "(line 457,col 9)-(line 457,col 71)",
            "(line 458,col 9)-(line 458,col 69)",
            "(line 459,col 9)-(line 459,col 78)",
            "(line 461,col 9)-(line 461,col 81)",
            "(line 462,col 9)-(line 462,col 79)",
            "(line 463,col 9)-(line 463,col 87)",
            "(line 464,col 9)-(line 464,col 87)",
            "(line 465,col 9)-(line 465,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringString()",
        "snippet": "    public void testIndexOfAnyBut_StringString() {\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (String) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"\"));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (String) null)); \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")); \n        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\")); \n        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"by\"));\n        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", \"z\"));\n    }\n",
        "begin_line": 468,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 469,col 73)",
            "(line 470,col 9)-(line 470,col 62)",
            "(line 471,col 9)-(line 471,col 64)",
            "(line 473,col 9)-(line 473,col 71)",
            "(line 474,col 9)-(line 474,col 60)",
            "(line 475,col 9)-(line 475,col 62)",
            "(line 477,col 9)-(line 477,col 81)",
            "(line 478,col 9)-(line 478,col 70)",
            "(line 479,col 9)-(line 479,col 71)",
            "(line 480,col 9)-(line 480,col 71)",
            "(line 481,col 9)-(line 481,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsOnly_String()",
        "snippet": "    public void testContainsOnly_String() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab\";\n        String chars1= \"b\";\n        String chars2= \"a\";\n        String chars3= \"ab\";\n        assertEquals(false, StringUtils.containsOnly(null, (String) null));\n        assertEquals(false, StringUtils.containsOnly(\"\", (String) null));\n        assertEquals(false, StringUtils.containsOnly(null, \"\"));\n        assertEquals(false, StringUtils.containsOnly(str1, \"\"));\n        assertEquals(true, StringUtils.containsOnly(\"\", \"\"));\n        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n    }\n",
        "begin_line": 485,
        "end_line": 507,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 486,col 9)-(line 486,col 26)",
            "(line 487,col 9)-(line 487,col 26)",
            "(line 488,col 9)-(line 488,col 27)",
            "(line 489,col 9)-(line 489,col 27)",
            "(line 490,col 9)-(line 490,col 27)",
            "(line 491,col 9)-(line 491,col 28)",
            "(line 492,col 9)-(line 492,col 75)",
            "(line 493,col 9)-(line 493,col 73)",
            "(line 494,col 9)-(line 494,col 64)",
            "(line 495,col 9)-(line 495,col 64)",
            "(line 496,col 9)-(line 496,col 61)",
            "(line 497,col 9)-(line 497,col 65)",
            "(line 498,col 9)-(line 498,col 68)",
            "(line 499,col 9)-(line 499,col 67)",
            "(line 500,col 9)-(line 500,col 67)",
            "(line 501,col 9)-(line 501,col 67)",
            "(line 502,col 9)-(line 502,col 68)",
            "(line 503,col 9)-(line 503,col 67)",
            "(line 504,col 9)-(line 504,col 68)",
            "(line 505,col 9)-(line 505,col 68)",
            "(line 506,col 9)-(line 506,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsOnly_Chararray()",
        "snippet": "    public void testContainsOnly_Chararray() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab\";\n        char[] chars1= {'b'};\n        char[] chars2= {'a'};\n        char[] chars3= {'a', 'b'};\n        char[] emptyChars = new char[0];\n        assertEquals(false, StringUtils.containsOnly(null, (char[]) null));\n        assertEquals(false, StringUtils.containsOnly(\"\", (char[]) null));\n        assertEquals(false, StringUtils.containsOnly(null, emptyChars));\n        assertEquals(false, StringUtils.containsOnly(str1, emptyChars));\n        assertEquals(true, StringUtils.containsOnly(\"\", emptyChars));\n        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n    }\n",
        "begin_line": 509,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 510,col 9)-(line 510,col 26)",
            "(line 511,col 9)-(line 511,col 26)",
            "(line 512,col 9)-(line 512,col 27)",
            "(line 513,col 9)-(line 513,col 29)",
            "(line 514,col 9)-(line 514,col 29)",
            "(line 515,col 9)-(line 515,col 34)",
            "(line 516,col 9)-(line 516,col 40)",
            "(line 517,col 9)-(line 517,col 75)",
            "(line 518,col 9)-(line 518,col 73)",
            "(line 519,col 9)-(line 519,col 72)",
            "(line 520,col 9)-(line 520,col 72)",
            "(line 521,col 9)-(line 521,col 69)",
            "(line 522,col 9)-(line 522,col 65)",
            "(line 523,col 9)-(line 523,col 68)",
            "(line 524,col 9)-(line 524,col 67)",
            "(line 525,col 9)-(line 525,col 67)",
            "(line 526,col 9)-(line 526,col 67)",
            "(line 527,col 9)-(line 527,col 68)",
            "(line 528,col 9)-(line 528,col 67)",
            "(line 529,col 9)-(line 529,col 68)",
            "(line 530,col 9)-(line 530,col 68)",
            "(line 531,col 9)-(line 531,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsNone_String()",
        "snippet": "    public void testContainsNone_String() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab.\";\n        String chars1= \"b\";\n        String chars2= \".\";\n        String chars3= \"cd\";\n        assertEquals(true, StringUtils.containsNone(null, (String) null));\n        assertEquals(true, StringUtils.containsNone(\"\", (String) null));\n        assertEquals(true, StringUtils.containsNone(null, \"\"));\n        assertEquals(true, StringUtils.containsNone(str1, \"\"));\n        assertEquals(true, StringUtils.containsNone(\"\", \"\"));\n        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars2));\n        assertEquals(true, StringUtils.containsNone(str1, chars3));\n        assertEquals(false, StringUtils.containsNone(str2, chars1));\n        assertEquals(true, StringUtils.containsNone(str2, chars2));\n        assertEquals(true, StringUtils.containsNone(str2, chars3));\n        assertEquals(false, StringUtils.containsNone(str3, chars1));\n        assertEquals(false, StringUtils.containsNone(str3, chars2));\n        assertEquals(true, StringUtils.containsNone(str3, chars3));\n    }\n",
        "begin_line": 534,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 535,col 9)-(line 535,col 26)",
            "(line 536,col 9)-(line 536,col 26)",
            "(line 537,col 9)-(line 537,col 28)",
            "(line 538,col 9)-(line 538,col 27)",
            "(line 539,col 9)-(line 539,col 27)",
            "(line 540,col 9)-(line 540,col 28)",
            "(line 541,col 9)-(line 541,col 74)",
            "(line 542,col 9)-(line 542,col 72)",
            "(line 543,col 9)-(line 543,col 63)",
            "(line 544,col 9)-(line 544,col 63)",
            "(line 545,col 9)-(line 545,col 61)",
            "(line 546,col 9)-(line 546,col 65)",
            "(line 547,col 9)-(line 547,col 67)",
            "(line 548,col 9)-(line 548,col 67)",
            "(line 549,col 9)-(line 549,col 67)",
            "(line 550,col 9)-(line 550,col 68)",
            "(line 551,col 9)-(line 551,col 67)",
            "(line 552,col 9)-(line 552,col 67)",
            "(line 553,col 9)-(line 553,col 68)",
            "(line 554,col 9)-(line 554,col 68)",
            "(line 555,col 9)-(line 555,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsNone_Chararray()",
        "snippet": "    public void testContainsNone_Chararray() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab.\";\n        char[] chars1= {'b'};\n        char[] chars2= {'.'};\n        char[] chars3= {'c', 'd'};\n        char[] emptyChars = new char[0];\n        assertEquals(true, StringUtils.containsNone(null, (char[]) null));\n        assertEquals(true, StringUtils.containsNone(\"\", (char[]) null));\n        assertEquals(true, StringUtils.containsNone(null, emptyChars));\n        assertEquals(true, StringUtils.containsNone(str1, emptyChars));\n        assertEquals(true, StringUtils.containsNone(\"\", emptyChars));\n        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars2));\n        assertEquals(true, StringUtils.containsNone(str1, chars3));\n        assertEquals(false, StringUtils.containsNone(str2, chars1));\n        assertEquals(true, StringUtils.containsNone(str2, chars2));\n        assertEquals(true, StringUtils.containsNone(str2, chars3));\n        assertEquals(false, StringUtils.containsNone(str3, chars1));\n        assertEquals(false, StringUtils.containsNone(str3, chars2));\n        assertEquals(true, StringUtils.containsNone(str3, chars3));\n    }\n",
        "begin_line": 558,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 559,col 9)-(line 559,col 26)",
            "(line 560,col 9)-(line 560,col 26)",
            "(line 561,col 9)-(line 561,col 28)",
            "(line 562,col 9)-(line 562,col 29)",
            "(line 563,col 9)-(line 563,col 29)",
            "(line 564,col 9)-(line 564,col 34)",
            "(line 565,col 9)-(line 565,col 40)",
            "(line 566,col 9)-(line 566,col 74)",
            "(line 567,col 9)-(line 567,col 72)",
            "(line 568,col 9)-(line 568,col 71)",
            "(line 569,col 9)-(line 569,col 71)",
            "(line 570,col 9)-(line 570,col 69)",
            "(line 571,col 9)-(line 571,col 65)",
            "(line 572,col 9)-(line 572,col 67)",
            "(line 573,col 9)-(line 573,col 67)",
            "(line 574,col 9)-(line 574,col 67)",
            "(line 575,col 9)-(line 575,col 68)",
            "(line 576,col 9)-(line 576,col 67)",
            "(line 577,col 9)-(line 577,col 67)",
            "(line 578,col 9)-(line 578,col 68)",
            "(line 579,col 9)-(line 579,col 68)",
            "(line 580,col 9)-(line 580,col 67)"
        ]
    }
]