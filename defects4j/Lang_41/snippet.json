[
    {
        "name": "ClassUtils.getShortClassName#168",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getShortClassName(java.lang.Class<?>)",
        "snippet": "    public static String getShortClassName(Class<?> cls) {\n        if (cls == null) {\n            return StringUtils.EMPTY;\n        }\n        return getShortClassName(cls.getName());\n    }\n",
        "begin_line": 168,
        "end_line": 173,
        "comment": "\n     * <p>Gets the class name minus the package name from a <code>Class</code>.</p>\n     *\n     * @param cls  the class to get the short name for.\n     * @return the class name without the package name or an empty string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClassUtils.getPackageName#228",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getPackageName(java.lang.Class<?>)",
        "snippet": "    public static String getPackageName(Class<?> cls) {\n        if (cls == null) {\n            return StringUtils.EMPTY;\n        }\n        return getPackageName(cls.getName());\n    }\n",
        "begin_line": 228,
        "end_line": 233,
        "comment": "\n     * <p>Gets the package name of a <code>Class</code>.</p>\n     *\n     * @param cls  the class to get the package name for, may be <code>null</code>.\n     * @return the package name or an empty string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClassUtils.getShortClassName#183",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getShortClassName(java.lang.String)",
        "snippet": "    public static String getShortClassName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n\n        // Handle array encoding\n            // Strip Object type encoding\n\n\n        int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        int innerIdx = className.indexOf(\n                INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);\n        String out = className.substring(lastDotIdx + 1);\n        if (innerIdx != -1) {\n            out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n        }\n        return out;\n    }\n",
        "begin_line": 183,
        "end_line": 204,
        "comment": "\n     * <p>Gets the class name minus the package name from a String.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     *\n     * @param className  the className to get the short name for\n     * @return the class name of the class without the package name or an empty string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClassUtils.getPackageName#244",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getPackageName(java.lang.String)",
        "snippet": "    public static String getPackageName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n\n        // Strip array encoding\n        // Strip Object type encoding\n\n        int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        if (i == -1) {\n            return StringUtils.EMPTY;\n        }\n        return className.substring(0, i);\n    }\n",
        "begin_line": 244,
        "end_line": 257,
        "comment": "\n     * <p>Gets the package name from a <code>String</code>.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     * <p>If the class is unpackaged, return an empty string.</p>\n     *\n     * @param className  the className to get the package name for, may be <code>null</code>\n     * @return the package name or an empty string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClassUtils.addAbbreviation#115",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.addAbbreviation(java.lang.String, java.lang.String)",
        "snippet": "    private static void addAbbreviation(String primitive, String abbreviation) {\n        abbreviationMap.put(primitive, abbreviation);\n        reverseAbbreviationMap.put(abbreviation, primitive);\n    }\n",
        "begin_line": 115,
        "end_line": 118,
        "comment": "\n     * Add primitive type abbreviation to maps of abbreviations.\n     *\n     * @param primitive Canonical name of primitive type\n     * @param abbreviation Corresponding abbreviation of primitive type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1601
        },
        "num_failing_tests": 2
    }
]