[
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultCategoryDatasetTests.class);\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.DefaultCategoryDatasetTests(java.lang.String)",
        "snippet": "    public DefaultCategoryDatasetTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"R1\", \"C1\");\n        assertEquals(new Double(1.0), d.getValue(\"R1\", \"C1\"));\n        boolean pass = false;\n        try {\n            d.getValue(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d.getValue(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 85,
        "end_line": 106,
        "comment": "\n     * Some checks for the getValue() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 64)",
            "(line 87,col 9)-(line 87,col 36)",
            "(line 88,col 9)-(line 88,col 62)",
            "(line 89,col 9)-(line 89,col 29)",
            "(line 90,col 9)-(line 95,col 9)",
            "(line 96,col 9)-(line 96,col 25)",
            "(line 98,col 9)-(line 98,col 21)",
            "(line 99,col 9)-(line 104,col 9)",
            "(line 105,col 9)-(line 105,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetValue2()",
        "snippet": "    public void testGetValue2() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        boolean pass = false;\n        try {\n            /* Number n =*/ d.getValue(0, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 111,
        "end_line": 121,
        "comment": "\n     * A simple check for the getValue(int, int) method.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 64)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 119,col 9)",
            "(line 120,col 9)-(line 120,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testIncrementValue()",
        "snippet": "    public void testIncrementValue() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.addValue(1.0, \"R1\", \"C1\");\n        d.incrementValue(2.0, \"R1\", \"C1\");\n        assertEquals(new Double(3.0), d.getValue(\"R1\", \"C1\"));\n        \n        // increment a null value\n        d.addValue(null, \"R2\", \"C1\");\n        d.incrementValue(2.0, \"R2\", \"C1\");\n        assertEquals(new Double(2.0), d.getValue(\"R2\", \"C1\"));\n        \n        // increment an unknown row\n        boolean pass = false;\n        try {\n            d.incrementValue(1.0, \"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n        \n        // increment an unknown column\n        pass = false;\n        try {\n            d.incrementValue(1.0, \"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass); \n    }\n",
        "begin_line": 126,
        "end_line": 156,
        "comment": "\n     * Some checks for the incrementValue() method.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 64)",
            "(line 128,col 9)-(line 128,col 36)",
            "(line 129,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 133,col 9)-(line 133,col 37)",
            "(line 134,col 9)-(line 134,col 42)",
            "(line 135,col 9)-(line 135,col 62)",
            "(line 138,col 9)-(line 138,col 29)",
            "(line 139,col 9)-(line 144,col 9)",
            "(line 145,col 9)-(line 145,col 25)",
            "(line 148,col 9)-(line 148,col 21)",
            "(line 149,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetRowCount()",
        "snippet": "    public void testGetRowCount() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        assertTrue(d.getRowCount() == 0);\n        \n        d.addValue(1.0, \"R1\", \"C1\");\n        assertTrue(d.getRowCount() == 1);\n        \n        d.addValue(1.0, \"R2\", \"C1\");\n        assertTrue(d.getRowCount() == 2);\n        \n        d.addValue(2.0, \"R2\", \"C1\");\n        assertTrue(d.getRowCount() == 2);\n        \n        // a row of all null values is still counted...\n        d.setValue(null, \"R2\", \"C1\");\n        assertTrue(d.getRowCount() == 2);\n    }\n",
        "begin_line": 161,
        "end_line": 177,
        "comment": "\n     * Some tests for the getRowCount() method.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 64)",
            "(line 163,col 9)-(line 163,col 41)",
            "(line 165,col 9)-(line 165,col 36)",
            "(line 166,col 9)-(line 166,col 41)",
            "(line 168,col 9)-(line 168,col 36)",
            "(line 169,col 9)-(line 169,col 41)",
            "(line 171,col 9)-(line 171,col 36)",
            "(line 172,col 9)-(line 172,col 41)",
            "(line 175,col 9)-(line 175,col 37)",
            "(line 176,col 9)-(line 176,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetColumnCount()",
        "snippet": "    public void testGetColumnCount() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        assertTrue(d.getColumnCount() == 0);\n        \n        d.addValue(1.0, \"R1\", \"C1\");\n        assertTrue(d.getColumnCount() == 1);\n        \n        d.addValue(1.0, \"R1\", \"C2\");\n        assertTrue(d.getColumnCount() == 2);\n        \n        d.addValue(2.0, \"R1\", \"C2\");\n        assertTrue(d.getColumnCount() == 2);\n        \n        // a column of all null values is still counted...\n        d.setValue(null, \"R1\", \"C2\");\n        assertTrue(d.getColumnCount() == 2);\n    }\n",
        "begin_line": 182,
        "end_line": 198,
        "comment": "\n     * Some tests for the getColumnCount() method.\n     ",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 64)",
            "(line 184,col 9)-(line 184,col 44)",
            "(line 186,col 9)-(line 186,col 36)",
            "(line 187,col 9)-(line 187,col 44)",
            "(line 189,col 9)-(line 189,col 36)",
            "(line 190,col 9)-(line 190,col 44)",
            "(line 192,col 9)-(line 192,col 36)",
            "(line 193,col 9)-(line 193,col 44)",
            "(line 196,col 9)-(line 196,col 37)",
            "(line 197,col 9)-(line 197,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultCategoryDataset d1 = new DefaultCategoryDataset();\n        d1.setValue(23.4, \"R1\", \"C1\");\n        DefaultCategoryDataset d2 = new DefaultCategoryDataset();\n        d2.setValue(23.4, \"R1\", \"C1\");\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        d1.setValue(36.5, \"R1\", \"C2\");\n        assertFalse(d1.equals(d2));\n        d2.setValue(36.5, \"R1\", \"C2\");\n        assertTrue(d1.equals(d2));\n\n        d1.setValue(null, \"R1\", \"C1\");\n        assertFalse(d1.equals(d2));\n        d2.setValue(null, \"R1\", \"C1\");\n        assertTrue(d1.equals(d2));\n    }\n",
        "begin_line": 203,
        "end_line": 220,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 65)",
            "(line 205,col 9)-(line 205,col 38)",
            "(line 206,col 9)-(line 206,col 65)",
            "(line 207,col 9)-(line 207,col 38)",
            "(line 208,col 9)-(line 208,col 34)",
            "(line 209,col 9)-(line 209,col 34)",
            "(line 211,col 9)-(line 211,col 38)",
            "(line 212,col 9)-(line 212,col 35)",
            "(line 213,col 9)-(line 213,col 38)",
            "(line 214,col 9)-(line 214,col 34)",
            "(line 216,col 9)-(line 216,col 38)",
            "(line 217,col 9)-(line 217,col 35)",
            "(line 218,col 9)-(line 218,col 38)",
            "(line 219,col 9)-(line 219,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultCategoryDataset d1 = new DefaultCategoryDataset();\n        d1.setValue(23.4, \"R1\", \"C1\");\n        DefaultCategoryDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultCategoryDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n    }\n",
        "begin_line": 225,
        "end_line": 247,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 65)",
            "(line 228,col 9)-(line 228,col 38)",
            "(line 229,col 9)-(line 229,col 41)",
            "(line 231,col 9)-(line 244,col 9)",
            "(line 245,col 9)-(line 245,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testAddValue()",
        "snippet": "    public void testAddValue() {\n        DefaultCategoryDataset d1 = new DefaultCategoryDataset();\n        d1.addValue(null, \"R1\", \"C1\");\n        assertNull(d1.getValue(\"R1\", \"C1\"));\n        d1.addValue(new Double(1.0), \"R2\", \"C1\");\n        assertEquals(new Double(1.0), d1.getValue(\"R2\", \"C1\"));\n        \n        boolean pass = false;\n        try {\n            d1.addValue(new Double(1.1), null, \"C2\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 252,
        "end_line": 267,
        "comment": "\n     * Some checks for the addValue() method.\n     ",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 65)",
            "(line 254,col 9)-(line 254,col 38)",
            "(line 255,col 9)-(line 255,col 44)",
            "(line 256,col 9)-(line 256,col 49)",
            "(line 257,col 9)-(line 257,col 63)",
            "(line 259,col 9)-(line 259,col 29)",
            "(line 260,col 9)-(line 265,col 9)",
            "(line 266,col 9)-(line 266,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testRemoveValue()",
        "snippet": "    public void testRemoveValue() {\n        DefaultCategoryDataset d = new DefaultCategoryDataset();\n        d.removeValue(\"R1\", \"C1\");\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.removeValue(\"R1\", \"C1\");\n        assertEquals(0, d.getRowCount());\n        assertEquals(0, d.getColumnCount());\n        \n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.addValue(new Double(2.0), \"R2\", \"C1\");\n        d.removeValue(\"R1\", \"C1\");\n        assertEquals(new Double(2.0), d.getValue(0, 0));\n        \n        boolean pass = false;\n        try {\n            d.removeValue(null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d.removeValue(\"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 272,
        "end_line": 302,
        "comment": "\n     * Some basic checks for the removeValue() method.\n     ",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 64)",
            "(line 274,col 9)-(line 274,col 34)",
            "(line 275,col 9)-(line 275,col 48)",
            "(line 276,col 9)-(line 276,col 34)",
            "(line 277,col 9)-(line 277,col 41)",
            "(line 278,col 9)-(line 278,col 44)",
            "(line 280,col 9)-(line 280,col 48)",
            "(line 281,col 9)-(line 281,col 48)",
            "(line 282,col 9)-(line 282,col 34)",
            "(line 283,col 9)-(line 283,col 56)",
            "(line 285,col 9)-(line 285,col 29)",
            "(line 286,col 9)-(line 291,col 9)",
            "(line 292,col 9)-(line 292,col 25)",
            "(line 294,col 9)-(line 294,col 21)",
            "(line 295,col 9)-(line 300,col 9)",
            "(line 301,col 9)-(line 301,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultCategoryDataset d1 = new DefaultCategoryDataset();\n        DefaultCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // try a dataset with some content...\n        d1.addValue(1.0, \"R1\", \"C1\");\n        d1.addValue(2.0, \"R1\", \"C2\");\n        try {\n            d2 = (DefaultCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // check that the clone doesn't share the same underlying arrays.\n        d1.addValue(3.0, \"R1\", \"C1\");\n        assertFalse(d1.equals(d2));\n        d2.addValue(3.0, \"R1\", \"C1\");\n        assertTrue(d1.equals(d2));\n    }\n",
        "begin_line": 307,
        "end_line": 338,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 65)",
            "(line 309,col 9)-(line 309,col 41)",
            "(line 310,col 9)-(line 315,col 9)",
            "(line 316,col 9)-(line 316,col 29)",
            "(line 317,col 9)-(line 317,col 51)",
            "(line 318,col 9)-(line 318,col 34)",
            "(line 321,col 9)-(line 321,col 37)",
            "(line 322,col 9)-(line 322,col 37)",
            "(line 323,col 9)-(line 328,col 9)",
            "(line 329,col 9)-(line 329,col 29)",
            "(line 330,col 9)-(line 330,col 51)",
            "(line 331,col 9)-(line 331,col 34)",
            "(line 334,col 9)-(line 334,col 37)",
            "(line 335,col 9)-(line 335,col 35)",
            "(line 336,col 9)-(line 336,col 37)",
            "(line 337,col 9)-(line 337,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultCategoryDatasetTests.testBug1835955()",
        "snippet": "    public void testBug1835955() {\n    \tDefaultCategoryDataset d = new DefaultCategoryDataset();\n    \td.addValue(1.0, \"R1\", \"C1\");\n    \td.addValue(2.0, \"R2\", \"C2\");\n    \td.removeColumn(\"C2\");\n    \td.addValue(3.0, \"R2\", \"C2\");\n    \tassertEquals(3.0, d.getValue(\"R2\", \"C2\").doubleValue(), EPSILON);\n    }\n",
        "begin_line": 345,
        "end_line": 352,
        "comment": "\n     * A test for bug 1835955.\n     ",
        "child_ranges": [
            "(line 346,col 6)-(line 346,col 61)",
            "(line 347,col 6)-(line 347,col 33)",
            "(line 348,col 6)-(line 348,col 33)",
            "(line 349,col 6)-(line 349,col 26)",
            "(line 350,col 6)-(line 350,col 33)",
            "(line 351,col 6)-(line 351,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultKeyedValues2DTests.class);\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.DefaultKeyedValues2DTests(java.lang.String)",
        "snippet": "    public DefaultKeyedValues2DTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        assertEquals(new Double(1.0), d.getValue(\"R1\", \"C1\"));\n        boolean pass = false;\n        try {\n            d.getValue(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d.getValue(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 89,
        "end_line": 110,
        "comment": "\n     * Some checks for the getValue() method.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 60)",
            "(line 91,col 9)-(line 91,col 48)",
            "(line 92,col 9)-(line 92,col 62)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 94,col 9)-(line 99,col 9)",
            "(line 100,col 9)-(line 100,col 25)",
            "(line 102,col 9)-(line 102,col 21)",
            "(line 103,col 9)-(line 108,col 9)",
            "(line 109,col 9)-(line 109,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultKeyedValues2D v1 = new DefaultKeyedValues2D();\n        v1.setValue(new Integer(1), \"V1\", \"C1\");\n        v1.setValue(null, \"V2\", \"C1\");\n        v1.setValue(new Integer(3), \"V3\", \"C2\");\n        DefaultKeyedValues2D v2 = null;\n        try {\n            v2 = (DefaultKeyedValues2D) v1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(v1 != v2);\n        assertTrue(v1.getClass() == v2.getClass());\n        assertTrue(v1.equals(v2));\n        \n        // check that clone is independent of the original\n        v2.setValue(new Integer(2), \"V2\", \"C1\");\n        assertFalse(v1.equals(v2));\n    }\n",
        "begin_line": 115,
        "end_line": 134,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 61)",
            "(line 117,col 9)-(line 117,col 48)",
            "(line 118,col 9)-(line 118,col 38)",
            "(line 119,col 9)-(line 119,col 48)",
            "(line 120,col 9)-(line 120,col 39)",
            "(line 121,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 29)",
            "(line 128,col 9)-(line 128,col 51)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 132,col 9)-(line 132,col 48)",
            "(line 133,col 9)-(line 133,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultKeyedValues2D kv2D1 = new DefaultKeyedValues2D();\n        kv2D1.addValue(new Double(234.2), \"Row1\", \"Col1\");\n        kv2D1.addValue(null, \"Row1\", \"Col2\");\n        kv2D1.addValue(new Double(345.9), \"Row2\", \"Col1\");\n        kv2D1.addValue(new Double(452.7), \"Row2\", \"Col2\");\n\n        DefaultKeyedValues2D kv2D2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(kv2D1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            kv2D2 = (DefaultKeyedValues2D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(kv2D1, kv2D2);\n\n    }\n",
        "begin_line": 139,
        "end_line": 165,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 64)",
            "(line 142,col 9)-(line 142,col 58)",
            "(line 143,col 9)-(line 143,col 45)",
            "(line 144,col 9)-(line 144,col 58)",
            "(line 145,col 9)-(line 145,col 58)",
            "(line 147,col 9)-(line 147,col 42)",
            "(line 149,col 9)-(line 162,col 9)",
            "(line 163,col 9)-(line 163,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testEquals()",
        "snippet": "    public void testEquals() {\n        DefaultKeyedValues2D d1 = new DefaultKeyedValues2D();\n        DefaultKeyedValues2D d2 = new DefaultKeyedValues2D();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n        \n        d1.addValue(new Double(1.0), new Double(2.0), \"S1\");\n        assertFalse(d1.equals(d2));\n        d2.addValue(new Double(1.0), new Double(2.0), \"S1\");\n        assertTrue(d1.equals(d2));\n    }\n",
        "begin_line": 170,
        "end_line": 180,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 61)",
            "(line 172,col 9)-(line 172,col 61)",
            "(line 173,col 9)-(line 173,col 34)",
            "(line 174,col 9)-(line 174,col 34)",
            "(line 176,col 9)-(line 176,col 60)",
            "(line 177,col 9)-(line 177,col 35)",
            "(line 178,col 9)-(line 178,col 60)",
            "(line 179,col 9)-(line 179,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testSparsePopulation()",
        "snippet": "    public void testSparsePopulation() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        d.addValue(new Integer(11), \"R1\", \"C1\");\n        d.addValue(new Integer(22), \"R2\", \"C2\");\n        \n        assertEquals(new Integer(11), d.getValue(\"R1\", \"C1\"));\n        assertNull(d.getValue(\"R1\", \"C2\"));\n        assertEquals(new Integer(22), d.getValue(\"R2\", \"C2\"));\n        assertNull(d.getValue(\"R2\", \"C1\"));\n    }\n",
        "begin_line": 186,
        "end_line": 195,
        "comment": "\n     * Populates a data structure with sparse entries, then checks that\n     * the unspecified entries return null.\n     ",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 60)",
            "(line 188,col 9)-(line 188,col 48)",
            "(line 189,col 9)-(line 189,col 48)",
            "(line 191,col 9)-(line 191,col 62)",
            "(line 192,col 9)-(line 192,col 43)",
            "(line 193,col 9)-(line 193,col 62)",
            "(line 194,col 9)-(line 194,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testRowCount()",
        "snippet": "    public void testRowCount() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        assertEquals(0, d.getRowCount());\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        assertEquals(1, d.getRowCount());\n        d.addValue(new Double(2.0), \"R2\", \"C1\");\n        assertEquals(2, d.getRowCount());\n    }\n",
        "begin_line": 200,
        "end_line": 207,
        "comment": "\n     * Some basic checks for the getRowCount() method.\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 60)",
            "(line 202,col 9)-(line 202,col 41)",
            "(line 203,col 9)-(line 203,col 48)",
            "(line 204,col 9)-(line 204,col 41)",
            "(line 205,col 9)-(line 205,col 48)",
            "(line 206,col 9)-(line 206,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testColumnCount()",
        "snippet": "    public void testColumnCount() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        assertEquals(0, d.getColumnCount());\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        assertEquals(1, d.getColumnCount());\n        d.addValue(new Double(2.0), \"R1\", \"C2\");\n        assertEquals(2, d.getColumnCount());\n    }\n",
        "begin_line": 212,
        "end_line": 219,
        "comment": "\n     * Some basic checks for the getColumnCount() method.\n     ",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 60)",
            "(line 214,col 9)-(line 214,col 44)",
            "(line 215,col 9)-(line 215,col 48)",
            "(line 216,col 9)-(line 216,col 44)",
            "(line 217,col 9)-(line 217,col 48)",
            "(line 218,col 9)-(line 218,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testGetValue2()",
        "snippet": "    public void testGetValue2() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        boolean pass = false;\n        try {\n            d.getValue(0, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        assertEquals(1.0, d.getValue(0, 0).doubleValue(), EPSILON);\n        d.addValue(new Double(2.0), \"R2\", \"C2\");\n        assertEquals(2.0, d.getValue(1, 1).doubleValue(), EPSILON);\n        assertNull(d.getValue(1, 0));\n        assertNull(d.getValue(0, 1));\n        \n        pass = false;\n        try {\n            d.getValue(2, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 226,
        "end_line": 251,
        "comment": "\n     * Some basic checks for the getValue(int, int) method.\n     ",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 60)",
            "(line 228,col 9)-(line 228,col 29)",
            "(line 229,col 9)-(line 234,col 9)",
            "(line 235,col 9)-(line 235,col 25)",
            "(line 236,col 9)-(line 236,col 48)",
            "(line 237,col 9)-(line 237,col 67)",
            "(line 238,col 9)-(line 238,col 48)",
            "(line 239,col 9)-(line 239,col 67)",
            "(line 240,col 9)-(line 240,col 37)",
            "(line 241,col 9)-(line 241,col 37)",
            "(line 243,col 9)-(line 243,col 21)",
            "(line 244,col 9)-(line 249,col 9)",
            "(line 250,col 9)-(line 250,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testGetRowKey()",
        "snippet": "    public void testGetRowKey() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        boolean pass = false;\n        try {\n            d.getRowKey(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.addValue(new Double(1.0), \"R2\", \"C1\");\n        assertEquals(\"R1\", d.getRowKey(0));\n        assertEquals(\"R2\", d.getRowKey(1));\n        \n        // check sorted rows\n        d = new DefaultKeyedValues2D(true);\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        assertEquals(\"R1\", d.getRowKey(0));\n        d.addValue(new Double(0.0), \"R0\", \"C1\");\n        assertEquals(\"R0\", d.getRowKey(0));\n        assertEquals(\"R1\", d.getRowKey(1));\n    }\n",
        "begin_line": 256,
        "end_line": 278,
        "comment": "\n     * Some basic checks for the getRowKey() method.\n     ",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 60)",
            "(line 258,col 9)-(line 258,col 29)",
            "(line 259,col 9)-(line 264,col 9)",
            "(line 265,col 9)-(line 265,col 25)",
            "(line 266,col 9)-(line 266,col 48)",
            "(line 267,col 9)-(line 267,col 48)",
            "(line 268,col 9)-(line 268,col 43)",
            "(line 269,col 9)-(line 269,col 43)",
            "(line 272,col 9)-(line 272,col 43)",
            "(line 273,col 9)-(line 273,col 48)",
            "(line 274,col 9)-(line 274,col 43)",
            "(line 275,col 9)-(line 275,col 48)",
            "(line 276,col 9)-(line 276,col 43)",
            "(line 277,col 9)-(line 277,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testGetColumnKey()",
        "snippet": "    public void testGetColumnKey() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        boolean pass = false;\n        try {\n            d.getColumnKey(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.addValue(new Double(1.0), \"R1\", \"C2\");\n        assertEquals(\"C1\", d.getColumnKey(0));\n        assertEquals(\"C2\", d.getColumnKey(1));\n    }\n",
        "begin_line": 283,
        "end_line": 297,
        "comment": "\n     * Some basic checks for the getColumnKey() method.\n     ",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 60)",
            "(line 285,col 9)-(line 285,col 29)",
            "(line 286,col 9)-(line 291,col 9)",
            "(line 292,col 9)-(line 292,col 25)",
            "(line 293,col 9)-(line 293,col 48)",
            "(line 294,col 9)-(line 294,col 48)",
            "(line 295,col 9)-(line 295,col 46)",
            "(line 296,col 9)-(line 296,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveValue()",
        "snippet": "    public void testRemoveValue() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        d.removeValue(\"R1\", \"C1\");\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.removeValue(\"R1\", \"C1\");\n        assertEquals(0, d.getRowCount());\n        assertEquals(0, d.getColumnCount());\n        \n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.addValue(new Double(2.0), \"R2\", \"C1\");\n        d.removeValue(\"R1\", \"C1\");\n        assertEquals(new Double(2.0), d.getValue(0, 0));\n    }\n",
        "begin_line": 302,
        "end_line": 314,
        "comment": "\n     * Some basic checks for the removeValue() method.\n     ",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 60)",
            "(line 304,col 9)-(line 304,col 34)",
            "(line 305,col 9)-(line 305,col 48)",
            "(line 306,col 9)-(line 306,col 34)",
            "(line 307,col 9)-(line 307,col 41)",
            "(line 308,col 9)-(line 308,col 44)",
            "(line 310,col 9)-(line 310,col 48)",
            "(line 311,col 9)-(line 311,col 48)",
            "(line 312,col 9)-(line 312,col 34)",
            "(line 313,col 9)-(line 313,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveValueBug1690654()",
        "snippet": "    public void testRemoveValueBug1690654() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        d.addValue(new Double(1.0), \"R1\", \"C1\");\n        d.addValue(new Double(2.0), \"R2\", \"C2\");\n        assertEquals(2, d.getColumnCount());\n        assertEquals(2, d.getRowCount());\n        d.removeValue(\"R2\", \"C2\");\n        assertEquals(1, d.getColumnCount());\n        assertEquals(1, d.getRowCount());\n        assertEquals(new Double(1.0), d.getValue(0, 0));\n    }\n",
        "begin_line": 319,
        "end_line": 329,
        "comment": "\n     * A test for bug 1690654.\n     ",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 60)",
            "(line 321,col 9)-(line 321,col 48)",
            "(line 322,col 9)-(line 322,col 48)",
            "(line 323,col 9)-(line 323,col 44)",
            "(line 324,col 9)-(line 324,col 41)",
            "(line 325,col 9)-(line 325,col 34)",
            "(line 326,col 9)-(line 326,col 44)",
            "(line 327,col 9)-(line 327,col 41)",
            "(line 328,col 9)-(line 328,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveRow()",
        "snippet": "    public void testRemoveRow() {\n        DefaultKeyedValues2D d = new DefaultKeyedValues2D();\n        boolean pass = false;\n        try {\n            d.removeRow(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);        \n    }\n",
        "begin_line": 334,
        "end_line": 344,
        "comment": "\n     * Some basic checks for the removeRow() method.\n     ",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 60)",
            "(line 336,col 9)-(line 336,col 29)",
            "(line 337,col 9)-(line 342,col 9)",
            "(line 343,col 9)-(line 343,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValues2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveColumnByKey()",
        "snippet": "    public void testRemoveColumnByKey() {\n    \tDefaultKeyedValues2D d = new DefaultKeyedValues2D();\n    \td.addValue(new Double(1.0), \"R1\", \"C1\");\n    \td.addValue(new Double(2.0), \"R2\", \"C2\");\n    \td.removeColumn(\"C2\");\n    \td.addValue(new Double(3.0), \"R2\", \"C2\");\n    \tassertEquals(3.0, d.getValue(\"R2\", \"C2\").doubleValue(), EPSILON);\n    \t\n    \t// check for unknown column\n    \tboolean pass = false;\n    \ttry {\n    \t\td.removeColumn(\"XXX\");\n    \t}\n    \tcatch (UnknownKeyException e) {\n    \t\tpass = true;\n    \t}\n    \tassertTrue(pass);\n    }\n",
        "begin_line": 349,
        "end_line": 366,
        "comment": "\n     * Some basic checks for the removeColumn(Comparable) method.\n     ",
        "child_ranges": [
            "(line 350,col 6)-(line 350,col 57)",
            "(line 351,col 6)-(line 351,col 45)",
            "(line 352,col 6)-(line 352,col 45)",
            "(line 353,col 6)-(line 353,col 26)",
            "(line 354,col 6)-(line 354,col 45)",
            "(line 355,col 6)-(line 355,col 70)",
            "(line 358,col 6)-(line 358,col 26)",
            "(line 359,col 6)-(line 364,col 6)",
            "(line 365,col 6)-(line 365,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultKeyedValuesTests.class);\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.DefaultKeyedValuesTests(java.lang.String)",
        "snippet": "    public DefaultKeyedValuesTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.setUp()",
        "snippet": "    protected void setUp() {\n        // no setup required\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        DefaultKeyedValues d = new DefaultKeyedValues();\n        assertEquals(0, d.getItemCount());\n    }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": "\n     * Checks that a new instance is empty.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 56)",
            "(line 100,col 9)-(line 100,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetItemCount()",
        "snippet": "    public void testGetItemCount() {\n        DefaultKeyedValues d = new DefaultKeyedValues();\n        assertEquals(0, d.getItemCount());\n        d.addValue(\"A\", 1.0);\n        assertEquals(1, d.getItemCount());\n        d.addValue(\"B\", 2.0);\n        assertEquals(2, d.getItemCount());\n        d.clear();\n        assertEquals(0, d.getItemCount());        \n    }\n",
        "begin_line": 106,
        "end_line": 115,
        "comment": "\n     * Some checks for the getItemCount() method.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 56)",
            "(line 108,col 9)-(line 108,col 42)",
            "(line 109,col 9)-(line 109,col 29)",
            "(line 110,col 9)-(line 110,col 42)",
            "(line 111,col 9)-(line 111,col 29)",
            "(line 112,col 9)-(line 112,col 42)",
            "(line 113,col 9)-(line 113,col 18)",
            "(line 114,col 9)-(line 114,col 42)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetKeys()",
        "snippet": "    public void testGetKeys() {\n        DefaultKeyedValues d = new DefaultKeyedValues();\n        List keys = d.getKeys();\n        assertTrue(keys.isEmpty());\n        d.addValue(\"A\", 1.0);\n        keys = d.getKeys();\n        assertEquals(1, keys.size());\n        assertTrue(keys.contains(\"A\"));\n        d.addValue(\"B\", 2.0);\n        keys = d.getKeys();\n        assertEquals(2, keys.size());\n        assertTrue(keys.contains(\"A\"));\n        assertTrue(keys.contains(\"B\"));\n        d.clear();\n        keys = d.getKeys();\n        assertEquals(0, keys.size());        \n    }\n",
        "begin_line": 120,
        "end_line": 136,
        "comment": "\n     * Some checks for the getKeys() method.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 56)",
            "(line 122,col 9)-(line 122,col 32)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 125,col 9)-(line 125,col 27)",
            "(line 126,col 9)-(line 126,col 37)",
            "(line 127,col 9)-(line 127,col 39)",
            "(line 128,col 9)-(line 128,col 29)",
            "(line 129,col 9)-(line 129,col 27)",
            "(line 130,col 9)-(line 130,col 37)",
            "(line 131,col 9)-(line 131,col 39)",
            "(line 132,col 9)-(line 132,col 39)",
            "(line 133,col 9)-(line 133,col 18)",
            "(line 134,col 9)-(line 134,col 27)",
            "(line 135,col 9)-(line 135,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testClear()",
        "snippet": "    public void testClear() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        v1.addValue(\"A\", 1.0);\n        v1.addValue(\"B\", 2.0);\n        assertEquals(2, v1.getItemCount());\n        v1.clear();\n        assertEquals(0, v1.getItemCount());\n    }\n",
        "begin_line": 141,
        "end_line": 148,
        "comment": "\n     * A simple test for the clear() method.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 57)",
            "(line 143,col 9)-(line 143,col 30)",
            "(line 144,col 9)-(line 144,col 30)",
            "(line 145,col 9)-(line 145,col 43)",
            "(line 146,col 9)-(line 146,col 19)",
            "(line 147,col 9)-(line 147,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        try {\n            /* Number n = */ v1.getValue(-1);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            /* Number n = */ v1.getValue(0);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        DefaultKeyedValues v2 = new DefaultKeyedValues();\n        v2.addValue(\"K1\", new Integer(1));\n        v2.addValue(\"K2\", new Integer(2));\n        v2.addValue(\"K3\", new Integer(3));\n        assertEquals(new Integer(3), v2.getValue(2));\n        \n        boolean pass = false;\n        try {\n            /* Number n = */ v2.getValue(\"KK\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 153,
        "end_line": 183,
        "comment": "\n     * Some checks for the getValue() methods.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 57)",
            "(line 155,col 9)-(line 161,col 9)",
            "(line 162,col 9)-(line 168,col 9)",
            "(line 169,col 9)-(line 169,col 57)",
            "(line 170,col 9)-(line 170,col 42)",
            "(line 171,col 9)-(line 171,col 42)",
            "(line 172,col 9)-(line 172,col 42)",
            "(line 173,col 9)-(line 173,col 53)",
            "(line 175,col 9)-(line 175,col 29)",
            "(line 176,col 9)-(line 181,col 9)",
            "(line 182,col 9)-(line 182,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetKey()",
        "snippet": "    public void testGetKey() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        try {\n            /* Comparable k = */ v1.getKey(-1);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            /* Comparable k = */ v1.getKey(0);\n            assertTrue(false);\n        }\n        catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        DefaultKeyedValues v2 = new DefaultKeyedValues();\n        v2.addValue(\"K1\", new Integer(1));\n        v2.addValue(\"K2\", new Integer(2));\n        v2.addValue(\"K3\", new Integer(3));\n        assertEquals(\"K2\", v2.getKey(1));\n    }\n",
        "begin_line": 188,
        "end_line": 209,
        "comment": "\n     * Some checks for the getKey() methods.\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 57)",
            "(line 190,col 9)-(line 196,col 9)",
            "(line 197,col 9)-(line 203,col 9)",
            "(line 204,col 9)-(line 204,col 57)",
            "(line 205,col 9)-(line 205,col 42)",
            "(line 206,col 9)-(line 206,col 42)",
            "(line 207,col 9)-(line 207,col 42)",
            "(line 208,col 9)-(line 208,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetIndex()",
        "snippet": "    public void testGetIndex() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        assertEquals(-1, v1.getIndex(\"K1\"));\n\n        DefaultKeyedValues v2 = new DefaultKeyedValues();\n        v2.addValue(\"K1\", new Integer(1));\n        v2.addValue(\"K2\", new Integer(2));\n        v2.addValue(\"K3\", new Integer(3));\n        assertEquals(2, v2.getIndex(\"K3\"));\n        \n        // try null\n        boolean pass = false;\n        try {\n            v2.getIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 214,
        "end_line": 233,
        "comment": "\n     * Some checks for the getIndex() methods.\n     ",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 57)",
            "(line 216,col 9)-(line 216,col 44)",
            "(line 218,col 9)-(line 218,col 57)",
            "(line 219,col 9)-(line 219,col 42)",
            "(line 220,col 9)-(line 220,col 42)",
            "(line 221,col 9)-(line 221,col 42)",
            "(line 222,col 9)-(line 222,col 43)",
            "(line 225,col 9)-(line 225,col 29)",
            "(line 226,col 9)-(line 231,col 9)",
            "(line 232,col 9)-(line 232,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testGetIndex2()",
        "snippet": "    public void testGetIndex2() {\n    \tDefaultKeyedValues v = new DefaultKeyedValues();\n    \tassertEquals(-1, v.getIndex(\"K1\"));\n    \tv.addValue(\"K1\", 1.0);\n    \tassertEquals(0, v.getIndex(\"K1\"));\n    \tv.removeValue(\"K1\");\n    \tassertEquals(-1, v.getIndex(\"K1\"));\n    }\n",
        "begin_line": 238,
        "end_line": 245,
        "comment": "\n     * Another check for the getIndex(Comparable) method.\n     ",
        "child_ranges": [
            "(line 239,col 6)-(line 239,col 53)",
            "(line 240,col 6)-(line 240,col 40)",
            "(line 241,col 6)-(line 241,col 27)",
            "(line 242,col 6)-(line 242,col 39)",
            "(line 243,col 6)-(line 243,col 25)",
            "(line 244,col 6)-(line 244,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testAddValue()",
        "snippet": "    public void testAddValue() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        v1.addValue(\"A\", 1.0);\n        assertEquals(new Double(1.0), v1.getValue(\"A\"));\n        v1.addValue(\"B\", 2.0);\n        assertEquals(new Double(2.0), v1.getValue(\"B\"));\n        v1.addValue(\"B\", 3.0);\n        assertEquals(new Double(3.0), v1.getValue(\"B\"));\n        assertEquals(2, v1.getItemCount());\n        v1.addValue(\"A\", null);\n        assertNull(v1.getValue(\"A\"));\n        assertEquals(2, v1.getItemCount());\n        \n        boolean pass = false;\n        try {\n            v1.addValue(null, 99.9);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 250,
        "end_line": 271,
        "comment": "\n     * Some checks for the addValue() method.\n     ",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 57)",
            "(line 252,col 9)-(line 252,col 30)",
            "(line 253,col 9)-(line 253,col 56)",
            "(line 254,col 9)-(line 254,col 30)",
            "(line 255,col 9)-(line 255,col 56)",
            "(line 256,col 9)-(line 256,col 30)",
            "(line 257,col 9)-(line 257,col 56)",
            "(line 258,col 9)-(line 258,col 43)",
            "(line 259,col 9)-(line 259,col 31)",
            "(line 260,col 9)-(line 260,col 37)",
            "(line 261,col 9)-(line 261,col 43)",
            "(line 263,col 9)-(line 263,col 29)",
            "(line 264,col 9)-(line 269,col 9)",
            "(line 270,col 9)-(line 270,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testInsertValue()",
        "snippet": "    public void testInsertValue() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        v1.insertValue(0, \"A\", 1.0);\n        assertEquals(new Double(1.0), v1.getValue(0));\n        v1.insertValue(0, \"B\", 2.0);\n        assertEquals(new Double(2.0), v1.getValue(0));\n        assertEquals(new Double(1.0), v1.getValue(1));\n        \n        // it's OK to use an index equal to the size of the list\n        v1.insertValue(2, \"C\", 3.0);\n        assertEquals(new Double(2.0), v1.getValue(0));\n        assertEquals(new Double(1.0), v1.getValue(1));\n        assertEquals(new Double(3.0), v1.getValue(2));\n        \n        // try replacing an existing value\n        v1.insertValue(2, \"B\", 4.0);\n        assertEquals(new Double(1.0), v1.getValue(0));\n        assertEquals(new Double(3.0), v1.getValue(1));\n        assertEquals(new Double(4.0), v1.getValue(2));\n    }\n",
        "begin_line": 276,
        "end_line": 295,
        "comment": "\n     * Some checks for the insertValue() method.\n     ",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 57)",
            "(line 278,col 9)-(line 278,col 36)",
            "(line 279,col 9)-(line 279,col 54)",
            "(line 280,col 9)-(line 280,col 36)",
            "(line 281,col 9)-(line 281,col 54)",
            "(line 282,col 9)-(line 282,col 54)",
            "(line 285,col 9)-(line 285,col 36)",
            "(line 286,col 9)-(line 286,col 54)",
            "(line 287,col 9)-(line 287,col 54)",
            "(line 288,col 9)-(line 288,col 54)",
            "(line 291,col 9)-(line 291,col 36)",
            "(line 292,col 9)-(line 292,col 54)",
            "(line 293,col 9)-(line 293,col 54)",
            "(line 294,col 9)-(line 294,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        v1.addValue(\"V1\", new Integer(1));\n        v1.addValue(\"V2\", null);\n        v1.addValue(\"V3\", new Integer(3));\n        DefaultKeyedValues v2 = null;\n        try {\n            v2 = (DefaultKeyedValues) v1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(v1 != v2);\n        assertTrue(v1.getClass() == v2.getClass());\n        assertTrue(v1.equals(v2));\n        \n        // confirm that the clone is independent of the original\n        v2.setValue(\"V1\", new Integer(44));\n        assertFalse(v1.equals(v2));\n    }\n",
        "begin_line": 300,
        "end_line": 319,
        "comment": "\n     * Some checks for the clone() method.\n     ",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 57)",
            "(line 302,col 9)-(line 302,col 42)",
            "(line 303,col 9)-(line 303,col 32)",
            "(line 304,col 9)-(line 304,col 42)",
            "(line 305,col 9)-(line 305,col 37)",
            "(line 306,col 9)-(line 311,col 9)",
            "(line 312,col 9)-(line 312,col 29)",
            "(line 313,col 9)-(line 313,col 51)",
            "(line 314,col 9)-(line 314,col 34)",
            "(line 317,col 9)-(line 317,col 43)",
            "(line 318,col 9)-(line 318,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testInsertAndRetrieve()",
        "snippet": "    public void testInsertAndRetrieve() {\n\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", new Double(1.0));\n        data.addValue(\"B\", new Double(2.0));\n        data.addValue(\"C\", new Double(3.0));\n        data.addValue(\"D\", null);\n\n        // check key order\n        assertEquals(data.getKey(0), \"A\");\n        assertEquals(data.getKey(1), \"B\");\n        assertEquals(data.getKey(2), \"C\");\n        assertEquals(data.getKey(3), \"D\");\n\n        // check retrieve value by key\n        assertEquals(data.getValue(\"A\"), new Double(1.0));\n        assertEquals(data.getValue(\"B\"), new Double(2.0));\n        assertEquals(data.getValue(\"C\"), new Double(3.0));\n        assertEquals(data.getValue(\"D\"), null);\n\n        // check retrieve value by index\n        assertEquals(data.getValue(0), new Double(1.0));\n        assertEquals(data.getValue(1), new Double(2.0));\n        assertEquals(data.getValue(2), new Double(3.0));\n        assertEquals(data.getValue(3), null);\n\n    }\n",
        "begin_line": 324,
        "end_line": 350,
        "comment": "\n     * Check that inserting and retrieving values works as expected.\n     ",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 59)",
            "(line 327,col 9)-(line 327,col 44)",
            "(line 328,col 9)-(line 328,col 44)",
            "(line 329,col 9)-(line 329,col 44)",
            "(line 330,col 9)-(line 330,col 33)",
            "(line 333,col 9)-(line 333,col 42)",
            "(line 334,col 9)-(line 334,col 42)",
            "(line 335,col 9)-(line 335,col 42)",
            "(line 336,col 9)-(line 336,col 42)",
            "(line 339,col 9)-(line 339,col 58)",
            "(line 340,col 9)-(line 340,col 58)",
            "(line 341,col 9)-(line 341,col 58)",
            "(line 342,col 9)-(line 342,col 47)",
            "(line 345,col 9)-(line 345,col 56)",
            "(line 346,col 9)-(line 346,col 56)",
            "(line 347,col 9)-(line 347,col 56)",
            "(line 348,col 9)-(line 348,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testRemoveValue()",
        "snippet": "    public void testRemoveValue() {\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"C\", new Double(3.0));\n        data.addValue(\"D\", new Double(2.0));\n        assertEquals(1, data.getIndex(\"B\"));\n        data.removeValue(\"B\");\n        assertEquals(-1, data.getIndex(\"B\"));\n        \n        boolean pass = false;\n        try {\n            data.removeValue(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 355,
        "end_line": 373,
        "comment": "\n     * Some tests for the removeValue() method.\n     ",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 59)",
            "(line 357,col 9)-(line 357,col 44)",
            "(line 358,col 9)-(line 358,col 33)",
            "(line 359,col 9)-(line 359,col 44)",
            "(line 360,col 9)-(line 360,col 44)",
            "(line 361,col 9)-(line 361,col 44)",
            "(line 362,col 9)-(line 362,col 30)",
            "(line 363,col 9)-(line 363,col 45)",
            "(line 365,col 9)-(line 365,col 29)",
            "(line 366,col 9)-(line 371,col 9)",
            "(line 372,col 9)-(line 372,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testSortByKeyAscending()",
        "snippet": "    public void testSortByKeyAscending() {\n\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"C\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"D\", new Double(3.0));\n        data.addValue(\"A\", new Double(2.0));\n\n        data.sortByKeys(SortOrder.ASCENDING);\n\n        // check key order\n        assertEquals(data.getKey(0), \"A\");\n        assertEquals(data.getKey(1), \"B\");\n        assertEquals(data.getKey(2), \"C\");\n        assertEquals(data.getKey(3), \"D\");\n\n        // check retrieve value by key\n        assertEquals(data.getValue(\"A\"), new Double(2.0));\n        assertEquals(data.getValue(\"B\"), null);\n        assertEquals(data.getValue(\"C\"), new Double(1.0));\n        assertEquals(data.getValue(\"D\"), new Double(3.0));\n\n        // check retrieve value by index\n        assertEquals(data.getValue(0), new Double(2.0));\n        assertEquals(data.getValue(1), null);\n        assertEquals(data.getValue(2), new Double(1.0));\n        assertEquals(data.getValue(3), new Double(3.0));\n\n    }\n",
        "begin_line": 378,
        "end_line": 406,
        "comment": "\n     * Tests sorting of data by key (ascending).\n     ",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 59)",
            "(line 381,col 9)-(line 381,col 44)",
            "(line 382,col 9)-(line 382,col 33)",
            "(line 383,col 9)-(line 383,col 44)",
            "(line 384,col 9)-(line 384,col 44)",
            "(line 386,col 9)-(line 386,col 45)",
            "(line 389,col 9)-(line 389,col 42)",
            "(line 390,col 9)-(line 390,col 42)",
            "(line 391,col 9)-(line 391,col 42)",
            "(line 392,col 9)-(line 392,col 42)",
            "(line 395,col 9)-(line 395,col 58)",
            "(line 396,col 9)-(line 396,col 47)",
            "(line 397,col 9)-(line 397,col 58)",
            "(line 398,col 9)-(line 398,col 58)",
            "(line 401,col 9)-(line 401,col 56)",
            "(line 402,col 9)-(line 402,col 45)",
            "(line 403,col 9)-(line 403,col 56)",
            "(line 404,col 9)-(line 404,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testSortByKeyDescending()",
        "snippet": "    public void testSortByKeyDescending() {\n\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"C\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"D\", new Double(3.0));\n        data.addValue(\"A\", new Double(2.0));\n\n        data.sortByKeys(SortOrder.DESCENDING);\n\n        // check key order\n        assertEquals(data.getKey(0), \"D\");\n        assertEquals(data.getKey(1), \"C\");\n        assertEquals(data.getKey(2), \"B\");\n        assertEquals(data.getKey(3), \"A\");\n\n        // check retrieve value by key\n        assertEquals(data.getValue(\"A\"), new Double(2.0));\n        assertEquals(data.getValue(\"B\"), null);\n        assertEquals(data.getValue(\"C\"), new Double(1.0));\n        assertEquals(data.getValue(\"D\"), new Double(3.0));\n\n        // check retrieve value by index\n        assertEquals(data.getValue(0), new Double(3.0));\n        assertEquals(data.getValue(1), new Double(1.0));\n        assertEquals(data.getValue(2), null);\n        assertEquals(data.getValue(3), new Double(2.0));\n\n    }\n",
        "begin_line": 411,
        "end_line": 439,
        "comment": "\n     * Tests sorting of data by key (descending).\n     ",
        "child_ranges": [
            "(line 413,col 9)-(line 413,col 59)",
            "(line 414,col 9)-(line 414,col 44)",
            "(line 415,col 9)-(line 415,col 33)",
            "(line 416,col 9)-(line 416,col 44)",
            "(line 417,col 9)-(line 417,col 44)",
            "(line 419,col 9)-(line 419,col 46)",
            "(line 422,col 9)-(line 422,col 42)",
            "(line 423,col 9)-(line 423,col 42)",
            "(line 424,col 9)-(line 424,col 42)",
            "(line 425,col 9)-(line 425,col 42)",
            "(line 428,col 9)-(line 428,col 58)",
            "(line 429,col 9)-(line 429,col 47)",
            "(line 430,col 9)-(line 430,col 58)",
            "(line 431,col 9)-(line 431,col 58)",
            "(line 434,col 9)-(line 434,col 56)",
            "(line 435,col 9)-(line 435,col 56)",
            "(line 436,col 9)-(line 436,col 45)",
            "(line 437,col 9)-(line 437,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testSortByValueAscending()",
        "snippet": "    public void testSortByValueAscending() {\n\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"C\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"D\", new Double(3.0));\n        data.addValue(\"A\", new Double(2.0));\n\n        data.sortByValues(SortOrder.ASCENDING);\n\n        // check key order\n        assertEquals(data.getKey(0), \"C\");\n        assertEquals(data.getKey(1), \"A\");\n        assertEquals(data.getKey(2), \"D\");\n        assertEquals(data.getKey(3), \"B\");\n\n        // check retrieve value by key\n        assertEquals(data.getValue(\"A\"), new Double(2.0));\n        assertEquals(data.getValue(\"B\"), null);\n        assertEquals(data.getValue(\"C\"), new Double(1.0));\n        assertEquals(data.getValue(\"D\"), new Double(3.0));\n\n        // check retrieve value by index\n        assertEquals(data.getValue(0), new Double(1.0));\n        assertEquals(data.getValue(1), new Double(2.0));\n        assertEquals(data.getValue(2), new Double(3.0));\n        assertEquals(data.getValue(3), null);\n\n    }\n",
        "begin_line": 444,
        "end_line": 472,
        "comment": "\n     * Tests sorting of data by value (ascending).\n     ",
        "child_ranges": [
            "(line 446,col 9)-(line 446,col 59)",
            "(line 447,col 9)-(line 447,col 44)",
            "(line 448,col 9)-(line 448,col 33)",
            "(line 449,col 9)-(line 449,col 44)",
            "(line 450,col 9)-(line 450,col 44)",
            "(line 452,col 9)-(line 452,col 47)",
            "(line 455,col 9)-(line 455,col 42)",
            "(line 456,col 9)-(line 456,col 42)",
            "(line 457,col 9)-(line 457,col 42)",
            "(line 458,col 9)-(line 458,col 42)",
            "(line 461,col 9)-(line 461,col 58)",
            "(line 462,col 9)-(line 462,col 47)",
            "(line 463,col 9)-(line 463,col 58)",
            "(line 464,col 9)-(line 464,col 58)",
            "(line 467,col 9)-(line 467,col 56)",
            "(line 468,col 9)-(line 468,col 56)",
            "(line 469,col 9)-(line 469,col 56)",
            "(line 470,col 9)-(line 470,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testSortByValueDescending()",
        "snippet": "    public void testSortByValueDescending() {\n\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"C\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"D\", new Double(3.0));\n        data.addValue(\"A\", new Double(2.0));\n\n        data.sortByValues(SortOrder.DESCENDING);\n\n        // check key order\n        assertEquals(data.getKey(0), \"D\");\n        assertEquals(data.getKey(1), \"A\");\n        assertEquals(data.getKey(2), \"C\");\n        assertEquals(data.getKey(3), \"B\");\n\n        // check retrieve value by key\n        assertEquals(data.getValue(\"A\"), new Double(2.0));\n        assertEquals(data.getValue(\"B\"), null);\n        assertEquals(data.getValue(\"C\"), new Double(1.0));\n        assertEquals(data.getValue(\"D\"), new Double(3.0));\n\n        // check retrieve value by index\n        assertEquals(data.getValue(0), new Double(3.0));\n        assertEquals(data.getValue(1), new Double(2.0));\n        assertEquals(data.getValue(2), new Double(1.0));\n        assertEquals(data.getValue(3), null);\n\n    }\n",
        "begin_line": 477,
        "end_line": 505,
        "comment": "\n     * Tests sorting of data by key (descending).\n     ",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 59)",
            "(line 480,col 9)-(line 480,col 44)",
            "(line 481,col 9)-(line 481,col 33)",
            "(line 482,col 9)-(line 482,col 44)",
            "(line 483,col 9)-(line 483,col 44)",
            "(line 485,col 9)-(line 485,col 48)",
            "(line 488,col 9)-(line 488,col 42)",
            "(line 489,col 9)-(line 489,col 42)",
            "(line 490,col 9)-(line 490,col 42)",
            "(line 491,col 9)-(line 491,col 42)",
            "(line 494,col 9)-(line 494,col 58)",
            "(line 495,col 9)-(line 495,col 47)",
            "(line 496,col 9)-(line 496,col 58)",
            "(line 497,col 9)-(line 497,col 58)",
            "(line 500,col 9)-(line 500,col 56)",
            "(line 501,col 9)-(line 501,col 56)",
            "(line 502,col 9)-(line 502,col 56)",
            "(line 503,col 9)-(line 503,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.DefaultKeyedValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
        "signature": "org.jfree.data.junit.DefaultKeyedValuesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultKeyedValues v1 = new DefaultKeyedValues();\n        v1.addValue(\"Key 1\", new Double(23));\n        v1.addValue(\"Key 2\", null);\n        v1.addValue(\"Key 3\", new Double(42));\n\n        DefaultKeyedValues v2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(v1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            v2 = (DefaultKeyedValues) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(v1, v2);\n\n    }\n",
        "begin_line": 510,
        "end_line": 536,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 512,col 9)-(line 512,col 57)",
            "(line 513,col 9)-(line 513,col 45)",
            "(line 514,col 9)-(line 514,col 35)",
            "(line 515,col 9)-(line 515,col 45)",
            "(line 517,col 9)-(line 517,col 37)",
            "(line 519,col 9)-(line 533,col 9)",
            "(line 534,col 9)-(line 534,col 29)"
        ]
    }
]