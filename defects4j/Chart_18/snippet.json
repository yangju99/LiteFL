[
    {
        "name": "DefaultKeyedValues.removeValue#315",
        "is_bug": true,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.removeValue(int)",
        "snippet": "    public void removeValue(int index) {\n        this.keys.remove(index);\n        this.values.remove(index);\n        if (index < this.keys.size()) {\n        rebuildIndex();\n        }\n    }\n",
        "begin_line": 315,
        "end_line": 321,
        "comment": "\n     * Removes a value from the collection.\n     *\n     * @param index  the index of the item to remove (in the range \n     *     <code>0</code> to <code>getItemCount() - 1</code>).\n     *     \n     * @throws IndexOutOfBoundsException if <code>index</code> is not within\n     *     the specified range.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultKeyedValues.removeValue#332",
        "is_bug": true,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.removeValue(java.lang.Comparable)",
        "snippet": "    public void removeValue(Comparable key) {\n        int index = getIndex(key);\n        if (index < 0) {\n\t\t\treturn;\n        }\n        removeValue(index);\n    }\n",
        "begin_line": 332,
        "end_line": 338,
        "comment": "\n     * Removes a value from the collection.\n     *\n     * @param key  the item key (<code>null</code> not permitted).\n     * \n     * @throws IllegalArgumentException if <code>key</code> is \n     *     <code>null</code>.\n     * @throws UnknownKeyException if <code>key</code> is not recognised.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultKeyedValues2D.removeColumn#454",
        "is_bug": true,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.removeColumn(java.lang.Comparable)",
        "snippet": "    public void removeColumn(Comparable columnKey) {\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n                rowData.removeValue(columnKey);\n        }\n        this.columnKeys.remove(columnKey);\n    }\n",
        "begin_line": 454,
        "end_line": 461,
        "comment": "\r\n     * Removes a column from the table.\r\n     *\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     * \r\n     * @throws UnknownKeyException if the table does not contain a column with\r\n     *     the specified key.\r\n     * @throws IllegalArgumentException if <code>columnKey</code> is \r\n     *     <code>null</code>.\r\n     * \r\n     * @see #removeColumn(int)\r\n     * @see #removeRow(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultCategoryDataset.removeColumn#349",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.removeColumn(java.lang.Comparable)",
        "snippet": "    public void removeColumn(Comparable columnKey) {\n        this.data.removeColumn(columnKey);\n        fireDatasetChanged();\n    }\n",
        "begin_line": 349,
        "end_line": 352,
        "comment": "\r\n     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param columnKey  the column key.\r\n     * \r\n     * @see #removeRow(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultKeyedValues.rebuildIndex#298",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.rebuildIndex()",
        "snippet": "    private void rebuildIndex () {\n        this.indexMap.clear();\n        for (int i = 0; i < this.keys.size(); i++) {\n            final Object key = this.keys.get(i);\n            this.indexMap.put(key, new Integer(i));\n        }\n    }\n",
        "begin_line": 298,
        "end_line": 304,
        "comment": "\n     * Rebuilds the key to indexed-position mapping after an positioned insert\n     * or a remove operation.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultKeyedValues.setValue#228",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.setValue(java.lang.Comparable, java.lang.Number)",
        "snippet": "    public void setValue(Comparable key, Number value) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            this.keys.set(keyIndex, key);\n            this.values.set(keyIndex, value);\n        }\n        else {\n            this.keys.add(key);\n            this.values.add(value);\n            this.indexMap.put(key, new Integer(this.keys.size() - 1));\n        }\n    }\n",
        "begin_line": 228,
        "end_line": 242,
        "comment": "\n     * Updates an existing value, or adds a new value to the collection.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultKeyedValues.addValue#208",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, java.lang.Number)",
        "snippet": "    public void addValue(Comparable key, Number value) {\n        setValue(key, value);\n    }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n     * Adds a new value to the collection, or updates an existing value.\n     * This method passes control directly to the \n     * {@link #setValue(Comparable, Number)} method.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultKeyedValues.addValue#196",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, double)",
        "snippet": "    public void addValue(Comparable key, double value) {\n        addValue(key, new Double(value)); \n    }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "\n     * Updates an existing value, or adds a new value to the collection.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     * @param value  the value.\n     * \n     * @see #addValue(Comparable, Number)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultKeyedValues.getIndex#149",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.getIndex(java.lang.Comparable)",
        "snippet": "    public int getIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        final Integer i = (Integer) this.indexMap.get(key);\n        if (i == null) {\n            return -1;  // key not found\n        }\n        return i.intValue();\n    }\n",
        "begin_line": 149,
        "end_line": 158,
        "comment": "\n     * Returns the index for a given key.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     *\n     * @return The index, or <code>-1</code> if the key is not recognised.\n     * \n     * @throws IllegalArgumentException if <code>key</code> is \n     *     <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultKeyedValues.DefaultKeyedValues#98",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.DefaultKeyedValues()",
        "snippet": "    public DefaultKeyedValues() {\n        this.keys = new ArrayList();\n        this.values = new ArrayList();\n        this.indexMap = new HashMap();\n    }\n",
        "begin_line": 98,
        "end_line": 102,
        "comment": "\n     * Creates a new collection (initially empty).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1455
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultKeyedValues2D.setValue#316",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.setValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void setValue(Number value, Comparable rowKey, \n                         Comparable columnKey) {\n\n        DefaultKeyedValues row;\n        int rowIndex = getRowIndex(rowKey);\n        \n        if (rowIndex >= 0) {\n            row = (DefaultKeyedValues) this.rows.get(rowIndex);\n        }\n        else {\n            row = new DefaultKeyedValues();\n            if (this.sortRowKeys) {\n                rowIndex = -rowIndex - 1;\n                this.rowKeys.add(rowIndex, rowKey);\n                this.rows.add(rowIndex, row);\n            }\n            else {\n                this.rowKeys.add(rowKey);\n                this.rows.add(row);\n            }\n        }\n        row.setValue(columnKey, value);\n        \n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n    }\n",
        "begin_line": 316,
        "end_line": 343,
        "comment": "\r\n     * Adds or updates a value.\r\n     *\r\n     * @param value  the value (<code>null</code> permitted).\r\n     * @param rowKey  the row key (<code>null</code> not permitted).\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     * \r\n     * @see #addValue(Number, Comparable, Comparable)\r\n     * @see #removeValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1054
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultKeyedValues2D.getRowIndex#181",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.getRowIndex(java.lang.Comparable)",
        "snippet": "    public int getRowIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.sortRowKeys) {\n            return Collections.binarySearch(this.rowKeys, key);\n        }\n        else {\n            return this.rowKeys.indexOf(key);\n        }\n    }\n",
        "begin_line": 181,
        "end_line": 191,
        "comment": "\r\n     * Returns the row index for a given key.\r\n     *\r\n     * @param key  the key (<code>null</code> not permitted).\r\n     *\r\n     * @return The row index.\r\n     * \r\n     * @see #getRowKey(int)\r\n     * @see #getColumnIndex(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0887
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultKeyedValues2D.addValue#300",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.addValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addValue(Number value, Comparable rowKey, \n                         Comparable columnKey) {\n        // defer argument checking\n        setValue(value, rowKey, columnKey);\n    }\n",
        "begin_line": 300,
        "end_line": 304,
        "comment": "\r\n     * Adds a value to the table.  Performs the same function as \r\n     * #setValue(Number, Comparable, Comparable).\r\n     *\r\n     * @param value  the value (<code>null</code> permitted).\r\n     * @param rowKey  the row key (<code>null</code> not permitted).\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     * \r\n     * @see #setValue(Number, Comparable, Comparable)\r\n     * @see #removeValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0887
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultKeyedValues2D.DefaultKeyedValues2D#94",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.DefaultKeyedValues2D()",
        "snippet": "    public DefaultKeyedValues2D() {\n        this(false);\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\r\n     * Creates a new instance (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0842
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultKeyedValues2D.DefaultKeyedValues2D#103",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.DefaultKeyedValues2D(boolean)",
        "snippet": "    public DefaultKeyedValues2D(boolean sortRowKeys) {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n        this.sortRowKeys = sortRowKeys;\n    }\n",
        "begin_line": 103,
        "end_line": 108,
        "comment": "\r\n     * Creates a new instance (initially empty).\r\n     * \r\n     * @param sortRowKeys  if the row keys should be sorted.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0814
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultCategoryDataset.addValue#231",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.addValue(double, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addValue(double value, Comparable rowKey, \n                         Comparable columnKey) {\n        addValue(new Double(value), rowKey, columnKey);\n    }\n",
        "begin_line": 231,
        "end_line": 234,
        "comment": "\r\n     * Adds a value to the table.\r\n     *\r\n     * @param value  the value.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     * \r\n     * @see #getValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.063
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultCategoryDataset.addValue#216",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.addValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addValue(Number value, Comparable rowKey, \n                         Comparable columnKey) {\n        this.data.addValue(value, rowKey, columnKey);\n        fireDatasetChanged();\n    }\n",
        "begin_line": 216,
        "end_line": 220,
        "comment": "\r\n     * Adds a value to the table.  Performs the same function as setValue().\r\n     *\r\n     * @param value  the value.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     * \r\n     * @see #getValue(Comparable, Comparable)\r\n     * @see #removeValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultCategoryDataset.DefaultCategoryDataset#73",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.DefaultCategoryDataset()",
        "snippet": "    public DefaultCategoryDataset() {\n        this.data = new DefaultKeyedValues2D();\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\r\n     * Creates a new (empty) dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0447
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.fireDatasetChanged#169",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.fireDatasetChanged()",
        "snippet": "    protected void fireDatasetChanged() {\n        notifyListeners(new DatasetChangeEvent(this, this));\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     * \r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.notifyListeners#182",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.notifyListeners(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    protected void notifyListeners(DatasetChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == DatasetChangeListener.class) {\n                ((DatasetChangeListener) listeners[i + 1]).datasetChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 182,
        "end_line": 192,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     *\r\n     * @param event  contains information about the event that triggered the \r\n     *               notification.\r\n     *               \r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     * @see #removeChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetChangeEvent.DatasetChangeEvent#70",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetChangeEvent.java",
        "class_name": "org.jfree.data.general.DatasetChangeEvent",
        "signature": "org.jfree.data.general.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset)",
        "snippet": "    public DatasetChangeEvent(Object source, Dataset dataset) {\n        super(source);\n        this.dataset = dataset;\n    }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "\r\n     * Constructs a new event.  The source is either the dataset or the \r\n     * {@link org.jfree.chart.plot.Plot} class.  The dataset can be \r\n     * <code>null</code> (in this case the source will be the \r\n     * {@link org.jfree.chart.plot.Plot} class).\r\n     *\r\n     * @param source  the source of the event.\r\n     * @param dataset  the dataset that generated the event (<code>null</code>\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0362
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetGroup.DatasetGroup#62",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "class_name": "org.jfree.data.general.DatasetGroup",
        "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup()",
        "snippet": "    public DatasetGroup() {\n        super();\n        this.id = \"NOID\";\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Constructs a new group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0357
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.AbstractDataset#94",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset()",
        "snippet": "    protected AbstractDataset() {\n        this.group = new DatasetGroup();\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "\r\n     * Constructs a dataset. By default, the dataset is assigned to its own \r\n     * group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0357
        },
        "num_failing_tests": 1
    }
]