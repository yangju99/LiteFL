[
    {
        "name": "TimeSeries.createCopy#1048",
        "is_bug": true,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.createCopy(int, int)",
        "snippet": "    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimeSeriesDataItem item\n                        = (TimeSeriesDataItem) this.data.get(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return copy;\n    }\n",
        "begin_line": 1048,
        "end_line": 1072,
        "comment": "\r\n     * Creates a new timeseries by copying a subset of the data in this time\r\n     * series.\r\n     *\r\n     * @param start  the index of the first time period to copy.\r\n     * @param end  the index of the last time period to copy.\r\n     *\r\n     * @return A series containing a copy of this times series from start until\r\n     *         end.\r\n     *\r\n     * @throws CloneNotSupportedException if there is a cloning problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#563",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.TimeSeriesDataItem)",
        "snippet": "    public void add(TimeSeriesDataItem item) {\n        add(item, true);\n    }\n",
        "begin_line": 563,
        "end_line": 565,
        "comment": "\r\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\r\n     *              permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.clone#241",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.clone()",
        "snippet": "    public Object clone() throws CloneNotSupportedException {\n\n        Series clone = (Series) super.clone();\n        clone.listeners = new EventListenerList();\n        clone.propertyChangeSupport = new PropertyChangeSupport(clone);\n        return clone;\n\n    }\n",
        "begin_line": 241,
        "end_line": 248,
        "comment": "\r\n     * Returns a clone of the series.\r\n     * <P>\r\n     * Notes:\r\n     * <ul>\r\n     * <li>No need to clone the name or description, since String object is\r\n     * immutable.</li>\r\n     * <li>We set the listener list to empty, since the listeners did not\r\n     * register with the clone.</li>\r\n     * <li>Same applies to the PropertyChangeSupport instance.</li>\r\n     * </ul>\r\n     *\r\n     * @return A clone of the series.\r\n     *\r\n     * @throws CloneNotSupportedException  not thrown by this class, but\r\n     *         subclasses may differ.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getMinY#344",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getMinY()",
        "snippet": "    public double getMinY() {\n        return this.minY;\n    }\n",
        "begin_line": 344,
        "end_line": 346,
        "comment": "\r\n     * Returns the smallest y-value in the series, ignoring any null and\r\n     * Double.NaN values.  This method returns Double.NaN if there is no\r\n     * smallest y-value (for example, when the series is empty).\r\n     *\r\n     * @return The smallest y-value.\r\n     *\r\n     * @see #getMaxY()\r\n     *\r\n     * @since 1.0.14\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getMaxY#359",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getMaxY()",
        "snippet": "    public double getMaxY() {\n        return this.maxY;\n    }\n",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\r\n     * Returns the largest y-value in the series, ignoring any Double.NaN\r\n     * values.  This method returns Double.NaN if there is no largest y-value\r\n     * (for example, when the series is empty).\r\n     *\r\n     * @return The largest y-value.\r\n     *\r\n     * @see #getMinY()\r\n     *\r\n     * @since 1.0.14\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#651",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, double)",
        "snippet": "    public void add(RegularTimePeriod period, double value) {\n        // defer argument checking...\n        add(period, value, true);\n    }\n",
        "begin_line": 651,
        "end_line": 654,
        "comment": "\r\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#664",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, double, boolean)",
        "snippet": "    public void add(RegularTimePeriod period, double value, boolean notify) {\n        // defer argument checking...\n        TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);\n        add(item, notify);\n    }\n",
        "begin_line": 664,
        "end_line": 668,
        "comment": "\r\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value.\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getYear#170",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getYear()",
        "snippet": "    public int getYear() {\n        return this.year;\n    }\n",
        "begin_line": 170,
        "end_line": 172,
        "comment": "\r\n     * Returns the year.\r\n     *\r\n     * @return The year.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1644
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getSerialIndex#252",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getSerialIndex()",
        "snippet": "    public long getSerialIndex() {\n        return this.year;\n    }\n",
        "begin_line": 252,
        "end_line": 254,
        "comment": "\r\n     * Returns a serial index number for the year.\r\n     * <P>\r\n     * The implementation simply returns the year number (e.g. 2002).\r\n     *\r\n     * @return The serial index number.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1644
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.compareTo#342",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object o1) {\n\n        int result;\n\n        // CASE 1 : Comparing to another Year object\n        // -----------------------------------------\n        if (o1 instanceof Year) {\n            Year y = (Year) o1;\n            result = this.year - y.getYear();\n        }\n\n        // CASE 2 : Comparing to another TimePeriod object\n        // -----------------------------------------------\n        else if (o1 instanceof RegularTimePeriod) {\n            // more difficult case - evaluate later...\n            result = 0;\n        }\n\n        // CASE 3 : Comparing to a non-TimePeriod object\n        // ---------------------------------------------\n        else {\n            // consider time periods to be ordered after general objects\n            result = 1;\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 342,
        "end_line": 369,
        "comment": "\r\n     * Returns an integer indicating the order of this <code>Year</code> object\r\n     * relative to the specified object:\r\n     *\r\n     * negative == before, zero == same, positive == after.\r\n     *\r\n     * @param o1  the object to compare.\r\n     *\r\n     * @return negative == before, zero == same, positive == after.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1644
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.Year#114",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.Year(int)",
        "snippet": "    public Year(int year) {\n        if ((year < Year.MINIMUM_YEAR) || (year > Year.MAXIMUM_YEAR)) {\n            throw new IllegalArgumentException(\n                \"Year constructor: year (\" + year + \") outside valid range.\");\n        }\n        this.year = (short) year;\n        peg(Calendar.getInstance());\n    }\n",
        "begin_line": 114,
        "end_line": 121,
        "comment": "\r\n     * Creates a time period representing a single year.\r\n     *\r\n     * @param year  the year.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.peg#210",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.peg(java.util.Calendar)",
        "snippet": "    public void peg(Calendar calendar) {\n        this.firstMillisecond = getFirstMillisecond(calendar);\n        this.lastMillisecond = getLastMillisecond(calendar);\n    }\n",
        "begin_line": 210,
        "end_line": 213,
        "comment": "\r\n     * Recalculates the start date/time and end date/time for this time period\r\n     * relative to the supplied calendar (which incorporates a time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getFirstMillisecond#267",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getFirstMillisecond(java.util.Calendar)",
        "snippet": "    public long getFirstMillisecond(Calendar calendar) {\n        calendar.set(this.year, Calendar.JANUARY, 1, 0, 0, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        // in the following line, we'd rather call calendar.getTimeInMillis()\n        // to avoid object creation, but that isn't supported in Java 1.3.1\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 267,
        "end_line": 273,
        "comment": "\r\n     * Returns the first millisecond of the year, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The first millisecond of the year.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getLastMillisecond#286",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getLastMillisecond(java.util.Calendar)",
        "snippet": "    public long getLastMillisecond(Calendar calendar) {\n        calendar.set(this.year, Calendar.DECEMBER, 31, 23, 59, 59);\n        calendar.set(Calendar.MILLISECOND, 999);\n        // in the following line, we'd rather call calendar.getTimeInMillis()\n        // to avoid object creation, but that isn't supported in Java 1.3.1\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 286,
        "end_line": 292,
        "comment": "\r\n     * Returns the last millisecond of the year, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The last millisecond of the year.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.TimeSeriesDataItem#120",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod, double)",
        "snippet": "    public TimeSeriesDataItem(RegularTimePeriod period, double value) {\n        this(period, new Double(value));\n    }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\r\n     * Constructs a new data item that associates a value with a time period.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value associated with the time period.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#678",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
        "snippet": "    public void add(RegularTimePeriod period, Number value) {\n        // defer argument checking...\n        add(period, value, true);\n    }\n",
        "begin_line": 678,
        "end_line": 681,
        "comment": "\r\n     * Adds a new data item to the series and sends\r\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#691",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number, boolean)",
        "snippet": "    public void add(RegularTimePeriod period, Number value, boolean notify) {\n        // defer argument checking...\n        TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);\n        add(item, notify);\n    }\n",
        "begin_line": 691,
        "end_line": 695,
        "comment": "\r\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getRawDataItem#428",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getRawDataItem(int)",
        "snippet": "    TimeSeriesDataItem getRawDataItem(int index) {\n        return (TimeSeriesDataItem) this.data.get(index);\n    }\n",
        "begin_line": 428,
        "end_line": 430,
        "comment": "\r\n     * Returns a data item for the series.  This method returns the object\r\n     * that is used for the underlying storage - you should not modify the\r\n     * contents of the returned value unless you know what you are doing.\r\n     *\r\n     * @param index  the item index (zero-based).\r\n     *\r\n     * @return The data item.\r\n     *\r\n     * @see #getDataItem(int)\r\n     *\r\n     * @since 1.0.14\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getTimePeriod#462",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getTimePeriod(int)",
        "snippet": "    public RegularTimePeriod getTimePeriod(int index) {\n        return getRawDataItem(index).getPeriod();\n    }\n",
        "begin_line": 462,
        "end_line": 464,
        "comment": "\r\n     * Returns the time period at the specified index.\r\n     *\r\n     * @param index  the index of the data item.\r\n     *\r\n     * @return The time period.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.add#575",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.TimeSeriesDataItem, boolean)",
        "snippet": "    public void add(TimeSeriesDataItem item, boolean notify) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null 'item' argument.\");\n        }\n        item = (TimeSeriesDataItem) item.clone();\n        Class c = item.getPeriod().getClass();\n        if (this.timePeriodClass == null) {\n            this.timePeriodClass = c;\n        }\n        else if (!this.timePeriodClass.equals(c)) {\n            StringBuffer b = new StringBuffer();\n            b.append(\"You are trying to add data where the time period class \");\n            b.append(\"is \");\n            b.append(item.getPeriod().getClass().getName());\n            b.append(\", but the TimeSeries is expecting an instance of \");\n            b.append(this.timePeriodClass.getName());\n            b.append(\".\");\n            throw new SeriesException(b.toString());\n        }\n\n        // make the change (if it's not a duplicate time period)...\n        boolean added = false;\n        int count = getItemCount();\n        if (count == 0) {\n            this.data.add(item);\n            added = true;\n        }\n        else {\n            RegularTimePeriod last = getTimePeriod(getItemCount() - 1);\n            if (item.getPeriod().compareTo(last) > 0) {\n                this.data.add(item);\n                added = true;\n            }\n            else {\n                int index = Collections.binarySearch(this.data, item);\n                if (index < 0) {\n                    this.data.add(-index - 1, item);\n                    added = true;\n                }\n                else {\n                    StringBuffer b = new StringBuffer();\n                    b.append(\"You are attempting to add an observation for \");\n                    b.append(\"the time period \");\n                    b.append(item.getPeriod().toString());\n                    b.append(\" but the series already contains an observation\");\n                    b.append(\" for that time period. Duplicates are not \");\n                    b.append(\"permitted.  Try using the addOrUpdate() method.\");\n                    throw new SeriesException(b.toString());\n                }\n            }\n        }\n        if (added) {\n            updateBoundsForAddedItem(item);\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                TimeSeriesDataItem d = (TimeSeriesDataItem) this.data.remove(0);\n                updateBoundsForRemovedItem(d);\n            }\n\n            removeAgedItems(false);  // remove old items if necessary, but\n                                     // don't notify anyone, because that\n                                     // happens next anyway...\n            if (notify) {\n                fireSeriesChanged();\n            }\n        }\n\n    }\n",
        "begin_line": 575,
        "end_line": 642,
        "comment": "\r\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\r\n     *              permitted).\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.removeAgedItems#874",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.removeAgedItems(boolean)",
        "snippet": "    public void removeAgedItems(boolean notify) {\n        // check if there are any values earlier than specified by the history\n        // count...\n        if (getItemCount() > 1) {\n            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();\n            boolean removed = false;\n            while ((latest - getTimePeriod(0).getSerialIndex())\n                    > this.maximumItemAge) {\n                this.data.remove(0);\n                removed = true;\n            }\n            if (removed) {\n                findBoundsByIteration();\n                if (notify) {\n                    fireSeriesChanged();\n                }\n            }\n        }\n    }\n",
        "begin_line": 874,
        "end_line": 892,
        "comment": "\r\n     * Age items in the series.  Ensure that the timespan from the youngest to\r\n     * the oldest record in the series does not exceed maximumItemAge time\r\n     * periods.  Oldest items will be removed if required.\r\n     *\r\n     * @param notify  controls whether or not a {@link SeriesChangeEvent} is\r\n     *                sent to registered listeners IF any items are removed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.minIgnoreNaN#1264",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.minIgnoreNaN(double, double)",
        "snippet": "    private double minIgnoreNaN(double a, double b) {\n        if (Double.isNaN(a)) {\n            return b;\n        }\n        else {\n            if (Double.isNaN(b)) {\n                return a;\n            }\n            else {\n                return Math.min(a, b);\n            }\n        }\n    }\n",
        "begin_line": 1264,
        "end_line": 1276,
        "comment": "\r\n     * A function to find the minimum of two values, but ignoring any\r\n     * Double.NaN values.\r\n     *\r\n     * @param a  the first value.\r\n     * @param b  the second value.\r\n     *\r\n     * @return The minimum of the two values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.maxIgnoreNaN#1287",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.maxIgnoreNaN(double, double)",
        "snippet": "    private double maxIgnoreNaN(double a, double b) {\n        if (Double.isNaN(a)) {\n            return b;\n        }\n        else {\n            if (Double.isNaN(b)) {\n                return a;\n            }\n            else {\n                return Math.max(a, b);\n            }\n        }\n    }\n",
        "begin_line": 1287,
        "end_line": 1299,
        "comment": "\r\n     * A function to find the maximum of two values, but ignoring any\r\n     * Double.NaN values.\r\n     *\r\n     * @param a  the first value.\r\n     * @param b  the second value.\r\n     *\r\n     * @return The maximum of the two values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.TimeSeriesDataItem#105",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
        "snippet": "    public TimeSeriesDataItem(RegularTimePeriod period, Number value) {\n        if (period == null) {\n            throw new IllegalArgumentException(\"Null 'period' argument.\");\n        }\n        this.period = period;\n        this.value = value;\n        this.selected = false;\n    }\n",
        "begin_line": 105,
        "end_line": 112,
        "comment": "\r\n     * Constructs a new data item that associates a value with a time period.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.getPeriod#129",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.getPeriod()",
        "snippet": "    public RegularTimePeriod getPeriod() {\n        return this.period;\n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\r\n     * Returns the time period.\r\n     *\r\n     * @return The time period (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.getValue#140",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.getValue()",
        "snippet": "    public Number getValue() {\n        return this.value;\n    }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\r\n     * Returns the value.\r\n     *\r\n     * @return The value (<code>null</code> possible).\r\n     *\r\n     * @see #setValue(java.lang.Number)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeriesDataItem.clone#265",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeriesDataItem.java",
        "class_name": "org.jfree.data.time.TimeSeriesDataItem",
        "signature": "org.jfree.data.time.TimeSeriesDataItem.clone()",
        "snippet": "    public Object clone() {\n        Object clone = null;\n        try {\n            clone = super.clone();\n        }\n        catch (CloneNotSupportedException e) { // won't get here...\n            e.printStackTrace();\n        }\n        return clone;\n    }\n",
        "begin_line": 265,
        "end_line": 274,
        "comment": "\r\n     * Clones the data item.  Note: there is no need to clone the period or\r\n     * value since they are immutable instances.\r\n     *\r\n     * @return A clone of the data item.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.updateBoundsForAddedItem#1210",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)",
        "snippet": "    private void updateBoundsForAddedItem(TimeSeriesDataItem item) {\n        Number yN = item.getValue();\n        if (item.getValue() != null) {\n            double y = yN.doubleValue();\n            this.minY = minIgnoreNaN(this.minY, y);\n            this.maxY = maxIgnoreNaN(this.maxY, y);\n        }\n    }\n",
        "begin_line": 1210,
        "end_line": 1217,
        "comment": "\r\n     * Updates the cached values for the minimum and maximum data values.\r\n     *\r\n     * @param item  the item added (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.14\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.fireSeriesChanged#314",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.fireSeriesChanged()",
        "snippet": "    public void fireSeriesChanged() {\n        if (this.notify) {\n            notifyListeners(new SeriesChangeEvent(this));\n        }\n    }\n",
        "begin_line": 314,
        "end_line": 318,
        "comment": "\r\n     * General method for signalling to registered listeners that the series\r\n     * has been changed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.notifyListeners#326",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.notifyListeners(org.jfree.data.event.SeriesChangeEvent)",
        "snippet": "    protected void notifyListeners(SeriesChangeEvent event) {\n\n        Object[] listenerList = this.listeners.getListenerList();\n        for (int i = listenerList.length - 2; i >= 0; i -= 2) {\n            if (listenerList[i] == SeriesChangeListener.class) {\n                ((SeriesChangeListener) listenerList[i + 1]).seriesChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 326,
        "end_line": 336,
        "comment": "\r\n     * Sends a change event to all registered listeners.\r\n     *\r\n     * @param event  contains information about the event that triggered the\r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#69",
        "is_bug": false,
        "src_path": "source/org/jfree/data/event/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.event.SeriesChangeEvent",
        "signature": "org.jfree.data.event.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object)",
        "snippet": "    public SeriesChangeEvent(Object source) {\n        this(source, null);\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\r\n     * Constructs a new event.\r\n     *\r\n     * @param source  the source of the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#81",
        "is_bug": false,
        "src_path": "source/org/jfree/data/event/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.event.SeriesChangeEvent",
        "signature": "org.jfree.data.event.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object, org.jfree.data.general.SeriesChangeInfo)",
        "snippet": "    public SeriesChangeEvent(Object source, SeriesChangeInfo summary) {\n        super(source);\n        this.summary = summary;\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\r\n     * Constructs a new change event.\r\n     *\r\n     * @param source  the event source.\r\n     * @param summary  a summary of the change (<code>null</code> permitted).\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.getItemCount#253",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.data.size();\n    }\n",
        "begin_line": 253,
        "end_line": 255,
        "comment": "\r\n     * Returns the number of items in the series.\r\n     *\r\n     * @return The item count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.TimeSeries#168",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable)",
        "snippet": "    public TimeSeries(Comparable name) {\n        this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);\n    }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "\r\n     * Creates a new (empty) time series.  By default, a daily time series is\r\n     * created.  Use one of the other constructors if you require a different\r\n     * time period.\r\n     *\r\n     * @param name  the series name (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimeSeries.TimeSeries#185",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimeSeries.java",
        "class_name": "org.jfree.data.time.TimeSeries",
        "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable, java.lang.String, java.lang.String)",
        "snippet": "    public TimeSeries(Comparable name, String domain, String range) {\n        super(name);\n        this.domain = domain;\n        this.range = range;\n        this.timePeriodClass = null;\n        this.data = new java.util.ArrayList();\n        this.maximumItemCount = Integer.MAX_VALUE;\n        this.maximumItemAge = Long.MAX_VALUE;\n        this.minY = Double.NaN;\n        this.maxY = Double.NaN;\n    }\n",
        "begin_line": 185,
        "end_line": 195,
        "comment": "\r\n     * Creates a new time series that contains no data.\r\n     * <P>\r\n     * Descriptions can be specified for the domain and range.  One situation\r\n     * where this is helpful is when generating a chart for the time series -\r\n     * axis labels can be taken from the domain and range description.\r\n     *\r\n     * @param name  the name of the series (<code>null</code> not permitted).\r\n     * @param domain  the domain description (<code>null</code> permitted).\r\n     * @param range  the range description (<code>null</code> permitted).\r\n     *\r\n     * @since 1.0.13\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#103",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable)",
        "snippet": "    protected Series(Comparable key) {\n        this(key, null);\n    }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\r\n     * Creates a new series with the specified key.\r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#113",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable, java.lang.String)",
        "snippet": "    protected Series(Comparable key, String description) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        this.key = key;\n        this.description = description;\n        this.listeners = new EventListenerList();\n        this.propertyChangeSupport = new PropertyChangeSupport(this);\n        this.notify = true;\n    }\n",
        "begin_line": 113,
        "end_line": 122,
        "comment": "\r\n     * Creates a new series with the specified key and description.\r\n     *\r\n     * @param key  the series key (<code>null</code> NOT permitted).\r\n     * @param description  the series description (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    }
]