[
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimeSeriesTests.class);\n    }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.TimeSeriesTests(java.lang.String)",
        "snippet": "    public TimeSeriesTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.setUp()",
        "snippet": "    protected void setUp() {\n\n        this.seriesA = new TimeSeries(\"Series A\");\n        try {\n            this.seriesA.add(new Year(2000), new Integer(102000));\n            this.seriesA.add(new Year(2001), new Integer(102001));\n            this.seriesA.add(new Year(2002), new Integer(102002));\n            this.seriesA.add(new Year(2003), new Integer(102003));\n            this.seriesA.add(new Year(2004), new Integer(102004));\n            this.seriesA.add(new Year(2005), new Integer(102005));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n        this.seriesB = new TimeSeries(\"Series B\");\n        try {\n            this.seriesB.add(new Year(2006), new Integer(202006));\n            this.seriesB.add(new Year(2007), new Integer(202007));\n            this.seriesB.add(new Year(2008), new Integer(202008));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n        this.seriesC = new TimeSeries(\"Series C\");\n        try {\n            this.seriesC.add(new Year(1999), new Integer(301999));\n            this.seriesC.add(new Year(2000), new Integer(302000));\n            this.seriesC.add(new Year(2002), new Integer(302002));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n    }\n",
        "begin_line": 119,
        "end_line": 154,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 50)",
            "(line 122,col 9)-(line 132,col 9)",
            "(line 134,col 9)-(line 134,col 50)",
            "(line 135,col 9)-(line 142,col 9)",
            "(line 144,col 9)-(line 144,col 50)",
            "(line 145,col 9)-(line 152,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.seriesChanged(org.jfree.data.event.SeriesChangeEvent)",
        "snippet": "    public void seriesChanged(SeriesChangeEvent event) {\n        this.gotSeriesChangeEvent = true;\n    }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "\n     * Sets the flag to indicate that a {@link SeriesChangeEvent} has been\n     * received.\n     *\n     * @param event  the event.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testClone()",
        "snippet": "    public void testClone() {\n\n        TimeSeries series = new TimeSeries(\"Test Series\");\n\n        RegularTimePeriod jan1st2002 = new Day(1, MonthConstants.JANUARY, 2002);\n        try {\n            series.add(jan1st2002, new Integer(42));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem adding to series.\");\n        }\n\n        TimeSeries clone = null;\n        try {\n            clone = (TimeSeries) series.clone();\n            clone.setKey(\"Clone Series\");\n            try {\n                clone.update(jan1st2002, new Integer(10));\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n\n        int seriesValue = series.getValue(jan1st2002).intValue();\n        int cloneValue = Integer.MAX_VALUE;\n        if (clone != null) {\n            cloneValue = clone.getValue(jan1st2002).intValue();\n        }\n\n        assertEquals(42, seriesValue);\n        assertEquals(10, cloneValue);\n        assertEquals(\"Test Series\", series.getKey());\n        if (clone != null) {\n            assertEquals(\"Clone Series\", clone.getKey());\n        }\n        else {\n            assertTrue(false);\n        }\n\n    }\n",
        "begin_line": 169,
        "end_line": 212,
        "comment": "\n     * Check that cloning works.\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 58)",
            "(line 173,col 9)-(line 173,col 80)",
            "(line 174,col 9)-(line 179,col 9)",
            "(line 181,col 9)-(line 181,col 32)",
            "(line 182,col 9)-(line 194,col 9)",
            "(line 196,col 9)-(line 196,col 65)",
            "(line 197,col 9)-(line 197,col 43)",
            "(line 198,col 9)-(line 200,col 9)",
            "(line 202,col 9)-(line 202,col 38)",
            "(line 203,col 9)-(line 203,col 37)",
            "(line 204,col 9)-(line 204,col 53)",
            "(line 205,col 9)-(line 210,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testClone2()",
        "snippet": "    public void testClone2() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.add(new Year(2007), 100.0);\n        s1.add(new Year(2008), null);\n        s1.add(new Year(2009), 200.0);\n        TimeSeries s2 = null;\n        try {\n            s2 = (TimeSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1.equals(s2));\n\n        // check independence\n        s2.addOrUpdate(new Year(2009), 300.0);\n        assertFalse(s1.equals(s2));\n        s1.addOrUpdate(new Year(2009), 300.0);\n        assertTrue(s1.equals(s2));\n    }\n",
        "begin_line": 217,
        "end_line": 236,
        "comment": "\n     * Another test of the clone() method.\n     ",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 45)",
            "(line 219,col 9)-(line 219,col 38)",
            "(line 220,col 9)-(line 220,col 37)",
            "(line 221,col 9)-(line 221,col 38)",
            "(line 222,col 9)-(line 222,col 29)",
            "(line 223,col 9)-(line 228,col 9)",
            "(line 229,col 9)-(line 229,col 34)",
            "(line 232,col 9)-(line 232,col 46)",
            "(line 233,col 9)-(line 233,col 35)",
            "(line 234,col 9)-(line 234,col 46)",
            "(line 235,col 9)-(line 235,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAddValue()",
        "snippet": "    public void testAddValue() {\n\n        try {\n            this.seriesA.add(new Year(1999), new Integer(1));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem adding to series.\");\n        }\n\n        int value = this.seriesA.getValue(0).intValue();\n        assertEquals(1, value);\n\n    }\n",
        "begin_line": 241,
        "end_line": 253,
        "comment": "\n     * Add a value to series A for 1999.  It should be added at index 0.\n     ",
        "child_ranges": [
            "(line 243,col 9)-(line 248,col 9)",
            "(line 250,col 9)-(line 250,col 56)",
            "(line 251,col 9)-(line 251,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetValue()",
        "snippet": "    public void testGetValue() {\n\n        Number value1 = this.seriesA.getValue(new Year(1999));\n        assertNull(value1);\n        int value2 = this.seriesA.getValue(new Year(2000)).intValue();\n        assertEquals(102000, value2);\n\n    }\n",
        "begin_line": 258,
        "end_line": 265,
        "comment": "\n     * Tests the retrieval of values.\n     ",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 62)",
            "(line 261,col 9)-(line 261,col 27)",
            "(line 262,col 9)-(line 262,col 70)",
            "(line 263,col 9)-(line 263,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testDelete()",
        "snippet": "    public void testDelete() {\n        this.seriesA.delete(0, 0);\n        assertEquals(5, this.seriesA.getItemCount());\n        Number value = this.seriesA.getValue(new Year(2000));\n        assertNull(value);\n    }\n",
        "begin_line": 270,
        "end_line": 275,
        "comment": "\n     * Tests the deletion of values.\n     ",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 34)",
            "(line 272,col 9)-(line 272,col 53)",
            "(line 273,col 9)-(line 273,col 61)",
            "(line 274,col 9)-(line 274,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testDelete2()",
        "snippet": "    public void testDelete2() {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.addChangeListener(this);\n        this.gotSeriesChangeEvent = false;\n        s1.delete(new Year(2001));\n        assertTrue(this.gotSeriesChangeEvent);\n        assertEquals(2, s1.getItemCount());\n        assertEquals(null, s1.getValue(new Year(2001)));\n\n        // try deleting a time period that doesn't exist...\n        this.gotSeriesChangeEvent = false;\n        s1.delete(new Year(2006));\n        assertFalse(this.gotSeriesChangeEvent);\n\n        // try deleting null\n        try {\n            s1.delete(null);\n            fail(\"Expected IllegalArgumentException.\");\n        }\n        catch (IllegalArgumentException e) {\n            // expected\n        }\n    }\n",
        "begin_line": 280,
        "end_line": 305,
        "comment": "\n     * Basic tests for the delete() method.\n     ",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 49)",
            "(line 282,col 9)-(line 282,col 38)",
            "(line 283,col 9)-(line 283,col 38)",
            "(line 284,col 9)-(line 284,col 37)",
            "(line 285,col 9)-(line 285,col 35)",
            "(line 286,col 9)-(line 286,col 42)",
            "(line 287,col 9)-(line 287,col 34)",
            "(line 288,col 9)-(line 288,col 46)",
            "(line 289,col 9)-(line 289,col 43)",
            "(line 290,col 9)-(line 290,col 56)",
            "(line 293,col 9)-(line 293,col 42)",
            "(line 294,col 9)-(line 294,col 34)",
            "(line 295,col 9)-(line 295,col 47)",
            "(line 298,col 9)-(line 304,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testDelete3()",
        "snippet": "    public void testDelete3() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.add(new Year(2011), 1.1);\n        s1.add(new Year(2012), 2.2);\n        s1.add(new Year(2013), 3.3);\n        s1.add(new Year(2014), 4.4);\n        s1.add(new Year(2015), 5.5);\n        s1.add(new Year(2016), 6.6);\n        s1.delete(2, 5);\n        assertEquals(2, s1.getItemCount());\n        assertEquals(new Year(2011), s1.getTimePeriod(0));\n        assertEquals(new Year(2012), s1.getTimePeriod(1));\n        assertEquals(1.1, s1.getMinY(), EPSILON);\n        assertEquals(2.2, s1.getMaxY(), EPSILON);\n    }\n",
        "begin_line": 310,
        "end_line": 324,
        "comment": "\n     * Some checks for the delete(int, int) method.\n     ",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 45)",
            "(line 312,col 9)-(line 312,col 36)",
            "(line 313,col 9)-(line 313,col 36)",
            "(line 314,col 9)-(line 314,col 36)",
            "(line 315,col 9)-(line 315,col 36)",
            "(line 316,col 9)-(line 316,col 36)",
            "(line 317,col 9)-(line 317,col 36)",
            "(line 318,col 9)-(line 318,col 24)",
            "(line 319,col 9)-(line 319,col 43)",
            "(line 320,col 9)-(line 320,col 58)",
            "(line 321,col 9)-(line 321,col 58)",
            "(line 322,col 9)-(line 322,col 49)",
            "(line 323,col 9)-(line 323,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testDelete_RegularTimePeriod()",
        "snippet": "    public void testDelete_RegularTimePeriod() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.add(new Year(2010), 1.1);\n        s1.add(new Year(2011), 2.2);\n        s1.add(new Year(2012), 3.3);\n        s1.add(new Year(2013), 4.4);\n        s1.delete(new Year(2010));\n        s1.delete(new Year(2013));\n        assertEquals(2.2, s1.getMinY(), EPSILON);\n        assertEquals(3.3, s1.getMaxY(), EPSILON);\n    }\n",
        "begin_line": 330,
        "end_line": 340,
        "comment": "\n     * Check that the item bounds are determined correctly when there is a\n     * maximum item count and a new value is added.\n     ",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 45)",
            "(line 332,col 9)-(line 332,col 36)",
            "(line 333,col 9)-(line 333,col 36)",
            "(line 334,col 9)-(line 334,col 36)",
            "(line 335,col 9)-(line 335,col 36)",
            "(line 336,col 9)-(line 336,col 34)",
            "(line 337,col 9)-(line 337,col 34)",
            "(line 338,col 9)-(line 338,col 49)",
            "(line 339,col 9)-(line 339,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n        TimeSeries s1 = new TimeSeries(\"A test\");\n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.add(new Year(2005), 19.32);\n        s1.add(new Year(2007), 16.89);\n        TimeSeries s2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            s2 = (TimeSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1.equals(s2));\n    }\n",
        "begin_line": 345,
        "end_line": 367,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 346,col 9)-(line 346,col 49)",
            "(line 347,col 9)-(line 347,col 38)",
            "(line 348,col 9)-(line 348,col 38)",
            "(line 349,col 9)-(line 349,col 37)",
            "(line 350,col 9)-(line 350,col 38)",
            "(line 351,col 9)-(line 351,col 38)",
            "(line 352,col 9)-(line 352,col 29)",
            "(line 353,col 9)-(line 365,col 9)",
            "(line 366,col 9)-(line 366,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TimeSeries s1 = new TimeSeries(\"Time Series 1\");\n        TimeSeries s2 = new TimeSeries(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n        s1.setMaximumItemCount(100);\n        boolean b5 = s1.equals(s2);\n        assertFalse(\"b5\", b5);\n\n        s2.setMaximumItemCount(100);\n        boolean b6 = s1.equals(s2);\n        assertTrue(\"b6\", b6);\n\n        s1.setMaximumItemAge(100);\n        boolean b7 = s1.equals(s2);\n        assertFalse(\"b7\", b7);\n\n        s2.setMaximumItemAge(100);\n        boolean b8 = s1.equals(s2);\n        assertTrue(\"b8\", b8);\n    }\n",
        "begin_line": 372,
        "end_line": 409,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 56)",
            "(line 374,col 9)-(line 374,col 56)",
            "(line 375,col 9)-(line 375,col 35)",
            "(line 376,col 9)-(line 376,col 30)",
            "(line 378,col 9)-(line 378,col 35)",
            "(line 379,col 9)-(line 379,col 35)",
            "(line 380,col 9)-(line 380,col 29)",
            "(line 382,col 9)-(line 382,col 41)",
            "(line 383,col 9)-(line 383,col 41)",
            "(line 384,col 9)-(line 384,col 26)",
            "(line 385,col 9)-(line 385,col 26)",
            "(line 386,col 9)-(line 386,col 35)",
            "(line 387,col 9)-(line 387,col 30)",
            "(line 389,col 9)-(line 389,col 26)",
            "(line 390,col 9)-(line 390,col 26)",
            "(line 391,col 9)-(line 391,col 35)",
            "(line 392,col 9)-(line 392,col 29)",
            "(line 394,col 9)-(line 394,col 36)",
            "(line 395,col 9)-(line 395,col 35)",
            "(line 396,col 9)-(line 396,col 30)",
            "(line 398,col 9)-(line 398,col 36)",
            "(line 399,col 9)-(line 399,col 35)",
            "(line 400,col 9)-(line 400,col 29)",
            "(line 402,col 9)-(line 402,col 34)",
            "(line 403,col 9)-(line 403,col 35)",
            "(line 404,col 9)-(line 404,col 30)",
            "(line 406,col 9)-(line 406,col 34)",
            "(line 407,col 9)-(line 407,col 35)",
            "(line 408,col 9)-(line 408,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testEquals2()",
        "snippet": "    public void testEquals2() {\n        TimeSeries s1 = new TimeSeries(\"Series\", null, null);\n        TimeSeries s2 = new TimeSeries(\"Series\", null, null);\n        assertTrue(s1.equals(s2));\n    }\n",
        "begin_line": 415,
        "end_line": 419,
        "comment": "\n     * Tests a specific bug report where null arguments in the constructor\n     * cause the equals() method to fail.  Fixed for 0.9.21.\n     ",
        "child_ranges": [
            "(line 416,col 9)-(line 416,col 61)",
            "(line 417,col 9)-(line 417,col 61)",
            "(line 418,col 9)-(line 418,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy1()",
        "snippet": "    public void testCreateCopy1() {\n\n        TimeSeries series = new TimeSeries(\"Series\");\n        series.add(new Month(MonthConstants.JANUARY, 2003), 45.0);\n        series.add(new Month(MonthConstants.FEBRUARY, 2003), 55.0);\n        series.add(new Month(MonthConstants.JUNE, 2003), 35.0);\n        series.add(new Month(MonthConstants.NOVEMBER, 2003), 85.0);\n        series.add(new Month(MonthConstants.DECEMBER, 2003), 75.0);\n\n        try {\n            // copy a range before the start of the series data...\n            TimeSeries result1 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.DECEMBER, 2002));\n            assertEquals(0, result1.getItemCount());\n\n            // copy a range that includes only the first item in the series...\n            TimeSeries result2 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.JANUARY, 2003));\n            assertEquals(1, result2.getItemCount());\n\n            // copy a range that begins before and ends in the middle of the\n            // series...\n            TimeSeries result3 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.APRIL, 2003));\n            assertEquals(2, result3.getItemCount());\n\n            TimeSeries result4 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(5, result4.getItemCount());\n\n            TimeSeries result5 = series.createCopy(\n                    new Month(MonthConstants.NOVEMBER, 2002),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(5, result5.getItemCount());\n\n            TimeSeries result6 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.JANUARY, 2003));\n            assertEquals(1, result6.getItemCount());\n\n            TimeSeries result7 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.APRIL, 2003));\n            assertEquals(2, result7.getItemCount());\n\n            TimeSeries result8 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(5, result8.getItemCount());\n\n            TimeSeries result9 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2003),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(5, result9.getItemCount());\n\n            TimeSeries result10 = series.createCopy(\n                    new Month(MonthConstants.MAY, 2003),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(3, result10.getItemCount());\n\n            TimeSeries result11 = series.createCopy(\n                    new Month(MonthConstants.MAY, 2003),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(3, result11.getItemCount());\n\n            TimeSeries result12 = series.createCopy(\n                    new Month(MonthConstants.DECEMBER, 2003),\n                    new Month(MonthConstants.DECEMBER, 2003));\n            assertEquals(1, result12.getItemCount());\n\n            TimeSeries result13 = series.createCopy(\n                    new Month(MonthConstants.DECEMBER, 2003),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(1, result13.getItemCount());\n\n            TimeSeries result14 = series.createCopy(\n                    new Month(MonthConstants.JANUARY, 2004),\n                    new Month(MonthConstants.MARCH, 2004));\n            assertEquals(0, result14.getItemCount());\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n\n    }\n",
        "begin_line": 425,
        "end_line": 513,
        "comment": "\n     * Some tests to ensure that the createCopy(RegularTimePeriod,\n     * RegularTimePeriod) method is functioning correctly.\n     ",
        "child_ranges": [
            "(line 427,col 9)-(line 427,col 53)",
            "(line 428,col 9)-(line 428,col 66)",
            "(line 429,col 9)-(line 429,col 67)",
            "(line 430,col 9)-(line 430,col 63)",
            "(line 431,col 9)-(line 431,col 67)",
            "(line 432,col 9)-(line 432,col 67)",
            "(line 434,col 9)-(line 511,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy2()",
        "snippet": "    public void testCreateCopy2() {\n\n        TimeSeries series = new TimeSeries(\"Series\");\n        series.add(new Month(MonthConstants.JANUARY, 2003), 45.0);\n        series.add(new Month(MonthConstants.FEBRUARY, 2003), 55.0);\n        series.add(new Month(MonthConstants.JUNE, 2003), 35.0);\n        series.add(new Month(MonthConstants.NOVEMBER, 2003), 85.0);\n        series.add(new Month(MonthConstants.DECEMBER, 2003), 75.0);\n\n        try {\n            // copy just the first item...\n            TimeSeries result1 = series.createCopy(0, 0);\n            assertEquals(new Month(1, 2003), result1.getTimePeriod(0));\n\n            // copy the first two items...\n            result1 = series.createCopy(0, 1);\n            assertEquals(new Month(2, 2003), result1.getTimePeriod(1));\n\n            // copy the middle three items...\n            result1 = series.createCopy(1, 3);\n            assertEquals(new Month(2, 2003), result1.getTimePeriod(0));\n            assertEquals(new Month(11, 2003), result1.getTimePeriod(2));\n\n            // copy the last two items...\n            result1 = series.createCopy(3, 4);\n            assertEquals(new Month(11, 2003), result1.getTimePeriod(0));\n            assertEquals(new Month(12, 2003), result1.getTimePeriod(1));\n\n            // copy the last item...\n            result1 = series.createCopy(4, 4);\n            assertEquals(new Month(12, 2003), result1.getTimePeriod(0));\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n\n        // check negative first argument\n        boolean pass = false;\n        try {\n            /* TimeSeries result = */ series.createCopy(-1, 1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        catch (CloneNotSupportedException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n\n        // check second argument less than first argument\n        pass = false;\n        try {\n            /* TimeSeries result = */ series.createCopy(1, 0);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        catch (CloneNotSupportedException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n\n        TimeSeries series2 = new TimeSeries(\"Series 2\");\n        try {\n            TimeSeries series3 = series2.createCopy(99, 999);\n            assertEquals(0, series3.getItemCount());\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n    }\n",
        "begin_line": 519,
        "end_line": 589,
        "comment": "\n     * Some tests to ensure that the createCopy(int, int) method is\n     * functioning correctly.\n     ",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 53)",
            "(line 522,col 9)-(line 522,col 66)",
            "(line 523,col 9)-(line 523,col 67)",
            "(line 524,col 9)-(line 524,col 63)",
            "(line 525,col 9)-(line 525,col 67)",
            "(line 526,col 9)-(line 526,col 67)",
            "(line 528,col 9)-(line 553,col 9)",
            "(line 556,col 9)-(line 556,col 29)",
            "(line 557,col 9)-(line 565,col 9)",
            "(line 566,col 9)-(line 566,col 25)",
            "(line 569,col 9)-(line 569,col 21)",
            "(line 570,col 9)-(line 578,col 9)",
            "(line 579,col 9)-(line 579,col 25)",
            "(line 581,col 9)-(line 581,col 56)",
            "(line 582,col 9)-(line 588,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy3()",
        "snippet": "    public void testCreateCopy3() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.add(new Year(2009), 100.0);\n        s1.add(new Year(2010), 101.0);\n        s1.add(new Year(2011), 102.0);\n        assertEquals(100.0, s1.getMinY(), EPSILON);\n        assertEquals(102.0, s1.getMaxY(), EPSILON);\n\n        TimeSeries s2 = s1.createCopy(0, 1);\n        assertEquals(100.0, s2.getMinY(), EPSILON);\n        assertEquals(101.0, s2.getMaxY(), EPSILON);\n\n        TimeSeries s3 = s1.createCopy(1, 2);\n        assertEquals(101.0, s3.getMinY(), EPSILON);\n        assertEquals(102.0, s3.getMaxY(), EPSILON);\n    }\n",
        "begin_line": 597,
        "end_line": 612,
        "comment": "\n     * Checks that the min and max y values are updated correctly when copying\n     * a subset.\n     *\n     * @throws java.lang.CloneNotSupportedException\n     ",
        "child_ranges": [
            "(line 598,col 9)-(line 598,col 45)",
            "(line 599,col 9)-(line 599,col 38)",
            "(line 600,col 9)-(line 600,col 38)",
            "(line 601,col 9)-(line 601,col 38)",
            "(line 602,col 9)-(line 602,col 51)",
            "(line 603,col 9)-(line 603,col 51)",
            "(line 605,col 9)-(line 605,col 44)",
            "(line 606,col 9)-(line 606,col 51)",
            "(line 607,col 9)-(line 607,col 51)",
            "(line 609,col 9)-(line 609,col 44)",
            "(line 610,col 9)-(line 610,col 51)",
            "(line 611,col 9)-(line 611,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testSetMaximumItemCount()",
        "snippet": "    public void testSetMaximumItemCount() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.add(new Year(2005), 19.32);\n        s1.add(new Year(2007), 16.89);\n        assertTrue(s1.getItemCount() == 5);\n\n        s1.setMaximumItemCount(3);\n        assertTrue(s1.getItemCount() == 3);\n        TimeSeriesDataItem item = s1.getDataItem(0);\n        assertTrue(item.getPeriod().equals(new Year(2002)));\n        assertEquals(16.89, s1.getMinY(), EPSILON);\n        assertEquals(19.32, s1.getMaxY(), EPSILON);\n    }\n",
        "begin_line": 618,
        "end_line": 633,
        "comment": "\n     * Test the setMaximumItemCount() method to ensure that it removes items\n     * from the series if necessary.\n     ",
        "child_ranges": [
            "(line 619,col 9)-(line 619,col 45)",
            "(line 620,col 9)-(line 620,col 38)",
            "(line 621,col 9)-(line 621,col 38)",
            "(line 622,col 9)-(line 622,col 37)",
            "(line 623,col 9)-(line 623,col 38)",
            "(line 624,col 9)-(line 624,col 38)",
            "(line 625,col 9)-(line 625,col 43)",
            "(line 627,col 9)-(line 627,col 34)",
            "(line 628,col 9)-(line 628,col 43)",
            "(line 629,col 9)-(line 629,col 52)",
            "(line 630,col 9)-(line 630,col 60)",
            "(line 631,col 9)-(line 631,col 51)",
            "(line 632,col 9)-(line 632,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAddOrUpdate()",
        "snippet": "    public void testAddOrUpdate() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.setMaximumItemCount(2);\n        s1.addOrUpdate(new Year(2000), 100.0);\n        assertEquals(1, s1.getItemCount());\n        s1.addOrUpdate(new Year(2001), 101.0);\n        assertEquals(2, s1.getItemCount());\n        s1.addOrUpdate(new Year(2001), 102.0);\n        assertEquals(2, s1.getItemCount());\n        s1.addOrUpdate(new Year(2002), 103.0);\n        assertEquals(2, s1.getItemCount());\n    }\n",
        "begin_line": 638,
        "end_line": 649,
        "comment": "\n     * Some checks for the addOrUpdate() method.\n     ",
        "child_ranges": [
            "(line 639,col 9)-(line 639,col 45)",
            "(line 640,col 9)-(line 640,col 34)",
            "(line 641,col 9)-(line 641,col 46)",
            "(line 642,col 9)-(line 642,col 43)",
            "(line 643,col 9)-(line 643,col 46)",
            "(line 644,col 9)-(line 644,col 43)",
            "(line 645,col 9)-(line 645,col 46)",
            "(line 646,col 9)-(line 646,col 43)",
            "(line 647,col 9)-(line 647,col 46)",
            "(line 648,col 9)-(line 648,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAddOrUpdate2()",
        "snippet": "    public void testAddOrUpdate2() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.setMaximumItemCount(2);\n        s1.addOrUpdate(new Year(2010), 1.1);\n        s1.addOrUpdate(new Year(2011), 2.2);\n        s1.addOrUpdate(new Year(2012), 3.3);\n        assertEquals(2, s1.getItemCount());\n        assertEquals(2.2, s1.getMinY(), EPSILON);\n        assertEquals(3.3, s1.getMaxY(), EPSILON);\n    }\n",
        "begin_line": 654,
        "end_line": 663,
        "comment": "\n     * Test the add branch of the addOrUpdate() method.\n     ",
        "child_ranges": [
            "(line 655,col 9)-(line 655,col 45)",
            "(line 656,col 9)-(line 656,col 34)",
            "(line 657,col 9)-(line 657,col 44)",
            "(line 658,col 9)-(line 658,col 44)",
            "(line 659,col 9)-(line 659,col 44)",
            "(line 660,col 9)-(line 660,col 43)",
            "(line 661,col 9)-(line 661,col 49)",
            "(line 662,col 9)-(line 662,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAddOrUpdate3()",
        "snippet": "    public void testAddOrUpdate3() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.addOrUpdate(new Year(2010), 1.1);\n        assertEquals(Year.class, s1.getTimePeriodClass());\n\n        boolean pass = false;\n        try {\n            s1.addOrUpdate(new Month(1, 2009), 0.0);\n        }\n        catch (SeriesException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 669,
        "end_line": 682,
        "comment": "\n     * Test that the addOrUpdate() method won't allow multiple time period\n     * classes.\n     ",
        "child_ranges": [
            "(line 670,col 9)-(line 670,col 45)",
            "(line 671,col 9)-(line 671,col 44)",
            "(line 672,col 9)-(line 672,col 58)",
            "(line 674,col 9)-(line 674,col 29)",
            "(line 675,col 9)-(line 680,col 9)",
            "(line 681,col 9)-(line 681,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAddOrUpdate4()",
        "snippet": "    public void testAddOrUpdate4() {\n        TimeSeries ts = new TimeSeries(\"S\");\n        TimeSeriesDataItem overwritten = ts.addOrUpdate(new Year(2009), 20.09);\n        assertNull(overwritten);\n        overwritten = ts.addOrUpdate(new Year(2009), 1.0);\n        assertEquals(new Double(20.09), overwritten.getValue());\n        assertEquals(new Double(1.0), ts.getValue(new Year(2009)));\n\n        // changing the overwritten record shouldn't affect the series\n        overwritten.setValue(null);\n        assertEquals(new Double(1.0), ts.getValue(new Year(2009)));\n\n        TimeSeriesDataItem item = new TimeSeriesDataItem(new Year(2010), 20.10);\n        overwritten = ts.addOrUpdate(item);\n        assertNull(overwritten);\n        assertEquals(new Double(20.10), ts.getValue(new Year(2010)));\n        // changing the item that was added should not change the series\n        item.setValue(null);\n        assertEquals(new Double(20.10), ts.getValue(new Year(2010)));\n    }\n",
        "begin_line": 687,
        "end_line": 706,
        "comment": "\n     * Some more checks for the addOrUpdate() method.\n     ",
        "child_ranges": [
            "(line 688,col 9)-(line 688,col 44)",
            "(line 689,col 9)-(line 689,col 79)",
            "(line 690,col 9)-(line 690,col 32)",
            "(line 691,col 9)-(line 691,col 58)",
            "(line 692,col 9)-(line 692,col 64)",
            "(line 693,col 9)-(line 693,col 67)",
            "(line 696,col 9)-(line 696,col 35)",
            "(line 697,col 9)-(line 697,col 67)",
            "(line 699,col 9)-(line 699,col 80)",
            "(line 700,col 9)-(line 700,col 43)",
            "(line 701,col 9)-(line 701,col 32)",
            "(line 702,col 9)-(line 702,col 69)",
            "(line 704,col 9)-(line 704,col 28)",
            "(line 705,col 9)-(line 705,col 69)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testBug1075255()",
        "snippet": "    public void testBug1075255() {\n        TimeSeries ts = new TimeSeries(\"dummy\");\n        ts.add(new FixedMillisecond(0L), 0.0);\n        TimeSeries ts2 = new TimeSeries(\"dummy2\");\n        ts2.add(new FixedMillisecond(0L), 1.0);\n        try {\n            ts.addAndOrUpdate(ts2);\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            assertTrue(false);\n        }\n        assertEquals(1, ts.getItemCount());\n    }\n",
        "begin_line": 711,
        "end_line": 724,
        "comment": "\n     * A test for the bug report 1075255.\n     ",
        "child_ranges": [
            "(line 712,col 9)-(line 712,col 48)",
            "(line 713,col 9)-(line 713,col 46)",
            "(line 714,col 9)-(line 714,col 50)",
            "(line 715,col 9)-(line 715,col 47)",
            "(line 716,col 9)-(line 722,col 9)",
            "(line 723,col 9)-(line 723,col 43)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testBug1832432()",
        "snippet": "    public void testBug1832432() {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        TimeSeries s2 = null;\n        try {\n            s2 = (TimeSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n\n        // test independence\n        s1.add(new Day(1, 1, 2007), 100.0);\n        assertFalse(s1.equals(s2));\n    }\n",
        "begin_line": 729,
        "end_line": 745,
        "comment": "\n     * A test for bug 1832432.\n     ",
        "child_ranges": [
            "(line 730,col 9)-(line 730,col 49)",
            "(line 731,col 9)-(line 731,col 29)",
            "(line 732,col 9)-(line 737,col 9)",
            "(line 738,col 9)-(line 738,col 29)",
            "(line 739,col 9)-(line 739,col 51)",
            "(line 740,col 9)-(line 740,col 34)",
            "(line 743,col 9)-(line 743,col 43)",
            "(line 744,col 9)-(line 744,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetIndex()",
        "snippet": "    public void testGetIndex() {\n        TimeSeries series = new TimeSeries(\"Series\");\n        assertEquals(-1, series.getIndex(new Month(1, 2003)));\n\n        series.add(new Month(1, 2003), 45.0);\n        assertEquals(0, series.getIndex(new Month(1, 2003)));\n        assertEquals(-1, series.getIndex(new Month(12, 2002)));\n        assertEquals(-2, series.getIndex(new Month(2, 2003)));\n\n        series.add(new Month(3, 2003), 55.0);\n        assertEquals(-1, series.getIndex(new Month(12, 2002)));\n        assertEquals(0, series.getIndex(new Month(1, 2003)));\n        assertEquals(-2, series.getIndex(new Month(2, 2003)));\n        assertEquals(1, series.getIndex(new Month(3, 2003)));\n        assertEquals(-3, series.getIndex(new Month(4, 2003)));\n    }\n",
        "begin_line": 750,
        "end_line": 765,
        "comment": "\n     * Some checks for the getIndex() method.\n     ",
        "child_ranges": [
            "(line 751,col 9)-(line 751,col 53)",
            "(line 752,col 9)-(line 752,col 62)",
            "(line 754,col 9)-(line 754,col 45)",
            "(line 755,col 9)-(line 755,col 61)",
            "(line 756,col 9)-(line 756,col 63)",
            "(line 757,col 9)-(line 757,col 62)",
            "(line 759,col 9)-(line 759,col 45)",
            "(line 760,col 9)-(line 760,col 63)",
            "(line 761,col 9)-(line 761,col 61)",
            "(line 762,col 9)-(line 762,col 62)",
            "(line 763,col 9)-(line 763,col 61)",
            "(line 764,col 9)-(line 764,col 62)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetDataItem1()",
        "snippet": "    public void testGetDataItem1() {\n        TimeSeries series = new TimeSeries(\"S\");\n\n        // can't get anything yet...just an exception\n        boolean pass = false;\n        try {\n            /*TimeSeriesDataItem item =*/ series.getDataItem(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        series.add(new Year(2006), 100.0);\n        TimeSeriesDataItem item = series.getDataItem(0);\n        assertEquals(new Year(2006), item.getPeriod());\n        pass = false;\n        try {\n            /*item = */series.getDataItem(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            /*item = */series.getDataItem(1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 770,
        "end_line": 803,
        "comment": "\n     * Some checks for the getDataItem(int) method.\n     ",
        "child_ranges": [
            "(line 771,col 9)-(line 771,col 48)",
            "(line 774,col 9)-(line 774,col 29)",
            "(line 775,col 9)-(line 780,col 9)",
            "(line 781,col 9)-(line 781,col 25)",
            "(line 783,col 9)-(line 783,col 42)",
            "(line 784,col 9)-(line 784,col 56)",
            "(line 785,col 9)-(line 785,col 55)",
            "(line 786,col 9)-(line 786,col 21)",
            "(line 787,col 9)-(line 792,col 9)",
            "(line 793,col 9)-(line 793,col 25)",
            "(line 795,col 9)-(line 795,col 21)",
            "(line 796,col 9)-(line 801,col 9)",
            "(line 802,col 9)-(line 802,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetDataItem2()",
        "snippet": "    public void testGetDataItem2() {\n        TimeSeries series = new TimeSeries(\"S\");\n        assertNull(series.getDataItem(new Year(2006)));\n\n        // try a null argument\n        boolean pass = false;\n        try {\n            /* TimeSeriesDataItem item = */ series.getDataItem(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 808,
        "end_line": 821,
        "comment": "\n     * Some checks for the getDataItem(RegularTimePeriod) method.\n     ",
        "child_ranges": [
            "(line 809,col 9)-(line 809,col 48)",
            "(line 810,col 9)-(line 810,col 55)",
            "(line 813,col 9)-(line 813,col 29)",
            "(line 814,col 9)-(line 819,col 9)",
            "(line 820,col 9)-(line 820,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems()",
        "snippet": "    public void testRemoveAgedItems() {\n        TimeSeries series = new TimeSeries(\"Test Series\");\n        series.addChangeListener(this);\n        assertEquals(Long.MAX_VALUE, series.getMaximumItemAge());\n        assertEquals(Integer.MAX_VALUE, series.getMaximumItemCount());\n        this.gotSeriesChangeEvent = false;\n\n        // test empty series\n        series.removeAgedItems(true);\n        assertEquals(0, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n\n        // test series with one item\n        series.add(new Year(1999), 1.0);\n        series.setMaximumItemAge(0);\n        this.gotSeriesChangeEvent = false;\n        series.removeAgedItems(true);\n        assertEquals(1, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n\n        // test series with two items\n        series.setMaximumItemAge(10);\n        series.add(new Year(2001), 2.0);\n        this.gotSeriesChangeEvent = false;\n        series.setMaximumItemAge(2);\n        assertEquals(2, series.getItemCount());\n        assertEquals(0, series.getIndex(new Year(1999)));\n        assertFalse(this.gotSeriesChangeEvent);\n        series.setMaximumItemAge(1);\n        assertEquals(1, series.getItemCount());\n        assertEquals(0, series.getIndex(new Year(2001)));\n        assertTrue(this.gotSeriesChangeEvent);\n    }\n",
        "begin_line": 826,
        "end_line": 858,
        "comment": "\n     * Some checks for the removeAgedItems() method.\n     ",
        "child_ranges": [
            "(line 827,col 9)-(line 827,col 58)",
            "(line 828,col 9)-(line 828,col 39)",
            "(line 829,col 9)-(line 829,col 65)",
            "(line 830,col 9)-(line 830,col 70)",
            "(line 831,col 9)-(line 831,col 42)",
            "(line 834,col 9)-(line 834,col 37)",
            "(line 835,col 9)-(line 835,col 47)",
            "(line 836,col 9)-(line 836,col 47)",
            "(line 839,col 9)-(line 839,col 40)",
            "(line 840,col 9)-(line 840,col 36)",
            "(line 841,col 9)-(line 841,col 42)",
            "(line 842,col 9)-(line 842,col 37)",
            "(line 843,col 9)-(line 843,col 47)",
            "(line 844,col 9)-(line 844,col 47)",
            "(line 847,col 9)-(line 847,col 37)",
            "(line 848,col 9)-(line 848,col 40)",
            "(line 849,col 9)-(line 849,col 42)",
            "(line 850,col 9)-(line 850,col 36)",
            "(line 851,col 9)-(line 851,col 47)",
            "(line 852,col 9)-(line 852,col 57)",
            "(line 853,col 9)-(line 853,col 47)",
            "(line 854,col 9)-(line 854,col 36)",
            "(line 855,col 9)-(line 855,col 47)",
            "(line 856,col 9)-(line 856,col 57)",
            "(line 857,col 9)-(line 857,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems2()",
        "snippet": "    public void testRemoveAgedItems2() {\n        long y2006 = 1157087372534L;  // milliseconds somewhere in 2006\n        TimeSeries series = new TimeSeries(\"Test Series\");\n        series.addChangeListener(this);\n        assertEquals(Long.MAX_VALUE, series.getMaximumItemAge());\n        assertEquals(Integer.MAX_VALUE, series.getMaximumItemCount());\n        this.gotSeriesChangeEvent = false;\n\n        // test empty series\n        series.removeAgedItems(y2006, true);\n        assertEquals(0, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n\n        // test a series with 1 item\n        series.add(new Year(2004), 1.0);\n        series.setMaximumItemAge(1);\n        this.gotSeriesChangeEvent = false;\n        series.removeAgedItems(new Year(2005).getMiddleMillisecond(), true);\n        assertEquals(1, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n        series.removeAgedItems(y2006, true);\n        assertEquals(0, series.getItemCount());\n        assertTrue(this.gotSeriesChangeEvent);\n\n        // test a series with two items\n        series.setMaximumItemAge(2);\n        series.add(new Year(2003), 1.0);\n        series.add(new Year(2005), 2.0);\n        assertEquals(2, series.getItemCount());\n        this.gotSeriesChangeEvent = false;\n        assertEquals(2, series.getItemCount());\n\n        series.removeAgedItems(new Year(2005).getMiddleMillisecond(), true);\n        assertEquals(2, series.getItemCount());\n        assertFalse(this.gotSeriesChangeEvent);\n        series.removeAgedItems(y2006, true);\n        assertEquals(1, series.getItemCount());\n        assertTrue(this.gotSeriesChangeEvent);\n    }\n",
        "begin_line": 863,
        "end_line": 901,
        "comment": "\n     * Some checks for the removeAgedItems(long, boolean) method.\n     ",
        "child_ranges": [
            "(line 864,col 9)-(line 864,col 36)",
            "(line 865,col 9)-(line 865,col 58)",
            "(line 866,col 9)-(line 866,col 39)",
            "(line 867,col 9)-(line 867,col 65)",
            "(line 868,col 9)-(line 868,col 70)",
            "(line 869,col 9)-(line 869,col 42)",
            "(line 872,col 9)-(line 872,col 44)",
            "(line 873,col 9)-(line 873,col 47)",
            "(line 874,col 9)-(line 874,col 47)",
            "(line 877,col 9)-(line 877,col 40)",
            "(line 878,col 9)-(line 878,col 36)",
            "(line 879,col 9)-(line 879,col 42)",
            "(line 880,col 9)-(line 880,col 76)",
            "(line 881,col 9)-(line 881,col 47)",
            "(line 882,col 9)-(line 882,col 47)",
            "(line 883,col 9)-(line 883,col 44)",
            "(line 884,col 9)-(line 884,col 47)",
            "(line 885,col 9)-(line 885,col 46)",
            "(line 888,col 9)-(line 888,col 36)",
            "(line 889,col 9)-(line 889,col 40)",
            "(line 890,col 9)-(line 890,col 40)",
            "(line 891,col 9)-(line 891,col 47)",
            "(line 892,col 9)-(line 892,col 42)",
            "(line 893,col 9)-(line 893,col 47)",
            "(line 895,col 9)-(line 895,col 76)",
            "(line 896,col 9)-(line 896,col 47)",
            "(line 897,col 9)-(line 897,col 47)",
            "(line 898,col 9)-(line 898,col 44)",
            "(line 899,col 9)-(line 899,col 47)",
            "(line 900,col 9)-(line 900,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems3()",
        "snippet": "    public void testRemoveAgedItems3() {\n        TimeSeries s = new TimeSeries(\"Test\");\n        boolean pass = true;\n        try {\n            s.removeAgedItems(0L, true);\n        }\n        catch (Exception e) {\n            pass = false;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 907,
        "end_line": 917,
        "comment": "\n     * Calling removeAgedItems() on an empty series should not throw any\n     * exception.\n     ",
        "child_ranges": [
            "(line 908,col 9)-(line 908,col 46)",
            "(line 909,col 9)-(line 909,col 28)",
            "(line 910,col 9)-(line 915,col 9)",
            "(line 916,col 9)-(line 916,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems4()",
        "snippet": "    public void testRemoveAgedItems4() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.setMaximumItemAge(2);\n        s1.add(new Year(2010), 1.1);\n        s1.add(new Year(2011), 2.2);\n        s1.add(new Year(2012), 3.3);\n        s1.add(new Year(2013), 2.5);\n        assertEquals(3, s1.getItemCount());\n        assertEquals(2.2, s1.getMinY(), EPSILON);\n        assertEquals(3.3, s1.getMaxY(), EPSILON);\n    }\n",
        "begin_line": 923,
        "end_line": 933,
        "comment": "\n     * Check that the item bounds are determined correctly when there is a\n     * maximum item count.\n     ",
        "child_ranges": [
            "(line 924,col 9)-(line 924,col 45)",
            "(line 925,col 9)-(line 925,col 32)",
            "(line 926,col 9)-(line 926,col 36)",
            "(line 927,col 9)-(line 927,col 36)",
            "(line 928,col 9)-(line 928,col 36)",
            "(line 929,col 9)-(line 929,col 36)",
            "(line 930,col 9)-(line 930,col 43)",
            "(line 931,col 9)-(line 931,col 49)",
            "(line 932,col 9)-(line 932,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems5()",
        "snippet": "    public void testRemoveAgedItems5() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.setMaximumItemAge(4);\n        s1.add(new Year(2010), 1.1);\n        s1.add(new Year(2011), 2.2);\n        s1.add(new Year(2012), 3.3);\n        s1.add(new Year(2013), 2.5);\n        s1.removeAgedItems(new Year(2015).getMiddleMillisecond(), true);\n        assertEquals(3, s1.getItemCount());\n        assertEquals(2.2, s1.getMinY(), EPSILON);\n        assertEquals(3.3, s1.getMaxY(), EPSILON);\n    }\n",
        "begin_line": 939,
        "end_line": 950,
        "comment": "\n     * Check that the item bounds are determined correctly after a call to\n     * removeAgedItems().\n     ",
        "child_ranges": [
            "(line 940,col 9)-(line 940,col 45)",
            "(line 941,col 9)-(line 941,col 32)",
            "(line 942,col 9)-(line 942,col 36)",
            "(line 943,col 9)-(line 943,col 36)",
            "(line 944,col 9)-(line 944,col 36)",
            "(line 945,col 9)-(line 945,col 36)",
            "(line 946,col 9)-(line 946,col 72)",
            "(line 947,col 9)-(line 947,col 43)",
            "(line 948,col 9)-(line 948,col 49)",
            "(line 949,col 9)-(line 949,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        TimeSeries s1 = new TimeSeries(\"Test\");\n        TimeSeries s2 = new TimeSeries(\"Test\");\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(new Day(1, 1, 2007), 500.0);\n        s2.add(new Day(1, 1, 2007), 500.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(new Day(2, 1, 2007), null);\n        s2.add(new Day(2, 1, 2007), null);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(new Day(5, 1, 2007), 111.0);\n        s2.add(new Day(5, 1, 2007), 111.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(new Day(9, 1, 2007), 1.0);\n        s2.add(new Day(9, 1, 2007), 1.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n    }\n",
        "begin_line": 955,
        "end_line": 980,
        "comment": "\n     * Some simple checks for the hashCode() method.\n     ",
        "child_ranges": [
            "(line 956,col 9)-(line 956,col 47)",
            "(line 957,col 9)-(line 957,col 47)",
            "(line 958,col 9)-(line 958,col 29)",
            "(line 959,col 9)-(line 959,col 51)",
            "(line 961,col 9)-(line 961,col 43)",
            "(line 962,col 9)-(line 962,col 43)",
            "(line 963,col 9)-(line 963,col 29)",
            "(line 964,col 9)-(line 964,col 51)",
            "(line 966,col 9)-(line 966,col 42)",
            "(line 967,col 9)-(line 967,col 42)",
            "(line 968,col 9)-(line 968,col 29)",
            "(line 969,col 9)-(line 969,col 51)",
            "(line 971,col 9)-(line 971,col 43)",
            "(line 972,col 9)-(line 972,col 43)",
            "(line 973,col 9)-(line 973,col 29)",
            "(line 974,col 9)-(line 974,col 51)",
            "(line 976,col 9)-(line 976,col 41)",
            "(line 977,col 9)-(line 977,col 41)",
            "(line 978,col 9)-(line 978,col 29)",
            "(line 979,col 9)-(line 979,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testBug1864222()",
        "snippet": "    public void testBug1864222() {\n        TimeSeries s = new TimeSeries(\"S\");\n        s.add(new Day(19, 8, 2005), 1);\n        s.add(new Day(31, 1, 2006), 1);\n        boolean pass = true;\n        try {\n            s.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n        }\n        catch (CloneNotSupportedException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 985,
        "end_line": 997,
        "comment": "\n     * Test for bug report 1864222.\n     ",
        "child_ranges": [
            "(line 986,col 9)-(line 986,col 43)",
            "(line 987,col 9)-(line 987,col 39)",
            "(line 988,col 9)-(line 988,col 39)",
            "(line 989,col 9)-(line 989,col 28)",
            "(line 990,col 9)-(line 995,col 9)",
            "(line 996,col 9)-(line 996,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetMinY()",
        "snippet": "    public void testGetMinY() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        assertTrue(Double.isNaN(s1.getMinY()));\n\n        s1.add(new Year(2008), 1.1);\n        assertEquals(1.1, s1.getMinY(), EPSILON);\n\n        s1.add(new Year(2009), 2.2);\n        assertEquals(1.1, s1.getMinY(), EPSILON);\n\n        s1.add(new Year(2000), 99.9);\n        assertEquals(1.1, s1.getMinY(), EPSILON);\n\n        s1.add(new Year(2002), -1.1);\n        assertEquals(-1.1, s1.getMinY(), EPSILON);\n\n        s1.add(new Year(2003), null);\n        assertEquals(-1.1, s1.getMinY(), EPSILON);\n\n        s1.addOrUpdate(new Year(2002), null);\n        assertEquals(1.1, s1.getMinY(), EPSILON);\n   }\n",
        "begin_line": 1004,
        "end_line": 1025,
        "comment": "\n     * Some checks for the getMinY() method.\n     ",
        "child_ranges": [
            "(line 1005,col 9)-(line 1005,col 45)",
            "(line 1006,col 9)-(line 1006,col 47)",
            "(line 1008,col 9)-(line 1008,col 36)",
            "(line 1009,col 9)-(line 1009,col 49)",
            "(line 1011,col 9)-(line 1011,col 36)",
            "(line 1012,col 9)-(line 1012,col 49)",
            "(line 1014,col 9)-(line 1014,col 37)",
            "(line 1015,col 9)-(line 1015,col 49)",
            "(line 1017,col 9)-(line 1017,col 37)",
            "(line 1018,col 9)-(line 1018,col 50)",
            "(line 1020,col 9)-(line 1020,col 37)",
            "(line 1021,col 9)-(line 1021,col 50)",
            "(line 1023,col 9)-(line 1023,col 45)",
            "(line 1024,col 9)-(line 1024,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testGetMaxY()",
        "snippet": "    public void testGetMaxY() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        assertTrue(Double.isNaN(s1.getMaxY()));\n\n        s1.add(new Year(2008), 1.1);\n        assertEquals(1.1, s1.getMaxY(), EPSILON);\n\n        s1.add(new Year(2009), 2.2);\n        assertEquals(2.2, s1.getMaxY(), EPSILON);\n\n        s1.add(new Year(2000), 99.9);\n        assertEquals(99.9, s1.getMaxY(), EPSILON);\n\n        s1.add(new Year(2002), -1.1);\n        assertEquals(99.9, s1.getMaxY(), EPSILON);\n\n        s1.add(new Year(2003), null);\n        assertEquals(99.9, s1.getMaxY(), EPSILON);\n\n        s1.addOrUpdate(new Year(2000), null);\n        assertEquals(2.2, s1.getMaxY(), EPSILON);\n    }\n",
        "begin_line": 1030,
        "end_line": 1051,
        "comment": "\n     * Some checks for the getMaxY() method.\n     ",
        "child_ranges": [
            "(line 1031,col 9)-(line 1031,col 45)",
            "(line 1032,col 9)-(line 1032,col 47)",
            "(line 1034,col 9)-(line 1034,col 36)",
            "(line 1035,col 9)-(line 1035,col 49)",
            "(line 1037,col 9)-(line 1037,col 36)",
            "(line 1038,col 9)-(line 1038,col 49)",
            "(line 1040,col 9)-(line 1040,col 37)",
            "(line 1041,col 9)-(line 1041,col 50)",
            "(line 1043,col 9)-(line 1043,col 37)",
            "(line 1044,col 9)-(line 1044,col 50)",
            "(line 1046,col 9)-(line 1046,col 37)",
            "(line 1047,col 9)-(line 1047,col 50)",
            "(line 1049,col 9)-(line 1049,col 45)",
            "(line 1050,col 9)-(line 1050,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testClear()",
        "snippet": "    public void testClear() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.add(new Year(2009), 1.1);\n        s1.add(new Year(2010), 2.2);\n\n        assertEquals(2, s1.getItemCount());\n\n        s1.clear();\n        assertEquals(0, s1.getItemCount());\n        assertTrue(Double.isNaN(s1.getMinY()));\n        assertTrue(Double.isNaN(s1.getMaxY()));\n    }\n",
        "begin_line": 1056,
        "end_line": 1067,
        "comment": "\n     * A test for the clear method.\n     ",
        "child_ranges": [
            "(line 1057,col 9)-(line 1057,col 45)",
            "(line 1058,col 9)-(line 1058,col 36)",
            "(line 1059,col 9)-(line 1059,col 36)",
            "(line 1061,col 9)-(line 1061,col 43)",
            "(line 1063,col 9)-(line 1063,col 19)",
            "(line 1064,col 9)-(line 1064,col 43)",
            "(line 1065,col 9)-(line 1065,col 47)",
            "(line 1066,col 9)-(line 1066,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAdd()",
        "snippet": "    public void testAdd() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.setMaximumItemCount(2);\n        s1.add(new Year(2010), 1.1);\n        s1.add(new Year(2011), 2.2);\n        s1.add(new Year(2012), 3.3);\n        assertEquals(2, s1.getItemCount());\n        assertEquals(2.2, s1.getMinY(), EPSILON);\n        assertEquals(3.3, s1.getMaxY(), EPSILON);\n    }\n",
        "begin_line": 1073,
        "end_line": 1082,
        "comment": "\n     * Check that the item bounds are determined correctly when there is a\n     * maximum item count and a new value is added.\n     ",
        "child_ranges": [
            "(line 1074,col 9)-(line 1074,col 45)",
            "(line 1075,col 9)-(line 1075,col 34)",
            "(line 1076,col 9)-(line 1076,col 36)",
            "(line 1077,col 9)-(line 1077,col 36)",
            "(line 1078,col 9)-(line 1078,col 36)",
            "(line 1079,col 9)-(line 1079,col 43)",
            "(line 1080,col 9)-(line 1080,col 49)",
            "(line 1081,col 9)-(line 1081,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testUpdate_RegularTimePeriod()",
        "snippet": "    public void testUpdate_RegularTimePeriod() {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.add(new Year(2010), 1.1);\n        s1.add(new Year(2011), 2.2);\n        s1.add(new Year(2012), 3.3);\n        s1.update(new Year(2012), new Double(4.4));\n        assertEquals(4.4, s1.getMaxY(), EPSILON);\n        s1.update(new Year(2010), new Double(0.5));\n        assertEquals(0.5, s1.getMinY(), EPSILON);\n        s1.update(new Year(2012), null);\n        assertEquals(2.2, s1.getMaxY(), EPSILON);\n        s1.update(new Year(2010), null);\n        assertEquals(2.2, s1.getMinY(), EPSILON);\n    }\n",
        "begin_line": 1087,
        "end_line": 1100,
        "comment": "\n     * Some checks for the update(RegularTimePeriod...method).\n     ",
        "child_ranges": [
            "(line 1088,col 9)-(line 1088,col 45)",
            "(line 1089,col 9)-(line 1089,col 36)",
            "(line 1090,col 9)-(line 1090,col 36)",
            "(line 1091,col 9)-(line 1091,col 36)",
            "(line 1092,col 9)-(line 1092,col 51)",
            "(line 1093,col 9)-(line 1093,col 49)",
            "(line 1094,col 9)-(line 1094,col 51)",
            "(line 1095,col 9)-(line 1095,col 49)",
            "(line 1096,col 9)-(line 1096,col 40)",
            "(line 1097,col 9)-(line 1097,col 49)",
            "(line 1098,col 9)-(line 1098,col 40)",
            "(line 1099,col 9)-(line 1099,col 49)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimeSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "signature": "org.jfree.data.time.junit.TimeSeriesTests.testAdd_TimeSeriesDataItem()",
        "snippet": "    public void testAdd_TimeSeriesDataItem() {\n        TimeSeriesDataItem item = new TimeSeriesDataItem(new Year(2009), 1.0);\n        TimeSeries series = new TimeSeries(\"S1\");\n        series.add(item);\n        assertTrue(item.equals(series.getDataItem(0)));\n        item.setValue(new Double(99.9));\n        assertFalse(item.equals(series.getDataItem(0)));\n    }\n",
        "begin_line": 1106,
        "end_line": 1113,
        "comment": "\n     * Create a TimeSeriesDataItem, add it to a TimeSeries.  Now, modifying\n     * the original TimeSeriesDataItem should NOT affect the TimeSeries.\n     ",
        "child_ranges": [
            "(line 1107,col 9)-(line 1107,col 78)",
            "(line 1108,col 9)-(line 1108,col 49)",
            "(line 1109,col 9)-(line 1109,col 25)",
            "(line 1110,col 9)-(line 1110,col 55)",
            "(line 1111,col 9)-(line 1111,col 40)",
            "(line 1112,col 9)-(line 1112,col 56)"
        ]
    }
]