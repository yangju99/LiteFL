[
    {
        "name": "Node.NodeMismatch#2245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NodeMismatch.NodeMismatch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    NodeMismatch(Node nodeA, Node nodeB) {\n      this.nodeA = nodeA;\n      this.nodeB = nodeB;\n    }\n",
        "begin_line": 2245,
        "end_line": 2248,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.propToString#174",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.propToString(int)",
        "snippet": "  private static final String propToString(int propType) {\n      switch (propType) {\n        case LOCAL_BLOCK_PROP:   return \"local_block\";\n        case OBJECT_IDS_PROP:    return \"object_ids_prop\";\n        case CATCH_SCOPE_PROP:   return \"catch_scope_prop\";\n        case LABEL_ID_PROP:      return \"label_id_prop\";\n        case TARGET_PROP:        return \"target\";\n        case BREAK_PROP:         return \"break\";\n        case CONTINUE_PROP:      return \"continue\";\n        case ENUM_PROP:          return \"enum\";\n        case FUNCTION_PROP:      return \"function\";\n        case TEMP_PROP:          return \"temp\";\n        case LOCAL_PROP:         return \"local\";\n        case CODEOFFSET_PROP:    return \"codeoffset\";\n        case FIXUPS_PROP:        return \"fixups\";\n        case VARS_PROP:          return \"vars\";\n        case USES_PROP:          return \"uses\";\n        case REGEXP_PROP:        return \"regexp\";\n        case CASES_PROP:         return \"cases\";\n        case DEFAULT_PROP:       return \"default\";\n        case CASEARRAY_PROP:     return \"casearray\";\n        case SOURCENAME_PROP:    return \"sourcename\";\n        case TYPE_PROP:          return \"type\";\n        case SPECIAL_PROP_PROP:  return \"special_prop\";\n        case LABEL_PROP:         return \"label\";\n        case FINALLY_PROP:       return \"finally\";\n        case LOCALCOUNT_PROP:    return \"localcount\";\n\n        case TARGETBLOCK_PROP:   return \"targetblock\";\n        case VARIABLE_PROP:      return \"variable\";\n        case LASTUSE_PROP:       return \"lastuse\";\n        case ISNUMBER_PROP:      return \"isnumber\";\n        case DIRECTCALL_PROP:    return \"directcall\";\n\n        case SPECIALCALL_PROP:   return \"specialcall\";\n        case DEBUGSOURCE_PROP:   return \"debugsource\";\n\n        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n\n        case SKIP_INDEXES_PROP:  return \"skip_indexes\";\n        case INCRDECR_PROP:      return \"incrdecr\";\n        case MEMBER_TYPE_PROP:   return \"member_type\";\n        case NAME_PROP:          return \"name\";\n        case PARENTHESIZED_PROP: return \"parenthesized\";\n        case QUOTED_PROP:        return \"quoted\";\n\n        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n        case EMPTY_BLOCK: return \"empty_block\";\n        case ORIGINALNAME_PROP: return \"originalname\";\n        case SIDE_EFFECT_FLAGS: return \"side_effect_flags\";\n\n        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n        case IS_OPTIONAL_PARAM:  return \"is_optional_param\";\n        case IS_VAR_ARGS_PARAM:  return \"is_var_args_param\";\n        case IS_NAMESPACE:       return \"is_namespace\";\n        case IS_DISPATCHER:      return \"is_dispatcher\";\n        case DIRECTIVES:         return \"directives\";\n        case DIRECT_EVAL:        return \"direct_eval\";\n        case FREE_CALL:          return \"free_call\";\n        default:\n          Kit.codeBug();\n      }\n      return null;\n  }\n",
        "begin_line": 174,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getSortedPropTypes#842",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSortedPropTypes()",
        "snippet": "  private int[] getSortedPropTypes() {\n    int count = 0;\n    for (PropListItem x = propListHead; x != null; x = x.next) {\n      count++;\n    }\n\n    int[] keys = new int[count];\n    for (PropListItem x = propListHead; x != null; x = x.next) {\n      count--;\n      keys[count] = x.type;\n    }\n\n    Arrays.sort(keys);\n    return keys;\n  }\n",
        "begin_line": 842,
        "end_line": 856,
        "comment": " Gets all the property types, in sorted order.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.toString#906",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toString(true, true, true);\n  }\n",
        "begin_line": 906,
        "end_line": 909,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.toString#911",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(boolean, boolean, boolean)",
        "snippet": "  public String toString(\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    if (Token.printTrees) {\n        StringBuilder sb = new StringBuilder();\n        toString(sb, printSource, printAnnotations, printType);\n        return sb.toString();\n    }\n    return String.valueOf(type);\n  }\n",
        "begin_line": 911,
        "end_line": 921,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.toString#923",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(java.lang.StringBuilder, boolean, boolean, boolean)",
        "snippet": "  private void toString(\n      StringBuilder sb,\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    if (Token.printTrees) {\n      sb.append(Token.name(type));\n      if (this instanceof StringNode) {\n        sb.append(' ');\n        sb.append(getString());\n      } else if (type == Token.FUNCTION) {\n        sb.append(' ');\n        // In the case of JsDoc trees, the first child is often not a string\n        // which causes exceptions to be thrown when calling toString or\n        // toStringTree.\n        if (first.getType() == Token.STRING) {\n          sb.append(first.getString());\n        }\n      } else if (this instanceof ScriptOrFnNode) {\n        ScriptOrFnNode sof = (ScriptOrFnNode) this;\n        if (this instanceof FunctionNode) {\n          FunctionNode fn = (FunctionNode) this;\n          sb.append(' ');\n          sb.append(fn.getFunctionName());\n        }\n        if (printSource) {\n          sb.append(\" [source name: \");\n          sb.append(sof.getSourceName());\n          sb.append(\"] [encoded source length: \");\n          sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n          sb.append(\"] [base line: \");\n          sb.append(sof.getBaseLineno());\n          sb.append(\"] [end line: \");\n          sb.append(sof.getEndLineno());\n          sb.append(']');\n        }\n      } else if (type == Token.NUMBER) {\n        sb.append(' ');\n        sb.append(getDouble());\n      }\n      if (printSource) {\n        int lineno = getLineno();\n        if (lineno != -1) {\n          sb.append(' ');\n          sb.append(lineno);\n        }\n      }\n\n      if (printAnnotations) {\n        int[] keys = getSortedPropTypes();\n        for (int i = 0; i < keys.length; i++) {\n          int type = keys[i];\n          PropListItem x = lookupProperty(type);\n          sb.append(\" [\");\n          sb.append(propToString(type));\n          sb.append(\": \");\n          String value;\n          switch (type) {\n            case TARGETBLOCK_PROP: // can't add this as it recurses\n              value = \"target block property\";\n              break;\n            case LOCAL_BLOCK_PROP: // can't add this as it is dull\n              value = \"last local block\";\n              break;\n            case ISNUMBER_PROP:\n              switch (x.intValue) {\n                case BOTH:\n                  value = \"both\";\n                  break;\n                case RIGHT:\n                  value = \"right\";\n                  break;\n                case LEFT:\n                  value = \"left\";\n                  break;\n                default:\n                  throw Kit.codeBug();\n              }\n              break;\n            case SPECIALCALL_PROP:\n              switch (x.intValue) {\n                case SPECIALCALL_EVAL:\n                  value = \"eval\";\n                  break;\n                case SPECIALCALL_WITH:\n                  value = \"with\";\n                  break;\n                default:\n                  // NON_SPECIALCALL should not be stored\n                  throw Kit.codeBug();\n              }\n              break;\n            default:\n              Object obj = x.objectValue;\n              if (obj != null) {\n                value = obj.toString();\n              } else {\n                value = String.valueOf(x.intValue);\n              }\n              break;\n          }\n          sb.append(value);\n          sb.append(']');\n        }\n      }\n\n      if (printType) {\n        if (jsType != null) {\n          String jsTypeString = jsType.toString();\n          if (jsTypeString != null) {\n            sb.append(\" : \");\n            sb.append(jsTypeString);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 923,
        "end_line": 1039,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.toStringTree#1042",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTree()",
        "snippet": "  public String toStringTree() {\n    return toStringTreeImpl();\n  }\n",
        "begin_line": 1042,
        "end_line": 1044,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.toStringTreeImpl#1046",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeImpl()",
        "snippet": "  private String toStringTreeImpl() {\n    try {\n      StringBuilder s = new StringBuilder();\n      appendStringTree(s);\n      return s.toString();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Should not happen\\n\" + e);\n    }\n  }\n",
        "begin_line": 1046,
        "end_line": 1054,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.appendStringTree#1056",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.appendStringTree(java.lang.Appendable)",
        "snippet": "  public void appendStringTree(Appendable appendable) throws IOException {\n    toStringTreeHelper(this, 0, appendable);\n  }\n",
        "begin_line": 1056,
        "end_line": 1058,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.toStringTreeHelper#1060",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeHelper(com.google.javascript.rhino.Node, int, java.lang.Appendable)",
        "snippet": "  private static void toStringTreeHelper(Node n, int level, Appendable sb)\n      throws IOException {\n    if (Token.printTrees) {\n      for (int i = 0; i != level; ++i) {\n        sb.append(\"    \");\n      }\n      sb.append(n.toString());\n      sb.append('\\n');\n      for (Node cursor = n.getFirstChild();\n           cursor != null;\n           cursor = cursor.getNext()) {\n        toStringTreeHelper(cursor, level + 1, sb);\n      }\n    }\n  }\n",
        "begin_line": 1060,
        "end_line": 1074,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.checkTreeEquals#1366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEquals(com.google.javascript.rhino.Node)",
        "snippet": "  public String checkTreeEquals(Node node2) {\n      NodeMismatch diff = checkTreeEqualsImpl(node2);\n      if (diff != null) {\n        return \"Node tree inequality:\" +\n            \"\\nTree1:\\n\" + toStringTree() +\n            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n      }\n      return null;\n  }\n",
        "begin_line": 1366,
        "end_line": 1376,
        "comment": "\n   * Checks if the subtree under this node is the same as another subtree.\n   * Returns null if it's equal, or a message describing the differences.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.checkTreeEqualsImpl#1396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEqualsImpl(com.google.javascript.rhino.Node)",
        "snippet": "  NodeMismatch checkTreeEqualsImpl(Node node2) {\n    if (!isEquivalentTo(node2, false, false)) {\n      return new NodeMismatch(this, node2);\n    }\n\n    NodeMismatch res = null;\n    Node n, n2;\n    for (n = first, n2 = node2.first;\n         res == null && n != null;\n         n = n.next, n2 = n2.next) {\n      if (node2 == null) {\n        throw new IllegalStateException();\n      }\n      res = n.checkTreeEqualsImpl(n2);\n      if (res != null) {\n        return res;\n      }\n    }\n    return res;\n  }\n",
        "begin_line": 1396,
        "end_line": 1415,
        "comment": "\n   * Compare this node to node2 recursively and return the first pair of nodes\n   * that differs doing a preorder depth-first traversal. Package private for\n   * testing. Returns null if the nodes are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.tokenToName#1441",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.tokenToName(int)",
        "snippet": "  public static String tokenToName(int token) {\n    switch (token) {\n      case Token.ERROR:           return \"error\";\n      case Token.EOF:             return \"eof\";\n      case Token.EOL:             return \"eol\";\n      case Token.ENTERWITH:       return \"enterwith\";\n      case Token.LEAVEWITH:       return \"leavewith\";\n      case Token.RETURN:          return \"return\";\n      case Token.GOTO:            return \"goto\";\n      case Token.IFEQ:            return \"ifeq\";\n      case Token.IFNE:            return \"ifne\";\n      case Token.SETNAME:         return \"setname\";\n      case Token.BITOR:           return \"bitor\";\n      case Token.BITXOR:          return \"bitxor\";\n      case Token.BITAND:          return \"bitand\";\n      case Token.EQ:              return \"eq\";\n      case Token.NE:              return \"ne\";\n      case Token.LT:              return \"lt\";\n      case Token.LE:              return \"le\";\n      case Token.GT:              return \"gt\";\n      case Token.GE:              return \"ge\";\n      case Token.LSH:             return \"lsh\";\n      case Token.RSH:             return \"rsh\";\n      case Token.URSH:            return \"ursh\";\n      case Token.ADD:             return \"add\";\n      case Token.SUB:             return \"sub\";\n      case Token.MUL:             return \"mul\";\n      case Token.DIV:             return \"div\";\n      case Token.MOD:             return \"mod\";\n      case Token.BITNOT:          return \"bitnot\";\n      case Token.NEG:             return \"neg\";\n      case Token.NEW:             return \"new\";\n      case Token.DELPROP:         return \"delprop\";\n      case Token.TYPEOF:          return \"typeof\";\n      case Token.GETPROP:         return \"getprop\";\n      case Token.SETPROP:         return \"setprop\";\n      case Token.GETELEM:         return \"getelem\";\n      case Token.SETELEM:         return \"setelem\";\n      case Token.CALL:            return \"call\";\n      case Token.NAME:            return \"name\";\n      case Token.NUMBER:          return \"number\";\n      case Token.STRING:          return \"string\";\n      case Token.NULL:            return \"null\";\n      case Token.THIS:            return \"this\";\n      case Token.FALSE:           return \"false\";\n      case Token.TRUE:            return \"true\";\n      case Token.SHEQ:            return \"sheq\";\n      case Token.SHNE:            return \"shne\";\n      case Token.REGEXP:          return \"regexp\";\n      case Token.POS:             return \"pos\";\n      case Token.BINDNAME:        return \"bindname\";\n      case Token.THROW:           return \"throw\";\n      case Token.IN:              return \"in\";\n      case Token.INSTANCEOF:      return \"instanceof\";\n      case Token.GETVAR:          return \"getvar\";\n      case Token.SETVAR:          return \"setvar\";\n      case Token.TRY:             return \"try\";\n      case Token.TYPEOFNAME:      return \"typeofname\";\n      case Token.THISFN:          return \"thisfn\";\n      case Token.SEMI:            return \"semi\";\n      case Token.LB:              return \"lb\";\n      case Token.RB:              return \"rb\";\n      case Token.LC:              return \"lc\";\n      case Token.RC:              return \"rc\";\n      case Token.LP:              return \"lp\";\n      case Token.RP:              return \"rp\";\n      case Token.COMMA:           return \"comma\";\n      case Token.ASSIGN:          return \"assign\";\n      case Token.ASSIGN_BITOR:    return \"assign_bitor\";\n      case Token.ASSIGN_BITXOR:   return \"assign_bitxor\";\n      case Token.ASSIGN_BITAND:   return \"assign_bitand\";\n      case Token.ASSIGN_LSH:      return \"assign_lsh\";\n      case Token.ASSIGN_RSH:      return \"assign_rsh\";\n      case Token.ASSIGN_URSH:     return \"assign_ursh\";\n      case Token.ASSIGN_ADD:      return \"assign_add\";\n      case Token.ASSIGN_SUB:      return \"assign_sub\";\n      case Token.ASSIGN_MUL:      return \"assign_mul\";\n      case Token.ASSIGN_DIV:      return \"assign_div\";\n      case Token.ASSIGN_MOD:      return \"assign_mod\";\n      case Token.HOOK:            return \"hook\";\n      case Token.COLON:           return \"colon\";\n      case Token.OR:              return \"or\";\n      case Token.AND:             return \"and\";\n      case Token.INC:             return \"inc\";\n      case Token.DEC:             return \"dec\";\n      case Token.DOT:             return \"dot\";\n      case Token.FUNCTION:        return \"function\";\n      case Token.EXPORT:          return \"export\";\n      case Token.IMPORT:          return \"import\";\n      case Token.IF:              return \"if\";\n      case Token.ELSE:            return \"else\";\n      case Token.SWITCH:          return \"switch\";\n      case Token.CASE:            return \"case\";\n      case Token.DEFAULT:         return \"default\";\n      case Token.WHILE:           return \"while\";\n      case Token.DO:              return \"do\";\n      case Token.FOR:             return \"for\";\n      case Token.BREAK:           return \"break\";\n      case Token.CONTINUE:        return \"continue\";\n      case Token.VAR:             return \"var\";\n      case Token.WITH:            return \"with\";\n      case Token.CATCH:           return \"catch\";\n      case Token.FINALLY:         return \"finally\";\n      case Token.RESERVED:        return \"reserved\";\n      case Token.NOT:             return \"not\";\n      case Token.VOID:            return \"void\";\n      case Token.BLOCK:           return \"block\";\n      case Token.ARRAYLIT:        return \"arraylit\";\n      case Token.OBJECTLIT:       return \"objectlit\";\n      case Token.LABEL:           return \"label\";\n      case Token.TARGET:          return \"target\";\n      case Token.LOOP:            return \"loop\";\n      case Token.EXPR_VOID:       return \"expr_void\";\n      case Token.EXPR_RESULT:     return \"expr_result\";\n      case Token.JSR:             return \"jsr\";\n      case Token.SCRIPT:          return \"script\";\n      case Token.EMPTY:           return \"empty\";\n      case Token.GET_REF:         return \"get_ref\";\n      case Token.REF_SPECIAL:     return \"ref_special\";\n    }\n    return \"<unknown=\"+token+\">\";\n  }\n",
        "begin_line": 1441,
        "end_line": 1562,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.75
        },
        "num_failing_tests": 3
    },
    {
        "name": "DeadAssignmentsElimination.isVariableStillLiveWithinExpression#290",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.isVariableStillLiveWithinExpression(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }\n",
        "begin_line": 290,
        "end_line": 324,
        "comment": "\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.75
        },
        "num_failing_tests": 4
    },
    {
        "name": "DeadAssignmentsElimination.isVariableReadBeforeKill#338",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.isVariableReadBeforeKill(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }\n",
        "begin_line": 338,
        "end_line": 382,
        "comment": "\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.75
        },
        "num_failing_tests": 4
    },
    {
        "name": "TypeSafeDispatcher.process#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
        "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.process(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  public T process(AstNode node) {\n    switch (node.getType()) {\n      case Token.ADD:\n      case Token.AND:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.OR:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return processInfixExpression((InfixExpression) node);\n      case Token.ARRAYLIT:\n        return processArrayLiteral((ArrayLiteral) node);\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return processAssignment((Assignment) node);\n      case Token.BITNOT:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.INC:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.TYPEOF:\n      case Token.VOID:\n        return processUnaryExpression((UnaryExpression) node);\n      case Token.BLOCK:\n        if (node instanceof Block) {\n          return processBlock((Block) node);\n        } else  if (node instanceof Scope) {\n          return processScope((Scope) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n      case Token.CALL:\n        return processFunctionCall((FunctionCall) node);\n      case Token.CASE:\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n      case Token.CATCH:\n      case Token.FINALLY:\n        return processCatchClause((CatchClause) node);\n      case Token.COLON:\n        return processObjectProperty((ObjectProperty) node);\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n      case Token.EMPTY:\n        return processEmptyExpression((EmptyExpression) node);\n      case Token.EXPR_RESULT:\n      case Token.EXPR_VOID:\n        if (node instanceof ExpressionStatement) {\n          return processExpressionStatement((ExpressionStatement) node);\n        } else  if (node instanceof LabeledStatement) {\n          return processLabeledStatement((LabeledStatement) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.DEBUGGER:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        return processKeywordLiteral((KeywordLiteral) node);\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else  if (node instanceof ForLoop) {\n          return processForLoop((ForLoop) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.FUNCTION:\n        return processFunctionNode((FunctionNode) node);\n      case Token.GETELEM:\n        return processElementGet((ElementGet) node);\n      case Token.GETPROP:\n        return processPropertyGet((PropertyGet) node);\n      case Token.HOOK:\n        return processConditionalExpression((ConditionalExpression) node);\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n      case Token.LABEL:\n        return processLabel((Label) node);\n      case Token.LP:\n        return processParenthesizedExpression((ParenthesizedExpression) node);\n      case Token.NAME:\n        return processName((Name) node);\n      case Token.NEW:\n        return processNewExpression((NewExpression) node);\n      case Token.NUMBER:\n        return processNumberLiteral((NumberLiteral) node);\n      case Token.OBJECTLIT:\n        return processObjectLiteral((ObjectLiteral) node);\n      case Token.REGEXP:\n        return processRegExpLiteral((RegExpLiteral) node);\n      case Token.RETURN:\n        return processReturnStatement((ReturnStatement) node);\n      case Token.SCRIPT:\n        return processAstRoot((AstRoot) node);\n      case Token.STRING:\n        return processStringLiteral((StringLiteral) node);\n      case Token.SWITCH:\n        return processSwitchStatement((SwitchStatement) node);\n      case Token.THROW:\n        return processThrowStatement((ThrowStatement) node);\n      case Token.TRY:\n        return processTryStatement((TryStatement) node);\n      case Token.CONST:\n      case Token.VAR:\n        if (node instanceof VariableDeclaration) {\n          return processVariableDeclaration((VariableDeclaration) node);\n        } else  if (node instanceof VariableInitializer) {\n          return processVariableInitializer((VariableInitializer) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.WHILE:\n        return processWhileLoop((WhileLoop) node);\n      case Token.WITH:\n        return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n  }\n",
        "begin_line": 118,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processConditionalExpression#457",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processConditionalExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression)",
        "snippet": "    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }\n",
        "begin_line": 457,
        "end_line": 464,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.precedence#1076",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.precedence(int)",
        "snippet": "  static int precedence(int type) {\n    switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }\n  }\n",
        "begin_line": 1076,
        "end_line": 1151,
        "comment": "\n   *  0 comma ,\n   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=\n   *  2 conditional ?:\n   *  3 logical-or ||\n   *  4 logical-and &&\n   *  5 bitwise-or |\n   *  6 bitwise-xor ^\n   *  7 bitwise-and &\n   *  8 equality == !=\n   *  9 relational < <= > >=\n   * 10 bitwise shift << >> >>>\n   * 11 addition/subtraction + -\n   * 12 multiply/divide * / %\n   * 13 negation/increment ! ~ - ++ --\n   * 14 call, member () [] .\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.computeGenKill#178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.computeGenKill(com.google.javascript.rhino.Node, java.util.BitSet, java.util.BitSet, boolean)",
        "snippet": "  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n          addToSetIfLocal(lhs, kill);\n          addToSetIfLocal(lhs, gen);\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }\n",
        "begin_line": 178,
        "end_line": 263,
        "comment": "\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.add#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n      addLeftExpr(first, p, context);\n      cc.addOp(opstr, true);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(last, p, rhsContext);\n      } else {\n        addExpr(last, p + 1, rhsContext);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(\n            childCount ==\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0));\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().getType() == Token.NUMBER) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type));\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1);\n        cc.addOp(\":\", true);\n        addExpr(last, 1);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.getType() == Token.FUNCTION);\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GET) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          add(jsString(n.getString(), outputCharsetEncoder));\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA));\n          add(\")\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n        throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction())) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        add(jsString(n.getString(), outputCharsetEncoder));\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.getType() == Token.GET || c.getType() == Token.SET) {\n            add(c);\n          } else {\n            // Object literal property names don't have to be quoted if they are\n            // not JavaScript keywords\n            if (c.getType() == Token.STRING &&\n                !c.isQuotedString() &&\n                !TokenStream.isKeyword(c.getString()) &&\n                TokenStream.isJSIdentifier(c.getString()) &&\n                // do not encode literally any non-literal characters that were\n                // unicode escaped.\n                NodeUtil.isLatin(c.getString())) {\n              add(c.getString());\n            } else {\n              addExpr(c, 1);\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (first.getType() != Token.LABEL_NAME) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n",
        "begin_line": 82,
        "end_line": 720,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.transformTokenType#998",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(int)",
        "snippet": "  private static int transformTokenType(int token) {\n    switch (token) {\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:\n        return Token.ERROR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:\n        return Token.EOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:\n        return Token.EOL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:\n        return Token.ENTERWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:\n        return Token.LEAVEWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:\n        return Token.GOTO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:\n        return Token.IFEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:\n        return Token.IFNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:\n        return Token.SETNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NE:\n        return Token.NE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LT:\n        return Token.LT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LE:\n        return Token.LE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GT:\n        return Token.GT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GE:\n        return Token.GE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.POS:\n        return Token.POS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:\n        return Token.SETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:\n        return Token.SETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:\n        return Token.BINDNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:\n        return Token.RETHROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IN:\n        return Token.IN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:\n        return Token.LOCAL_LOAD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:\n        return Token.GETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:\n        return Token.SETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:\n        return Token.CATCH_SCOPE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:\n        return Token.ENUM_INIT_KEYS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:\n        return Token.ENUM_INIT_VALUES;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:\n        return Token.ENUM_NEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:\n        return Token.ENUM_ID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:\n        return Token.THISFN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:\n        return Token.RETURN_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:\n        return Token.GET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:\n        return Token.SET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:\n        return Token.DEL_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:\n        return Token.REF_CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:\n        return Token.REF_SPECIAL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:\n        return Token.DEFAULTNAMESPACE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:\n        return Token.ESCXMLTEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:\n        return Token.ESCXMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:\n        return Token.REF_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:\n        return Token.REF_NS_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:\n        return Token.REF_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:\n        return Token.REF_NS_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:\n        return Token.TRY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:\n        return Token.SEMI;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LB:\n        return Token.LB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RB:\n        return Token.RB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LC:\n        return Token.LC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RC:\n        return Token.RC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LP:\n        return Token.LP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RP:\n        return Token.RP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n        return Token.COLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n        return Token.OR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n        return Token.AND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INC:\n        return Token.INC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:\n        return Token.DOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:\n        return Token.EXPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:\n        return Token.IMPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n        return Token.IF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n        return Token.ELSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:\n        return Token.DEFAULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DO:\n        return Token.DO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n        return Token.FINALLY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:\n        return Token.RESERVED;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:\n        return Token.TARGET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:\n        return Token.LOOP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:\n        return Token.JSR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:\n        return Token.TYPEOFNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:\n        return Token.USE_STACK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:\n        return Token.SETPROP_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:\n        return Token.SETELEM_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:\n        return Token.LOCAL_BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:\n        return Token.SET_REF_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:\n        return Token.DOTDOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:\n        return Token.COLONCOLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XML:\n        return Token.XML;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:\n        return Token.DOTQUERY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:\n        return Token.XMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:\n        return Token.XMLEND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:\n        return Token.TO_OBJECT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:\n        return Token.TO_DOUBLE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET:\n        return Token.GET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET:\n        return Token.SET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:\n        return Token.SETCONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }\n\n    // Token without name\n    throw new IllegalStateException(String.valueOf(token));\n  }\n",
        "begin_line": 998,
        "end_line": 1309,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6708
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.opToStr#2099",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.opToStr(int)",
        "snippet": "  static String opToStr(int operator) {\n    switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }\n  }\n",
        "begin_line": 2099,
        "end_line": 2144,
        "comment": "\n   * Converts an operator's token value (see {@link Token}) to a string\n   * representation.\n   *\n   * @param operator the operator's token value to convert\n   * @return the string representation or {@code null} if the token value is\n   * not an operator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6124
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processKeywordLiteral#628",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processKeywordLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.KeywordLiteral)",
        "snippet": "    @Override\n    Node processKeywordLiteral(KeywordLiteral literalNode) {\n      return newNode(transformTokenType(literalNode.getType()));\n    }\n",
        "begin_line": 628,
        "end_line": 631,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5669
        },
        "num_failing_tests": 3
    },
    {
        "name": "DeadAssignmentsElimination.tryRemoveAssignment#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.tryRemoveAssignment(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.DataFlowAnalysis.FlowState<com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice>)",
        "snippet": "  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }\n",
        "begin_line": 169,
        "end_line": 273,
        "comment": "\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5164
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isLhs#2003",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLhs(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isLhs(Node n, Node parent) {\n    return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;\n  }\n",
        "begin_line": 2003,
        "end_line": 2006,
        "comment": "\n   * Determines whether this node is strictly on the left hand side of an assign\n   * or var initialization. Notably, this does not include all L-values, only\n   * statements where the node is used only as an L-value.\n   *\n   * @param n The node\n   * @param parent Parent of the node\n   * @return True if n is the left hand of an assign\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4588
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processParenthesizedExpression#751",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processParenthesizedExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression)",
        "snippet": "    @Override\n    Node processParenthesizedExpression(ParenthesizedExpression exprNode) {\n      Node node = transform(exprNode.getExpression());\n      node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);\n      return node;\n    }\n",
        "begin_line": 751,
        "end_line": 756,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.Node#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node left, Node mid, Node right) {\n    Preconditions.checkArgument(left.parent == null);\n    Preconditions.checkArgument(left.next == null);\n    Preconditions.checkArgument(mid.parent == null);\n    Preconditions.checkArgument(mid.next == null);\n    Preconditions.checkArgument(right.parent == null);\n    Preconditions.checkArgument(right.next == null);\n    type = nodeType;\n    parent = null;\n    first = left;\n    last = right;\n    left.next = mid;\n    left.parent = this;\n    mid.next = right;\n    mid.parent = this;\n    right.next = null;\n    right.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 408,
        "end_line": 426,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.newNode#1324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1, Node child2, Node child3) {\n    return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1324,
        "end_line": 1326,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.addExpr#838",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private void addExpr(Node n, int minPrecedence, Context context) {\n    if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN))){\n      add(\"(\");\n      add(n, clearContextForNoInOperator(context));\n      add(\")\");\n    } else {\n      add(n, context);\n    }\n  }\n",
        "begin_line": 838,
        "end_line": 848,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3638
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.clearContextForNoInOperator#1117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private  Context clearContextForNoInOperator(Context context) {\n    return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);\n  }\n",
        "begin_line": 1117,
        "end_line": 1120,
        "comment": "\n   * If we're in a IN_FOR_INIT_CLAUSE, (and thus can't permit in operators\n   * in the expression), but have added parentheses, the expressions within\n   * the parens have no limits.  Clear the context flag  Be safe and don't\n   * clear the flag if it held another value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3638
        },
        "num_failing_tests": 3
    },
    {
        "name": "DeadAssignmentsElimination.tryRemoveDeadAssignments#117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.tryRemoveDeadAssignments(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>)",
        "snippet": "  private void tryRemoveDeadAssignments(NodeTraversal t,\n      ControlFlowGraph<Node> cfg) {\n    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();\n\n    for (DiGraphNode<Node, Branch> cfgNode : nodes) {\n      FlowState<LiveVariableLattice> state =\n          cfgNode.getAnnotation();\n      Node n = cfgNode.getValue();\n      if (n == null) {\n        continue;\n      }\n      switch (n.getType()) {\n        case Token.IF:\n        case Token.WHILE:\n        case Token.DO:\n          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n          continue;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(n)) {\n            tryRemoveAssignment(\n                t, NodeUtil.getConditionExpression(n), state);\n          }\n          continue;\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.RETURN:\n          if (n.hasChildren()) {\n            tryRemoveAssignment(t, n.getFirstChild(), state);\n          }\n          continue;\n        // TODO(user): case Token.VAR: Remove var a=1;a=2;.....\n      }\n\n      tryRemoveAssignment(t, n, state);\n    }\n  }\n",
        "begin_line": 117,
        "end_line": 152,
        "comment": "\n   * Try to remove useless assignments from a control flow graph that has been\n   * annotated with liveness information.\n   *\n   * @param t The node traversal.\n   * @param cfg The control flow graph of the program annotated with liveness\n   *        information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.visit#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.IF:\n        handleIf(n);\n        return;\n      case Token.WHILE:\n        handleWhile(n);\n        return;\n      case Token.DO:\n        handleDo(n);\n        return;\n      case Token.FOR:\n        handleFor(n);\n        return;\n      case Token.SWITCH:\n        handleSwitch(n);\n        return;\n      case Token.CASE:\n        handleCase(n);\n        return;\n      case Token.DEFAULT:\n        handleDefault(n);\n        return;\n      case Token.BLOCK:\n      case Token.SCRIPT:\n        handleStmtList(n);\n        return;\n      case Token.FUNCTION:\n        handleFunction(n);\n        return;\n      case Token.EXPR_RESULT:\n        handleExpr(n);\n        return;\n      case Token.THROW:\n        handleThrow(n);\n        return;\n      case Token.TRY:\n        handleTry(n);\n        return;\n      case Token.CATCH:\n        handleCatch(n);\n        return;\n      case Token.BREAK:\n        handleBreak(n);\n        return;\n      case Token.CONTINUE:\n        handleContinue(n);\n        return;\n      case Token.RETURN:\n        handleReturn(n);\n        return;\n      case Token.WITH:\n        handleWith(n);\n        return;\n      case Token.LABEL:\n        return;\n      default:\n        handleStmt(n);\n        return;\n    }\n  }\n",
        "begin_line": 294,
        "end_line": 355,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3354
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.handleReturn#622",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleReturn(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleReturn(Node node) {\n    Node lastJump = null;\n    for (Iterator<Node> iter = exceptionHandler.iterator(); iter.hasNext();) {\n      Node curHandler = iter.next();\n      if (NodeUtil.isFunction(curHandler)) {\n        break;\n      }\n      if (NodeUtil.hasFinally(curHandler)) {\n        if (lastJump == null) {\n          createEdge(node, Branch.UNCOND, curHandler.getLastChild());\n        } else {\n          finallyMap.put(lastJump,\n              computeFallThrough(curHandler.getLastChild()));\n        }\n        lastJump = curHandler;\n      }\n    }\n\n    if (node.hasChildren()) {\n      connectToPossibleExceptionHandler(node, node.getFirstChild());\n    }\n\n    if (lastJump == null) {\n      createEdge(node, Branch.UNCOND, null);\n    } else {\n      finallyMap.put(lastJump, null);\n    }\n  }\n",
        "begin_line": 622,
        "end_line": 649,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3354
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.isEquivalentTo#1583",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "  boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n    if (type != node.getType()\n        || getChildCount() != node.getChildCount()\n        || getNodeClass(this) != getNodeClass(node)) {\n      return false;\n    }\n\n    if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n      return false;\n    }\n\n    if (type == Token.ARRAYLIT) {\n      try {\n        int[] indices1 = (int[]) getProp(Node.SKIP_INDEXES_PROP);\n        int[] indices2 = (int[]) node.getProp(Node.SKIP_INDEXES_PROP);\n        if (indices1 == null) {\n          if (indices2 != null) {\n            return false;\n          }\n        } else if (indices2 == null) {\n          return false;\n        } else if (indices1.length != indices2.length) {\n          return false;\n        } else {\n          for (int i = 0; i < indices1.length; i++) {\n            if (indices1[i] != indices2[i]) {\n              return false;\n            }\n          }\n        }\n      } catch (Exception e) {\n        return false;\n      }\n    } else if (type == Token.INC || type == Token.DEC) {\n      int post1 = this.getIntProp(INCRDECR_PROP);\n      int post2 = node.getIntProp(INCRDECR_PROP);\n      if (post1 != post2) {\n        return false;\n      }\n    } else if (type == Token.STRING) {\n      int quoted1 = this.getIntProp(QUOTED_PROP);\n      int quoted2 = node.getIntProp(QUOTED_PROP);\n      if (quoted1 != quoted2) {\n        return false;\n      }\n    }\n\n    if (recurse) {\n      Node n, n2;\n      for (n = first, n2 = node.first;\n           n != null;\n           n = n.next, n2 = n2.next) {\n        if (!n.isEquivalentTo(n2, compareJsType, true)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 1583,
        "end_line": 1642,
        "comment": "\n   * @param compareJsType Whether to compare the JSTypes of the nodes.\n   * @param recurse Whether to compare the children of the current node, if\n   *    not only the the count of the children are compared.\n   * @return Whether this node is equivalent semantically to the provided node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processReturnStatement#782",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processReturnStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement)",
        "snippet": "    @Override\n    Node processReturnStatement(ReturnStatement statementNode) {\n      Node node = newNode(Token.RETURN);\n      if (statementNode.getReturnValue() != null) {\n        node.addChildToBack(transform(statementNode.getReturnValue()));\n      }\n      return node;\n    }\n",
        "begin_line": 782,
        "end_line": 789,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3198
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.replaceChild#694",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.replaceChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void replaceChild(Node child, Node newChild) {\n    Preconditions.checkArgument(newChild.next == null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent == null,\n        \"The new child node already has a parent.\");\n\n    // Copy over important information.\n    newChild.copyInformationFrom(child);\n\n    newChild.next = child.next;\n    newChild.parent = this;\n    if (child == first) {\n        first = newChild;\n    } else {\n        Node prev = getChildBefore(child);\n        prev.next = newChild;\n    }\n    if (child == last)\n        last = newChild;\n    child.next = null;\n    child.parent = null;\n  }\n",
        "begin_line": 694,
        "end_line": 715,
        "comment": "\n   * Detaches child from Node and replaces it with newChild.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3128
        },
        "num_failing_tests": 3
    },
    {
        "name": "LiveVariablesAnalysis.isLive#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice.isLive(com.google.javascript.jscomp.Scope.Var)",
        "snippet": "    public boolean isLive(Var v) {\n      Preconditions.checkNotNull(v);\n      return liveSet.get(v.index);\n    }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3123
        },
        "num_failing_tests": 4
    },
    {
        "name": "GoogleCodingConvention.isOptionalParameter#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isOptionalParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isOptionalParameter(Node parameter) {\n    return parameter.getString().startsWith(OPTIONAL_ARG_PREFIX);\n  }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>In Google code, parameter names beginning with {@code opt_} are\n   * treated as optional arguments.\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.ClosureCodingConvention": "\n   * {@inheritDoc}\n   *\n   * <p>Understands several different inheritance patterns that occur in\n   * Google code (various uses of {@code inherits} and {@code mixin}).\n   ",
            "com.google.javascript.jscomp.DefaultCodingConvention": ""
        },
        "susp": {
            "ochiai_susp": 0.305
        },
        "num_failing_tests": 4
    },
    {
        "name": "GoogleCodingConvention.isVarArgsParameter#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isVarArgsParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isVarArgsParameter(Node parameter) {\n    return VAR_ARGS_NAME.equals(parameter.getString());\n  }\n",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.305
        },
        "num_failing_tests": 4
    },
    {
        "name": "GoogleCodingConvention.isExported#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isExported(java.lang.String, boolean)",
        "snippet": "  @Override\n  public boolean isExported(String name, boolean local) {\n    return super.isExported(name, local) ||\n        (!local && name.startsWith(\"_\"));\n  }\n",
        "begin_line": 129,
        "end_line": 133,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>In Google code, any global name starting with an underscore is\n   * considered exported.\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.ClosureCodingConvention": null,
            "com.google.javascript.jscomp.DefaultCodingConvention": ""
        },
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.isImplicitPrototype#447",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final boolean isImplicitPrototype(ObjectType prototype) {\n    for (ObjectType current = this;\n         current != null;\n         current = current.getImplicitPrototype()) {\n      if (current.isEquivalentTo(prototype)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 447,
        "end_line": 456,
        "comment": "\n   * Checks that the prototype is an implicit prototype of this object. Since\n   * each object has an implicit prototype, an implicit prototype's\n   * implicit prototype is also this implicit prototype's.\n   *\n   * @param prototype any prototype based object\n   *\n   * @return {@code true} if {@code prototype} is {@code equal} to any\n   *         object in this object's implicit prototype chain.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isNominalType#292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
        "snippet": "  public boolean isNominalType() {\n    return false;\n  }\n",
        "begin_line": 292,
        "end_line": 294,
        "comment": "\n   * Whether this type is a nominal type (a named instance object or\n   * a named enum).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.isEquivalentTo#149",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isEquivalentTo(JSType that) {\n    if (this == that) {\n      return true;\n    } else if (this.isNominalType()) {\n      ObjectType thatObj = ObjectType.cast(that);\n      if (thatObj != null && thatObj.isNominalType()) {\n        return getReferenceName().equals(thatObj.getReferenceName());\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 149,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "ParserRunner.parse#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.parse(java.lang.String, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter, java.util.logging.Logger)",
        "snippet": "  public static Node parse(String sourceName,\n                           String sourceString,\n                           Config config,\n                           ErrorReporter errorReporter,\n                           Logger logger) throws IOException {\n    Context cx = Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv = new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    // ES5 specifically allows trailing commas\n    compilerEnv.setWarnTrailingComma(\n        config.languageMode == LanguageMode.ECMASCRIPT3);\n\n    if (config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3) {\n      // Do our own identifier check for ECMASCRIPT 5\n      compilerEnv.setReservedKeywordAsIdentifier(true);\n      compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n    }\n\n    if (config.isIdeMode) {\n      compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n\n    Parser p = new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot = null;\n    try {\n      astRoot = p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n      logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n      Context.exit();\n    }\n    Node root = null;\n    if (astRoot != null) {\n      root = IRFactory.transformTree(\n          astRoot, sourceString, config, errorReporter);\n      root.setIsSyntheticBlock(true);\n    }\n    return root;\n  }\n",
        "begin_line": 90,
        "end_line": 132,
        "comment": "\n   * Parses the JavaScript text given by a reader.\n   *\n   * @param sourceName The filename.\n   * @param sourceString Source code from the file.\n   * @param errorReporter An error.\n   * @param logger A logger.\n   * @return The AST of the given text.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.IRFactory#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.IRFactory(java.lang.String, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter)",
        "snippet": "  private IRFactory(String sourceString,\n                    String sourceName,\n                    Config config,\n                    ErrorReporter errorReporter) {\n    this.sourceString = sourceString;\n    this.sourceName = sourceName;\n    this.config = config;\n    this.errorReporter = errorReporter;\n    this.transformDispatcher = new TransformDispatcher();\n    // The template node properties are applied to all nodes in this transform.\n    this.templateNode = createTemplateNode();\n\n    switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }\n  }\n",
        "begin_line": 116,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "LineNumberCheck.LineNumberCheck#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.LineNumberCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  LineNumberCheck(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "LineNumberCheck.process#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void process(Node externs, Node root) {\n    requiresLineNumbers = false;\n\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "LineNumberCheck.shouldTraverse#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    // Each JavaScript file is rooted in a script node, so we'll only\n    // have line number information inside the script node.\n    if (n.getType() == Token.SCRIPT) {\n      requiresLineNumbers = true;\n    }\n    return true;\n  }\n",
        "begin_line": 57,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "LineNumberCheck.visit#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.SCRIPT) {\n      requiresLineNumbers = false;\n    } else if (requiresLineNumbers) {\n      if (n.getLineno() == -1) {\n        // The tree version of the node is really the best diagnostic\n        // info we have to offer here.\n        compiler.report(\n            t.makeError(n, MISSING_LINE_INFO,\n                n.toStringTree()));\n      }\n    }\n  }\n",
        "begin_line": 66,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "DeadAssignmentsElimination.enterScope#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }\n",
        "begin_line": 69,
        "end_line": 99,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "DeadAssignmentsElimination.tryRemoveAssignment#154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.tryRemoveAssignment(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.DataFlowAnalysis.FlowState<com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice>)",
        "snippet": "  private void tryRemoveAssignment(NodeTraversal t, Node n,\n      FlowState<LiveVariableLattice> state) {\n    tryRemoveAssignment(t, n, n, state);\n  }\n",
        "begin_line": 154,
        "end_line": 157,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowGraph.isEnteringNewCfgNode#150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(com.google.javascript.rhino.Node)",
        "snippet": "  public static boolean isEnteringNewCfgNode(Node n) {\n    Node parent = n.getParent();\n    switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.TRY:\n      case Token.FINALLY:\n        return true;\n      case Token.FUNCTION:\n        // A function node represents the start of a function where the name\n        // is bleed into the local scope and parameters has been assigned\n        // to the formal argument names. The node includes the name of the\n        // function and the LP list since we assume the whole set up process\n        // is atomic without change in control flow. The next change of\n        // control is going into the function's body represent by the second\n        // child.\n        return n != parent.getFirstChild().getNext();\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // Theses control structure is represented by its node that holds the\n        // condition. Each of them is a branch node based on its condition.\n        return NodeUtil.getConditionExpression(parent) != n;\n\n      case Token.FOR:\n        // The FOR(;;) node differs from other control structure in that\n        // it has a initialization and a increment statement. Those\n        // two statements have its corresponding CFG nodes to represent them.\n        // The FOR node represents the condition check for each iteration.\n        // That way the following:\n        // for(var x = 0; x < 10; x++) { } has a graph that is isomorphic to\n        // var x = 0; while(x<10) {  x++; }\n        if (NodeUtil.isForIn(parent)) {\n          return n == parent.getLastChild();\n        } else {\n          return NodeUtil.getConditionExpression(parent) != n;\n        }\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.CATCH:\n      case Token.WITH:\n        return n != parent.getFirstChild();\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 150,
        "end_line": 195,
        "comment": "\n   * @return True if n should be represented by a new CFG node in the control\n   * flow graph.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.init#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options) {\n    init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);\n  }\n",
        "begin_line": 278,
        "end_line": 282,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getParserConfig#1661",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getParserConfig()",
        "snippet": "  @Override\n  Config getParserConfig() {\n    if (parserConfig == null) {\n      Config.LanguageMode mode;\n      switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }\n\n      parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword());\n    }\n    return parserConfig;\n  }\n",
        "begin_line": 1661,
        "end_line": 1685,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.addList#858",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext) {\n    for (Node n = firstInList; n != null; n = n.getNext()) {\n      boolean isFirst = n == firstInList;\n      if (isFirst) {\n        addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);\n      } else {\n        cc.listSeparator();\n        addExpr(n, isArrayOrFunctionArgument ? 1 : 0);\n      }\n    }\n  }\n",
        "begin_line": 858,
        "end_line": 869,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.listSeparator#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.listSeparator()",
        "snippet": "  void listSeparator() {\n    add(\",\");\n    maybeLineBreak();\n  }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.has#2628",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.rhino.Node, com.google.common.base.Predicate<com.google.javascript.rhino.Node>, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred) {\n    if (pred.apply(node)) {\n      return true;\n    }\n\n    if (!traverseChildrenPred.apply(node)) {\n      return false;\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      if (has(c, pred, traverseChildrenPred)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 2628,
        "end_line": 2646,
        "comment": "\n   * @return Whether the predicate is true for the node or any of its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2917
        },
        "num_failing_tests": 4
    },
    {
        "name": "LoggerErrorManager.LoggerErrorManager#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.LoggerErrorManager(com.google.javascript.jscomp.MessageFormatter, java.util.logging.Logger)",
        "snippet": "  public LoggerErrorManager(MessageFormatter formatter, Logger logger) {\n    this.formatter = formatter;\n    this.logger = logger;\n  }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n   * Creates an instance.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2917
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.Compiler#176",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler()",
        "snippet": "  public Compiler() {\n    this((PrintStream) null);\n  }\n",
        "begin_line": 176,
        "end_line": 178,
        "comment": "\n   * Creates a Compiler that reports errors and warnings to its logger.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2917
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.initOptions#221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    WarningsGuard warningsGuard = options.getWarningsGuard();\n    if (warningsGuard != null) {\n      guards.add(options.getWarningsGuard());\n    }\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        (warningsGuard == null || !warningsGuard.disables(\n            DiagnosticGroups.CHECK_VARIABLES))) {\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      guards.add(\n          new DiagnosticGroupWarningsGuard(\n              DiagnosticGroup.forType(\n                  RhinoErrorReporter.TYPE_PARSE_ERROR),\n              CheckLevel.OFF));\n    }\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }\n",
        "begin_line": 221,
        "end_line": 273,
        "comment": "\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2917
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isAssociative#1322",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isAssociative(int)",
        "snippet": "  static boolean isAssociative(int type) {\n    switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1322,
        "end_line": 1334,
        "comment": "\n   * Returns true if the operator is associative.\n   * e.g. (a * b) * c = a * (b * c)\n   * Note: \"+\" is not associative because it is also the concatenation\n   * for strings. e.g. \"a\" + (1 + 2) is not \"a\" + 1 + 2\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "DeadAssignmentsElimination.checkHookBranchReadBeforeKill#384",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.checkHookBranchReadBeforeKill(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private VariableLiveness checkHookBranchReadBeforeKill(\n      Node trueCase, Node falseCase, String variable) {\n    VariableLiveness v1 = isVariableReadBeforeKill(\n      trueCase, variable);\n    VariableLiveness v2 = isVariableReadBeforeKill(\n      falseCase, variable);\n    // With a hook it is unknown which branch will run, so\n    // we must be conservative.  A read by either is a READ, and\n    // a KILL is only considered if both KILL.\n    if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) {\n      return VariableLiveness.READ;\n    } else if (v1 == VariableLiveness.KILL && v2 == VariableLiveness.KILL) {\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.MAYBE_LIVE;\n    }\n  }\n",
        "begin_line": 384,
        "end_line": 400,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.cloneTree#1875",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneTree()",
        "snippet": "  public Node cloneTree() {\n    Node result = cloneNode();\n    for (Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {\n      Node n2clone = n2.cloneTree();\n      n2clone.parent = result;\n      if (result.last != null) {\n        result.last.next = n2clone;\n      }\n      if (result.first == null) {\n        result.first = n2clone;\n      }\n      result.last = n2clone;\n    }\n    return result;\n  }\n",
        "begin_line": 1875,
        "end_line": 1889,
        "comment": "\n   * @return A detached clone of the Node and all its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2857
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.addToSetIfLocal#265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.addToSetIfLocal(com.google.javascript.rhino.Node, java.util.BitSet)",
        "snippet": "  private void addToSetIfLocal(Node node, BitSet set) {\n    Preconditions.checkState(NodeUtil.isName(node));\n    String name = node.getString();\n    if (!jsScope.isDeclared(name, false)) {\n      return;\n    }\n    Var var = jsScope.getVar(name);\n    if (!escaped.contains(var)) {\n      set.set(var.index);\n    }\n  }\n",
        "begin_line": 265,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2828
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.addExpr#834",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int)",
        "snippet": "  void addExpr(Node n, int minPrecedence) {\n    addExpr(n, minPrecedence, Context.OTHER);\n  }\n",
        "begin_line": 834,
        "end_line": 836,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2828
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.isArgumentsName#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.isArgumentsName(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isArgumentsName(Node n) {\n    if (n.getType() != Token.NAME ||\n        !n.getString().equals(ARGUMENT_ARRAY_ALIAS) ||\n        jsScope.isDeclared(ARGUMENT_ARRAY_ALIAS, false)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n",
        "begin_line": 288,
        "end_line": 296,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2801
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.isEquivalentTo#1565",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node)",
        "snippet": "  public boolean isEquivalentTo(Node node) {\n    return isEquivalentTo(node, false, true);\n  }\n",
        "begin_line": 1565,
        "end_line": 1567,
        "comment": " Returns true if this node is equivalent semantically to another ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2747
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.computeEscaped#548",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.computeEscaped(com.google.javascript.jscomp.Scope, java.util.Set<com.google.javascript.jscomp.Scope.Var>, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static void computeEscaped(final Scope jsScope, final Set<Var> escaped,\n      AbstractCompiler compiler) {\n    // TODO(user): Very good place to store this information somewhere.\n    AbstractPostOrderCallback finder = new AbstractPostOrderCallback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (jsScope == t.getScope() || !NodeUtil.isName(n)\n            || NodeUtil.isFunction(parent)) {\n          return;\n        }\n        String name = n.getString();\n        Var var = t.getScope().getVar(name);\n        if (var != null && var.scope == jsScope) {\n          escaped.add(jsScope.getVar(name));\n        }\n      }\n    };\n\n    NodeTraversal t = new NodeTraversal(compiler, finder);\n    t.traverseAtScope(jsScope);\n\n    // 1: Remove the exception name in CATCH which technically isn't local to\n    //    begin with.\n    for (Iterator<Var> i = jsScope.getVars(); i.hasNext();) {\n      Var var = i.next();\n      if (var.getParentNode().getType() == Token.CATCH ||\n          compiler.getCodingConvention().isExported(var.getName())) {\n        escaped.add(var);\n      }\n    }\n  }\n",
        "begin_line": 548,
        "end_line": 578,
        "comment": "\n   * Compute set of escaped variables. When a variable is escaped in a\n   * dataflow analysis, it can be reference outside of the code that we are\n   * analyzing. A variable is escaped if any of the following is true:\n   *\n   * <p><ol>\n   * <li>It is defined as the exception name in CATCH clause so it became a\n   * variable local not to our definition of scope.</li>\n   * <li>Exported variables as they can be needed after the script terminates.\n   * </li>\n   * <li>Names of named functions because in javascript, <i>function foo(){}</i>\n   * does not kill <i>foo</i> in the dataflow.</li>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2747
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.connectToPossibleExceptionHandler#813",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.connectToPossibleExceptionHandler(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void connectToPossibleExceptionHandler(Node cfgNode, Node target) {\n    if (mayThrowException(target) && !exceptionHandler.isEmpty()) {\n      Node lastJump = cfgNode;\n      for (Node handler : exceptionHandler) {\n        if (NodeUtil.isFunction(handler)) {\n          return;\n        }\n        Preconditions.checkState(handler.getType() == Token.TRY);\n        Node catchBlock = NodeUtil.getCatchBlock(handler);\n\n        if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n          if (lastJump == cfgNode) {\n            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n          } else {\n            finallyMap.put(lastJump, handler.getLastChild());\n          }\n        } else { // Has a catch.\n          if (lastJump == cfgNode) {\n            createEdge(cfgNode, Branch.ON_EX, catchBlock);\n            return;\n          } else {\n            finallyMap.put(lastJump, catchBlock);\n          }\n        }\n        lastJump = handler;\n      }\n    }\n  }\n",
        "begin_line": 813,
        "end_line": 840,
        "comment": "\n   * Connects cfgNode to the proper CATCH block if target subtree might throw\n   * an exception. If there are FINALLY blocks reached before a CATCH, it will\n   * make the corresponding entry in finallyMap.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2747
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.cloneNode#1856",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneNode()",
        "snippet": "  public Node cloneNode() {\n    Node result;\n    try {\n      result = (Node) super.clone();\n      // PropListItem lists are immutable and can be shared so there is no\n      // need to clone them here.\n      result.next = null;\n      result.first = null;\n      result.last = null;\n      result.parent = null;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e.getMessage());\n    }\n    return result;\n  }\n",
        "begin_line": 1856,
        "end_line": 1870,
        "comment": "\n   * @return A detached clone of the Node, specifically excluding its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2722
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isAssignmentOp#1355",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isAssignmentOp(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isAssignmentOp(Node n) {\n    switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 1355,
        "end_line": 1372,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2697
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isAssign#1507",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isAssign(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isAssign(Node n) {\n    return n.getType() == Token.ASSIGN;\n  }\n",
        "begin_line": 1507,
        "end_line": 1509,
        "comment": "\n   * Is this an ASSIGN node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2649
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.analyze#201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.analyze(int)",
        "snippet": "  final void analyze(int maxSteps) {\n    initialize();\n    int step = 0;\n    while (!orderedWorkSet.isEmpty()) {\n      if (step > maxSteps) {\n        throw new MaxIterationsExceededException(\n          \"Analysis did not terminate after \" + maxSteps + \" iterations\");\n      }\n      DiGraphNode<N, Branch> curNode = orderedWorkSet.iterator().next();\n      orderedWorkSet.remove(curNode);\n      joinInputs(curNode);\n      if (flow(curNode)) {\n        // If there is a change in the current node, we want to grab the list\n        // of nodes that this node affects.\n        List<DiGraphNode<N, Branch>> nextNodes = isForward() ?\n            cfg.getDirectedSuccNodes(curNode) :\n            cfg.getDirectedPredNodes(curNode);\n        for (DiGraphNode<N, Branch> nextNode : nextNodes) {\n          if (nextNode != cfg.getImplicitReturn()) {\n            orderedWorkSet.add(nextNode);\n          }\n        }\n      }\n      step++;\n    }\n    if (isForward()) {\n      joinInputs(getCfg().getImplicitReturn());\n    }\n  }\n",
        "begin_line": 201,
        "end_line": 229,
        "comment": "\n   * Finds a fixed-point solution. The function has the side effect of replacing\n   * the existing node annotations with the computed solutions using {@link\n   * com.google.javascript.jscomp.graph.GraphNode#setAnnotation(Annotation)}.\n   *\n   * <p>Initially, each node's input and output flow state contains the value\n   * given by {@link #createInitialEstimateLattice()} (with the exception of the\n   * entry node of the graph which takes on the {@link #createEntryLattice()}\n   * value. Each node will use the output state of its predecessor and compute a\n   * output state according to the instruction. At that time, any nodes that\n   * depends on the node's newly modified output value will need to recompute\n   * their output state again. Each step will perform a computation at one node\n   * until no extra computation will modify any existing output state anymore.\n   *\n   * @param maxSteps Max number of iterations before the method stops and throw\n   *        a {@link MaxIterationsExceededException}. This will prevent the\n   *        analysis from going into a infinite loop.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2649
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createNullableType#920",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));\n  }\n",
        "begin_line": 920,
        "end_line": 922,
        "comment": "\n   * Creates a type representing nullable values of the given type.\n   * @return the union of the type and the Null type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2626
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.isInterface#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
        "snippet": "  @Override\n  public boolean isInterface() {\n    return kind == Kind.INTERFACE;\n  }\n",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2626
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionPrototypeType.hasReferenceName#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return ownerFunction != null && ownerFunction.hasReferenceName();\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2626
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.maybeEndStatement#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.maybeEndStatement()",
        "snippet": "  void maybeEndStatement() {\n    // Add a ';' if we need to.\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n      endLine();\n      statementNeedsEnded = false;\n    }\n    statementStarted = true;\n  }\n",
        "begin_line": 152,
        "end_line": 161,
        "comment": "\n   * This is to be called when we're in a statement. If the prev statement\n   * needs to be ended, add a ';'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2626
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.Property#506",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.Property.Property(com.google.javascript.rhino.jstype.JSType, boolean, boolean, com.google.javascript.rhino.Node)",
        "snippet": "    private Property(JSType type, boolean inferred, boolean inExterns, Node propertyNode) {\n      this.type = type;\n      this.inferred = inferred;\n      this.inExterns = inExterns;\n      this.propertyNode = propertyNode;\n    }\n",
        "begin_line": 506,
        "end_line": 511,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2604
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.hasOwnProperty#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasOwnProperty(java.lang.String)",
        "snippet": "  @Override\n  public boolean hasOwnProperty(String propertyName) {\n    return properties.get(propertyName) != null;\n  }\n",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2604
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.defineProperty#227",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      boolean inExterns, Node propertyNode) {\n    if (hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    properties.put(name, new Property(type, inferred, inExterns, propertyNode));\n    return true;\n  }\n",
        "begin_line": 227,
        "end_line": 235,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2604
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.hasOwnDeclaredProperty#403",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnDeclaredProperty(java.lang.String)",
        "snippet": "  boolean hasOwnDeclaredProperty(String name) {\n    return hasOwnProperty(name) && isPropertyTypeDeclared(name);\n  }\n",
        "begin_line": 403,
        "end_line": 405,
        "comment": "\n   * Whether the given property is declared on this object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2604
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.defineProperty#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      boolean inExterns, Node propertyNode) {\n    ObjectType proto = getImplicitPrototype();\n    if (proto != null && proto.hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    return super.defineProperty(name, type, inferred, inExterns, propertyNode);\n  }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2604
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionPrototypeType.getReferenceName#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (ownerFunction == null) {\n      return \"{...}.prototype\";\n    } else {\n      return ownerFunction.getReferenceName() + \".prototype\";\n    }\n  }\n",
        "begin_line": 65,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2604
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processGeneric#321",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processGeneric(com.google.javascript.jscomp.mozilla.rhino.Node)",
        "snippet": "    private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n) {\n      Node node = newNode(transformTokenType(n.getType()));\n      for (com.google.javascript.jscomp.mozilla.rhino.Node child : n) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      return node;\n    }\n",
        "begin_line": 321,
        "end_line": 328,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2604
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.detachFromParent#1791",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.detachFromParent()",
        "snippet": "  public Node detachFromParent() {\n    Preconditions.checkState(parent != null);\n    parent.removeChild(this);\n    return this;\n  }\n",
        "begin_line": 1791,
        "end_line": 1795,
        "comment": "\n   * Removes this node from its parent. Equivalent to:\n   * node.getParent().removeChild();\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroupWarningsGuard.enables#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup otherGroup) {\n    if (level.isOn()) {\n      for (DiagnosticType type : otherGroup.getTypes()) {\n        if (group.matches(type)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 46,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 4
    },
    {
        "name": "ComposeWarningsGuard.enables#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup group) {\n    for (WarningsGuard guard : guards) {\n      if (guard.enables(group)) {\n        return true;\n      } else if (guard.disables(group)) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 125,
        "end_line": 136,
        "comment": "\n   * Determines whether this guard will \"elevate\" the status of any disabled\n   * diagnostic type in the group to a warning or an error.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.endFunction#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFunction(boolean)",
        "snippet": "  void endFunction(boolean statementContext) {\n    sawFunction = true;\n    if (statementContext) {\n      endLine();\n    }\n  }\n",
        "begin_line": 167,
        "end_line": 172,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.removeChild#680",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeChild(com.google.javascript.rhino.Node)",
        "snippet": "  public void removeChild(Node child) {\n    Node prev = getChildBefore(child);\n    if (prev == null)\n        first = first.next;\n    else\n        prev.next = child.next;\n    if (child == last) last = prev;\n    child.next = null;\n    child.parent = null;\n  }\n",
        "begin_line": 680,
        "end_line": 689,
        "comment": "\n   * Detach a child from its parent and siblings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2561
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultCodingConvention.isExported#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.DefaultCodingConvention",
        "signature": "com.google.javascript.jscomp.DefaultCodingConvention.isExported(java.lang.String)",
        "snippet": "  @Override\n  public boolean isExported(String name) {\n    return isExported(name, false) || isExported(name, true);\n  }\n",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2561
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.getOut#357",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.FlowState.getOut()",
        "snippet": "    L getOut() {\n      return out;\n    }\n",
        "begin_line": 357,
        "end_line": 359,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2561
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.handleExpr#532",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleExpr(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleExpr(Node node) {\n    createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    connectToPossibleExceptionHandler(node, node);\n  }\n",
        "begin_line": 532,
        "end_line": 535,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2561
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.isDeclared#448",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isDeclared(java.lang.String, boolean)",
        "snippet": "  public boolean isDeclared(String name, boolean recurse) {\n    Scope scope = this;\n    if (scope.vars.containsKey(name))\n      return true;\n\n    if (scope.parent != null && recurse) {\n      return scope.parent.isDeclared(name, recurse);\n    }\n    return false;\n  }\n",
        "begin_line": 448,
        "end_line": 457,
        "comment": "\n   * Returns true if a variable is declared.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.252
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.getEscapedLocals#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.getEscapedLocals()",
        "snippet": "  public Set<Var> getEscapedLocals() {\n    return escaped;\n  }\n",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.252
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getSource#460",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getSource()",
        "snippet": "    @Override\n    public DiGraphNode<N, E> getSource() {\n      return sourceNode;\n    }\n",
        "begin_line": 460,
        "end_line": 463,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getDirectedPredNodes#209",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedPredNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "  @Override\n  public List<DiGraphNode<N, E>> getDirectedPredNodes(\n      DiGraphNode<N, E> dNode) {\n    if (dNode == null) {\n      throw new IllegalArgumentException(dNode + \" is null\");\n    }\n    List<DiGraphNode<N, E>> nodeList = Lists.newArrayList();\n    for (DiGraphEdge<N, E> edge : dNode.getInEdges()) {\n      nodeList.add(edge.getSource());\n    }\n    return nodeList;\n  }\n",
        "begin_line": 209,
        "end_line": 220,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.createEntryLattice#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.createEntryLattice()",
        "snippet": "  @Override\n  LiveVariableLattice createEntryLattice() {\n    return new LiveVariableLattice(jsScope.getVarCount());\n  }\n",
        "begin_line": 136,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.joinInputs#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "  protected void joinInputs(DiGraphNode<N, Branch> node) {\n    FlowState<L> state = node.getAnnotation();\n    if (isForward()) {\n      if (cfg.getEntry() == node) {\n        state.setIn(createEntryLattice());\n      } else {\n        List<DiGraphNode<N, Branch>> inNodes = cfg.getDirectedPredNodes(node);\n        if (inNodes.size() == 1) {\n          FlowState<L> inNodeState = inNodes.get(0).getAnnotation();\n          state.setIn(inNodeState.getOut());\n        } else if (inNodes.size() > 1) {\n          List<L> values = new ArrayList<L>(inNodes.size());\n          for (DiGraphNode<N, Branch> currentNode : inNodes) {\n            FlowState<L> currentNodeState = currentNode.getAnnotation();\n            values.add(currentNodeState.getOut());\n          }\n          state.setIn(joinOp.apply(values));\n        }\n      }\n    } else {\n      List<DiGraphNode<N, Branch>> inNodes = cfg.getDirectedSuccNodes(node);\n      if (inNodes.size() == 1) {\n        DiGraphNode<N, Branch> inNode = inNodes.get(0);\n        if (inNode == cfg.getImplicitReturn()) {\n          state.setOut(createEntryLattice());\n        } else {\n          FlowState<L> inNodeState = inNode.getAnnotation();\n          state.setOut(inNodeState.getIn());\n        }\n      } else if (inNodes.size() > 1) {\n        List<L> values = new ArrayList<L>(inNodes.size());\n        for (DiGraphNode<N, Branch> currentNode : inNodes) {\n          FlowState<L> currentNodeState = currentNode.getAnnotation();\n          values.add(currentNodeState.getIn());\n        }\n        state.setOut(joinOp.apply(values));\n      }\n    }\n  }\n",
        "begin_line": 286,
        "end_line": 324,
        "comment": "\n   * Computes the new flow state at a given node's entry by merging the\n   * output (input) lattice of the node's predecessor (successor).\n   *\n   * @param node Node to compute new join.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.add#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.add(java.lang.String)",
        "snippet": "  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    }\n\n    append(newcode);\n  }\n",
        "begin_line": 181,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.getVarCount#469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVarCount()",
        "snippet": "  public int getVarCount() {\n    return vars.size();\n  }\n",
        "begin_line": 469,
        "end_line": 471,
        "comment": "\n   * Returns number of variables in this scope\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.traverseAtScope#320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseAtScope(com.google.javascript.jscomp.Scope)",
        "snippet": "  void traverseAtScope(Scope s) {\n    Node n = s.getRootNode();\n    if (n.getType() == Token.FUNCTION) {\n      // We need to do some extra magic to make sure that the scope doesn't\n      // get re-created when we dive into the function.\n      sourceName = getSourceName(n);\n      curNode = n;\n      pushScope(s);\n\n      Node args = n.getFirstChild().getNext();\n      Node body = args.getNext();\n      traverseBranch(args, n);\n      traverseBranch(body, n);\n\n      popScope();\n    } else {\n      traverseWithScope(n, s);\n    }\n  }\n",
        "begin_line": 320,
        "end_line": 338,
        "comment": "\n   * Traverses a parse tree recursively with a scope, starting at that scope's\n   * root.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.LiveVariableLattice#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice.LiveVariableLattice(int)",
        "snippet": "    private LiveVariableLattice(int numVars) {\n      this.liveSet = new BitSet(numVars);\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * @param numVars Number of all local variables.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.LiveVariableLattice#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice.LiveVariableLattice(com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice)",
        "snippet": "    private LiveVariableLattice(LiveVariableLattice other) {\n      Preconditions.checkNotNull(other);\n      this.liveSet = (BitSet) other.liveSet.clone();\n    }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.equals#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object other) {\n      Preconditions.checkNotNull(other);\n      return (other instanceof LiveVariableLattice) &&\n          this.liveSet.equals(((LiveVariableLattice) other).liveSet);\n    }\n",
        "begin_line": 84,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.LiveVariablesAnalysis#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariablesAnalysis(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope,\n      AbstractCompiler compiler) {\n    super(cfg, new LiveVariableJoinOp());\n    this.jsScope = jsScope;\n    this.escaped = Sets.newHashSet();\n    computeEscaped(jsScope, escaped, compiler);\n  }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.isForward#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.isForward()",
        "snippet": "  @Override\n  boolean isForward() {\n    return false;\n  }\n",
        "begin_line": 131,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.createInitialEstimateLattice#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.createInitialEstimateLattice()",
        "snippet": "  @Override\n  LiveVariableLattice createInitialEstimateLattice() {\n    return new LiveVariableLattice(jsScope.getVarCount());\n  }\n",
        "begin_line": 141,
        "end_line": 144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "LiveVariablesAnalysis.flowThrough#146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.flowThrough(com.google.javascript.rhino.Node, com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice)",
        "snippet": "  @Override\n  LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) {\n    final BitSet gen = new BitSet(input.liveSet.size());\n    final BitSet kill = new BitSet(input.liveSet.size());\n\n    // Make kills conditional if the node can end abruptly by an exception.\n    boolean conditional = false;\n    List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node);\n    for (DiGraphEdge<Node, Branch> edge : edgeList) {\n      if (Branch.ON_EX.equals(edge.getValue())) {\n        conditional = true;\n      }\n    }\n    computeGenKill(node, gen, kill, conditional);\n    LiveVariableLattice result = new LiveVariableLattice(input);\n    // L_in = L_out - Kill + Gen\n    result.liveSet.andNot(kill);\n    result.liveSet.or(gen);\n    return result;\n  }\n",
        "begin_line": 146,
        "end_line": 165,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.FlowState#341",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.FlowState.FlowState(L, L)",
        "snippet": "    private FlowState(L inState, L outState) {\n      Preconditions.checkNotNull(inState);\n      Preconditions.checkNotNull(outState);\n      this.in = inState;\n      this.out = outState;\n    }\n",
        "begin_line": 341,
        "end_line": 346,
        "comment": "\n     * Private constructor. No other classes should create new states.\n     *\n     * @param inState Input.\n     * @param outState Output.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.getIn#348",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.FlowState.getIn()",
        "snippet": "    L getIn() {\n      return in;\n    }\n",
        "begin_line": 348,
        "end_line": 350,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.setOut#361",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.FlowState.setOut(L)",
        "snippet": "    void setOut(L out) {\n      Preconditions.checkNotNull(out);\n      this.out = out;\n    }\n",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.visit#552",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.Anonymous-7b93857f-ed82-4b86-bb92-9677796a0e20.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (jsScope == t.getScope() || !NodeUtil.isName(n)\n            || NodeUtil.isFunction(parent)) {\n          return;\n        }\n        String name = n.getString();\n        Var var = t.getScope().getVar(name);\n        if (var != null && var.scope == jsScope) {\n          escaped.add(jsScope.getVar(name));\n        }\n      }\n",
        "begin_line": 552,
        "end_line": 563,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.initialize#248",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.initialize()",
        "snippet": "  protected void initialize() {\n    // TODO(user): Calling clear doesn't deallocate the memory in a\n    // LinkedHashSet. Consider creating a new work set if we plan to repeatly\n    // call analyze.\n    orderedWorkSet.clear();\n    for (DiGraphNode<N, Branch> node : cfg.getDirectedGraphNodes()) {\n      node.setAnnotation(new FlowState<L>(createInitialEstimateLattice(),\n          createInitialEstimateLattice()));\n      if (node != cfg.getImplicitReturn()) {\n        orderedWorkSet.add(node);\n      }\n    }\n  }\n",
        "begin_line": 248,
        "end_line": 260,
        "comment": "\n   * Initializes the work list and the control flow graph.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.flow#267",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "  protected boolean flow(DiGraphNode<N, Branch> node) {\n    FlowState<L> state = node.getAnnotation();\n    if (isForward()) {\n      L outBefore = state.out;\n      state.out = flowThrough(node.getValue(), state.in);\n      return !outBefore.equals(state.out);\n    } else {\n      L inBefore = state.in;\n      state.in = flowThrough(node.getValue(), state.out);\n      return !inBefore.equals(state.in);\n    }\n  }\n",
        "begin_line": 267,
        "end_line": 278,
        "comment": "\n   * Performs a single flow through a node.\n   *\n   * @return {@code true} if the flow state differs from the previous state.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.getOptionalNodeComparator#1004",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.getOptionalNodeComparator(boolean)",
        "snippet": "    @Override\n    /**\n     * Returns a node comparator based on the pre-order traversal of the AST.\n     * @param isForward x 'before' y in the pre-order traversal implies\n     * x 'less than' y (if true) and x 'greater than' y (if false).\n     */\n    public Comparator<DiGraphNode<Node, Branch>> getOptionalNodeComparator(\n        boolean isForward) {\n      if (isForward) {\n        return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n1) - getPosition(n2);\n          }\n        };\n      } else {\n        return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n2) - getPosition(n1);\n          }\n        };\n      }\n    }\n",
        "begin_line": 1004,
        "end_line": 1029,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.compare#1022",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.Anonymous-bfae5e54-aa0f-48ea-b176-ae33e87406e7.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n2) - getPosition(n1);\n          }\n",
        "begin_line": 1022,
        "end_line": 1026,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.shouldTraverse#217",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(\n      NodeTraversal nodeTraversal, Node n, Node parent) {\n    astPosition.put(n, astPositionCounter++);\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) {\n          exceptionHandler.push(n);\n          return true;\n        }\n        return false;\n      case Token.TRY:\n        exceptionHandler.push(n);\n        return true;\n    }\n\n    /*\n     * We are going to stop the traversal depending on what the node's parent\n     * is.\n     *\n     * We are only interested in adding edges between nodes that change control\n     * flow. The most obvious ones are loops and IF-ELSE's. A statement\n     * transfers control to its next sibling.\n     *\n     * In case of an expression tree, there is no control flow within the tree\n     * even when there are short circuited operators and conditionals. When we\n     * are doing data flow analysis, we will simply synthesize lattices up the\n     * expression tree by finding the meet at each expression node.\n     *\n     * For example: within a Token.SWITCH, the expression in question does not\n     * change the control flow and need not to be considered.\n     */\n    if (parent != null) {\n      switch (parent.getType()) {\n        case Token.FOR:\n          // Only traverse the body of the for loop.\n          return n == parent.getLastChild();\n\n        // Skip the conditions.\n        case Token.IF:\n        case Token.WHILE:\n        case Token.WITH:\n          return n != parent.getFirstChild();\n        case Token.DO:\n          return n != parent.getFirstChild().getNext();\n        // Only traverse the body of the cases\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.CATCH:\n        case Token.LABEL:\n          return n != parent.getFirstChild();\n        case Token.FUNCTION:\n          return n == parent.getFirstChild().getNext().getNext();\n        case Token.CONTINUE:\n        case Token.BREAK:\n        case Token.EXPR_RESULT:\n        case Token.VAR:\n        case Token.RETURN:\n        case Token.THROW:\n          return false;\n        case Token.TRY:\n          /* Just before we are about to visit the second child of the TRY node,\n           * we know that we will be visiting either the CATCH or the FINALLY.\n           * In other words, we know that the post order traversal of the TRY\n           * block has been finished, no more exceptions can be caught by the\n           * handler at this TRY block and should be taken out of the stack.\n           */\n          if (n == parent.getFirstChild().getNext()) {\n            Preconditions.checkState(exceptionHandler.peek() == parent);\n            exceptionHandler.pop();\n          }\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 217,
        "end_line": 292,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.handleFunction#523",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleFunction(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleFunction(Node node) {\n    // A block transfer control to its first child if it is not empty.\n    Preconditions.checkState(node.getChildCount() >= 3);\n    createEdge(node, Branch.UNCOND,\n        computeFallThrough(node.getFirstChild().getNext().getNext()));\n    Preconditions.checkState(exceptionHandler.peek() == node);\n    exceptionHandler.pop();\n  }\n",
        "begin_line": 523,
        "end_line": 530,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2481
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.getName#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getName()",
        "snippet": "    public String getName() {\n      return name;\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n     * Gets the name of the variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.MatchNodeType#2552",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNodeType.MatchNodeType(int)",
        "snippet": "    MatchNodeType(int type){\n      this.type = type;\n    }\n",
        "begin_line": 2552,
        "end_line": 2554,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.apply#2556",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNodeType.apply(com.google.javascript.rhino.Node)",
        "snippet": "    public boolean apply(Node n) {\n      return n.getType() == type;\n    }\n",
        "begin_line": 2556,
        "end_line": 2558,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.containsFunction#1410",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.containsFunction(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean containsFunction(Node n) {\n    return containsType(n, Token.FUNCTION);\n  }\n",
        "begin_line": 1410,
        "end_line": 1412,
        "comment": "\n   * Determines if the given node contains a function statement or function\n   * expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.containsType#2166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.containsType(com.google.javascript.rhino.Node, int, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred) {\n    return has(node, new MatchNodeType(type), traverseChildrenPred);\n  }\n",
        "begin_line": 2166,
        "end_line": 2170,
        "comment": "\n   * @return true if n or any of its children are of the specified type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.containsType#2175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.containsType(com.google.javascript.rhino.Node, int)",
        "snippet": "  static boolean containsType(Node node, int type) {\n    return containsType(node, type, Predicates.<Node>alwaysTrue());\n  }\n",
        "begin_line": 2175,
        "end_line": 2177,
        "comment": "\n   * @return true if n or any of its children are of the specified type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.getScopeRoot#583",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeRoot()",
        "snippet": "  public Node getScopeRoot() {\n    if (scopeRoots.isEmpty()) {\n      return scopes.peek().getRootNode();\n    } else {\n      return scopeRoots.peek();\n    }\n  }\n",
        "begin_line": 583,
        "end_line": 589,
        "comment": " Returns the current scope's root. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 4
    },
    {
        "name": "DeadAssignmentsElimination.apply#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.Anonymous-19ef8f82-6714-45f3-8d86-0cdb54b421d6.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node n) {\n      return (NodeUtil.isAssignmentOp(n) &&\n              n.getFirstChild().getType() == Token.NAME) ||\n          n.getType() == Token.INC || n.getType() == Token.DEC;\n    }\n",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getChildBefore#559",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildBefore(com.google.javascript.rhino.Node)",
        "snippet": "  public Node getChildBefore(Node child) {\n    if (child == first) {\n      return null;\n    }\n    Node n = first;\n    while (n.next != child) {\n      n = n.next;\n      if (n == null) {\n        throw new RuntimeException(\"node is not a child\");\n      }\n    }\n    return n;\n  }\n",
        "begin_line": 559,
        "end_line": 571,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2443
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.mayThrowException#893",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(com.google.javascript.rhino.Node)",
        "snippet": "  public static boolean mayThrowException(Node n) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.THROW:\n      case Token.NEW:\n      case Token.ASSIGN:\n      case Token.INC:\n      case Token.DEC:\n      case Token.INSTANCEOF:\n        return true;\n      case Token.FUNCTION:\n        return false;\n    }\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 893,
        "end_line": 914,
        "comment": "\n   * Determines if the subtree might throw an exception.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.appendBlockStart#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockStart()",
        "snippet": "  void appendBlockStart() {\n    append(\"{\");\n  }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.appendBlockEnd#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockEnd()",
        "snippet": "  void appendBlockEnd() {\n    append(\"}\");\n  }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.beginBlock#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.beginBlock()",
        "snippet": "  void beginBlock() {\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n    }\n    appendBlockStart();\n\n    endLine();\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 100,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.endBlock#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endBlock(boolean)",
        "snippet": "  void endBlock(boolean shouldEndLine) {\n    appendBlockEnd();\n    if (shouldEndLine) {\n      endLine();\n    }\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.addOp#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addOp(java.lang.String, boolean)",
        "snippet": "  void addOp(String op, boolean binOp) {\n    maybeEndStatement();\n\n    char first = op.charAt(0);\n    char prev = getLastChar();\n\n    if ((first == '+' || first == '-') && prev == first) {\n      // This is not pretty printing. This is to prevent misparsing of\n      // things like \"x + ++y\" or \"x++ + ++y\"\n      append(\" \");\n    } else if (Character.isLetter(first) &&\n               isWordChar(prev)) {\n      // Make sure there is a space after e.g. instanceof , typeof\n      append(\" \");\n    } else if (prev == '-' && first == '>') {\n      // Make sure that we don't emit -->\n      append(\" \");\n    }\n\n    // Allow formating around the operator.\n    appendOp(op, binOp);\n\n    // Line breaking after an operator is always safe. Line breaking before an\n    // operator on the other hand is not. We only line break after a bin op\n    // because it looks strange.\n    if (binOp) {\n      maybeCutLine();\n    }\n  }\n",
        "begin_line": 203,
        "end_line": 231,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.breakAfterBlockFor#282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.breakAfterBlockFor(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  boolean breakAfterBlockFor(Node n, boolean statementContext) {\n    return statementContext;\n  }\n",
        "begin_line": 282,
        "end_line": 284,
        "comment": "\n   * @return Whether the a line break can be added after the specified BLOCK.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.pushScope#532",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.jscomp.Scope)",
        "snippet": "  private void pushScope(Scope s) {\n    Preconditions.checkState(curNode != null);\n    scopes.push(s);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 532,
        "end_line": 539,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.239
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.DataFlowAnalysis#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.DataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N>, com.google.javascript.jscomp.JoinOp<L>)",
        "snippet": "  DataFlowAnalysis(ControlFlowGraph<N> targetCfg, JoinOp<L> joinOp) {\n    this.cfg = targetCfg;\n    this.joinOp = joinOp;\n    Comparator<DiGraphNode<N, Branch>> nodeComparator =\n      cfg.getOptionalNodeComparator(isForward());\n    if (nodeComparator != null) {\n      this.orderedWorkSet = Sets.newTreeSet(nodeComparator);\n    } else {\n      this.orderedWorkSet = Sets.newLinkedHashSet();\n    }\n  }\n",
        "begin_line": 120,
        "end_line": 130,
        "comment": "\n   * Constructs a data flow analysis.\n   *\n   * <p>Typical usage\n   * <pre>\n   * DataFlowAnalysis dfa = ...\n   * dfa.analyze();\n   * </pre>\n   *\n   * {@link #analyze()} annotates the result to the control flow graph by\n   * means of {@link DiGraphNode#setAnnotation} without any\n   * modification of the graph itself. Additional calls to {@link #analyze()}\n   * recomputes the analysis which can be useful if the control flow graph\n   * has been modified.\n   *\n   * @param targetCfg The control flow graph object that this object performs\n   *     on. Modification of the graph requires a separate call to\n   *     {@link #analyze()}.\n   *\n   * @see #analyze()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.239
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.getCfg#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.getCfg()",
        "snippet": "  final ControlFlowGraph<N> getCfg() {\n    return cfg;\n  }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\n   * Returns the control flow graph that this analysis was performed on.\n   * Modifications can be done on this graph, however, the only time that the\n   * annotations are correct is after {@link #analyze()} is called and before\n   * the graph has been modified.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.239
        },
        "num_failing_tests": 4
    },
    {
        "name": "DataFlowAnalysis.analyze#179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.analyze()",
        "snippet": "  final void analyze() {\n    analyze(MAX_STEPS);\n  }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "\n   * Finds a fixed-point solution using at most {@link #MAX_STEPS}\n   * iterations.\n   *\n   * @see #analyze(int)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.239
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.getPosition#1035",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    private int getPosition(DiGraphNode<Node, Branch> n) {\n      Integer priority = priorities.get(n);\n      Preconditions.checkNotNull(priority);\n      return priority;\n    }\n",
        "begin_line": 1035,
        "end_line": 1039,
        "comment": "\n     * Gets the pre-order traversal position of the given node.\n     * @return An arbitrary counter used for comparing positions.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.239
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.addList#850",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node)",
        "snippet": "  void addList(Node firstInList) {\n    addList(firstInList, true, Context.OTHER);\n  }\n",
        "begin_line": 850,
        "end_line": 852,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.239
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.appendOp#199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendOp(java.lang.String, boolean)",
        "snippet": "  void appendOp(String op, boolean binOp) {\n    append(op);\n  }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.239
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getOutEdges#126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getOutEdges(N)",
        "snippet": "  @Override\n  public List<DiGraphEdge<N, E>> getOutEdges(N nodeValue) {\n    LinkedDirectedGraphNode<N, E> node = getNodeOrFail(nodeValue);\n    return Collections.<DiGraphEdge<N, E>>unmodifiableList(node.getOutEdges());\n  }\n",
        "begin_line": 126,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2374
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrepareAst.annotateCalls#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateCalls(com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.getType() == Token.CALL);\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.getType() == Token.NAME &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }\n",
        "begin_line": 175,
        "end_line": 191,
        "comment": "\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2372
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.computeFollowNode#675",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowAnalysis)",
        "snippet": "  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.getType() == Token.FUNCTION ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().getType() == Token.CASE) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().getType() == Token.DEFAULT) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.getType() == Token.FUNCTION) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transfered up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }\n",
        "begin_line": 675,
        "end_line": 772,
        "comment": "\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2341
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.getContextForNoInOperator#1106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private  Context getContextForNoInOperator(Context context) {\n    return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);\n  }\n",
        "begin_line": 1106,
        "end_line": 1109,
        "comment": "\n   * If we're in a IN_FOR_INIT_CLAUSE, we can't permit in operators in the\n   * expression.  Pass on the IN_FOR_INIT_CLAUSE flag through subexpressions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2325
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.handleStmt#651",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleStmt(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleStmt(Node node) {\n    // Simply transfer to the next line.\n    createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    connectToPossibleExceptionHandler(node, node);\n  }\n",
        "begin_line": 651,
        "end_line": 655,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2294
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.endLine#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endLine()",
        "snippet": "  void endLine() {\n  }\n",
        "begin_line": 94,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2265
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.handleIf#357",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleIf(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleIf(Node node) {\n    Node thenBlock = node.getFirstChild().getNext();\n    Node elseBlock = thenBlock.getNext();\n    createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock));\n\n    if (elseBlock == null) {\n      createEdge(node, Branch.ON_FALSE,\n          computeFollowNode(node, this)); // not taken branch\n    } else {\n      createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock));\n    }\n    connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));\n  }\n",
        "begin_line": 357,
        "end_line": 370,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addNonEmptyStatement#737",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addNonEmptyStatement(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context, boolean)",
        "snippet": "  private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild) {\n    Node nodeToProcess = n;\n\n    if (!allowNonBlockChild && n.getType() != Token.BLOCK) {\n      throw new Error(\"Missing BLOCK child.\");\n    }\n\n    // Strip unneeded blocks, that is blocks with <2 children unless\n    // the CodePrinter specifically wants to keep them.\n    if (n.getType() == Token.BLOCK) {\n      int count = getNonEmptyChildCount(n, 2);\n      if (count == 0) {\n        if (cc.shouldPreserveExtraBlocks()) {\n          cc.beginBlock();\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        } else {\n          cc.endStatement(true);\n        }\n        return;\n      }\n\n      if (count == 1) {\n        // Hack around a couple of browser bugs:\n        //   Safari needs a block around function declarations.\n        //   IE6/7 needs a block around DOs.\n        Node firstAndOnlyChild = getFirstNonEmptyChild(n);\n        boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();\n        if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {\n          cc.beginBlock();\n          add(firstAndOnlyChild, Context.STATEMENT);\n          cc.maybeLineBreak();\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n          return;\n        } else {\n          // Continue with the only child.\n          nodeToProcess = firstAndOnlyChild;\n        }\n      }\n\n      if (count > 1) {\n        context = Context.PRESERVE_BLOCK;\n      }\n    }\n\n    if (nodeToProcess.getType() == Token.EMPTY) {\n      cc.endStatement(true);\n    } else {\n      add(nodeToProcess, context);\n\n      // VAR doesn't include ';' since it gets used in expressions - so any\n      // VAR in a statement context needs a call to endStatement() here.\n      if (nodeToProcess.getType() == Token.VAR) {\n        cc.endStatement();\n      }\n    }\n  }\n",
        "begin_line": 737,
        "end_line": 793,
        "comment": "\n   * Adds a block or expression, substituting a VOID with an empty statement.\n   * This is used for \"for (...);\" and \"if (...);\" type statements.\n   *\n   * @param n The node to print.\n   * @param context The context to determine how the node should be printed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.maybeLineBreak#433",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeLineBreak()",
        "snippet": "    @Override\n    void maybeLineBreak() {\n      if (lineBreak) {\n        if (sawFunction) {\n          startNewLine();\n          sawFunction = false;\n        }\n      }\n\n      // Since we are at a legal line break, can we upgrade the\n      // preferred break position?  We prefer to break after a\n      // semicolon rather than before it.\n      int len = code.length();\n      if (preferredBreakPosition == len - 1) {\n        char ch = code.charAt(len - 1);\n        if (ch == ';') {\n          preferredBreakPosition = len;\n        }\n      }\n      maybeCutLine();\n    }\n",
        "begin_line": 433,
        "end_line": 453,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2222
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processFunctionCall#527",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionCall(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall)",
        "snippet": "    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));\n      for (AstNode child : callNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n\n      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n      node.setLineno(callNode.getLineno());\n      node.setCharno(position2charno(leftParamPos));\n      return node;\n    }\n",
        "begin_line": 527,
        "end_line": 539,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2188
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeGenerator.isIndirectEval#725",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.isIndirectEval(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isIndirectEval(Node n) {\n    return n.getType() == Token.NAME && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);\n  }\n",
        "begin_line": 725,
        "end_line": 728,
        "comment": "\n   * @return Whether the name is an indirect eval.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2188
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.isEquivalentTo#313",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "    @Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      return (super.isEquivalentTo(node, compareJsType, recurse)\n          && this.str.equals(((StringNode) node).str));\n    }\n",
        "begin_line": 313,
        "end_line": 317,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.maybeCutLine#459",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeCutLine()",
        "snippet": "    @Override\n    void maybeCutLine() {\n      if (lineLength > lineLengthThreshold) {\n        // Use the preferred position provided it will break the line.\n        if (preferredBreakPosition > lineStartPosition &&\n            preferredBreakPosition < lineStartPosition + lineLength) {\n          int position = preferredBreakPosition;\n          code.insert(position, '\\n');\n          reportLineCut(lineIndex, position - lineStartPosition);\n          lineIndex++;\n          lineLength -= (position - lineStartPosition);\n          lineStartPosition = position + 1;\n        } else {\n          startNewLine();\n        }\n      }\n    }\n",
        "begin_line": 459,
        "end_line": 475,
        "comment": "\n     * This may start a new line if the current line is longer than the line\n     * length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.addLeftExpr#830",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addLeftExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addLeftExpr(Node n, int minPrecedence, Context context) {\n    addExpr(n, minPrecedence, context);\n  }\n",
        "begin_line": 830,
        "end_line": 832,
        "comment": "\n   * Adds a node at the left-hand side of an expression. Unlike\n   * {@link #addExpr(Node,int)}, this preserves information about the context.\n   *\n   * The left side of an expression is special because in the JavaScript\n   * grammar, certain tokens may be parsed differently when they are at\n   * the beginning of a statement. For example, \"{}\" is parsed as a block,\n   * but \"{'x': 'y'}\" is parsed as an object literal.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.endStatement#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement()",
        "snippet": "  void endStatement() {\n    endStatement(false);\n  }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\n   * Indicates the end of a statement and a ';' may need to be added.\n   * But we don't add it now, in case we're at the end of a block (in which\n   * case we don't have to add the ';').\n   * See maybeEndStatement()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.endStatement#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement(boolean)",
        "snippet": "  void endStatement(boolean needSemiColon) {\n    if (needSemiColon) {\n      append(\";\");\n      maybeLineBreak();\n      statementNeedsEnded = false;\n    } else if (statementStarted) {\n      statementNeedsEnded = true;\n    }\n  }\n",
        "begin_line": 138,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getNodeClass#1382",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNodeClass(com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  static private Class getNodeClass(Node n) {\n    Class c = n.getClass();\n    if (c == FunctionNode.class || c == ScriptOrFnNode.class) {\n      return Node.class;\n    }\n    return c;\n  }\n",
        "begin_line": 1382,
        "end_line": 1389,
        "comment": "\n   * Helper function to ignore differences in Node subclasses that are no longer\n   * used.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2108
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.initCompilerOptionsIfTesting#1220",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initCompilerOptionsIfTesting()",
        "snippet": "  void initCompilerOptionsIfTesting() {\n    if (options == null) {\n      // initialization for tests that don't initialize the compiler\n      // by the normal mechanisms.\n      initOptions(new CompilerOptions());\n    }\n  }\n",
        "begin_line": 1220,
        "end_line": 1226,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2108
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.toSource#1431",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  String toSource(Node n) {\n    initCompilerOptionsIfTesting();\n    return toSource(n, null);\n  }\n",
        "begin_line": 1431,
        "end_line": 1435,
        "comment": "\n   * Generates JavaScript source code for an AST, doesn't generate source\n   * map info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2108
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.add#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(java.lang.String)",
        "snippet": "  void add(String str) {\n    cc.add(str);\n  }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2108
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.getLastChar#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getLastChar()",
        "snippet": "    @Override\n    char getLastChar() {\n      return (code.length() > 0) ? code.charAt(code.length() - 1) : '\\0';\n    }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2097
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.append#414",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.append(java.lang.String)",
        "snippet": "    @Override\n    void append(String str) {\n      code.append(str);\n      lineLength += str.length();\n    }\n",
        "begin_line": 414,
        "end_line": 418,
        "comment": "\n     * Appends a string to the code, keeping track of the current line length.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2097
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.notePreferredLineBreak#477",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.notePreferredLineBreak()",
        "snippet": "    @Override\n    void notePreferredLineBreak() {\n      preferredBreakPosition = code.length();\n    }\n",
        "begin_line": 477,
        "end_line": 480,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2097
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.addIdentifier#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addIdentifier(java.lang.String)",
        "snippet": "  private void addIdentifier(String identifier) {\n    cc.addIdentifier(identifierEscape(identifier));\n  }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2097
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.identifierEscape#1028",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.identifierEscape(java.lang.String)",
        "snippet": "  static String identifierEscape(String s) {\n    // First check if escaping is needed at all -- in most cases it isn't.\n    if (NodeUtil.isLatin(s)) {\n      return s;\n    }\n\n    // Now going through the string to escape non-latin characters if needed.\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // Identifiers should always go to Latin1/ ASCII characters because\n      // different browser's rules for valid identifier characters are\n      // crazy.\n      if (c > 0x1F && c < 0x7F) {\n        sb.append(c);\n      } else {\n        appendHexJavaScriptRepresentation(sb, c);\n      }\n    }\n    return sb.toString();\n  }\n",
        "begin_line": 1028,
        "end_line": 1048,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2097
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.addIdentifier#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addIdentifier(java.lang.String)",
        "snippet": "  void addIdentifier(String identifier) {\n    add(identifier);\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2097
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.isWordChar#261",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isWordChar(char)",
        "snippet": "  static boolean isWordChar(char ch) {\n    return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));\n  }\n",
        "begin_line": 261,
        "end_line": 265,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2097
        },
        "num_failing_tests": 4
    },
    {
        "name": "ParserRunner.initResourceConfig#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.initResourceConfig()",
        "snippet": "  private static synchronized void initResourceConfig() {\n    if (annotationNames != null) {\n      return;\n    }\n\n    ResourceBundle config = ResourceBundle.getBundle(configResource);\n    annotationNames = extractList(config.getString(\"jsdoc.annotations\"));\n    suppressionNames = extractList(config.getString(\"jsdoc.suppressions\"));\n  }\n",
        "begin_line": 61,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isLatin#2401",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLatin(java.lang.String)",
        "snippet": "  static boolean isLatin(String s) {\n    char LARGEST_BASIC_LATIN = 0x7f;\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c > LARGEST_BASIC_LATIN) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 2401,
        "end_line": 2411,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.hasChildren#543",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChildren()",
        "snippet": "  public boolean hasChildren() {\n    return first != null;\n  }\n",
        "begin_line": 543,
        "end_line": 545,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2074
        },
        "num_failing_tests": 4
    },
    {
        "name": "SyntacticScopeCreator.scanVars#117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void scanVars(Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.VAR:\n        // Declare all variables. e.g. var x = 1, y, z;\n        for (Node child = n.getFirstChild();\n             child != null;) {\n          Node next = child.getNext();\n          declareVar(child);\n          child = next;\n        }\n        return;\n\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n)) {\n          return;\n        }\n\n        String fnName = n.getFirstChild().getString();\n        if (fnName.isEmpty()) {\n          // This is invalid, but allow it so the checks can catch it.\n          return;\n        }\n        declareVar(n.getFirstChild());\n        return;   // should not examine function's children\n\n      case Token.CATCH:\n        Preconditions.checkState(n.getChildCount() == 2);\n        Preconditions.checkState(n.getFirstChild().getType() == Token.NAME);\n        // the first child is the catch var and the third child\n        // is the code block\n\n        final Node var = n.getFirstChild();\n        final Node block = var.getNext();\n\n        declareVar(var);\n        scanVars(block, n);\n        return;  // only one child to scan\n\n      case Token.SCRIPT:\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        break;\n    }\n\n    // Variables can only occur in statement-level nodes, so\n    // we only need to traverse children in a couple special cases.\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n      for (Node child = n.getFirstChild();\n           child != null;) {\n        Node next = child.getNext();\n        scanVars(child, n);\n        child = next;\n      }\n    }\n  }\n",
        "begin_line": 117,
        "end_line": 170,
        "comment": "\n   * Scans and gather variables declarations under a Node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2063
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultCodingConvention.isExported#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.DefaultCodingConvention",
        "signature": "com.google.javascript.jscomp.DefaultCodingConvention.isExported(java.lang.String, boolean)",
        "snippet": "  @Override\n  public boolean isExported(String name, boolean local) {\n    return local && name.startsWith(\"$super\");\n  }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2063
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.hasOneChild#1330",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasOneChild()",
        "snippet": "  public boolean hasOneChild() {\n    return first != null && first == last;\n  }\n",
        "begin_line": 1330,
        "end_line": 1332,
        "comment": "\n   * Check for one child more efficiently than by iterating over all the\n   * children as is done with Node.getChildCount().\n   *\n   * @return Whether the node has exactly one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2052
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processExpressionStatement#500",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processExpressionStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement)",
        "snippet": "    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n",
        "begin_line": 500,
        "end_line": 505,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2052
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.AnnotatedLinkedDirectedGraphEdge#547",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphEdge.AnnotatedLinkedDirectedGraphEdge(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>, E, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "    AnnotatedLinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode,\n        E edgeValue, DiGraphNode<N, E> destNode) {\n      super(sourceNode, edgeValue, destNode);\n    }\n",
        "begin_line": 547,
        "end_line": 550,
        "comment": "\n     * Constructor.\n     *\n     * @param edgeValue Edge Value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2052
        },
        "num_failing_tests": 4
    },
    {
        "name": "SyntacticScopeCreator.scanRoot#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n      sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n\n      final Node fnNameNode = n.getFirstChild();\n      final Node args = fnNameNode.getNext();\n      final Node body = args.getNext();\n\n      // Bleed the function name into the scope, if it hasn't\n      // been declared in the outer scope.\n      String fnName = fnNameNode.getString();\n      if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n        declareVar(fnNameNode);\n      }\n\n      // Args: Declare function variables\n      Preconditions.checkState(args.getType() == Token.LP);\n      for (Node a = args.getFirstChild(); a != null;\n           a = a.getNext()) {\n        Preconditions.checkState(a.getType() == Token.NAME);\n        declareVar(a);\n      }\n\n      // Body\n      scanVars(body, n);\n    } else {\n      // It's the global block\n      Preconditions.checkState(scope.getParent() == null);\n      scanVars(n, null);\n    }\n  }\n",
        "begin_line": 82,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2052
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.getControlFlowGraph#572",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getControlFlowGraph()",
        "snippet": "  public ControlFlowGraph<Node> getControlFlowGraph() {\n    if (cfgs.peek() == null) {\n      ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);\n      cfa.process(null, getScopeRoot());\n      cfgs.pop();\n      cfgs.push(cfa.getCfg());\n    }\n    return cfgs.peek();\n  }\n",
        "begin_line": 572,
        "end_line": 580,
        "comment": " Gets the control flow graph for the current JS scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2052
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.computeFollowNode#657",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowAnalysis)",
        "snippet": "  static Node computeFollowNode(Node node, ControlFlowAnalysis cfa) {\n    return computeFollowNode(node, node, cfa);\n  }\n",
        "begin_line": 657,
        "end_line": 659,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2052
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.getVar#434",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVar(java.lang.String)",
        "snippet": "  public Var getVar(String name) {\n    Var var = vars.get(name);\n    if (var != null) {\n      return var;\n    } else if (parent != null) { // Recurse up the parent Scope\n      return parent.getVar(name);\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 434,
        "end_line": 443,
        "comment": "\n   * Returns the variable, may be null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isName#1439",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isName(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isName(Node n) {\n    return n.getType() == Token.NAME;\n  }\n",
        "begin_line": 1439,
        "end_line": 1441,
        "comment": "\n   * Is this a NAME node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.copyInformationFrom#1897",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.copyInformationFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node copyInformationFrom(Node other) {\n    if (getProp(ORIGINALNAME_PROP) == null) {\n        putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n    }\n\n    if (getProp(SOURCENAME_PROP) == null) {\n        putProp(SOURCENAME_PROP, other.getProp(SOURCENAME_PROP));\n        sourcePosition = other.sourcePosition;\n    }\n\n    return this;\n  }\n",
        "begin_line": 1897,
        "end_line": 1908,
        "comment": "\n   * Copies source file and name information from the other\n   * node given to the current node. Used for maintaining\n   * debug information across node append and remove operations.\n   * @return this\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processIfStatement#600",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processIfStatement(com.google.javascript.jscomp.mozilla.rhino.ast.IfStatement)",
        "snippet": "    @Override\n    Node processIfStatement(IfStatement statementNode) {\n      Node node = newNode(Token.IF);\n      node.addChildToBack(transform(statementNode.getCondition()));\n      node.addChildToBack(transformBlock(statementNode.getThenPart()));\n      if (statementNode.getElsePart() != null) {\n        node.addChildToBack(transformBlock(statementNode.getElsePart()));\n      }\n      return node;\n    }\n",
        "begin_line": 600,
        "end_line": 609,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isSyntheticBlock#2029",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isSyntheticBlock()",
        "snippet": "  public boolean isSyntheticBlock() {\n    return getBooleanProp(SYNTHETIC_BLOCK_PROP);\n  }\n",
        "begin_line": 2029,
        "end_line": 2031,
        "comment": "\n   * Returns whether this is a synthetic block that should not be considered\n   * a real source block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraphNode#328",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.LinkedDirectedGraphNode(N)",
        "snippet": "    LinkedDirectedGraphNode(N nodeValue) {\n      this.value = nodeValue;\n    }\n",
        "begin_line": 328,
        "end_line": 330,
        "comment": "\n     * Constructor\n     *\n     * @param nodeValue Node's value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getValue#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getValue()",
        "snippet": "    @Override\n    public N getValue() {\n      return value;\n    }\n",
        "begin_line": 332,
        "end_line": 335,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getInEdges#369",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getInEdges()",
        "snippet": "    @Override\n    public List<DiGraphEdge<N, E>> getInEdges() {\n      return inEdgeList;\n    }\n",
        "begin_line": 369,
        "end_line": 372,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getOutEdges#374",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getOutEdges()",
        "snippet": "    @Override\n    public List<DiGraphEdge<N, E>> getOutEdges() {\n      return outEdgeList;\n    }\n",
        "begin_line": 374,
        "end_line": 377,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraphEdge#453",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.LinkedDirectedGraphEdge(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>, E, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "    LinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode,\n        E edgeValue, DiGraphNode<N, E> destNode) {\n      this.value = edgeValue;\n      this.sourceNode = sourceNode;\n      this.destNode = destNode;\n    }\n",
        "begin_line": 453,
        "end_line": 458,
        "comment": "\n     * Constructor.\n     *\n     * @param edgeValue Edge Value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getDestination#465",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getDestination()",
        "snippet": "    @Override\n    public DiGraphNode<N, E> getDestination() {\n      return destNode;\n    }\n",
        "begin_line": 465,
        "end_line": 468,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getValue#480",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getValue()",
        "snippet": "    @Override\n    public E getValue() {\n      return value;\n    }\n",
        "begin_line": 480,
        "end_line": 483,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode#419",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode.AnnotatedLinkedDirectedGraphNode(N)",
        "snippet": "    AnnotatedLinkedDirectedGraphNode(N nodeValue) {\n      super(nodeValue);\n    }\n",
        "begin_line": 419,
        "end_line": 421,
        "comment": "\n     * @param nodeValue Node's value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getAnnotation#423",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode.getAnnotation()",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <A extends Annotation> A getAnnotation() {\n      return (A) annotation;\n    }\n",
        "begin_line": 423,
        "end_line": 427,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.setAnnotation#429",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode.setAnnotation(com.google.javascript.jscomp.graph.Annotation)",
        "snippet": "    @Override\n    public void setAnnotation(Annotation data) {\n      annotation = data;\n    }\n",
        "begin_line": 429,
        "end_line": 432,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraph#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraph(boolean, boolean)",
        "snippet": "  protected LinkedDirectedGraph(\n      boolean useNodeAnnotations, boolean useEdgeAnnotations) {\n    this.useNodeAnnotations = useNodeAnnotations;\n    this.useEdgeAnnotations = useEdgeAnnotations;\n  }\n",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.connect#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.connect(N, E, N)",
        "snippet": "  @Override\n  public void connect(N srcValue, E edgeValue, N destValue) {\n    LinkedDirectedGraphNode<N, E> src = getNodeOrFail(srcValue);\n    LinkedDirectedGraphNode<N, E> dest = getNodeOrFail(destValue);\n    LinkedDirectedGraphEdge<N, E> edge =\n        useEdgeAnnotations ?\n        new AnnotatedLinkedDirectedGraphEdge<N, E>(src, edgeValue, dest) :\n        new LinkedDirectedGraphEdge<N, E>(src, edgeValue, dest);\n    src.getOutEdges().add(edge);\n    dest.getInEdges().add(edge);\n  }\n",
        "begin_line": 76,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphNodes#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNodes()",
        "snippet": "  @Override\n  public Iterable<DiGraphNode<N, E>> getDirectedGraphNodes() {\n    return Collections.<DiGraphNode<N, E>>unmodifiableCollection(\n        nodes.values());\n  }\n",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphNode#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNode(N)",
        "snippet": "  @Override\n  public DiGraphNode<N, E> getDirectedGraphNode(N nodeValue) {\n    return nodes.get(nodeValue);\n  }\n",
        "begin_line": 110,
        "end_line": 113,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getNode#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNode(N)",
        "snippet": "  @Override\n  public GraphNode<N, E> getNode(N nodeValue) {\n    return getDirectedGraphNode(nodeValue);\n  }\n",
        "begin_line": 115,
        "end_line": 118,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.createDirectedGraphNode#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createDirectedGraphNode(N)",
        "snippet": "  @Override\n  public DiGraphNode<N, E> createDirectedGraphNode(N nodeValue) {\n    LinkedDirectedGraphNode<N, E> node = nodes.get(nodeValue);\n    if (node == null) {\n      node = useNodeAnnotations ?\n          new AnnotatedLinkedDirectedGraphNode<N, E>(nodeValue) :\n          new LinkedDirectedGraphNode<N, E>(nodeValue);\n      nodes.put(nodeValue, node);\n    }\n    return node;\n  }\n",
        "begin_line": 132,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.createNode#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createNode(N)",
        "snippet": "  @Override\n  public GraphNode<N, E> createNode(N value) {\n    return createDirectedGraphNode(value);\n  }\n",
        "begin_line": 157,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.isConnectedInDirection#180",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, E, N)",
        "snippet": "  @Override\n  public boolean isConnectedInDirection(N n1, E edgeValue, N n2) {\n    return isConnectedInDirection(n1, Predicates.equalTo(edgeValue), n2);\n  }\n",
        "begin_line": 180,
        "end_line": 183,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.isConnectedInDirection#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, com.google.common.base.Predicate<E>, N)",
        "snippet": "  private boolean isConnectedInDirection(N n1, Predicate<E> edgeMatcher, N n2) {\n    // Verify the nodes.\n    DiGraphNode<N, E> dNode1 = getNodeOrFail(n1);\n    DiGraphNode<N, E> dNode2 = getNodeOrFail(n2);\n    for (DiGraphEdge<N, E> outEdge : dNode1.getOutEdges()) {\n      if (outEdge.getDestination() == dNode2 &&\n          edgeMatcher.apply(outEdge.getValue())) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 185,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "LinkedDirectedGraph.getDirectedSuccNodes#222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedSuccNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "  @Override\n  public List<DiGraphNode<N, E>> getDirectedSuccNodes(\n      DiGraphNode<N, E> dNode) {\n    if (dNode == null) {\n      throw new IllegalArgumentException(dNode + \" is null\");\n    }\n    List<DiGraphNode<N, E>> nodeList = Lists.newArrayList();\n    for (DiGraphEdge<N, E> edge : dNode.getOutEdges()) {\n      nodeList.add(edge.getDestination());\n    }\n    return nodeList;\n  }\n",
        "begin_line": 222,
        "end_line": 233,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "Graph.connectIfNotFound#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.connectIfNotFound(N, E, N)",
        "snippet": "  public final void connectIfNotFound(N n1, E edge, N n2) {\n    if (!isConnected(n1, edge, n2)) {\n      connect(n1, edge, n2);\n    }\n  }\n",
        "begin_line": 119,
        "end_line": 123,
        "comment": "\n   * Connects two nodes in the graph with an edge if such edge does not already\n   * exists between the nodes.\n   *\n   * @param n1 First node.\n   * @param edge The edge.\n   * @param n2 Second node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "Graph.getNodeOrFail#206",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.getNodeOrFail(N)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  <T extends GraphNode<N, E>> T getNodeOrFail(N val) {\n    T node = (T) getNode(val);\n    if (node == null) {\n      throw new IllegalArgumentException(val + \" does not exist in graph\");\n    }\n    return node;\n  }\n",
        "begin_line": 206,
        "end_line": 213,
        "comment": "\n   * Gets the node of the specified type, or throws an\n   * IllegalArgumentException.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiGraph.isConnected#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/DiGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.DiGraph",
        "signature": "com.google.javascript.jscomp.graph.DiGraph.isConnected(N, E, N)",
        "snippet": "  @Override\n  public boolean isConnected(N n1, E e, N n2) {\n    return isConnectedInDirection(n1, e, n2) ||\n        isConnectedInDirection(n2, e, n1);\n  }\n",
        "begin_line": 97,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "SyntacticScopeCreator.createScope#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  public Scope createScope(Node n, Scope parent) {\n    sourceName = null;\n    if (parent == null) {\n      scope = new Scope(n, compiler);\n    } else {\n      scope = new Scope(parent, n);\n    }\n\n    scanRoot(n, parent);\n\n    sourceName = null;\n    Scope returnedScope = scope;\n    scope = null;\n    return returnedScope;\n  }\n",
        "begin_line": 66,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.getParentNode#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getParentNode()",
        "snippet": "    public Node getParentNode() {\n      return nameNode == null ? null : nameNode.getParent();\n    }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\n     * Gets the parent of the name node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.Scope#289",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.Node)",
        "snippet": "  Scope(Scope parent, Node rootNode) {\n    Preconditions.checkNotNull(parent);\n    Preconditions.checkArgument(rootNode != parent.rootNode);\n\n    this.parent = parent;\n    this.rootNode = rootNode;\n    JSType nodeType = rootNode.getJSType();\n    if (nodeType != null && nodeType instanceof FunctionType) {\n      thisType = ((FunctionType) nodeType).getTypeOfThis();\n    } else {\n      thisType = parent.thisType;\n    }\n    this.isBottom = false;\n    this.depth = parent.depth + 1;\n  }\n",
        "begin_line": 289,
        "end_line": 303,
        "comment": "\n   * Creates a Scope given the parent Scope and the root node of the scope.\n   * @param parent  The parent Scope. Cannot be null.\n   * @param rootNode  Typically the FUNCTION node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.getVars#462",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVars()",
        "snippet": "  public Iterator<Var> getVars() {\n    return vars.values().iterator();\n  }\n",
        "begin_line": 462,
        "end_line": 464,
        "comment": "\n   * Return an iterator over all of the variables declared in this scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowGraph.ControlFlowGraph#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.ControlFlowGraph(N, boolean, boolean)",
        "snippet": "  ControlFlowGraph(\n      N entry, boolean nodeAnnotations, boolean edgeAnnotations) {\n    super(nodeAnnotations, edgeAnnotations);\n    implicitReturn = createDirectedGraphNode(null);\n    this.entry = createDirectedGraphNode(entry);\n  }\n",
        "begin_line": 47,
        "end_line": 52,
        "comment": "\n   * Constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowGraph.getImplicitReturn#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.getImplicitReturn()",
        "snippet": "  public DiGraphNode<N, ControlFlowGraph.Branch> getImplicitReturn() {\n    return implicitReturn;\n  }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n   * Gets the implicit return node.\n   *\n   * @return Return node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowGraph.getEntry#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.getEntry()",
        "snippet": "  public DiGraphNode<N, ControlFlowGraph.Branch> getEntry() {\n    return entry;\n  }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n   * Gets the entry point of the control flow graph. In general, this should be\n   * the beginning of the global script or beginning of a function.\n   *\n   * @return The entry point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.AstControlFlowGraph#996",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.AstControlFlowGraph(com.google.javascript.rhino.Node, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer>, boolean)",
        "snippet": "    private AstControlFlowGraph(Node entry,\n        Map<DiGraphNode<Node, Branch>, Integer> priorities,\n        boolean edgeAnnotations) {\n      super(entry,\n          true /* node annotations */, edgeAnnotations);\n      this.priorities = priorities;\n    }\n",
        "begin_line": 996,
        "end_line": 1002,
        "comment": "\n     * Constructor.\n     * @param entry The entry node.\n     * @param priorities The map from nodes to position in the AST (to be\n     *    filled by the {@link ControlFlowAnalysis#shouldTraverse}).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.ControlFlowAnalysis#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler, boolean, boolean)",
        "snippet": "  ControlFlowAnalysis(AbstractCompiler compiler,\n      boolean shouldTraverseFunctions, boolean edgeAnnotations) {\n    this.compiler = compiler;\n    this.shouldTraverseFunctions = shouldTraverseFunctions;\n    this.edgeAnnotations = edgeAnnotations;\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n   * Constructor.\n   *\n   * @param compiler Compiler instance.\n   * @param shouldTraverseFunctions Whether functions should be traversed (true\n   *    by default).\n   * @param edgeAnnotations Whether to allow edge annotations. By default,\n   *    only node annotations are allowed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.getCfg#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.getCfg()",
        "snippet": "  ControlFlowGraph<Node> getCfg() {\n    return cfg;\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.process#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    this.root = root;\n    astPositionCounter = 0;\n    astPosition = Maps.newHashMap();\n    nodePriorities = Maps.newHashMap();\n    cfg = new AstControlFlowGraph(computeFallThrough(root), nodePriorities,\n                                  edgeAnnotations);\n    NodeTraversal.traverse(compiler, root, this);\n    astPosition.put(null, ++astPositionCounter); // the implicit return is last.\n\n    // Now, generate the priority of nodes by doing a depth-first\n    // search on the CFG.\n    priorityCounter = 0;\n    DiGraphNode<Node, Branch> entry = cfg.getEntry();\n    prioritizeFromEntryNode(entry);\n\n    if (shouldTraverseFunctions) {\n      // If we're traversing inner functions, we need to rank the\n      // priority of them too.\n      for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {\n        Node value = candidate.getValue();\n        if (value != null && value.getType() == Token.FUNCTION) {\n          Preconditions.checkState(\n              !nodePriorities.containsKey(candidate) || candidate == entry);\n          prioritizeFromEntryNode(candidate);\n        }\n      }\n    }\n\n    // At this point, all reachable nodes have been given a priority, but\n    // unreachable nodes have not been given a priority. Put them last.\n    // Presumably, it doesn't really matter what priority they get, since\n    // this shouldn't happen in real code.\n    for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {\n      if (!nodePriorities.containsKey(candidate)) {\n        nodePriorities.put(candidate, ++priorityCounter);\n      }\n    }\n\n    // Again, the implicit return node is always last.\n    nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);\n  }\n",
        "begin_line": 148,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.prioritizeFromEntryNode#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "  private void prioritizeFromEntryNode(DiGraphNode<Node, Branch> entry) {\n    PriorityQueue<DiGraphNode<Node, Branch>> worklist =\n        new PriorityQueue<DiGraphNode<Node, Branch>>(10, priorityComparator);\n    worklist.add(entry);\n\n    while (!worklist.isEmpty()) {\n      DiGraphNode<Node, Branch> current = worklist.remove();\n      if (nodePriorities.containsKey(current)) {\n        continue;\n      }\n\n      nodePriorities.put(current, ++priorityCounter);\n\n      List<DiGraphNode<Node, Branch>> successors =\n          cfg.getDirectedSuccNodes(current);\n      for (DiGraphNode<Node, Branch> candidate : successors) {\n        worklist.add(candidate);\n      }\n    }\n  }\n",
        "begin_line": 196,
        "end_line": 215,
        "comment": "\n   * Given an entry node, find all the nodes reachable from that node\n   * and prioritize them.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.handleStmtList#482",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleStmtList(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleStmtList(Node node) {\n    Node parent = node.getParent();\n    // Special case, don't add a block of empty CATCH block to the graph.\n    if (node.getType() == Token.BLOCK && parent != null &&\n        parent.getType() == Token.TRY &&\n        NodeUtil.getCatchBlock(parent) == node &&\n        !NodeUtil.hasCatchHandler(node)) {\n      return;\n    }\n\n    // A block transfer control to its first child if it is not empty.\n    Node child = node.getFirstChild();\n\n    // Function declarations are skipped since control doesn't go into that\n    // function (unless it is called)\n    while (child != null && child.getType() == Token.FUNCTION) {\n      child = child.getNext();\n    }\n\n    if (child != null) {\n      createEdge(node, Branch.UNCOND, computeFallThrough(child));\n    } else {\n      createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    }\n\n    // Synthetic blocks\n    if (parent != null) {\n      switch (parent.getType()) {\n        case Token.DEFAULT:\n        case Token.CASE:\n        case Token.TRY:\n          break;\n        default:\n          if (node.getType() == Token.BLOCK && node.isSyntheticBlock()) {\n            createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));\n          }\n          break;\n      }\n    }\n  }\n",
        "begin_line": 482,
        "end_line": 521,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.computeFallThrough#779",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(com.google.javascript.rhino.Node)",
        "snippet": "  static Node computeFallThrough(Node n) {\n    switch (n.getType()) {\n      case Token.DO:\n        return computeFallThrough(n.getFirstChild());\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          return n;\n        }\n        return computeFallThrough(n.getFirstChild());\n      case Token.LABEL:\n        return computeFallThrough(n.getLastChild());\n      default:\n        return n;\n    }\n  }\n",
        "begin_line": 779,
        "end_line": 793,
        "comment": "\n   * Computes the destination node of n when we want to fallthough into the\n   * subtree of n. We don't always create a CFG edge into n itself because of\n   * DOs and FORs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "ControlFlowAnalysis.createEdge#801",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.createEdge(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch, com.google.javascript.rhino.Node)",
        "snippet": "  private void createEdge(Node fromNode, ControlFlowGraph.Branch branch,\n      Node toNode) {\n    cfg.createNode(fromNode);\n    cfg.createNode(toNode);\n    cfg.connectIfNotFound(fromNode, branch, toNode);\n  }\n",
        "begin_line": 801,
        "end_line": 806,
        "comment": "\n   * Connects the two nodes in the control flow graph.\n   *\n   * @param fromNode Source.\n   * @param toNode Destination.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.getLanguageOut#1134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageOut()",
        "snippet": "  public LanguageMode getLanguageOut() {\n    return languageOut;\n  }\n",
        "begin_line": 1134,
        "end_line": 1136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.toSource#1440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.SourceMap)",
        "snippet": "  private String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    builder.setTagAsStrict(\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n    builder.setLineLengthThreshold(options.lineLengthThreshold);\n\n    Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;\n    builder.setOutputCharset(charset);\n\n    return builder.build();\n  }\n",
        "begin_line": 1440,
        "end_line": 1455,
        "comment": "\n   * Generates JavaScript source code for an AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.MappedCodePrinter#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.MappedCodePrinter(int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    MappedCodePrinter(\n        int lineLengthThreshold,\n        boolean createSrcMap,\n        SourceMap.DetailLevel sourceMapDetailLevel) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      this.lineLengthThreshold = lineLengthThreshold <= 0 ? Integer.MAX_VALUE :\n        lineLengthThreshold;\n      this.createSrcMap = createSrcMap;\n      this.sourceMapDetailLevel = sourceMapDetailLevel;\n      this.mappings = createSrcMap ? new ArrayDeque<Mapping>() : null;\n      this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;\n    }\n",
        "begin_line": 57,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.startSourceMapping#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.startSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void startSourceMapping(Node node) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      Preconditions.checkState(node != null);\n      if (createSrcMap\n          && node.getProp(Node.SOURCENAME_PROP) != null\n          && node.getLineno() > 0\n          && sourceMapDetailLevel.apply(node)) {\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        Mapping mapping = new Mapping();\n        mapping.node = node;\n        mapping.start = new FilePosition(line, index);\n        mappings.push(mapping);\n        allMappings.add(mapping);\n      }\n    }\n",
        "begin_line": 89,
        "end_line": 106,
        "comment": "\n     * Starts the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.endSourceMapping#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.endSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void endSourceMapping(Node node) {\n      if (createSrcMap && !mappings.isEmpty() && mappings.peek().node == node) {\n        Mapping mapping = mappings.pop();\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        mapping.end = new FilePosition(line, index);\n      }\n    }\n",
        "begin_line": 112,
        "end_line": 121,
        "comment": "\n     * Finishes the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.getCode#178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getCode()",
        "snippet": "    public String getCode() {\n      return code.toString();\n    }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.CompactCodePrinter#405",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.CompactCodePrinter(boolean, int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    private CompactCodePrinter(boolean lineBreak, int lineLengthThreshold,\n        boolean createSrcMap, SourceMap.DetailLevel sourceMapDetailLevel) {\n      super(lineLengthThreshold, createSrcMap, sourceMapDetailLevel);\n      this.lineBreak = lineBreak;\n    }\n",
        "begin_line": 405,
        "end_line": 409,
        "comment": "\n   * @param lineBreak break the lines a bit more aggressively\n   * @param lineLengthThreshold The length of a line after which we force\n   *                            a newline when possible.\n   * @param createSrcMap Whether to gather source position\n   *                            mapping information when printing.\n   * @param sourceMapDetailLevel A filter to control which nodes get mapped into\n   *     the source map.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.Builder#501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.Builder(com.google.javascript.rhino.Node)",
        "snippet": "    Builder(Node node) {\n      root = node;\n    }\n",
        "begin_line": 501,
        "end_line": 503,
        "comment": "\n     * Sets the root node from which to generate the source code.\n     * @param node The root node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.setPrettyPrint#509",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setPrettyPrint(boolean)",
        "snippet": "    Builder setPrettyPrint(boolean prettyPrint) {\n      this.prettyPrint = prettyPrint;\n      return this;\n    }\n",
        "begin_line": 509,
        "end_line": 512,
        "comment": "\n     * Sets whether pretty printing should be used.\n     * @param prettyPrint If true, pretty printing will be used.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.setLineBreak#518",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineBreak(boolean)",
        "snippet": "    Builder setLineBreak(boolean lineBreak) {\n      this.lineBreak = lineBreak;\n      return this;\n    }\n",
        "begin_line": 518,
        "end_line": 521,
        "comment": "\n     * Sets whether line breaking should be done automatically.\n     * @param lineBreak If true, line breaking is done automatically.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.setLineLengthThreshold#538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineLengthThreshold(int)",
        "snippet": "    Builder setLineLengthThreshold(int threshold) {\n      this.lineLengthThreshold = threshold;\n      return this;\n    }\n",
        "begin_line": 538,
        "end_line": 541,
        "comment": "\n     * Sets the line length threshold that will be used to determine\n     * when to break lines, if line breaking is on.\n     *\n     * @param threshold The line length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.setSourceMap#549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMap(com.google.javascript.jscomp.SourceMap)",
        "snippet": "    Builder setSourceMap(SourceMap sourceMap) {\n      this.sourceMap = sourceMap;\n      return this;\n    }\n",
        "begin_line": 549,
        "end_line": 552,
        "comment": "\n     * Sets the source map to which to write the metadata about\n     * the generated source code.\n     *\n     * @param sourceMap The source map.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.setSourceMapDetailLevel#557",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    Builder setSourceMapDetailLevel(SourceMap.DetailLevel level) {\n      Preconditions.checkState(level != null);\n      this.sourceMapDetailLevel = level;\n      return this;\n    }\n",
        "begin_line": 557,
        "end_line": 561,
        "comment": "\n     * @param level The detail level to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.setOutputCharset#567",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setOutputCharset(java.nio.charset.Charset)",
        "snippet": "    Builder setOutputCharset(Charset outCharset) {\n      this.outputCharset = outCharset;\n      return this;\n    }\n",
        "begin_line": 567,
        "end_line": 570,
        "comment": "\n     * Set the charset to use when determining what characters need to be\n     * escaped in the output.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.setTagAsStrict#575",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setTagAsStrict(boolean)",
        "snippet": "    Builder setTagAsStrict(boolean tagAsStrict) {\n      this.tagAsStrict = tagAsStrict;\n      return this;\n    }\n",
        "begin_line": 575,
        "end_line": 578,
        "comment": "\n     * Set whether the output should be tags as ECMASCRIPT 5 Strict.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.build#583",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.build()",
        "snippet": "    String build() {\n      if (root == null) {\n        throw new IllegalStateException(\n            \"Cannot build without root node being specified\");\n      }\n\n      Format outputFormat = outputTypes\n          ? Format.TYPED\n          : prettyPrint\n              ? Format.PRETTY\n              : Format.COMPACT;\n\n      return toSource(root, outputFormat, lineBreak, lineLengthThreshold,\n          sourceMap, sourceMapDetailLevel, outputCharset, tagAsStrict);\n    }\n",
        "begin_line": 583,
        "end_line": 597,
        "comment": "\n     * Generates the source code and returns it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodePrinter.toSource#609",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodePrinter.Format, boolean, int, com.google.javascript.jscomp.SourceMap, com.google.javascript.jscomp.SourceMap.DetailLevel, java.nio.charset.Charset, boolean)",
        "snippet": "  private static String toSource(Node root, Format outputFormat,\n                                 boolean lineBreak,  int lineLengthThreshold,\n                                 SourceMap sourceMap,\n                                 SourceMap.DetailLevel sourceMapDetailLevel,\n                                 Charset outputCharset,\n                                 boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel != null);\n\n    boolean createSourceMap = (sourceMap != null);\n    MappedCodePrinter mcp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, lineLengthThreshold,\n            createSourceMap, sourceMapDetailLevel)\n        : new PrettyCodePrinter(\n            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(mcp, outputCharset)\n        : new CodeGenerator(mcp, outputCharset);\n\n    if (tagAsStrict) {\n      cg.tagAsStrict();\n    }\n\n    cg.add(root);\n    mcp.endFile();\n\n    String code = mcp.getCode();\n\n    if (createSourceMap) {\n      mcp.generateSourceMap(sourceMap);\n    }\n\n    return code;\n  }\n",
        "begin_line": 609,
        "end_line": 644,
        "comment": "\n   * Converts a tree to js code\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.CodeGenerator#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer, java.nio.charset.Charset)",
        "snippet": "  CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset) {\n    cc = consumer;\n    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {\n      // If we want our default (pretending to be UTF-8, but escaping anything\n      // outside of straight ASCII), then don't use the encoder, but\n      // just special-case the code.  This keeps the normal path through\n      // the code identical to how it's been for years.\n      this.outputCharsetEncoder = null;\n    } else {\n      this.outputCharsetEncoder = outputCharset.newEncoder();\n    }\n  }\n",
        "begin_line": 45,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.add#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node)",
        "snippet": "  void add(Node n) {\n    add(n, Context.OTHER);\n  }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.continueProcessing#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.continueProcessing()",
        "snippet": "  boolean continueProcessing() {\n    return true;\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n   * Provides a means of interrupting the CodeGenerator. Derived classes should\n   * return false to stop further processing.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeConsumer.endFile#287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFile()",
        "snippet": "  void endFile() {}\n",
        "begin_line": 287,
        "end_line": 287,
        "comment": " Called when we're at the end of a file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2031
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getJSType#1928",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSType()",
        "snippet": "  public JSType getJSType() {\n      return jsType;\n  }\n",
        "begin_line": 1928,
        "end_line": 1930,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.getRootNode#345",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getRootNode()",
        "snippet": "  public Node getRootNode() {\n    return rootNode;\n  }\n",
        "begin_line": 345,
        "end_line": 347,
        "comment": "\n   * Gets the container node of the scope. This is typically the FUNCTION\n   * node or the global BLOCK/SCRIPT node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isFunction#1825",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunction(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunction(Node n) {\n    return n.getType() == Token.FUNCTION;\n  }\n",
        "begin_line": 1825,
        "end_line": 1827,
        "comment": "\n   * Is this a FUNCTION node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.getScope#555",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScope()",
        "snippet": "  public Scope getScope() {\n    Scope scope = scopes.isEmpty() ? null : scopes.peek();\n    if (scopeRoots.isEmpty()) {\n      return scope;\n    }\n\n    Iterator<Node> it = scopeRoots.descendingIterator();\n    while (it.hasNext()) {\n      scope = scopeCreator.createScope(it.next(), scope);\n      scopes.push(scope);\n    }\n    scopeRoots.clear();\n\n    return scope;\n  }\n",
        "begin_line": 555,
        "end_line": 569,
        "comment": " Gets the current scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 4
    },
    {
        "name": "DeadAssignmentsElimination.DeadAssignmentsElimination#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.DeadAssignmentsElimination(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public DeadAssignmentsElimination(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 4
    },
    {
        "name": "DeadAssignmentsElimination.exitScope#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n  }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 4
    },
    {
        "name": "DeadAssignmentsElimination.visit#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeChangeHandler.reset#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reset()",
        "snippet": "    void reset() {\n      hasChanged = false;\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getIntProp#807",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getIntProp(int)",
        "snippet": "  public int getIntProp(int propType) {\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return 0;\n    }\n    return item.intValue;\n  }\n",
        "begin_line": 807,
        "end_line": 813,
        "comment": "\n   * Returns the integer value for the property, or 0 if the property\n   * is not defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.201
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrepareAst.visit#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.CALL:\n          annotateCalls(n);\n          break;\n\n        case Token.FUNCTION:\n          annotateFunctions(n, parent);\n          annotateDispatchers(n, parent);\n          break;\n      }\n    }\n",
        "begin_line": 148,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2004
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getBooleanProp#799",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getBooleanProp(int)",
        "snippet": "  public boolean getBooleanProp(int propType) {\n    return getIntProp(propType) != 0;\n  }\n",
        "begin_line": 799,
        "end_line": 801,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "SyntacticScopeCreator.declareVar#231",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void declareVar(Node n) {\n    Preconditions.checkState(n.getType() == Token.NAME);\n\n    CompilerInput input = compiler.getInput(sourceName);\n    String name = n.getString();\n    if (scope.isDeclared(name, false)\n        || (scope.isLocal() && name.equals(ARGUMENTS))) {\n      redeclarationHandler.onRedeclaration(\n          scope, name, n, input);\n    } else {\n      scope.declare(name, n, null, input);\n    }\n  }\n",
        "begin_line": 231,
        "end_line": 243,
        "comment": "\n   * Declares a variable.\n   *\n   * @param n The node corresponding to the variable name.\n   * @param declaredType The variable's type, according to JSDoc\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.Var#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.Var(boolean, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.Scope, int, com.google.javascript.jscomp.CompilerInput, boolean, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    private Var(boolean inferred, String name, Node nameNode, JSType type,\n                Scope scope, int index, CompilerInput input, boolean isDefine,\n                JSDocInfo info) {\n      this.name = name;\n      this.nameNode = nameNode;\n      this.type = type;\n      this.scope = scope;\n      this.index = index;\n      this.input = input;\n      this.isDefine = isDefine;\n      this.info = info;\n      this.typeInferred = inferred;\n    }\n",
        "begin_line": 108,
        "end_line": 120,
        "comment": "\n     * Creates a variable.\n     *\n     * @param inferred whether its type is inferred (as opposed to declared)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.Scope#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  Scope(Node rootNode, AbstractCompiler compiler) {\n    this.parent = null;\n    this.rootNode = rootNode;\n    thisType = compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);\n    this.isBottom = false;\n    this.depth = 0;\n  }\n",
        "begin_line": 310,
        "end_line": 316,
        "comment": "\n   * Creates a global Scope.\n   * @param rootNode  Typically the global BLOCK node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.getParent#349",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getParent()",
        "snippet": "  public Scope getParent() {\n    return parent;\n  }\n",
        "begin_line": 349,
        "end_line": 351,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.declare#381",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  Var declare(String name, Node nameNode, JSType type, CompilerInput input) {\n    return declare(name, nameNode, type, input, true);\n  }\n",
        "begin_line": 381,
        "end_line": 383,
        "comment": "\n   * Declares a variable whose type is inferred.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.declare#395",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput, boolean)",
        "snippet": "  Var declare(String name, Node nameNode,\n      JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name != null && name.length() > 0);\n\n    // Make sure that it's declared only once\n    Preconditions.checkState(vars.get(name) == null);\n\n    // native variables do not have a name node.\n    // TODO(user): make Var abstract and have NativeVar, NormalVar.\n    JSDocInfo info = NodeUtil.getInfoForNameNode(nameNode);\n\n    Var var = new Var(inferred, name, nameNode, type, this, vars.size(), input,\n        info != null && info.isDefine(), info);\n\n    vars.put(name, var);\n    return var;\n  }\n",
        "begin_line": 395,
        "end_line": 411,
        "comment": "\n   * Declares a variable.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   * @param inferred Whether this variable's type is inferred (as opposed\n   *     to declared).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.isGlobal#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isGlobal()",
        "snippet": "  public boolean isGlobal() {\n    return parent == null;\n  }\n",
        "begin_line": 476,
        "end_line": 478,
        "comment": "\n   * Returns whether this is the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.isLocal#483",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isLocal()",
        "snippet": "  public boolean isLocal() {\n    return !isGlobal();\n  }\n",
        "begin_line": 483,
        "end_line": 485,
        "comment": "\n   * Returns whether this is a local scope (i.e. not the global scope).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isControlStructure#1582",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructure(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isControlStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1582,
        "end_line": 1599,
        "comment": "\n   * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isStatementBlock#1660",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementBlock(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementBlock(Node n) {\n    return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;\n  }\n",
        "begin_line": 1660,
        "end_line": 1662,
        "comment": "\n   * @return Whether the node is of a type that contain other statements.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.getInfoForNameNode#2784",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getInfoForNameNode(com.google.javascript.rhino.Node)",
        "snippet": "  static JSDocInfo getInfoForNameNode(Node nameNode) {\n    JSDocInfo info = null;\n    Node parent = null;\n    if (nameNode != null) {\n      info = nameNode.getJSDocInfo();\n      parent = nameNode.getParent();\n    }\n\n    if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION)) {\n      info = parent.getJSDocInfo();\n    }\n    return info;\n  }\n",
        "begin_line": 2784,
        "end_line": 2798,
        "comment": "\n   * @param nameNode A name node\n   * @return The JSDocInfo for the name node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.popScope#542",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.popScope()",
        "snippet": "  private void popScope() {\n    if (scopeCallback != null) {\n      scopeCallback.exitScope(this);\n    }\n    if (scopeRoots.isEmpty()) {\n      scopes.pop();\n    } else {\n      scopeRoots.pop();\n    }\n    cfgs.pop();\n  }\n",
        "begin_line": 542,
        "end_line": 552,
        "comment": " Pops back to the previous scope (e.g. when leaving a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processFunctionNode#541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode)",
        "snippet": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        int functionType = functionNode.getFunctionType();\n        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n        }\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
        "begin_line": 541,
        "end_line": 598,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.199
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrepareAst.annotateFunctions#234",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateFunctions(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateFunctions(Node n, Node parent) {\n      JSDocInfo fnInfo = NodeUtil.getFunctionInfo(n);\n\n      // Compute which function parameters are optional and\n      // which are var_args.\n      Node args = n.getFirstChild().getNext();\n      for (Node arg = args.getFirstChild();\n           arg != null;\n           arg = arg.getNext()) {\n        String argName = arg.getString();\n        JSTypeExpression typeExpr = fnInfo == null ?\n            null : fnInfo.getParameterType(argName);\n\n        if (convention.isOptionalParameter(arg) ||\n            typeExpr != null && typeExpr.isOptionalArg()) {\n          arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);\n        }\n        if (convention.isVarArgsParameter(arg) ||\n            typeExpr != null && typeExpr.isVarArgs()) {\n          arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);\n        }\n      }\n    }\n",
        "begin_line": 234,
        "end_line": 256,
        "comment": "\n     * Annotate optional and var_arg function parameters.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.199
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.shouldTraverse#126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }\n",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.199
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.NodeTraversal#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb,\n      ScopeCreator scopeCreator) {\n    this.callback = cb;\n    if (cb instanceof ScopedCallback) {\n      this.scopeCallback = (ScopedCallback) cb;\n    }\n    this.compiler = compiler;\n    this.sourceName = \"\";\n    this.scopeCreator = scopeCreator;\n  }\n",
        "begin_line": 203,
        "end_line": 212,
        "comment": "\n   * Creates a node traversal using the specified callback interface\n   * and the scope creator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.199
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.pushScope#522",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.rhino.Node)",
        "snippet": "  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 522,
        "end_line": 529,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.199
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getInput#946",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getInput(java.lang.String)",
        "snippet": "  @Override\n  public CompilerInput getInput(String name) {\n    return inputsByName.get(name);\n  }\n",
        "begin_line": 946,
        "end_line": 949,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.199
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.parseInputs#1067",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseInputs()",
        "snippet": "  Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main js sources.\n    jsRoot = new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n      // Parse externs sources.\n      externsRoot = new Node(Token.BLOCK);\n      externsRoot.setIsSyntheticBlock(true);\n      for (CompilerInput input : externs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      // Check if the sources need to be re-ordered.\n      if (options.manageClosureDependencies) {\n        for (CompilerInput input : inputs) {\n          input.setCompiler(this);\n\n          // Forward-declare all the provided types, so that they\n          // are not flagged even if they are dropped from the process.\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n        try {\n          inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(\n                  options.manageClosureDependenciesEntryPoints, inputs);\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n          return null;\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n          return null;\n        }\n      }\n\n      // Check if inputs need to be rebuilt from modules.\n      boolean staleInputs = false;\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n\n        // Inputs can have a null AST during initial parse.\n        if (n == null) {\n          continue;\n        }\n\n        if (n.getJSDocInfo() != null) {\n          JSDocInfo info = n.getJSDocInfo();\n          if (info.isExterns()) {\n            // If the input file is explicitly marked as an externs file, then\n            // assume the programmer made a mistake and throw it into\n            // the externs pile anyways.\n            externsRoot.addChildToBack(n);\n            input.setIsExtern(true);\n\n            input.getModule().remove(input);\n\n            externs.add(input);\n            staleInputs = true;\n          } else if (info.isNoCompile()) {\n            input.getModule().remove(input);\n            staleInputs = true;\n          }\n        }\n      }\n\n      if (staleInputs) {\n        fillEmptyModules(modules);\n        rebuildInputsFromModules();\n      }\n\n      // Build the AST.\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);\n      externAndJsRoot.setIsSyntheticBlock(true);\n\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }\n",
        "begin_line": 1067,
        "end_line": 1204,
        "comment": "\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.199
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processAssignment#368",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAssignment(com.google.javascript.jscomp.mozilla.rhino.ast.Assignment)",
        "snippet": "    @Override\n    Node processAssignment(Assignment assignmentNode) {\n      Node assign = processInfixExpression(assignmentNode);\n      Node target = assign.getFirstChild();\n      if (!validAssignmentTarget(target)) {\n        errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);\n      }\n      return assign;\n    }\n",
        "begin_line": 368,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1971
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processBlock#426",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processBlock(com.google.javascript.jscomp.mozilla.rhino.ast.Block)",
        "snippet": "    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n",
        "begin_line": 426,
        "end_line": 429,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1971
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processInfixExpression#611",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processInfixExpression(com.google.javascript.jscomp.mozilla.rhino.ast.InfixExpression)",
        "snippet": "    @Override\n    Node processInfixExpression(InfixExpression exprNode) {\n      Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));\n      // Set the line number here so we can fine-tune it in ways transform\n      // doesn't do.\n      n.setLineno(exprNode.getLineno());\n      // Position in new ASTNode is to start of expression, but old-fashioned\n      // line numbers from Node reference the operator token.  Add the offset\n      // to the operator to get the correct character number.\n      n.setCharno(position2charno(exprNode.getAbsolutePosition() +\n          exprNode.getOperatorPosition()));\n      return n;\n    }\n",
        "begin_line": 611,
        "end_line": 626,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1971
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.setSourceInfo#255",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setSourceInfo(com.google.javascript.rhino.Node, com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private void setSourceInfo(Node irNode, AstNode node) {\n    // If we have a named function, set the position to that of the name.\n    if (irNode.getType() == Token.FUNCTION &&\n        irNode.getFirstChild().getLineno() != -1) {\n      irNode.setLineno(irNode.getFirstChild().getLineno());\n      irNode.setCharno(irNode.getFirstChild().getCharno());\n    } else {\n      if (irNode.getLineno() == -1) {\n        // If we didn't already set the line, then set it now.  This avoids\n        // cases like ParenthesizedExpression where we just return a previous\n        // node, but don't want the new node to get its parent's line number.\n        int lineno = node.getLineno();\n        irNode.setLineno(lineno);\n        int charno = position2charno(node.getAbsolutePosition());\n        irNode.setCharno(charno);\n      }\n    }\n  }\n",
        "begin_line": 255,
        "end_line": 272,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1971
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrepareAst.annotateDispatchers#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateDispatchers(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateDispatchers(Node n, Node parent) {\n      Preconditions.checkState(n.getType() == Token.FUNCTION);\n      if (parent.getJSDocInfo() != null\n          && parent.getJSDocInfo().isJavaDispatch()) {\n        if (parent.getType() == Token.ASSIGN) {\n          Preconditions.checkState(parent.getLastChild() == n);\n          n.putBooleanProp(Node.IS_DISPATCHER, true);\n        }\n      }\n    }\n",
        "begin_line": 196,
        "end_line": 205,
        "comment": "\n     * Translate dispatcher info into the property expected node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1971
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isStatement#1667",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatement(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatement(Node n) {\n    return isStatementParent(n.getParent());\n  }\n",
        "begin_line": 1667,
        "end_line": 1669,
        "comment": "\n   * @return Whether the node is used as a statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1971
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isFunctionExpression#1902",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionExpression(Node n) {\n    return n.getType() == Token.FUNCTION && !isStatement(n);\n  }\n",
        "begin_line": 1902,
        "end_line": 1904,
        "comment": "\n   * Is a FUNCTION node an function expression? An function expression is one\n   * that has either no name or a name that is not added to the current scope.\n   *\n   * <p>Some examples of function expressions:\n   * <pre>\n   * (function () {})\n   * (function f() {})()\n   * [ function f() {} ]\n   * var f = function f() {};\n   * for (function f() {};;) {}\n   * </pre>\n   *\n   * <p>Some examples of functions that are <em>not</em> expressions:\n   * <pre>\n   * function f() {}\n   * if (x); else function f() {}\n   * for (;;) { function f() {} }\n   * </pre>\n   *\n   * @param n A node\n   * @return Whether n is an function used within an expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1971
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.getFunctionInfo#2803",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionInfo(com.google.javascript.rhino.Node)",
        "snippet": "  static JSDocInfo getFunctionInfo(Node n) {\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n    JSDocInfo fnInfo = n.getJSDocInfo();\n    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {\n      // Look for the info on other nodes.\n      Node parent = n.getParent();\n      if (parent.getType() == Token.ASSIGN) {\n        // on ASSIGNs\n        fnInfo = parent.getJSDocInfo();\n      } else if (parent.getType() == Token.NAME) {\n        // on var NAME = function() { ... };\n        fnInfo = parent.getParent().getJSDocInfo();\n      }\n    }\n    return fnInfo;\n  }\n",
        "begin_line": 2803,
        "end_line": 2818,
        "comment": "\n   * Get the JSDocInfo for a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1971
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.traverseBranch#437",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseBranch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }\n",
        "begin_line": 437,
        "end_line": 465,
        "comment": "\n   * Traverses a branch.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1971
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.traverseFunction#470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
        "begin_line": 470,
        "end_line": 505,
        "comment": "\n   * Traverses a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1971
        },
        "num_failing_tests": 4
    },
    {
        "name": "VoidType.VoidType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "VoidType.toString#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getDisplayName();\n  }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "VoidType.getDisplayName#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"undefined\";\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueType.ValueType#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueType.isSubtype#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    return JSType.isSubtype(this, that);\n  }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnknownType.UnknownType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked = isChecked;\n  }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionTypeBuilder.compare#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.Anonymous-7fc1a9bb-0722-428b-b54b-72424f82fbeb.compare(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    @Override public int compare(JSType a, JSType b) {\n      return b.hashCode() - a.hashCode();\n    }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionTypeBuilder.addAlternate#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType = isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown = alternate instanceof UnknownType;\n    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked = areAllUnknownsChecked &&\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType && !isNativeUnknownType) {\n      if (alternate instanceof UnionType) {\n        UnionType union = (UnionType) alternate;\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (alternates.size() > MAX_UNION_SIZE) {\n          return this;\n        }\n\n        // Look through the alternates we've got so far,\n        // and check if any of them are duplicates of\n        // one another.\n        Iterator<JSType> it = alternates.iterator();\n        while (it.hasNext()) {\n          JSType current = it.next();\n\n          // Unknown and NoResolved types may just be names that haven't\n          // been resolved yet. So keep these in the union, and just use\n          // equality checking for simple de-duping.\n          if (alternate.isUnknownType() ||\n              current.isUnknownType() ||\n              alternate.isNoResolvedType() ||\n              current.isNoResolvedType()) {\n            if (alternate.isEquivalentTo(current)) {\n              // Alternate is unnecessary.\n              return this;\n            }\n          } else {\n            if (alternate.isSubtype(current)) {\n              // Alternate is unnecessary.\n              return this;\n            } else if (current.isSubtype(alternate)) {\n              // Alternate makes current obsolete\n              it.remove();\n            }\n          }\n        }\n        alternates.add(alternate);\n        result = null; // invalidate the memoized result\n      }\n    } else {\n      result = null;\n    }\n    return this;\n  }\n",
        "begin_line": 95,
        "end_line": 156,
        "comment": "\n   * Adds an alternate to the union type under construction. Returns this\n   * for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionTypeBuilder.reduceAlternatesWithoutUnion#163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.reduceAlternatesWithoutUnion()",
        "snippet": "  private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n      return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n      if (areAllUnknownsChecked) {\n        return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n      } else {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      int size = alternates.size();\n      if (size > MAX_UNION_SIZE) {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      } else if (size > 1) {\n        return null;\n      } else if (size == 1) {\n        return alternates.iterator().next();\n      } else {\n        return registry.getNativeType(NO_TYPE);\n      }\n    }\n  }\n",
        "begin_line": 163,
        "end_line": 184,
        "comment": "\n   * Reduce the alternates into a non-union type.\n   * If the alternates can't be accurately represented with a non-union\n   * type, return null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionTypeBuilder.build#191",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
        "snippet": "  JSType build() {\n    if (result == null) {\n      result = reduceAlternatesWithoutUnion();\n      if (result == null) {\n        result = new UnionType(registry, getAlternateListCopy());\n      }\n    }\n    return result;\n  }\n",
        "begin_line": 191,
        "end_line": 199,
        "comment": "\n   * Creates a union.\n   * @return A UnionType if it has two or more alternates, the\n   *    only alternate if it has one and otherwise {@code NO_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionTypeBuilder.getAlternateListCopy#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.getAlternateListCopy()",
        "snippet": "  private Collection<JSType> getAlternateListCopy() {\n    // TODO(nicksantos): Until we're at a place where we're no longer\n    // using java's built-in equals to test type equivalence, we need\n    // hash codes to be the same. So the alternates need to be sorted.\n    Collections.sort(alternates, typeSorter);\n\n    return ImmutableList.copyOf(alternates);\n  }\n",
        "begin_line": 208,
        "end_line": 215,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionType.UnionType#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Collection<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  UnionType(JSTypeRegistry registry, Collection<JSType> alternates) {\n    super(registry);\n    this.alternates = alternates;\n    this.hashcode = this.alternates.hashCode();\n  }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "\n   * Creates a union type.\n   *\n   * @param alternates the alternates of the union\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "StringType.StringType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  StringType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "StringType.toString#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getDisplayName();\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "StringType.getDisplayName#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"string\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType) {\n    super(registry);\n    this.properties = Maps.newTreeMap();\n    this.className = className;\n    this.nativeType = nativeType;\n    if (nativeType || implicitPrototype != null) {\n      setImplicitPrototype(implicitPrototype);\n    } else {\n      setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n    }\n  }\n",
        "begin_line": 108,
        "end_line": 120,
        "comment": "\n   * Creates an object type, allowing specification of the implicit prototype\n   * when creating native objects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.getConstructor#387",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return null;\n  }\n",
        "begin_line": 387,
        "end_line": 390,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.getImplicitPrototype#392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototypeFallback;\n  }\n",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.setImplicitPrototype#403",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototypeFallback = implicitPrototype;\n  }\n",
        "begin_line": 403,
        "end_line": 406,
        "comment": "\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.getReferenceName#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (className != null) {\n      return className;\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 408,
        "end_line": 415,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.hasReferenceName#417",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return className != null;\n  }\n",
        "begin_line": 417,
        "end_line": 420,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.isSubtype#422",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n      return true;\n    }\n\n    // Union types\n    if (that instanceof UnionType) {\n      // The static {@code JSType.isSubtype} check already decomposed\n      // union types, so we don't need to check those again.\n      return false;\n    }\n\n    // record types\n    if (that instanceof RecordType) {\n      return RecordType.isSubtype(this, (RecordType) that);\n    }\n\n    // Interfaces\n    // Find all the interfaces implemented by this class and compare each one\n    // to the interface instance.\n    ObjectType thatObj = that.toObjectType();\n    ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();\n    if (thatCtor != null && thatCtor.isInterface()) {\n      Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();\n      for (ObjectType thisInterface : thisInterfaces) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    // other prototype based objects\n    if (that != null) {\n      if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        // If unsure, say 'yes', to avoid spurious warnings.\n        // TODO(user): resolve the prototype chain completely in all cases,\n        // to avoid guessing.\n        return true;\n      }\n      return this.isImplicitPrototype(thatObj);\n    }\n\n    return false;\n  }\n",
        "begin_line": 422,
        "end_line": 466,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.implicitPrototypeChainIsUnknown#468",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeChainIsUnknown()",
        "snippet": "  private boolean implicitPrototypeChainIsUnknown() {\n    ObjectType p = getImplicitPrototype();\n    while (p != null) {\n      if (p.isUnknownType()) {\n        return true;\n      }\n      p = p.getImplicitPrototype();\n    }\n    return false;\n  }\n",
        "begin_line": 468,
        "end_line": 477,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.hasCachedValues#514",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }\n",
        "begin_line": 514,
        "end_line": 517,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.isNativeObjectType#520",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
        "snippet": "  @Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }\n",
        "begin_line": 520,
        "end_line": 523,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.ObjectType#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.defineDeclaredProperty#247",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  public final boolean defineDeclaredProperty(String propertyName,\n      JSType type, boolean inExterns, Node propertyNode) {\n    boolean result = defineProperty(propertyName, type, false, inExterns,\n        propertyNode);\n\n    // All property definitions go through this method\n    // or defineDeclaredProperty. Because the properties defined an an\n    // object can affect subtyping, it's slightly more efficient\n    // to register this after defining the property.\n    registry.registerPropertyOnType(propertyName, this);\n\n    return result;\n  }\n",
        "begin_line": 247,
        "end_line": 259,
        "comment": "\n   * Defines a property whose type is synthesized (i.e. not inferred).\n   * @param propertyName the property's name\n   * @param type the type\n   * @param inExterns {@code true} if this property was defined in an externs\n   *        file. TightenTypes assumes that any function passed to an externs\n   *        property could be called, so setting this incorrectly could result\n   *        in live code being removed.\n   * @param propertyNode the node corresponding to the declaration of property\n   *        which might later be accessed using {@code getPropertyNode}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.isUnknownType#467",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto = getImplicitPrototype();\n      if (implicitProto == null ||\n          implicitProto.isNativeObjectType()) {\n        unknown = false;\n      } else {\n        unknown = implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }\n",
        "begin_line": 467,
        "end_line": 481,
        "comment": "\n   * We treat this as the unknown type if any of its implicit prototype\n   * properties is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.hasCachedValues#493",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
        "snippet": "  public boolean hasCachedValues() {\n    return !unknown;\n  }\n",
        "begin_line": 493,
        "end_line": 495,
        "comment": "\n   * Returns true if any cached valeus have been set for this type.  If true,\n   * then the prototype chain should not be changed, as it might invalidate the\n   * cached values.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.clearCachedValues#501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.clearCachedValues()",
        "snippet": "  public void clearCachedValues() {\n    unknown = true;\n  }\n",
        "begin_line": 501,
        "end_line": 503,
        "comment": "\n   * Clear cached values. Should be called before making changes to a prototype\n   * that may have been changed since creation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.cast#513",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.cast(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public static ObjectType cast(JSType type) {\n    return type == null ? null : type.toObjectType();\n  }\n",
        "begin_line": 513,
        "end_line": 515,
        "comment": "\n   * A null-safe version of JSType#toObjectType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberType.NumberType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberType.toString#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getDisplayName();\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberType.getDisplayName#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"number\";\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NullType.NullType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NullType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NullType.toString#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getDisplayName();\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NullType.getDisplayName#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"null\";\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NoType.NoType#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NoType.isNoType#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
        "snippet": "  @Override\n  public boolean isNoType() {\n    return true;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NoResolvedType.NoResolvedType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.NoResolvedType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoResolvedType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NoObjectType.NoObjectType#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null,\n          registry.createArrowType(null, null),\n          null, null, true, true);\n    getInternalArrowType().returnType = this;\n    this.setInstanceType(this);\n  }\n",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.initializeBuiltInTypes#236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
        "snippet": "  private void initializeBuiltInTypes() {\n    // These locals shouldn't be all caps.\n    BooleanType BOOLEAN_TYPE = new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE = new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE = new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE = new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n\n    VoidType VOID_TYPE = new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE = new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other's results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    ObjectType TOP_LEVEL_PROTOTYPE =\n        new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Object\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\n        \"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE =\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE = new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    NoObjectType NO_RESOLVED_TYPE = new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE =\n      new FunctionType(this, \"Array\", null,\n          createArrowType(createParametersWithVarArgs(ALL_TYPE), null),\n          null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType =\n        ARRAY_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Boolean\", null,\n            createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE),\n            null, null, true, true);\n    ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,\n        BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE =\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE =\n      new FunctionType(this, \"Date\", null,\n          createArrowType(\n              createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n                  UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n              STRING_TYPE),\n          null, null, true, true);\n    ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE,\n        REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE =\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Number\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE =\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE =\n      new FunctionType(this, \"RegExp\", null,\n          createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)),\n          null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType =\n        REGEXP_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"String\", null,\n            createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE),\n            null, null, true, true);\n    ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE =\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN =\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE =\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE =\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -> ?\n    FunctionType U2U_FUNCTION_TYPE =\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -> ? with the NoObject type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE =\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(UNKNOWN_TYPE),\n                UNKNOWN_TYPE),\n            NO_OBJECT_TYPE, null, true, true) {\n          private static final long serialVersionUID = 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it's the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -> NoType\n    FunctionType LEAST_FUNCTION_TYPE =\n        createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the 'this' object in the global scope\n    FunctionType GLOBAL_THIS_CTOR =\n        new FunctionType(this, \"global this\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -> All\n    FunctionType GREATEST_FUNCTION_TYPE =\n      createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n\n    // Register the prototype property. See the comments below in\n    // registerPropertyOnType about the bootstrapping process.\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n  }\n",
        "begin_line": 236,
        "end_line": 549,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)",
        "snippet": "  public JSTypeRegistry(\n      ErrorReporter reporter, boolean tolerateUndefinedValues) {\n    this.reporter = reporter;\n    nativeTypes = new JSType[JSTypeNative.values().length];\n    namesToTypes = new HashMap<String, JSType>();\n    resetForTypeCheck();\n    this.tolerateUndefinedValues = tolerateUndefinedValues;\n  }\n",
        "begin_line": 195,
        "end_line": 202,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.resetForTypeCheck#227",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
        "snippet": "  public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    eachRefTypeIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }\n",
        "begin_line": 227,
        "end_line": 234,
        "comment": "\n   * Reset to run the TypeCheck pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.initializeRegistry#551",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
        "snippet": "  private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }\n",
        "begin_line": 551,
        "end_line": 575,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.register#577",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void register(JSType type) {\n    register(type, type.toString());\n  }\n",
        "begin_line": 577,
        "end_line": 579,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.register#581",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  private void register(JSType type, String name) {\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf('.') > 0) {\n      name = name.substring(0, name.lastIndexOf('.'));\n      namespaces.add(name);\n    }\n  }\n",
        "begin_line": 581,
        "end_line": 589,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.registerNativeType#591",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] = type;\n  }\n",
        "begin_line": 591,
        "end_line": 593,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.registerPropertyOnType#607",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);\n    if (typeSet == null) {\n      typeSet = new UnionTypeBuilder(this);\n      typesIndexedByProperty.put(propertyName, typeSet);\n    }\n\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n\n    // Clear cached values that depend on typesIndexedByProperty.\n    greatestSubtypeByProperty.remove(propertyName);\n  }\n",
        "begin_line": 607,
        "end_line": 619,
        "comment": "\n   * Tells the type system that {@code owner} may have a property named\n   * {@code propertyName}. This allows the registry to keep track of what\n   * types a property is defined upon.\n   *\n   * This is NOT the same as saying that {@code owner} must have a property\n   * named type. ObjectType#hasProperty attempts to minimize false positives\n   * (\"if we're not sure, then don't type check this property\"). The type\n   * registry, on the other hand, should attempt to minimize false negatives\n   * (\"if this property is assigned anywhere in the program, it must\n   * show up in the type registry\").\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.addReferenceTypeIndexedByProperty#621",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.addReferenceTypeIndexedByProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void addReferenceTypeIndexedByProperty(\n      String propertyName, JSType type) {\n    if (type instanceof ObjectType && ((ObjectType) type).hasReferenceName()) {\n      Map<String, ObjectType> typeSet =\n          eachRefTypeIndexedByProperty.get(propertyName);\n      if (typeSet == null) {\n        typeSet = Maps.newHashMap();\n        eachRefTypeIndexedByProperty.put(propertyName, typeSet);\n      }\n      ObjectType objType = (ObjectType) type;\n      typeSet.put(objType.getReferenceName(), objType);\n    } else if (type instanceof NamedType) {\n      addReferenceTypeIndexedByProperty(\n          propertyName, ((NamedType) type).getReferencedType());\n    } else if (type instanceof UnionType) {\n      for (JSType alternate : ((UnionType) type).getAlternates()) {\n        addReferenceTypeIndexedByProperty(propertyName, alternate);\n      }\n    }\n  }\n",
        "begin_line": 621,
        "end_line": 640,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.getNativeType#817",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }\n",
        "begin_line": 817,
        "end_line": 819,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.getNativeObjectType#821",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }\n",
        "begin_line": 821,
        "end_line": 823,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.getNativeFunctionType#825",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }\n",
        "begin_line": 825,
        "end_line": 827,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createOptionalType#898",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }\n",
        "begin_line": 898,
        "end_line": 904,
        "comment": "\n   * Creates a type representing optional values of the given type.\n   * @return the union of the type and the void type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createUnionType#936",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }\n",
        "begin_line": 936,
        "end_line": 942,
        "comment": "\n   * Creates a union type whose variants are the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createArrowType#971",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType createArrowType(Node parametersNode, JSType returnType) {\n    return new ArrowType(this, parametersNode, returnType);\n  }\n",
        "begin_line": 971,
        "end_line": 973,
        "comment": "\n   * Creates an arrow type, an abstract representation of the parameters\n   * and return value of a function.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   * @param returnType the function's return type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createArrowType#981",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node)",
        "snippet": "  ArrowType createArrowType(Node parametersNode) {\n    return new ArrowType(this, parametersNode, null);\n  }\n",
        "begin_line": 981,
        "end_line": 983,
        "comment": "\n   * Creates an arrow type with an unknown return type.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1027",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }\n",
        "begin_line": 1027,
        "end_line": 1031,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createParametersWithVarArgs#1134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }\n",
        "begin_line": 1134,
        "end_line": 1136,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list. The last\n   * parameter type is considered a variable length argument.\n   *\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument.\n   * @return a tree hierarchy representing a typed argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createOptionalParameters#1142",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }\n",
        "begin_line": 1142,
        "end_line": 1146,
        "comment": "\n   * Creates a tree hierarchy representing a typed parameter list in which\n   * every parameter is optional.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createParameters#1158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    int max = parameterTypes.length - 1;\n    for (int i = 0; i <= max; i++) {\n      if (lastVarArgs && i == max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 1158,
        "end_line": 1169,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list.\n   *\n   * @param lastVarArgs whether the last type should considered as a variable\n   *     length argument.\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument is {@code lastVarArgs} is\n   *     {@code true}.\n   * @return a tree hierarchy representing a typed argument list\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }\n",
        "begin_line": 1178,
        "end_line": 1185,
        "comment": "\n   * Creates a function type.\n   * @param returnType the function's return type\n   * @param lastVarArgs whether the last parameter type should be considered as\n   * an extensible var_args parameter\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionType createFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .build();\n  }\n",
        "begin_line": 1221,
        "end_line": 1227,
        "comment": "\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.JSType#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  JSType(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.getNativeType#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n   * Utility method for less verbose code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isNoType#143",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
        "snippet": "  public boolean isNoType() {\n    return false;\n  }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isNoResolvedType#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoResolvedType()",
        "snippet": "  public boolean isNoResolvedType() {\n    return false;\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isNoObjectType#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
        "snippet": "  public boolean isNoObjectType() {\n    return false;\n  }\n",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isEmptyType#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
        "snippet": "  public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n  }\n",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isAllType#232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
        "snippet": "  public boolean isAllType() {\n    return false;\n  }\n",
        "begin_line": 232,
        "end_line": 234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isUnknownType#236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
        "snippet": "  public boolean isUnknownType() {\n    return false;\n  }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isEquivalentTo#322",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isEquivalentTo(JSType jsType) {\n    if (jsType instanceof ProxyObjectType) {\n      return jsType.isEquivalentTo(this);\n    }\n    // Relies on the fact that for the base {@link JSType}, only one\n    // instance of each sub-type will ever be created in a given registry, so\n    // there is no need to verify members. If the object pointers are not\n    // identical, then the type member must be different.\n    return this == jsType;\n  }\n",
        "begin_line": 322,
        "end_line": 331,
        "comment": "\n   * Checks if two types are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.hashCode#344",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 344,
        "end_line": 347,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.toObjectType#468",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toObjectType()",
        "snippet": "  public ObjectType toObjectType() {\n    return this instanceof ObjectType ? (ObjectType) this : null;\n  }\n",
        "begin_line": 468,
        "end_line": 470,
        "comment": "\n   * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n   *\n   * Does not change the underlying JS type. If you want to simulate JS\n   * autoboxing or dereferencing, you should use autoboxesTo() or dereference().\n   * Those methods may change the underlying JS type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isSubtype#888",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isSubtype(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // equality\n    if (thisType.isEquivalentTo(thatType)) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // unions\n    if (thatType instanceof UnionType) {\n      UnionType union = (UnionType)thatType;\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n    }\n    // named types\n    if (thatType instanceof NamedType) {\n      return thisType.isSubtype(((NamedType)thatType).getReferencedType());\n    }\n    return false;\n  }\n",
        "begin_line": 888,
        "end_line": 915,
        "comment": "\n   * A generic implementation meant to be used as a helper for common subtyping\n   * cases.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.InstanceObjectType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean)",
        "snippet": "  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType) {\n    super(registry, null, null, isNativeType);\n    Preconditions.checkNotNull(constructor);\n    this.constructor = constructor;\n  }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.getReferenceName#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    return getConstructor().getReferenceName();\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.hasReferenceName#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return getConstructor().hasReferenceName();\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.getImplicitPrototype#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.getConstructor#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.toString#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    if (constructor.hasReferenceName()) {\n      return constructor.getReferenceName();\n    } else {\n      return super.toString();\n    }\n  }\n",
        "begin_line": 95,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.isNominalType#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
        "snippet": "  @Override\n  public boolean isNominalType() {\n    return hasReferenceName();\n  }\n",
        "begin_line": 144,
        "end_line": 147,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.hashCode#166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    if (hasReferenceName()) {\n      return getReferenceName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }\n",
        "begin_line": 166,
        "end_line": 173,
        "comment": "\n   * If this is equal to a NamedType object, its hashCode must be equal\n   * to the hashCode of the NamedType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.FunctionType#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.ObjectType, java.lang.String, boolean, boolean)",
        "snippet": "  FunctionType(JSTypeRegistry registry, String name, Node source,\n      ArrowType arrowType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);\n    Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());\n    Preconditions.checkNotNull(arrowType);\n    this.source = source;\n    this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;\n    if (isConstructor) {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n    } else {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    this.call = arrowType;\n    this.templateTypeName = templateTypeName;\n  }\n",
        "begin_line": 122,
        "end_line": 143,
        "comment": " Creates an instance for a function that might be a constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.isConstructor#170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
        "snippet": "  @Override\n  public boolean isConstructor() {\n    return kind == Kind.CONSTRUCTOR;\n  }\n",
        "begin_line": 170,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.isFunctionType#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isFunctionType()",
        "snippet": "  @Override\n  public boolean isFunctionType() {\n    return true;\n  }\n",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.getInternalArrowType#250",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInternalArrowType()",
        "snippet": "  ArrowType getInternalArrowType() {\n    return call;\n  }\n",
        "begin_line": 250,
        "end_line": 252,
        "comment": " Gets the internal arrow type. For use by subclasses only. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.getPrototype#258",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
        "snippet": "  public FunctionPrototypeType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototype == null) {\n      setPrototype(new FunctionPrototypeType(registry, this, null));\n    }\n    return prototype;\n  }\n",
        "begin_line": 258,
        "end_line": 264,
        "comment": "\n   * Gets the {@code prototype} property of this function type. This is\n   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    if (prototype == null) {\n      setPrototype(\n          new FunctionPrototypeType(\n              registry, this, baseType, isNativeObjectType()));\n    } else {\n      prototype.setImplicitPrototype(baseType);\n    }\n  }\n",
        "begin_line": 271,
        "end_line": 279,
        "comment": "\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.setPrototype#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.FunctionPrototypeType)",
        "snippet": "  public boolean setPrototype(FunctionPrototypeType prototype) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n\n    boolean replacedPrototype = prototype != null;\n    this.prototype = prototype;\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }\n",
        "begin_line": 286,
        "end_line": 310,
        "comment": "\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.defineProperty#432",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type,\n      boolean inferred, boolean inExterns, Node propertyNode) {\n    if (\"prototype\".equals(name)) {\n      ObjectType objType = type.toObjectType();\n      if (objType != null) {\n        if (objType.isEquivalentTo(prototype)) {\n          return true;\n        }\n        return setPrototype(\n            new FunctionPrototypeType(\n                registry, this, objType, isNativeObjectType()));\n      } else {\n        return false;\n      }\n    }\n    return super.defineProperty(name, type, inferred, inExterns, propertyNode);\n  }\n",
        "begin_line": 432,
        "end_line": 449,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.getSuperClassConstructor#602",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
        "snippet": "  public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType == null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }\n",
        "begin_line": 602,
        "end_line": 609,
        "comment": "\n   * Given a constructor or an interface type, get its superclass constructor\n   * or {@code null} if none exists.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.isEquivalentTo#632",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isEquivalentTo(JSType otherType) {\n    if (!(otherType instanceof FunctionType)) {\n      return false;\n    }\n    FunctionType that = (FunctionType) otherType;\n    if (!that.isFunctionType()) {\n      return false;\n    }\n    if (this.isConstructor()) {\n      if (that.isConstructor()) {\n        return this == that;\n      }\n      return false;\n    }\n    if (this.isInterface()) {\n      if (that.isInterface()) {\n        return this.getReferenceName().equals(that.getReferenceName());\n      }\n      return false;\n    }\n    if (that.isInterface()) {\n      return false;\n    }\n    return this.typeOfThis.isEquivalentTo(that.typeOfThis) &&\n        this.call.isEquivalentTo(that.call);\n  }\n",
        "begin_line": 632,
        "end_line": 658,
        "comment": "\n   * Two function types are equal if their signatures match. Since they don't\n   * have signatures, two interfaces are equal if their names match.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.isSubtype#734",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n      return true;\n    }\n\n    if (that.isFunctionType()) {\n      if (((FunctionType) that).isInterface()) {\n        // Any function can be assigned to an interface function.\n        return true;\n      }\n      if (this.isInterface()) {\n        // An interface function cannot be assigned to anything.\n        return false;\n      }\n      // If functionA is a subtype of functionB, then their \"this\" types\n      // should be contravariant. However, this causes problems because\n      // of the way we enforce overrides. Because function(this:SubFoo)\n      // is not a subtype of function(this:Foo), our override check treats\n      // this as an error. It also screws up out standard method\n      // for aliasing constructors. Let's punt on all this for now.\n      // TODO(nicksantos): fix this.\n      FunctionType other = (FunctionType) that;\n      boolean treatThisTypesAsCovariant =\n        // If either one of these is a ctor, skip 'this' checking.\n        this.isConstructor() || other.isConstructor() ||\n\n        // An interface 'this'-type is non-restrictive.\n        // In practical terms, if C implements I, and I has a method m,\n        // then any m doesn't necessarily have to C#m's 'this'\n        // type doesn't need to match I.\n        (other.typeOfThis.getConstructor() != null &&\n             other.typeOfThis.getConstructor().isInterface()) ||\n\n        // If one of the 'this' types is covariant of the other,\n        // then we'll treat them as covariant (see comment above).\n        other.typeOfThis.isSubtype(this.typeOfThis) ||\n        this.typeOfThis.isSubtype(other.typeOfThis);\n      return treatThisTypesAsCovariant && this.call.isSubtype(other.call);\n    }\n\n    return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n  }\n",
        "begin_line": 734,
        "end_line": 776,
        "comment": "\n   * A function is a subtype of another if their call methods are related via\n   * subtyping and {@code this} is a subtype of {@code that} with regard to\n   * the prototype chain.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.getInstanceType#788",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
        "snippet": "  public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis;\n  }\n",
        "begin_line": 788,
        "end_line": 791,
        "comment": "\n   * Gets the type of instance of this function.\n   * @throws IllegalStateException if this function is not a constructor\n   *         (see {@link #isConstructor()}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.setInstanceType#797",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setInstanceType(ObjectType instanceType) {\n    typeOfThis = instanceType;\n  }\n",
        "begin_line": 797,
        "end_line": 799,
        "comment": "\n   * Sets the instance type. This should only be used for special\n   * native types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.hasInstanceType#804",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
        "snippet": "  public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }\n",
        "begin_line": 804,
        "end_line": 806,
        "comment": "\n   * Returns whether this function type has an instance type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.addSubType#831",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void addSubType(FunctionType subType) {\n    if (subTypes == null) {\n      subTypes = Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }\n",
        "begin_line": 831,
        "end_line": 836,
        "comment": " Adds a type to the list of subtypes for this type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.clearCachedValues#838",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.clearCachedValues()",
        "snippet": "  @Override\n  public void clearCachedValues() {\n    super.clearCachedValues();\n\n    if (subTypes != null) {\n      for (FunctionType subType : subTypes) {\n        subType.clearCachedValues();\n      }\n    }\n\n    if (!isNativeObjectType()) {\n      if (hasInstanceType()) {\n        getInstanceType().clearCachedValues();\n      }\n\n      if (prototype != null) {\n        prototype.clearCachedValues();\n      }\n    }\n  }\n",
        "begin_line": 838,
        "end_line": 857,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.hasCachedValues#868",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return prototype != null || super.hasCachedValues();\n  }\n",
        "begin_line": 868,
        "end_line": 871,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionPrototypeType.FunctionPrototypeType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.FunctionPrototypeType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  FunctionPrototypeType(JSTypeRegistry registry, FunctionType ownerFunction,\n      ObjectType implicitPrototype, boolean isNative) {\n    super(registry, null /* has no class name */, implicitPrototype,\n        isNative);\n    this.ownerFunction = ownerFunction;\n  }\n",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionPrototypeType.FunctionPrototypeType#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.FunctionPrototypeType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  FunctionPrototypeType(JSTypeRegistry registry, FunctionType ownerFunction,\n      ObjectType implicitPrototype) {\n    this(registry, ownerFunction, implicitPrototype, false);\n  }\n",
        "begin_line": 60,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.FunctionParamBuilder#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.addRequiredParams#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }\n",
        "begin_line": 62,
        "end_line": 71,
        "comment": "\n   * Add parameters of the given type to the end of the param list.\n   * @return False if this is called after optional params are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.addOptionalParams#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n   * Add optional parameters of the given type to the end of the param list.\n   * @param types Types for each optional parameter. The builder will make them\n   *     undefineable.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.addVarArgs#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type = registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n   * Add variable arguments to the end of the parameter list.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.newParameter#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node newParameter(JSType type) {\n    Node paramNode = Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }\n",
        "begin_line": 122,
        "end_line": 127,
        "comment": " Add a parameter to the list with the given type.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.build#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
        "snippet": "  public Node build() {\n    return root;\n  }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.hasOptionalOrVarArgs#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
        "snippet": "  private boolean hasOptionalOrVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null &&\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }\n",
        "begin_line": 133,
        "end_line": 137,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.hasVarArgs#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
        "snippet": "  public boolean hasVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null && lastChild.isVarArgs();\n  }\n",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionBuilder.FunctionBuilder#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.FunctionBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionBuilder.withParamsNode#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withParamsNode(com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionBuilder withParamsNode(Node parametersNode) {\n    this.parametersNode = parametersNode;\n    return this;\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n   * Set the parameters of the function type with a specially-formatted node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionBuilder.withReturnType#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withReturnType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public FunctionBuilder withReturnType(JSType returnType) {\n    this.returnType = returnType;\n    return this;\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": " Set the return type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionBuilder.build#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.build()",
        "snippet": "  public FunctionType build() {\n    return new FunctionType(registry, name, sourceNode,\n        new ArrowType(registry, parametersNode, returnType, inferredReturnType),\n        typeOfThis, templateTypeName, isConstructor, isNativeType);\n  }\n",
        "begin_line": 158,
        "end_line": 162,
        "comment": " Construct a new function type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ErrorFunctionType.ErrorFunctionType#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(\n        registry, name, null,\n        registry.createArrowType(\n            registry.createOptionalParameters(\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE)),\n            null),\n        null, null, true, true);\n\n    // NOTE(nicksantos): Errors have the weird behavior in that they can\n    // be called as functions, and they will return instances of themselves.\n    // Error('x') instanceof Error => true\n    //\n    // In user-defined types, we would deal with this case by creating\n    // a NamedType with the name \"Error\" and then resolve it later.\n    //\n    // For native types, we don't really want the native types to\n    // depend on type-resolution. So we just set the return type manually\n    // at the end of construction.\n    //\n    // There's similar logic in JSTypeRegistry for Array and RegExp.\n    getInternalArrowType().returnType = getInstanceType();\n  }\n",
        "begin_line": 50,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "BooleanType.BooleanType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "BooleanType.toString#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getDisplayName();\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "BooleanType.getDisplayName#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"boolean\";\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ArrowType.ArrowType#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "ArrowType.ArrowType#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n\n    this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred = returnTypeInferred;\n  }\n",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "AllType.AllType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "AllType.isAllType#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
        "snippet": "  @Override\n  public boolean isAllType() {\n    return true;\n  }\n",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getLastChild#551",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastChild()",
        "snippet": "  public Node getLastChild() {\n    return last;\n  }\n",
        "begin_line": 551,
        "end_line": 553,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.extractCharno#1172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractCharno(int)",
        "snippet": "  protected static int extractCharno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo & COLUMN_MASK;\n    }\n  }\n",
        "begin_line": 1172,
        "end_line": 1178,
        "comment": "\n   * Extracts the character number and character number from a merged line\n   * char number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setJSType#1932",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void setJSType(JSType jsType) {\n      this.jsType = jsType;\n  }\n",
        "begin_line": 1932,
        "end_line": 1934,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setVarArgs#1986",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
        "snippet": "  public void setVarArgs(boolean varArgs) {\n    putBooleanProp(VAR_ARGS_NAME, varArgs);\n  }\n",
        "begin_line": 1986,
        "end_line": 1988,
        "comment": "\n   * Sets whether this node is a variable length argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setOptionalArg#2004",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
        "snippet": "  public void setOptionalArg(boolean optionalArg) {\n    putBooleanProp(OPT_ARG_NAME, optionalArg);\n  }\n",
        "begin_line": 2004,
        "end_line": 2006,
        "comment": "\n   * Sets whether this node is an optional argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.validAssignmentTarget#901",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.validAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean validAssignmentTarget(Node target) {\n      switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }\n      return false;\n    }\n",
        "begin_line": 901,
        "end_line": 909,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.newNode#1320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1, Node child2) {\n    return new Node(type, child1, child2).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1320,
        "end_line": 1322,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isStatementParent#1671",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementParent(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementParent(Node parent) {\n    // It is not possible to determine definitely if a node is a statement\n    // or not if it is not part of the AST.  A FUNCTION node can be\n    // either part of an expression or a statement.\n    Preconditions.checkState(parent != null);\n    switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1671,
        "end_line": 1684,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getTypeRegistry#1015",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getTypeRegistry()",
        "snippet": "  @Override\n  public JSTypeRegistry getTypeRegistry() {\n    if (typeRegistry == null) {\n      typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);\n    }\n    return typeRegistry;\n  }\n",
        "begin_line": 1015,
        "end_line": 1021,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isGet#1424",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isGet(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isGet(Node n) {\n    return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;\n  }\n",
        "begin_line": 1424,
        "end_line": 1427,
        "comment": "\n   * Is this a GETPROP or GETELEM node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1953
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.PropListItem#354",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.PropListItem.PropListItem(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    PropListItem(int type, Object objectValue, PropListItem next) {\n      this(type, 0, objectValue, next);\n    }\n",
        "begin_line": 354,
        "end_line": 356,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.clonePropsFrom#755",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.clonePropsFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node clonePropsFrom(Node other) {\n    Preconditions.checkState(this.propListHead == null,\n        \"Node has existing properties.\");\n    this.propListHead = other.propListHead;\n    return this;\n  }\n",
        "begin_line": 755,
        "end_line": 760,
        "comment": "\n   * Clone the properties from the provided node without copying\n   * the property object.  The recieving node may not have any\n   * existing properties.\n   * @param other The node to clone properties from.\n   * @return this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.removeProp#762",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(int)",
        "snippet": "  public void removeProp(int propType) {\n    PropListItem result = removeProp(propListHead, propType);\n    if (result != propListHead) {\n      propListHead = result;\n    }\n  }\n",
        "begin_line": 762,
        "end_line": 767,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.removeProp#775",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(com.google.javascript.rhino.Node.PropListItem, int)",
        "snippet": "  private PropListItem removeProp(PropListItem item, int propType) {\n    if (item == null) {\n      return null;\n    } else if (item.type == propType) {\n      return item.next;\n    } else {\n      PropListItem result = removeProp(item.next, propType);\n      if (result != item.next) {\n        return new PropListItem(\n            item.type, item.intValue, item.objectValue, result);\n      } else {\n        return item;\n      }\n    }\n  }\n",
        "begin_line": 775,
        "end_line": 789,
        "comment": "\n   * @param item The item to inspect\n   * @param propType The property to look for\n   * @return The replacement list if the property was removed, or\n   *   'item' otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getProp#791",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getProp(int)",
        "snippet": "  public Object getProp(int propType) {\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return null;\n    }\n    return item.objectValue;\n  }\n",
        "begin_line": 791,
        "end_line": 797,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.putProp#823",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putProp(int, java.lang.Object)",
        "snippet": "  public void putProp(int propType, Object value) {\n    removeProp(propType);\n    if (value != null) {\n      propListHead = new PropListItem(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 823,
        "end_line": 828,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getLineno#858",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLineno()",
        "snippet": "  public int getLineno() {\n    return extractLineno(sourcePosition);\n  }\n",
        "begin_line": 858,
        "end_line": 860,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setCharno#1136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setCharno(int)",
        "snippet": "  public void setCharno(int charno) {\n      sourcePosition = mergeLineCharNo(getLineno(), charno);\n  }\n",
        "begin_line": 1136,
        "end_line": 1138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.extractLineno#1160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractLineno(int)",
        "snippet": "  protected static int extractLineno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo >>> COLUMN_BITS;\n    }\n  }\n",
        "begin_line": 1160,
        "end_line": 1166,
        "comment": "\n   * Extracts the line number and character number from a merged line char\n   * number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getChildCount#1344",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildCount()",
        "snippet": "  public int getChildCount() {\n    int c = 0;\n    for (Node n = first; n != null; n = n.next)\n      c++;\n\n    return c;\n  }\n",
        "begin_line": 1344,
        "end_line": 1350,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getJsDocBuilderForNode#1936",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJsDocBuilderForNode()",
        "snippet": "  public FileLevelJsDocBuilder getJsDocBuilderForNode() {\n    return new FileLevelJsDocBuilder();\n  }\n",
        "begin_line": 1936,
        "end_line": 1938,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setJSDocInfo#1977",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  public void setJSDocInfo(JSDocInfo info) {\n      putProp(JSDOC_INFO_PROP, info);\n  }\n",
        "begin_line": 1977,
        "end_line": 1979,
        "comment": "\n   * Sets the {@link JSDocInfo} attached to this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "ParserRunner.createConfig#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean)",
        "snippet": "  public static Config createConfig(boolean isIdeMode,\n                                    LanguageMode languageMode,\n                                    boolean acceptConstKeyword) {\n    initResourceConfig();\n    return new Config(annotationNames, suppressionNames,\n                      isIdeMode, languageMode,\n                      acceptConstKeyword);\n  }\n",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "ParserRunner.extractList#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.extractList(java.lang.String)",
        "snippet": "  private static Set<String> extractList(String configProp) {\n    String[] names = configProp.split(\",\");\n    Set<String> trimmedNames = Sets.newHashSet();\n    for (String name : names) {\n      trimmedNames.add(name.trim());\n    }\n    return ImmutableSet.copyOf(trimmedNames);\n  }\n",
        "begin_line": 71,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processAstRoot#381",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAstRoot(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot)",
        "snippet": "    @Override\n    Node processAstRoot(AstRoot rootNode) {\n      Node node = newNode(Token.SCRIPT);\n      for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      parseDirectives(node);\n      return node;\n    }\n",
        "begin_line": 381,
        "end_line": 389,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.parseDirectives#400",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.parseDirectives(com.google.javascript.rhino.Node)",
        "snippet": "    private void parseDirectives(Node node) {\n      // Remove all the directives, and encode them in the AST.\n      Set<String> directives = null;\n      while (isDirective(node.getFirstChild())) {\n        String directive = node.removeFirstChild().getFirstChild().getString();\n        if (directives == null) {\n          directives = Sets.newHashSet(directive);\n        } else {\n          directives.add(directive);\n        }\n      }\n\n      if (directives != null) {\n        node.setDirectives(directives);\n      }\n    }\n",
        "begin_line": 400,
        "end_line": 415,
        "comment": "\n     * Parse the directives, encode them in the AST, and remove their nodes.\n     *\n     * For information on ES5 directives, see section 14.1 of\n     * Ecma-262, Edition 5.\n     *\n     * It would be nice if Rhino would eventually take care of this for\n     * us, but right now their directive-processing is a one-off.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.isDirective#417",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isDirective(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n          n.getFirstChild().getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n",
        "begin_line": 417,
        "end_line": 424,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processName#661",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name)",
        "snippet": "    @Override\n    Node processName(Name nameNode) {\n      return processName(nameNode, false);\n    }\n",
        "begin_line": 661,
        "end_line": 664,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processName#666",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name, boolean)",
        "snippet": "    Node processName(Name nameNode, boolean asString) {\n      if (asString) {\n        return newStringNode(Token.STRING, nameNode.getIdentifier());\n      } else {\n        if (isReservedKeyword(nameNode.getIdentifier())) {\n          errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);\n        }\n        return newStringNode(Token.NAME, nameNode.getIdentifier());\n      }\n    }\n",
        "begin_line": 666,
        "end_line": 678,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.isReservedKeyword#683",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isReservedKeyword(java.lang.String)",
        "snippet": "    private boolean isReservedKeyword(String identifier) {\n      return reservedKeywords != null && reservedKeywords.contains(identifier);\n    }\n",
        "begin_line": 683,
        "end_line": 685,
        "comment": "\n     * @return Whether the\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processVariableDeclaration#911",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableDeclaration(com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration)",
        "snippet": "    @Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n      if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.jscomp.mozilla.rhino.Token.CONST) {\n        processIllegalToken(declarationNode);\n      }\n\n      Node node = newNode(Token.VAR);\n      for (VariableInitializer child : declarationNode.getVariables()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }\n",
        "begin_line": 911,
        "end_line": 923,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processVariableInitializer#925",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableInitializer(com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer)",
        "snippet": "    @Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n      Node node = transform(initializerNode.getTarget());\n      if (initializerNode.getInitializer() != null) {\n        node.addChildToBack(transform(initializerNode.getInitializer()));\n        node.setLineno(node.getLineno());\n      }\n      return node;\n    }\n",
        "begin_line": 925,
        "end_line": 933,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.createTemplateNode#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createTemplateNode()",
        "snippet": "  private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode = new Node(Token.SCRIPT);\n    templateNode.putProp(Node.SOURCENAME_PROP, sourceName);\n    return templateNode;\n  }\n",
        "begin_line": 147,
        "end_line": 152,
        "comment": " This reduces the cost of these properties to O(nodes) to O(files).",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.transformTree#154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTree(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter)",
        "snippet": "  public static Node transformTree(AstRoot node,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter) {\n    IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),\n        config, errorReporter);\n    Node irNode = irFactory.transform(node);\n\n    if (node.getComments() != null) {\n      for (Comment comment : node.getComments()) {\n        if (comment.getCommentType() == JSDOC && !comment.isParsed()) {\n          irFactory.handlePossibleFileOverviewJsDoc(comment);\n        }\n      }\n    }\n\n    irFactory.setFileOverviewJsDoc(irNode);\n\n    return irNode;\n  }\n",
        "begin_line": 154,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.setFileOverviewJsDoc#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setFileOverviewJsDoc(com.google.javascript.rhino.Node)",
        "snippet": "  private void setFileOverviewJsDoc(Node irNode) {\n    // Only after we've seen all @fileoverview entries, attach the\n    // last one to the root node, and copy the found license strings\n    // to that node.\n    irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());\n    if (fileOverviewInfo != null) {\n      if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null)) {\n        fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n      }\n      irNode.setJSDocInfo(fileOverviewInfo);\n    }\n  }\n",
        "begin_line": 175,
        "end_line": 187,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.handleJsDoc#223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.handleJsDoc(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private JSDocInfo handleJsDoc(AstNode node) {\n    Comment comment = node.getJsDocNode();\n    if (comment != null) {\n      JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);\n      comment.setParsed(true);\n      if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n        return jsDocParser.retrieveAndResetParsedJSDocInfo();\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 223,
        "end_line": 233,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.transform#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private Node transform(AstNode node) {\n    JSDocInfo jsDocInfo = handleJsDoc(node);\n    Node irNode = justTransform(node);\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 235,
        "end_line": 243,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.position2charno#306",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.position2charno(int)",
        "snippet": "  private int position2charno(int position) {\n    int lineIndex = sourceString.lastIndexOf('\\n', position);\n    if (lineIndex == -1) {\n      return position;\n    } else {\n      // Subtract one for initial position being 0.\n      return position - lineIndex - 1;\n    }\n  }\n",
        "begin_line": 306,
        "end_line": 314,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.justTransform#316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.justTransform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private Node justTransform(AstNode node) {\n    return transformDispatcher.process(node);\n  }\n",
        "begin_line": 316,
        "end_line": 318,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.newNode#1312",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int)",
        "snippet": "  private Node newNode(int type) {\n    return new Node(type).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1312,
        "end_line": 1314,
        "comment": " Simple helper to create nodes and set the initial node properties.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.newStringNode#1332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(int, java.lang.String)",
        "snippet": "  private Node newStringNode(int type, String value) {\n    return Node.newString(type, value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1332,
        "end_line": 1334,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Config.Config#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.Config(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>, boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean)",
        "snippet": "  Config(Set<String> annotationWhitelist, Set<String> suppressionNames,\n      boolean isIdeMode, LanguageMode languageMode,\n      boolean acceptConstKeyword) {\n    this.annotationNames = buildAnnotationNames(annotationWhitelist);\n    this.parseJsDocDocumentation = isIdeMode;\n    this.suppressionNames = suppressionNames;\n    this.isIdeMode = isIdeMode;\n    this.languageMode = languageMode;\n    this.acceptConstKeyword = acceptConstKeyword;\n  }\n",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Config.buildAnnotationNames#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.buildAnnotationNames(java.util.Set<java.lang.String>)",
        "snippet": "  private static Map<String, Annotation> buildAnnotationNames(\n      Set<String> annotationWhitelist) {\n    ImmutableMap.Builder<String, Annotation> annotationBuilder =\n        ImmutableMap.builder();\n    annotationBuilder.putAll(Annotation.recognizedAnnotations);\n    for (String unrecognizedAnnotation : annotationWhitelist) {\n      if (!Annotation.recognizedAnnotations.containsKey(\n              unrecognizedAnnotation)) {\n        annotationBuilder.put(\n            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n      }\n    }\n    return annotationBuilder.build();\n  }\n",
        "begin_line": 88,
        "end_line": 101,
        "comment": "\n   * Create the annotation names from the user-specified\n   * annotation whitelist.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.getCode#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return code;\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n   * Gets all the code in this source file.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrepareAst.PrepareAnnotations#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.PrepareAnnotations(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    PrepareAnnotations(AbstractCompiler compiler) {\n      this.convention = compiler.getCodingConvention();\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrepareAst.shouldTraverse#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.getType() == Token.OBJECTLIT) {\n        normalizeObjectLiteralAnnotations(n);\n      }\n      return true;\n    }\n",
        "begin_line": 140,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrepareAst.PrepareAst#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  PrepareAst(AbstractCompiler compiler) {\n    this(compiler, false);\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrepareAst.PrepareAst#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  PrepareAst(AbstractCompiler compiler, boolean checkOnly) {\n    this.compiler = compiler;\n    this.checkOnly = checkOnly;\n  }\n",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrepareAst.process#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (checkOnly) {\n      normalizeNodeTypes(root);\n    } else {\n      // Don't perform \"PrepareAnnotations\" when doing checks as\n      // they currently aren't valid during sanity checks.  In particular,\n      // they DIRECT_EVAL shouldn't be applied after inlining has been\n      // performed.\n      if (externs != null) {\n        NodeTraversal.traverse(\n            compiler, externs, new PrepareAnnotations(compiler));\n      }\n      if (root != null) {\n        NodeTraversal.traverse(\n            compiler, root, new PrepareAnnotations(compiler));\n      }\n    }\n  }\n",
        "begin_line": 55,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsAst.JsAst#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.JsAst(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public JsAst(SourceFile sourceFile) {\n    this.sourceFile = sourceFile;\n    this.fileName = sourceFile.getName();\n  }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsAst.getAstRoot#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    if (root == null) {\n      createAst(compiler);\n    }\n    return root;\n  }\n",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsAst.createAst#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.createAst(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private void createAst(AbstractCompiler compiler) {\n    try {\n      parse(compiler, sourceFile.getName(), sourceFile.getCode());\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n  }\n",
        "begin_line": 75,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsAst.parse#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.parse(com.google.javascript.jscomp.AbstractCompiler, java.lang.String, java.lang.String)",
        "snippet": "  private void parse(AbstractCompiler compiler, String sourceName,\n      String sourceStr) {\n    try {\n      logger_.fine(\"Parsing: \" + sourceName);\n      root = ParserRunner.parse(sourceName, sourceStr,\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n    } catch (IOException e) {\n      compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n    }\n\n    if (root == null || compiler.hasHaltingErrors()) {\n      // There was a parse error or IOException, so use a dummy block.\n      root = new Node(Token.BLOCK);\n    } else {\n      compiler.prepareAst(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n  }\n",
        "begin_line": 84,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSSourceFile.getCode#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.getCode()",
        "snippet": "  @Override\n  public String getCode() throws IOException {\n    return referenced.getCode();\n  }\n",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSModule.add#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.JSSourceFile)",
        "snippet": "  public void add(JSSourceFile file) {\n    add(new CompilerInput(file));\n  }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": " Adds a source file input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroup.getTypes#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.getTypes()",
        "snippet": "  Collection<DiagnosticType> getTypes() {\n    return types;\n  }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\n   * Returns an iterator over all the types in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(com.google.javascript.jscomp.WarningsGuard...)",
        "snippet": "  public ComposeWarningsGuard(WarningsGuard... guards) {\n    this(Lists.newArrayList(guards));\n  }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "ComposeWarningsGuard.addGuard#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  void addGuard(WarningsGuard guard) {\n    if (guard instanceof ComposeWarningsGuard) {\n      // Reverse the guards, so that they have the same order in the result.\n      addGuards(((ComposeWarningsGuard) guard).guards.descendingSet());\n    } else {\n      numberOfAdds++;\n      orderOfAddition.put(guard, numberOfAdds);\n      guards.remove(guard);\n      guards.add(guard);\n    }\n  }\n",
        "begin_line": 72,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.setWarningLevel#921",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n  }\n",
        "begin_line": 921,
        "end_line": 923,
        "comment": "\n   * Configure the given type of warning to the given level.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.addWarningsGuard#932",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.addWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  public void addWarningsGuard(WarningsGuard guard) {\n    if (warningsGuard == null) {\n      warningsGuard = new ComposeWarningsGuard(guard);\n    } else {\n      warningsGuard.addGuard(guard);\n    }\n  }\n",
        "begin_line": 932,
        "end_line": 938,
        "comment": "\n   * Add a guard to the set of warnings guards.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.setCodingConvention#1054",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public void setCodingConvention(CodingConvention codingConvention) {\n    this.codingConvention = codingConvention;\n  }\n",
        "begin_line": 1054,
        "end_line": 1056,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.setLanguageIn#1125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode)",
        "snippet": "  public void setLanguageIn(LanguageMode languageIn) {\n    this.languageIn = languageIn;\n    this.languageOut = languageIn;\n  }\n",
        "begin_line": 1125,
        "end_line": 1128,
        "comment": "\n   * Sets how goog.tweak calls are processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerInput.CompilerInput#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.JSSourceFile)",
        "snippet": "  public CompilerInput(JSSourceFile file) {\n    this(file, false);\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerInput.CompilerInput#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.JSSourceFile, boolean)",
        "snippet": "  public CompilerInput(JSSourceFile file, boolean isExtern) {\n    this.ast = new JsAst(file);\n    this.name = file.getName();\n    this.isExtern = isExtern;\n  }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.init#287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(java.util.List<com.google.javascript.jscomp.JSSourceFile>, java.util.List<com.google.javascript.jscomp.JSSourceFile>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options) {\n    JSModule module = new JSModule(\"[singleton]\");\n    for (JSSourceFile input : inputs) {\n      module.add(input);\n    }\n\n    initModules(externs, Lists.newArrayList(module), options);\n  }\n",
        "begin_line": 287,
        "end_line": 295,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.makeCompilerInput#354",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.makeCompilerInput(java.util.List<com.google.javascript.jscomp.JSSourceFile>, boolean)",
        "snippet": "  private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    for (JSSourceFile file : files) {\n      inputs.add(new CompilerInput(file, isExtern));\n    }\n    return inputs;\n  }\n",
        "begin_line": 354,
        "end_line": 361,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.initInputsByNameMap#439",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initInputsByNameMap()",
        "snippet": "  void initInputsByNameMap() {\n    inputsByName = new HashMap<String, CompilerInput>();\n    for (CompilerInput input : externs) {\n      String name = input.getName();\n      if (!inputsByName.containsKey(name)) {\n        inputsByName.put(name, input);\n      } else {\n        report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n      }\n    }\n    for (CompilerInput input : inputs) {\n      String name = input.getName();\n      if (!inputsByName.containsKey(name)) {\n        inputsByName.put(name, input);\n      } else {\n        report(JSError.make(DUPLICATE_INPUT, name));\n      }\n    }\n  }\n",
        "begin_line": 439,
        "end_line": 457,
        "comment": "\n   * Creates a map to make looking up an input by name fast. Also checks for\n   * duplicate inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getDefaultErrorReporter#1246",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDefaultErrorReporter()",
        "snippet": "  @Override\n  ErrorReporter getDefaultErrorReporter() {\n    return defaultErrorReporter;\n  }\n",
        "begin_line": 1246,
        "end_line": 1249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.prepareAst#1589",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.prepareAst(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void prepareAst(Node root) {\n    Tracer tracer = newTracer(\"prepareAst\");\n    CompilerPass pass = new PrepareAst(this);\n    pass.process(null, root);\n    stopTracer(tracer, \"prepareAst\");\n  }\n",
        "begin_line": 1589,
        "end_line": 1595,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.acceptConstKeyword#1656",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptConstKeyword()",
        "snippet": "  @Override\n  public boolean acceptConstKeyword() {\n    return options.acceptConstKeyword;\n  }\n",
        "begin_line": 1656,
        "end_line": 1659,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.createDelegateSuffix#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix(java.lang.String)",
        "snippet": "  public static String createDelegateSuffix(String suffix) {\n    return \"(\" + suffix + \")\";\n  }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "\n   * Creates a suffix for a proxy delegate.\n   * @see #getNormalizedReferenceName\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ScriptRuntime.getMessage0#420",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage0(java.lang.String)",
        "snippet": "    public static String getMessage0(String messageId)\n    {\n        return getMessage(messageId, null);\n    }\n",
        "begin_line": 420,
        "end_line": 423,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ScriptRuntime.getMessage#456",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage(java.lang.String, java.lang.Object[])",
        "snippet": "    public static String getMessage(String messageId, Object[] arguments)\n    {\n        final String defaultResource\n            = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n\n        Context cx = Context.getCurrentContext();\n        Locale locale = cx != null ? cx.getLocale() : Locale.getDefault();\n\n        // ResourceBundle does cacheing.\n        ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);\n\n        String formatString;\n        try {\n            formatString = rb.getString(messageId);\n        } catch (java.util.MissingResourceException mre) {\n            throw new RuntimeException\n                (\"no message resource found for message property \"+ messageId);\n        }\n\n        /*\n         * It's OK to format the string, even if 'arguments' is null;\n         * we need to format it anyway, to make double ''s collapse to\n         * single 's.\n         */\n        // TODO: MessageFormat is not available on pJava\n        MessageFormat formatter = new MessageFormat(formatString);\n        return formatter.format(arguments);\n    }\n",
        "begin_line": 456,
        "end_line": 483,
        "comment": " OPT there's a noticable delay for the first error!  Maybe it'd\n     * make sense to use a ListResourceBundle instead of a properties\n     * file to avoid (synchronized) text parsing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.StringNode#276",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String)",
        "snippet": "    StringNode(int type, String str) {\n      super(type);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 276,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getString#296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.getString()",
        "snippet": "    @Override\n    public String getString() {\n      return this.str;\n    }\n",
        "begin_line": 296,
        "end_line": 299,
        "comment": "\n     * returns the string content.\n     * @return non null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.PropListItem#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.PropListItem.PropListItem(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    PropListItem(int type, int intValue, PropListItem next) {\n      this(type, intValue, null, next);\n    }\n",
        "begin_line": 350,
        "end_line": 352,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.PropListItem#358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.PropListItem.PropListItem(int, int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    PropListItem(\n        int type, int intValue, Object objectValue, PropListItem next) {\n      this.type = type;\n      this.intValue = intValue;\n      this.objectValue = objectValue;\n      this.next = next;\n    }\n",
        "begin_line": 358,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.Node#368",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int)",
        "snippet": "  public Node(int nodeType) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 368,
        "end_line": 372,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.Node#388",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node left, Node right) {\n    Preconditions.checkArgument(left.parent == null,\n        \"first new child has existing parent\");\n    Preconditions.checkArgument(left.next == null,\n        \"first new child has existing sibling\");\n    Preconditions.checkArgument(right.parent == null,\n        \"second new child has existing parent\");\n    Preconditions.checkArgument(right.next == null,\n        \"second new child has existing sibling\");\n    type = nodeType;\n    parent = null;\n    first = left;\n    last = right;\n    left.next = right;\n    left.parent = this;\n    right.next = null;\n    right.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 388,
        "end_line": 406,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.newString#523",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
        "snippet": "  public static Node newString(int type, String str) {\n    return new StringNode(type, str);\n  }\n",
        "begin_line": 523,
        "end_line": 525,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getType#535",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getType()",
        "snippet": "  public int getType() {\n    return type;\n  }\n",
        "begin_line": 535,
        "end_line": 537,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getFirstChild#547",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getFirstChild()",
        "snippet": "  public Node getFirstChild() {\n    return first;\n  }\n",
        "begin_line": 547,
        "end_line": 549,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getNext#555",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNext()",
        "snippet": "  public Node getNext() {\n    return next;\n  }\n",
        "begin_line": 555,
        "end_line": 557,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.addChildToBack#601",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildToBack(Node child) {\n    Preconditions.checkArgument(child.parent == null);\n    Preconditions.checkArgument(child.next == null);\n    child.parent = this;\n    child.next = null;\n    if (last == null) {\n      first = last = child;\n      return;\n    }\n    last.next = child;\n    last = child;\n  }\n",
        "begin_line": 601,
        "end_line": 612,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.lookupProperty#739",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.lookupProperty(int)",
        "snippet": "  @VisibleForTesting\n  PropListItem lookupProperty(int propType) {\n    PropListItem x = propListHead;\n    while (x != null && propType != x.type) {\n      x = x.next;\n    }\n    return x;\n  }\n",
        "begin_line": 739,
        "end_line": 746,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.putBooleanProp#830",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
        "snippet": "  public void putBooleanProp(int propType, boolean value) {\n    putIntProp(propType, value ? 1 : 0);\n  }\n",
        "begin_line": 830,
        "end_line": 832,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.putIntProp#834",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
        "snippet": "  public void putIntProp(int propType, int value) {\n    removeProp(propType);\n    if (value != 0) {\n      propListHead = new PropListItem(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 834,
        "end_line": 839,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getCharno#862",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getCharno()",
        "snippet": "  public int getCharno() {\n    return extractCharno(sourcePosition);\n  }\n",
        "begin_line": 862,
        "end_line": 864,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setLineno#1128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLineno(int)",
        "snippet": "  public void setLineno(int lineno) {\n      int charno = getCharno();\n      if (charno == -1) {\n        charno = 0;\n      }\n      sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 1128,
        "end_line": 1134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.mergeLineCharNo#1146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.mergeLineCharNo(int, int)",
        "snippet": "  protected static int mergeLineCharNo(int lineno, int charno) {\n    if (lineno < 0 || charno < 0) {\n      return -1;\n    } else if ((charno & ~COLUMN_MASK) != 0) {\n      return lineno << COLUMN_BITS | COLUMN_MASK;\n    } else {\n      return lineno << COLUMN_BITS | (charno & COLUMN_MASK);\n    }\n  }\n",
        "begin_line": 1146,
        "end_line": 1154,
        "comment": "\n   * Merges the line number and character number in one integer. The Character\n   * number takes the first 12 bits and the line number takes the rest. If\n   * the character number is greater than <code>2<sup>12</sup>-1</code> it is\n   * adjusted to <code>2<sup>12</sup>-1</code>.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getParent#1266",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getParent()",
        "snippet": "  public Node getParent() {\n    return parent;\n  }\n",
        "begin_line": 1266,
        "end_line": 1268,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getJSDocInfo#1970",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSDocInfo()",
        "snippet": "  public JSDocInfo getJSDocInfo() {\n    return (JSDocInfo) getProp(JSDOC_INFO_PROP);\n  }\n",
        "begin_line": 1970,
        "end_line": 1972,
        "comment": "\n   * Get the {@link JSDocInfo} attached to this node.\n   * @return the information or {@code null} if no JSDoc is attached to this\n   * node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setIsSyntheticBlock#2021",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setIsSyntheticBlock(boolean)",
        "snippet": "  public void setIsSyntheticBlock(boolean val) {\n    putBooleanProp(SYNTHETIC_BLOCK_PROP, val);\n  }\n",
        "begin_line": 2021,
        "end_line": 2023,
        "comment": "\n   * Sets whether this is a synthetic block that should not be considered\n   * a real source block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Context.getCurrentContext#399",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "class_name": "com.google.javascript.rhino.Context",
        "signature": "com.google.javascript.rhino.Context.getCurrentContext()",
        "snippet": "    public static Context getCurrentContext() {\n        return threadContexts.get();\n    }\n",
        "begin_line": 399,
        "end_line": 401,
        "comment": "\n     * Get the current Context.\n     *\n     * The current Context is per-thread; this method looks up\n     * the Context associated with the current thread. <p>\n     *\n     * @return the Context associated with the current thread, or\n     *         null if no context is associated with the current\n     *         thread.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "WarningsGuard.Priority#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.Priority.Priority(int)",
        "snippet": "    Priority(int value) {\n      this.value = value;\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "WarningsGuard.getPriority#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.getPriority()",
        "snippet": "  protected int getPriority() {\n    return Priority.DEFAULT.value;\n  }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n   * The priority in which warnings guards are applied. Lower means the\n   * guard will be applied sooner. Expressed on a scale of 1 to 100.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tracer.isInitialized#744",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.ThreadTrace.isInitialized()",
        "snippet": "    boolean isInitialized() {\n      return isInitialized;\n    }\n",
        "begin_line": 744,
        "end_line": 746,
        "comment": " Is initialized? ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tracer.currentTimeMillis#222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Anonymous-d2860efe-adf9-493c-8493-ff234a1936e6.currentTimeMillis()",
        "snippet": "    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tracer.Tracer#234",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Tracer(java.lang.String, java.lang.String)",
        "snippet": "  Tracer(@Nullable String type, @Nullable String comment) {\n    this.type = type;\n    this.comment = comment == null ? \"\" : comment;\n    startTimeMs = clock.currentTimeMillis();\n    startThread = Thread.currentThread();\n    if (!extraTracingStatistics.isEmpty()) {\n      int size = extraTracingStatistics.size();\n      extraTracingValues = new long[size];\n      int i = 0;\n      for (TracingStatistic tracingStatistic : extraTracingStatistics) {\n        extraTracingValues[i] = tracingStatistic.start(startThread);\n        i++;\n      }\n    }\n\n    ThreadTrace trace = getThreadTrace();\n\n    // Do nothing if the current thread trace wasn't initialized.\n    if (!trace.isInitialized()) {\n      return;\n    }\n\n    // Check if we are creating too many Tracers.\n    if (trace.events.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Giant thread trace. Too many Tracers created. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateEvents();\n    }\n\n    // Check if we forgot to close the Tracers.\n    if (trace.outstandingEvents.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Too many outstanding Tracers. Tracer.stop() is missing \"\n                    + \"or Tracer.stop() is not wrapped in a \"\n                    + \"try/finally block. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateOutstandingEvents();\n    }\n\n    trace.startEvent(this);\n  }\n",
        "begin_line": 234,
        "end_line": 277,
        "comment": "\n   * Create and start a tracer.\n   * Both type and comment may be null. See class comment for usage.\n   *\n   * @param type The type for totalling\n   * @param comment Comment about this tracer\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tracer.stop#406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop(int)",
        "snippet": "  long stop(int silence_threshold) {\n    Preconditions.checkState(Thread.currentThread() == startThread);\n\n    ThreadTrace trace = getThreadTrace();\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    stopTimeMs = clock.currentTimeMillis();\n    if (extraTracingValues != null) {\n      // We use extraTracingValues.length rather than\n      // extraTracingStatistics.size() because a new statistic may\n      // have been added\n      for (int i = 0; i < extraTracingValues.length; i++) {\n        long value = extraTracingStatistics.get(i).stop(startThread);\n        extraTracingValues[i] = value - extraTracingValues[i];\n      }\n    }\n\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    trace.endEvent(this, silence_threshold);\n    return stopTimeMs - startTimeMs;\n  }\n",
        "begin_line": 406,
        "end_line": 433,
        "comment": "\n   * Stop the trace.\n   * This may only be done once and must be done from the same thread\n   * that started it.\n   * @param silence_threshold Traces for time less than silence_threshold\n   * ms will be left out of the trace report. A value of -1 indicates\n   * that the current ThreadTrace silence_threshold should be used.\n   * @return The time that this trace actually ran\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tracer.stop#439",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop()",
        "snippet": "  long stop() {\n    return stop(-1);\n  }\n",
        "begin_line": 439,
        "end_line": 441,
        "comment": " Stop the trace using the default silence_threshold\n   *\n   * @return  The time that this trace actually ran.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tracer.getThreadTrace#957",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.getThreadTrace()",
        "snippet": "  static ThreadTrace getThreadTrace() {\n    ThreadTrace t = traces.get();\n    if (t == null) {\n      t = new ThreadTrace();\n      t.prettyPrint = defaultPrettyPrint;\n      traces.set(t);\n    }\n    return t;\n  }\n",
        "begin_line": 957,
        "end_line": 965,
        "comment": "\n   * Get the ThreadTrace for the current thread, creating one if necessary.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SyntacticScopeCreator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = new DefaultRedeclarationHandler();\n  }\n",
        "begin_line": 55,
        "end_line": 58,
        "comment": "\n   * Creates a ScopeCreator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "SuppressDocWarningsGuard.SuppressDocWarningsGuard#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.SuppressDocWarningsGuard(java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup>)",
        "snippet": "  SuppressDocWarningsGuard(Map<String, DiagnosticGroup> suppressableGroups) {\n    for (Map.Entry<String, DiagnosticGroup> entry :\n             suppressableGroups.entrySet()) {\n      suppressors.put(\n          entry.getKey(),\n          new DiagnosticGroupWarningsGuard(\n              entry.getValue(),\n              CheckLevel.OFF));\n    }\n  }\n",
        "begin_line": 38,
        "end_line": 47,
        "comment": "\n   * The suppressable groups, indexed by name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "SuppressDocWarningsGuard.getPriority#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.getPriority()",
        "snippet": "  @Override\n  public int getPriority() {\n    // Happens after path-based filtering, but before other times\n    // of filtering.\n    return WarningsGuard.Priority.SUPPRESS_DOC.value;\n  }\n",
        "begin_line": 88,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.Preloaded#296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String code) {\n      this(fileName, fileName, code);\n    }\n",
        "begin_line": 296,
        "end_line": 298,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.Preloaded#300",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String originalPath, String code) {\n      super(fileName);\n      super.setOriginalPath(originalPath);\n      super.setCode(code);\n    }\n",
        "begin_line": 300,
        "end_line": 304,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.SourceFile#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.SourceFile(java.lang.String)",
        "snippet": "  SourceFile(String fileName) {\n    this.fileName = fileName;\n    // Starting point: offset 0 is at line 1.\n    this.lastOffset = 0;\n    this.lastLine = 1;\n  }\n",
        "begin_line": 79,
        "end_line": 84,
        "comment": "\n   * Construct a new abstract source file.\n   *\n   * @param fileName The file name of the source file. It does not necessarily\n   *     need to correspond to a real path. But it should be unique. Will\n   *     appear in warning messages emitted by the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.setCode#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setCode(java.lang.String)",
        "snippet": "  private void setCode(String sourceCode) {\n    code = sourceCode;\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.setOriginalPath#117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setOriginalPath(java.lang.String)",
        "snippet": "  public void setOriginalPath(String originalPath) {\n    this.originalPath = originalPath;\n  }\n",
        "begin_line": 117,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.getName#135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getName()",
        "snippet": "  public String getName() {\n    return fileName;\n  }\n",
        "begin_line": 135,
        "end_line": 137,
        "comment": " Returns a unique name for the source file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.fromCode#256",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static SourceFile fromCode(String fileName, String code) {\n    return new Preloaded(fileName, code);\n  }\n",
        "begin_line": 256,
        "end_line": 258,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.OldRhinoErrorReporter#143",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.OldRhinoErrorReporter.OldRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private OldRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.NewRhinoErrorReporter#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.NewRhinoErrorReporter.NewRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private NewRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 157,
        "end_line": 159,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.replacePlaceHolders#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.replacePlaceHolders(java.lang.String)",
        "snippet": "  private Pattern replacePlaceHolders(String s) {\n    s = Pattern.quote(s);\n    return Pattern.compile(s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\"));\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": "\n   * For each message such as \"Not a good use of {0}\", replace the place\n   * holder {0} with a wild card that matches all possible strings.\n   * Also put the any non-place-holder in quotes for regex matching later.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.RhinoErrorReporter#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private RhinoErrorReporter(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    typeMap = ImmutableMap.of(\n\n        // Extra @fileoverview\n        replacePlaceHolders(\n            ScriptRuntime.getMessage0(\"msg.jsdoc.fileoverview.extra\")),\n        EXTRA_FILEOVERVIEW,\n\n        // Trailing comma\n        replacePlaceHolders(\n            com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n              .getMessage0(\"msg.extra.trailing.comma\")),\n        TRAILING_COMMA,\n\n        // Duplicate parameter\n        replacePlaceHolders(\n            com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n              .getMessage0(\"msg.dup.parms\")),\n        DUPLICATE_PARAM,\n\n        // Unknown @annotations.\n        replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n        BAD_JSDOC_ANNOTATION,\n\n        // Type annotation errors.\n        Pattern.compile(\"^Bad type annotation.*\"),\n        TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 73,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.forNewRhino#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static com.google.javascript.jscomp.mozilla.rhino.ErrorReporter\n      forNewRhino(AbstractCompiler compiler) {\n    return new NewRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.forOldRhino#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n    return new OldRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProcessTweaks.TweakFunction#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String)",
        "snippet": "    TweakFunction(String name) {\n      this(name, null, Token.ERROR, Token.ERROR, null);\n    }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProcessTweaks.TweakFunction#126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA) {\n      this(name, expectedTypeName, validNodeTypeA, Token.ERROR, null);\n    }\n",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProcessTweaks.TweakFunction#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB) {\n      this(name, expectedTypeName, validNodeTypeA, validNodeTypeB, null);\n    }\n",
        "begin_line": 131,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProcessTweaks.TweakFunction#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, TweakFunction registerFunction) {\n      this(name, null, Token.ERROR, Token.ERROR, registerFunction);\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProcessTweaks.TweakFunction#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB,\n        TweakFunction registerFunction) {\n      this.name = name;\n      this.expectedTypeName = expectedTypeName;\n      this.validNodeTypeA = validNodeTypeA;\n      this.validNodeTypeB = validNodeTypeB;\n      this.registerFunction = registerFunction;\n    }\n",
        "begin_line": 140,
        "end_line": 148,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProcessTweaks.getName#163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.getName()",
        "snippet": "    String getName() {\n      return name;\n    }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "PassFactory.PassFactory#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.PassFactory(java.lang.String, boolean)",
        "snippet": "  protected PassFactory(String name, boolean isOneTimePass) {\n    this.name = name;\n    this.isOneTimePass = isOneTimePass;\n  }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n   * @param name The name of the pass that this factory creates.\n   * @param isOneTimePass If true, the pass produced by this factory can\n   *     only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.NodeTraversal#195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb) {\n    this(compiler, cb, new SyntacticScopeCreator(compiler));\n  }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "\n   * Creates a node traversal using the specified callback interface.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.traverse#244",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 244,
        "end_line": 254,
        "comment": "\n   * Traverses a parse tree recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.traverse#419",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }\n",
        "begin_line": 419,
        "end_line": 423,
        "comment": "\n   * Traverses a node recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.getSourceName#613",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSourceName(Node n) {\n    String name = (String) n.getProp(Node.SOURCENAME_PROP);\n    return name == null ? \"\" : name;\n  }\n",
        "begin_line": 613,
        "end_line": 616,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider, com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    Preconditions.checkNotNull(source);\n    this.excerpt = excerpt;\n  }\n",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSSourceFile.fromCode#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static JSSourceFile fromCode(String fileName, String code) {\n    return new JSSourceFile(SourceFile.fromCode(fileName, code));\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSSourceFile.JSSourceFile#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.JSSourceFile(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  private JSSourceFile(SourceFile referenced) {\n    super(referenced.getName());\n    this.referenced = referenced;\n  }\n",
        "begin_line": 71,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSModule.JSModule#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.JSModule(java.lang.String)",
        "snippet": "  public JSModule(String name) {\n    this.name = name;\n    this.depth = -1;\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\n   * Creates an instance.\n   *\n   * @param name A unique name for the module\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSModule.add#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  public void add(CompilerInput input) {\n    inputs.add(input);\n    input.setModule(this);\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": " Adds a source code input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSModule.getInputs#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getInputs()",
        "snippet": "  public List<CompilerInput> getInputs() {\n    return inputs;\n  }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\n   * Gets this module's list of source code inputs.\n   *\n   * @return A list that may be empty but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ErrorFormat.toFormatter#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ErrorFormat.java",
        "class_name": "com.google.javascript.jscomp.ErrorFormat",
        "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
        "snippet": "    @Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter = new LightweightMessageFormatter(\n          source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }\n",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticType.error#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.error(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType error(String name, String descriptionFormat) {\n    return make(name, CheckLevel.ERROR, descriptionFormat);\n  }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.ERROR\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticType.warning#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.warning(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType warning(String name, String descriptionFormat) {\n    return make(name, CheckLevel.WARNING, descriptionFormat);\n  }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.WARNING\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticType.disabled#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.disabled(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType disabled(String name,\n      String descriptionFormat) {\n    return make(name, CheckLevel.OFF, descriptionFormat);\n  }\n",
        "begin_line": 71,
        "end_line": 74,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.OFF\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticType.make#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.make(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
        "snippet": "  public static DiagnosticType make(String name, CheckLevel level,\n                                    String descriptionFormat) {\n    return\n        new DiagnosticType(name, level, new MessageFormat(descriptionFormat));\n  }\n",
        "begin_line": 84,
        "end_line": 88,
        "comment": "\n   * Create a DiagnosticType at a given CheckLevel.\n   *\n   * @param name An identifier\n   * @param level Either CheckLevel.ERROR or CheckLevel.WARNING\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticType.DiagnosticType#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.DiagnosticType(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.text.MessageFormat)",
        "snippet": "  private DiagnosticType(String key, CheckLevel level, MessageFormat format) {\n    this.key = key;\n    this.defaultLevel = level;\n    this.format = format;\n\n    this.level = this.defaultLevel;\n  }\n",
        "begin_line": 93,
        "end_line": 99,
        "comment": "\n   * Create a DiagnosticType. Private to force use of static factory methods.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroups.DiagnosticGroups#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DiagnosticGroups()",
        "snippet": "  public DiagnosticGroups() {}\n",
        "begin_line": 32,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroups.registerGroup#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup group) {\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroups.getRegisteredGroups#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.getRegisteredGroups()",
        "snippet": "  protected Map<String, DiagnosticGroup> getRegisteredGroups() {\n    return ImmutableMap.copyOf(groupsByName);\n  }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": " Get the registered diagnostic groups, indexed by name. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard#30",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public DiagnosticGroupWarningsGuard(\n      DiagnosticGroup group, CheckLevel level) {\n    this.group = group;\n    this.level = level;\n  }\n",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  public DiagnosticGroup(DiagnosticType ...types) {\n    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  public DiagnosticGroup(DiagnosticGroup ...groups) {\n    Set<DiagnosticType> set = Sets.newHashSet();\n\n    for (DiagnosticGroup group : groups) {\n      set.addAll(group.types);\n    }\n\n    this.types = ImmutableSet.copyOf(set);\n  }\n",
        "begin_line": 67,
        "end_line": 75,
        "comment": "\n   * Create a composite group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroup.matches#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public boolean matches(DiagnosticType type) {\n    return types.contains(type);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n   * Returns whether the given type matches a type in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ComposeWarningsGuard.compare#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.Anonymous-68c25ca4-005e-48d4-8533-72d722487dc8.compare(com.google.javascript.jscomp.WarningsGuard, com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "    @Override\n    public int compare(WarningsGuard a, WarningsGuard b) {\n      int priorityDiff = a.getPriority() - b.getPriority();\n      if (priorityDiff != 0) {\n        return priorityDiff;\n      }\n\n      // If the warnings guards have the same priority, the one that\n      // was added last wins.\n      return orderOfAddition.get(b).intValue() -\n          orderOfAddition.get(a).intValue();\n    }\n",
        "begin_line": 46,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(java.util.List<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  public ComposeWarningsGuard(List<WarningsGuard> guards) {\n    addGuards(guards);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "ComposeWarningsGuard.addGuards#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuards(java.lang.Iterable<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  private void addGuards(Iterable<WarningsGuard> guards) {\n    for (WarningsGuard guard : guards) {\n      addGuard(guard);\n    }\n  }\n",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.isOn#1205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TracerMode.isOn()",
        "snippet": "    boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 1205,
        "end_line": 1207,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.CompilerOptions#650",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.CompilerOptions()",
        "snippet": "  public CompilerOptions() {\n    // Accepted language\n    languageIn = LanguageMode.ECMASCRIPT3;\n\n    // Language variation\n    acceptConstKeyword = false;\n\n    // Checks\n    skipAllPasses = false;\n    nameAnonymousFunctionsOnly = false;\n    devMode = DevMode.OFF;\n    checkSymbols = false;\n    checkShadowVars = CheckLevel.OFF;\n    aggressiveVarCheck = CheckLevel.OFF;\n    checkFunctions = CheckLevel.OFF;\n    checkMethods = CheckLevel.OFF;\n    checkDuplicateMessages = false;\n    allowLegacyJsMessages = false;\n    strictMessageReplacement = false;\n    checkSuspiciousCode = false;\n    checkControlStructures = false;\n    checkUndefinedProperties = CheckLevel.OFF;\n    checkUnusedPropertiesEarly = false;\n    checkTypes = false;\n    tightenTypes = false;\n    inferTypesInGlobalScope = false;\n    checkTypedPropertyCalls = false;\n    reportMissingOverride = CheckLevel.OFF;\n    reportUnknownTypes = CheckLevel.OFF;\n    checkRequires = CheckLevel.OFF;\n    checkProvides = CheckLevel.OFF;\n    checkGlobalNamesLevel = CheckLevel.OFF;\n    brokenClosureRequiresLevel = CheckLevel.ERROR;\n    checkGlobalThisLevel = CheckLevel.OFF;\n    checkUnreachableCode = CheckLevel.OFF;\n    checkMissingReturn = CheckLevel.OFF;\n    checkMissingGetCssNameLevel = CheckLevel.OFF;\n    checkMissingGetCssNameBlacklist = null;\n    checkEs5Strict = false;\n    checkCaja = false;\n    computeFunctionSideEffects = false;\n    chainCalls = false;\n\n    // Optimizations\n    foldConstants = false;\n    coalesceVariableNames = false;\n    deadAssignmentElimination = false;\n    inlineConstantVars = false;\n    inlineFunctions = false;\n    inlineLocalFunctions = false;\n    crossModuleCodeMotion = false;\n    crossModuleMethodMotion = false;\n    inlineGetters = false;\n    inlineVariables = false;\n    inlineLocalVariables = false;\n    smartNameRemoval = false;\n    removeDeadCode = false;\n    extractPrototypeMemberDeclarations = false;\n    removeUnusedPrototypeProperties = false;\n    removeUnusedPrototypePropertiesInExterns = false;\n    removeUnusedVars = false;\n    removeUnusedLocalVars = false;\n    aliasExternals = false;\n    collapseVariableDeclarations = false;\n    groupVariableDeclarations = false;\n    collapseAnonymousFunctions = false;\n    aliasableStrings = Collections.emptySet();\n    aliasStringsBlacklist = \"\";\n    aliasAllStrings = false;\n    outputJsStringUsage = false;\n    convertToDottedProperties = false;\n    rewriteFunctionExpressions = false;\n    optimizeParameters = false;\n    optimizeReturns = false;\n\n    // Renaming\n    variableRenaming = VariableRenamingPolicy.OFF;\n    propertyRenaming = PropertyRenamingPolicy.OFF;\n    labelRenaming = false;\n    generatePseudoNames = false;\n    shadowVariables = false;\n    renamePrefix = null;\n    aliasKeywords = false;\n    collapseProperties = false;\n    collapsePropertiesOnExternTypes = false;\n    devirtualizePrototypeMethods = false;\n    disambiguateProperties = false;\n    ambiguateProperties = false;\n    anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;\n    exportTestFunctions = false;\n\n    // Alterations\n    runtimeTypeCheck = false;\n    runtimeTypeCheckLogFunction = null;\n    instrumentForCoverage = false;\n    instrumentForCoverageOnly = false;\n    ignoreCajaProperties = false;\n    syntheticBlockStartMarker = null;\n    syntheticBlockEndMarker = null;\n    locale = null;\n    markAsCompiled = false;\n    removeTryCatchFinally = false;\n    closurePass = false;\n    rewriteNewDateGoogNow = true;\n    removeAbstractMethods = true;\n    removeClosureAsserts = false;\n    stripTypes = Collections.emptySet();\n    stripNameSuffixes = Collections.emptySet();\n    stripNamePrefixes = Collections.emptySet();\n    stripTypePrefixes = Collections.emptySet();\n    customPasses = null;\n    markNoSideEffectCalls = false;\n    defineReplacements = Maps.newHashMap();\n    tweakProcessing = TweakProcessing.OFF;\n    tweakReplacements = Maps.newHashMap();\n    moveFunctionDeclarations = false;\n    instrumentationTemplate = null;\n    appNameStr = \"\";\n    recordFunctionInformation = false;\n    generateExports = false;\n    cssRenamingMap = null;\n    processObjectPropertyString = false;\n    idGenerators = Collections.emptySet();\n    replaceStringsFunctionDescriptions = Collections.emptyList();\n    replaceStringsPlaceholderToken = \"\";\n    replaceStringsReservedStrings = Collections.emptySet();\n\n    // Output\n    printInputDelimiter = false;\n    prettyPrint = false;\n    lineBreak = false;\n    reportPath = null;\n    tracer = TracerMode.OFF;\n    colorizeErrorOutput = false;\n    errorFormat = ErrorFormat.SINGLELINE;\n    warningsGuard = null;\n    debugFunctionSideEffectsPath = null;\n    jsOutputFile = \"\";\n    externExports = false;\n    nameReferenceReportPath = null;\n    nameReferenceGraphPath = null;\n  }\n",
        "begin_line": 650,
        "end_line": 791,
        "comment": "\n   * Initializes compiler options. All options are disabled by default.\n   *\n   * Command-line frontends to the compiler should set these properties\n   * like a builder.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.enables#906",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean enables(DiagnosticGroup type) {\n    return warningsGuard != null && warningsGuard.enables(type);\n  }\n",
        "begin_line": 906,
        "end_line": 908,
        "comment": "\n   * Whether the warnings guard in this Options object enables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.getWarningsGuard#925",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getWarningsGuard()",
        "snippet": "  WarningsGuard getWarningsGuard() {\n    return warningsGuard;\n  }\n",
        "begin_line": 925,
        "end_line": 927,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.shouldColorizeErrorOutput#1017",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shouldColorizeErrorOutput()",
        "snippet": "  public boolean shouldColorizeErrorOutput() {\n    return colorizeErrorOutput;\n  }\n",
        "begin_line": 1017,
        "end_line": 1019,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.getCodingConvention#1058",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getCodingConvention()",
        "snippet": "  public CodingConvention getCodingConvention() {\n    return codingConvention;\n  }\n",
        "begin_line": 1058,
        "end_line": 1060,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.getLanguageIn#1130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageIn()",
        "snippet": "  public LanguageMode getLanguageIn() {\n    return languageIn;\n  }\n",
        "begin_line": 1130,
        "end_line": 1132,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerInput.getName#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return name;\n  }\n",
        "begin_line": 88,
        "end_line": 91,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerInput.getAstRoot#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    return ast.getAstRoot(compiler);\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerInput.setModule#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "  public void setModule(JSModule module) {\n    // An input may only belong to one module.\n    Preconditions.checkArgument(\n        module == null || this.module == null || this.module == module);\n    this.module = module;\n  }\n",
        "begin_line": 286,
        "end_line": 291,
        "comment": " Sets the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.Compiler#184",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler(java.io.PrintStream)",
        "snippet": "  public Compiler(PrintStream stream) {\n    addChangeHandler(recentChange);\n    outStream = stream;\n  }\n",
        "begin_line": 184,
        "end_line": 187,
        "comment": "\n   * Creates n Compiler that reports errors and warnings to an output\n   * stream.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.setErrorManager#202",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setErrorManager(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public void setErrorManager(ErrorManager errorManager) {\n    Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 202,
        "end_line": 206,
        "comment": "\n   * Sets the error manager.\n   *\n   * @param errorManager the error manager, it cannot be {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.createMessageFormatter#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createMessageFormatter()",
        "snippet": "  private MessageFormatter createMessageFormatter() {\n    boolean colorize = options.shouldColorizeErrorOutput();\n    return options.errorFormat.toFormatter(this, colorize);\n  }\n",
        "begin_line": 212,
        "end_line": 215,
        "comment": "\n   * Creates a message formatter instance corresponding to the value of\n   * {@link CompilerOptions}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.initModules#311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initModules(java.util.List<com.google.javascript.jscomp.JSSourceFile>, java.util.List<com.google.javascript.jscomp.JSModule>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options) {\n    initOptions(options);\n\n    checkFirstModule(modules);\n    fillEmptyModules(modules);\n\n    this.externs = makeCompilerInput(externs, true);\n\n    // Generate the module graph, and report any errors in the module\n    // specification as errors.\n    this.modules = modules;\n    if (modules.size() > 1) {\n      try {\n        this.moduleGraph = new JSModuleGraph(modules);\n      } catch (JSModuleGraph.ModuleDependenceException e) {\n        // problems with the module format.  Report as an error.  The\n        // message gives all details.\n        report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));\n        return;\n      }\n    } else {\n      this.moduleGraph = null;\n    }\n\n    this.inputs = getAllInputsFromModules(modules);\n    initBasedOnOptions();\n\n    initInputsByNameMap();\n  }\n",
        "begin_line": 311,
        "end_line": 342,
        "comment": "\n   * Initializes the instance state needed for a compile job if the sources\n   * are in modules.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.initBasedOnOptions#347",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initBasedOnOptions()",
        "snippet": "  private void initBasedOnOptions() {\n    // Create the source map if necessary.\n    if (options.sourceMapOutputPath != null) {\n      sourceMap = options.sourceMapFormat.getInstance();\n    }\n  }\n",
        "begin_line": 347,
        "end_line": 352,
        "comment": "\n   * Do any initialization that is dependent on the compiler options.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.checkFirstModule#375",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private void checkFirstModule(List<JSModule> modules) {\n    if (modules.isEmpty()) {\n      report(JSError.make(EMPTY_MODULE_LIST_ERROR));\n    } else if (modules.get(0).getInputs().isEmpty() && modules.size() > 1) {\n      // The root module may only be empty if there is exactly 1 module.\n      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));\n    }\n  }\n",
        "begin_line": 375,
        "end_line": 383,
        "comment": "\n   * Verifies that at least one module has been provided and that the first one\n   * has at least one source code input.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.fillEmptyModules#389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (module.getInputs().isEmpty()) {\n        module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));\n      }\n    }\n  }\n",
        "begin_line": 389,
        "end_line": 395,
        "comment": "\n   * Fill any empty modules with a place holder file. It makes any cross module\n   * motion easier.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getAllInputsFromModules#411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    Map<String, JSModule> inputMap = Maps.newHashMap();\n    for (JSModule module : modules) {\n      for (CompilerInput input : module.getInputs()) {\n        String inputName = input.getName();\n\n        // NOTE(nicksantos): If an input is in more than one module,\n        // it will show up twice in the inputs list, and then we\n        // will get an error down the line.\n        inputs.add(input);\n        inputMap.put(inputName, module);\n      }\n    }\n    return inputs;\n  }\n",
        "begin_line": 411,
        "end_line": 427,
        "comment": "\n   * Builds a single list of all module inputs. Verifies that it contains no\n   * duplicates.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.newTracer#847",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.newTracer(java.lang.String)",
        "snippet": "  Tracer newTracer(String passName) {\n    String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (options.tracer.isOn()) {\n      tracker.recordPassStart(passName);\n    }\n    return new Tracer(\"Compiler\", comment);\n  }\n",
        "begin_line": 847,
        "end_line": 854,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.stopTracer#856",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
        "snippet": "  void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (options.tracer.isOn()) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 856,
        "end_line": 861,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getErrors#884",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return errorManager.getErrors();\n  }\n",
        "begin_line": 884,
        "end_line": 886,
        "comment": "\n   * Returns the array of errors (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getWarnings#891",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return errorManager.getWarnings();\n  }\n",
        "begin_line": 891,
        "end_line": 893,
        "comment": "\n   * Returns the array of warnings (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.addChangeHandler#1613",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void addChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.add(handler);\n  }\n",
        "begin_line": 1613,
        "end_line": 1616,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getCodingConvention#1635",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getCodingConvention()",
        "snippet": "  @Override\n  public CodingConvention getCodingConvention() {\n    CodingConvention convention = options.getCodingConvention();\n    convention = convention != null ? convention : defaultCodingConvention;\n    return convention;\n  }\n",
        "begin_line": 1635,
        "end_line": 1640,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.isIdeMode#1642",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.isIdeMode()",
        "snippet": "  @Override\n  public boolean isIdeMode() {\n    return options.ideMode;\n  }\n",
        "begin_line": 1642,
        "end_line": 1645,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getDiagnosticGroups#1701",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDiagnosticGroups()",
        "snippet": "  protected DiagnosticGroups getDiagnosticGroups() {\n    return new DiagnosticGroups();\n  }\n",
        "begin_line": 1701,
        "end_line": 1703,
        "comment": "\n   * The warning classes that are available from the command-line, and\n   * are suppressable by the {@code @suppress} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getErrorCount#1751",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorManager.getErrorCount();\n  }\n",
        "begin_line": 1751,
        "end_line": 1753,
        "comment": "\n   * Gets the number of errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.hasHaltingErrors#1762",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasHaltingErrors()",
        "snippet": "  @Override\n  boolean hasHaltingErrors() {\n    return !isIdeMode() && getErrorCount() > 0;\n  }\n",
        "begin_line": 1762,
        "end_line": 1765,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.hasErrors#1776",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasErrors()",
        "snippet": "  public boolean hasErrors() {\n    return hasHaltingErrors();\n  }\n",
        "begin_line": 1776,
        "end_line": 1778,
        "comment": "\n   * Consults the {@link ErrorManager} to see if we've encountered errors\n   * that should halt compilation. <p>\n   *\n   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n   * always returns {@code false} without consulting the error manager. The\n   * error manager will continue to be told about new errors and warnings, but\n   * the compiler will complete compilation of all inputs.<p>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeChangeHandler.hasCodeChanged#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.hasCodeChanged()",
        "snippet": "    boolean hasCodeChanged() {\n      return hasChanged;\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "CheckLevel.isOn#29",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckLevel.java",
        "class_name": "com.google.javascript.jscomp.CheckLevel",
        "signature": "com.google.javascript.jscomp.CheckLevel.isOn()",
        "snippet": "  boolean isOn() {\n    return this != OFF;\n  }\n",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicErrorManager.getErrorCount#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorCount;\n  }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicErrorManager.getWarningCount#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarningCount()",
        "snippet": "  public int getWarningCount() {\n    return warningCount;\n  }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicErrorManager.getErrors#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return toArray(CheckLevel.ERROR);\n  }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicErrorManager.getWarnings#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return toArray(CheckLevel.WARNING);\n  }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicErrorManager.toArray#96",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.toArray(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private JSError[] toArray(CheckLevel level) {\n    List<JSError> errors = new ArrayList<JSError>(messages.size());\n    for (ErrorWithLevel p : messages) {\n      if (p.level == level) {\n        errors.add(p.error);\n      }\n    }\n    return errors.toArray(new JSError[errors.size()]);\n  }\n",
        "begin_line": 96,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy(char[])",
        "snippet": "  AnonymousFunctionNamingPolicy(char[] reservedCharacters) {\n    this.reservedCharacters = reservedCharacters;\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractMessageFormatter.AbstractMessageFormatter#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.AbstractMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public AbstractMessageFormatter(SourceExcerptProvider source) {\n    this.source = source;\n  }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractMessageFormatter.setColorize#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.setColorize(boolean)",
        "snippet": "  public void setColorize(boolean colorize) {\n    this.colorize = colorize;\n  }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1943
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.newNode#1316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1) {\n    return new Node(type, child1).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1316,
        "end_line": 1318,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1905
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processScope#791",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processScope(com.google.javascript.jscomp.mozilla.rhino.ast.Scope)",
        "snippet": "    @Override\n    Node processScope(Scope scopeNode) {\n      return processGeneric(scopeNode);\n    }\n",
        "begin_line": 791,
        "end_line": 794,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getConditionExpression#1636",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getConditionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  static Node getConditionExpression(Node n) {\n    switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }\n    throw new IllegalArgumentException(n + \" does not have a condition.\");\n  }\n",
        "begin_line": 1636,
        "end_line": 1655,
        "comment": "\n   * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.\n   * @param n a node with an outgoing conditional CFG edge\n   * @return the condition node or null if the condition is not obviously a node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.shouldPreserveExtraBlocks#275",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.shouldPreserveExtraBlocks()",
        "snippet": "  boolean shouldPreserveExtraBlocks() {\n    return false;\n  }\n",
        "begin_line": 275,
        "end_line": 277,
        "comment": "\n   * If the body of a for loop or the then clause of an if statement has\n   * a single statement, should it be wrapped in a block?  Doing so can\n   * help when pretty-printing the code, and permits putting a debugging\n   * breakpoint on the statement inside the condition.\n   *\n   * @return {@boolean true} if such expressions should be wrapped\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.reportCodeChange#1628",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.reportCodeChange()",
        "snippet": "  @Override\n  public void reportCodeChange() {\n    for (CodeChangeHandler handler : codeChangeHandlers) {\n      handler.reportChange();\n    }\n  }\n",
        "begin_line": 1628,
        "end_line": 1633,
        "comment": "\n   * All passes should call reportCodeChange() when they alter\n   * the JS tree structure. This is verified by CompilerTestCase.\n   * This allows us to optimize to a fixed point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1608
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeChangeHandler.reportChange#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reportChange()",
        "snippet": "    public void reportChange() {\n      hasChanged = true;\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1608
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.transformBlock#189",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformBlock(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private Node transformBlock(AstNode node) {\n    Node irNode = transform(node);\n    if (irNode.getType() != Token.BLOCK) {\n      if (irNode.getType() == Token.EMPTY) {\n        irNode.setType(Token.BLOCK);\n        irNode.setWasEmptyNode(true);\n      } else {\n        Node newBlock = newNode(Token.BLOCK, irNode);\n        newBlock.setLineno(irNode.getLineno());\n        newBlock.setCharno(irNode.getCharno());\n        irNode = newBlock;\n      }\n    }\n    return irNode;\n  }\n",
        "begin_line": 189,
        "end_line": 203,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.getNonEmptyChildCount#1054",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private static int getNonEmptyChildCount(Node n, int maxCount) {\n    int i = 0;\n    Node c = n.getFirstChild();\n    for (; c != null && i < maxCount; c = c.getNext()) {\n      if (c.getType() == Token.BLOCK) {\n        i += getNonEmptyChildCount(c, maxCount-i);\n      } else if (c.getType() != Token.EMPTY) {\n        i++;\n      }\n    }\n    return i;\n  }\n",
        "begin_line": 1054,
        "end_line": 1065,
        "comment": "\n   * @param maxCount The maximum number of children to look for.\n   * @return The number of children of this node that are non empty up to\n   * maxCount.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#374",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node child) {\n    Preconditions.checkArgument(child.parent == null,\n        \"new child has existing parent\");\n    Preconditions.checkArgument(child.next == null,\n        \"new child has existing sibling\");\n\n    type = nodeType;\n    parent = null;\n    first = last = child;\n    child.next = null;\n    child.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 374,
        "end_line": 386,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1555
        },
        "num_failing_tests": 3
    },
    {
        "name": "LiveVariablesAnalysis.apply#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableJoinOp.apply(java.util.List<com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice>)",
        "snippet": "    @Override\n    public LiveVariableLattice apply(List<LiveVariableLattice> in) {\n      LiveVariableLattice result = new LiveVariableLattice(in.get(0));\n      for (int i = 1; i < in.size(); i++) {\n        result.liveSet.or(in.get(i).liveSet);\n      }\n      return result;\n    }\n",
        "begin_line": 54,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getDouble#253",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.getDouble()",
        "snippet": "    @Override\n    public double getDouble() {\n      return this.number;\n    }\n",
        "begin_line": 253,
        "end_line": 256,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0674
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addNumber#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addNumber(double)",
        "snippet": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    if (x < 0 && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      add(String.valueOf(x));\n    }\n  }\n",
        "begin_line": 233,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0674
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#263",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "    @Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      return (super.isEquivalentTo(node, compareJsType, recurse)\n          && getDouble() == ((NumberNode) node).getDouble());\n    }\n",
        "begin_line": 263,
        "end_line": 267,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0662
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processNumberLiteral#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processNumberLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral)",
        "snippet": "    @Override\n    Node processNumberLiteral(NumberLiteral literalNode) {\n      return newNumberNode(literalNode.getNumber());\n    }\n",
        "begin_line": 692,
        "end_line": 695,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0657
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNumberNode#1336",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNumberNode(java.lang.Double)",
        "snippet": "  private Node newNumberNode(Double value) {\n    return Node.newNumber(value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1336,
        "end_line": 1338,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0657
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.NumberNode#243",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.NumberNode(double)",
        "snippet": "    NumberNode(double number) {\n      super(Token.NUMBER);\n      this.number = number;\n    }\n",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newNumber#511",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newNumber(double)",
        "snippet": "  public static Node newNumber(double number) {\n    return new NumberNode(number);\n  }\n",
        "begin_line": 511,
        "end_line": 513,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.compare#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.Anonymous-5d7bfd80-b29c-4a35-88ae-e933bff78138.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0625
        },
        "num_failing_tests": 1
    }
]