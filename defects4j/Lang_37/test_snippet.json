[
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testJira567()",
        "snippet": "    public void testJira567(){\n        Number[] n;\n        // Valid array construction\n        n = ArrayUtils.addAll(new Number[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n        assertEquals(2,n.length);\n        assertEquals(Number.class,n.getClass().getComponentType());\n        try {\n            // Invalid - can't store Long in Integer array\n               n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n               fail(\"Should have generated IllegalArgumentException\");\n        } catch (IllegalArgumentException expected) {\n        }\n    }\n",
        "begin_line": 32,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 19)",
            "(line 35,col 9)-(line 35,col 93)",
            "(line 36,col 9)-(line 36,col 33)",
            "(line 37,col 9)-(line 37,col 67)",
            "(line 38,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayBoolean()",
        "snippet": "    public void testAddObjectArrayBoolean() {\n        boolean[] newArray;\n        newArray = ArrayUtils.add((boolean[])null, false);\n        assertTrue(Arrays.equals(new boolean[]{false}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((boolean[])null, true);\n        assertTrue(Arrays.equals(new boolean[]{true}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n        boolean[] array1 = new boolean[]{true, false, true};\n        newArray = ArrayUtils.add(array1, false);\n        assertTrue(Arrays.equals(new boolean[]{true, false, true, false}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 46,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 27)",
            "(line 48,col 9)-(line 48,col 58)",
            "(line 49,col 9)-(line 49,col 66)",
            "(line 50,col 9)-(line 50,col 75)",
            "(line 51,col 9)-(line 51,col 57)",
            "(line 52,col 9)-(line 52,col 65)",
            "(line 53,col 9)-(line 53,col 75)",
            "(line 54,col 9)-(line 54,col 60)",
            "(line 55,col 9)-(line 55,col 49)",
            "(line 56,col 9)-(line 56,col 85)",
            "(line 57,col 9)-(line 57,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayByte()",
        "snippet": "    public void testAddObjectArrayByte() {\n        byte[] newArray;\n        newArray = ArrayUtils.add((byte[])null, (byte)0);\n        assertTrue(Arrays.equals(new byte[]{0}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((byte[])null, (byte)1);\n        assertTrue(Arrays.equals(new byte[]{1}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        byte[] array1 = new byte[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (byte)0);\n        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 0}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (byte)4);\n        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 4}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 60,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 24)",
            "(line 62,col 9)-(line 62,col 57)",
            "(line 63,col 9)-(line 63,col 59)",
            "(line 64,col 9)-(line 64,col 72)",
            "(line 65,col 9)-(line 65,col 57)",
            "(line 66,col 9)-(line 66,col 59)",
            "(line 67,col 9)-(line 67,col 72)",
            "(line 68,col 9)-(line 68,col 44)",
            "(line 69,col 9)-(line 69,col 51)",
            "(line 70,col 9)-(line 70,col 68)",
            "(line 71,col 9)-(line 71,col 72)",
            "(line 72,col 9)-(line 72,col 51)",
            "(line 73,col 9)-(line 73,col 68)",
            "(line 74,col 9)-(line 74,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayChar()",
        "snippet": "    public void testAddObjectArrayChar() {\n        char[] newArray;\n        newArray = ArrayUtils.add((char[])null, (char)0);\n        assertTrue(Arrays.equals(new char[]{0}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((char[])null, (char)1);\n        assertTrue(Arrays.equals(new char[]{1}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        char[] array1 = new char[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (char)0);\n        assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (char)4);\n        assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 77,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 24)",
            "(line 79,col 9)-(line 79,col 57)",
            "(line 80,col 9)-(line 80,col 59)",
            "(line 81,col 9)-(line 81,col 77)",
            "(line 82,col 9)-(line 82,col 57)",
            "(line 83,col 9)-(line 83,col 59)",
            "(line 84,col 9)-(line 84,col 77)",
            "(line 85,col 9)-(line 85,col 44)",
            "(line 86,col 9)-(line 86,col 51)",
            "(line 87,col 9)-(line 87,col 68)",
            "(line 88,col 9)-(line 88,col 77)",
            "(line 89,col 9)-(line 89,col 51)",
            "(line 90,col 9)-(line 90,col 68)",
            "(line 91,col 9)-(line 91,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayDouble()",
        "snippet": "    public void testAddObjectArrayDouble() {\n        double[] newArray;\n        newArray = ArrayUtils.add((double[])null, 0);\n        assertTrue(Arrays.equals(new double[]{0}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((double[])null, 1);\n        assertTrue(Arrays.equals(new double[]{1}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        double[] array1 = new double[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 26)",
            "(line 96,col 9)-(line 96,col 53)",
            "(line 97,col 9)-(line 97,col 61)",
            "(line 98,col 9)-(line 98,col 74)",
            "(line 99,col 9)-(line 99,col 53)",
            "(line 100,col 9)-(line 100,col 61)",
            "(line 101,col 9)-(line 101,col 74)",
            "(line 102,col 9)-(line 102,col 48)",
            "(line 103,col 9)-(line 103,col 45)",
            "(line 104,col 9)-(line 104,col 70)",
            "(line 105,col 9)-(line 105,col 74)",
            "(line 106,col 9)-(line 106,col 45)",
            "(line 107,col 9)-(line 107,col 70)",
            "(line 108,col 9)-(line 108,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayFloat()",
        "snippet": "    public void testAddObjectArrayFloat() {\n        float[] newArray;\n        newArray = ArrayUtils.add((float[])null, 0);\n        assertTrue(Arrays.equals(new float[]{0}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((float[])null, 1);\n        assertTrue(Arrays.equals(new float[]{1}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        float[] array1 = new float[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 111,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 25)",
            "(line 113,col 9)-(line 113,col 52)",
            "(line 114,col 9)-(line 114,col 60)",
            "(line 115,col 9)-(line 115,col 73)",
            "(line 116,col 9)-(line 116,col 52)",
            "(line 117,col 9)-(line 117,col 60)",
            "(line 118,col 9)-(line 118,col 73)",
            "(line 119,col 9)-(line 119,col 46)",
            "(line 120,col 9)-(line 120,col 45)",
            "(line 121,col 9)-(line 121,col 69)",
            "(line 122,col 9)-(line 122,col 73)",
            "(line 123,col 9)-(line 123,col 45)",
            "(line 124,col 9)-(line 124,col 69)",
            "(line 125,col 9)-(line 125,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayInt()",
        "snippet": "    public void testAddObjectArrayInt() {\n        int[] newArray;\n        newArray = ArrayUtils.add((int[])null, 0);\n        assertTrue(Arrays.equals(new int[]{0}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((int[])null, 1);\n        assertTrue(Arrays.equals(new int[]{1}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        int[] array1 = new int[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new int[]{1, 2, 3, 0}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new int[]{1, 2, 3, 4}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 128,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 23)",
            "(line 130,col 9)-(line 130,col 50)",
            "(line 131,col 9)-(line 131,col 58)",
            "(line 132,col 9)-(line 132,col 75)",
            "(line 133,col 9)-(line 133,col 50)",
            "(line 134,col 9)-(line 134,col 58)",
            "(line 135,col 9)-(line 135,col 75)",
            "(line 136,col 9)-(line 136,col 42)",
            "(line 137,col 9)-(line 137,col 45)",
            "(line 138,col 9)-(line 138,col 67)",
            "(line 139,col 9)-(line 139,col 75)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 67)",
            "(line 142,col 9)-(line 142,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayLong()",
        "snippet": "    public void testAddObjectArrayLong() {\n        long[] newArray;\n        newArray = ArrayUtils.add((long[])null, 0);\n        assertTrue(Arrays.equals(new long[]{0}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((long[])null, 1);\n        assertTrue(Arrays.equals(new long[]{1}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        long[] array1 = new long[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new long[]{1, 2, 3, 0}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new long[]{1, 2, 3, 4}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 145,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 24)",
            "(line 147,col 9)-(line 147,col 51)",
            "(line 148,col 9)-(line 148,col 59)",
            "(line 149,col 9)-(line 149,col 72)",
            "(line 150,col 9)-(line 150,col 51)",
            "(line 151,col 9)-(line 151,col 59)",
            "(line 152,col 9)-(line 152,col 72)",
            "(line 153,col 9)-(line 153,col 44)",
            "(line 154,col 9)-(line 154,col 45)",
            "(line 155,col 9)-(line 155,col 68)",
            "(line 156,col 9)-(line 156,col 72)",
            "(line 157,col 9)-(line 157,col 45)",
            "(line 158,col 9)-(line 158,col 68)",
            "(line 159,col 9)-(line 159,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayShort()",
        "snippet": "    public void testAddObjectArrayShort() {\n        short[] newArray;\n        newArray = ArrayUtils.add((short[])null, (short)0);\n        assertTrue(Arrays.equals(new short[]{0}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((short[])null, (short)1);\n        assertTrue(Arrays.equals(new short[]{1}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        short[] array1 = new short[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (short)0);\n        assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (short)4);\n        assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 162,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 25)",
            "(line 164,col 9)-(line 164,col 59)",
            "(line 165,col 9)-(line 165,col 60)",
            "(line 166,col 9)-(line 166,col 73)",
            "(line 167,col 9)-(line 167,col 59)",
            "(line 168,col 9)-(line 168,col 60)",
            "(line 169,col 9)-(line 169,col 73)",
            "(line 170,col 9)-(line 170,col 46)",
            "(line 171,col 9)-(line 171,col 52)",
            "(line 172,col 9)-(line 172,col 69)",
            "(line 173,col 9)-(line 173,col 73)",
            "(line 174,col 9)-(line 174,col 52)",
            "(line 175,col 9)-(line 175,col 69)",
            "(line 176,col 9)-(line 176,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayObject()",
        "snippet": "    public void testAddObjectArrayObject() {\n        Object[] newArray;\n        newArray = ArrayUtils.add((Object[])null, null);\n        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n        assertEquals(Object.class, newArray.getClass().getComponentType());\n\n        //show that not casting is okay\n        newArray = ArrayUtils.add(null, null);\n        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n        assertEquals(Object.class, newArray.getClass().getComponentType());\n\n        newArray = ArrayUtils.add((Object[])null, \"a\");\n        assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n        assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        //show that not casting to Object[] is okay and will assume String based on \"a\"\n        String[] newStringArray = ArrayUtils.add(null, \"a\");\n        assertTrue(Arrays.equals((new String[]{\"a\"}), newStringArray));\n        assertTrue(Arrays.equals((new Object[]{\"a\"}), newStringArray));\n        assertEquals(String.class, newStringArray.getClass().getComponentType());\n\n        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n        newArray = ArrayUtils.add(stringArray1, null);\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        newArray = ArrayUtils.add(stringArray1, \"d\");\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n        newArray = ArrayUtils.add(numberArray1, new Float(3));\n        assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n        assertEquals(Number.class, newArray.getClass().getComponentType());\n\n        numberArray1 = null;\n        newArray = ArrayUtils.add(numberArray1, new Float(3));\n        assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n        assertEquals(Float.class, newArray.getClass().getComponentType());\n\n        newArray = ArrayUtils.add(numberArray1, null);\n        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n        assertEquals(Object.class, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 179,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 26)",
            "(line 181,col 9)-(line 181,col 56)",
            "(line 182,col 9)-(line 182,col 66)",
            "(line 183,col 9)-(line 183,col 75)",
            "(line 186,col 9)-(line 186,col 46)",
            "(line 187,col 9)-(line 187,col 66)",
            "(line 188,col 9)-(line 188,col 75)",
            "(line 190,col 9)-(line 190,col 55)",
            "(line 191,col 9)-(line 191,col 65)",
            "(line 192,col 9)-(line 192,col 65)",
            "(line 193,col 9)-(line 193,col 75)",
            "(line 196,col 9)-(line 196,col 60)",
            "(line 197,col 9)-(line 197,col 71)",
            "(line 198,col 9)-(line 198,col 71)",
            "(line 199,col 9)-(line 199,col 81)",
            "(line 201,col 9)-(line 201,col 60)",
            "(line 202,col 9)-(line 202,col 54)",
            "(line 203,col 9)-(line 203,col 81)",
            "(line 204,col 9)-(line 204,col 75)",
            "(line 206,col 9)-(line 206,col 53)",
            "(line 207,col 9)-(line 207,col 80)",
            "(line 208,col 9)-(line 208,col 75)",
            "(line 210,col 9)-(line 210,col 76)",
            "(line 211,col 9)-(line 211,col 62)",
            "(line 212,col 9)-(line 212,col 105)",
            "(line 213,col 9)-(line 213,col 75)",
            "(line 215,col 9)-(line 215,col 28)",
            "(line 216,col 9)-(line 216,col 62)",
            "(line 217,col 9)-(line 217,col 73)",
            "(line 218,col 9)-(line 218,col 74)",
            "(line 220,col 9)-(line 220,col 54)",
            "(line 221,col 9)-(line 221,col 66)",
            "(line 222,col 9)-(line 222,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray()",
        "snippet": "    public void testAddObjectArrayToObjectArray() {\n        assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));\n        Object[] newArray;\n        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n        String[] stringArray2 = new String[]{\"1\", \"2\", \"3\"};\n        newArray = ArrayUtils.addAll(stringArray1, (String[]) null);\n        assertNotSame(stringArray1, newArray);\n        assertTrue(Arrays.equals(stringArray1, newArray));\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(null, stringArray2);\n        assertNotSame(stringArray2, newArray);\n        assertTrue(Arrays.equals(stringArray2, newArray));\n        assertTrue(Arrays.equals((new String[]{\"1\", \"2\", \"3\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(stringArray1, stringArray2);\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        String[] stringArrayNull = new String []{null};\n        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);\n        assertTrue(Arrays.equals((new String[]{null, null}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        // boolean\n        assertTrue( Arrays.equals( new boolean[] { true, false, false, true },\n            ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) );\n\n        assertTrue( Arrays.equals( new boolean[] { false, true },\n            ArrayUtils.addAll( null, new boolean[] { false, true } ) ) );\n\n        assertTrue( Arrays.equals( new boolean[] { true, false },\n            ArrayUtils.addAll( new boolean[] { true, false }, null ) ) );\n\n        // char\n        assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' },\n            ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) );\n\n        assertTrue( Arrays.equals( new char[] { 'c', 'd' },\n            ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) );\n\n        assertTrue( Arrays.equals( new char[] { 'a', 'b' },\n            ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) );\n\n        // byte\n        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 },\n            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) );\n\n        assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 },\n            ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) );\n\n        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 },\n            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) );\n\n        // short\n        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 },\n            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) );\n\n        assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 },\n            ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) );\n\n        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 },\n            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) );\n\n        // int\n        assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 },\n            ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) );\n\n        assertTrue( Arrays.equals( new int[] { -1000, -1 },\n            ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) );\n\n        assertTrue( Arrays.equals( new int[] { 1, 1000 },\n            ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) );\n\n        // long\n        assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L },\n            ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) );\n\n        assertTrue( Arrays.equals( new long[] { 1000L, -1000L },\n            ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) );\n\n        assertTrue( Arrays.equals( new long[] { 1L, -1L },\n            ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) );\n\n        // float\n        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f },\n            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) );\n\n        assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f },\n            ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) );\n\n        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f },\n            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) );\n\n        // double\n        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 },\n            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) );\n\n        assertTrue( Arrays.equals( new double[] { 0, 9.99 },\n            ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) );\n\n        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI },\n            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) );\n\n    }\n",
        "begin_line": 225,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 72)",
            "(line 227,col 9)-(line 227,col 26)",
            "(line 228,col 9)-(line 228,col 60)",
            "(line 229,col 9)-(line 229,col 60)",
            "(line 230,col 9)-(line 230,col 68)",
            "(line 231,col 9)-(line 231,col 46)",
            "(line 232,col 9)-(line 232,col 58)",
            "(line 233,col 9)-(line 233,col 75)",
            "(line 234,col 9)-(line 234,col 75)",
            "(line 235,col 9)-(line 235,col 57)",
            "(line 236,col 9)-(line 236,col 46)",
            "(line 237,col 9)-(line 237,col 58)",
            "(line 238,col 9)-(line 238,col 75)",
            "(line 239,col 9)-(line 239,col 75)",
            "(line 240,col 9)-(line 240,col 65)",
            "(line 241,col 9)-(line 241,col 90)",
            "(line 242,col 9)-(line 242,col 75)",
            "(line 243,col 9)-(line 243,col 85)",
            "(line 244,col 9)-(line 244,col 75)",
            "(line 245,col 9)-(line 245,col 62)",
            "(line 246,col 9)-(line 246,col 75)",
            "(line 247,col 9)-(line 247,col 74)",
            "(line 248,col 9)-(line 248,col 75)",
            "(line 249,col 9)-(line 249,col 62)",
            "(line 250,col 9)-(line 250,col 75)",
            "(line 251,col 9)-(line 251,col 99)",
            "(line 252,col 9)-(line 252,col 75)",
            "(line 253,col 9)-(line 253,col 62)",
            "(line 254,col 9)-(line 254,col 75)",
            "(line 255,col 9)-(line 255,col 55)",
            "(line 256,col 9)-(line 256,col 71)",
            "(line 257,col 9)-(line 257,col 72)",
            "(line 258,col 9)-(line 258,col 75)",
            "(line 261,col 9)-(line 262,col 98)",
            "(line 264,col 9)-(line 265,col 73)",
            "(line 267,col 9)-(line 268,col 73)",
            "(line 271,col 9)-(line 272,col 86)",
            "(line 274,col 9)-(line 275,col 67)",
            "(line 277,col 9)-(line 278,col 67)",
            "(line 281,col 9)-(line 282,col 106)",
            "(line 284,col 9)-(line 285,col 77)",
            "(line 287,col 9)-(line 288,col 77)",
            "(line 291,col 9)-(line 292,col 116)",
            "(line 294,col 9)-(line 295,col 82)",
            "(line 297,col 9)-(line 298,col 82)",
            "(line 301,col 9)-(line 302,col 84)",
            "(line 304,col 9)-(line 305,col 67)",
            "(line 307,col 9)-(line 308,col 65)",
            "(line 311,col 9)-(line 312,col 90)",
            "(line 314,col 9)-(line 315,col 72)",
            "(line 317,col 9)-(line 318,col 66)",
            "(line 321,col 9)-(line 322,col 95)",
            "(line 324,col 9)-(line 325,col 71)",
            "(line 327,col 9)-(line 328,col 72)",
            "(line 331,col 9)-(line 332,col 98)",
            "(line 334,col 9)-(line 335,col 68)",
            "(line 337,col 9)-(line 338,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex()",
        "snippet": "    public void testAddObjectAtIndex() {\n        Object[] newArray;\n        newArray = ArrayUtils.add((Object[])null, 0, null);\n        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n        assertEquals(Object.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((Object[])null, 0, \"a\");\n        assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n        assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n        newArray = ArrayUtils.add(stringArray1, 0, null);\n        assertTrue(Arrays.equals((new String[]{null, \"a\", \"b\", \"c\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(stringArray1, 1, null);\n        assertTrue(Arrays.equals((new String[]{\"a\", null, \"b\", \"c\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(stringArray1, 3, null);\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(stringArray1, 3, \"d\");\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        Object[] o = new Object[] {\"1\", \"2\", \"4\"};\n        Object[] result = ArrayUtils.add(o, 2, \"3\");\n        Object[] result2 = ArrayUtils.add(o, 3, \"5\");\n\n        assertNotNull(result);\n        assertEquals(4, result.length);\n        assertEquals(\"1\", result[0]);\n        assertEquals(\"2\", result[1]);\n        assertEquals(\"3\", result[2]);\n        assertEquals(\"4\", result[3]);\n        assertNotNull(result2);\n        assertEquals(4, result2.length);\n        assertEquals(\"1\", result2[0]);\n        assertEquals(\"2\", result2[1]);\n        assertEquals(\"4\", result2[2]);\n        assertEquals(\"5\", result2[3]);\n\n        // boolean tests\n        boolean[] booleanArray = ArrayUtils.add( null, 0, true );\n        assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) );\n        try {\n            booleanArray = ArrayUtils.add( null, -1, true );\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false);\n        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n        booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true);\n        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n        booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true);\n        assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) );\n        try {\n            booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // char tests\n        char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' );\n        assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) );\n        try {\n            charArray = ArrayUtils.add( (char[]) null, -1, 'a' );\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b');\n        assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) );\n        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c');\n        assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) );\n        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k');\n        assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) );\n        charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't');\n        assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) );\n        try {\n            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c');\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c');\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // short tests\n        short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2);\n        assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) );\n        try {\n            shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10);\n        assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) );\n        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4);\n        assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) );\n        shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1);\n        assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) );\n        try {\n            shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // byte tests\n        byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2);\n        assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) );\n        try {\n            byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3);\n        assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) );\n        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1);\n        assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) );\n        byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1);\n        assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) );\n        try {\n            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // int tests\n        int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2);\n        assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) );\n        try {\n            intArray = ArrayUtils.add( (int[]) null, -1, 2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10);\n        assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) );\n        intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4);\n        assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) );\n        intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1);\n        assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) );\n        try {\n            intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // long tests\n        long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L);\n        assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) );\n        try {\n            longArray = ArrayUtils.add( (long[]) null, -1, 2L);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L);\n        assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) );\n        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L);\n        assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) );\n        longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L);\n        assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) );\n        try {\n            longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // float tests\n        float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f);\n        assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) );\n        try {\n            floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f);\n        assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) );\n        floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f);\n        assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) );\n        floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f);\n        assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) );\n        try {\n            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // double tests\n        double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2);\n        assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) );\n        try {\n          doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5);\n        assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) );\n        doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8);\n        assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) );\n        doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0);\n        assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) );\n        try {\n            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n    }\n",
        "begin_line": 342,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 26)",
            "(line 344,col 9)-(line 344,col 59)",
            "(line 345,col 9)-(line 345,col 66)",
            "(line 346,col 9)-(line 346,col 75)",
            "(line 347,col 9)-(line 347,col 58)",
            "(line 348,col 9)-(line 348,col 65)",
            "(line 349,col 9)-(line 349,col 65)",
            "(line 350,col 9)-(line 350,col 75)",
            "(line 351,col 9)-(line 351,col 60)",
            "(line 352,col 9)-(line 352,col 57)",
            "(line 353,col 9)-(line 353,col 81)",
            "(line 354,col 9)-(line 354,col 75)",
            "(line 355,col 9)-(line 355,col 57)",
            "(line 356,col 9)-(line 356,col 81)",
            "(line 357,col 9)-(line 357,col 75)",
            "(line 358,col 9)-(line 358,col 57)",
            "(line 359,col 9)-(line 359,col 81)",
            "(line 360,col 9)-(line 360,col 75)",
            "(line 361,col 9)-(line 361,col 56)",
            "(line 362,col 9)-(line 362,col 80)",
            "(line 363,col 9)-(line 363,col 75)",
            "(line 364,col 9)-(line 364,col 75)",
            "(line 366,col 9)-(line 366,col 50)",
            "(line 367,col 9)-(line 367,col 52)",
            "(line 368,col 9)-(line 368,col 53)",
            "(line 370,col 9)-(line 370,col 30)",
            "(line 371,col 9)-(line 371,col 39)",
            "(line 372,col 9)-(line 372,col 37)",
            "(line 373,col 9)-(line 373,col 37)",
            "(line 374,col 9)-(line 374,col 37)",
            "(line 375,col 9)-(line 375,col 37)",
            "(line 376,col 9)-(line 376,col 31)",
            "(line 377,col 9)-(line 377,col 40)",
            "(line 378,col 9)-(line 378,col 38)",
            "(line 379,col 9)-(line 379,col 38)",
            "(line 380,col 9)-(line 380,col 38)",
            "(line 381,col 9)-(line 381,col 38)",
            "(line 384,col 9)-(line 384,col 65)",
            "(line 385,col 9)-(line 385,col 76)",
            "(line 386,col 9)-(line 390,col 9)",
            "(line 391,col 9)-(line 391,col 73)",
            "(line 392,col 9)-(line 392,col 83)",
            "(line 393,col 9)-(line 393,col 73)",
            "(line 394,col 9)-(line 394,col 83)",
            "(line 395,col 9)-(line 395,col 79)",
            "(line 396,col 9)-(line 396,col 89)",
            "(line 397,col 9)-(line 401,col 9)",
            "(line 402,col 9)-(line 406,col 9)",
            "(line 409,col 9)-(line 409,col 67)",
            "(line 410,col 9)-(line 410,col 69)",
            "(line 411,col 9)-(line 415,col 9)",
            "(line 416,col 9)-(line 416,col 64)",
            "(line 417,col 9)-(line 417,col 74)",
            "(line 418,col 9)-(line 418,col 69)",
            "(line 419,col 9)-(line 419,col 79)",
            "(line 420,col 9)-(line 420,col 69)",
            "(line 421,col 9)-(line 421,col 79)",
            "(line 422,col 9)-(line 422,col 74)",
            "(line 423,col 9)-(line 423,col 84)",
            "(line 424,col 9)-(line 428,col 9)",
            "(line 429,col 9)-(line 433,col 9)",
            "(line 436,col 9)-(line 436,col 78)",
            "(line 437,col 9)-(line 437,col 72)",
            "(line 438,col 9)-(line 442,col 9)",
            "(line 443,col 9)-(line 443,col 74)",
            "(line 444,col 9)-(line 444,col 76)",
            "(line 445,col 9)-(line 445,col 74)",
            "(line 446,col 9)-(line 446,col 76)",
            "(line 447,col 9)-(line 447,col 76)",
            "(line 448,col 9)-(line 448,col 78)",
            "(line 449,col 9)-(line 453,col 9)",
            "(line 454,col 9)-(line 458,col 9)",
            "(line 461,col 9)-(line 461,col 74)",
            "(line 462,col 9)-(line 462,col 70)",
            "(line 463,col 9)-(line 467,col 9)",
            "(line 468,col 9)-(line 468,col 70)",
            "(line 469,col 9)-(line 469,col 73)",
            "(line 470,col 9)-(line 470,col 70)",
            "(line 471,col 9)-(line 471,col 73)",
            "(line 472,col 9)-(line 472,col 73)",
            "(line 473,col 9)-(line 473,col 76)",
            "(line 474,col 9)-(line 478,col 9)",
            "(line 479,col 9)-(line 483,col 9)",
            "(line 486,col 9)-(line 486,col 64)",
            "(line 487,col 9)-(line 487,col 68)",
            "(line 488,col 9)-(line 492,col 9)",
            "(line 493,col 9)-(line 493,col 62)",
            "(line 494,col 9)-(line 494,col 72)",
            "(line 495,col 9)-(line 495,col 62)",
            "(line 496,col 9)-(line 496,col 72)",
            "(line 497,col 9)-(line 497,col 64)",
            "(line 498,col 9)-(line 498,col 74)",
            "(line 499,col 9)-(line 503,col 9)",
            "(line 504,col 9)-(line 508,col 9)",
            "(line 511,col 9)-(line 511,col 69)",
            "(line 512,col 9)-(line 512,col 72)",
            "(line 513,col 9)-(line 517,col 9)",
            "(line 518,col 9)-(line 518,col 67)",
            "(line 519,col 9)-(line 519,col 77)",
            "(line 520,col 9)-(line 520,col 67)",
            "(line 521,col 9)-(line 521,col 77)",
            "(line 522,col 9)-(line 522,col 70)",
            "(line 523,col 9)-(line 523,col 80)",
            "(line 524,col 9)-(line 528,col 9)",
            "(line 529,col 9)-(line 533,col 9)",
            "(line 536,col 9)-(line 536,col 76)",
            "(line 537,col 9)-(line 537,col 78)",
            "(line 538,col 9)-(line 542,col 9)",
            "(line 543,col 9)-(line 543,col 75)",
            "(line 544,col 9)-(line 544,col 85)",
            "(line 545,col 9)-(line 545,col 75)",
            "(line 546,col 9)-(line 546,col 85)",
            "(line 547,col 9)-(line 547,col 80)",
            "(line 548,col 9)-(line 548,col 90)",
            "(line 549,col 9)-(line 553,col 9)",
            "(line 554,col 9)-(line 558,col 9)",
            "(line 561,col 9)-(line 561,col 77)",
            "(line 562,col 9)-(line 562,col 78)",
            "(line 563,col 9)-(line 567,col 9)",
            "(line 568,col 9)-(line 568,col 74)",
            "(line 569,col 9)-(line 569,col 84)",
            "(line 570,col 9)-(line 570,col 74)",
            "(line 571,col 9)-(line 571,col 84)",
            "(line 572,col 9)-(line 572,col 78)",
            "(line 573,col 9)-(line 573,col 88)",
            "(line 574,col 9)-(line 578,col 9)",
            "(line 579,col 9)-(line 583,col 9)"
        ]
    }
]