[
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.AbstractRealVector.i",
        "snippet": "            private int i = 0;",
        "begin_line": 479,
        "end_line": 479,
        "comment": " Current index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.AbstractRealVector.e",
        "snippet": "            private EntryImpl e = new EntryImpl();",
        "begin_line": 482,
        "end_line": 482,
        "comment": " Current entry. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseEntryIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.SparseEntryIterator.dim",
        "snippet": "        private final int dim;",
        "begin_line": 580,
        "end_line": 580,
        "comment": " Dimension of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseEntryIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.SparseEntryIterator.current",
        "snippet": "        private EntryImpl current;",
        "begin_line": 583,
        "end_line": 583,
        "comment": " last entry returned by {@link #next()} "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseEntryIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.SparseEntryIterator.next",
        "snippet": "        private EntryImpl next;",
        "begin_line": 586,
        "end_line": 586,
        "comment": " Next entry for {@link #next()} to return. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.PI",
        "snippet": "    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Archimede's constant PI, ratio of circle circumference to diameter. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.E",
        "snippet": "    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Napier's constant e, base of the natural logarithm. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A",
        "snippet": "    private static final double EXP_INT_TABLE_A[] = new double[1500];",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Exponential evaluated at integer values,\n     * exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B",
        "snippet": "    private static final double EXP_INT_TABLE_B[] = new double[1500];",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Exponential evaluated at integer values,\n     * exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750]\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A",
        "snippet": "    private static final double EXP_FRAC_TABLE_A[] = new double[1025];",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n     * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B",
        "snippet": "    private static final double EXP_FRAC_TABLE_B[] = new double[1025];",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n     * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.FACT",
        "snippet": "    private static final double FACT[] = new double[20];",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Factorial table, for Taylor series expansions. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_MANT",
        "snippet": "    private static final double LN_MANT[][] = new double[1024][];",
        "begin_line": 101,
        "end_line": 101,
        "comment": " Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_2_A",
        "snippet": "    private static final double LN_2_A = 0.693147063255310059;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " log(2) (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_2_B",
        "snippet": "    private static final double LN_2_B = 1.17304635250823482e-7;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " log(2) (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_SPLIT_COEF",
        "snippet": "    private static final double LN_SPLIT_COEF[][] = {\n        {2.0, 0.0},\n        {0.6666666269302368, 3.9736429850260626E-8},\n        {0.3999999761581421, 2.3841857910019882E-8},\n        {0.2857142686843872, 1.7029898543501842E-8},\n        {0.2222222089767456, 1.3245471311735498E-8},\n        {0.1818181574344635, 2.4384203044354907E-8},\n        {0.1538461446762085, 9.140260083262505E-9},\n        {0.13333332538604736, 9.220590270857665E-9},\n        {0.11764700710773468, 1.2393345855018391E-8},\n        {0.10526403784751892, 8.251545029714408E-9},\n        {0.0952233225107193, 1.2675934823758863E-8},\n        {0.08713622391223907, 1.1430250008909141E-8},\n        {0.07842259109020233, 2.404307984052299E-9},\n        {0.08371849358081818, 1.176342548272881E-8},\n        {0.030589580535888672, 1.2958646899018938E-9},\n        {0.14982303977012634, 1.225743062930824E-8},\n    };",
        "begin_line": 110,
        "end_line": 127,
        "comment": " Coefficients for slowLog. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_QUICK_COEF",
        "snippet": "    private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
        "begin_line": 130,
        "end_line": 140,
        "comment": " Coefficients for log, when input 0.99 < x < 1.01. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF",
        "snippet": "    private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
        "begin_line": 143,
        "end_line": 150,
        "comment": " Coefficients for log in the range of 1.0 < x < 1.0 + 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.SINE_TABLE_A",
        "snippet": "    private static final double SINE_TABLE_A[] = new double[14];",
        "begin_line": 153,
        "end_line": 153,
        "comment": " Sine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.SINE_TABLE_B",
        "snippet": "    private static final double SINE_TABLE_B[] = new double[14];",
        "begin_line": 156,
        "end_line": 156,
        "comment": " Sine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.COSINE_TABLE_A",
        "snippet": "    private static final double COSINE_TABLE_A[] = new double[14];",
        "begin_line": 159,
        "end_line": 159,
        "comment": " Cosine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.COSINE_TABLE_B",
        "snippet": "    private static final double COSINE_TABLE_B[] = new double[14];",
        "begin_line": 162,
        "end_line": 162,
        "comment": " Cosine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TANGENT_TABLE_A",
        "snippet": "    private static final double TANGENT_TABLE_A[] = new double[14];",
        "begin_line": 165,
        "end_line": 165,
        "comment": " Tangent table, used by atan() (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TANGENT_TABLE_B",
        "snippet": "    private static final double TANGENT_TABLE_B[] = new double[14];",
        "begin_line": 168,
        "end_line": 168,
        "comment": " Tangent table, used by atan() (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.RECIP_2PI",
        "snippet": "    private static final long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
        "begin_line": 171,
        "end_line": 189,
        "comment": " Bits of 1/(2*pi), need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.PI_O_4_BITS",
        "snippet": "    private static final long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
        "begin_line": 192,
        "end_line": 194,
        "comment": " Bits of pi/4, need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EIGHTHS",
        "snippet": "    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
        "begin_line": 200,
        "end_line": 200,
        "comment": " Eighths.\n     * This is used by sinQ, because its faster to do a table lookup than\n     * a multiply in this time-critical routine\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.CBRTTWO",
        "snippet": "    private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
        "begin_line": 203,
        "end_line": 207,
        "comment": " Table of 2^((n+2)/3) "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.HEX_40000000",
        "snippet": "    private static final long HEX_40000000 = 0x40000000L; // 1073741824L",
        "begin_line": 220,
        "end_line": 220,
        "comment": " 1073741824L"
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.MASK_30BITS",
        "snippet": "    private static final long MASK_30BITS = -1L - (HEX_40000000 -1); // 0xFFFFFFFFC0000000L;",
        "begin_line": 223,
        "end_line": 223,
        "comment": " 0xFFFFFFFFC0000000L;"
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TWO_POWER_52",
        "snippet": "    private static final double TWO_POWER_52 = 4503599627370496.0;",
        "begin_line": 226,
        "end_line": 226,
        "comment": " 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE",
        "snippet": "    public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Default Tolerance for having a value considered zero. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8772222695580707260L;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.entries",
        "snippet": "    private final OpenIntToDoubleHashMap entries;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Entries of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.virtualSize",
        "snippet": "    private final int virtualSize;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Dimension of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.epsilon",
        "snippet": "    private final double epsilon;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Tolerance for having a value considered zero. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapEntry",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapEntry.iter",
        "snippet": "        private final Iterator iter;",
        "begin_line": 861,
        "end_line": 861,
        "comment": " Iterator pointing to the entry. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapSparseIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapSparseIterator.iter",
        "snippet": "        private final Iterator iter;",
        "begin_line": 899,
        "end_line": 899,
        "comment": " Underlying iterator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapSparseIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapSparseIterator.current",
        "snippet": "        private final Entry current;",
        "begin_line": 901,
        "end_line": 901,
        "comment": " Current entry. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE",
        "snippet": "    protected static final byte FREE    = 0;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Status indicator for free table entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL",
        "snippet": "    protected static final byte FULL    = 1;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Status indicator for full table entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED",
        "snippet": "    protected static final byte REMOVED = 2;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Status indicator for removed table entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3646337053166149105L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.LOAD_FACTOR",
        "snippet": "    private static final float LOAD_FACTOR = 0.5f;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Load factor for the map. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE",
        "snippet": "    private static final int DEFAULT_EXPECTED_SIZE = 16;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Default starting size.\n     * <p>This must be a power of two for bit mask to work properly. </p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER",
        "snippet": "    private static final int RESIZE_MULTIPLIER = 2;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Multiplier for size growth when map fills up.\n     * <p>This must be a power of two for bit mask to work properly. </p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT",
        "snippet": "    private static final int PERTURB_SHIFT = 5;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Number of bits to perturb the index when probing for collision resolution. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.keys",
        "snippet": "    private int[] keys;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " Keys table. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.values",
        "snippet": "    private double[] values;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Values table. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.states",
        "snippet": "    private byte[] states;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " States table. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.missingEntries",
        "snippet": "    private final double missingEntries;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Return value for missing entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.size",
        "snippet": "    private int size;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Current size of the map. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.mask",
        "snippet": "    private int mask;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Bit mask for hash values. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.count",
        "snippet": "    private transient int count;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Modifications count. "
    },
    {
        "class_name": "org.apache.commons.math.util.Iterator",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.Iterator.referenceCount",
        "snippet": "        private final int referenceCount;",
        "begin_line": 487,
        "end_line": 487,
        "comment": " Reference modification count. "
    },
    {
        "class_name": "org.apache.commons.math.util.Iterator",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.Iterator.current",
        "snippet": "        private int current;",
        "begin_line": 490,
        "end_line": 490,
        "comment": " Index of current element. "
    },
    {
        "class_name": "org.apache.commons.math.util.Iterator",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.Iterator.next",
        "snippet": "        private int next;",
        "begin_line": 493,
        "end_line": 493,
        "comment": " Index of next element. "
    }
]