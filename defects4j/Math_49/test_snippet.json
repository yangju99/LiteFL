[
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.SparseRealVectorTestImpl(double[])",
        "snippet": "        public SparseRealVectorTestImpl(double[] d) {\n            data = d.clone();\n        }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 13)-(line 86,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.unsupported()",
        "snippet": "        private UnsupportedOperationException unsupported() {\n            return new UnsupportedOperationException(\"Not supported, unneeded for test purposes\");\n        }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 13)-(line 90,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.map(org.apache.commons.math.analysis.UnivariateRealFunction)",
        "snippet": "        @Override\n        public RealVector map(UnivariateRealFunction function) {\n            throw unsupported();\n        }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 13)-(line 95,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)",
        "snippet": "        @Override\n        public RealVector mapToSelf(UnivariateRealFunction function) {\n            throw unsupported();\n        }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 100,col 13)-(line 100,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.iterator()",
        "snippet": "        @Override\n        public Iterator<Entry> iterator() {\n            throw unsupported();\n        }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 13)-(line 105,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.copy()",
        "snippet": "        @Override\n        public AbstractRealVector copy() {\n            return new SparseRealVectorTestImpl(data);\n        }\n",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 13)-(line 110,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.add(org.apache.commons.math.linear.RealVector)",
        "snippet": "        @Override\n        public RealVector add(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 13)-(line 115,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.add(double[])",
        "snippet": "        @Override\n        public RealVector add(double[] v) {\n            throw unsupported();\n        }\n",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 120,col 13)-(line 120,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.subtract(org.apache.commons.math.linear.RealVector)",
        "snippet": "        @Override\n        public RealVector subtract(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 125,col 13)-(line 125,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.subtract(double[])",
        "snippet": "        @Override\n        public RealVector subtract(double[] v) {\n            throw unsupported();\n        }\n",
        "begin_line": 128,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 130,col 13)-(line 130,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAdd(double)",
        "snippet": "        @Override\n        public RealVector mapAdd(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 133,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 135,col 13)-(line 135,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAddToSelf(double)",
        "snippet": "        @Override\n        public RealVector mapAddToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 138,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 140,col 13)-(line 140,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSubtract(double)",
        "snippet": "        @Override\n        public RealVector mapSubtract(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 143,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 13)-(line 145,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSubtractToSelf(double)",
        "snippet": "        @Override\n        public RealVector mapSubtractToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 148,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 13)-(line 150,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapMultiply(double)",
        "snippet": "        @Override\n        public RealVector mapMultiply(double d) {\n            double[] out = new double[data.length];\n            for (int i = 0; i < data.length; i++) {\n                out[i] = data[i] * d;\n            }\n            return new OpenMapRealVector(out);\n        }\n",
        "begin_line": 153,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 155,col 13)-(line 155,col 51)",
            "(line 156,col 13)-(line 158,col 13)",
            "(line 159,col 13)-(line 159,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapMultiplyToSelf(double)",
        "snippet": "        @Override\n        public RealVector mapMultiplyToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 162,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 164,col 13)-(line 164,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapDivide(double)",
        "snippet": "        @Override\n        public RealVector mapDivide(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 167,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 169,col 13)-(line 169,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapDivideToSelf(double)",
        "snippet": "        @Override\n        public RealVector mapDivideToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 172,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 13)-(line 174,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.ebeMultiply(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector ebeMultiply(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 178,col 13)-(line 178,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.ebeMultiply(double[])",
        "snippet": "        @Override\n        public RealVector ebeMultiply(double[] v) {\n            throw unsupported();\n        }\n",
        "begin_line": 181,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 183,col 13)-(line 183,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.ebeDivide(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector ebeDivide(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 186,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 187,col 13)-(line 187,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.ebeDivide(double[])",
        "snippet": "        @Override\n        public RealVector ebeDivide(double[] v) {\n            throw unsupported();\n        }\n",
        "begin_line": 190,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 192,col 13)-(line 192,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getData()",
        "snippet": "        @Override\n        public double[] getData() {\n            return data.clone();\n        }\n",
        "begin_line": 195,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 197,col 13)-(line 197,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.dotProduct(org.apache.commons.math.linear.RealVector)",
        "snippet": "        @Override\n        public double dotProduct(RealVector v) {\n            double dot = 0;\n            for (int i = 0; i < data.length; i++) {\n                dot += data[i] * v.getEntry(i);\n            }\n            return dot;\n        }\n",
        "begin_line": 200,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 202,col 13)-(line 202,col 27)",
            "(line 203,col 13)-(line 205,col 13)",
            "(line 206,col 13)-(line 206,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.dotProduct(double[])",
        "snippet": "        @Override\n        public double dotProduct(double[] v) {\n            double dot = 0;\n            for (int i = 0; i < data.length; i++) {\n                dot += data[i] * v[i];\n            }\n            return dot;\n        }\n",
        "begin_line": 209,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 211,col 13)-(line 211,col 27)",
            "(line 212,col 13)-(line 214,col 13)",
            "(line 215,col 13)-(line 215,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getNorm()",
        "snippet": "        @Override\n        public double getNorm() {\n            throw unsupported();\n        }\n",
        "begin_line": 218,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 220,col 13)-(line 220,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getL1Norm()",
        "snippet": "        @Override\n        public double getL1Norm() {\n            throw unsupported();\n        }\n",
        "begin_line": 223,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 225,col 13)-(line 225,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getLInfNorm()",
        "snippet": "        @Override\n        public double getLInfNorm() {\n            throw unsupported();\n        }\n",
        "begin_line": 228,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 230,col 13)-(line 230,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getDistance(org.apache.commons.math.linear.RealVector)",
        "snippet": "        @Override\n        public double getDistance(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 233,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 235,col 13)-(line 235,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getDistance(double[])",
        "snippet": "        @Override\n        public double getDistance(double[] v) {\n            throw unsupported();\n        }\n",
        "begin_line": 238,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 240,col 13)-(line 240,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getL1Distance(org.apache.commons.math.linear.RealVector)",
        "snippet": "        @Override\n        public double getL1Distance(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 245,col 13)-(line 245,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getL1Distance(double[])",
        "snippet": "        @Override\n        public double getL1Distance(double[] v) {\n            throw unsupported();\n        }\n",
        "begin_line": 248,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 250,col 13)-(line 250,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getLInfDistance(org.apache.commons.math.linear.RealVector)",
        "snippet": "        @Override\n        public double getLInfDistance(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 253,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 255,col 13)-(line 255,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getLInfDistance(double[])",
        "snippet": "        @Override\n        public double getLInfDistance(double[] v) {\n            throw unsupported();\n        }\n",
        "begin_line": 258,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 260,col 13)-(line 260,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.unitVector()",
        "snippet": "        @Override\n        public RealVector unitVector() {\n            throw unsupported();\n        }\n",
        "begin_line": 263,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 265,col 13)-(line 265,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.unitize()",
        "snippet": "        @Override\n        public void unitize() {\n            throw unsupported();\n        }\n",
        "begin_line": 268,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 270,col 13)-(line 270,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.projection(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector projection(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 273,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 274,col 13)-(line 274,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.projection(double[])",
        "snippet": "        @Override\n        public RealVector projection(double[] v) {\n            throw unsupported();\n        }\n",
        "begin_line": 277,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 279,col 13)-(line 279,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.outerProduct(org.apache.commons.math.linear.RealVector)",
        "snippet": "        @Override\n        public RealMatrix outerProduct(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 282,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 284,col 13)-(line 284,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.outerProduct(double[])",
        "snippet": "        @Override\n        public RealMatrix outerProduct(double[] v) {\n            throw unsupported();\n        }\n",
        "begin_line": 287,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 289,col 13)-(line 289,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getEntry(int)",
        "snippet": "        public double getEntry(int index) {\n            return data[index];\n        }\n",
        "begin_line": 292,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 293,col 13)-(line 293,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getDimension()",
        "snippet": "        public int getDimension() {\n            return data.length;\n        }\n",
        "begin_line": 296,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 297,col 13)-(line 297,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.append(org.apache.commons.math.linear.RealVector)",
        "snippet": "        public RealVector append(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 300,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 301,col 13)-(line 301,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.append(double)",
        "snippet": "        public RealVector append(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 304,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 305,col 13)-(line 305,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.append(double[])",
        "snippet": "        public RealVector append(double[] a) {\n            throw unsupported();\n        }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 309,col 13)-(line 309,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getSubVector(int, int)",
        "snippet": "        public RealVector getSubVector(int index, int n) {\n            throw unsupported();\n        }\n",
        "begin_line": 312,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 313,col 13)-(line 313,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.setEntry(int, double)",
        "snippet": "        public void setEntry(int index, double value) {\n            data[index] = value;\n        }\n",
        "begin_line": 316,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 317,col 13)-(line 317,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.setSubVector(int, org.apache.commons.math.linear.RealVector)",
        "snippet": "        @Override\n        public void setSubVector(int index, RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 320,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 322,col 13)-(line 322,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.setSubVector(int, double[])",
        "snippet": "        @Override\n        public void setSubVector(int index, double[] v) {\n            throw unsupported();\n        }\n",
        "begin_line": 325,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 327,col 13)-(line 327,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.set(double)",
        "snippet": "        @Override\n        public void set(double value) {\n            throw unsupported();\n        }\n",
        "begin_line": 330,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 332,col 13)-(line 332,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.toArray()",
        "snippet": "        @Override\n        public double[] toArray() {\n            throw unsupported();\n        }\n",
        "begin_line": 335,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 337,col 13)-(line 337,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.isNaN()",
        "snippet": "        public boolean isNaN() {\n            throw unsupported();\n        }\n",
        "begin_line": 340,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 341,col 13)-(line 341,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTestImpl.isInfinite()",
        "snippet": "        public boolean isInfinite() {\n            throw unsupported();\n        }\n",
        "begin_line": 344,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 345,col 13)-(line 345,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testConstructors()",
        "snippet": "    @Test\n    public void testConstructors() {\n\n        OpenMapRealVector v0 = new OpenMapRealVector();\n        Assert.assertEquals(\"testData len\", 0, v0.getDimension());\n\n        OpenMapRealVector v1 = new OpenMapRealVector(7);\n        Assert.assertEquals(\"testData len\", 7, v1.getDimension());\n        Assert.assertEquals(\"testData is 0.0 \", 0.0, v1.getEntry(6), 0);\n\n        OpenMapRealVector v3 = new OpenMapRealVector(vec1);\n        Assert.assertEquals(\"testData len\", 3, v3.getDimension());\n        Assert.assertEquals(\"testData is 2.0 \", 2.0, v3.getEntry(1), 0);\n\n        //SparseRealVector v4 = new SparseRealVector(vec4, 3, 2);\n        //Assert.assertEquals(\"testData len\", 2, v4.getDimension());\n        //Assert.assertEquals(\"testData is 4.0 \", 4.0, v4.getEntry(0));\n        //try {\n        //    new SparseRealVector(vec4, 8, 3);\n        //    Assert.fail(\"MathIllegalArgumentException expected\");\n        //} catch (MathIllegalArgumentException ex) {\n            // expected behavior\n        //}\n\n        RealVector v5_i = new OpenMapRealVector(dvec1);\n        Assert.assertEquals(\"testData len\", 9, v5_i.getDimension());\n        Assert.assertEquals(\"testData is 9.0 \", 9.0, v5_i.getEntry(8), 0);\n\n        OpenMapRealVector v5 = new OpenMapRealVector(dvec1);\n        Assert.assertEquals(\"testData len\", 9, v5.getDimension());\n        Assert.assertEquals(\"testData is 9.0 \", 9.0, v5.getEntry(8), 0);\n\n        OpenMapRealVector v7 = new OpenMapRealVector(v1);\n        Assert.assertEquals(\"testData len\", 7, v7.getDimension());\n        Assert.assertEquals(\"testData is 0.0 \", 0.0, v7.getEntry(6), 0);\n\n        SparseRealVectorTestImpl v7_i = new SparseRealVectorTestImpl(vec1);\n\n        OpenMapRealVector v7_2 = new OpenMapRealVector(v7_i);\n        Assert.assertEquals(\"testData len\", 3, v7_2.getDimension());\n        Assert.assertEquals(\"testData is 0.0 \", 2.0d, v7_2.getEntry(1), 0);\n\n        OpenMapRealVector v8 = new OpenMapRealVector(v1);\n        Assert.assertEquals(\"testData len\", 7, v8.getDimension());\n        Assert.assertEquals(\"testData is 0.0 \", 0.0, v8.getEntry(6), 0);\n\n    }\n",
        "begin_line": 350,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 55)",
            "(line 354,col 9)-(line 354,col 66)",
            "(line 356,col 9)-(line 356,col 56)",
            "(line 357,col 9)-(line 357,col 66)",
            "(line 358,col 9)-(line 358,col 72)",
            "(line 360,col 9)-(line 360,col 59)",
            "(line 361,col 9)-(line 361,col 66)",
            "(line 362,col 9)-(line 362,col 72)",
            "(line 374,col 9)-(line 374,col 55)",
            "(line 375,col 9)-(line 375,col 68)",
            "(line 376,col 9)-(line 376,col 74)",
            "(line 378,col 9)-(line 378,col 60)",
            "(line 379,col 9)-(line 379,col 66)",
            "(line 380,col 9)-(line 380,col 72)",
            "(line 382,col 9)-(line 382,col 57)",
            "(line 383,col 9)-(line 383,col 66)",
            "(line 384,col 9)-(line 384,col 72)",
            "(line 386,col 9)-(line 386,col 75)",
            "(line 388,col 9)-(line 388,col 61)",
            "(line 389,col 9)-(line 389,col 68)",
            "(line 390,col 9)-(line 390,col 75)",
            "(line 392,col 9)-(line 392,col 57)",
            "(line 393,col 9)-(line 393,col 66)",
            "(line 394,col 9)-(line 394,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut()",
        "snippet": "    @Test\n    public void testDataInOut() {\n\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v4 = new OpenMapRealVector(vec4);\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        RealVector v_append_1 = v1.append(v2);\n        Assert.assertEquals(\"testData len\", 6, v_append_1.getDimension());\n        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_1.getEntry(3), 0);\n\n        RealVector v_append_2 = v1.append(2.0);\n        Assert.assertEquals(\"testData len\", 4, v_append_2.getDimension());\n        Assert.assertEquals(\"testData is 2.0 \", 2.0, v_append_2.getEntry(3), 0);\n\n        RealVector v_append_3 = v1.append(vec2);\n        Assert.assertEquals(\"testData len\", 6, v_append_3.getDimension());\n        Assert.assertEquals(\"testData is  \", 4.0, v_append_3.getEntry(3), 0);\n\n        RealVector v_append_4 = v1.append(v2_t);\n        Assert.assertEquals(\"testData len\", 6, v_append_4.getDimension());\n        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_4.getEntry(3), 0);\n\n        RealVector vout5 = v4.getSubVector(3, 3);\n        Assert.assertEquals(\"testData len\", 3, vout5.getDimension());\n        Assert.assertEquals(\"testData is 4.0 \", 5.0, vout5.getEntry(1), 0);\n        try {\n            v4.getSubVector(3, 7);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException ex) {\n            // expected behavior\n        }\n\n        OpenMapRealVector v_set1 = v1.copy();\n        v_set1.setEntry(1, 11.0);\n        Assert.assertEquals(\"testData is 11.0 \", 11.0, v_set1.getEntry(1), 0);\n        try {\n            v_set1.setEntry(3, 11.0);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException ex) {\n            // expected behavior\n        }\n\n        OpenMapRealVector v_set2 = v4.copy();\n        v_set2.setSubVector(3, v1);\n        Assert.assertEquals(\"testData is 1.0 \", 1.0, v_set2.getEntry(3), 0);\n        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set2.getEntry(6), 0);\n        try {\n            v_set2.setSubVector(7, v1);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException ex) {\n            // expected behavior\n        }\n\n        OpenMapRealVector v_set3 = v1.copy();\n        v_set3.set(13.0);\n        Assert.assertEquals(\"testData is 13.0 \", 13.0, v_set3.getEntry(2), 0);\n\n        try {\n            v_set3.getEntry(23);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException ex) {\n            // expected behavior\n        }\n\n        OpenMapRealVector v_set4 = v4.copy();\n        v_set4.setSubVector(3, v2_t);\n        Assert.assertEquals(\"testData is 1.0 \", 4.0, v_set4.getEntry(3), 0);\n        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set4.getEntry(6), 0);\n        try {\n            v_set4.setSubVector(7, v2_t);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException ex) {\n            // expected behavior\n        }\n\n\n    }\n",
        "begin_line": 398,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 59)",
            "(line 402,col 9)-(line 402,col 59)",
            "(line 403,col 9)-(line 403,col 59)",
            "(line 404,col 9)-(line 404,col 75)",
            "(line 406,col 9)-(line 406,col 46)",
            "(line 407,col 9)-(line 407,col 74)",
            "(line 408,col 9)-(line 408,col 80)",
            "(line 410,col 9)-(line 410,col 47)",
            "(line 411,col 9)-(line 411,col 74)",
            "(line 412,col 9)-(line 412,col 80)",
            "(line 414,col 9)-(line 414,col 48)",
            "(line 415,col 9)-(line 415,col 74)",
            "(line 416,col 9)-(line 416,col 77)",
            "(line 418,col 9)-(line 418,col 48)",
            "(line 419,col 9)-(line 419,col 74)",
            "(line 420,col 9)-(line 420,col 80)",
            "(line 422,col 9)-(line 422,col 49)",
            "(line 423,col 9)-(line 423,col 69)",
            "(line 424,col 9)-(line 424,col 75)",
            "(line 425,col 9)-(line 430,col 9)",
            "(line 432,col 9)-(line 432,col 45)",
            "(line 433,col 9)-(line 433,col 33)",
            "(line 434,col 9)-(line 434,col 78)",
            "(line 435,col 9)-(line 440,col 9)",
            "(line 442,col 9)-(line 442,col 45)",
            "(line 443,col 9)-(line 443,col 35)",
            "(line 444,col 9)-(line 444,col 76)",
            "(line 445,col 9)-(line 445,col 76)",
            "(line 446,col 9)-(line 451,col 9)",
            "(line 453,col 9)-(line 453,col 45)",
            "(line 454,col 9)-(line 454,col 25)",
            "(line 455,col 9)-(line 455,col 78)",
            "(line 457,col 9)-(line 462,col 9)",
            "(line 464,col 9)-(line 464,col 45)",
            "(line 465,col 9)-(line 465,col 37)",
            "(line 466,col 9)-(line 466,col 76)",
            "(line 467,col 9)-(line 467,col 76)",
            "(line 468,col 9)-(line 473,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions()",
        "snippet": "    @Test\n    public void testMapFunctions() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n\n        //octave =  v1 .+ 2.0\n        RealVector v_mapAdd = v1.mapAdd(2.0d);\n        double[] result_mapAdd = {3d, 4d, 5d};\n        assertClose(\"compare vectors\" ,result_mapAdd,v_mapAdd.getData(),normTolerance);\n\n        //octave =  v1 .+ 2.0\n        RealVector v_mapAddToSelf = v1.copy();\n        v_mapAddToSelf.mapAddToSelf(2.0d);\n        double[] result_mapAddToSelf = {3d, 4d, 5d};\n        assertClose(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.getData(),normTolerance);\n\n        //octave =  v1 .- 2.0\n        RealVector v_mapSubtract = v1.mapSubtract(2.0d);\n        double[] result_mapSubtract = {-1d, 0d, 1d};\n        assertClose(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.getData(),normTolerance);\n\n        //octave =  v1 .- 2.0\n        RealVector v_mapSubtractToSelf = v1.copy();\n        v_mapSubtractToSelf.mapSubtractToSelf(2.0d);\n        double[] result_mapSubtractToSelf = {-1d, 0d, 1d};\n        assertClose(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData(),normTolerance);\n\n        //octave =  v1 .* 2.0\n        RealVector v_mapMultiply = v1.mapMultiply(2.0d);\n        double[] result_mapMultiply = {2d, 4d, 6d};\n        assertClose(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.getData(),normTolerance);\n\n        //octave =  v1 .* 2.0\n        RealVector v_mapMultiplyToSelf = v1.copy();\n        v_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);\n        double[] result_mapMultiplyToSelf = {2d, 4d, 6d};\n        assertClose(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData(),normTolerance);\n\n        //octave =  v1 ./ 2.0\n        RealVector v_mapDivide = v1.mapDivide(2.0d);\n        double[] result_mapDivide = {.5d, 1d, 1.5d};\n        assertClose(\"compare vectors\" ,result_mapDivide,v_mapDivide.getData(),normTolerance);\n\n        //octave =  v1 ./ 2.0\n        RealVector v_mapDivideToSelf = v1.copy();\n        v_mapDivideToSelf.mapDivideToSelf(2.0d);\n        double[] result_mapDivideToSelf = {.5d, 1d, 1.5d};\n        assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.getData(),normTolerance);\n\n        //octave =  v1 .^ 2.0\n        RealVector v_mapPow = v1.map(new Power(2));\n        double[] result_mapPow = {1d, 4d, 9d};\n        assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.getData(),normTolerance);\n\n        //octave =  v1 .^ 2.0\n        RealVector v_mapPowToSelf = v1.copy();\n        v_mapPowToSelf.mapToSelf(new Power(2));\n        double[] result_mapPowToSelf = {1d, 4d, 9d};\n        assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.getData(),normTolerance);\n\n        //octave =  exp(v1)\n        RealVector v_mapExp = v1.map(new Exp());\n        double[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n        assertClose(\"compare vectors\" ,result_mapExp,v_mapExp.getData(),normTolerance);\n\n        //octave =  exp(v1)\n        RealVector v_mapExpToSelf = v1.copy();\n        v_mapExpToSelf.mapToSelf(new Exp());\n        double[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n        assertClose(\"compare vectors\" ,result_mapExpToSelf,v_mapExpToSelf.getData(),normTolerance);\n\n\n        //octave =  ???\n        RealVector v_mapExpm1 = v1.map(new Expm1());\n        double[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n        assertClose(\"compare vectors\" ,result_mapExpm1,v_mapExpm1.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapExpm1ToSelf = v1.copy();\n        v_mapExpm1ToSelf.mapToSelf(new Expm1());\n        double[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n        assertClose(\"compare vectors\" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.getData(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLog = v1.map(new Log());\n        double[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n        assertClose(\"compare vectors\" ,result_mapLog,v_mapLog.getData(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLogToSelf = v1.copy();\n        v_mapLogToSelf.mapToSelf(new Log());\n        double[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n        assertClose(\"compare vectors\" ,result_mapLogToSelf,v_mapLogToSelf.getData(),normTolerance);\n\n        //octave =  log10(v1)\n        RealVector v_mapLog10 = v1.map(new Log10());\n        double[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n        assertClose(\"compare vectors\" ,result_mapLog10,v_mapLog10.getData(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLog10ToSelf = v1.copy();\n        v_mapLog10ToSelf.mapToSelf(new Log10());\n        double[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n        assertClose(\"compare vectors\" ,result_mapLog10ToSelf,v_mapLog10ToSelf.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapLog1p = v1.map(new Log1p());\n        double[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n        assertClose(\"compare vectors\" ,result_mapLog1p,v_mapLog1p.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapLog1pToSelf = v1.copy();\n        v_mapLog1pToSelf.mapToSelf(new Log1p());\n        double[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n        assertClose(\"compare vectors\" ,result_mapLog1pToSelf,v_mapLog1pToSelf.getData(),normTolerance);\n\n        //octave =  cosh(v1)\n        RealVector v_mapCosh = v1.map(new Cosh());\n        double[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n        assertClose(\"compare vectors\" ,result_mapCosh,v_mapCosh.getData(),normTolerance);\n\n        //octave =  cosh(v1)\n        RealVector v_mapCoshToSelf = v1.copy();\n        v_mapCoshToSelf.mapToSelf(new Cosh());\n        double[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n        assertClose(\"compare vectors\" ,result_mapCoshToSelf,v_mapCoshToSelf.getData(),normTolerance);\n\n        //octave =  sinh(v1)\n        RealVector v_mapSinh = v1.map(new Sinh());\n        double[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n        assertClose(\"compare vectors\" ,result_mapSinh,v_mapSinh.getData(),normTolerance);\n\n        //octave =  sinh(v1)\n        RealVector v_mapSinhToSelf = v1.copy();\n        v_mapSinhToSelf.mapToSelf(new Sinh());\n        double[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n        assertClose(\"compare vectors\" ,result_mapSinhToSelf,v_mapSinhToSelf.getData(),normTolerance);\n\n        //octave =  tanh(v1)\n        RealVector v_mapTanh = v1.map(new Tanh());\n        double[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanh,v_mapTanh.getData(),normTolerance);\n\n        //octave =  tanh(v1)\n        RealVector v_mapTanhToSelf = v1.copy();\n        v_mapTanhToSelf.mapToSelf(new Tanh());\n        double[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanhToSelf,v_mapTanhToSelf.getData(),normTolerance);\n\n        //octave =  cos(v1)\n        RealVector v_mapCos = v1.map(new Cos());\n        double[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n        assertClose(\"compare vectors\" ,result_mapCos,v_mapCos.getData(),normTolerance);\n\n        //octave =  cos(v1)\n        RealVector v_mapCosToSelf = v1.copy();\n        v_mapCosToSelf.mapToSelf(new Cos());\n        double[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n        assertClose(\"compare vectors\" ,result_mapCosToSelf,v_mapCosToSelf.getData(),normTolerance);\n\n        //octave =  sin(v1)\n        RealVector v_mapSin = v1.map(new Sin());\n        double[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n        assertClose(\"compare vectors\" ,result_mapSin,v_mapSin.getData(),normTolerance);\n\n        //octave =  sin(v1)\n        RealVector v_mapSinToSelf = v1.copy();\n        v_mapSinToSelf.mapToSelf(new Sin());\n        double[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n        assertClose(\"compare vectors\" ,result_mapSinToSelf,v_mapSinToSelf.getData(),normTolerance);\n\n        //octave =  tan(v1)\n        RealVector v_mapTan = v1.map(new Tan());\n        double[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n        assertClose(\"compare vectors\" ,result_mapTan,v_mapTan.getData(),normTolerance);\n\n        //octave =  tan(v1)\n        RealVector v_mapTanToSelf = v1.copy();\n        v_mapTanToSelf.mapToSelf(new Tan());\n        double[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanToSelf,v_mapTanToSelf.getData(),normTolerance);\n\n        double[] vat_a = {0d, 0.5d, 1.0d};\n        OpenMapRealVector vat = new OpenMapRealVector(vat_a);\n\n        //octave =  acos(vat)\n        RealVector v_mapAcos = vat.map(new Acos());\n        double[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n        assertClose(\"compare vectors\" ,result_mapAcos,v_mapAcos.getData(),normTolerance);\n\n        //octave =  acos(vat)\n        RealVector v_mapAcosToSelf = vat.copy();\n        v_mapAcosToSelf.mapToSelf(new Acos());\n        double[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n        assertClose(\"compare vectors\" ,result_mapAcosToSelf,v_mapAcosToSelf.getData(),normTolerance);\n\n        //octave =  asin(vat)\n        RealVector v_mapAsin = vat.map(new Asin());\n        double[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n        assertClose(\"compare vectors\" ,result_mapAsin,v_mapAsin.getData(),normTolerance);\n\n        //octave =  asin(vat)\n        RealVector v_mapAsinToSelf = vat.copy();\n        v_mapAsinToSelf.mapToSelf(new Asin());\n        double[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n        assertClose(\"compare vectors\" ,result_mapAsinToSelf,v_mapAsinToSelf.getData(),normTolerance);\n\n        //octave =  atan(vat)\n        RealVector v_mapAtan = vat.map(new Atan());\n        double[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n        assertClose(\"compare vectors\" ,result_mapAtan,v_mapAtan.getData(),normTolerance);\n\n        //octave =  atan(vat)\n        RealVector v_mapAtanToSelf = vat.copy();\n        v_mapAtanToSelf.mapToSelf(new Atan());\n        double[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n        assertClose(\"compare vectors\" ,result_mapAtanToSelf,v_mapAtanToSelf.getData(),normTolerance);\n\n        //octave =  v1 .^-1\n        RealVector v_mapInv = v1.map(new Inverse());\n        double[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};\n        assertClose(\"compare vectors\" ,result_mapInv,v_mapInv.getData(),normTolerance);\n\n        //octave =  v1 .^-1\n        RealVector v_mapInvToSelf = v1.copy();\n        v_mapInvToSelf.mapToSelf(new Inverse());\n        double[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};\n        assertClose(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.getData(),normTolerance);\n\n        double[] abs_a = {-1.0d, 0.0d, 1.0d};\n        OpenMapRealVector abs_v = new OpenMapRealVector(abs_a);\n\n        //octave =  abs(abs_v)\n        RealVector v_mapAbs = abs_v.map(new Abs());\n        double[] result_mapAbs = {1d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapAbs,v_mapAbs.getData(),normTolerance);\n\n        //octave = abs(abs_v)\n        RealVector v_mapAbsToSelf = abs_v.copy();\n        v_mapAbsToSelf.mapToSelf(new Abs());\n        double[] result_mapAbsToSelf = {1d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapAbsToSelf,v_mapAbsToSelf.getData(),normTolerance);\n\n        //octave =   sqrt(v1)\n        RealVector v_mapSqrt = v1.map(new Sqrt());\n        double[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n        assertClose(\"compare vectors\" ,result_mapSqrt,v_mapSqrt.getData(),normTolerance);\n\n        //octave =  sqrt(v1)\n        RealVector v_mapSqrtToSelf = v1.copy();\n        v_mapSqrtToSelf.mapToSelf(new Sqrt());\n        double[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n        assertClose(\"compare vectors\" ,result_mapSqrtToSelf,v_mapSqrtToSelf.getData(),normTolerance);\n\n        double[] cbrt_a = {-2.0d, 0.0d, 2.0d};\n        OpenMapRealVector cbrt_v = new OpenMapRealVector(cbrt_a);\n\n        //octave =  ???\n        RealVector v_mapCbrt = cbrt_v.map(new Cbrt());\n        double[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};\n        assertClose(\"compare vectors\" ,result_mapCbrt,v_mapCbrt.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapCbrtToSelf = cbrt_v.copy();\n        v_mapCbrtToSelf.mapToSelf(new Cbrt());\n        double[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};\n        assertClose(\"compare vectors\" ,result_mapCbrtToSelf,v_mapCbrtToSelf.getData(),normTolerance);\n\n        double[] ceil_a = {-1.1d, 0.9d, 1.1d};\n        OpenMapRealVector ceil_v = new OpenMapRealVector(ceil_a);\n\n        //octave =  ceil(ceil_v)\n        RealVector v_mapCeil = ceil_v.map(new Ceil());\n        double[] result_mapCeil = {-1d,1d,2d};\n        assertClose(\"compare vectors\" ,result_mapCeil,v_mapCeil.getData(),normTolerance);\n\n        //octave = ceil(ceil_v)\n        RealVector v_mapCeilToSelf = ceil_v.copy();\n        v_mapCeilToSelf.mapToSelf(new Ceil());\n        double[] result_mapCeilToSelf =  {-1d,1d,2d};\n        assertClose(\"compare vectors\" ,result_mapCeilToSelf,v_mapCeilToSelf.getData(),normTolerance);\n\n        //octave =  floor(ceil_v)\n        RealVector v_mapFloor = ceil_v.map(new Floor());\n        double[] result_mapFloor = {-2d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapFloor,v_mapFloor.getData(),normTolerance);\n\n        //octave = floor(ceil_v)\n        RealVector v_mapFloorToSelf = ceil_v.copy();\n        v_mapFloorToSelf.mapToSelf(new Floor());\n        double[] result_mapFloorToSelf =  {-2d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapFloorToSelf,v_mapFloorToSelf.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapRint = ceil_v.map(new Rint());\n        double[] result_mapRint = {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapRint,v_mapRint.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapRintToSelf = ceil_v.copy();\n        v_mapRintToSelf.mapToSelf(new Rint());\n        double[] result_mapRintToSelf =  {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapRintToSelf,v_mapRintToSelf.getData(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapSignum = ceil_v.map(new Signum());\n        double[] result_mapSignum = {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapSignum,v_mapSignum.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapSignumToSelf = ceil_v.copy();\n        v_mapSignumToSelf.mapToSelf(new Signum());\n        double[] result_mapSignumToSelf =  {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapSignumToSelf,v_mapSignumToSelf.getData(),normTolerance);\n\n\n        // Is with the used resolutions of limited value as test\n        //octave =  ???\n        RealVector v_mapUlp = ceil_v.map(new Ulp());\n        double[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n        assertClose(\"compare vectors\" ,result_mapUlp,v_mapUlp.getData(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapUlpToSelf = ceil_v.copy();\n        v_mapUlpToSelf.mapToSelf(new Ulp());\n        double[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n        assertClose(\"compare vectors\" ,result_mapUlpToSelf,v_mapUlpToSelf.getData(),normTolerance);\n    }\n",
        "begin_line": 478,
        "end_line": 804,
        "comment": "",
        "child_ranges": [
            "(line 480,col 9)-(line 480,col 59)",
            "(line 483,col 9)-(line 483,col 46)",
            "(line 484,col 9)-(line 484,col 46)",
            "(line 485,col 9)-(line 485,col 87)",
            "(line 488,col 9)-(line 488,col 46)",
            "(line 489,col 9)-(line 489,col 42)",
            "(line 490,col 9)-(line 490,col 52)",
            "(line 491,col 9)-(line 491,col 99)",
            "(line 494,col 9)-(line 494,col 56)",
            "(line 495,col 9)-(line 495,col 52)",
            "(line 496,col 9)-(line 496,col 97)",
            "(line 499,col 9)-(line 499,col 51)",
            "(line 500,col 9)-(line 500,col 52)",
            "(line 501,col 9)-(line 501,col 58)",
            "(line 502,col 9)-(line 502,col 109)",
            "(line 505,col 9)-(line 505,col 56)",
            "(line 506,col 9)-(line 506,col 51)",
            "(line 507,col 9)-(line 507,col 97)",
            "(line 510,col 9)-(line 510,col 51)",
            "(line 511,col 9)-(line 511,col 52)",
            "(line 512,col 9)-(line 512,col 57)",
            "(line 513,col 9)-(line 513,col 109)",
            "(line 516,col 9)-(line 516,col 52)",
            "(line 517,col 9)-(line 517,col 52)",
            "(line 518,col 9)-(line 518,col 93)",
            "(line 521,col 9)-(line 521,col 49)",
            "(line 522,col 9)-(line 522,col 48)",
            "(line 523,col 9)-(line 523,col 58)",
            "(line 524,col 9)-(line 524,col 105)",
            "(line 527,col 9)-(line 527,col 51)",
            "(line 528,col 9)-(line 528,col 46)",
            "(line 529,col 9)-(line 529,col 87)",
            "(line 532,col 9)-(line 532,col 46)",
            "(line 533,col 9)-(line 533,col 47)",
            "(line 534,col 9)-(line 534,col 52)",
            "(line 535,col 9)-(line 535,col 99)",
            "(line 538,col 9)-(line 538,col 48)",
            "(line 539,col 9)-(line 539,col 105)",
            "(line 540,col 9)-(line 540,col 87)",
            "(line 543,col 9)-(line 543,col 46)",
            "(line 544,col 9)-(line 544,col 44)",
            "(line 545,col 9)-(line 545,col 111)",
            "(line 546,col 9)-(line 546,col 99)",
            "(line 550,col 9)-(line 550,col 52)",
            "(line 551,col 9)-(line 551,col 95)",
            "(line 552,col 9)-(line 552,col 91)",
            "(line 555,col 9)-(line 555,col 48)",
            "(line 556,col 9)-(line 556,col 48)",
            "(line 557,col 9)-(line 557,col 101)",
            "(line 558,col 9)-(line 558,col 103)",
            "(line 561,col 9)-(line 561,col 48)",
            "(line 562,col 9)-(line 562,col 85)",
            "(line 563,col 9)-(line 563,col 87)",
            "(line 566,col 9)-(line 566,col 46)",
            "(line 567,col 9)-(line 567,col 44)",
            "(line 568,col 9)-(line 568,col 91)",
            "(line 569,col 9)-(line 569,col 99)",
            "(line 572,col 9)-(line 572,col 52)",
            "(line 573,col 9)-(line 573,col 87)",
            "(line 574,col 9)-(line 574,col 91)",
            "(line 577,col 9)-(line 577,col 48)",
            "(line 578,col 9)-(line 578,col 48)",
            "(line 579,col 9)-(line 579,col 93)",
            "(line 580,col 9)-(line 580,col 103)",
            "(line 583,col 9)-(line 583,col 52)",
            "(line 584,col 9)-(line 584,col 97)",
            "(line 585,col 9)-(line 585,col 91)",
            "(line 588,col 9)-(line 588,col 48)",
            "(line 589,col 9)-(line 589,col 48)",
            "(line 590,col 9)-(line 590,col 103)",
            "(line 591,col 9)-(line 591,col 103)",
            "(line 594,col 9)-(line 594,col 50)",
            "(line 595,col 9)-(line 595,col 106)",
            "(line 596,col 9)-(line 596,col 89)",
            "(line 599,col 9)-(line 599,col 47)",
            "(line 600,col 9)-(line 600,col 46)",
            "(line 601,col 9)-(line 601,col 112)",
            "(line 602,col 9)-(line 602,col 101)",
            "(line 605,col 9)-(line 605,col 50)",
            "(line 606,col 9)-(line 606,col 106)",
            "(line 607,col 9)-(line 607,col 89)",
            "(line 610,col 9)-(line 610,col 47)",
            "(line 611,col 9)-(line 611,col 46)",
            "(line 612,col 9)-(line 612,col 112)",
            "(line 613,col 9)-(line 613,col 101)",
            "(line 616,col 9)-(line 616,col 50)",
            "(line 617,col 9)-(line 617,col 105)",
            "(line 618,col 9)-(line 618,col 89)",
            "(line 621,col 9)-(line 621,col 47)",
            "(line 622,col 9)-(line 622,col 46)",
            "(line 623,col 9)-(line 623,col 111)",
            "(line 624,col 9)-(line 624,col 101)",
            "(line 627,col 9)-(line 627,col 48)",
            "(line 628,col 9)-(line 628,col 107)",
            "(line 629,col 9)-(line 629,col 87)",
            "(line 632,col 9)-(line 632,col 46)",
            "(line 633,col 9)-(line 633,col 44)",
            "(line 634,col 9)-(line 634,col 113)",
            "(line 635,col 9)-(line 635,col 99)",
            "(line 638,col 9)-(line 638,col 48)",
            "(line 639,col 9)-(line 639,col 104)",
            "(line 640,col 9)-(line 640,col 87)",
            "(line 643,col 9)-(line 643,col 46)",
            "(line 644,col 9)-(line 644,col 44)",
            "(line 645,col 9)-(line 645,col 110)",
            "(line 646,col 9)-(line 646,col 99)",
            "(line 649,col 9)-(line 649,col 48)",
            "(line 650,col 9)-(line 650,col 106)",
            "(line 651,col 9)-(line 651,col 87)",
            "(line 654,col 9)-(line 654,col 46)",
            "(line 655,col 9)-(line 655,col 44)",
            "(line 656,col 9)-(line 656,col 112)",
            "(line 657,col 9)-(line 657,col 99)",
            "(line 659,col 9)-(line 659,col 42)",
            "(line 660,col 9)-(line 660,col 61)",
            "(line 663,col 9)-(line 663,col 51)",
            "(line 664,col 9)-(line 664,col 88)",
            "(line 665,col 9)-(line 665,col 89)",
            "(line 668,col 9)-(line 668,col 48)",
            "(line 669,col 9)-(line 669,col 46)",
            "(line 670,col 9)-(line 670,col 94)",
            "(line 671,col 9)-(line 671,col 101)",
            "(line 674,col 9)-(line 674,col 51)",
            "(line 675,col 9)-(line 675,col 87)",
            "(line 676,col 9)-(line 676,col 89)",
            "(line 679,col 9)-(line 679,col 48)",
            "(line 680,col 9)-(line 680,col 46)",
            "(line 681,col 9)-(line 681,col 93)",
            "(line 682,col 9)-(line 682,col 101)",
            "(line 685,col 9)-(line 685,col 51)",
            "(line 686,col 9)-(line 686,col 87)",
            "(line 687,col 9)-(line 687,col 89)",
            "(line 690,col 9)-(line 690,col 48)",
            "(line 691,col 9)-(line 691,col 46)",
            "(line 692,col 9)-(line 692,col 93)",
            "(line 693,col 9)-(line 693,col 101)",
            "(line 696,col 9)-(line 696,col 52)",
            "(line 697,col 9)-(line 697,col 66)",
            "(line 698,col 9)-(line 698,col 87)",
            "(line 701,col 9)-(line 701,col 46)",
            "(line 702,col 9)-(line 702,col 48)",
            "(line 703,col 9)-(line 703,col 72)",
            "(line 704,col 9)-(line 704,col 99)",
            "(line 706,col 9)-(line 706,col 45)",
            "(line 707,col 9)-(line 707,col 63)",
            "(line 710,col 9)-(line 710,col 51)",
            "(line 711,col 9)-(line 711,col 44)",
            "(line 712,col 9)-(line 712,col 87)",
            "(line 715,col 9)-(line 715,col 49)",
            "(line 716,col 9)-(line 716,col 44)",
            "(line 717,col 9)-(line 717,col 50)",
            "(line 718,col 9)-(line 718,col 99)",
            "(line 721,col 9)-(line 721,col 50)",
            "(line 722,col 9)-(line 722,col 85)",
            "(line 723,col 9)-(line 723,col 89)",
            "(line 726,col 9)-(line 726,col 47)",
            "(line 727,col 9)-(line 727,col 46)",
            "(line 728,col 9)-(line 728,col 91)",
            "(line 729,col 9)-(line 729,col 101)",
            "(line 731,col 9)-(line 731,col 46)",
            "(line 732,col 9)-(line 732,col 65)",
            "(line 735,col 9)-(line 735,col 54)",
            "(line 736,col 9)-(line 736,col 80)",
            "(line 737,col 9)-(line 737,col 89)",
            "(line 740,col 9)-(line 740,col 51)",
            "(line 741,col 9)-(line 741,col 46)",
            "(line 742,col 9)-(line 742,col 87)",
            "(line 743,col 9)-(line 743,col 101)",
            "(line 745,col 9)-(line 745,col 46)",
            "(line 746,col 9)-(line 746,col 65)",
            "(line 749,col 9)-(line 749,col 54)",
            "(line 750,col 9)-(line 750,col 46)",
            "(line 751,col 9)-(line 751,col 89)",
            "(line 754,col 9)-(line 754,col 51)",
            "(line 755,col 9)-(line 755,col 46)",
            "(line 756,col 9)-(line 756,col 53)",
            "(line 757,col 9)-(line 757,col 101)",
            "(line 760,col 9)-(line 760,col 56)",
            "(line 761,col 9)-(line 761,col 47)",
            "(line 762,col 9)-(line 762,col 91)",
            "(line 765,col 9)-(line 765,col 52)",
            "(line 766,col 9)-(line 766,col 48)",
            "(line 767,col 9)-(line 767,col 54)",
            "(line 768,col 9)-(line 768,col 103)",
            "(line 771,col 9)-(line 771,col 54)",
            "(line 772,col 9)-(line 772,col 46)",
            "(line 773,col 9)-(line 773,col 89)",
            "(line 776,col 9)-(line 776,col 51)",
            "(line 777,col 9)-(line 777,col 46)",
            "(line 778,col 9)-(line 778,col 53)",
            "(line 779,col 9)-(line 779,col 101)",
            "(line 782,col 9)-(line 782,col 58)",
            "(line 783,col 9)-(line 783,col 48)",
            "(line 784,col 9)-(line 784,col 93)",
            "(line 787,col 9)-(line 787,col 53)",
            "(line 788,col 9)-(line 788,col 50)",
            "(line 789,col 9)-(line 789,col 55)",
            "(line 790,col 9)-(line 790,col 105)",
            "(line 795,col 9)-(line 795,col 52)",
            "(line 796,col 9)-(line 796,col 105)",
            "(line 797,col 9)-(line 797,col 87)",
            "(line 800,col 9)-(line 800,col 50)",
            "(line 801,col 9)-(line 801,col 44)",
            "(line 802,col 9)-(line 802,col 111)",
            "(line 803,col 9)-(line 803,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions()",
        "snippet": "    @Test\n    public void testBasicFunctions() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        Assert.assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm, normTolerance);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        Assert.assertEquals(\"compare values  \", 17.0, d_getL1Norm, normTolerance);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        Assert.assertEquals(\"compare values  \", 6.0, d_getLInfNorm, normTolerance);\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        Assert.assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist, normTolerance);\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        Assert.assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2, normTolerance);\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance, normTolerance);\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance_2, normTolerance);\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance, normTolerance);\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance_2, normTolerance);\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        Assert.assertEquals(\"compare val \",32d, dot, normTolerance);\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        Assert.assertEquals(\"compare val \",32d, dot_2, normTolerance);\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        Assert.assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0), normTolerance);\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        Assert.assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0), normTolerance);\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);\n\n        try {\n            v_null.unitVector();\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // expected behavior\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\n        try {\n            v_null.unitize();\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // expected behavior\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n\n    }\n",
        "begin_line": 806,
        "end_line": 929,
        "comment": "",
        "child_ranges": [
            "(line 808,col 9)-(line 808,col 59)",
            "(line 809,col 9)-(line 809,col 59)",
            "(line 810,col 9)-(line 810,col 59)",
            "(line 811,col 9)-(line 811,col 67)",
            "(line 813,col 9)-(line 813,col 75)",
            "(line 816,col 9)-(line 816,col 40)",
            "(line 817,col 9)-(line 817,col 97)",
            "(line 820,col 9)-(line 820,col 44)",
            "(line 821,col 9)-(line 821,col 82)",
            "(line 824,col 9)-(line 824,col 48)",
            "(line 825,col 9)-(line 825,col 83)",
            "(line 828,col 9)-(line 828,col 41)",
            "(line 829,col 9)-(line 829,col 95)",
            "(line 832,col 9)-(line 832,col 45)",
            "(line 833,col 9)-(line 833,col 97)",
            "(line 836,col 9)-(line 836,col 55)",
            "(line 837,col 9)-(line 837,col 84)",
            "(line 839,col 9)-(line 839,col 59)",
            "(line 840,col 9)-(line 840,col 86)",
            "(line 843,col 9)-(line 843,col 59)",
            "(line 844,col 9)-(line 844,col 86)",
            "(line 846,col 9)-(line 846,col 63)",
            "(line 847,col 9)-(line 847,col 88)",
            "(line 850,col 9)-(line 850,col 45)",
            "(line 851,col 9)-(line 851,col 43)",
            "(line 852,col 9)-(line 852,col 78)",
            "(line 854,col 9)-(line 854,col 74)",
            "(line 855,col 9)-(line 855,col 41)",
            "(line 856,col 9)-(line 856,col 45)",
            "(line 857,col 9)-(line 857,col 82)",
            "(line 860,col 9)-(line 860,col 55)",
            "(line 861,col 9)-(line 861,col 51)",
            "(line 862,col 9)-(line 862,col 88)",
            "(line 864,col 9)-(line 864,col 51)",
            "(line 865,col 9)-(line 865,col 53)",
            "(line 866,col 9)-(line 866,col 92)",
            "(line 869,col 9)-(line 869,col 55)",
            "(line 870,col 9)-(line 870,col 53)",
            "(line 871,col 9)-(line 871,col 94)",
            "(line 873,col 9)-(line 873,col 59)",
            "(line 874,col 9)-(line 874,col 55)",
            "(line 875,col 9)-(line 875,col 98)",
            "(line 878,col 9)-(line 878,col 51)",
            "(line 879,col 9)-(line 879,col 56)",
            "(line 880,col 9)-(line 880,col 90)",
            "(line 882,col 9)-(line 882,col 55)",
            "(line 883,col 9)-(line 883,col 58)",
            "(line 884,col 9)-(line 884,col 94)",
            "(line 887,col 9)-(line 887,col 40)",
            "(line 888,col 9)-(line 888,col 68)",
            "(line 891,col 9)-(line 891,col 44)",
            "(line 892,col 9)-(line 892,col 70)",
            "(line 894,col 9)-(line 894,col 56)",
            "(line 895,col 9)-(line 895,col 92)",
            "(line 897,col 9)-(line 897,col 60)",
            "(line 898,col 9)-(line 898,col 94)",
            "(line 900,col 9)-(line 900,col 50)",
            "(line 901,col 9)-(line 901,col 63)",
            "(line 902,col 9)-(line 902,col 99)",
            "(line 904,col 9)-(line 909,col 9)",
            "(line 911,col 9)-(line 911,col 48)",
            "(line 912,col 9)-(line 912,col 28)",
            "(line 913,col 9)-(line 913,col 96)",
            "(line 914,col 9)-(line 919,col 9)",
            "(line 921,col 9)-(line 921,col 52)",
            "(line 922,col 9)-(line 922,col 96)",
            "(line 923,col 9)-(line 923,col 94)",
            "(line 925,col 9)-(line 925,col 56)",
            "(line 926,col 9)-(line 926,col 98)",
            "(line 927,col 9)-(line 927,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct()",
        "snippet": "    @Test\n    public void testOuterProduct() {\n        final OpenMapRealVector u = new OpenMapRealVector(new double[] {1, 2, -3});\n        final OpenMapRealVector v = new OpenMapRealVector(new double[] {4, -2});\n\n        final RealMatrix uv = u.outerProduct(v);\n\n        final double tol = Math.ulp(1d);\n        Assert.assertEquals(4, uv.getEntry(0, 0), tol);\n        Assert.assertEquals(-2, uv.getEntry(0, 1), tol);\n        Assert.assertEquals(8, uv.getEntry(1, 0), tol);\n        Assert.assertEquals(-4, uv.getEntry(1, 1), tol);\n        Assert.assertEquals(-12, uv.getEntry(2, 0), tol);\n        Assert.assertEquals(6, uv.getEntry(2, 1), tol);\n    }\n",
        "begin_line": 931,
        "end_line": 945,
        "comment": "",
        "child_ranges": [
            "(line 933,col 9)-(line 933,col 83)",
            "(line 934,col 9)-(line 934,col 80)",
            "(line 936,col 9)-(line 936,col 48)",
            "(line 938,col 9)-(line 938,col 40)",
            "(line 939,col 9)-(line 939,col 55)",
            "(line 940,col 9)-(line 940,col 56)",
            "(line 941,col 9)-(line 941,col 55)",
            "(line 942,col 9)-(line 942,col 56)",
            "(line 943,col 9)-(line 943,col 57)",
            "(line 944,col 9)-(line 944,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testMisc()",
        "snippet": "    @Test\n    public void testMisc() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n\n        String out1 = v1.toString();\n        Assert.assertTrue(\"some output \",  out1.length()!=0);\n        try {\n            v1.checkVectorDimensions(2);\n            Assert.fail(\"MathIllegalArgumentException expected\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected behavior\n        }\n\n\n    }\n",
        "begin_line": 947,
        "end_line": 961,
        "comment": "",
        "child_ranges": [
            "(line 949,col 9)-(line 949,col 59)",
            "(line 951,col 9)-(line 951,col 36)",
            "(line 952,col 9)-(line 952,col 61)",
            "(line 953,col 9)-(line 958,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testPredicates()",
        "snippet": "    @Test\n    public void testPredicates() {\n\n        OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n\n        Assert.assertFalse(v.isNaN());\n        v.setEntry(1, Double.NaN);\n        Assert.assertTrue(v.isNaN());\n\n        Assert.assertFalse(v.isInfinite());\n        v.setEntry(0, Double.POSITIVE_INFINITY);\n        Assert.assertFalse(v.isInfinite()); // NaN has higher priority than infinity\n        v.setEntry(1, 1);\n        Assert.assertTrue(v.isInfinite());\n\n        v.setEntry(0, 0);\n        Assert.assertEquals(v, new OpenMapRealVector(new double[] { 0, 1, 2 }));\n        Assert.assertNotSame(v, new OpenMapRealVector(new double[] { 0, 1, 2 + FastMath.ulp(2)}));\n        Assert.assertNotSame(v, new OpenMapRealVector(new double[] { 0, 1, 2, 3 }));\n\n    }\n",
        "begin_line": 963,
        "end_line": 983,
        "comment": "",
        "child_ranges": [
            "(line 966,col 9)-(line 966,col 78)",
            "(line 968,col 9)-(line 968,col 38)",
            "(line 969,col 9)-(line 969,col 34)",
            "(line 970,col 9)-(line 970,col 37)",
            "(line 972,col 9)-(line 972,col 43)",
            "(line 973,col 9)-(line 973,col 48)",
            "(line 974,col 9)-(line 974,col 43)",
            "(line 975,col 9)-(line 975,col 25)",
            "(line 976,col 9)-(line 976,col 42)",
            "(line 978,col 9)-(line 978,col 25)",
            "(line 979,col 9)-(line 979,col 80)",
            "(line 980,col 9)-(line 980,col 98)",
            "(line 981,col 9)-(line 981,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial()  {\n        OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n        Assert.assertEquals(v,TestUtils.serializeAndRecover(v));\n    }\n",
        "begin_line": 985,
        "end_line": 989,
        "comment": "",
        "child_ranges": [
            "(line 987,col 9)-(line 987,col 78)",
            "(line 988,col 9)-(line 988,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.assertClose(java.lang.String, double[], double[], double)",
        "snippet": "    protected void assertClose(String msg, double[] m, double[] n,\n            double tolerance) {\n        if (m.length != n.length) {\n            Assert.fail(\"vectors have different lengths\");\n        }\n        for (int i = 0; i < m.length; i++) {\n            Assert.assertEquals(msg + \" \" +  i + \" elements differ\", m[i],n[i],tolerance);\n        }\n    }\n",
        "begin_line": 992,
        "end_line": 1000,
        "comment": " verifies that two vectors are close (sup norm) ",
        "child_ranges": [
            "(line 994,col 9)-(line 996,col 9)",
            "(line 997,col 9)-(line 999,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification()",
        "snippet": "    @Test\n    public void testConcurrentModification() {\n        final RealVector u = new OpenMapRealVector(3, 1e-6);\n        u.setEntry(0, 1);\n        u.setEntry(1, 0);\n        u.setEntry(2, 2);\n\n        final RealVector v1 = new OpenMapRealVector(3, 1e-6);\n        final double[] v2 = new double[3];\n        v1.setEntry(0, 0);\n        v2[0] = 0;\n        v1.setEntry(1, 3);\n        v2[1] = 3;\n        v1.setEntry(2, 0);\n        v2[2] = 0;\n\n        RealVector w;\n\n        w = u.ebeMultiply(v1);\n        w = u.ebeMultiply(v2);\n\n        w = u.ebeDivide(v1);\n        w = u.ebeDivide(v2);\n    }\n",
        "begin_line": 1003,
        "end_line": 1026,
        "comment": " Check that the operations do not throw an exception (cf. MATH-645). ",
        "child_ranges": [
            "(line 1005,col 9)-(line 1005,col 60)",
            "(line 1006,col 9)-(line 1006,col 25)",
            "(line 1007,col 9)-(line 1007,col 25)",
            "(line 1008,col 9)-(line 1008,col 25)",
            "(line 1010,col 9)-(line 1010,col 61)",
            "(line 1011,col 9)-(line 1011,col 42)",
            "(line 1012,col 9)-(line 1012,col 26)",
            "(line 1013,col 9)-(line 1013,col 18)",
            "(line 1014,col 9)-(line 1014,col 26)",
            "(line 1015,col 9)-(line 1015,col 18)",
            "(line 1016,col 9)-(line 1016,col 26)",
            "(line 1017,col 9)-(line 1017,col 18)",
            "(line 1019,col 9)-(line 1019,col 21)",
            "(line 1021,col 9)-(line 1021,col 30)",
            "(line 1022,col 9)-(line 1022,col 30)",
            "(line 1024,col 9)-(line 1024,col 28)",
            "(line 1025,col 9)-(line 1025,col 28)"
        ]
    }
]