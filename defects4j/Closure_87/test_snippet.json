[
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.PeepholeSubstituteAlternateSyntaxTest(boolean)",
        "snippet": "  private PeepholeSubstituteAlternateSyntaxTest(boolean compareAsTree) {\n    super(FOLD_CONSTANTS_TEST_EXTERNS, compareAsTree);\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": " TODO(user): Remove this when we no longer need to do string comparison.",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.PeepholeSubstituteAlternateSyntaxTest()",
        "snippet": "  public PeepholeSubstituteAlternateSyntaxTest() {\n    super(FOLD_CONSTANTS_TEST_EXTERNS);\n  }\n",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    enableLineNumberCheck(true);\n  }\n",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 18)",
            "(line 47,col 5)-(line 47,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  public CompilerPass getProcessor(final Compiler compiler) {\n    CompilerPass peepholePass =\n      new PeepholeOptimizationsPass(compiler,\n          new PeepholeSubstituteAlternateSyntax());\n\n    return peepholePass;\n  }\n",
        "begin_line": 50,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 54,col 51)",
            "(line 56,col 5)-(line 56,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // Reduce this to 2 if we get better expression evaluators.\n    return 2;\n  }\n",
        "begin_line": 59,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.foldSame(java.lang.String)",
        "snippet": "  private void foldSame(String js) {\n    testSame(js);\n  }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 66,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.fold(java.lang.String, java.lang.String)",
        "snippet": "  private void fold(String js, String expected) {\n    test(js, expected);\n  }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 70,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.fold(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void fold(String js, String expected, DiagnosticType warning) {\n    test(js, expected, warning);\n  }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.assertResultString(java.lang.String, java.lang.String)",
        "snippet": "  void assertResultString(String js, String expected) {\n    assertResultString(js, expected, false);\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.assertResultString(java.lang.String, java.lang.String, boolean)",
        "snippet": "  void assertResultString(String js, String expected, boolean normalize) {\n    PeepholeSubstituteAlternateSyntaxTest scTest\n        = new PeepholeSubstituteAlternateSyntaxTest(false);\n\n    if (normalize) {\n      scTest.enableNormalize();\n    } else {\n      scTest.disableNormalize();\n    }\n\n    scTest.test(js, expected);\n  }\n",
        "begin_line": 83,
        "end_line": 94,
        "comment": " test that needs tell us where a folding is constructing an invalid AST.",
        "child_ranges": [
            "(line 84,col 5)-(line 85,col 59)",
            "(line 87,col 5)-(line 91,col 5)",
            "(line 93,col 5)-(line 93,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldOneChildBlocks()",
        "snippet": "  public void testFoldOneChildBlocks() {\n    fold(\"function(){if(x)a();x=3}\",\n        \"function(){x&&a();x=3}\");\n    fold(\"function(){if(x){a()}x=3}\",\n        \"function(){x&&a();x=3}\");\n    fold(\"function(){if(x){return 3}}\",\n        \"function(){if(x)return 3}\");\n    fold(\"function(){if(x){a()}}\",\n        \"function(){x&&a()}\");\n    fold(\"function(){if(x){throw 1}}\", \"function(){if(x)throw 1;}\");\n\n    // Try it out with functions\n    fold(\"function(){if(x){foo()}}\", \"function(){x&&foo()}\");\n    fold(\"function(){if(x){foo()}else{bar()}}\",\n         \"function(){x?foo():bar()}\");\n\n    // Try it out with properties and methods\n    fold(\"function(){if(x){a.b=1}}\", \"function(){if(x)a.b=1}\");\n    fold(\"function(){if(x){a.b*=1}}\", \"function(){if(x)a.b*=1}\");\n    fold(\"function(){if(x){a.b+=1}}\", \"function(){if(x)a.b+=1}\");\n    fold(\"function(){if(x){++a.b}}\", \"function(){x&&++a.b}\");\n    fold(\"function(){if(x){a.foo()}}\", \"function(){x&&a.foo()}\");\n\n    // Try it out with throw/catch/finally [which should not change]\n    fold(\"function(){try{foo()}catch(e){bar(e)}finally{baz()}}\",\n         \"function(){try{foo()}catch(e){bar(e)}finally{baz()}}\");\n\n    // Try it out with switch statements\n    fold(\"function(){switch(x){case 1:break}}\",\n         \"function(){switch(x){case 1:break}}\");\n\n    // Do while loops stay in a block if that's where they started\n    fold(\"function(){if(e1){do foo();while(e2)}else foo2()}\",\n         \"function(){if(e1){do foo();while(e2)}else foo2()}\");\n    // Test an obscure case with do and while\n    fold(\"if(x){do{foo()}while(y)}else bar()\",\n         \"if(x){do foo();while(y)}else bar()\");\n\n    // Play with nested IFs\n    fold(\"function(){if(x){if(y)foo()}}\",\n         \"function(){x&&y&&foo()}\");\n    fold(\"function(){if(x){if(y)foo();else bar()}}\",\n         \"function(){if(x)y?foo():bar()}\");\n    fold(\"function(){if(x){if(y)foo()}else bar()}\",\n         \"function(){if(x)y&&foo();else bar()}\");\n    fold(\"function(){if(x){if(y)foo();else bar()}else{baz()}}\",\n         \"function(){if(x)y?foo():bar();else baz()}\");\n\n    fold(\"if(e1){while(e2){if(e3){foo()}}}else{bar()}\",\n         \"if(e1)while(e2)e3&&foo();else bar()\");\n\n    fold(\"if(e1){with(e2){if(e3){foo()}}}else{bar()}\",\n         \"if(e1)with(e2)e3&&foo();else bar()\");\n\n    fold(\"if(x){if(y){var x;}}\", \"if(x)if(y)var x\");\n    fold(\"if(x){ if(y){var x;}else{var z;} }\",\n         \"if(x)if(y)var x;else var z\");\n\n    // NOTE - technically we can remove the blocks since both the parent\n    // and child have elses. But we don't since it causes ambiguities in\n    // some cases where not all descendent ifs having elses\n    fold(\"if(x){ if(y){var x;}else{var z;} }else{var w}\",\n         \"if(x)if(y)var x;else var z;else var w\");\n    fold(\"if (x) {var x;}else { if (y) { var y;} }\",\n         \"if(x)var x;else if(y)var y\");\n\n    // Here's some of the ambiguous cases\n    fold(\"if(a){if(b){f1();f2();}else if(c){f3();}}else {if(d){f4();}}\",\n         \"if(a)if(b){f1();f2()}else c&&f3();else d&&f4()\");\n\n    fold(\"function(){foo()}\", \"function(){foo()}\");\n    fold(\"switch(x){case y: foo()}\", \"switch(x){case y:foo()}\");\n    fold(\"try{foo()}catch(ex){bar()}finally{baz()}\",\n         \"try{foo()}catch(ex){bar()}finally{baz()}\");\n  }\n",
        "begin_line": 97,
        "end_line": 171,
        "comment": " Check that removing blocks with 1 child works ",
        "child_ranges": [
            "(line 98,col 5)-(line 99,col 34)",
            "(line 100,col 5)-(line 101,col 34)",
            "(line 102,col 5)-(line 103,col 37)",
            "(line 104,col 5)-(line 105,col 30)",
            "(line 106,col 5)-(line 106,col 68)",
            "(line 109,col 5)-(line 109,col 61)",
            "(line 110,col 5)-(line 111,col 38)",
            "(line 114,col 5)-(line 114,col 63)",
            "(line 115,col 5)-(line 115,col 65)",
            "(line 116,col 5)-(line 116,col 65)",
            "(line 117,col 5)-(line 117,col 61)",
            "(line 118,col 5)-(line 118,col 65)",
            "(line 121,col 5)-(line 122,col 65)",
            "(line 125,col 5)-(line 126,col 48)",
            "(line 129,col 5)-(line 130,col 62)",
            "(line 132,col 5)-(line 133,col 47)",
            "(line 136,col 5)-(line 137,col 36)",
            "(line 138,col 5)-(line 139,col 43)",
            "(line 140,col 5)-(line 141,col 49)",
            "(line 142,col 5)-(line 143,col 54)",
            "(line 145,col 5)-(line 146,col 48)",
            "(line 148,col 5)-(line 149,col 47)",
            "(line 151,col 5)-(line 151,col 52)",
            "(line 152,col 5)-(line 153,col 39)",
            "(line 158,col 5)-(line 159,col 50)",
            "(line 160,col 5)-(line 161,col 39)",
            "(line 164,col 5)-(line 165,col 59)",
            "(line 167,col 5)-(line 167,col 51)",
            "(line 168,col 5)-(line 168,col 64)",
            "(line 169,col 5)-(line 170,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldReturns()",
        "snippet": "  public void testFoldReturns() {\n    fold(\"function(){if(x)return 1;else return 2}\",\n         \"function(){return x?1:2}\");\n    fold(\"function(){if(x)return 1+x;else return 2-x}\",\n         \"function(){return x?1+x:2-x}\");\n    fold(\"function(){if(x)return y += 1;else return y += 2}\",\n         \"function(){return x?(y+=1):(y+=2)}\");\n\n    // don't touch cases where either side doesn't return a value\n    foldSame(\"function(){if(x)return;else return 2-x}\");\n    foldSame(\"function(){if(x)return x;else return}\");\n\n    foldSame(\"function(){for(var x in y) { return x.y; } return k}\");\n  }\n",
        "begin_line": 174,
        "end_line": 187,
        "comment": " Try to minimize returns ",
        "child_ranges": [
            "(line 175,col 5)-(line 176,col 37)",
            "(line 177,col 5)-(line 178,col 41)",
            "(line 179,col 5)-(line 180,col 47)",
            "(line 183,col 5)-(line 183,col 56)",
            "(line 184,col 5)-(line 184,col 54)",
            "(line 186,col 5)-(line 186,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldAssignments()",
        "snippet": "  public void testFoldAssignments() {\n    fold(\"function(){if(x)y=3;else y=4;}\", \"function(){y=x?3:4}\");\n    fold(\"function(){if(x)y=1+a;else y=2+a;}\", \"function(){y=x?1+a:2+a}\");\n\n    // and operation assignments\n    fold(\"function(){if(x)y+=1;else y+=2;}\", \"function(){y+=x?1:2}\");\n    fold(\"function(){if(x)y-=1;else y-=2;}\", \"function(){y-=x?1:2}\");\n    fold(\"function(){if(x)y%=1;else y%=2;}\", \"function(){y%=x?1:2}\");\n    fold(\"function(){if(x)y|=1;else y|=2;}\", \"function(){y|=x?1:2}\");\n\n    // sanity check, don't fold if the 2 ops don't match\n    foldSame(\"function(){if(x)y-=1;else y+=2}\");\n\n    // sanity check, don't fold if the 2 LHS don't match\n    foldSame(\"function(){if(x)y-=1;else z-=1}\");\n\n    // sanity check, don't fold if there are potential effects\n    foldSame(\"function(){if(x)y().a=3;else y().a=4}\");\n  }\n",
        "begin_line": 190,
        "end_line": 208,
        "comment": " Try to minimize assignments ",
        "child_ranges": [
            "(line 191,col 5)-(line 191,col 66)",
            "(line 192,col 5)-(line 192,col 74)",
            "(line 195,col 5)-(line 195,col 69)",
            "(line 196,col 5)-(line 196,col 69)",
            "(line 197,col 5)-(line 197,col 69)",
            "(line 198,col 5)-(line 198,col 69)",
            "(line 201,col 5)-(line 201,col 48)",
            "(line 204,col 5)-(line 204,col 48)",
            "(line 207,col 5)-(line 207,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testRemoveDuplicateStatements()",
        "snippet": "  public void testRemoveDuplicateStatements() {\n    fold(\"if (a) { x = 1; x++ } else { x = 2; x++ }\",\n         \"x=(a) ? 1 : 2; x++\");\n    fold(\"if (a) { x = 1; x++; y += 1; z = pi; }\" +\n         \" else  { x = 2; x++; y += 1; z = pi; }\",\n         \"x=(a) ? 1 : 2; x++; y += 1; z = pi;\");\n    fold(\"function z() {\" +\n         \"if (a) { foo(); return true } else { goo(); return true }\" +\n         \"}\",\n         \"function z() {(a) ? foo() : goo(); return true}\");\n    fold(\"function z() {if (a) { foo(); x = true; return true \" +\n         \"} else { goo(); x = true; return true }}\",\n         \"function z() {(a) ? foo() : goo(); x = true; return true}\");\n\n    fold(\"function z() {\" +\n         \"  if (a) { bar(); foo(); return true }\" +\n         \"    else { bar(); goo(); return true }\" +\n         \"}\",\n         \"function z() {\" +\n         \"  if (a) { bar(); foo(); }\" +\n         \"    else { bar(); goo(); }\" +\n         \"  return true;\" +\n         \"}\");\n  }\n",
        "begin_line": 210,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 212,col 31)",
            "(line 213,col 5)-(line 215,col 48)",
            "(line 216,col 5)-(line 219,col 60)",
            "(line 220,col 5)-(line 222,col 70)",
            "(line 224,col 5)-(line 232,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testNotCond()",
        "snippet": "  public void testNotCond() {\n    fold(\"function(){if(!x)foo()}\", \"function(){x||foo()}\");\n    fold(\"function(){if(!x)b=1}\", \"function(){x||(b=1)}\");\n    fold(\"if(!x)z=1;else if(y)z=2\", \"if(x){if(y)z=2}else z=1\");\n    foldSame(\"function(){if(!(x=1))a.b=1}\");\n  }\n",
        "begin_line": 235,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 236,col 60)",
            "(line 237,col 5)-(line 237,col 58)",
            "(line 238,col 5)-(line 238,col 63)",
            "(line 239,col 5)-(line 239,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testAndParenthesesCount()",
        "snippet": "  public void testAndParenthesesCount() {\n    foldSame(\"function(){if(x||y)a.foo()}\");\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldLogicalOpStringCompare()",
        "snippet": "  public void testFoldLogicalOpStringCompare() {\n    // side-effects\n    // There is two way to parse two &&'s and both are correct.\n    assertResultString(\"if(foo() && false) z()\", \"foo()&&0&&z()\");\n  }\n",
        "begin_line": 246,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 249,col 5)-(line 249,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldNot()",
        "snippet": "  public void testFoldNot() {\n    fold(\"while(!(x==y)){a=b;}\" , \"while(x!=y){a=b;}\");\n    fold(\"while(!(x!=y)){a=b;}\" , \"while(x==y){a=b;}\");\n    fold(\"while(!(x===y)){a=b;}\", \"while(x!==y){a=b;}\");\n    fold(\"while(!(x!==y)){a=b;}\", \"while(x===y){a=b;}\");\n    // Because !(x<NaN) != x>=NaN don't fold < and > cases.\n    foldSame(\"while(!(x>y)){a=b;}\");\n    foldSame(\"while(!(x>=y)){a=b;}\");\n    foldSame(\"while(!(x<y)){a=b;}\");\n    foldSame(\"while(!(x<=y)){a=b;}\");\n    foldSame(\"while(!(x<=NaN)){a=b;}\");\n\n    // NOT forces a boolean context\n    fold(\"x = !(y() && true)\", \"x = !y()\");\n    // This will be further optimized by PeepholeFoldConstants.\n    fold(\"x = !true\", \"x = !1\");\n  }\n",
        "begin_line": 252,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 253,col 5)-(line 253,col 55)",
            "(line 254,col 5)-(line 254,col 55)",
            "(line 255,col 5)-(line 255,col 56)",
            "(line 256,col 5)-(line 256,col 56)",
            "(line 258,col 5)-(line 258,col 36)",
            "(line 259,col 5)-(line 259,col 37)",
            "(line 260,col 5)-(line 260,col 36)",
            "(line 261,col 5)-(line 261,col 37)",
            "(line 262,col 5)-(line 262,col 39)",
            "(line 265,col 5)-(line 265,col 43)",
            "(line 267,col 5)-(line 267,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldRegExpConstructor()",
        "snippet": "  public void testFoldRegExpConstructor() {\n    enableNormalize();\n\n    // Cannot fold all the way to a literal because there are too few arguments.\n    fold(\"x = new RegExp\",                    \"x = RegExp()\");\n    // Empty regexp should not fold to // since that is a line comment in js\n    fold(\"x = new RegExp(\\\"\\\")\",              \"x = RegExp(\\\"\\\")\");\n    fold(\"x = new RegExp(\\\"\\\", \\\"i\\\")\",       \"x = RegExp(\\\"\\\",\\\"i\\\")\");\n    // Bogus flags should not fold\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"bogus\\\")\",\n         \"x = RegExp(\\\"foobar\\\",\\\"bogus\\\")\",\n         PeepholeSubstituteAlternateSyntax.INVALID_REGULAR_EXPRESSION_FLAGS);\n    // Don't fold if the flags contain 'g'\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"g\\\")\",\n         \"x = RegExp(\\\"foobar\\\",\\\"g\\\")\");\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"ig\\\")\",\n         \"x = RegExp(\\\"foobar\\\",\\\"ig\\\")\");\n\n    // Can Fold\n    fold(\"x = new RegExp(\\\"foobar\\\")\",        \"x = /foobar/\");\n    fold(\"x = RegExp(\\\"foobar\\\")\",            \"x = /foobar/\");\n    fold(\"x = new RegExp(\\\"foobar\\\", \\\"i\\\")\", \"x = /foobar/i\");\n    // Make sure that escaping works\n    fold(\"x = new RegExp(\\\"\\\\\\\\.\\\", \\\"i\\\")\",  \"x = /\\\\./i\");\n    fold(\"x = new RegExp(\\\"/\\\", \\\"\\\")\",       \"x = /\\\\//\");\n    fold(\"x = new RegExp(\\\"///\\\", \\\"\\\")\",     \"x = /\\\\/\\\\/\\\\//\");\n    fold(\"x = new RegExp(\\\"\\\\\\\\\\\\/\\\", \\\"\\\")\", \"x = /\\\\//\");\n    // Don't fold things that crash older versions of Safari and that don't work\n    // as regex literals on recent versions of Safari\n    fold(\"x = new RegExp(\\\"\\\\u2028\\\")\", \"x = RegExp(\\\"\\\\u2028\\\")\");\n    fold(\"x = new RegExp(\\\"\\\\\\\\\\\\\\\\u2028\\\")\", \"x = /\\\\\\\\u2028/\");\n\n    // Don't fold really long regexp literals, because Opera 9.2's\n    // regexp parser will explode.\n    String longRegexp = \"\";\n    for (int i = 0; i < 200; i++) longRegexp += \"x\";\n    foldSame(\"x = RegExp(\\\"\" + longRegexp + \"\\\")\");\n\n    // Shouldn't fold RegExp unnormalized because\n    // we can't be sure that RegExp hasn't been redefined\n    disableNormalize();\n\n    foldSame(\"x = new RegExp(\\\"foobar\\\")\");\n  }\n",
        "begin_line": 270,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 22)",
            "(line 274,col 5)-(line 274,col 62)",
            "(line 276,col 5)-(line 276,col 66)",
            "(line 277,col 5)-(line 277,col 72)",
            "(line 279,col 5)-(line 281,col 77)",
            "(line 283,col 5)-(line 284,col 41)",
            "(line 285,col 5)-(line 286,col 42)",
            "(line 289,col 5)-(line 289,col 62)",
            "(line 290,col 5)-(line 290,col 62)",
            "(line 291,col 5)-(line 291,col 63)",
            "(line 293,col 5)-(line 293,col 60)",
            "(line 294,col 5)-(line 294,col 59)",
            "(line 295,col 5)-(line 295,col 65)",
            "(line 296,col 5)-(line 296,col 59)",
            "(line 299,col 5)-(line 299,col 67)",
            "(line 300,col 5)-(line 300,col 65)",
            "(line 304,col 5)-(line 304,col 27)",
            "(line 305,col 5)-(line 305,col 52)",
            "(line 306,col 5)-(line 306,col 51)",
            "(line 310,col 5)-(line 310,col 23)",
            "(line 312,col 5)-(line 312,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldRegExpConstructorStringCompare()",
        "snippet": "  public void testFoldRegExpConstructorStringCompare() {\n    // Might have something to do with the internal representation of \\n and how\n    // it is used in node comparison.\n    assertResultString(\"x=new RegExp(\\\"\\\\n\\\", \\\"i\\\")\", \"x=/\\\\n/i\", true);\n  }\n",
        "begin_line": 315,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 318,col 5)-(line 318,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testContainsUnicodeEscape()",
        "snippet": "  public void testContainsUnicodeEscape() throws Exception {\n    assertTrue(!PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\"\"));\n    assertTrue(!PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\"foo\"));\n    assertTrue(PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\n        \"\\u2028\"));\n    assertTrue(PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\n        \"\\\\u2028\"));\n    assertTrue(\n        PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\"foo\\\\u2028\"));\n    assertTrue(!PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\n        \"foo\\\\\\\\u2028\"));\n    assertTrue(PeepholeSubstituteAlternateSyntax.containsUnicodeEscape(\n            \"foo\\\\\\\\u2028bar\\\\u2028\"));\n  }\n",
        "begin_line": 321,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 322,col 5)-(line 322,col 77)",
            "(line 323,col 5)-(line 323,col 80)",
            "(line 324,col 5)-(line 325,col 19)",
            "(line 326,col 5)-(line 327,col 20)",
            "(line 328,col 5)-(line 329,col 79)",
            "(line 330,col 5)-(line 331,col 25)",
            "(line 332,col 5)-(line 333,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldLiteralObjectConstructors()",
        "snippet": "  public void testFoldLiteralObjectConstructors() {\n    enableNormalize();\n\n    // Can fold when normalized\n    fold(\"x = new Object\", \"x = ({})\");\n    fold(\"x = new Object()\", \"x = ({})\");\n    fold(\"x = Object()\", \"x = ({})\");\n\n    disableNormalize();\n    // Cannot fold above when not normalized\n    foldSame(\"x = new Object\");\n    foldSame(\"x = new Object()\");\n    foldSame(\"x = Object()\");\n\n    enableNormalize();\n\n    // Cannot fold, the constructor being used is actually a local function\n    foldSame(\"x = \" +\n         \"(function(){function Object(){this.x=4};return new Object();})();\");\n  }\n",
        "begin_line": 336,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 337,col 22)",
            "(line 340,col 5)-(line 340,col 39)",
            "(line 341,col 5)-(line 341,col 41)",
            "(line 342,col 5)-(line 342,col 37)",
            "(line 344,col 5)-(line 344,col 23)",
            "(line 346,col 5)-(line 346,col 31)",
            "(line 347,col 5)-(line 347,col 33)",
            "(line 348,col 5)-(line 348,col 29)",
            "(line 350,col 5)-(line 350,col 22)",
            "(line 353,col 5)-(line 354,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldLiteralArrayConstructors()",
        "snippet": "  public void testFoldLiteralArrayConstructors() {\n    enableNormalize();\n\n    // No arguments - can fold when normalized\n    fold(\"x = new Array\", \"x = []\");\n    fold(\"x = new Array()\", \"x = []\");\n    fold(\"x = Array()\", \"x = []\");\n\n    // One argument - can be fold when normalized\n    fold(\"x = new Array(0)\", \"x = []\");\n    fold(\"x = Array(0)\", \"x = []\");\n    fold(\"x = new Array(\\\"a\\\")\", \"x = [\\\"a\\\"]\");\n    fold(\"x = Array(\\\"a\\\")\", \"x = [\\\"a\\\"]\");\n\n    // One argument - cannot be fold when normalized\n    fold(\"x = new Array(7)\", \"x = Array(7)\");\n    fold(\"x = Array(7)\", \"x = Array(7)\");\n    fold(\"x = new Array(y)\", \"x = Array(y)\");\n    fold(\"x = Array(y)\", \"x = Array(y)\");\n    fold(\"x = new Array(foo())\", \"x = Array(foo())\");\n    fold(\"x = Array(foo())\", \"x = Array(foo())\");\n\n    // More than one argument - can be fold when normalized\n    fold(\"x = new Array(1, 2, 3, 4)\", \"x = [1, 2, 3, 4]\");\n    fold(\"x = Array(1, 2, 3, 4)\", \"x = [1, 2, 3, 4]\");\n    fold(\"x = new Array('a', 1, 2, 'bc', 3, {}, 'abc')\",\n         \"x = ['a', 1, 2, 'bc', 3, {}, 'abc']\");\n    fold(\"x = Array('a', 1, 2, 'bc', 3, {}, 'abc')\",\n         \"x = ['a', 1, 2, 'bc', 3, {}, 'abc']\");\n    fold(\"x = new Array(Array(1, '2', 3, '4'))\", \"x = [[1, '2', 3, '4']]\");\n    fold(\"x = Array(Array(1, '2', 3, '4'))\", \"x = [[1, '2', 3, '4']]\");\n    fold(\"x = new Array(Object(), Array(\\\"abc\\\", Object(), Array(Array())))\",\n         \"x = [{}, [\\\"abc\\\", {}, [[]]]\");\n    fold(\"x = new Array(Object(), Array(\\\"abc\\\", Object(), Array(Array())))\",\n         \"x = [{}, [\\\"abc\\\", {}, [[]]]\");\n\n    disableNormalize();\n    // Cannot fold above when not normalized\n    foldSame(\"x = new Array\");\n    foldSame(\"x = new Array()\");\n    foldSame(\"x = Array()\");\n\n    foldSame(\"x = new Array(0)\");\n    foldSame(\"x = Array(0)\");\n    foldSame(\"x = new Array(\\\"a\\\")\");\n    foldSame(\"x = Array(\\\"a\\\")\");\n    foldSame(\"x = new Array(7)\");\n    foldSame(\"x = Array(7)\");\n    foldSame(\"x = new Array(foo())\");\n    foldSame(\"x = Array(foo())\");\n\n    foldSame(\"x = new Array(1, 2, 3, 4)\");\n    foldSame(\"x = Array(1, 2, 3, 4)\");\n    foldSame(\"x = new Array('a', 1, 2, 'bc', 3, {}, 'abc')\");\n    foldSame(\"x = Array('a', 1, 2, 'bc', 3, {}, 'abc')\");\n    foldSame(\"x = new Array(Array(1, '2', 3, '4'))\");\n    foldSame(\"x = Array(Array(1, '2', 3, '4'))\");\n    foldSame(\"x = new Array(Object(), Array(\\\"abc\\\", Object(), Array(Array())))\");\n    foldSame(\"x = new Array(Object(), Array(\\\"abc\\\", Object(), Array(Array())))\");\n  }\n",
        "begin_line": 357,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 22)",
            "(line 361,col 5)-(line 361,col 36)",
            "(line 362,col 5)-(line 362,col 38)",
            "(line 363,col 5)-(line 363,col 34)",
            "(line 366,col 5)-(line 366,col 39)",
            "(line 367,col 5)-(line 367,col 35)",
            "(line 368,col 5)-(line 368,col 48)",
            "(line 369,col 5)-(line 369,col 44)",
            "(line 372,col 5)-(line 372,col 45)",
            "(line 373,col 5)-(line 373,col 41)",
            "(line 374,col 5)-(line 374,col 45)",
            "(line 375,col 5)-(line 375,col 41)",
            "(line 376,col 5)-(line 376,col 53)",
            "(line 377,col 5)-(line 377,col 49)",
            "(line 380,col 5)-(line 380,col 58)",
            "(line 381,col 5)-(line 381,col 54)",
            "(line 382,col 5)-(line 383,col 48)",
            "(line 384,col 5)-(line 385,col 48)",
            "(line 386,col 5)-(line 386,col 75)",
            "(line 387,col 5)-(line 387,col 71)",
            "(line 388,col 5)-(line 389,col 41)",
            "(line 390,col 5)-(line 391,col 41)",
            "(line 393,col 5)-(line 393,col 23)",
            "(line 395,col 5)-(line 395,col 30)",
            "(line 396,col 5)-(line 396,col 32)",
            "(line 397,col 5)-(line 397,col 28)",
            "(line 399,col 5)-(line 399,col 33)",
            "(line 400,col 5)-(line 400,col 29)",
            "(line 401,col 5)-(line 401,col 37)",
            "(line 402,col 5)-(line 402,col 33)",
            "(line 403,col 5)-(line 403,col 33)",
            "(line 404,col 5)-(line 404,col 29)",
            "(line 405,col 5)-(line 405,col 37)",
            "(line 406,col 5)-(line 406,col 33)",
            "(line 408,col 5)-(line 408,col 42)",
            "(line 409,col 5)-(line 409,col 38)",
            "(line 410,col 5)-(line 410,col 61)",
            "(line 411,col 5)-(line 411,col 57)",
            "(line 412,col 5)-(line 412,col 53)",
            "(line 413,col 5)-(line 413,col 49)",
            "(line 414,col 5)-(line 414,col 82)",
            "(line 415,col 5)-(line 415,col 82)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testMinimizeExprCondition()",
        "snippet": "  public void testMinimizeExprCondition() {\n    fold(\"(x ? true : false) && y()\", \"x&&y()\");\n    fold(\"(x ? false : true) && y()\", \"(!x)&&y()\");\n    fold(\"(x ? true : y) && y()\", \"(x || y)&&y()\");\n    fold(\"(x ? y : false) && y()\", \"(x && y)&&y()\");\n    fold(\"(x && true) && y()\", \"x && y()\");\n    fold(\"(x && false) && y()\", \"0&&y()\");\n    fold(\"(x || true) && y()\", \"1&&y()\");\n    fold(\"(x || false) && y()\", \"x&&y()\");\n  }\n",
        "begin_line": 418,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 48)",
            "(line 420,col 5)-(line 420,col 51)",
            "(line 421,col 5)-(line 421,col 51)",
            "(line 422,col 5)-(line 422,col 52)",
            "(line 423,col 5)-(line 423,col 43)",
            "(line 424,col 5)-(line 424,col 42)",
            "(line 425,col 5)-(line 425,col 41)",
            "(line 426,col 5)-(line 426,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testMinimizeWhileCondition()",
        "snippet": "  public void testMinimizeWhileCondition() {\n    // This test uses constant folding logic, so is only here for completeness.\n    fold(\"while(!!true) foo()\", \"while(1) foo()\");\n    // These test tryMinimizeCondition\n    fold(\"while(!!x) foo()\", \"while(x) foo()\");\n    fold(\"while(!(!x&&!y)) foo()\", \"while(x||y) foo()\");\n    fold(\"while(x||!!y) foo()\", \"while(x||y) foo()\");\n    fold(\"while(!(!!x&&y)) foo()\", \"while(!(x&&y)) foo()\");\n  }\n",
        "begin_line": 429,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 431,col 5)-(line 431,col 50)",
            "(line 433,col 5)-(line 433,col 47)",
            "(line 434,col 5)-(line 434,col 56)",
            "(line 435,col 5)-(line 435,col 53)",
            "(line 436,col 5)-(line 436,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testMinimizeForCondition()",
        "snippet": "  public void testMinimizeForCondition() {\n    // This test uses constant folding logic, so is only here for completeness.\n    // These could be simplified to \"for(;;) ...\"\n    fold(\"for(;!!true;) foo()\", \"for(;1;) foo()\");\n    // Don't bother with FOR inits as there are normalized out.\n    fold(\"for(!!true;;) foo()\", \"for(!!1;;) foo()\");\n\n    // These test tryMinimizeCondition\n    fold(\"for(;!!x;) foo()\", \"for(;x;) foo()\");\n\n    // sanity check\n    foldSame(\"for(a in b) foo()\");\n    foldSame(\"for(a in {}) foo()\");\n    foldSame(\"for(a in []) foo()\");\n    fold(\"for(a in !!true) foo()\", \"for(a in !!1) foo()\");\n  }\n",
        "begin_line": 439,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 442,col 50)",
            "(line 444,col 5)-(line 444,col 52)",
            "(line 447,col 5)-(line 447,col 47)",
            "(line 450,col 5)-(line 450,col 34)",
            "(line 451,col 5)-(line 451,col 35)",
            "(line 452,col 5)-(line 452,col 35)",
            "(line 453,col 5)-(line 453,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testMinimizeCondition_example1()",
        "snippet": "  public void testMinimizeCondition_example1() {\n    // Based on a real failing code sample.\n    fold(\"if(!!(f() > 20)) {foo();foo()}\", \"if(f() > 20){foo();foo()}\");\n  }\n",
        "begin_line": 456,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 458,col 5)-(line 458,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldConditionalVarDeclaration()",
        "snippet": "  public void testFoldConditionalVarDeclaration() {\n    fold(\"if(x) var y=1;else y=2\", \"var y=x?1:2\");\n    fold(\"if(x) y=1;else var y=2\", \"var y=x?1:2\");\n\n    foldSame(\"if(x) var y = 1; z = 2\");\n    foldSame(\"if(x) y = 1; var z = 2\");\n\n    foldSame(\"if(x) { var y = 1; print(y)} else y = 2 \");\n    foldSame(\"if(x) var y = 1; else {y = 2; print(y)}\");\n  }\n",
        "begin_line": 461,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 462,col 5)-(line 462,col 50)",
            "(line 463,col 5)-(line 463,col 50)",
            "(line 465,col 5)-(line 465,col 39)",
            "(line 466,col 5)-(line 466,col 39)",
            "(line 468,col 5)-(line 468,col 57)",
            "(line 469,col 5)-(line 469,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldReturnResult()",
        "snippet": "  public void testFoldReturnResult() {\n    foldSame(\"function f(){return false;}\");\n    foldSame(\"function f(){return null;}\");\n    fold(\"function f(){return void 0;}\",\n         \"function f(){return}\");\n    foldSame(\"function f(){return void foo();}\");\n    fold(\"function f(){return undefined;}\",\n         \"function f(){return}\");\n    fold(\"function(){if(a()){return undefined;}}\",\n         \"function(){if(a()){return}}\");\n  }\n",
        "begin_line": 472,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 473,col 44)",
            "(line 474,col 5)-(line 474,col 43)",
            "(line 475,col 5)-(line 476,col 33)",
            "(line 477,col 5)-(line 477,col 49)",
            "(line 478,col 5)-(line 479,col 33)",
            "(line 480,col 5)-(line 481,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testFoldStandardConstructors()",
        "snippet": "  public void testFoldStandardConstructors() {\n    foldSame(\"new Foo('a')\");\n    foldSame(\"var x = new goog.Foo(1)\");\n    foldSame(\"var x = new String(1)\");\n    foldSame(\"var x = new Number(1)\");\n    foldSame(\"var x = new Boolean(1)\");\n\n    enableNormalize();\n\n    fold(\"var x = new Object('a')\", \"var x = Object('a')\");\n    fold(\"var x = new RegExp('')\", \"var x = RegExp('')\");\n    fold(\"var x = new Error('20')\", \"var x = Error(\\\"20\\\")\");\n    fold(\"var x = new Array(20)\", \"var x = Array(20)\");\n  }\n",
        "begin_line": 484,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 485,col 5)-(line 485,col 29)",
            "(line 486,col 5)-(line 486,col 40)",
            "(line 487,col 5)-(line 487,col 38)",
            "(line 488,col 5)-(line 488,col 38)",
            "(line 489,col 5)-(line 489,col 39)",
            "(line 491,col 5)-(line 491,col 22)",
            "(line 493,col 5)-(line 493,col 59)",
            "(line 494,col 5)-(line 494,col 57)",
            "(line 495,col 5)-(line 495,col 61)",
            "(line 496,col 5)-(line 496,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testSubsituteReturn()",
        "snippet": "  public void testSubsituteReturn() {\n\n    fold(\"function f() { while(x) { return }}\",\n         \"function f() { while(x) { break }}\");\n\n    foldSame(\"function f() { while(x) { return 5 } }\");\n\n    foldSame(\"function f() { a: { return 5 } }\");\n\n    fold(\"function f() { while(x) { return 5}  return 5}\",\n         \"function f() { while(x) { break }    return 5}\");\n\n    fold(\"function f() { while(x) { return x}  return x}\",\n         \"function f() { while(x) { break }    return x}\");\n\n    fold(\"function f() { while(x) { if (y) { return }}} \",\n         \"function f() { while(x) { if (y) { break  }}} \");\n\n    fold(\"function f() { while(x) { if (y) { return }} return} \",\n         \"function f() { while(x) { if (y) { break  }} return} \");\n\n    fold(\"function f() { while(x) { if (y) { return 5 }} return 5} \",\n         \"function f() { while(x) { if (y) { break    }} return 5} \");\n\n    // It doesn't matter if x is changed between them. We are still returning\n    // x at whatever x value current holds. The whole x = 1 is skipped.\n    fold(\"function f() { while(x) { if (y) { return x } x = 1} return x} \",\n         \"function f() { while(x) { if (y) { break    } x = 1} return x} \");\n\n    // RemoveUnreachableCode would take care of the useless breaks.\n    fold(\"function f() { while(x) { if (y) { return x } return x} return x}\",\n         \"function f() { while(x) { if (y) { break    } break   } return x}\");\n\n    // A break here only breaks out of the inner loop.\n    foldSame(\"function f() { while(x) { while (y) { return } } }\");\n\n    foldSame(\"function f() { while(1) { return 7}  return 5}\");\n\n\n    foldSame(\"function f() {\" +\n             \"  try { while(x) {return f()}} catch (e) { } return f()}\");\n\n    foldSame(\"function f() {\" +\n             \"  try { while(x) {return f()}} finally {alert(1)} return f()}\");\n\n\n    // Both returns has the same handler\n    fold(\"function f() {\" +\n         \"  try { while(x) { return f() } return f() } catch (e) { } }\",\n         \"function f() {\" +\n         \"  try { while(x) { break } return f() } catch (e) { } }\");\n\n    // We can't fold this because it'll change the order of when foo is called.\n    foldSame(\"function f() {\" +\n             \"  try { while(x) { return foo() } } finally { alert(1) } \"  +\n             \"  return foo()}\");\n\n    // This is fine, we have no side effect in the return value.\n    fold(\"function f() {\" +\n         \"  try { while(x) { return 1 } } finally { alert(1) } return 1}\",\n         \"function f() {\" +\n         \"  try { while(x) { break    } } finally { alert(1) } return 1}\"\n         );\n\n    foldSame(\"function f() { try{ return a } finally { a = 2 } return a; }\");\n  }\n",
        "begin_line": 499,
        "end_line": 564,
        "comment": "",
        "child_ranges": [
            "(line 501,col 5)-(line 502,col 47)",
            "(line 504,col 5)-(line 504,col 55)",
            "(line 506,col 5)-(line 506,col 49)",
            "(line 508,col 5)-(line 509,col 59)",
            "(line 511,col 5)-(line 512,col 59)",
            "(line 514,col 5)-(line 515,col 59)",
            "(line 517,col 5)-(line 518,col 66)",
            "(line 520,col 5)-(line 521,col 70)",
            "(line 525,col 5)-(line 526,col 76)",
            "(line 529,col 5)-(line 530,col 78)",
            "(line 533,col 5)-(line 533,col 67)",
            "(line 535,col 5)-(line 535,col 63)",
            "(line 538,col 5)-(line 539,col 73)",
            "(line 541,col 5)-(line 542,col 78)",
            "(line 546,col 5)-(line 549,col 68)",
            "(line 552,col 5)-(line 554,col 32)",
            "(line 557,col 5)-(line 561,col 11)",
            "(line 563,col 5)-(line 563,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest.testIssue291()",
        "snippet": "  public void testIssue291() {\n    fold(\"if (true) { f.onchange(); }\", \"if (1) f.onchange();\");\n    foldSame(\"if (f) { f.onchange(); }\");\n    foldSame(\"if (f) { f.bar(); } else { f.onchange(); }\");\n    fold(\"if (f) { f.bonchange(); }\", \"f && f.bonchange();\");\n    foldSame(\"if (f) { f['x'](); }\");\n  }\n",
        "begin_line": 566,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 567,col 5)-(line 567,col 64)",
            "(line 568,col 5)-(line 568,col 41)",
            "(line 569,col 5)-(line 569,col 59)",
            "(line 570,col 5)-(line 570,col 61)",
            "(line 571,col 5)-(line 571,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 107,
        "end_line": 113,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 108,col 5)-(line 110,col 6)",
            "(line 111,col 5)-(line 111,col 39)",
            "(line 112,col 5)-(line 112,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 120,col 5)-(line 120,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 136,
        "end_line": 136,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    if (this.acceptES5) {\n      options.languageIn = LanguageMode.ECMASCRIPT5;\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 145,
        "end_line": 160,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 52)",
            "(line 148,col 5)-(line 150,col 5)",
            "(line 154,col 5)-(line 154,col 32)",
            "(line 156,col 5)-(line 157,col 65)",
            "(line 158,col 5)-(line 158,col 55)",
            "(line 159,col 5)-(line 159,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 170,
        "end_line": 174,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 173,col 5)-(line 173,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 183,col 5)-(line 183,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 201,
        "end_line": 204,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 29)",
            "(line 203,col 5)-(line 203,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 229,col 5)-(line 229,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 240,
        "end_line": 243,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 28)",
            "(line 242,col 5)-(line 242,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 249,
        "end_line": 251,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 250,col 5)-(line 250,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 258,
        "end_line": 260,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 263,
        "end_line": 271,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 265,col 5)-(line 267,col 40)",
            "(line 269,col 5)-(line 270,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 280,col 5)-(line 280,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 306,
        "end_line": 309,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 308,col 5)-(line 308,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 321,
        "end_line": 324,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 323,col 5)-(line 323,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 337,
        "end_line": 340,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 339,col 5)-(line 339,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 356,
        "end_line": 363,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 359,col 5)-(line 361,col 6)",
            "(line 362,col 5)-(line 362,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.languageIn = LanguageMode.ECMASCRIPT5;\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 379,
        "end_line": 399,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 382,col 5)-(line 382,col 41)",
            "(line 383,col 5)-(line 383,col 28)",
            "(line 385,col 5)-(line 385,col 43)",
            "(line 387,col 5)-(line 389,col 5)",
            "(line 392,col 5)-(line 392,col 39)",
            "(line 393,col 5)-(line 394,col 58)",
            "(line 396,col 5)-(line 396,col 71)",
            "(line 398,col 5)-(line 398,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 407,
        "end_line": 409,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 408,col 5)-(line 408,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 419,
        "end_line": 421,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 420,col 5)-(line 420,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 433,
        "end_line": 436,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 435,col 5)-(line 435,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 451,
        "end_line": 462,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 453,col 5)-(line 453,col 41)",
            "(line 454,col 5)-(line 454,col 28)",
            "(line 456,col 5)-(line 456,col 56)",
            "(line 457,col 5)-(line 459,col 5)",
            "(line 460,col 5)-(line 460,col 55)",
            "(line 461,col 5)-(line 461,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 470,
        "end_line": 472,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 471,col 5)-(line 471,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 482,
        "end_line": 485,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 484,col 5)-(line 484,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 497,
        "end_line": 504,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 499,col 5)-(line 499,col 41)",
            "(line 500,col 5)-(line 500,col 28)",
            "(line 502,col 5)-(line 502,col 56)",
            "(line 503,col 5)-(line 503,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 511,
        "end_line": 513,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 512,col 5)-(line 512,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 522,
        "end_line": 524,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 523,col 5)-(line 523,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 534,
        "end_line": 540,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 535,col 5)-(line 539,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 550,
        "end_line": 552,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 551,col 5)-(line 551,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 563,
        "end_line": 570,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 565,col 5)-(line 569,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 583,
        "end_line": 589,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 587,col 6)",
            "(line 588,col 5)-(line 588,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 596,
        "end_line": 598,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 597,col 5)-(line 597,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 608,col 5)-(line 608,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 619,
        "end_line": 621,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 620,col 5)-(line 620,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 628,
        "end_line": 630,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 629,col 5)-(line 629,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 638,
        "end_line": 651,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 639,col 5)-(line 650,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 664,
        "end_line": 667,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 666,col 5)-(line 666,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 684,
        "end_line": 872,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 687,col 5)-(line 687,col 51)",
            "(line 688,col 5)-(line 688,col 44)",
            "(line 690,col 5)-(line 690,col 39)",
            "(line 691,col 5)-(line 692,col 66)",
            "(line 694,col 5)-(line 694,col 44)",
            "(line 695,col 5)-(line 695,col 40)",
            "(line 698,col 5)-(line 698,col 38)",
            "(line 699,col 5)-(line 699,col 54)",
            "(line 700,col 5)-(line 700,col 50)",
            "(line 702,col 5)-(line 702,col 45)",
            "(line 703,col 5)-(line 703,col 68)",
            "(line 704,col 5)-(line 704,col 34)",
            "(line 705,col 5)-(line 705,col 59)",
            "(line 706,col 5)-(line 706,col 35)",
            "(line 708,col 5)-(line 709,col 39)",
            "(line 711,col 5)-(line 751,col 5)",
            "(line 753,col 5)-(line 871,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 874,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 876,col 5)-(line 876,col 57)",
            "(line 877,col 5)-(line 877,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 883,
        "end_line": 901,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 884,col 5)-(line 884,col 41)",
            "(line 885,col 5)-(line 885,col 62)",
            "(line 886,col 5)-(line 888,col 5)",
            "(line 889,col 5)-(line 889,col 55)",
            "(line 890,col 5)-(line 890,col 39)",
            "(line 891,col 5)-(line 892,col 66)",
            "(line 893,col 5)-(line 893,col 44)",
            "(line 894,col 5)-(line 894,col 42)",
            "(line 896,col 5)-(line 899,col 5)",
            "(line 900,col 5)-(line 900,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 903,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 904,col 5)-(line 904,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 911,
        "end_line": 917,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 912,col 5)-(line 912,col 47)",
            "(line 913,col 5)-(line 915,col 5)",
            "(line 916,col 5)-(line 916,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 923,
        "end_line": 929,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 924,col 5)-(line 924,col 47)",
            "(line 925,col 5)-(line 927,col 5)",
            "(line 928,col 5)-(line 928,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 936,
        "end_line": 943,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 937,col 5)-(line 937,col 48)",
            "(line 938,col 5)-(line 938,col 47)",
            "(line 939,col 5)-(line 941,col 5)",
            "(line 942,col 5)-(line 942,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 950,
        "end_line": 956,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 951,col 5)-(line 951,col 47)",
            "(line 952,col 5)-(line 954,col 5)",
            "(line 955,col 5)-(line 955,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 962,
        "end_line": 969,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 963,col 5)-(line 963,col 53)",
            "(line 964,col 5)-(line 967,col 5)",
            "(line 968,col 5)-(line 968,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 972,
        "end_line": 974,
        "comment": "",
        "child_ranges": [
            "(line 973,col 7)-(line 973,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 976,
        "end_line": 977,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 979,
        "end_line": 980,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 983,
        "end_line": 986,
        "comment": "",
        "child_ranges": [
            "(line 984,col 5)-(line 984,col 39)",
            "(line 985,col 5)-(line 985,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 988,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 989,col 5)-(line 989,col 41)"
        ]
    }
]