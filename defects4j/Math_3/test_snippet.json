[
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testScale()",
        "snippet": "    @Test\n    public void testScale() {\n        final double[] test = new double[] { -2.5, -1, 0, 1, 2.5 };\n        final double[] correctTest = MathArrays.copyOf(test);\n        final double[] correctScaled = new double[]{5.25, 2.1, 0, -2.1, -5.25};\n        \n        final double[] scaled = MathArrays.scale(-2.1, test);\n\n        // Make sure test has not changed\n        for (int i = 0; i < test.length; i++) {\n            Assert.assertEquals(correctTest[i], test[i], 0);\n        }\n\n        // Test scaled values\n        for (int i = 0; i < scaled.length; i++) {\n            Assert.assertEquals(correctScaled[i], scaled[i], 0);\n        }\n    }\n",
        "begin_line": 38,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 67)",
            "(line 41,col 9)-(line 41,col 61)",
            "(line 42,col 9)-(line 42,col 79)",
            "(line 44,col 9)-(line 44,col 61)",
            "(line 47,col 9)-(line 49,col 9)",
            "(line 52,col 9)-(line 54,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testScaleInPlace()",
        "snippet": "    @Test\n    public void testScaleInPlace() {\n        final double[] test = new double[] { -2.5, -1, 0, 1, 2.5 };\n        final double[] correctScaled = new double[]{5.25, 2.1, 0, -2.1, -5.25};\n        MathArrays.scaleInPlace(-2.1, test);\n\n        // Make sure test has changed\n        for (int i = 0; i < test.length; i++) {\n            Assert.assertEquals(correctScaled[i], test[i], 0);\n        }\n    }\n",
        "begin_line": 57,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 67)",
            "(line 60,col 9)-(line 60,col 79)",
            "(line 61,col 9)-(line 61,col 44)",
            "(line 64,col 9)-(line 66,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testEbeAddPrecondition()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testEbeAddPrecondition() {\n        MathArrays.ebeAdd(new double[3], new double[4]);\n    }\n",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testEbeSubtractPrecondition()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testEbeSubtractPrecondition() {\n        MathArrays.ebeSubtract(new double[3], new double[4]);\n    }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testEbeMultiplyPrecondition()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testEbeMultiplyPrecondition() {\n        MathArrays.ebeMultiply(new double[3], new double[4]);\n    }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testEbeDividePrecondition()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testEbeDividePrecondition() {\n        MathArrays.ebeDivide(new double[3], new double[4]);\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testEbeAdd()",
        "snippet": "    @Test\n    public void testEbeAdd() {\n        final double[] a = { 0, 1, 2 };\n        final double[] b = { 3, 5, 7 };\n        final double[] r = MathArrays.ebeAdd(a, b);\n\n        for (int i = 0; i < a.length; i++) {\n            Assert.assertEquals(a[i] + b[i], r[i], 0);\n        }\n    }\n",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 39)",
            "(line 89,col 9)-(line 89,col 39)",
            "(line 90,col 9)-(line 90,col 51)",
            "(line 92,col 9)-(line 94,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testEbeSubtract()",
        "snippet": "    @Test\n    public void testEbeSubtract() {\n        final double[] a = { 0, 1, 2 };\n        final double[] b = { 3, 5, 7 };\n        final double[] r = MathArrays.ebeSubtract(a, b);\n\n        for (int i = 0; i < a.length; i++) {\n            Assert.assertEquals(a[i] - b[i], r[i], 0);\n        }\n    }\n",
        "begin_line": 96,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 39)",
            "(line 99,col 9)-(line 99,col 39)",
            "(line 100,col 9)-(line 100,col 56)",
            "(line 102,col 9)-(line 104,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testEbeMultiply()",
        "snippet": "    @Test\n    public void testEbeMultiply() {\n        final double[] a = { 0, 1, 2 };\n        final double[] b = { 3, 5, 7 };\n        final double[] r = MathArrays.ebeMultiply(a, b);\n\n        for (int i = 0; i < a.length; i++) {\n            Assert.assertEquals(a[i] * b[i], r[i], 0);\n        }\n    }\n",
        "begin_line": 106,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 39)",
            "(line 109,col 9)-(line 109,col 39)",
            "(line 110,col 9)-(line 110,col 56)",
            "(line 112,col 9)-(line 114,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testEbeDivide()",
        "snippet": "    @Test\n    public void testEbeDivide() {\n        final double[] a = { 0, 1, 2 };\n        final double[] b = { 3, 5, 7 };\n        final double[] r = MathArrays.ebeDivide(a, b);\n\n        for (int i = 0; i < a.length; i++) {\n            Assert.assertEquals(a[i] / b[i], r[i], 0);\n        }\n    }\n",
        "begin_line": 116,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 39)",
            "(line 119,col 9)-(line 119,col 39)",
            "(line 120,col 9)-(line 120,col 54)",
            "(line 122,col 9)-(line 124,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testL1DistanceDouble()",
        "snippet": "    @Test\n    public void testL1DistanceDouble() {\n        double[] p1 = { 2.5,  0.0 };\n        double[] p2 = { -0.5, 4.0 };\n        Assert.assertTrue(Precision.equals(7.0, MathArrays.distance1(p1, p2), 1));\n    }\n",
        "begin_line": 127,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 36)",
            "(line 130,col 9)-(line 130,col 36)",
            "(line 131,col 9)-(line 131,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testL1DistanceInt()",
        "snippet": "    @Test\n    public void testL1DistanceInt() {\n        int[] p1 = { 3, 0 };\n        int[] p2 = { 0, 4 };\n        Assert.assertEquals(7, MathArrays.distance1(p1, p2));\n    }\n",
        "begin_line": 134,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 28)",
            "(line 137,col 9)-(line 137,col 28)",
            "(line 138,col 9)-(line 138,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testL2DistanceDouble()",
        "snippet": "    @Test\n    public void testL2DistanceDouble() {\n        double[] p1 = { 2.5,  0.0 };\n        double[] p2 = { -0.5, 4.0 };\n        Assert.assertTrue(Precision.equals(5.0, MathArrays.distance(p1, p2), 1));\n    }\n",
        "begin_line": 141,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 36)",
            "(line 144,col 9)-(line 144,col 36)",
            "(line 145,col 9)-(line 145,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testL2DistanceInt()",
        "snippet": "    @Test\n    public void testL2DistanceInt() {\n        int[] p1 = { 3, 0 };\n        int[] p2 = { 0, 4 };\n        Assert.assertTrue(Precision.equals(5, MathArrays.distance(p1, p2), 1));\n    }\n",
        "begin_line": 148,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 28)",
            "(line 151,col 9)-(line 151,col 28)",
            "(line 152,col 9)-(line 152,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testLInfDistanceDouble()",
        "snippet": "    @Test\n    public void testLInfDistanceDouble() {\n        double[] p1 = { 2.5,  0.0 };\n        double[] p2 = { -0.5, 4.0 };\n        Assert.assertTrue(Precision.equals(4.0, MathArrays.distanceInf(p1, p2), 1));\n    }\n",
        "begin_line": 155,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 36)",
            "(line 158,col 9)-(line 158,col 36)",
            "(line 159,col 9)-(line 159,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testLInfDistanceInt()",
        "snippet": "    @Test\n    public void testLInfDistanceInt() {\n        int[] p1 = { 3, 0 };\n        int[] p2 = { 0, 4 };\n        Assert.assertEquals(4, MathArrays.distanceInf(p1, p2));\n    }\n",
        "begin_line": 162,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 28)",
            "(line 165,col 9)-(line 165,col 28)",
            "(line 166,col 9)-(line 166,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCheckOrder()",
        "snippet": "    @Test\n    public void testCheckOrder() {\n        MathArrays.checkOrder(new double[] {-15, -5.5, -1, 2, 15},\n                             MathArrays.OrderDirection.INCREASING, true);\n        MathArrays.checkOrder(new double[] {-15, -5.5, -1, 2, 2},\n                             MathArrays.OrderDirection.INCREASING, false);\n        MathArrays.checkOrder(new double[] {3, -5.5, -11, -27.5},\n                             MathArrays.OrderDirection.DECREASING, true);\n        MathArrays.checkOrder(new double[] {3, 0, 0, -5.5, -11, -27.5},\n                             MathArrays.OrderDirection.DECREASING, false);\n\n        try {\n            MathArrays.checkOrder(new double[] {-15, -5.5, -1, -1, 2, 15},\n                                 MathArrays.OrderDirection.INCREASING, true);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NonMonotonicSequenceException e) {\n            // Expected\n        }\n        try {\n            MathArrays.checkOrder(new double[] {-15, -5.5, -1, -2, 2},\n                                 MathArrays.OrderDirection.INCREASING, false);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NonMonotonicSequenceException e) {\n            // Expected\n        }\n        try {\n            MathArrays.checkOrder(new double[] {3, 3, -5.5, -11, -27.5},\n                                 MathArrays.OrderDirection.DECREASING, true);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NonMonotonicSequenceException e) {\n            // Expected\n        }\n        try {\n            MathArrays.checkOrder(new double[] {3, -1, 0, -5.5, -11, -27.5},\n                                 MathArrays.OrderDirection.DECREASING, false);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NonMonotonicSequenceException e) {\n            // Expected\n        }\n        try {\n            MathArrays.checkOrder(new double[] {3, 0, -5.5, -11, -10},\n                                 MathArrays.OrderDirection.DECREASING, false);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NonMonotonicSequenceException e) {\n            // Expected\n        }\n    }\n",
        "begin_line": 169,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 172,col 73)",
            "(line 173,col 9)-(line 174,col 74)",
            "(line 175,col 9)-(line 176,col 73)",
            "(line 177,col 9)-(line 178,col 74)",
            "(line 180,col 9)-(line 186,col 9)",
            "(line 187,col 9)-(line 193,col 9)",
            "(line 194,col 9)-(line 200,col 9)",
            "(line 201,col 9)-(line 207,col 9)",
            "(line 208,col 9)-(line 214,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testIsMonotonic()",
        "snippet": "    @Test\n    public void testIsMonotonic() {\n        Assert.assertFalse(MathArrays.isMonotonic(new double[] { -15, -5.5, -1, -1, 2, 15 },\n                                                  MathArrays.OrderDirection.INCREASING, true));\n        Assert.assertTrue(MathArrays.isMonotonic(new double[] { -15, -5.5, -1, 0, 2, 15 },\n                                                 MathArrays.OrderDirection.INCREASING, true));\n        Assert.assertFalse(MathArrays.isMonotonic(new double[] { -15, -5.5, -1, -2, 2 },\n                                                  MathArrays.OrderDirection.INCREASING, false));\n        Assert.assertTrue(MathArrays.isMonotonic(new double[] { -15, -5.5, -1, -1, 2 },\n                                                 MathArrays.OrderDirection.INCREASING, false));\n        Assert.assertFalse(MathArrays.isMonotonic(new double[] { 3, 3, -5.5, -11, -27.5 },\n                                                  MathArrays.OrderDirection.DECREASING, true));\n        Assert.assertTrue(MathArrays.isMonotonic(new double[] { 3, 2, -5.5, -11, -27.5 },\n                                                 MathArrays.OrderDirection.DECREASING, true));\n        Assert.assertFalse(MathArrays.isMonotonic(new double[] { 3, -1, 0, -5.5, -11, -27.5 },\n                                                  MathArrays.OrderDirection.DECREASING, false));\n        Assert.assertTrue(MathArrays.isMonotonic(new double[] { 3, 0, 0, -5.5, -11, -27.5 },\n                                                 MathArrays.OrderDirection.DECREASING, false));\n    }\n",
        "begin_line": 217,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 220,col 95)",
            "(line 221,col 9)-(line 222,col 94)",
            "(line 223,col 9)-(line 224,col 96)",
            "(line 225,col 9)-(line 226,col 95)",
            "(line 227,col 9)-(line 228,col 95)",
            "(line 229,col 9)-(line 230,col 94)",
            "(line 231,col 9)-(line 232,col 96)",
            "(line 233,col 9)-(line 234,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testIsMonotonicComparable()",
        "snippet": "    @Test\n    public void testIsMonotonicComparable() {\n        Assert.assertFalse(MathArrays.isMonotonic(new Double[] { new Double(-15),\n                                                                 new Double(-5.5),\n                                                                 new Double(-1),\n                                                                 new Double(-1),\n                                                                 new Double(2),\n                                                                 new Double(15) },\n                MathArrays.OrderDirection.INCREASING, true));\n        Assert.assertTrue(MathArrays.isMonotonic(new Double[] { new Double(-15),\n                                                                new Double(-5.5),\n                                                                new Double(-1),\n                                                                new Double(0),\n                                                                new Double(2),\n                                                                new Double(15) },\n                MathArrays.OrderDirection.INCREASING, true));\n        Assert.assertFalse(MathArrays.isMonotonic(new Double[] { new Double(-15),\n                                                                 new Double(-5.5),\n                                                                 new Double(-1),\n                                                                 new Double(-2),\n                                                                 new Double(2) },\n                MathArrays.OrderDirection.INCREASING, false));\n        Assert.assertTrue(MathArrays.isMonotonic(new Double[] { new Double(-15),\n                                                                new Double(-5.5),\n                                                                new Double(-1),\n                                                                new Double(-1),\n                                                                new Double(2) },\n                MathArrays.OrderDirection.INCREASING, false));\n        Assert.assertFalse(MathArrays.isMonotonic(new Double[] { new Double(3),\n                                                                 new Double(3),\n                                                                 new Double(-5.5),\n                                                                 new Double(-11),\n                                                                 new Double(-27.5) },\n                MathArrays.OrderDirection.DECREASING, true));\n        Assert.assertTrue(MathArrays.isMonotonic(new Double[] { new Double(3),\n                                                                new Double(2),\n                                                                new Double(-5.5),\n                                                                new Double(-11),\n                                                                new Double(-27.5) },\n                MathArrays.OrderDirection.DECREASING, true));\n        Assert.assertFalse(MathArrays.isMonotonic(new Double[] { new Double(3),\n                                                                 new Double(-1),\n                                                                 new Double(0),\n                                                                 new Double(-5.5),\n                                                                 new Double(-11),\n                                                                 new Double(-27.5) },\n                MathArrays.OrderDirection.DECREASING, false));\n        Assert.assertTrue(MathArrays.isMonotonic(new Double[] { new Double(3),\n                                                                new Double(0),\n                                                                new Double(0),\n                                                                new Double(-5.5),\n                                                                new Double(-11),\n                                                                new Double(-27.5) },\n                MathArrays.OrderDirection.DECREASING, false));\n    }\n",
        "begin_line": 237,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 239,col 9)-(line 245,col 61)",
            "(line 246,col 9)-(line 252,col 61)",
            "(line 253,col 9)-(line 258,col 62)",
            "(line 259,col 9)-(line 264,col 62)",
            "(line 265,col 9)-(line 270,col 61)",
            "(line 271,col 9)-(line 276,col 61)",
            "(line 277,col 9)-(line 283,col 62)",
            "(line 284,col 9)-(line 290,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCheckRectangular()",
        "snippet": "    @Test\n    public void testCheckRectangular() {\n        final long[][] rect = new long[][] {{0, 1}, {2, 3}};\n        final long[][] ragged = new long[][] {{0, 1}, {2}};\n        final long[][] nullArray = null;\n        final long[][] empty = new long[][] {};\n        MathArrays.checkRectangular(rect);\n        MathArrays.checkRectangular(empty);\n        try {\n            MathArrays.checkRectangular(ragged);\n            Assert.fail(\"Expecting DimensionMismatchException\");\n        } catch (DimensionMismatchException ex) {\n            // Expected\n        }\n        try {\n            MathArrays.checkRectangular(nullArray);\n            Assert.fail(\"Expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n            // Expected\n        } \n    }\n",
        "begin_line": 293,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 60)",
            "(line 296,col 9)-(line 296,col 59)",
            "(line 297,col 9)-(line 297,col 40)",
            "(line 298,col 9)-(line 298,col 47)",
            "(line 299,col 9)-(line 299,col 42)",
            "(line 300,col 9)-(line 300,col 43)",
            "(line 301,col 9)-(line 306,col 9)",
            "(line 307,col 9)-(line 312,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCheckPositive()",
        "snippet": "    @Test\n    public void testCheckPositive() {\n        final double[] positive = new double[] {1, 2, 3};\n        final double[] nonNegative = new double[] {0, 1, 2};\n        final double[] nullArray = null;\n        final double[] empty = new double[] {};\n        MathArrays.checkPositive(positive);\n        MathArrays.checkPositive(empty);\n        try {\n            MathArrays.checkPositive(nullArray);\n            Assert.fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            // Expected\n        }\n        try {\n            MathArrays.checkPositive(nonNegative);\n            Assert.fail(\"Expecting NotStrictlyPositiveException\");\n        } catch (NotStrictlyPositiveException ex) {\n            // Expected\n        }\n    }\n",
        "begin_line": 315,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 57)",
            "(line 318,col 9)-(line 318,col 60)",
            "(line 319,col 9)-(line 319,col 40)",
            "(line 320,col 9)-(line 320,col 47)",
            "(line 321,col 9)-(line 321,col 43)",
            "(line 322,col 9)-(line 322,col 40)",
            "(line 323,col 9)-(line 328,col 9)",
            "(line 329,col 9)-(line 334,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCheckNonNegative()",
        "snippet": "    @Test\n    public void testCheckNonNegative() {\n        final long[] nonNegative = new long[] {0, 1};\n        final long[] hasNegative = new long[] {-1};\n        final long[] nullArray = null;\n        final long[] empty = new long[] {};\n        MathArrays.checkNonNegative(nonNegative);\n        MathArrays.checkNonNegative(empty);\n        try {\n            MathArrays.checkNonNegative(nullArray);\n            Assert.fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            // Expected\n        }\n        try {\n            MathArrays.checkNonNegative(hasNegative);\n            Assert.fail(\"Expecting NotPositiveException\");\n        } catch (NotPositiveException ex) {\n            // Expected\n        }\n    }\n",
        "begin_line": 337,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 53)",
            "(line 340,col 9)-(line 340,col 51)",
            "(line 341,col 9)-(line 341,col 38)",
            "(line 342,col 9)-(line 342,col 43)",
            "(line 343,col 9)-(line 343,col 49)",
            "(line 344,col 9)-(line 344,col 43)",
            "(line 345,col 9)-(line 350,col 9)",
            "(line 351,col 9)-(line 356,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCheckNonNegative2D()",
        "snippet": "    @Test\n    public void testCheckNonNegative2D() {\n        final long[][] nonNegative = new long[][] {{0, 1}, {1, 0}};\n        final long[][] hasNegative = new long[][] {{-1}, {0}};\n        final long[][] nullArray = null;\n        final long[][] empty = new long[][] {};\n        MathArrays.checkNonNegative(nonNegative);\n        MathArrays.checkNonNegative(empty);\n        try {\n            MathArrays.checkNonNegative(nullArray);\n            Assert.fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            // Expected\n        }\n        try {\n            MathArrays.checkNonNegative(hasNegative);\n            Assert.fail(\"Expecting NotPositiveException\");\n        } catch (NotPositiveException ex) {\n            // Expected\n        }\n    }\n",
        "begin_line": 359,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 361,col 9)-(line 361,col 67)",
            "(line 362,col 9)-(line 362,col 62)",
            "(line 363,col 9)-(line 363,col 40)",
            "(line 364,col 9)-(line 364,col 47)",
            "(line 365,col 9)-(line 365,col 49)",
            "(line 366,col 9)-(line 366,col 43)",
            "(line 367,col 9)-(line 372,col 9)",
            "(line 373,col 9)-(line 378,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testSortInPlace()",
        "snippet": "    @Test\n    public void testSortInPlace() {\n        final double[] x1 = {2,   5,  -3, 1,  4};\n        final double[] x2 = {4,  25,   9, 1, 16};\n        final double[] x3 = {8, 125, -27, 1, 64};\n\n        MathArrays.sortInPlace(x1, x2, x3);\n\n        Assert.assertEquals(-3,  x1[0], Math.ulp(1d));\n        Assert.assertEquals(9,   x2[0], Math.ulp(1d));\n        Assert.assertEquals(-27, x3[0], Math.ulp(1d));\n\n        Assert.assertEquals(1, x1[1], Math.ulp(1d));\n        Assert.assertEquals(1, x2[1], Math.ulp(1d));\n        Assert.assertEquals(1, x3[1], Math.ulp(1d));\n\n        Assert.assertEquals(2, x1[2], Math.ulp(1d));\n        Assert.assertEquals(4, x2[2], Math.ulp(1d));\n        Assert.assertEquals(8, x3[2], Math.ulp(1d));\n\n        Assert.assertEquals(4,  x1[3], Math.ulp(1d));\n        Assert.assertEquals(16, x2[3], Math.ulp(1d));\n        Assert.assertEquals(64, x3[3], Math.ulp(1d));\n\n        Assert.assertEquals(5,   x1[4], Math.ulp(1d));\n        Assert.assertEquals(25,  x2[4], Math.ulp(1d));\n        Assert.assertEquals(125, x3[4], Math.ulp(1d));\n    }\n",
        "begin_line": 381,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 383,col 9)-(line 383,col 49)",
            "(line 384,col 9)-(line 384,col 49)",
            "(line 385,col 9)-(line 385,col 49)",
            "(line 387,col 9)-(line 387,col 43)",
            "(line 389,col 9)-(line 389,col 54)",
            "(line 390,col 9)-(line 390,col 54)",
            "(line 391,col 9)-(line 391,col 54)",
            "(line 393,col 9)-(line 393,col 52)",
            "(line 394,col 9)-(line 394,col 52)",
            "(line 395,col 9)-(line 395,col 52)",
            "(line 397,col 9)-(line 397,col 52)",
            "(line 398,col 9)-(line 398,col 52)",
            "(line 399,col 9)-(line 399,col 52)",
            "(line 401,col 9)-(line 401,col 53)",
            "(line 402,col 9)-(line 402,col 53)",
            "(line 403,col 9)-(line 403,col 53)",
            "(line 405,col 9)-(line 405,col 54)",
            "(line 406,col 9)-(line 406,col 54)",
            "(line 407,col 9)-(line 407,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testSortInPlaceDecresasingOrder()",
        "snippet": "    @Test\n    public void testSortInPlaceDecresasingOrder() {\n        final double[] x1 = {2,   5,  -3, 1,  4};\n        final double[] x2 = {4,  25,   9, 1, 16};\n        final double[] x3 = {8, 125, -27, 1, 64};\n\n        MathArrays.sortInPlace(x1,\n                               MathArrays.OrderDirection.DECREASING,\n                               x2, x3);\n\n        Assert.assertEquals(-3,  x1[4], Math.ulp(1d));\n        Assert.assertEquals(9,   x2[4], Math.ulp(1d));\n        Assert.assertEquals(-27, x3[4], Math.ulp(1d));\n\n        Assert.assertEquals(1, x1[3], Math.ulp(1d));\n        Assert.assertEquals(1, x2[3], Math.ulp(1d));\n        Assert.assertEquals(1, x3[3], Math.ulp(1d));\n\n        Assert.assertEquals(2, x1[2], Math.ulp(1d));\n        Assert.assertEquals(4, x2[2], Math.ulp(1d));\n        Assert.assertEquals(8, x3[2], Math.ulp(1d));\n\n        Assert.assertEquals(4,  x1[1], Math.ulp(1d));\n        Assert.assertEquals(16, x2[1], Math.ulp(1d));\n        Assert.assertEquals(64, x3[1], Math.ulp(1d));\n\n        Assert.assertEquals(5,   x1[0], Math.ulp(1d));\n        Assert.assertEquals(25,  x2[0], Math.ulp(1d));\n        Assert.assertEquals(125, x3[0], Math.ulp(1d));\n    }\n",
        "begin_line": 410,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 49)",
            "(line 413,col 9)-(line 413,col 49)",
            "(line 414,col 9)-(line 414,col 49)",
            "(line 416,col 9)-(line 418,col 39)",
            "(line 420,col 9)-(line 420,col 54)",
            "(line 421,col 9)-(line 421,col 54)",
            "(line 422,col 9)-(line 422,col 54)",
            "(line 424,col 9)-(line 424,col 52)",
            "(line 425,col 9)-(line 425,col 52)",
            "(line 426,col 9)-(line 426,col 52)",
            "(line 428,col 9)-(line 428,col 52)",
            "(line 429,col 9)-(line 429,col 52)",
            "(line 430,col 9)-(line 430,col 52)",
            "(line 432,col 9)-(line 432,col 53)",
            "(line 433,col 9)-(line 433,col 53)",
            "(line 434,col 9)-(line 434,col 53)",
            "(line 436,col 9)-(line 436,col 54)",
            "(line 437,col 9)-(line 437,col 54)",
            "(line 438,col 9)-(line 438,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testSortInPlaceExample()",
        "snippet": "    @Test\n    /** Example in javadoc */\n    public void testSortInPlaceExample() {\n        final double[] x = {3, 1, 2};\n        final double[] y = {1, 2, 3};\n        final double[] z = {0, 5, 7};\n        MathArrays.sortInPlace(x, y, z);\n        final double[] sx = {1, 2, 3};\n        final double[] sy = {2, 3, 1};\n        final double[] sz = {5, 7, 0};\n        Assert.assertTrue(Arrays.equals(sx, x));\n        Assert.assertTrue(Arrays.equals(sy, y));\n        Assert.assertTrue(Arrays.equals(sz, z));\n    }\n",
        "begin_line": 441,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 37)",
            "(line 445,col 9)-(line 445,col 37)",
            "(line 446,col 9)-(line 446,col 37)",
            "(line 447,col 9)-(line 447,col 40)",
            "(line 448,col 9)-(line 448,col 38)",
            "(line 449,col 9)-(line 449,col 38)",
            "(line 450,col 9)-(line 450,col 38)",
            "(line 451,col 9)-(line 451,col 48)",
            "(line 452,col 9)-(line 452,col 48)",
            "(line 453,col 9)-(line 453,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testSortInPlaceFailures()",
        "snippet": "    @Test\n    public void testSortInPlaceFailures() {\n        final double[] nullArray = null;\n        final double[] one = {1};\n        final double[] two = {1, 2};\n        final double[] onep = {2};\n        try {\n            MathArrays.sortInPlace(one, two);\n            Assert.fail(\"Expecting DimensionMismatchException\");\n        } catch (DimensionMismatchException ex) {\n            // expected\n        }\n        try {\n            MathArrays.sortInPlace(one, nullArray);\n            Assert.fail(\"Expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n            // expected\n        }\n        try {\n            MathArrays.sortInPlace(one, onep, nullArray);\n            Assert.fail(\"Expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 456,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 458,col 9)-(line 458,col 40)",
            "(line 459,col 9)-(line 459,col 33)",
            "(line 460,col 9)-(line 460,col 36)",
            "(line 461,col 9)-(line 461,col 34)",
            "(line 462,col 9)-(line 467,col 9)",
            "(line 468,col 9)-(line 473,col 9)",
            "(line 474,col 9)-(line 479,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCopyOfInt()",
        "snippet": "    @Test\n    public void testCopyOfInt() {\n        final int[] source = { Integer.MIN_VALUE,\n                               -1, 0, 1, 3, 113, 4769,\n                               Integer.MAX_VALUE };\n        final int[] dest = MathArrays.copyOf(source);\n\n        Assert.assertEquals(dest.length, source.length);\n        for (int i = 0; i < source.length; i++) {\n            Assert.assertEquals(source[i], dest[i]);\n        }\n    }\n",
        "begin_line": 482,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 484,col 9)-(line 486,col 51)",
            "(line 487,col 9)-(line 487,col 53)",
            "(line 489,col 9)-(line 489,col 56)",
            "(line 490,col 9)-(line 492,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCopyOfInt2()",
        "snippet": "    @Test\n    public void testCopyOfInt2() {\n        final int[] source = { Integer.MIN_VALUE,\n                               -1, 0, 1, 3, 113, 4769,\n                               Integer.MAX_VALUE };\n        final int offset = 3;\n        final int[] dest = MathArrays.copyOf(source, source.length - offset);\n\n        Assert.assertEquals(dest.length, source.length - offset);\n        for (int i = 0; i < source.length - offset; i++) {\n            Assert.assertEquals(source[i], dest[i]);\n        }\n    }\n",
        "begin_line": 495,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 497,col 9)-(line 499,col 51)",
            "(line 500,col 9)-(line 500,col 29)",
            "(line 501,col 9)-(line 501,col 77)",
            "(line 503,col 9)-(line 503,col 65)",
            "(line 504,col 9)-(line 506,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCopyOfInt3()",
        "snippet": "    @Test\n    public void testCopyOfInt3() {\n        final int[] source = { Integer.MIN_VALUE,\n                               -1, 0, 1, 3, 113, 4769,\n                               Integer.MAX_VALUE };\n        final int offset = 3;\n        final int[] dest = MathArrays.copyOf(source, source.length + offset);\n\n        Assert.assertEquals(dest.length, source.length + offset);\n        for (int i = 0; i < source.length; i++) {\n            Assert.assertEquals(source[i], dest[i]);\n        }\n        for (int i = source.length; i < source.length + offset; i++) {\n            Assert.assertEquals(0, dest[i], 0);\n        }\n    }\n",
        "begin_line": 509,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 511,col 9)-(line 513,col 51)",
            "(line 514,col 9)-(line 514,col 29)",
            "(line 515,col 9)-(line 515,col 77)",
            "(line 517,col 9)-(line 517,col 65)",
            "(line 518,col 9)-(line 520,col 9)",
            "(line 521,col 9)-(line 523,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCopyOfDouble()",
        "snippet": "    @Test\n    public void testCopyOfDouble() {\n        final double[] source = { Double.NEGATIVE_INFINITY,\n                                  -Double.MAX_VALUE,\n                                  -1, 0,\n                                  Double.MIN_VALUE,\n                                  Math.ulp(1d),\n                                  1, 3, 113, 4769,\n                                  Double.MAX_VALUE,\n                                  Double.POSITIVE_INFINITY };\n        final double[] dest = MathArrays.copyOf(source);\n\n        Assert.assertEquals(dest.length, source.length);\n        for (int i = 0; i < source.length; i++) {\n            Assert.assertEquals(source[i], dest[i], 0);\n        }\n    }\n",
        "begin_line": 526,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 528,col 9)-(line 535,col 61)",
            "(line 536,col 9)-(line 536,col 56)",
            "(line 538,col 9)-(line 538,col 56)",
            "(line 539,col 9)-(line 541,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCopyOfDouble2()",
        "snippet": "    @Test\n    public void testCopyOfDouble2() {\n        final double[] source = { Double.NEGATIVE_INFINITY,\n                                  -Double.MAX_VALUE,\n                                  -1, 0,\n                                  Double.MIN_VALUE,\n                                  Math.ulp(1d),\n                                  1, 3, 113, 4769,\n                                  Double.MAX_VALUE,\n                                  Double.POSITIVE_INFINITY };\n        final int offset = 3;\n        final double[] dest = MathArrays.copyOf(source, source.length - offset);\n\n        Assert.assertEquals(dest.length, source.length - offset);\n        for (int i = 0; i < source.length - offset; i++) {\n            Assert.assertEquals(source[i], dest[i], 0);\n        }\n    }\n",
        "begin_line": 544,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 546,col 9)-(line 553,col 61)",
            "(line 554,col 9)-(line 554,col 29)",
            "(line 555,col 9)-(line 555,col 80)",
            "(line 557,col 9)-(line 557,col 65)",
            "(line 558,col 9)-(line 560,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testCopyOfDouble3()",
        "snippet": "    @Test\n    public void testCopyOfDouble3() {\n        final double[] source = { Double.NEGATIVE_INFINITY,\n                                  -Double.MAX_VALUE,\n                                  -1, 0,\n                                  Double.MIN_VALUE,\n                                  Math.ulp(1d),\n                                  1, 3, 113, 4769,\n                                  Double.MAX_VALUE,\n                                  Double.POSITIVE_INFINITY };\n        final int offset = 3;\n        final double[] dest = MathArrays.copyOf(source, source.length + offset);\n\n        Assert.assertEquals(dest.length, source.length + offset);\n        for (int i = 0; i < source.length; i++) {\n            Assert.assertEquals(source[i], dest[i], 0);\n        }\n        for (int i = source.length; i < source.length + offset; i++) {\n            Assert.assertEquals(0, dest[i], 0);\n        }\n    }\n",
        "begin_line": 563,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 572,col 61)",
            "(line 573,col 9)-(line 573,col 29)",
            "(line 574,col 9)-(line 574,col 80)",
            "(line 576,col 9)-(line 576,col 65)",
            "(line 577,col 9)-(line 579,col 9)",
            "(line 580,col 9)-(line 582,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testLinearCombinationWithSingleElementArray()",
        "snippet": "    @Test\n    public void testLinearCombinationWithSingleElementArray() {\n        final double[] a = { 1.23456789 };\n        final double[] b = { 98765432.1 };\n\n        Assert.assertEquals(a[0] * b[0], MathArrays.linearCombination(a, b), 0d);\n    }\n",
        "begin_line": 586,
        "end_line": 592,
        "comment": " MATH-1005",
        "child_ranges": [
            "(line 588,col 9)-(line 588,col 42)",
            "(line 589,col 9)-(line 589,col 42)",
            "(line 591,col 9)-(line 591,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testLinearCombination1()",
        "snippet": "    @Test\n    public void testLinearCombination1() {\n        final double[] a = new double[] {\n            -1321008684645961.0 / 268435456.0,\n            -5774608829631843.0 / 268435456.0,\n            -7645843051051357.0 / 8589934592.0\n        };\n        final double[] b = new double[] {\n            -5712344449280879.0 / 2097152.0,\n            -4550117129121957.0 / 2097152.0,\n            8846951984510141.0 / 131072.0\n        };\n\n        final double abSumInline = MathArrays.linearCombination(a[0], b[0],\n                                                                a[1], b[1],\n                                                                a[2], b[2]);\n        final double abSumArray = MathArrays.linearCombination(a, b);\n\n        Assert.assertEquals(abSumInline, abSumArray, 0);\n        Assert.assertEquals(-1.8551294182586248737720779899, abSumInline, 1.0e-15);\n\n        final double naive = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n        Assert.assertTrue(FastMath.abs(naive - abSumInline) > 1.5);\n\n    }\n",
        "begin_line": 594,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 596,col 9)-(line 600,col 10)",
            "(line 601,col 9)-(line 605,col 10)",
            "(line 607,col 9)-(line 609,col 76)",
            "(line 610,col 9)-(line 610,col 69)",
            "(line 612,col 9)-(line 612,col 56)",
            "(line 613,col 9)-(line 613,col 83)",
            "(line 615,col 9)-(line 615,col 69)",
            "(line 616,col 9)-(line 616,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testLinearCombination2()",
        "snippet": "    @Test\n    public void testLinearCombination2() {\n        // we compare accurate versus naive dot product implementations\n        // on regular vectors (i.e. not extreme cases like in the previous test)\n        Well1024a random = new Well1024a(553267312521321234l);\n\n        for (int i = 0; i < 10000; ++i) {\n            final double ux = 1e17 * random.nextDouble();\n            final double uy = 1e17 * random.nextDouble();\n            final double uz = 1e17 * random.nextDouble();\n            final double vx = 1e17 * random.nextDouble();\n            final double vy = 1e17 * random.nextDouble();\n            final double vz = 1e17 * random.nextDouble();\n            final double sInline = MathArrays.linearCombination(ux, vx,\n                                                                uy, vy,\n                                                                uz, vz);\n            final double sArray = MathArrays.linearCombination(new double[] {ux, uy, uz},\n                                                               new double[] {vx, vy, vz});\n            Assert.assertEquals(sInline, sArray, 0);\n        }\n    }\n",
        "begin_line": 620,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 624,col 9)-(line 624,col 62)",
            "(line 626,col 9)-(line 639,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testLinearCombinationInfinite()",
        "snippet": "    @Test\n    public void testLinearCombinationInfinite() {\n        final double[][] a = new double[][] {\n            { 1, 2, 3, 4},\n            { 1, Double.POSITIVE_INFINITY, 3, 4},\n            { 1, 2, Double.POSITIVE_INFINITY, 4},\n            { 1, Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY},\n            { 1, 2, 3, 4},\n            { 1, 2, 3, 4},\n            { 1, 2, 3, 4},\n            { 1, 2, 3, 4}\n        };\n        final double[][] b = new double[][] {\n            { 1, -2, 3, 4},\n            { 1, -2, 3, 4},\n            { 1, -2, 3, 4},\n            { 1, -2, 3, 4},\n            { 1, Double.POSITIVE_INFINITY, 3, 4},\n            { 1, -2, Double.POSITIVE_INFINITY, 4},\n            { 1, Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY},\n            { Double.NaN, -2, 3, 4}\n        };\n\n        Assert.assertEquals(-3,\n                            MathArrays.linearCombination(a[0][0], b[0][0],\n                                                         a[0][1], b[0][1]),\n                            1.0e-10);\n        Assert.assertEquals(6,\n                            MathArrays.linearCombination(a[0][0], b[0][0],\n                                                         a[0][1], b[0][1],\n                                                         a[0][2], b[0][2]),\n                            1.0e-10);\n        Assert.assertEquals(22,\n                            MathArrays.linearCombination(a[0][0], b[0][0],\n                                                         a[0][1], b[0][1],\n                                                         a[0][2], b[0][2],\n                                                         a[0][3], b[0][3]),\n                            1.0e-10);\n        Assert.assertEquals(22, MathArrays.linearCombination(a[0], b[0]), 1.0e-10);\n\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathArrays.linearCombination(a[1][0], b[1][0],\n                                                         a[1][1], b[1][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathArrays.linearCombination(a[1][0], b[1][0],\n                                                         a[1][1], b[1][1],\n                                                         a[1][2], b[1][2]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathArrays.linearCombination(a[1][0], b[1][0],\n                                                         a[1][1], b[1][1],\n                                                         a[1][2], b[1][2],\n                                                         a[1][3], b[1][3]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, MathArrays.linearCombination(a[1], b[1]), 1.0e-10);\n\n        Assert.assertEquals(-3,\n                            MathArrays.linearCombination(a[2][0], b[2][0],\n                                                         a[2][1], b[2][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathArrays.linearCombination(a[2][0], b[2][0],\n                                                         a[2][1], b[2][1],\n                                                         a[2][2], b[2][2]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathArrays.linearCombination(a[2][0], b[2][0],\n                                                         a[2][1], b[2][1],\n                                                         a[2][2], b[2][2],\n                                                         a[2][3], b[2][3]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, MathArrays.linearCombination(a[2], b[2]), 1.0e-10);\n\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathArrays.linearCombination(a[3][0], b[3][0],\n                                                         a[3][1], b[3][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathArrays.linearCombination(a[3][0], b[3][0],\n                                                         a[3][1], b[3][1],\n                                                         a[3][2], b[3][2]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n                            MathArrays.linearCombination(a[3][0], b[3][0],\n                                                         a[3][1], b[3][1],\n                                                         a[3][2], b[3][2],\n                                                         a[3][3], b[3][3]),\n                            1.0e-10);\n        Assert.assertEquals(Double.NEGATIVE_INFINITY, MathArrays.linearCombination(a[3], b[3]), 1.0e-10);\n\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathArrays.linearCombination(a[4][0], b[4][0],\n                                                         a[4][1], b[4][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathArrays.linearCombination(a[4][0], b[4][0],\n                                                         a[4][1], b[4][1],\n                                                         a[4][2], b[4][2]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathArrays.linearCombination(a[4][0], b[4][0],\n                                                         a[4][1], b[4][1],\n                                                         a[4][2], b[4][2],\n                                                         a[4][3], b[4][3]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, MathArrays.linearCombination(a[4], b[4]), 1.0e-10);\n\n        Assert.assertEquals(-3,\n                            MathArrays.linearCombination(a[5][0], b[5][0],\n                                                         a[5][1], b[5][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathArrays.linearCombination(a[5][0], b[5][0],\n                                                         a[5][1], b[5][1],\n                                                         a[5][2], b[5][2]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathArrays.linearCombination(a[5][0], b[5][0],\n                                                         a[5][1], b[5][1],\n                                                         a[5][2], b[5][2],\n                                                         a[5][3], b[5][3]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY, MathArrays.linearCombination(a[5], b[5]), 1.0e-10);\n\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathArrays.linearCombination(a[6][0], b[6][0],\n                                                         a[6][1], b[6][1]),\n                            1.0e-10);\n        Assert.assertEquals(Double.POSITIVE_INFINITY,\n                            MathArrays.linearCombination(a[6][0], b[6][0],\n                                                         a[6][1], b[6][1],\n                                                         a[6][2], b[6][2]),\n                            1.0e-10);\n        Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[6][0], b[6][0],\n                                                                    a[6][1], b[6][1],\n                                                                    a[6][2], b[6][2],\n                                                                    a[6][3], b[6][3])));\n        Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[6], b[6])));\n\n        Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7][0], b[7][0],\n                                                                    a[7][1], b[7][1])));\n        Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7][0], b[7][0],\n                                                                    a[7][1], b[7][1],\n                                                                    a[7][2], b[7][2])));\n        Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7][0], b[7][0],\n                                                                    a[7][1], b[7][1],\n                                                                    a[7][2], b[7][2],\n                                                                    a[7][3], b[7][3])));\n        Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7], b[7])));\n    }\n",
        "begin_line": 642,
        "end_line": 792,
        "comment": "",
        "child_ranges": [
            "(line 644,col 9)-(line 653,col 10)",
            "(line 654,col 9)-(line 663,col 10)",
            "(line 665,col 9)-(line 668,col 37)",
            "(line 669,col 9)-(line 673,col 37)",
            "(line 674,col 9)-(line 679,col 37)",
            "(line 680,col 9)-(line 680,col 83)",
            "(line 682,col 9)-(line 685,col 37)",
            "(line 686,col 9)-(line 690,col 37)",
            "(line 691,col 9)-(line 696,col 37)",
            "(line 697,col 9)-(line 697,col 105)",
            "(line 699,col 9)-(line 702,col 37)",
            "(line 703,col 9)-(line 707,col 37)",
            "(line 708,col 9)-(line 713,col 37)",
            "(line 714,col 9)-(line 714,col 105)",
            "(line 716,col 9)-(line 719,col 37)",
            "(line 720,col 9)-(line 724,col 37)",
            "(line 725,col 9)-(line 730,col 37)",
            "(line 731,col 9)-(line 731,col 105)",
            "(line 733,col 9)-(line 736,col 37)",
            "(line 737,col 9)-(line 741,col 37)",
            "(line 742,col 9)-(line 747,col 37)",
            "(line 748,col 9)-(line 748,col 105)",
            "(line 750,col 9)-(line 753,col 37)",
            "(line 754,col 9)-(line 758,col 37)",
            "(line 759,col 9)-(line 764,col 37)",
            "(line 765,col 9)-(line 765,col 105)",
            "(line 767,col 9)-(line 770,col 37)",
            "(line 771,col 9)-(line 775,col 37)",
            "(line 776,col 9)-(line 779,col 88)",
            "(line 780,col 9)-(line 780,col 82)",
            "(line 782,col 9)-(line 783,col 88)",
            "(line 784,col 9)-(line 786,col 88)",
            "(line 787,col 9)-(line 790,col 88)",
            "(line 791,col 9)-(line 791,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testArrayEquals()",
        "snippet": "    @Test\n    public void testArrayEquals() {\n        Assert.assertFalse(MathArrays.equals(new double[] { 1d }, null));\n        Assert.assertFalse(MathArrays.equals(null, new double[] { 1d }));\n        Assert.assertTrue(MathArrays.equals((double[]) null, (double[]) null));\n\n        Assert.assertFalse(MathArrays.equals(new double[] { 1d }, new double[0]));\n        Assert.assertTrue(MathArrays.equals(new double[] { 1d }, new double[] { 1d }));\n        Assert.assertTrue(MathArrays.equals(new double[] { Double.POSITIVE_INFINITY,\n                                                           Double.NEGATIVE_INFINITY, 1d, 0d },\n                                            new double[] { Double.POSITIVE_INFINITY,\n                                                           Double.NEGATIVE_INFINITY, 1d, 0d }));\n        Assert.assertFalse(MathArrays.equals(new double[] { Double.NaN },\n                                             new double[] { Double.NaN }));\n        Assert.assertFalse(MathArrays.equals(new double[] { Double.POSITIVE_INFINITY },\n                                             new double[] { Double.NEGATIVE_INFINITY }));\n        Assert.assertFalse(MathArrays.equals(new double[] { 1d },\n                                             new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n\n    }\n",
        "begin_line": 794,
        "end_line": 813,
        "comment": "",
        "child_ranges": [
            "(line 796,col 9)-(line 796,col 73)",
            "(line 797,col 9)-(line 797,col 73)",
            "(line 798,col 9)-(line 798,col 79)",
            "(line 800,col 9)-(line 800,col 82)",
            "(line 801,col 9)-(line 801,col 87)",
            "(line 802,col 9)-(line 805,col 96)",
            "(line 806,col 9)-(line 807,col 75)",
            "(line 808,col 9)-(line 809,col 89)",
            "(line 810,col 9)-(line 811,col 115)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testArrayEqualsIncludingNaN()",
        "snippet": "    @Test\n    public void testArrayEqualsIncludingNaN() {\n        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d }, null));\n        Assert.assertFalse(MathArrays.equalsIncludingNaN(null, new double[] { 1d }));\n        Assert.assertTrue(MathArrays.equalsIncludingNaN((double[]) null, (double[]) null));\n\n        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d }, new double[0]));\n        Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));\n        Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[] { Double.NaN, Double.POSITIVE_INFINITY,\n                                                                       Double.NEGATIVE_INFINITY, 1d, 0d },\n                                                        new double[] { Double.NaN, Double.POSITIVE_INFINITY,\n                                                                       Double.NEGATIVE_INFINITY, 1d, 0d }));\n        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },\n                                                         new double[] { Double.NEGATIVE_INFINITY }));\n        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d },\n                                                         new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n    }\n",
        "begin_line": 815,
        "end_line": 831,
        "comment": "",
        "child_ranges": [
            "(line 817,col 9)-(line 817,col 85)",
            "(line 818,col 9)-(line 818,col 85)",
            "(line 819,col 9)-(line 819,col 91)",
            "(line 821,col 9)-(line 821,col 94)",
            "(line 822,col 9)-(line 822,col 99)",
            "(line 823,col 9)-(line 826,col 108)",
            "(line 827,col 9)-(line 828,col 101)",
            "(line 829,col 9)-(line 830,col 127)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testNormalizeArray()",
        "snippet": "    @Test\n    public void testNormalizeArray() {\n        double[] testValues1 = new double[] {1, 1, 2};\n        TestUtils.assertEquals( new double[] {.25, .25, .5},\n                                MathArrays.normalizeArray(testValues1, 1),\n                                Double.MIN_VALUE);\n\n        double[] testValues2 = new double[] {-1, -1, 1};\n        TestUtils.assertEquals( new double[] {1, 1, -1},\n                                MathArrays.normalizeArray(testValues2, 1),\n                                Double.MIN_VALUE);\n\n        // Ignore NaNs\n        double[] testValues3 = new double[] {-1, -1, Double.NaN, 1, Double.NaN};\n        TestUtils.assertEquals( new double[] {1, 1,Double.NaN, -1, Double.NaN},\n                                MathArrays.normalizeArray(testValues3, 1),\n                                Double.MIN_VALUE);\n\n        // Zero sum -> MathArithmeticException\n        double[] zeroSum = new double[] {-1, 1};\n        try {\n            MathArrays.normalizeArray(zeroSum, 1);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        // Infinite elements -> MathArithmeticException\n        double[] hasInf = new double[] {1, 2, 1, Double.NEGATIVE_INFINITY};\n        try {\n            MathArrays.normalizeArray(hasInf, 1);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        // Infinite target -> MathIllegalArgumentException\n        try {\n            MathArrays.normalizeArray(testValues1, Double.POSITIVE_INFINITY);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        // NaN target -> MathIllegalArgumentException\n        try {\n            MathArrays.normalizeArray(testValues1, Double.NaN);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n    }\n",
        "begin_line": 833,
        "end_line": 876,
        "comment": "",
        "child_ranges": [
            "(line 835,col 9)-(line 835,col 54)",
            "(line 836,col 9)-(line 838,col 50)",
            "(line 840,col 9)-(line 840,col 56)",
            "(line 841,col 9)-(line 843,col 50)",
            "(line 846,col 9)-(line 846,col 80)",
            "(line 847,col 9)-(line 849,col 50)",
            "(line 852,col 9)-(line 852,col 48)",
            "(line 853,col 9)-(line 856,col 47)",
            "(line 859,col 9)-(line 859,col 75)",
            "(line 860,col 9)-(line 863,col 52)",
            "(line 866,col 9)-(line 869,col 52)",
            "(line 872,col 9)-(line 875,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/util/MathArraysTest.java",
        "signature": "org.apache.commons.math3.util.MathArraysTest.testConvolve()",
        "snippet": "    @Test\n    public void testConvolve() {\n        /* Test Case (obtained via SciPy)\n         * x=[1.2,-1.8,1.4]\n         * h=[1,0.8,0.5,0.3]\n         * convolve(x,h) -> array([ 1.2 , -0.84,  0.56,  0.58,  0.16,  0.42])\n         */\n        double[] x1 = { 1.2, -1.8, 1.4 };\n        double[] h1 = { 1, 0.8, 0.5, 0.3 };\n        double[] y1 = { 1.2, -0.84, 0.56, 0.58, 0.16, 0.42 };\n        double tolerance = 1e-13;\n\n        double[] yActual = MathArrays.convolve(x1, h1);\n        Assert.assertArrayEquals(y1, yActual, tolerance);\n\n        double[] x2 = { 1, 2, 3 };\n        double[] h2 = { 0, 1, 0.5 };\n        double[] y2 = { 0, 1, 2.5, 4, 1.5 };\n        \n        yActual = MathArrays.convolve(x2, h2);\n        Assert.assertArrayEquals(y2, yActual, tolerance);\n                \n        try {\n            MathArrays.convolve(new double[]{1, 2}, null);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NullArgumentException e) {\n            // expected behavior\n        }\n\n        try {\n            MathArrays.convolve(null, new double[]{1, 2});\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NullArgumentException e) {\n            // expected behavior\n        }\n\n        try {\n            MathArrays.convolve(new double[]{1, 2}, new double[]{});\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NoDataException e) {\n            // expected behavior\n        }\n\n        try {\n            MathArrays.convolve(new double[]{}, new double[]{1, 2});\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NoDataException e) {\n            // expected behavior\n        }\n\n        try {\n            MathArrays.convolve(new double[]{}, new double[]{});\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (NoDataException e) {\n            // expected behavior\n        }\n    }\n",
        "begin_line": 878,
        "end_line": 934,
        "comment": "",
        "child_ranges": [
            "(line 885,col 9)-(line 885,col 41)",
            "(line 886,col 9)-(line 886,col 43)",
            "(line 887,col 9)-(line 887,col 61)",
            "(line 888,col 9)-(line 888,col 33)",
            "(line 890,col 9)-(line 890,col 55)",
            "(line 891,col 9)-(line 891,col 57)",
            "(line 893,col 9)-(line 893,col 34)",
            "(line 894,col 9)-(line 894,col 36)",
            "(line 895,col 9)-(line 895,col 44)",
            "(line 897,col 9)-(line 897,col 46)",
            "(line 898,col 9)-(line 898,col 57)",
            "(line 900,col 9)-(line 905,col 9)",
            "(line 907,col 9)-(line 912,col 9)",
            "(line 914,col 9)-(line 919,col 9)",
            "(line 921,col 9)-(line 926,col 9)",
            "(line 928,col 9)-(line 933,col 9)"
        ]
    }
]