[
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.getOptions()",
        "snippet": "  @Override\n  public CompilerOptions getOptions() {\n    CompilerOptions options = super.getOptions();\n    options.looseTypes = true;\n    return options;\n  }\n",
        "begin_line": 44,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 5)-(line 46,col 49)",
            "(line 47,col 5)-(line 47,col 30)",
            "(line 48,col 5)-(line 48,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInitialTypingScope()",
        "snippet": "  public void testInitialTypingScope() {\n    Scope s = new TypedScopeCreator(compiler,\n        CodingConventions.getDefault()).createInitialScope(\n            new Node(Token.BLOCK));\n\n    assertEquals(ARRAY_FUNCTION_TYPE, s.getVar(\"Array\").getType());\n    assertEquals(BOOLEAN_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Boolean\").getType());\n    assertEquals(DATE_FUNCTION_TYPE, s.getVar(\"Date\").getType());\n    assertEquals(ERROR_FUNCTION_TYPE, s.getVar(\"Error\").getType());\n    assertEquals(EVAL_ERROR_FUNCTION_TYPE,\n        s.getVar(\"EvalError\").getType());\n    assertEquals(NUMBER_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Number\").getType());\n    assertEquals(OBJECT_FUNCTION_TYPE, s.getVar(\"Object\").getType());\n    assertEquals(RANGE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"RangeError\").getType());\n    assertEquals(REFERENCE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"ReferenceError\").getType());\n    assertEquals(REGEXP_FUNCTION_TYPE, s.getVar(\"RegExp\").getType());\n    assertEquals(STRING_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"String\").getType());\n    assertEquals(SYNTAX_ERROR_FUNCTION_TYPE,\n        s.getVar(\"SyntaxError\").getType());\n    assertEquals(TYPE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"TypeError\").getType());\n    assertEquals(URI_ERROR_FUNCTION_TYPE,\n        s.getVar(\"URIError\").getType());\n  }\n",
        "begin_line": 51,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 54,col 35)",
            "(line 56,col 5)-(line 56,col 67)",
            "(line 57,col 5)-(line 58,col 39)",
            "(line 59,col 5)-(line 59,col 65)",
            "(line 60,col 5)-(line 60,col 67)",
            "(line 61,col 5)-(line 62,col 41)",
            "(line 63,col 5)-(line 64,col 38)",
            "(line 65,col 5)-(line 65,col 69)",
            "(line 66,col 5)-(line 67,col 42)",
            "(line 68,col 5)-(line 69,col 46)",
            "(line 70,col 5)-(line 70,col 69)",
            "(line 71,col 5)-(line 72,col 38)",
            "(line 73,col 5)-(line 74,col 43)",
            "(line 75,col 5)-(line 76,col 41)",
            "(line 77,col 5)-(line 78,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck1()",
        "snippet": "  public void testTypeCheck1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ if (foo()) return; }\");\n  }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 82,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck2()",
        "snippet": "  public void testTypeCheck2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo(); x--; }\",\n        \"increment/decrement\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 85,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 86,col 5)-(line 89,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck4()",
        "snippet": "  public void testTypeCheck4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ !foo(); }\");\n  }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 93,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck5()",
        "snippet": "  public void testTypeCheck5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = +foo(); }\",\n        \"sign operator\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 96,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 100,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck6()",
        "snippet": "  public void testTypeCheck6() throws Exception {\n    testTypes(\n        \"/**@return {void}*/function foo(){\" +\n        \"/** @type {undefined|number} */var a;if (a == foo())return;}\");\n  }\n",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 104,col 5)-(line 106,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck8()",
        "snippet": "  public void testTypeCheck8() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){do {} while (foo());}\");\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 110,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck9()",
        "snippet": "  public void testTypeCheck9() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){while (foo());}\");\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck10()",
        "snippet": "  public void testTypeCheck10() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){for (;foo(););}\");\n  }\n",
        "begin_line": 117,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck11()",
        "snippet": "  public void testTypeCheck11() throws Exception {\n    testTypes(\"/**@type !Number */var a;\" +\n        \"/**@type !String */var b;\" +\n        \"a = b;\",\n        \"assignment\\n\" +\n        \"found   : String\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 121,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 127,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck12()",
        "snippet": "  public void testTypeCheck12() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = 3^foo();}\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 130,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 134,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck13()",
        "snippet": "  public void testTypeCheck13() throws Exception {\n    testTypes(\"/**@type {!Number|!String}*/var i; i=/xx/;\",\n        \"assignment\\n\" +\n        \"found   : RegExp\\n\" +\n        \"required: (Number|String)\");\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 138,col 5)-(line 141,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck14()",
        "snippet": "  public void testTypeCheck14() throws Exception {\n    testTypes(\"/**@param opt_a*/function foo(opt_a){}\");\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck15()",
        "snippet": "  public void testTypeCheck15() throws Exception {\n    testTypes(\"/**@type {Number} */var x;x=null;x=10;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null|undefined)\");\n  }\n",
        "begin_line": 149,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 150,col 5)-(line 153,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck16a()",
        "snippet": "  public void testTypeCheck16a() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null|undefined)\");\n  }\n",
        "begin_line": 156,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 160,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck16b()",
        "snippet": "  public void testTypeCheck16b() throws Exception {\n    testTypes(\"/**@type {!Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null)\");\n  }\n",
        "begin_line": 163,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 164,col 5)-(line 167,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck17()",
        "snippet": "  public void testTypeCheck17() throws Exception {\n    testTypes(\"/**@return {Number}\\n@param {Number} opt_foo */\\n\" +\n        \"function a(opt_foo){\\nreturn /**@type {Number}*/(opt_foo);\\n}\");\n  }\n",
        "begin_line": 170,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 172,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck18()",
        "snippet": "  public void testTypeCheck18() throws Exception {\n    testTypes(\"/**@return {RegExp}\\n*/\\n function a(){return new RegExp();}\");\n  }\n",
        "begin_line": 176,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 177,col 5)-(line 177,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck19()",
        "snippet": "  public void testTypeCheck19() throws Exception {\n    testTypes(\"/**@return {Array}\\n*/\\n function a(){return new Array();}\");\n  }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 5)-(line 181,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck20()",
        "snippet": "  public void testTypeCheck20() throws Exception {\n    testTypes(\"/**@return {Date}\\n*/\\n function a(){return new Date();}\");\n  }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckBasicDowncast()",
        "snippet": "  public void testTypeCheckBasicDowncast() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {Object} */ var bar = new foo();\\n\");\n  }\n",
        "begin_line": 188,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 190,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckNoDowncastToNumber()",
        "snippet": "  public void testTypeCheckNoDowncastToNumber() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {!Number} */ var bar = new foo();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : foo\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 193,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 198,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck21()",
        "snippet": "  public void testTypeCheck21() throws Exception {\n    testTypes(\"/** @type Array.<String> */var foo;\");\n  }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck22()",
        "snippet": "  public void testTypeCheck22() throws Exception {\n    testTypes(\"/** @param {Element|Object} p */\\nfunction foo(p){}\\n\" +\n                  \"/** @constructor */function Element(){}\\n\" +\n                  \"/** @type {Element|Object} */var v;\\n\" +\n                  \"foo(v);\\n\");\n  }\n",
        "begin_line": 205,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 206,col 5)-(line 209,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck23()",
        "snippet": "  public void testTypeCheck23() throws Exception {\n    testTypes(\"/** @type {(Object,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 213,col 5)-(line 213,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck24()",
        "snippet": "  public void testTypeCheck24() throws Exception {\n    testTypes(\"/** @constructor */function MyType(){}\\n\" +\n        \"/** @type {(MyType,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 216,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 218,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckDefaultExterns()",
        "snippet": "  public void testTypeCheckDefaultExterns() throws Exception {\n    testTypes(\"/** @param {string} x */ function f(x) {}\" +\n        \"f([].length);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 221,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 226,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckCustomExterns()",
        "snippet": "  public void testTypeCheckCustomExterns() throws Exception {\n    testTypes(\n        DEFAULT_EXTERNS + \"/** @type {boolean} */ Array.prototype.oogabooga;\",\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f([].oogabooga);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\", false);\n  }\n",
        "begin_line": 229,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 236,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray1()",
        "snippet": "  public void testParameterizedArray1() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 239,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 245,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray2()",
        "snippet": "  public void testParameterizedArray2() throws Exception {\n    testTypes(\"/** @param {!Array.<!Array.<number>>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 248,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 249,col 5)-(line 254,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray3()",
        "snippet": "  public void testParameterizedArray3() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { a[1] = 0; return a[0]; };\");\n  }\n",
        "begin_line": 257,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 258,col 5)-(line 260,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray4()",
        "snippet": "  public void testParameterizedArray4() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 263,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 264,col 5)-(line 268,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray5()",
        "snippet": "  public void testParameterizedArray5() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\");\n  }\n",
        "begin_line": 271,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 273,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray6()",
        "snippet": "  public void testParameterizedArray6() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : *\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 276,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 282,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray7()",
        "snippet": "  public void testParameterizedArray7() throws Exception {\n    testTypes(\"/** @param {?Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 285,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 291,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject1()",
        "snippet": "  public void testParameterizedObject1() throws Exception {\n    testTypes(\"/** @param {!Object.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 294,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 295,col 5)-(line 300,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject2()",
        "snippet": "  public void testParameterizedObject2() throws Exception {\n    testTypes(\"/** @param {!Object.<string,number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 303,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 309,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject3()",
        "snippet": "  public void testParameterizedObject3() throws Exception {\n    testTypes(\"/** @param {!Object.<number,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 312,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 313,col 5)-(line 318,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject4()",
        "snippet": "  public void testParameterizedObject4() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!Object.<E,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: E.<string>\");\n  }\n",
        "begin_line": 321,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 322,col 5)-(line 328,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnionOfFunctionAndType()",
        "snippet": "  public void testUnionOfFunctionAndType() throws Exception {\n    testTypes(\"/** @type {null|(function(Number):void)} */ var a;\" +\n        \"/** @type {(function(Number):void)|null} */ var b = null; a = b;\");\n  }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 333,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalParameterComparedToUndefined()",
        "snippet": "  public void testOptionalParameterComparedToUndefined() throws Exception {\n    testTypes(\"/**@param opt_a {Number}*/function foo(opt_a)\" +\n        \"{if (opt_a==undefined) var b = 3;}\");\n  }\n",
        "begin_line": 336,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 338,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalAllType()",
        "snippet": "  public void testOptionalAllType() throws Exception {\n    testTypes(\"/** @param {*} opt_x */function f(opt_x) { return opt_x }\\n\" +\n        \"/** @type {*} */var y;\\n\" +\n        \"f(y);\");\n  }\n",
        "begin_line": 341,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 344,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalUnknownNamedType()",
        "snippet": "  public void testOptionalUnknownNamedType() throws Exception {\n    testTypes(\"/** @param {!T} opt_x\\n@return {undefined} */\\n\" +\n        \"function f(opt_x) { return opt_x; }\\n\" +\n        \"/** @constructor */var T = function() {};\",\n        \"inconsistent return type\\n\" +\n        \"found   : (T|undefined)\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 347,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 353,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam()",
        "snippet": "  public void testOptionalArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a()};\");\n  }\n",
        "begin_line": 356,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 357,col 5)-(line 358,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam2()",
        "snippet": "  public void testOptionalArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 363,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam3()",
        "snippet": "  public void testOptionalArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(undefined)};\");\n  }\n",
        "begin_line": 366,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 368,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam4()",
        "snippet": "  public void testOptionalArgFunctionParam4() throws Exception {\n    String expectedWarning = \"Function a: called with 2 argument(s). \" +\n        \"Function requires at least 0 argument(s) and no more than 1 \" +\n        \"argument(s).\";\n\n    testTypes(\"/** @param {function(number=)} a */function f(a) {a(3,4)};\",\n              expectedWarning, false);\n  }\n",
        "begin_line": 371,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 372,col 5)-(line 374,col 23)",
            "(line 376,col 5)-(line 377,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParamError()",
        "snippet": "  public void testOptionalArgFunctionParamError() throws Exception {\n    String expectedWarning =\n        \"Bad type annotation. variable length argument must be last\";\n    testTypes(\"/** @param {function(...[number], number=)} a */\" +\n              \"function f(a) {};\", expectedWarning, false);\n  }\n",
        "begin_line": 380,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 381,col 5)-(line 382,col 69)",
            "(line 383,col 5)-(line 384,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalNullableArgFunctionParam()",
        "snippet": "  public void testOptionalNullableArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a()};\");\n  }\n",
        "begin_line": 387,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 388,col 5)-(line 389,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalNullableArgFunctionParam2()",
        "snippet": "  public void testOptionalNullableArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(null)};\");\n  }\n",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 394,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalNullableArgFunctionParam3()",
        "snippet": "  public void testOptionalNullableArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 397,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 398,col 5)-(line 399,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionReturn()",
        "snippet": "  public void testOptionalArgFunctionReturn() throws Exception {\n    testTypes(\"/** @return {function(number=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()()\");\n  }\n",
        "begin_line": 402,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 403,col 5)-(line 405,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionReturn2()",
        "snippet": "  public void testOptionalArgFunctionReturn2() throws Exception {\n    testTypes(\"/** @return {function(Object=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()({})\");\n  }\n",
        "begin_line": 408,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 409,col 5)-(line 411,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanType()",
        "snippet": "  public void testBooleanType() throws Exception {\n    testTypes(\"/**@type {boolean} */var x = 1 < 2;\");\n  }\n",
        "begin_line": 414,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 415,col 5)-(line 415,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction1()",
        "snippet": "  public void testBooleanReduction1() throws Exception {\n    testTypes(\"/**@type {string} */var x; x = null || \\\"a\\\";\");\n  }\n",
        "begin_line": 418,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction2()",
        "snippet": "  public void testBooleanReduction2() throws Exception {\n    // It's important for the type system to recognize that in no case\n    // can the boolean expression evaluate to a boolean value.\n    testTypes(\"/** @param {string} s\\n @return {string} */\" +\n        \"(function(s) { return ((s == 'a') && s) || 'b'; })\");\n  }\n",
        "begin_line": 422,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 426,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction3()",
        "snippet": "  public void testBooleanReduction3() throws Exception {\n    testTypes(\"/** @param {string} s\\n @return {string?} */\" +\n        \"(function(s) { return s && null && 3; })\");\n  }\n",
        "begin_line": 429,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 430,col 5)-(line 431,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction4()",
        "snippet": "  public void testBooleanReduction4() throws Exception {\n    testTypes(\"/** @param {Object} x\\n @return {Object} */\" +\n        \"(function(x) { return null || x || null ; })\");\n  }\n",
        "begin_line": 434,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 435,col 5)-(line 436,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction5()",
        "snippet": "  public void testBooleanReduction5() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || typeof x == 'string') {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 439,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 440,col 5)-(line 449,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction6()",
        "snippet": "  public void testBooleanReduction6() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string|null} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!(x && typeof x != 'string')) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 452,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 453,col 5)-(line 462,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction7()",
        "snippet": "   public void testBooleanReduction7() throws Exception {\n     testTypes(\"/** @constructor */var T = function() {};\\n\" +\n         \"/**\\n\" +\n         \"* @param {Array|T} x\\n\" +\n         \"* @return {null|undefined}\\n\" +\n         \"*/\\n\" +\n         \"var f = function(x) {\\n\" +\n         \"if (!x) {\\n\" +\n         \"return x;\\n\" +\n         \"}\\n\" +\n         \"return null;\\n\" +\n         \"};\");\n   }\n",
        "begin_line": 465,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 466,col 6)-(line 476,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNullAnd()",
        "snippet": "  public void testNullAnd() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x && x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 479,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 480,col 5)-(line 484,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNullOr()",
        "snippet": "  public void testNullOr() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x || x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 487,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 492,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation1()",
        "snippet": "  public void testBooleanPreservation1() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\";\" +\n        \"x = ((x == \\\"a\\\") && x) || x == \\\"b\\\";\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 495,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 496,col 5)-(line 500,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation2()",
        "snippet": "  public void testBooleanPreservation2() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\"; x = (x == \\\"a\\\") || x;\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 503,
        "end_line": 508,
        "comment": "",
        "child_ranges": [
            "(line 504,col 5)-(line 507,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation3()",
        "snippet": "  public void testBooleanPreservation3() throws Exception {\n    testTypes(\"/** @param {Function?} x\\n @return {boolean?} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"condition always evaluates to false\\n\" +\n        \"left : Function\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 510,
        "end_line": 516,
        "comment": "",
        "child_ranges": [
            "(line 511,col 5)-(line 515,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation4()",
        "snippet": "  public void testBooleanPreservation4() throws Exception {\n    testTypes(\"/** @param {Function?|boolean} x\\n @return {boolean} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|null|undefined)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 518,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 519,col 5)-(line 523,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction1()",
        "snippet": "  public void testTypeOfReduction1() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x == 'number' ? String(x) : x; }\");\n  }\n",
        "begin_line": 526,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 527,col 5)-(line 528,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction2()",
        "snippet": "  public void testTypeOfReduction2() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'string' ? String(x) : x; }\");\n  }\n",
        "begin_line": 531,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 532,col 5)-(line 533,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction3()",
        "snippet": "  public void testTypeOfReduction3() throws Exception {\n    testTypes(\"/** @param {number|null} x\\n @return {number} */ \" +\n        \"function f(x) { return typeof x == 'object' ? 1 : x; }\");\n  }\n",
        "begin_line": 536,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 537,col 5)-(line 538,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction4()",
        "snippet": "  public void testTypeOfReduction4() throws Exception {\n    testTypes(\"/** @param {Object|undefined} x\\n @return {Object} */ \" +\n        \"function f(x) { return typeof x == 'undefined' ? {} : x; }\");\n  }\n",
        "begin_line": 541,
        "end_line": 544,
        "comment": "",
        "child_ranges": [
            "(line 542,col 5)-(line 543,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction5()",
        "snippet": "  public void testTypeOfReduction5() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!E|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'number' ? x : 'a'; }\");\n  }\n",
        "begin_line": 546,
        "end_line": 550,
        "comment": "",
        "child_ranges": [
            "(line 547,col 5)-(line 549,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction6()",
        "snippet": "  public void testTypeOfReduction6() throws Exception {\n    testTypes(\"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return typeof x == 'string' && x.length == 3 ? x : 'a';\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 552,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 553,col 5)-(line 556,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction7()",
        "snippet": "  public void testTypeOfReduction7() throws Exception {\n    testTypes(\"/** @return {string} */var f = function(x) { \" +\n        \"return typeof x == 'number' ? x : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 559,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 560,col 5)-(line 564,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction8()",
        "snippet": "  public void testTypeOfReduction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isString(x) && x.length == 3 ? x : 'a';\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 567,
        "end_line": 574,
        "comment": "",
        "child_ranges": [
            "(line 568,col 5)-(line 573,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction9()",
        "snippet": "  public void testTypeOfReduction9() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {!Array|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? 'a' : x;\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 576,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 577,col 5)-(line 582,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction10()",
        "snippet": "  public void testTypeOfReduction10() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 585,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 586,col 5)-(line 591,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction11()",
        "snippet": "  public void testTypeOfReduction11() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isObject(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 594,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 595,col 5)-(line 600,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction12()",
        "snippet": "  public void testTypeOfReduction12() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n @return {Array} */ \" +\n        \"function f(x) { return typeof x == 'object' ? x : []; }\");\n  }\n",
        "begin_line": 603,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 604,col 5)-(line 606,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction13()",
        "snippet": "  public void testTypeOfReduction13() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n@return {Array} */ \" +\n        \"function f(x) { return goog.isObject(x) ? x : []; }\", null);\n  }\n",
        "begin_line": 609,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 614,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction14()",
        "snippet": "  public void testTypeOfReduction14() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(x) { \" +\n        \"  return goog.isString(arguments[0]) ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 617,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 619,col 5)-(line 623,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction15()",
        "snippet": "  public void testTypeOfReduction15() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(x) { \" +\n        \"  return typeof arguments[0] == 'string' ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 626,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 628,col 5)-(line 632,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction1()",
        "snippet": "  public void testQualifiedNameReduction1() throws Exception {\n    testTypes(\"var x = {}; /** @type {string?} */ x.a = 'a';\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 635,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 636,col 5)-(line 638,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction2()",
        "snippet": "  public void testQualifiedNameReduction2() throws Exception {\n    testTypes(\"/** @param {string?} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return this.a ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 641,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 642,col 5)-(line 645,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction3()",
        "snippet": "  public void testQualifiedNameReduction3() throws Exception {\n    testTypes(\"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return typeof this.a == 'string' ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 648,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 652,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction4()",
        "snippet": "  public void testQualifiedNameReduction4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return goog.isString(this.a) ? this.a : 'a'; }\", null);\n  }\n",
        "begin_line": 655,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 656,col 5)-(line 661,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceOfReduction1()",
        "snippet": "  public void testInstanceOfReduction1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T|string} x\\n@return {T} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return x; } else { return new T(); }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 664,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 669,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceOfReduction2()",
        "snippet": "  public void testInstanceOfReduction2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {!T|string} x\\n@return {string} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return ''; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 672,
        "end_line": 678,
        "comment": "",
        "child_ranges": [
            "(line 673,col 5)-(line 677,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInferredPropagation()",
        "snippet": "  public void testPropertyInferredPropagation() throws Exception {\n    testTypes(\"/** @return {Object} */function f() { return {}; }\\n\" +\n         \"function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\\n\" +\n         \"function h() { var x = f(); x.a = false; }\");\n  }\n",
        "begin_line": 680,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 681,col 5)-(line 683,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference1()",
        "snippet": "  public void testPropertyInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 686,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 687,col 5)-(line 693,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference2()",
        "snippet": "  public void testPropertyInference2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = null; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 696,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 697,col 5)-(line 704,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference3()",
        "snippet": "  public void testPropertyInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 707,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 708,col 5)-(line 715,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference4()",
        "snippet": "  public void testPropertyInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 718,
        "end_line": 727,
        "comment": "",
        "child_ranges": [
            "(line 719,col 5)-(line 726,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference5()",
        "snippet": "  public void testPropertyInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\");\n  }\n",
        "begin_line": 729,
        "end_line": 735,
        "comment": "",
        "child_ranges": [
            "(line 730,col 5)-(line 734,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference6()",
        "snippet": "  public void testPropertyInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\");\n  }\n",
        "begin_line": 737,
        "end_line": 743,
        "comment": "",
        "child_ranges": [
            "(line 738,col 5)-(line 742,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference7()",
        "snippet": "  public void testPropertyInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 745,
        "end_line": 754,
        "comment": "",
        "child_ranges": [
            "(line 746,col 5)-(line 753,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference8()",
        "snippet": "  public void testPropertyInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { \" +\n        \"  /** @type {string} */ this.x_ = 'x';\" +\n        \"}\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"assignment to property x_ of F\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 756,
        "end_line": 767,
        "comment": "",
        "child_ranges": [
            "(line 757,col 5)-(line 766,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoPersistentTypeInferenceForObjectProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForObjectProperties()\n      throws Exception {\n    testTypes(\"/** @param {Object} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Object} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 769,
        "end_line": 779,
        "comment": "",
        "child_ranges": [
            "(line 771,col 5)-(line 778,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoPersistentTypeInferenceForFunctionProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForFunctionProperties()\n      throws Exception {\n    testTypes(\"/** @param {Function} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Function} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 781,
        "end_line": 791,
        "comment": "",
        "child_ranges": [
            "(line 783,col 5)-(line 790,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectPropertyTypeInferredInLocalScope1()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope1() throws Exception {\n    testTypes(\"/** @param {!Object} o\\n@return {string} */\\n\" +\n        \"function f(o) { o.x = 1; return o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 793,
        "end_line": 799,
        "comment": "",
        "child_ranges": [
            "(line 794,col 5)-(line 798,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectPropertyTypeInferredInLocalScope2()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope2() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { o.x = 'a';\\nif (x) {o.x = x;}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 801,
        "end_line": 807,
        "comment": "",
        "child_ranges": [
            "(line 802,col 5)-(line 806,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectPropertyTypeInferredInLocalScope3()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope3() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { if (x) {o.x = x;} else {o.x = 'a';}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 809,
        "end_line": 815,
        "comment": "",
        "child_ranges": [
            "(line 810,col 5)-(line 814,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x = 0;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 817,
        "end_line": 824,
        "comment": "",
        "child_ranges": [
            "(line 819,col 5)-(line 823,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 826,
        "end_line": 833,
        "comment": "",
        "child_ranges": [
            "(line 828,col 5)-(line 832,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()\n      throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 835,
        "end_line": 843,
        "comment": "",
        "child_ranges": [
            "(line 837,col 5)-(line 842,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()\n      throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 845,
        "end_line": 853,
        "comment": "",
        "child_ranges": [
            "(line 847,col 5)-(line 852,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyUsedBeforeDefinition1()",
        "snippet": "  public void testPropertyUsedBeforeDefinition1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 855,
        "end_line": 863,
        "comment": "",
        "child_ranges": [
            "(line 856,col 5)-(line 862,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyUsedBeforeDefinition2()",
        "snippet": "  public void testPropertyUsedBeforeDefinition2() throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"n.T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ n.T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 865,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 866,col 5)-(line 873,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd1()",
        "snippet": "  public void testAdd1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 'abc'+foo();}\");\n  }\n",
        "begin_line": 876,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 877,col 5)-(line 877,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd2()",
        "snippet": "  public void testAdd2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()+4;}\");\n  }\n",
        "begin_line": 880,
        "end_line": 882,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 881,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd3()",
        "snippet": "  public void testAdd3() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 884,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 885,col 5)-(line 887,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd4()",
        "snippet": "  public void testAdd4() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 890,
        "end_line": 894,
        "comment": "",
        "child_ranges": [
            "(line 891,col 5)-(line 893,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd5()",
        "snippet": "  public void testAdd5() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 896,
        "end_line": 900,
        "comment": "",
        "child_ranges": [
            "(line 897,col 5)-(line 899,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd6()",
        "snippet": "  public void testAdd6() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\");\n  }\n",
        "begin_line": 902,
        "end_line": 906,
        "comment": "",
        "child_ranges": [
            "(line 903,col 5)-(line 905,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd7()",
        "snippet": "  public void testAdd7() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 908,
        "end_line": 915,
        "comment": "",
        "child_ranges": [
            "(line 909,col 5)-(line 914,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd8()",
        "snippet": "  public void testAdd8() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 917,
        "end_line": 924,
        "comment": "",
        "child_ranges": [
            "(line 918,col 5)-(line 923,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd9()",
        "snippet": "  public void testAdd9() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 926,
        "end_line": 933,
        "comment": "",
        "child_ranges": [
            "(line 927,col 5)-(line 932,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd10()",
        "snippet": "  public void testAdd10() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 935,
        "end_line": 941,
        "comment": "",
        "child_ranges": [
            "(line 937,col 5)-(line 940,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd11()",
        "snippet": "  public void testAdd11() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 943,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 945,col 5)-(line 948,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd12()",
        "snippet": "  public void testAdd12() throws Exception {\n    testTypes(\"/** @return {(number,string)} */ function a() { return 5; }\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a() + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 951,
        "end_line": 958,
        "comment": "",
        "child_ranges": [
            "(line 952,col 5)-(line 957,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd13()",
        "snippet": "  public void testAdd13() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 960,
        "end_line": 967,
        "comment": "",
        "child_ranges": [
            "(line 961,col 5)-(line 966,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd14()",
        "snippet": "  public void testAdd14() throws Exception {\n    testTypes(\"/** @type {(null,string)} */ var a = null;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 969,
        "end_line": 976,
        "comment": "",
        "child_ranges": [
            "(line 970,col 5)-(line 975,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd15()",
        "snippet": "  public void testAdd15() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 978,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 979,col 5)-(line 984,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd16()",
        "snippet": "  public void testAdd16() throws Exception {\n    testTypes(\"/** @type {(undefined,string)} */ var a = undefined;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 987,
        "end_line": 994,
        "comment": "",
        "child_ranges": [
            "(line 988,col 5)-(line 993,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd17()",
        "snippet": "  public void testAdd17() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {(undefined,string)} */ var b = undefined;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 996,
        "end_line": 1003,
        "comment": "",
        "child_ranges": [
            "(line 997,col 5)-(line 1002,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd18()",
        "snippet": "  public void testAdd18() throws Exception {\n    testTypes(\"function f() {};\" +\n        \"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var c = a + f();\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1005,
        "end_line": 1012,
        "comment": "",
        "child_ranges": [
            "(line 1006,col 5)-(line 1011,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd19()",
        "snippet": "  public void testAdd19() throws Exception {\n    testTypes(\"/** @param {number} opt_x\\n@param {number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1014,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1015,col 5)-(line 1017,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd20()",
        "snippet": "  public void testAdd20() throws Exception {\n    testTypes(\"/** @param {!Number} opt_x\\n@param {!Number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1020,
        "end_line": 1024,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 5)-(line 1023,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd21()",
        "snippet": "  public void testAdd21() throws Exception {\n    testTypes(\"/** @param {Number|Boolean} opt_x\\n\" +\n        \"@param {number|boolean} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1026,
        "end_line": 1031,
        "comment": "",
        "child_ranges": [
            "(line 1027,col 5)-(line 1030,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison1()",
        "snippet": "  public void testNumericComparison1() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1033,
        "end_line": 1035,
        "comment": "",
        "child_ranges": [
            "(line 1034,col 5)-(line 1034,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison2()",
        "snippet": "  public void testNumericComparison2() throws Exception {\n    testTypes(\"/**@param {!Object} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : Object\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1037,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1038,col 5)-(line 1041,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison3()",
        "snippet": "  public void testNumericComparison3() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1044,
        "end_line": 1046,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1045,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison4()",
        "snippet": "  public void testNumericComparison4() throws Exception {\n    testTypes(\"/**@param {(number,undefined)} a*/ \" +\n              \"function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1048,
        "end_line": 1051,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 5)-(line 1050,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison5()",
        "snippet": "  public void testNumericComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : *\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1053,
        "end_line": 1058,
        "comment": "",
        "child_ranges": [
            "(line 1054,col 5)-(line 1057,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison6()",
        "snippet": "  public void testNumericComparison6() throws Exception {\n    testTypes(\"/**@return {void}*/ function foo() { if (3 >= foo()) return; }\",\n        \"right side of numeric comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1060,
        "end_line": 1065,
        "comment": "",
        "child_ranges": [
            "(line 1061,col 5)-(line 1064,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison1()",
        "snippet": "  public void testStringComparison1() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1067,
        "end_line": 1069,
        "comment": "",
        "child_ranges": [
            "(line 1068,col 5)-(line 1068,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison2()",
        "snippet": "  public void testStringComparison2() throws Exception {\n    testTypes(\"/**@param {Object} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1071,
        "end_line": 1073,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 5)-(line 1072,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison3()",
        "snippet": "  public void testStringComparison3() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1075,
        "end_line": 1077,
        "comment": "",
        "child_ranges": [
            "(line 1076,col 5)-(line 1076,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison4()",
        "snippet": "  public void testStringComparison4() throws Exception {\n    testTypes(\"/**@param {string|undefined} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1079,
        "end_line": 1082,
        "comment": "",
        "child_ranges": [
            "(line 1080,col 5)-(line 1081,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison5()",
        "snippet": "  public void testStringComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1084,
        "end_line": 1087,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 5)-(line 1086,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison6()",
        "snippet": "  public void testStringComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ \" +\n        \"function foo() { if ('a' >= foo()) return; }\",\n        \"right side of comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1089,
        "end_line": 1095,
        "comment": "",
        "child_ranges": [
            "(line 1090,col 5)-(line 1094,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueOfComparison1()",
        "snippet": "  public void testValueOfComparison1() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {!O} b*/ function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1097,
        "end_line": 1101,
        "comment": "",
        "child_ranges": [
            "(line 1098,col 5)-(line 1100,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueOfComparison2()",
        "snippet": "  public void testValueOfComparison2() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {number} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1103,
        "end_line": 1108,
        "comment": "",
        "child_ranges": [
            "(line 1104,col 5)-(line 1107,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueOfComparison3()",
        "snippet": "  public void testValueOfComparison3() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.toString = function() { return 'o'; };\" +\n        \"/**@param {!O} a\\n@param {string} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1110,
        "end_line": 1115,
        "comment": "",
        "child_ranges": [
            "(line 1111,col 5)-(line 1114,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGenericRelationalExpression()",
        "snippet": "  public void testGenericRelationalExpression() throws Exception {\n    testTypes(\"/**@param {*} a\\n@param {*} b*/ \" +\n                  \"function f(a,b) {return a < b;}\");\n  }\n",
        "begin_line": 1117,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1118,col 5)-(line 1119,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof1()",
        "snippet": "  public void testInstanceof1() throws Exception {\n    testTypes(\"function foo(){\" +\n        \"if (bar instanceof 3)return;}\",\n        \"instanceof requires an object\\n\" +\n        \"found   : number\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 1122,
        "end_line": 1128,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1127,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof2()",
        "snippet": "  public void testInstanceof2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){\" +\n        \"if (foo() instanceof Object)return;}\",\n        \"deterministic instanceof yields false\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: NoObject\");\n  }\n",
        "begin_line": 1130,
        "end_line": 1136,
        "comment": "",
        "child_ranges": [
            "(line 1131,col 5)-(line 1135,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof3()",
        "snippet": "  public void testInstanceof3() throws Exception {\n    testTypes(\"/**@return {*} */function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1138,
        "end_line": 1141,
        "comment": "",
        "child_ranges": [
            "(line 1139,col 5)-(line 1140,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof4()",
        "snippet": "  public void testInstanceof4() throws Exception {\n    testTypes(\"/**@return {(Object|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1143,
        "end_line": 1146,
        "comment": "",
        "child_ranges": [
            "(line 1144,col 5)-(line 1145,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof5()",
        "snippet": "  public void testInstanceof5() throws Exception {\n    // No warning for unknown types.\n    testTypes(\"/** @return {?} */ function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1148,
        "end_line": 1152,
        "comment": "",
        "child_ranges": [
            "(line 1150,col 5)-(line 1151,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof6()",
        "snippet": "  public void testInstanceof6() throws Exception {\n    testTypes(\"/**@return {(Array|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1154,
        "end_line": 1157,
        "comment": "",
        "child_ranges": [
            "(line 1155,col 5)-(line 1156,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceOfReduction3()",
        "snippet": "  public void testInstanceOfReduction3() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {Object} x \\n\" +\n        \" * @param {Function} y \\n\" +\n        \" * @return {boolean} \\n\" +\n        \" */\\n\" +\n        \"var f = function(x, y) {\\n\" +\n        \"  return x instanceof y;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 1159,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1160,col 5)-(line 1168,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping1()",
        "snippet": "  public void testScoping1() throws Exception {\n    testTypes(\n        \"/**@param {string} a*/function foo(a){\" +\n        \"  /**@param {Array|string} a*/function bar(a){\" +\n        \"    if (a instanceof Array)return;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 1171,
        "end_line": 1178,
        "comment": "",
        "child_ranges": [
            "(line 1172,col 5)-(line 1177,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping2()",
        "snippet": "  public void testScoping2() throws Exception {\n    testTypes(\n        \"/** @type number */ var a;\" +\n        \"function Foo() {\" +\n        \"  /** @type string */ var a;\" +\n        \"}\");\n  }\n",
        "begin_line": 1180,
        "end_line": 1186,
        "comment": "",
        "child_ranges": [
            "(line 1181,col 5)-(line 1185,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping3()",
        "snippet": "  public void testScoping3() throws Exception {\n    testTypes(\"\\n\\n/** @type{Number}*/var b;\\n/** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:3 with type (Number|null|undefined)\");\n  }\n",
        "begin_line": 1188,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1189,col 5)-(line 1191,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping4()",
        "snippet": "  public void testScoping4() throws Exception {\n    testTypes(\"/** @type{Number}*/var b; if (true) /** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:1 with type (Number|null|undefined)\");\n  }\n",
        "begin_line": 1194,
        "end_line": 1198,
        "comment": "",
        "child_ranges": [
            "(line 1195,col 5)-(line 1197,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping5()",
        "snippet": "  public void testScoping5() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; var b;\");\n  }\n",
        "begin_line": 1200,
        "end_line": 1204,
        "comment": "",
        "child_ranges": [
            "(line 1203,col 5)-(line 1203,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping6()",
        "snippet": "  public void testScoping6() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; if (true) var b;\");\n  }\n",
        "begin_line": 1206,
        "end_line": 1210,
        "comment": "",
        "child_ranges": [
            "(line 1209,col 5)-(line 1209,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping7()",
        "snippet": "  public void testScoping7() throws Exception {\n    testTypes(\"/** @constructor */function A() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of A\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1212,
        "end_line": 1219,
        "comment": "",
        "child_ranges": [
            "(line 1213,col 5)-(line 1218,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping8()",
        "snippet": "  public void testScoping8() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\" +\n        \"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1221,
        "end_line": 1229,
        "comment": "",
        "child_ranges": [
            "(line 1222,col 5)-(line 1228,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping9()",
        "snippet": "  public void testScoping9() throws Exception {\n    testTypes(\"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\" +\n        \"/** @constructor */function A() {}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1231,
        "end_line": 1239,
        "comment": "",
        "child_ranges": [
            "(line 1232,col 5)-(line 1238,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping10()",
        "snippet": "  public void testScoping10() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = function b(){};\");\n\n    // a declared, b is not\n    assertTrue(p.scope.isDeclared(\"a\", false));\n    assertFalse(p.scope.isDeclared(\"b\", false));\n\n    // checking that a has the correct assigned type\n    assertEquals(\"function (): undefined\",\n        p.scope.getVar(\"a\").getType().toString());\n  }\n",
        "begin_line": 1241,
        "end_line": 1251,
        "comment": "",
        "child_ranges": [
            "(line 1242,col 5)-(line 1242,col 78)",
            "(line 1245,col 5)-(line 1245,col 47)",
            "(line 1246,col 5)-(line 1246,col 48)",
            "(line 1249,col 5)-(line 1250,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping11()",
        "snippet": "  public void testScoping11() throws Exception {\n    // named anonymous functions create a binding in their body only\n    // the return is wrong but the assignment is ok since the type of b is ?\n    testTypes(\n        \"/** @return {number} */var a = function b(){ return b };\",\n        \"inconsistent return type\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1253,
        "end_line": 1261,
        "comment": "",
        "child_ranges": [
            "(line 1256,col 5)-(line 1260,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments1()",
        "snippet": "  public void testFunctionArguments1() throws Exception {\n    testFunctionType(\n        \"/** @param {number} a\\n@return {string} */\" +\n        \"function f(a) {}\",\n        \"function (number): string\");\n  }\n",
        "begin_line": 1263,
        "end_line": 1268,
        "comment": "",
        "child_ranges": [
            "(line 1264,col 5)-(line 1267,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments2()",
        "snippet": "  public void testFunctionArguments2() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(opt_a) {}\",\n        \"function (number=): string\");\n  }\n",
        "begin_line": 1270,
        "end_line": 1275,
        "comment": "",
        "child_ranges": [
            "(line 1271,col 5)-(line 1274,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments3()",
        "snippet": "  public void testFunctionArguments3() throws Exception {\n    testFunctionType(\n        \"/** @param {number} b\\n@return {string} */\" +\n        \"function f(a,b) {}\",\n        \"function (?, number): string\");\n  }\n",
        "begin_line": 1277,
        "end_line": 1282,
        "comment": "",
        "child_ranges": [
            "(line 1278,col 5)-(line 1281,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments4()",
        "snippet": "  public void testFunctionArguments4() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(a,opt_a) {}\",\n        \"function (?, number=): string\");\n  }\n",
        "begin_line": 1284,
        "end_line": 1289,
        "comment": "",
        "child_ranges": [
            "(line 1285,col 5)-(line 1288,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments5()",
        "snippet": "  public void testFunctionArguments5() throws Exception {\n    testTypes(\n        \"function a(opt_a,a) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1291,
        "end_line": 1295,
        "comment": "",
        "child_ranges": [
            "(line 1292,col 5)-(line 1294,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments6()",
        "snippet": "  public void testFunctionArguments6() throws Exception {\n    testTypes(\n        \"function a(var_args,a) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1297,
        "end_line": 1301,
        "comment": "",
        "child_ranges": [
            "(line 1298,col 5)-(line 1300,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments7()",
        "snippet": "  public void testFunctionArguments7() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(a,opt_a,var_args) {}\");\n  }\n",
        "begin_line": 1303,
        "end_line": 1307,
        "comment": "",
        "child_ranges": [
            "(line 1304,col 5)-(line 1306,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments8()",
        "snippet": "  public void testFunctionArguments8() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,var_args,b) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1309,
        "end_line": 1313,
        "comment": "",
        "child_ranges": [
            "(line 1310,col 5)-(line 1312,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments9()",
        "snippet": "  public void testFunctionArguments9() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,var_args,b,c) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1315,
        "end_line": 1320,
        "comment": "",
        "child_ranges": [
            "(line 1317,col 5)-(line 1319,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments10()",
        "snippet": "  public void testFunctionArguments10() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,b,c) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1322,
        "end_line": 1327,
        "comment": "",
        "child_ranges": [
            "(line 1324,col 5)-(line 1326,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments11()",
        "snippet": "  public void testFunctionArguments11() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,b,c,var_args,d) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1329,
        "end_line": 1333,
        "comment": "",
        "child_ranges": [
            "(line 1330,col 5)-(line 1332,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments12()",
        "snippet": "  public void testFunctionArguments12() throws Exception {\n    testTypes(\"/** @param foo {String} */function bar(baz){}\",\n        \"parameter foo does not appear in bar's parameter list\");\n  }\n",
        "begin_line": 1335,
        "end_line": 1338,
        "comment": "",
        "child_ranges": [
            "(line 1336,col 5)-(line 1337,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments13()",
        "snippet": "  public void testFunctionArguments13() throws Exception {\n    // verifying that the argument type have non-inferrable types\n    testTypes(\n        \"/** @return {boolean} */ function u() { return true; }\" +\n        \"/** @param {boolean} b\\n@return {?boolean} */\" +\n        \"function f(b) { if (u()) { b = null; } return b; }\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1340,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1342,col 5)-(line 1348,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments14()",
        "snippet": "  public void testFunctionArguments14() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @param {number} opt_y\\n\" +\n        \" * @param {boolean} var_args\\n\" +\n        \" */ function f(x, opt_y, var_args) {}\" +\n        \"f('3'); f('3', 2); f('3', 2, true); f('3', 2, true, false);\");\n  }\n",
        "begin_line": 1351,
        "end_line": 1359,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 5)-(line 1358,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments15()",
        "snippet": "  public void testFunctionArguments15() throws Exception {\n    testTypes(\n        \"/** @param {?function(*)} f */\" +\n        \"function g(f) { f(1, 2); }\",\n        \"Function f: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1361,
        "end_line": 1368,
        "comment": "",
        "child_ranges": [
            "(line 1362,col 5)-(line 1367,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrintFunctionName1()",
        "snippet": "  public void testPrintFunctionName1() throws Exception {\n    // Ensures that the function name is pretty.\n    testTypes(\n        \"var goog = {}; goog.run = function(f) {};\" +\n        \"goog.run();\",\n        \"Function goog.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1370,
        "end_line": 1378,
        "comment": "",
        "child_ranges": [
            "(line 1372,col 5)-(line 1377,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrintFunctionName2()",
        "snippet": "  public void testPrintFunctionName2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.run = function(f) {};\" +\n        \"(new Foo).run();\",\n        \"Function Foo.prototype.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1380,
        "end_line": 1388,
        "comment": "",
        "child_ranges": [
            "(line 1381,col 5)-(line 1387,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference1()",
        "snippet": "  public void testFunctionInference1() throws Exception {\n    testFunctionType(\n        \"function f(a) {}\",\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1390,
        "end_line": 1394,
        "comment": "",
        "child_ranges": [
            "(line 1391,col 5)-(line 1393,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference2()",
        "snippet": "  public void testFunctionInference2() throws Exception {\n    testFunctionType(\n        \"function f(a,b) {}\",\n        \"function (?, ?): undefined\");\n  }\n",
        "begin_line": 1396,
        "end_line": 1400,
        "comment": "",
        "child_ranges": [
            "(line 1397,col 5)-(line 1399,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference3()",
        "snippet": "  public void testFunctionInference3() throws Exception {\n    testFunctionType(\n        \"function f(var_args) {}\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 1402,
        "end_line": 1406,
        "comment": "",
        "child_ranges": [
            "(line 1403,col 5)-(line 1405,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference4()",
        "snippet": "  public void testFunctionInference4() throws Exception {\n    testFunctionType(\n        \"function f(a,b,c,var_args) {}\",\n        \"function (?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1408,
        "end_line": 1412,
        "comment": "",
        "child_ranges": [
            "(line 1409,col 5)-(line 1411,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference5()",
        "snippet": "  public void testFunctionInference5() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1414,
        "end_line": 1418,
        "comment": "",
        "child_ranges": [
            "(line 1415,col 5)-(line 1417,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference6()",
        "snippet": "  public void testFunctionInference6() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n        \"function (this:Date, ?=): string\");\n  }\n",
        "begin_line": 1420,
        "end_line": 1424,
        "comment": "",
        "child_ranges": [
            "(line 1421,col 5)-(line 1423,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference7()",
        "snippet": "  public void testFunctionInference7() throws Exception {\n    testFunctionType(\n        \"/** @this Date */function f(a,b,c,var_args) {}\",\n        \"function (this:Date, ?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1426,
        "end_line": 1430,
        "comment": "",
        "child_ranges": [
            "(line 1427,col 5)-(line 1429,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference8()",
        "snippet": "  public void testFunctionInference8() throws Exception {\n    testFunctionType(\n        \"function f() {}\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1432,
        "end_line": 1436,
        "comment": "",
        "child_ranges": [
            "(line 1433,col 5)-(line 1435,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference9()",
        "snippet": "  public void testFunctionInference9() throws Exception {\n    testFunctionType(\n        \"var f = function() {};\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1438,
        "end_line": 1442,
        "comment": "",
        "child_ranges": [
            "(line 1439,col 5)-(line 1441,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference10()",
        "snippet": "  public void testFunctionInference10() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@param {boolean} b\\n@return {string} */\" +\n        \"var f = function(a,b) {};\",\n        \"function (this:Date, ?, boolean): string\");\n  }\n",
        "begin_line": 1444,
        "end_line": 1449,
        "comment": "",
        "child_ranges": [
            "(line 1445,col 5)-(line 1448,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference11()",
        "snippet": "  public void testFunctionInference11() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @return {number}*/goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 1451,
        "end_line": 1457,
        "comment": "",
        "child_ranges": [
            "(line 1452,col 5)-(line 1456,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference12()",
        "snippet": "  public void testFunctionInference12() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1459,
        "end_line": 1465,
        "comment": "",
        "child_ranges": [
            "(line 1460,col 5)-(line 1464,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference13()",
        "snippet": "  public void testFunctionInference13() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @param {!goog.Foo} f */function eatFoo(f){};\",\n        \"eatFoo\",\n        \"function (goog.Foo): undefined\");\n  }\n",
        "begin_line": 1467,
        "end_line": 1474,
        "comment": "",
        "child_ranges": [
            "(line 1468,col 5)-(line 1473,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference14()",
        "snippet": "  public void testFunctionInference14() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @return {!goog.Foo} */function eatFoo(){ return new goog.Foo; };\",\n        \"eatFoo\",\n        \"function (): goog.Foo\");\n  }\n",
        "begin_line": 1476,
        "end_line": 1483,
        "comment": "",
        "child_ranges": [
            "(line 1477,col 5)-(line 1482,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference15()",
        "snippet": "  public void testFunctionInference15() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"f.prototype.foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1485,
        "end_line": 1491,
        "comment": "",
        "child_ranges": [
            "(line 1486,col 5)-(line 1490,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference16()",
        "snippet": "  public void testFunctionInference16() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"(new f).foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1493,
        "end_line": 1499,
        "comment": "",
        "child_ranges": [
            "(line 1494,col 5)-(line 1498,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference17()",
        "snippet": "  public void testFunctionInference17() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {}\" +\n        \"function abstractMethod() {}\" +\n        \"/** @param {number} x */ f.prototype.foo = abstractMethod;\",\n        \"(new f).foo\",\n        \"function (this:f, number): ?\");\n  }\n",
        "begin_line": 1501,
        "end_line": 1508,
        "comment": "",
        "child_ranges": [
            "(line 1502,col 5)-(line 1507,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference18()",
        "snippet": "  public void testFunctionInference18() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @this {Date} */ goog.eatWithDate;\",\n        \"goog.eatWithDate\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1510,
        "end_line": 1516,
        "comment": "",
        "child_ranges": [
            "(line 1511,col 5)-(line 1515,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference19()",
        "snippet": "  public void testFunctionInference19() throws Exception {\n    testFunctionType(\n        \"/** @param {string} x */ var f;\",\n        \"f\",\n        \"function (string): ?\");\n  }\n",
        "begin_line": 1518,
        "end_line": 1523,
        "comment": "",
        "child_ranges": [
            "(line 1519,col 5)-(line 1522,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference20()",
        "snippet": "  public void testFunctionInference20() throws Exception {\n    testFunctionType(\n        \"/** @this {Date} */ var f;\",\n        \"f\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1525,
        "end_line": 1530,
        "comment": "",
        "child_ranges": [
            "(line 1526,col 5)-(line 1529,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" /** @type {number} */ var x = 3;\\n\" +\n        \" function g() { x = null; }\" +\n        \" return x;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1532,
        "end_line": 1542,
        "comment": "",
        "child_ranges": [
            "(line 1533,col 5)-(line 1541,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = null;\\n\" +\n        \" function g() { x = 3; }\" +\n        \" g();\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1544,
        "end_line": 1556,
        "comment": "",
        "child_ranges": [
            "(line 1545,col 5)-(line 1555,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction3()",
        "snippet": "  public void testInnerFunction3() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = 3;\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1558,
        "end_line": 1571,
        "comment": "",
        "child_ranges": [
            "(line 1559,col 5)-(line 1570,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction4()",
        "snippet": "  public void testInnerFunction4() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = '3';\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = 3; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1573,
        "end_line": 1586,
        "comment": "",
        "child_ranges": [
            "(line 1574,col 5)-(line 1585,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction5()",
        "snippet": "  public void testInnerFunction5() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" /** @return {number} */\" +\n        \" function g() { var x = 3;x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1588,
        "end_line": 1600,
        "comment": "",
        "child_ranges": [
            "(line 1589,col 5)-(line 1599,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction6()",
        "snippet": "  public void testInnerFunction6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\", null);\n  }\n",
        "begin_line": 1602,
        "end_line": 1610,
        "comment": "",
        "child_ranges": [
            "(line 1603,col 5)-(line 1609,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction7()",
        "snippet": "  public void testInnerFunction7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" /** @type {number|function()} */\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1612,
        "end_line": 1624,
        "comment": "",
        "child_ranges": [
            "(line 1613,col 5)-(line 1623,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction8()",
        "snippet": "  public void testInnerFunction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" function x() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1626,
        "end_line": 1637,
        "comment": "",
        "child_ranges": [
            "(line 1627,col 5)-(line 1636,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction9()",
        "snippet": "  public void testInnerFunction9() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" function g() { x = null; };\\n\" +\n        \" function h() { return x == null; }\" +\n        \" return h();\" +\n        \"}\");\n  }\n",
        "begin_line": 1639,
        "end_line": 1647,
        "comment": "",
        "child_ranges": [
            "(line 1640,col 5)-(line 1646,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling1()",
        "snippet": "  public void testAbstractMethodHandling1() throws Exception {\n    testTypes(\n        \"/** @type {Function} */ var abstractFn = function() {};\" +\n        \"abstractFn(1);\");\n  }\n",
        "begin_line": 1649,
        "end_line": 1653,
        "comment": "",
        "child_ranges": [
            "(line 1650,col 5)-(line 1652,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling2()",
        "snippet": "  public void testAbstractMethodHandling2() throws Exception {\n    testTypes(\n        \"var abstractFn = function() {};\" +\n        \"abstractFn(1);\",\n        \"Function abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1655,
        "end_line": 1662,
        "comment": "",
        "child_ranges": [
            "(line 1656,col 5)-(line 1661,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling3()",
        "snippet": "  public void testAbstractMethodHandling3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\");\n  }\n",
        "begin_line": 1664,
        "end_line": 1669,
        "comment": "",
        "child_ranges": [
            "(line 1665,col 5)-(line 1668,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling4()",
        "snippet": "  public void testAbstractMethodHandling4() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\",\n        \"Function goog.abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1671,
        "end_line": 1679,
        "comment": "",
        "child_ranges": [
            "(line 1672,col 5)-(line 1678,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling5()",
        "snippet": "  public void testAbstractMethodHandling5() throws Exception {\n    testTypes(\n        \"/** @type {!Function} */ var abstractFn = function() {};\" +\n        \"/** @param {number} x */ var f = abstractFn;\" +\n        \"f('x');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1681,
        "end_line": 1689,
        "comment": "",
        "child_ranges": [
            "(line 1682,col 5)-(line 1688,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling6()",
        "snippet": "  public void testAbstractMethodHandling6() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"/** @param {number} x */ goog.f = abstractFn;\" +\n        \"goog.f('x');\",\n        \"actual parameter 1 of goog.f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1691,
        "end_line": 1700,
        "comment": "",
        "child_ranges": [
            "(line 1692,col 5)-(line 1699,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference1()",
        "snippet": "  public void testMethodInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1702,
        "end_line": 1712,
        "comment": "",
        "child_ranges": [
            "(line 1703,col 5)-(line 1711,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference2()",
        "snippet": "  public void testMethodInference2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.F = function() {};\" +\n        \"/** @return {number} */ goog.F.prototype.foo = \" +\n        \"    function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {goog.F} */ \" +\n        \"goog.G = function() {};\" +\n        \"/** @override */ goog.G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1714,
        "end_line": 1726,
        "comment": "",
        "child_ranges": [
            "(line 1715,col 5)-(line 1725,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference3()",
        "snippet": "  public void testMethodInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1728,
        "end_line": 1740,
        "comment": "",
        "child_ranges": [
            "(line 1729,col 5)-(line 1739,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference4()",
        "snippet": "  public void testMethodInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1742,
        "end_line": 1754,
        "comment": "",
        "child_ranges": [
            "(line 1743,col 5)-(line 1753,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference5()",
        "snippet": "  public void testMethodInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x \\n * @return {string} */ \" +\n        \"F.prototype.foo = function(x) { return 'x'; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @type {number} */ G.prototype.num = 3;\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return this.num + y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1756,
        "end_line": 1769,
        "comment": "",
        "child_ranges": [
            "(line 1757,col 5)-(line 1768,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference6()",
        "snippet": "  public void testMethodInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { };\" +\n        \"(new G()).foo(1);\");\n  }\n",
        "begin_line": 1771,
        "end_line": 1779,
        "comment": "",
        "child_ranges": [
            "(line 1772,col 5)-(line 1778,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference7()",
        "snippet": "  public void testMethodInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function(x, y) { };\" +\n        \"(new G()).foo();\",\n        \"Function G.prototype.foo: called with 0 argument(s). \" +\n        \"Function requires at least 2 argument(s) \" +\n        \"and no more than 2 argument(s).\");\n  }\n",
        "begin_line": 1781,
        "end_line": 1792,
        "comment": "",
        "child_ranges": [
            "(line 1782,col 5)-(line 1791,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference8()",
        "snippet": "  public void testMethodInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(a, opt_b, var_args) { };\" +\n        \"(new G()).foo();\",\n        \"Function G.prototype.foo: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s).\");\n  }\n",
        "begin_line": 1794,
        "end_line": 1805,
        "comment": "",
        "child_ranges": [
            "(line 1795,col 5)-(line 1804,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference9()",
        "snippet": "  public void testMethodInference9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(a, var_args, opt_b) { };\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1807,
        "end_line": 1816,
        "comment": "",
        "child_ranges": [
            "(line 1808,col 5)-(line 1815,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticMethodDeclaration1()",
        "snippet": "  public void testStaticMethodDeclaration1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { F.foo(true); }\" +\n        \"/** @param {number} x */ F.foo = function(x) {};\",\n        \"actual parameter 1 of F.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1818,
        "end_line": 1825,
        "comment": "",
        "child_ranges": [
            "(line 1819,col 5)-(line 1824,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticMethodDeclaration2()",
        "snippet": "  public void testStaticMethodDeclaration2() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"actual parameter 1 of goog.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1827,
        "end_line": 1834,
        "comment": "",
        "child_ranges": [
            "(line 1828,col 5)-(line 1833,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticMethodDeclaration3()",
        "snippet": "  public void testStaticMethodDeclaration3() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"goog.foo = function() {};\",\n        \"Function goog.foo: called with 1 argument(s). Function requires \" +\n        \"at least 0 argument(s) and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1836,
        "end_line": 1842,
        "comment": "",
        "child_ranges": [
            "(line 1837,col 5)-(line 1841,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl1()",
        "snippet": "  public void testDuplicateStaticMethodDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (number): undefined, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (number): undefined\");\n  }\n",
        "begin_line": 1844,
        "end_line": 1852,
        "comment": "",
        "child_ranges": [
            "(line 1845,col 5)-(line 1851,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl2()",
        "snippet": "  public void testDuplicateStaticMethodDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x \\n * @suppress {duplicate} */ \" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1854,
        "end_line": 1860,
        "comment": "",
        "child_ranges": [
            "(line 1855,col 5)-(line 1859,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl3()",
        "snippet": "  public void testDuplicateStaticMethodDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1862,
        "end_line": 1867,
        "comment": "",
        "child_ranges": [
            "(line 1863,col 5)-(line 1866,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl4()",
        "snippet": "  public void testDuplicateStaticMethodDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Function} */ goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1869,
        "end_line": 1874,
        "comment": "",
        "child_ranges": [
            "(line 1870,col 5)-(line 1873,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl5()",
        "snippet": "  public void testDuplicateStaticMethodDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"/** @return {undefined} */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (?): undefined, \" +\n        \"original definition at [testcode]:1 with type \" +\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1876,
        "end_line": 1884,
        "comment": "",
        "child_ranges": [
            "(line 1877,col 5)-(line 1883,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl1()",
        "snippet": "  public void testDuplicateStaticPropertyDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 1886,
        "end_line": 1892,
        "comment": "",
        "child_ranges": [
            "(line 1887,col 5)-(line 1891,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl2()",
        "snippet": "  public void testDuplicateStaticPropertyDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} \\n * @suppress {duplicate} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 1894,
        "end_line": 1900,
        "comment": "",
        "child_ranges": [
            "(line 1895,col 5)-(line 1899,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl3()",
        "snippet": "  public void testDuplicateStaticPropertyDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 1902,
        "end_line": 1910,
        "comment": "",
        "child_ranges": [
            "(line 1903,col 5)-(line 1909,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl4()",
        "snippet": "  public void testDuplicateStaticPropertyDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 1912,
        "end_line": 1920,
        "comment": "",
        "child_ranges": [
            "(line 1913,col 5)-(line 1919,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl5()",
        "snippet": "  public void testDuplicateStaticPropertyDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 1922,
        "end_line": 1930,
        "comment": "",
        "child_ranges": [
            "(line 1923,col 5)-(line 1929,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl6()",
        "snippet": "  public void testDuplicateStaticPropertyDecl6() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 1932,
        "end_line": 1937,
        "comment": "",
        "child_ranges": [
            "(line 1933,col 5)-(line 1936,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl7()",
        "snippet": "  public void testDuplicateStaticPropertyDecl7() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {string} x */ goog.foo;\" +\n        \"/** @type {function(string)} */ goog.foo;\");\n  }\n",
        "begin_line": 1939,
        "end_line": 1944,
        "comment": "",
        "child_ranges": [
            "(line 1940,col 5)-(line 1943,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl8()",
        "snippet": "  public void testDuplicateStaticPropertyDecl8() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\" +\n        \"/** @return {EventCopy} */ goog.foo;\");\n  }\n",
        "begin_line": 1946,
        "end_line": 1952,
        "comment": "",
        "child_ranges": [
            "(line 1947,col 5)-(line 1951,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl9()",
        "snippet": "  public void testDuplicateStaticPropertyDecl9() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\");\n  }\n",
        "begin_line": 1954,
        "end_line": 1960,
        "comment": "",
        "child_ranges": [
            "(line 1955,col 5)-(line 1959,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateLocalVarDecl()",
        "snippet": "  public void testDuplicateLocalVarDecl() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @param {number} x */\\n\" +\n        \"function f(x) { /** @type {string} */ var x = ''; }\",\n        Lists.newArrayList(\n            \"variable x redefined with type string, original definition\" +\n            \" at  [testcode] :2 with type number\",\n            \"initializing variable\\n\" +\n            \"found   : string\\n\" +\n            \"required: number\"));\n  }\n",
        "begin_line": 1962,
        "end_line": 1972,
        "comment": "",
        "child_ranges": [
            "(line 1963,col 5)-(line 1971,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration1()",
        "snippet": "  public void testStubFunctionDeclaration1() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @param {number} x \\n * @param {string} y \\n\" +\n        \"  * @return {number} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        \"function (this:f, number, string): number\");\n  }\n",
        "begin_line": 1974,
        "end_line": 1981,
        "comment": "",
        "child_ranges": [
            "(line 1975,col 5)-(line 1980,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration2()",
        "snippet": "  public void testStubFunctionDeclaration2() throws Exception {\n    testExternFunctionType(\n        // externs\n        \"/** @constructor */ function f() {};\" +\n        \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n        \"f.subclass\",\n        \"function (new:f.subclass): ?\");\n  }\n",
        "begin_line": 1983,
        "end_line": 1990,
        "comment": "",
        "child_ranges": [
            "(line 1984,col 5)-(line 1989,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration3()",
        "snippet": "  public void testStubFunctionDeclaration3() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @return {undefined} */ f.foo;\",\n        \"f.foo\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1992,
        "end_line": 1998,
        "comment": "",
        "child_ranges": [
            "(line 1993,col 5)-(line 1997,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration4()",
        "snippet": "  public void testStubFunctionDeclaration4() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @return {number} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        \"function (this:f): number\");\n  }\n",
        "begin_line": 2000,
        "end_line": 2007,
        "comment": "",
        "child_ranges": [
            "(line 2001,col 5)-(line 2006,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration5()",
        "snippet": "  public void testStubFunctionDeclaration5() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @type {Function} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2009,
        "end_line": 2017,
        "comment": "",
        "child_ranges": [
            "(line 2010,col 5)-(line 2016,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration6()",
        "snippet": "  public void testStubFunctionDeclaration6() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2019,
        "end_line": 2026,
        "comment": "",
        "child_ranges": [
            "(line 2020,col 5)-(line 2025,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration7()",
        "snippet": "  public void testStubFunctionDeclaration7() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo = function() {};\",\n        \"(new f).foo\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2028,
        "end_line": 2035,
        "comment": "",
        "child_ranges": [
            "(line 2029,col 5)-(line 2034,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration8()",
        "snippet": "  public void testStubFunctionDeclaration8() throws Exception {\n    testFunctionType(\n        \"/** @type {Function} */ var f = function() {}; \",\n        \"f\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2037,
        "end_line": 2043,
        "comment": "",
        "child_ranges": [
            "(line 2038,col 5)-(line 2042,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration9()",
        "snippet": "  public void testStubFunctionDeclaration9() throws Exception {\n    testFunctionType(\n        \"/** @type {function():number} */ var f; \",\n        \"f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 2045,
        "end_line": 2050,
        "comment": "",
        "child_ranges": [
            "(line 2046,col 5)-(line 2049,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration10()",
        "snippet": "  public void testStubFunctionDeclaration10() throws Exception {\n    testFunctionType(\n        \"/** @type {function(number):number} */ var f = function(x) {};\",\n        \"f\",\n        \"function (number): number\");\n  }\n",
        "begin_line": 2052,
        "end_line": 2057,
        "comment": "",
        "child_ranges": [
            "(line 2053,col 5)-(line 2056,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNestedFunctionInference1()",
        "snippet": "  public void testNestedFunctionInference1() throws Exception {\n    String nestedAssignOfFooAndBar =\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = f.prototype.bar = function(){};\";\n    testFunctionType(nestedAssignOfFooAndBar, \"(new f).bar\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 2059,
        "end_line": 2065,
        "comment": "",
        "child_ranges": [
            "(line 2060,col 5)-(line 2062,col 60)",
            "(line 2063,col 5)-(line 2064,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionType(java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionType)\n      throws Exception {\n    testFunctionType(functionDef, \"f\", functionType);\n  }\n",
        "begin_line": 2071,
        "end_line": 2074,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code \"f\"}.\n   ",
        "child_ranges": [
            "(line 2073,col 5)-(line 2073,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    // using the variable initialization check to verify the function's type\n    testTypes(\n        functionDef +\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2080,
        "end_line": 2089,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2083,col 5)-(line 2088,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExternFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testExternFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    testTypes(\n        functionDef,\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\", false);\n  }\n",
        "begin_line": 2096,
        "end_line": 2104,
        "comment": "\n   * Tests the type of a function definition in externs.\n   * The function defined by {@code functionDef} should be\n   * named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2098,col 5)-(line 2103,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeRedefinition()",
        "snippet": "  public void testTypeRedefinition() throws Exception {\n    testTypes(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n        + \"/** @constructor */ a.A = function() {}\",\n        \"variable a.A redefined with type function (new:a.A): undefined, \" +\n        \"original definition at [testcode]:1 with type enum{a.A}\");\n  }\n",
        "begin_line": 2106,
        "end_line": 2111,
        "comment": "",
        "child_ranges": [
            "(line 2107,col 5)-(line 2110,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn1()",
        "snippet": "  public void testIn1() throws Exception {\n    testTypes(\"'foo' in Object\");\n  }\n",
        "begin_line": 2113,
        "end_line": 2115,
        "comment": "",
        "child_ranges": [
            "(line 2114,col 5)-(line 2114,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn2()",
        "snippet": "  public void testIn2() throws Exception {\n    testTypes(\"3 in Object\");\n  }\n",
        "begin_line": 2117,
        "end_line": 2119,
        "comment": "",
        "child_ranges": [
            "(line 2118,col 5)-(line 2118,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn3()",
        "snippet": "  public void testIn3() throws Exception {\n    testTypes(\"undefined in Object\");\n  }\n",
        "begin_line": 2121,
        "end_line": 2123,
        "comment": "",
        "child_ranges": [
            "(line 2122,col 5)-(line 2122,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn4()",
        "snippet": "  public void testIn4() throws Exception {\n    testTypes(\"Date in Object\",\n        \"left side of 'in'\\n\" +\n        \"found   : function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2125,
        "end_line": 2130,
        "comment": "",
        "child_ranges": [
            "(line 2126,col 5)-(line 2129,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn5()",
        "snippet": "  public void testIn5() throws Exception {\n    testTypes(\"'x' in null\",\n        \"'in' requires an object\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2132,
        "end_line": 2137,
        "comment": "",
        "child_ranges": [
            "(line 2133,col 5)-(line 2136,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn6()",
        "snippet": "  public void testIn6() throws Exception {\n    testTypes(\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\" +\n        \"g(1 in {});\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2139,
        "end_line": 2147,
        "comment": "",
        "child_ranges": [
            "(line 2140,col 5)-(line 2146,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn7()",
        "snippet": "  public void testIn7() throws Exception {\n    // Make sure we do inference in the 'in' expression.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  return g(x.foo) in {};\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2149,
        "end_line": 2165,
        "comment": "",
        "child_ranges": [
            "(line 2151,col 5)-(line 2164,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison2()",
        "snippet": "  public void testComparison2() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type !Date */var b;\" +\n        \"if (a!==b) {}\",\n        \"condition always evaluates to the same value\\n\" +\n        \"left : number\\n\" +\n        \"right: Date\");\n  }\n",
        "begin_line": 2177,
        "end_line": 2184,
        "comment": "",
        "child_ranges": [
            "(line 2178,col 5)-(line 2183,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison3()",
        "snippet": "  public void testComparison3() throws Exception {\n    // Since null == undefined in JavaScript, this code is reasonable.\n    testTypes(\"/** @type {(Object,undefined)} */var a;\" +\n        \"var b = a == null\");\n  }\n",
        "begin_line": 2186,
        "end_line": 2190,
        "comment": "",
        "child_ranges": [
            "(line 2188,col 5)-(line 2189,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison4()",
        "snippet": "  public void testComparison4() throws Exception {\n    testTypes(\"/** @type {(!Object,undefined)} */var a;\" +\n        \"/** @type {!Object} */var b;\" +\n        \"var c = a == b\");\n  }\n",
        "begin_line": 2192,
        "end_line": 2196,
        "comment": "",
        "child_ranges": [
            "(line 2193,col 5)-(line 2195,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison5()",
        "snippet": "  public void testComparison5() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2198,
        "end_line": 2205,
        "comment": "",
        "child_ranges": [
            "(line 2199,col 5)-(line 2204,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison6()",
        "snippet": "  public void testComparison6() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a != b\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2207,
        "end_line": 2214,
        "comment": "",
        "child_ranges": [
            "(line 2208,col 5)-(line 2213,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison7()",
        "snippet": "  public void testComparison7() throws Exception {\n    testTypes(\"var a;\" +\n        \"var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: undefined\");\n  }\n",
        "begin_line": 2216,
        "end_line": 2223,
        "comment": "",
        "child_ranges": [
            "(line 2217,col 5)-(line 2222,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison8()",
        "snippet": "  public void testComparison8() throws Exception {\n    testTypes(\"/** @type {Array.<string>} */ var a = [];\" +\n        \"a[0] == null || a[1] == undefined\");\n  }\n",
        "begin_line": 2225,
        "end_line": 2228,
        "comment": "",
        "child_ranges": [
            "(line 2226,col 5)-(line 2227,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison9()",
        "snippet": "  public void testComparison9() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] == null\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2230,
        "end_line": 2236,
        "comment": "",
        "child_ranges": [
            "(line 2231,col 5)-(line 2235,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison10()",
        "snippet": "  public void testComparison10() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] === null\");\n  }\n",
        "begin_line": 2238,
        "end_line": 2241,
        "comment": "",
        "child_ranges": [
            "(line 2239,col 5)-(line 2240,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnumStaticMethod1()",
        "snippet": "  public void testEnumStaticMethod1() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"Foo.method(true);\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2243,
        "end_line": 2251,
        "comment": "",
        "child_ranges": [
            "(line 2244,col 5)-(line 2250,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnumStaticMethod2()",
        "snippet": "  public void testEnumStaticMethod2() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"function f() { Foo.method(true); }\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2253,
        "end_line": 2261,
        "comment": "",
        "child_ranges": [
            "(line 2254,col 5)-(line 2260,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum1()",
        "snippet": "  public void testEnum1() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n\" +\n        \"/**@type {a}*/var d;d=a.BB;\");\n  }\n",
        "begin_line": 2263,
        "end_line": 2266,
        "comment": "",
        "child_ranges": [
            "(line 2264,col 5)-(line 2265,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum2()",
        "snippet": "  public void testEnum2() throws Exception {\n    testTypes(\"/**@enum*/var a={b:1}\",\n        \"enum key b must be a syntactic constant\");\n  }\n",
        "begin_line": 2268,
        "end_line": 2271,
        "comment": "",
        "child_ranges": [
            "(line 2269,col 5)-(line 2270,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum3()",
        "snippet": "  public void testEnum3() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,BB:2}\",\n        \"variable a.BB redefined with type a.<number>, \" +\n        \"original definition at [testcode]:1 with type a.<number>\");\n  }\n",
        "begin_line": 2273,
        "end_line": 2277,
        "comment": "",
        "child_ranges": [
            "(line 2274,col 5)-(line 2276,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum4()",
        "snippet": "  public void testEnum4() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:'string'}\",\n        \"assignment to property BB of enum{a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2279,
        "end_line": 2284,
        "comment": "",
        "child_ranges": [
            "(line 2280,col 5)-(line 2283,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum5()",
        "snippet": "  public void testEnum5() throws Exception {\n    testTypes(\"/**@enum {String}*/var a={BB:'string'}\",\n        \"assignment to property BB of enum{a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null|undefined)\");\n  }\n",
        "begin_line": 2286,
        "end_line": 2291,
        "comment": "",
        "child_ranges": [
            "(line 2287,col 5)-(line 2290,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum6()",
        "snippet": "  public void testEnum6() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n/**@type {!Array}*/var d;d=a.BB;\",\n        \"assignment\\n\" +\n        \"found   : a.<number>\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 2293,
        "end_line": 2298,
        "comment": "",
        "child_ranges": [
            "(line 2294,col 5)-(line 2297,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum7()",
        "snippet": "  public void testEnum7() throws Exception {\n    testTypes(\"/** @enum */var a={AA:1,BB:2,CC:3};\" +\n        \"/** @type a */var b=a.D;\",\n        \"element D does not exist on this enum\");\n  }\n",
        "begin_line": 2300,
        "end_line": 2304,
        "comment": "",
        "child_ranges": [
            "(line 2301,col 5)-(line 2303,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum8()",
        "snippet": "  public void testEnum8() throws Exception {\n    testClosureTypesMultipleWarnings(\"/** @enum */var a=8;\",\n        Lists.newArrayList(\n            \"enum initializer must be an object literal or an enum\",\n            \"initializing variable\\n\" +\n            \"found   : number\\n\" +\n            \"required: enum{a}\"));\n  }\n",
        "begin_line": 2306,
        "end_line": 2313,
        "comment": "",
        "child_ranges": [
            "(line 2307,col 5)-(line 2312,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum9()",
        "snippet": "  public void testEnum9() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = {};\" +\n        \"/** @enum */goog.a=8;\",\n        Lists.newArrayList(\n            \"assignment to property a of goog\\n\" +\n            \"found   : number\\n\" +\n            \"required: enum{goog.a}\",\n            \"enum initializer must be an object literal or an enum\"));\n  }\n",
        "begin_line": 2315,
        "end_line": 2324,
        "comment": "",
        "child_ranges": [
            "(line 2316,col 5)-(line 2323,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum10()",
        "snippet": "  public void testEnum10() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { A : 3 };\");\n  }\n",
        "begin_line": 2326,
        "end_line": 2330,
        "comment": "",
        "child_ranges": [
            "(line 2327,col 5)-(line 2329,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum11()",
        "snippet": "  public void testEnum11() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { 502 : 3 };\");\n  }\n",
        "begin_line": 2332,
        "end_line": 2336,
        "comment": "",
        "child_ranges": [
            "(line 2333,col 5)-(line 2335,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum12()",
        "snippet": "  public void testEnum12() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum */ var b = a;\");\n  }\n",
        "begin_line": 2338,
        "end_line": 2342,
        "comment": "",
        "child_ranges": [
            "(line 2339,col 5)-(line 2341,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum13()",
        "snippet": "  public void testEnum13() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum {string} */ var b = a;\",\n        \"incompatible enum element types\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2344,
        "end_line": 2351,
        "comment": "",
        "child_ranges": [
            "(line 2345,col 5)-(line 2350,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum14()",
        "snippet": "  public void testEnum14() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.FOO;\");\n  }\n",
        "begin_line": 2353,
        "end_line": 2358,
        "comment": "",
        "child_ranges": [
            "(line 2354,col 5)-(line 2357,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum15()",
        "snippet": "  public void testEnum15() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.BAR;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2360,
        "end_line": 2366,
        "comment": "",
        "child_ranges": [
            "(line 2361,col 5)-(line 2365,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum16()",
        "snippet": "  public void testEnum16() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog .a={BB:1,BB:2}\",\n        \"variable goog.a.BB redefined with type goog.a.<number>, \" +\n        \"original definition at [testcode]:1 with type goog.a.<number>\");\n  }\n",
        "begin_line": 2368,
        "end_line": 2373,
        "comment": "",
        "child_ranges": [
            "(line 2369,col 5)-(line 2372,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum17()",
        "snippet": "  public void testEnum17() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:'string'}\",\n        \"assignment to property BB of enum{goog.a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2375,
        "end_line": 2381,
        "comment": "",
        "child_ranges": [
            "(line 2376,col 5)-(line 2380,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum18()",
        "snippet": "  public void testEnum18() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {!E} x\\n@return {number} */\\n\" +\n        \"var f = function(x) { return x; };\");\n  }\n",
        "begin_line": 2383,
        "end_line": 2387,
        "comment": "",
        "child_ranges": [
            "(line 2384,col 5)-(line 2386,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum19()",
        "snippet": "  public void testEnum19() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {number} x\\n@return {!E} */\\n\" +\n        \"var f = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: E.<number>\");\n  }\n",
        "begin_line": 2389,
        "end_line": 2396,
        "comment": "",
        "child_ranges": [
            "(line 2390,col 5)-(line 2395,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum20()",
        "snippet": "  public void testEnum20() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2}; var x = []; x[E.A] = 0;\");\n  }\n",
        "begin_line": 2398,
        "end_line": 2400,
        "comment": "",
        "child_ranges": [
            "(line 2399,col 5)-(line 2399,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum21()",
        "snippet": "  public void testEnum21() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @enum {string} */ var E = {A : 'a', B : 'b'};\\n\" +\n        \"/** @param {!E} x\\n@return {!E} */ function f(x) { return x; }\");\n    Node nodeX = n.getLastChild().getLastChild().getLastChild().getLastChild();\n    JSType typeE = nodeX.getJSType();\n    assertFalse(typeE.isObject());\n    assertFalse(typeE.isNullable());\n  }\n",
        "begin_line": 2402,
        "end_line": 2410,
        "comment": "",
        "child_ranges": [
            "(line 2403,col 5)-(line 2405,col 74)",
            "(line 2406,col 5)-(line 2406,col 79)",
            "(line 2407,col 5)-(line 2407,col 37)",
            "(line 2408,col 5)-(line 2408,col 34)",
            "(line 2409,col 5)-(line 2409,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum22()",
        "snippet": "  public void testEnum22() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2412,
        "end_line": 2415,
        "comment": "",
        "child_ranges": [
            "(line 2413,col 5)-(line 2414,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum23()",
        "snippet": "  public void testEnum23() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {string} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2417,
        "end_line": 2423,
        "comment": "",
        "child_ranges": [
            "(line 2418,col 5)-(line 2422,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum24()",
        "snippet": "  public void testEnum24() throws Exception {\n    testTypes(\"/**@enum {Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<(Object|null|undefined)>\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2425,
        "end_line": 2431,
        "comment": "",
        "child_ranges": [
            "(line 2426,col 5)-(line 2430,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum25()",
        "snippet": "  public void testEnum25() throws Exception {\n    testTypes(\"/**@enum {!Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2433,
        "end_line": 2436,
        "comment": "",
        "child_ranges": [
            "(line 2434,col 5)-(line 2435,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum26()",
        "snippet": "  public void testEnum26() throws Exception {\n    testTypes(\"var a = {}; /**@enum*/ a.B = {A: 1, B: 2};\" +\n        \"/** @param {a.B} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2438,
        "end_line": 2441,
        "comment": "",
        "child_ranges": [
            "(line 2439,col 5)-(line 2440,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum27()",
        "snippet": "  public void testEnum27() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A == x; }\");\n  }\n",
        "begin_line": 2443,
        "end_line": 2447,
        "comment": "",
        "child_ranges": [
            "(line 2445,col 5)-(line 2446,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum28()",
        "snippet": "  public void testEnum28() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A.B == x; }\");\n  }\n",
        "begin_line": 2449,
        "end_line": 2453,
        "comment": "",
        "child_ranges": [
            "(line 2451,col 5)-(line 2452,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum29()",
        "snippet": "  public void testEnum29() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2455,
        "end_line": 2461,
        "comment": "",
        "child_ranges": [
            "(line 2456,col 5)-(line 2460,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum30()",
        "snippet": "  public void testEnum30() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2463,
        "end_line": 2466,
        "comment": "",
        "child_ranges": [
            "(line 2464,col 5)-(line 2465,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum31()",
        "snippet": "  public void testEnum31() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: A.<number>\");\n  }\n",
        "begin_line": 2468,
        "end_line": 2474,
        "comment": "",
        "child_ranges": [
            "(line 2469,col 5)-(line 2473,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum32()",
        "snippet": "  public void testEnum32() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2476,
        "end_line": 2479,
        "comment": "",
        "child_ranges": [
            "(line 2477,col 5)-(line 2478,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum34()",
        "snippet": "  public void testEnum34() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @param {number} x */ function f(x) { return x == A.B; }\");\n  }\n",
        "begin_line": 2481,
        "end_line": 2484,
        "comment": "",
        "child_ranges": [
            "(line 2482,col 5)-(line 2483,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum35()",
        "snippet": "  public void testEnum35() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {a.b} */ function f() { return a.b.C; }\");\n  }\n",
        "begin_line": 2486,
        "end_line": 2489,
        "comment": "",
        "child_ranges": [
            "(line 2487,col 5)-(line 2488,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum36()",
        "snippet": "  public void testEnum36() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {!a.b} */ function f() { return 1; }\",\n              \"inconsistent return type\\n\" +\n              \"found   : number\\n\" +\n              \"required: a.b.<number>\");\n  }\n",
        "begin_line": 2491,
        "end_line": 2497,
        "comment": "",
        "child_ranges": [
            "(line 2492,col 5)-(line 2496,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum37()",
        "snippet": "  public void testEnum37() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @enum {number} */ goog.a = {};\" +\n        \"/** @enum */ var b = goog.a;\");\n  }\n",
        "begin_line": 2499,
        "end_line": 2504,
        "comment": "",
        "child_ranges": [
            "(line 2500,col 5)-(line 2503,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum38()",
        "snippet": "  public void testEnum38() throws Exception {\n    testTypes(\n        \"/** @enum {MyEnum} */ var MyEnum = {};\" +\n        \"/** @param {MyEnum} x */ function f(x) {}\",\n        \"Parse error. Cycle detected in inheritance chain \" +\n        \"of type MyEnum\");\n  }\n",
        "begin_line": 2506,
        "end_line": 2512,
        "comment": "",
        "child_ranges": [
            "(line 2507,col 5)-(line 2511,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum39()",
        "snippet": "  public void testEnum39() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {MyEnum} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2514,
        "end_line": 2522,
        "comment": "",
        "child_ranges": [
            "(line 2515,col 5)-(line 2521,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum40()",
        "snippet": "  public void testEnum40() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {number} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2524,
        "end_line": 2532,
        "comment": "",
        "child_ranges": [
            "(line 2525,col 5)-(line 2531,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum1()",
        "snippet": "  public void testAliasedEnum1() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2534,
        "end_line": 2539,
        "comment": "",
        "child_ranges": [
            "(line 2535,col 5)-(line 2538,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum2()",
        "snippet": "  public void testAliasedEnum2() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2541,
        "end_line": 2546,
        "comment": "",
        "child_ranges": [
            "(line 2542,col 5)-(line 2545,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum3()",
        "snippet": "  public void testAliasedEnum3() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2548,
        "end_line": 2553,
        "comment": "",
        "child_ranges": [
            "(line 2549,col 5)-(line 2552,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum4()",
        "snippet": "  public void testAliasedEnum4() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2555,
        "end_line": 2560,
        "comment": "",
        "child_ranges": [
            "(line 2556,col 5)-(line 2559,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum5()",
        "snippet": "  public void testAliasedEnum5() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {string} x */ function f(x) {} f(MyEnum.FOO);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : YourEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2562,
        "end_line": 2570,
        "comment": "",
        "child_ranges": [
            "(line 2563,col 5)-(line 2569,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse1()",
        "snippet": "  public void testBackwardsEnumUse1() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\");\n  }\n",
        "begin_line": 2572,
        "end_line": 2576,
        "comment": "",
        "child_ranges": [
            "(line 2573,col 5)-(line 2575,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse2()",
        "snippet": "  public void testBackwardsEnumUse2() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2578,
        "end_line": 2585,
        "comment": "",
        "child_ranges": [
            "(line 2579,col 5)-(line 2584,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse3()",
        "snippet": "  public void testBackwardsEnumUse3() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\");\n  }\n",
        "begin_line": 2587,
        "end_line": 2592,
        "comment": "",
        "child_ranges": [
            "(line 2588,col 5)-(line 2591,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse4()",
        "snippet": "  public void testBackwardsEnumUse4() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"inconsistent return type\\n\" +\n        \"found   : YourEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2594,
        "end_line": 2602,
        "comment": "",
        "child_ranges": [
            "(line 2595,col 5)-(line 2601,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse5()",
        "snippet": "  public void testBackwardsEnumUse5() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.BAR; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2604,
        "end_line": 2610,
        "comment": "",
        "child_ranges": [
            "(line 2605,col 5)-(line 2609,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsConstructor1()",
        "snippet": "  public void testBackwardsConstructor1() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = function(x) {};\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2612,
        "end_line": 2620,
        "comment": "",
        "child_ranges": [
            "(line 2613,col 5)-(line 2619,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsConstructor2()",
        "snippet": "  public void testBackwardsConstructor2() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var YourFoo = function(x) {};\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = YourFoo;\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2622,
        "end_line": 2632,
        "comment": "",
        "child_ranges": [
            "(line 2623,col 5)-(line 2631,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMinimalConstructorAnnotation()",
        "snippet": "  public void testMinimalConstructorAnnotation() throws Exception {\n    testTypes(\"/** @constructor */function Foo(){}\");\n  }\n",
        "begin_line": 2634,
        "end_line": 2636,
        "comment": "",
        "child_ranges": [
            "(line 2635,col 5)-(line 2635,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends1()",
        "snippet": "  public void testGoodExtends1() throws Exception {\n    // A minimal @extends example\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 2638,
        "end_line": 2642,
        "comment": "",
        "child_ranges": [
            "(line 2640,col 5)-(line 2641,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends2()",
        "snippet": "  public void testGoodExtends2() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends base */function derived() {}\\n\" +\n        \"/** @constructor */function base() {}\\n\");\n  }\n",
        "begin_line": 2644,
        "end_line": 2647,
        "comment": "",
        "child_ranges": [
            "(line 2645,col 5)-(line 2646,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends3()",
        "snippet": "  public void testGoodExtends3() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends {Object} */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 2649,
        "end_line": 2652,
        "comment": "",
        "child_ranges": [
            "(line 2650,col 5)-(line 2651,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends4()",
        "snippet": "  public void testGoodExtends4() throws Exception {\n    // Ensure that @extends actually sets the base type of a constructor\n    // correctly. Because this isn't part of the human-readable Function\n    // definition, we need to crawl the prototype chain (eww).\n    Node n = parseAndTypeCheck(\n        \"var goog = {};\\n\" +\n        \"/** @constructor */goog.Base = function(){};\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {goog.Base} */goog.Derived = function(){};\\n\");\n    Node subTypeName = n.getLastChild().getLastChild().getFirstChild();\n    assertEquals(\"goog.Derived\", subTypeName.getQualifiedName());\n\n    FunctionType subCtorType =\n        (FunctionType) subTypeName.getNext().getJSType();\n    assertEquals(\"goog.Derived\", subCtorType.getInstanceType().toString());\n\n    JSType superType = subCtorType.getPrototype().getImplicitPrototype();\n    assertEquals(\"goog.Base\", superType.toString());\n  }\n",
        "begin_line": 2654,
        "end_line": 2672,
        "comment": "",
        "child_ranges": [
            "(line 2658,col 5)-(line 2662,col 69)",
            "(line 2663,col 5)-(line 2663,col 71)",
            "(line 2664,col 5)-(line 2664,col 65)",
            "(line 2666,col 5)-(line 2667,col 57)",
            "(line 2668,col 5)-(line 2668,col 75)",
            "(line 2670,col 5)-(line 2670,col 73)",
            "(line 2671,col 5)-(line 2671,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends5()",
        "snippet": "  public void testGoodExtends5() throws Exception {\n    // we allow for the extends annotation to be placed first\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\");\n  }\n",
        "begin_line": 2674,
        "end_line": 2678,
        "comment": "",
        "child_ranges": [
            "(line 2676,col 5)-(line 2677,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends6()",
        "snippet": "  public void testGoodExtends6() throws Exception {\n    testFunctionType(\n        CLOSURE_DEFS +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @return {number} */ \" +\n        \"  base.prototype.foo = function() { return 1; };\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"goog.inherits(derived, base);\",\n        \"derived.superClass_.foo\",\n        \"function (this:base): number\");\n  }\n",
        "begin_line": 2680,
        "end_line": 2690,
        "comment": "",
        "child_ranges": [
            "(line 2681,col 5)-(line 2689,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends7()",
        "snippet": "  public void testGoodExtends7() throws Exception {\n    testFunctionType(\n        \"Function.prototype.inherits = function(x) {};\" +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"derived.inherits(base);\",\n        \"(new derived).constructor\",\n        \"function (new:derived): undefined\");\n  }\n",
        "begin_line": 2692,
        "end_line": 2700,
        "comment": "",
        "child_ranges": [
            "(line 2693,col 5)-(line 2699,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends8()",
        "snippet": "  public void testGoodExtends8() throws Exception {\n    testTypes(\"/** @constructor \\n @extends {Base} */ function Sub() {}\" +\n        \"/** @return {number} */ function f() { return (new Sub()).foo; }\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @type {boolean} */ Base.prototype.foo = true;\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2702,
        "end_line": 2710,
        "comment": "",
        "child_ranges": [
            "(line 2703,col 5)-(line 2709,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends9()",
        "snippet": "  public void testGoodExtends9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @override */ Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 2712,
        "end_line": 2719,
        "comment": "",
        "child_ranges": [
            "(line 2713,col 5)-(line 2718,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends10()",
        "snippet": "  public void testGoodExtends10() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @return {Super} */ function foo() { return new Sub(); }\");\n  }\n",
        "begin_line": 2721,
        "end_line": 2727,
        "comment": "",
        "child_ranges": [
            "(line 2722,col 5)-(line 2726,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends11()",
        "snippet": "  public void testGoodExtends11() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {boolean} x */ Super.prototype.foo = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"(new Sub()).foo(0);\",\n        \"actual parameter 1 of Super.prototype.foo \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2729,
        "end_line": 2740,
        "comment": "",
        "child_ranges": [
            "(line 2730,col 5)-(line 2739,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadExtends1()",
        "snippet": "  public void testBadExtends1() throws Exception {\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {not_base} */function derived() {}\\n\",\n        \"Bad type annotation. Unknown type not_base\");\n  }\n",
        "begin_line": 2742,
        "end_line": 2746,
        "comment": "",
        "child_ranges": [
            "(line 2743,col 5)-(line 2745,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadExtends2()",
        "snippet": "  public void testBadExtends2() throws Exception {\n    testTypes(\"/** @constructor */function base() {\\n\" +\n        \"/** @type {!Number}*/\\n\" +\n        \"this.baseMember = new Number(4);\\n\" +\n        \"}\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {base} */function derived() {}\\n\" +\n        \"/** @param {!String} x*/\\n\" +\n        \"function foo(x){ }\\n\" +\n        \"/** @type {!derived}*/var y;\\n\" +\n        \"foo(y.baseMember);\\n\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 2748,
        "end_line": 2762,
        "comment": "",
        "child_ranges": [
            "(line 2749,col 5)-(line 2761,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadExtends3()",
        "snippet": "  public void testBadExtends3() throws Exception {\n    testTypes(\"/** @extends {Object} */function base() {}\",\n        \"@extends used without @constructor or @interface for base\");\n  }\n",
        "begin_line": 2764,
        "end_line": 2767,
        "comment": "",
        "child_ranges": [
            "(line 2765,col 5)-(line 2766,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testLateExtends()",
        "snippet": "  public void testLateExtends() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.foo = function() {};\\n\" +\n        \"/** @constructor */function Bar() {}\\n\" +\n        \"goog.inherits(Foo, Bar);\\n\",\n        \"Missing @extends tag on type Foo\");\n  }\n",
        "begin_line": 2769,
        "end_line": 2777,
        "comment": "",
        "child_ranges": [
            "(line 2770,col 5)-(line 2776,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMatch()",
        "snippet": "  public void testSuperclassMatch() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\");\n  }\n",
        "begin_line": 2779,
        "end_line": 2785,
        "comment": "",
        "child_ranges": [
            "(line 2780,col 5)-(line 2780,col 76)",
            "(line 2781,col 5)-(line 2784,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMatchWithMixin()",
        "snippet": "  public void testSuperclassMatchWithMixin() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor */ var Baz = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.mixin = function(y){};\" +\n        \"Bar.inherits(Foo);\\n\" +\n        \"Bar.mixin(Baz);\\n\");\n  }\n",
        "begin_line": 2787,
        "end_line": 2796,
        "comment": "",
        "child_ranges": [
            "(line 2788,col 5)-(line 2788,col 76)",
            "(line 2789,col 5)-(line 2795,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMismatch1()",
        "snippet": "  public void testSuperclassMismatch1() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Object */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 2798,
        "end_line": 2805,
        "comment": "",
        "child_ranges": [
            "(line 2799,col 5)-(line 2799,col 76)",
            "(line 2800,col 5)-(line 2804,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMismatch2()",
        "snippet": "  public void testSuperclassMismatch2() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function(){};\\n\" +\n        \"/** @constructor */ var Bar = function(){};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 2807,
        "end_line": 2814,
        "comment": "",
        "child_ranges": [
            "(line 2808,col 5)-(line 2808,col 76)",
            "(line 2809,col 5)-(line 2813,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperClassDefinedAfterSubClass1()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass1() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\");\n  }\n",
        "begin_line": 2816,
        "end_line": 2823,
        "comment": "",
        "child_ranges": [
            "(line 2817,col 5)-(line 2822,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperClassDefinedAfterSubClass2()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass2() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\" +\n        \"/** @constructor */ function Base() {}\");\n  }\n",
        "begin_line": 2825,
        "end_line": 2832,
        "comment": "",
        "child_ranges": [
            "(line 2826,col 5)-(line 2831,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDirectPrototypeAssignment1()",
        "snippet": "  public void testDirectPrototypeAssignment1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"Base.prototype.foo = 3;\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"/** @return {string} */ function foo() { return (new A).foo; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2834,
        "end_line": 2844,
        "comment": "",
        "child_ranges": [
            "(line 2835,col 5)-(line 2843,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDirectPrototypeAssignment2()",
        "snippet": "  public void testDirectPrototypeAssignment2() throws Exception {\n    // This ensures that we don't attach property 'foo' onto the Base\n    // instance object.\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ function foo() { return (new Base).foo; }\");\n  }\n",
        "begin_line": 2846,
        "end_line": 2855,
        "comment": "",
        "child_ranges": [
            "(line 2849,col 5)-(line 2854,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodImplements1()",
        "snippet": "  public void testGoodImplements1() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\");\n  }\n",
        "begin_line": 2857,
        "end_line": 2860,
        "comment": "",
        "child_ranges": [
            "(line 2858,col 5)-(line 2859,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodImplements2()",
        "snippet": "  public void testGoodImplements2() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {Base1}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 2862,
        "end_line": 2869,
        "comment": "",
        "child_ranges": [
            "(line 2863,col 5)-(line 2868,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplements1()",
        "snippet": "  public void testBadImplements1() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {nonExistent}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 2871,
        "end_line": 2879,
        "comment": "",
        "child_ranges": [
            "(line 2872,col 5)-(line 2878,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplements2()",
        "snippet": "  public void testBadImplements2() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n */function f() {}\",\n        \"@implements used without @constructor or @interface for f\");\n  }\n",
        "begin_line": 2881,
        "end_line": 2885,
        "comment": "",
        "child_ranges": [
            "(line 2882,col 5)-(line 2884,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplements3()",
        "snippet": "  public void testBadImplements3() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @interface */function f() {}\",\n        \"f cannot implement this type; an interface can only extend, \" +\n        \"but not implement interfaces\");\n  }\n",
        "begin_line": 2887,
        "end_line": 2892,
        "comment": "",
        "child_ranges": [
            "(line 2888,col 5)-(line 2891,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {B}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 2894,
        "end_line": 2900,
        "comment": "",
        "child_ranges": [
            "(line 2895,col 5)-(line 2899,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends1()",
        "snippet": "  public void testBadInterfaceExtends1() throws Exception {\n    testTypes(\"/** @interface \\n * @extends {nonExistent} */function A() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 2902,
        "end_line": 2905,
        "comment": "",
        "child_ranges": [
            "(line 2903,col 5)-(line 2904,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends2()",
        "snippet": "  public void testBadInterfaceExtends2() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; a constructor can only extend objects \" +\n        \"and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 2907,
        "end_line": 2912,
        "comment": "",
        "child_ranges": [
            "(line 2908,col 5)-(line 2911,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends3()",
        "snippet": "  public void testBadInterfaceExtends3() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; a constructor can only extend objects \" +\n        \"and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 2914,
        "end_line": 2919,
        "comment": "",
        "child_ranges": [
            "(line 2915,col 5)-(line 2918,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends4()",
        "snippet": "  public void testBadInterfaceExtends4() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 2921,
        "end_line": 2928,
        "comment": "",
        "child_ranges": [
            "(line 2925,col 5)-(line 2927,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends5()",
        "snippet": "  public void testBadInterfaceExtends5() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 2930,
        "end_line": 2937,
        "comment": "",
        "child_ranges": [
            "(line 2934,col 5)-(line 2936,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplementsAConstructor()",
        "snippet": "  public void testBadImplementsAConstructor() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n * @implements {A} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 2939,
        "end_line": 2943,
        "comment": "",
        "child_ranges": [
            "(line 2940,col 5)-(line 2942,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplementsNonInterfaceType()",
        "snippet": "  public void testBadImplementsNonInterfaceType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {Boolean} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 2945,
        "end_line": 2948,
        "comment": "",
        "child_ranges": [
            "(line 2946,col 5)-(line 2947,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplementsNonObjectType()",
        "snippet": "  public void testBadImplementsNonObjectType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {string} */function S() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 2950,
        "end_line": 2953,
        "comment": "",
        "child_ranges": [
            "(line 2951,col 5)-(line 2952,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment1()",
        "snippet": "  public void testInterfaceAssignment1() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\");\n  }\n",
        "begin_line": 2955,
        "end_line": 2960,
        "comment": "",
        "child_ranges": [
            "(line 2956,col 5)-(line 2959,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment2()",
        "snippet": "  public void testInterfaceAssignment2() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\",\n        \"initializing variable\\n\" +\n        \"found   : T\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 2962,
        "end_line": 2970,
        "comment": "",
        "child_ranges": [
            "(line 2963,col 5)-(line 2969,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment3()",
        "snippet": "  public void testInterfaceAssignment3() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I|number} */var i = t;\");\n  }\n",
        "begin_line": 2972,
        "end_line": 2977,
        "comment": "",
        "child_ranges": [
            "(line 2973,col 5)-(line 2976,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment4()",
        "snippet": "  public void testInterfaceAssignment4() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1|I2} */var i = t;\");\n  }\n",
        "begin_line": 2979,
        "end_line": 2985,
        "comment": "",
        "child_ranges": [
            "(line 2980,col 5)-(line 2984,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment5()",
        "snippet": "  public void testInterfaceAssignment5() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1}\\n@implements {I2}*/\" +\n        \"var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\");\n  }\n",
        "begin_line": 2987,
        "end_line": 2995,
        "comment": "",
        "child_ranges": [
            "(line 2988,col 5)-(line 2994,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment6()",
        "snippet": "  public void testInterfaceAssignment6() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"/** @type {!I1} */var i1 = new T();\\n\" +\n        \"/** @type {!I2} */var i2 = i1;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : I1\\n\" +\n        \"required: I2\");\n  }\n",
        "begin_line": 2997,
        "end_line": 3006,
        "comment": "",
        "child_ranges": [
            "(line 2998,col 5)-(line 3005,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment7()",
        "snippet": "  public void testInterfaceAssignment7() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface\\n@extends {I1}*/var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\" +\n        \"i1 = i2;\\n\");\n  }\n",
        "begin_line": 3008,
        "end_line": 3016,
        "comment": "",
        "child_ranges": [
            "(line 3009,col 5)-(line 3015,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment8()",
        "snippet": "  public void testInterfaceAssignment8() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @type {I} */var i;\\n\" +\n        \"/** @type {Object} */var o = i;\");\n  }\n",
        "begin_line": 3018,
        "end_line": 3022,
        "comment": "",
        "child_ranges": [
            "(line 3019,col 5)-(line 3021,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment9()",
        "snippet": "  public void testInterfaceAssignment9() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @return {I?} */function f() { return null; }\\n\" +\n        \"/** @type {!I} */var i = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I|null|undefined)\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3024,
        "end_line": 3031,
        "comment": "",
        "child_ranges": [
            "(line 3025,col 5)-(line 3030,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment10()",
        "snippet": "  public void testInterfaceAssignment10() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2} */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3033,
        "end_line": 3042,
        "comment": "",
        "child_ranges": [
            "(line 3034,col 5)-(line 3041,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment11()",
        "snippet": "  public void testInterfaceAssignment11() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2|!T} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2|T)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3044,
        "end_line": 3053,
        "comment": "",
        "child_ranges": [
            "(line 3045,col 5)-(line 3052,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment12()",
        "snippet": "  public void testInterfaceAssignment12() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n              \"/** @constructor\\n@implements{I}*/var T1 = function() {};\\n\" +\n              \"/** @constructor\\n@extends {T1}*/var T2 = function() {};\\n\" +\n              \"/** @return {I} */function f() { return new T2(); }\");\n  }\n",
        "begin_line": 3055,
        "end_line": 3060,
        "comment": "",
        "child_ranges": [
            "(line 3056,col 5)-(line 3059,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment13()",
        "snippet": "  public void testInterfaceAssignment13() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I}*/var T = function() {};\\n\" +\n        \"/** @constructor */function Super() {};\\n\" +\n        \"/** @return {I} */Super.prototype.foo = \" +\n        \"function() { return new T(); };\\n\" +\n        \"/** @constructor\\n@extends {Super} */function Sub() {}\\n\" +\n        \"/** @override\\n@return {T} */Sub.prototype.foo = \" +\n        \"function() { return new T(); };\\n\");\n  }\n",
        "begin_line": 3062,
        "end_line": 3071,
        "comment": "",
        "child_ranges": [
            "(line 3063,col 5)-(line 3070,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetprop1()",
        "snippet": "  public void testGetprop1() throws Exception {\n    testTypes(\"/** @return {void}*/function foo(){foo().bar;}\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3073,
        "end_line": 3078,
        "comment": "",
        "child_ranges": [
            "(line 3074,col 5)-(line 3077,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess1()",
        "snippet": "  public void testArrayAccess1() throws Exception {\n    testTypes(\"var a = []; var b = a['hi'];\");\n  }\n",
        "begin_line": 3080,
        "end_line": 3082,
        "comment": "",
        "child_ranges": [
            "(line 3081,col 5)-(line 3081,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess2()",
        "snippet": "  public void testArrayAccess2() throws Exception {\n    testTypes(\"var a = []; var b = a[[1,2]];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3084,
        "end_line": 3089,
        "comment": "",
        "child_ranges": [
            "(line 3085,col 5)-(line 3088,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess3()",
        "snippet": "  public void testArrayAccess3() throws Exception {\n    testTypes(\"var bar = [];\" +\n        \"/** @return {void} */function baz(){};\" +\n        \"var foo = bar[baz()];\",\n        \"array access\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3091,
        "end_line": 3098,
        "comment": "",
        "child_ranges": [
            "(line 3092,col 5)-(line 3097,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess4()",
        "snippet": "  public void testArrayAccess4() throws Exception {\n    testTypes(\"/**@return {!Array}*/function foo(){};var bar = foo()[foo()];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3100,
        "end_line": 3105,
        "comment": "",
        "child_ranges": [
            "(line 3101,col 5)-(line 3104,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess6()",
        "snippet": "  public void testArrayAccess6() throws Exception {\n    testTypes(\"var bar = null[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3107,
        "end_line": 3112,
        "comment": "",
        "child_ranges": [
            "(line 3108,col 5)-(line 3111,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess7()",
        "snippet": "  public void testArrayAccess7() throws Exception {\n    testTypes(\"var bar = void 0; bar[0];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3114,
        "end_line": 3119,
        "comment": "",
        "child_ranges": [
            "(line 3115,col 5)-(line 3118,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess8()",
        "snippet": "  public void testArrayAccess8() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar[0]; bar[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3121,
        "end_line": 3128,
        "comment": "",
        "child_ranges": [
            "(line 3124,col 5)-(line 3127,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess()",
        "snippet": "  public void testPropAccess() throws Exception {\n    testTypes(\"/** @param {*} x */var f = function(x) {\\n\" +\n        \"var o = String(x);\\n\" +\n        \"if (typeof o['a'] != 'undefined') { return o['a']; }\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 3130,
        "end_line": 3136,
        "comment": "",
        "child_ranges": [
            "(line 3131,col 5)-(line 3135,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess2()",
        "snippet": "  public void testPropAccess2() throws Exception {\n    testTypes(\"var bar = void 0; bar.baz;\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3138,
        "end_line": 3143,
        "comment": "",
        "child_ranges": [
            "(line 3139,col 5)-(line 3142,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess3()",
        "snippet": "  public void testPropAccess3() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar.baz; bar.bax;\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3145,
        "end_line": 3152,
        "comment": "",
        "child_ranges": [
            "(line 3148,col 5)-(line 3151,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess4()",
        "snippet": "  public void testPropAccess4() throws Exception {\n    testTypes(\"/** @param {*} x */ function f(x) { return x['hi']; }\");\n  }\n",
        "begin_line": 3154,
        "end_line": 3156,
        "comment": "",
        "child_ranges": [
            "(line 3155,col 5)-(line 3155,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase1()",
        "snippet": "  public void testSwitchCase1() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type string*/var b;\" +\n        \"switch(a){case b:;}\",\n        \"case expression doesn't match switch\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3158,
        "end_line": 3165,
        "comment": "",
        "child_ranges": [
            "(line 3159,col 5)-(line 3164,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase2()",
        "snippet": "  public void testSwitchCase2() throws Exception {\n    testTypes(\"var a = null; switch (typeof a) { case 'foo': }\");\n  }\n",
        "begin_line": 3167,
        "end_line": 3169,
        "comment": "",
        "child_ranges": [
            "(line 3168,col 5)-(line 3168,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar1()",
        "snippet": "  public void testVar1() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @type {(string,null)} */var a = null\");\n\n    assertEquals(createUnionType(STRING_TYPE, NULL_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3171,
        "end_line": 3177,
        "comment": "",
        "child_ranges": [
            "(line 3172,col 5)-(line 3173,col 79)",
            "(line 3175,col 5)-(line 3176,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar2()",
        "snippet": "  public void testVar2() throws Exception {\n    testTypes(\"/** @type {Function} */ var a = function(){}\");\n  }\n",
        "begin_line": 3179,
        "end_line": 3181,
        "comment": "",
        "child_ranges": [
            "(line 3180,col 5)-(line 3180,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar3()",
        "snippet": "  public void testVar3() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = 3;\");\n\n    assertEquals(NUMBER_TYPE, p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3183,
        "end_line": 3187,
        "comment": "",
        "child_ranges": [
            "(line 3184,col 5)-(line 3184,col 65)",
            "(line 3186,col 5)-(line 3186,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar4()",
        "snippet": "  public void testVar4() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var a = 3; a = 'string';\");\n\n    assertEquals(createUnionType(STRING_TYPE, NUMBER_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3189,
        "end_line": 3195,
        "comment": "",
        "child_ranges": [
            "(line 3190,col 5)-(line 3191,col 36)",
            "(line 3193,col 5)-(line 3194,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar5()",
        "snippet": "  public void testVar5() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type string */goog.foo = 'hello';\" +\n        \"/** @type number */var a = goog.foo;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3197,
        "end_line": 3204,
        "comment": "",
        "child_ranges": [
            "(line 3198,col 5)-(line 3203,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar6()",
        "snippet": "  public void testVar6() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  return function() {\" +\n        \"    /** @type {!Date} */\" +\n        \"    var a = 7;\" +\n        \"  };\" +\n        \"}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3206,
        "end_line": 3217,
        "comment": "",
        "child_ranges": [
            "(line 3207,col 5)-(line 3216,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar7()",
        "snippet": "  public void testVar7() throws Exception {\n    testTypes(\"/** @type number */var a, b;\",\n        \"declaration of multiple variables with shared type information\");\n  }\n",
        "begin_line": 3219,
        "end_line": 3222,
        "comment": "",
        "child_ranges": [
            "(line 3220,col 5)-(line 3221,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar8()",
        "snippet": "  public void testVar8() throws Exception {\n    testTypes(\"var a, b;\");\n  }\n",
        "begin_line": 3224,
        "end_line": 3226,
        "comment": "",
        "child_ranges": [
            "(line 3225,col 5)-(line 3225,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar9()",
        "snippet": "  public void testVar9() throws Exception {\n    testTypes(\"/** @enum */var a;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 3228,
        "end_line": 3231,
        "comment": "",
        "child_ranges": [
            "(line 3229,col 5)-(line 3230,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar10()",
        "snippet": "  public void testVar10() throws Exception {\n    testTypes(\"/** @type !Number */var foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3233,
        "end_line": 3238,
        "comment": "",
        "child_ranges": [
            "(line 3234,col 5)-(line 3237,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar11()",
        "snippet": "  public void testVar11() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3240,
        "end_line": 3245,
        "comment": "",
        "child_ranges": [
            "(line 3241,col 5)-(line 3244,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar12()",
        "snippet": "  public void testVar12() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc', \" +\n        \"/** @type !RegExp */bar = 5;\",\n        new String[] {\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: RegExp\"});\n  }\n",
        "begin_line": 3247,
        "end_line": 3257,
        "comment": "",
        "child_ranges": [
            "(line 3248,col 5)-(line 3256,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar13()",
        "snippet": "  public void testVar13() throws Exception {\n    // this caused an NPE\n    testTypes(\"var /** @type number */a,a;\");\n  }\n",
        "begin_line": 3259,
        "end_line": 3262,
        "comment": "",
        "child_ranges": [
            "(line 3261,col 5)-(line 3261,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar14()",
        "snippet": "  public void testVar14() throws Exception {\n    testTypes(\"/** @return {number} */ function f() { var x; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3264,
        "end_line": 3269,
        "comment": "",
        "child_ranges": [
            "(line 3265,col 5)-(line 3268,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar15()",
        "snippet": "  public void testVar15() throws Exception {\n    testTypes(\"/** @return {number} */\" +\n        \"function f() { var x = x || {}; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3271,
        "end_line": 3277,
        "comment": "",
        "child_ranges": [
            "(line 3272,col 5)-(line 3276,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign1()",
        "snippet": "  public void testAssign1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3279,
        "end_line": 3285,
        "comment": "",
        "child_ranges": [
            "(line 3280,col 5)-(line 3284,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign2()",
        "snippet": "  public void testAssign2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3287,
        "end_line": 3294,
        "comment": "",
        "child_ranges": [
            "(line 3288,col 5)-(line 3293,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign3()",
        "snippet": "  public void testAssign3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 4;\");\n  }\n",
        "begin_line": 3296,
        "end_line": 3300,
        "comment": "",
        "child_ranges": [
            "(line 3297,col 5)-(line 3299,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign4()",
        "snippet": "  public void testAssign4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"goog.foo = 3;\" +\n        \"goog.foo = 'hello';\");\n  }\n",
        "begin_line": 3302,
        "end_line": 3306,
        "comment": "",
        "child_ranges": [
            "(line 3303,col 5)-(line 3305,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssignInference()",
        "snippet": "  public void testAssignInference() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {Array} x\" +\n        \" * @return {number}\" +\n        \" */\" +\n        \"function f(x) {\" +\n        \"  var y = null;\" +\n        \"  y = x[0];\" +\n        \"  if (y == null) { return 4; } else { return 6; }\" +\n        \"}\");\n  }\n",
        "begin_line": 3308,
        "end_line": 3319,
        "comment": "",
        "child_ranges": [
            "(line 3309,col 5)-(line 3318,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr1()",
        "snippet": "  public void testOr1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b || undefined;\");\n  }\n",
        "begin_line": 3321,
        "end_line": 3325,
        "comment": "",
        "child_ranges": [
            "(line 3322,col 5)-(line 3324,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr2()",
        "snippet": "  public void testOr2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b || undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3327,
        "end_line": 3334,
        "comment": "",
        "child_ranges": [
            "(line 3328,col 5)-(line 3333,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr3()",
        "snippet": "  public void testOr3() throws Exception {\n    testTypes(\"/** @type {(number, undefined)} */var a;\" +\n        \"/** @type number */var c = a || 3;\");\n  }\n",
        "begin_line": 3336,
        "end_line": 3339,
        "comment": "",
        "child_ranges": [
            "(line 3337,col 5)-(line 3338,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr4()",
        "snippet": "  public void testOr4() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=null || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3346,
        "end_line": 3351,
        "comment": "\n   * Test that type inference continues with the right side,\n   * when no short-circuiting is possible.\n   * See bugid 1205387 for more details.\n   ",
        "child_ranges": [
            "(line 3347,col 6)-(line 3350,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr5()",
        "snippet": "  public void testOr5() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=undefined || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3356,
        "end_line": 3361,
        "comment": "\n   * @see #testOr4()\n   ",
        "child_ranges": [
            "(line 3357,col 6)-(line 3360,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd1()",
        "snippet": "  public void testAnd1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b && undefined;\");\n  }\n",
        "begin_line": 3363,
        "end_line": 3367,
        "comment": "",
        "child_ranges": [
            "(line 3364,col 5)-(line 3366,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd2()",
        "snippet": "  public void testAnd2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3369,
        "end_line": 3376,
        "comment": "",
        "child_ranges": [
            "(line 3370,col 5)-(line 3375,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd3()",
        "snippet": "  public void testAnd3() throws Exception {\n    testTypes(\"/** @type {(!Array, undefined)} */var a;\" +\n        \"/** @type number */var c = a && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3378,
        "end_line": 3384,
        "comment": "",
        "child_ranges": [
            "(line 3379,col 5)-(line 3383,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd4()",
        "snippet": "  public void testAnd4() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type null */var x; /** @type {number?} */var y;\\n\" +\n        \"if (x && y) { f(y) }\");\n  }\n",
        "begin_line": 3386,
        "end_line": 3390,
        "comment": "",
        "child_ranges": [
            "(line 3387,col 5)-(line 3389,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd5()",
        "snippet": "  public void testAnd5() throws Exception {\n    testTypes(\"/** @param {number} x\\n@param {string} y*/function f(x,y){};\\n\" +\n        \"/** @type {number?} */var x; /** @type {string?} */var y;\\n\" +\n        \"if (x && y) { f(x, y) }\");\n  }\n",
        "begin_line": 3392,
        "end_line": 3396,
        "comment": "",
        "child_ranges": [
            "(line 3393,col 5)-(line 3395,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd6()",
        "snippet": "  public void testAnd6() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type {number|undefined} */var x;\\n\" +\n        \"if (x && f(x)) { f(x) }\");\n  }\n",
        "begin_line": 3398,
        "end_line": 3402,
        "comment": "",
        "child_ranges": [
            "(line 3399,col 5)-(line 3401,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd7()",
        "snippet": "  public void testAnd7() throws Exception {\n    // TODO(user): a deterministic warning should be generated for this\n    // case since x && x is always false. The implementation of this requires\n    // a more precise handling of a null value within a variable's type.\n    // Currently, a null value defaults to ? which passes every check.\n    testTypes(\"/** @type null */var x; if (x && x) {}\");\n  }\n",
        "begin_line": 3404,
        "end_line": 3410,
        "comment": "",
        "child_ranges": [
            "(line 3409,col 5)-(line 3409,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHook()",
        "snippet": "  public void testHook() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo()?a:b; }\");\n  }\n",
        "begin_line": 3412,
        "end_line": 3414,
        "comment": "",
        "child_ranges": [
            "(line 3413,col 5)-(line 3413,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType1()",
        "snippet": "  public void testHookRestrictsType1() throws Exception {\n    testTypes(\"/** @return {(string,null)} */\" +\n        \"function f() { return null;}\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */\" +\n        \"var b = a ? a : 'default';\");\n  }\n",
        "begin_line": 3416,
        "end_line": 3422,
        "comment": "",
        "child_ranges": [
            "(line 3417,col 5)-(line 3421,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType2()",
        "snippet": "  public void testHookRestrictsType2() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a = null;\" +\n        \"/** @type (null|undefined) */\" +\n        \"var b = a ? null : a;\");\n  }\n",
        "begin_line": 3424,
        "end_line": 3429,
        "comment": "",
        "child_ranges": [
            "(line 3425,col 5)-(line 3428,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType3()",
        "snippet": "  public void testHookRestrictsType3() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a;\" +\n        \"/** @type (null|undefined) */\" +\n        \"var b = (!a) ? a : null;\");\n  }\n",
        "begin_line": 3431,
        "end_line": 3436,
        "comment": "",
        "child_ranges": [
            "(line 3432,col 5)-(line 3435,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType4()",
        "snippet": "  public void testHookRestrictsType4() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type boolean */\" +\n        \"var b = a != null ? a : true;\");\n  }\n",
        "begin_line": 3438,
        "end_line": 3443,
        "comment": "",
        "child_ranges": [
            "(line 3439,col 5)-(line 3442,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType5()",
        "snippet": "  public void testHookRestrictsType5() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {(undefined)} */\" +\n        \"var b = a == null ? a : undefined;\");\n  }\n",
        "begin_line": 3445,
        "end_line": 3450,
        "comment": "",
        "child_ranges": [
            "(line 3446,col 5)-(line 3449,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType6()",
        "snippet": "  public void testHookRestrictsType6() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == null ? 5 : a;\");\n  }\n",
        "begin_line": 3452,
        "end_line": 3457,
        "comment": "",
        "child_ranges": [
            "(line 3453,col 5)-(line 3456,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType7()",
        "snippet": "  public void testHookRestrictsType7() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == undefined ? 5 : a;\");\n  }\n",
        "begin_line": 3459,
        "end_line": 3464,
        "comment": "",
        "child_ranges": [
            "(line 3460,col 5)-(line 3463,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWhileRestrictsType1()",
        "snippet": "  public void testWhileRestrictsType1() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {number?} x */\\n\" +\n        \"function f(x) {\\n\" +\n        \"while (x) {\\n\" +\n        \"if (g(x)) { x = 1; }\\n\" +\n        \"x = x-1;\\n}\\n}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 3466,
        "end_line": 3476,
        "comment": "",
        "child_ranges": [
            "(line 3467,col 5)-(line 3475,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWhileRestrictsType2()",
        "snippet": "  public void testWhileRestrictsType2() throws Exception {\n    testTypes(\"/** @param {number?} x\\n@return {number}*/\\n\" +\n        \"function f(x) {\\n/** @type {number} */var y = 0;\" +\n        \"while (x) {\\n\" +\n        \"y = x;\\n\" +\n        \"x = x-1;\\n}\\n\" +\n        \"return y;}\");\n  }\n",
        "begin_line": 3478,
        "end_line": 3485,
        "comment": "",
        "child_ranges": [
            "(line 3479,col 5)-(line 3484,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions1()",
        "snippet": "  public void testHigherOrderFunctions1() throws Exception {\n    testTypes(\n        \"/** @type {function(number)} */var f;\" +\n        \"f(true);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3487,
        "end_line": 3494,
        "comment": "",
        "child_ranges": [
            "(line 3488,col 5)-(line 3493,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions2()",
        "snippet": "  public void testHigherOrderFunctions2() throws Exception {\n    testTypes(\n        \"/** @type {function():!Date} */var f;\" +\n        \"/** @type boolean */var a = f();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 3496,
        "end_line": 3503,
        "comment": "",
        "child_ranges": [
            "(line 3497,col 5)-(line 3502,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions3()",
        "snippet": "  public void testHigherOrderFunctions3() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 3505,
        "end_line": 3509,
        "comment": "",
        "child_ranges": [
            "(line 3506,col 5)-(line 3508,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions4()",
        "snippet": "  public void testHigherOrderFunctions4() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error,...[number]):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 3511,
        "end_line": 3515,
        "comment": "",
        "child_ranges": [
            "(line 3512,col 5)-(line 3514,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias1()",
        "snippet": "  public void testConstructorAlias1() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3517,
        "end_line": 3527,
        "comment": "",
        "child_ranges": [
            "(line 3518,col 5)-(line 3526,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias2()",
        "snippet": "  public void testConstructorAlias2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3529,
        "end_line": 3539,
        "comment": "",
        "child_ranges": [
            "(line 3530,col 5)-(line 3538,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias3()",
        "snippet": "  public void testConstructorAlias3() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3541,
        "end_line": 3551,
        "comment": "",
        "child_ranges": [
            "(line 3542,col 5)-(line 3550,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias4()",
        "snippet": "  public void testConstructorAlias4() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3553,
        "end_line": 3563,
        "comment": "",
        "child_ranges": [
            "(line 3554,col 5)-(line 3562,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias5()",
        "snippet": "  public void testConstructorAlias5() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {FooAlias} */ function foo() { \" +\n        \"  return new Foo(); }\");\n  }\n",
        "begin_line": 3565,
        "end_line": 3571,
        "comment": "",
        "child_ranges": [
            "(line 3566,col 5)-(line 3570,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias6()",
        "snippet": "  public void testConstructorAlias6() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {Foo} */ function foo() { \" +\n        \"  return new FooAlias(); }\");\n  }\n",
        "begin_line": 3573,
        "end_line": 3579,
        "comment": "",
        "child_ranges": [
            "(line 3574,col 5)-(line 3578,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias7()",
        "snippet": "  public void testConstructorAlias7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3581,
        "end_line": 3591,
        "comment": "",
        "child_ranges": [
            "(line 3582,col 5)-(line 3590,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias8()",
        "snippet": "  public void testConstructorAlias8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3593,
        "end_line": 3605,
        "comment": "",
        "child_ranges": [
            "(line 3594,col 5)-(line 3604,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias9()",
        "snippet": "  public void testConstructorAlias9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3607,
        "end_line": 3618,
        "comment": "",
        "child_ranges": [
            "(line 3608,col 5)-(line 3617,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias10()",
        "snippet": "  public void testConstructorAlias10() throws Exception {\n    testTypes(\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3620,
        "end_line": 3630,
        "comment": "",
        "child_ranges": [
            "(line 3621,col 5)-(line 3629,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure1()",
        "snippet": "  public void testClosure1() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDef(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3632,
        "end_line": 3639,
        "comment": "",
        "child_ranges": [
            "(line 3633,col 5)-(line 3638,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure2()",
        "snippet": "  public void testClosure2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3641,
        "end_line": 3648,
        "comment": "",
        "child_ranges": [
            "(line 3642,col 5)-(line 3647,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure3()",
        "snippet": "  public void testClosure3() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDefAndNotNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3650,
        "end_line": 3657,
        "comment": "",
        "child_ranges": [
            "(line 3651,col 5)-(line 3656,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure4()",
        "snippet": "  public void testClosure4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDef(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3659,
        "end_line": 3666,
        "comment": "",
        "child_ranges": [
            "(line 3660,col 5)-(line 3665,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure5()",
        "snippet": "  public void testClosure5() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3668,
        "end_line": 3675,
        "comment": "",
        "child_ranges": [
            "(line 3669,col 5)-(line 3674,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure6()",
        "snippet": "  public void testClosure6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDefAndNotNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3677,
        "end_line": 3684,
        "comment": "",
        "child_ranges": [
            "(line 3678,col 5)-(line 3683,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn1()",
        "snippet": "  public void testReturn1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3686,
        "end_line": 3691,
        "comment": "",
        "child_ranges": [
            "(line 3687,col 5)-(line 3690,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn2()",
        "snippet": "  public void testReturn2() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3693,
        "end_line": 3698,
        "comment": "",
        "child_ranges": [
            "(line 3694,col 5)-(line 3697,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn3()",
        "snippet": "  public void testReturn3() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return 'abc'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3700,
        "end_line": 3705,
        "comment": "",
        "child_ranges": [
            "(line 3701,col 5)-(line 3704,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn4()",
        "snippet": "  public void testReturn4() throws Exception {\n    testTypes(\"/**@return {!Number}\\n*/\\n function a(){return new Array();}\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3707,
        "end_line": 3712,
        "comment": "",
        "child_ranges": [
            "(line 3708,col 5)-(line 3711,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn5()",
        "snippet": "  public void testReturn5() throws Exception {\n    testTypes(\"/** @param {number} n\\n\" +\n        \"@constructor */function n(n){return};\");\n  }\n",
        "begin_line": 3714,
        "end_line": 3717,
        "comment": "",
        "child_ranges": [
            "(line 3715,col 5)-(line 3716,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn6()",
        "snippet": "  public void testReturn6() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(opt_a) { return opt_a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3719,
        "end_line": 3726,
        "comment": "",
        "child_ranges": [
            "(line 3720,col 5)-(line 3725,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn7()",
        "snippet": "  public void testReturn7() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 3728,
        "end_line": 3735,
        "comment": "",
        "child_ranges": [
            "(line 3729,col 5)-(line 3734,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn8()",
        "snippet": "  public void testReturn8() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.prototype.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 3737,
        "end_line": 3744,
        "comment": "",
        "child_ranges": [
            "(line 3738,col 5)-(line 3743,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis1()",
        "snippet": "  public void testThis1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"/** @return {number} */goog.A.prototype.n = \" +\n        \"  function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3746,
        "end_line": 3754,
        "comment": "",
        "child_ranges": [
            "(line 3747,col 5)-(line 3753,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis2()",
        "snippet": "  public void testThis2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3756,
        "end_line": 3766,
        "comment": "",
        "child_ranges": [
            "(line 3757,col 5)-(line 3765,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis3()",
        "snippet": "  public void testThis3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"  this.foo = 5;\" +\n        \"};\");\n  }\n",
        "begin_line": 3768,
        "end_line": 3774,
        "comment": "",
        "child_ranges": [
            "(line 3769,col 5)-(line 3773,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis4()",
        "snippet": "  public void testThis4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */goog.A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3776,
        "end_line": 3786,
        "comment": "",
        "child_ranges": [
            "(line 3777,col 5)-(line 3785,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis5()",
        "snippet": "  public void testThis5() throws Exception {\n    testTypes(\"/** @this Date\\n@return {number}*/function h() { return this }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3788,
        "end_line": 3793,
        "comment": "",
        "child_ranges": [
            "(line 3789,col 5)-(line 3792,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis6()",
        "snippet": "  public void testThis6() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor\\n@return {!Date} */\" +\n        \"goog.A = function(){ return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3795,
        "end_line": 3802,
        "comment": "",
        "child_ranges": [
            "(line 3796,col 5)-(line 3801,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis7()",
        "snippet": "  public void testThis7() throws Exception {\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"/** @return {number} */A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3804,
        "end_line": 3810,
        "comment": "",
        "child_ranges": [
            "(line 3805,col 5)-(line 3809,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis8()",
        "snippet": "  public void testThis8() throws Exception {\n    testTypes(\"/** @constructor */function A(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3812,
        "end_line": 3821,
        "comment": "",
        "child_ranges": [
            "(line 3813,col 5)-(line 3820,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis9()",
        "snippet": "  public void testThis9() throws Exception {\n    // In A.bar, the type of {@code this} is unknown.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ A.bar = function() { return this.foo; };\");\n  }\n",
        "begin_line": 3823,
        "end_line": 3828,
        "comment": "",
        "child_ranges": [
            "(line 3825,col 5)-(line 3827,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis10()",
        "snippet": "  public void testThis10() throws Exception {\n    // In A.bar, the type of {@code this} is inferred from the @this tag.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @this {A}\\n@return {string} */\" +\n        \"A.bar = function() { return this.foo; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3830,
        "end_line": 3839,
        "comment": "",
        "child_ranges": [
            "(line 3832,col 5)-(line 3838,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis1()",
        "snippet": "  public void testGlobalThis1() throws Exception {\n    testTypes(\"/** @constructor */ function Window() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Window.prototype.alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of Window.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3841,
        "end_line": 3850,
        "comment": "",
        "child_ranges": [
            "(line 3842,col 5)-(line 3849,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis2()",
        "snippet": "  public void testGlobalThis2() throws Exception {\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"this.alert = 3;\" +\n        \"(new Bindow()).alert(this.alert)\");\n  }\n",
        "begin_line": 3852,
        "end_line": 3858,
        "comment": "",
        "child_ranges": [
            "(line 3853,col 5)-(line 3857,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis3()",
        "snippet": "  public void testGlobalThis3() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"function alert(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3860,
        "end_line": 3869,
        "comment": "",
        "child_ranges": [
            "(line 3861,col 5)-(line 3868,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis4()",
        "snippet": "  public void testGlobalThis4() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3871,
        "end_line": 3880,
        "comment": "",
        "child_ranges": [
            "(line 3872,col 5)-(line 3879,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis5()",
        "snippet": "  public void testGlobalThis5() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @param {string} msg */ \" +\n        \"  var alert = function(msg) {};\" +\n        \"}\" +\n        \"this.alert(3);\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 3882,
        "end_line": 3890,
        "comment": "",
        "child_ranges": [
            "(line 3883,col 5)-(line 3889,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis6()",
        "snippet": "  public void testGlobalThis6() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"var x = 3;\" +\n        \"x = 'msg';\" +\n        \"this.alert(this.x);\");\n  }\n",
        "begin_line": 3892,
        "end_line": 3899,
        "comment": "",
        "child_ranges": [
            "(line 3893,col 5)-(line 3898,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType1a()",
        "snippet": "  public void testControlFlowRestrictsType1a() throws Exception {\n    testTypes(\"/** @return {String?} */ function f() { return null; }\\n\" +\n        \"/** @type {String?} */ var a = f();\\n\" +\n        \"/** @type String */ var b = new String('foo');\\n\" +\n        \"/** @type (null|undefined) */ var c = null;\\n\" +\n        \"if (a) {\\n\" +\n        \"  b = a;\\n\" +\n        \"} else {\\n\" +\n        \"  c = a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 3901,
        "end_line": 3911,
        "comment": "",
        "child_ranges": [
            "(line 3902,col 5)-(line 3910,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType1b()",
        "snippet": "  public void testControlFlowRestrictsType1b() throws Exception {\n    testTypes(\"/** @return {!String|null} */ function f() { return null; }\\n\" +\n        \"/** @type {!String|null} */ var a = f();\\n\" +\n        \"/** @type String */ var b = new String('foo');\\n\" +\n        \"/** @type (null) */ var c = null;\\n\" +\n        \"if (a) {\\n\" +\n        \"  b = a;\\n\" +\n        \"} else {\\n\" +\n        \"  c = a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 3913,
        "end_line": 3923,
        "comment": "",
        "child_ranges": [
            "(line 3914,col 5)-(line 3922,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType1c()",
        "snippet": "  public void testControlFlowRestrictsType1c() throws Exception {\n    testTypes(\"/** @return {!String|undefined} */\\n\" +\n        \"function f() { return undefined; }\\n\" +\n        \"/** @type {!String|undefined} */ var a = f();\\n\" +\n        \"/** @type String */ var b = new String('foo');\\n\" +\n        \"/** @type undefined */ var c = undefined;\\n\" +\n        \"if (a) {\\n\" +\n        \"  b = a;\\n\" +\n        \"} else {\\n\" +\n        \"  c = a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 3925,
        "end_line": 3936,
        "comment": "",
        "child_ranges": [
            "(line 3926,col 5)-(line 3935,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType2()",
        "snippet": "  public void testControlFlowRestrictsType2() throws Exception {\n    testTypes(\"/** @return {(string,null)} */ function f() { return null; }\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */ var b = 'foo';\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 3938,
        "end_line": 3951,
        "comment": "",
        "child_ranges": [
            "(line 3939,col 5)-(line 3950,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType3()",
        "snippet": "  public void testControlFlowRestrictsType3() throws Exception {\n    testTypes(\"/** @type {(string,void)} */\" +\n        \"var a;\" +\n        \"/** @type string */\" +\n        \"var b = 'foo';\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 3953,
        "end_line": 3961,
        "comment": "",
        "child_ranges": [
            "(line 3954,col 5)-(line 3960,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType4()",
        "snippet": "  public void testControlFlowRestrictsType4() throws Exception {\n    testTypes(\"/** @param {string} a */ function f(a){}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\");\n  }\n",
        "begin_line": 3963,
        "end_line": 3967,
        "comment": "",
        "child_ranges": [
            "(line 3964,col 5)-(line 3966,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType5()",
        "snippet": "  public void testControlFlowRestrictsType5() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"a || f(a);\");\n  }\n",
        "begin_line": 3969,
        "end_line": 3973,
        "comment": "",
        "child_ranges": [
            "(line 3970,col 5)-(line 3972,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType6()",
        "snippet": "  public void testControlFlowRestrictsType6() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3975,
        "end_line": 3982,
        "comment": "",
        "child_ranges": [
            "(line 3976,col 5)-(line 3981,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType7()",
        "snippet": "  public void testControlFlowRestrictsType7() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3984,
        "end_line": 3991,
        "comment": "",
        "child_ranges": [
            "(line 3985,col 5)-(line 3990,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType8()",
        "snippet": "  public void testControlFlowRestrictsType8() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"if (a || f(a)) {}\");\n  }\n",
        "begin_line": 3993,
        "end_line": 3997,
        "comment": "",
        "child_ranges": [
            "(line 3994,col 5)-(line 3996,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType9()",
        "snippet": "  public void testControlFlowRestrictsType9() throws Exception {\n    testTypes(\"/** @param {number?} x\\n * @return {number}*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || x == 1) { return 1; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 3999,
        "end_line": 4004,
        "comment": "",
        "child_ranges": [
            "(line 4000,col 5)-(line 4003,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase3()",
        "snippet": "  public void testSwitchCase3() throws Exception {\n    testTypes(\"/** @type String */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A': }\");\n  }\n",
        "begin_line": 4006,
        "end_line": 4010,
        "comment": "",
        "child_ranges": [
            "(line 4007,col 5)-(line 4009,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase4()",
        "snippet": "  public void testSwitchCase4() throws Exception {\n    testTypes(\"/** @type {(string,Null)} */\" +\n        \"var a = 'foo';\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 4012,
        "end_line": 4016,
        "comment": "",
        "child_ranges": [
            "(line 4013,col 5)-(line 4015,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase5()",
        "snippet": "  public void testSwitchCase5() throws Exception {\n    testTypes(\"/** @type {(String,Null)} */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 4018,
        "end_line": 4022,
        "comment": "",
        "child_ranges": [
            "(line 4019,col 5)-(line 4021,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase6()",
        "snippet": "  public void testSwitchCase6() throws Exception {\n    testTypes(\"/** @type {(Number,Null)} */\" +\n        \"var a = new Number(5);\" +\n        \"switch (a) { case 5:break; case null:break; }\");\n  }\n",
        "begin_line": 4024,
        "end_line": 4028,
        "comment": "",
        "child_ranges": [
            "(line 4025,col 5)-(line 4027,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase7()",
        "snippet": "  public void testSwitchCase7() throws Exception {\n    // This really tests the inference inside the case.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (3) { case g(x.foo): return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4030,
        "end_line": 4046,
        "comment": "",
        "child_ranges": [
            "(line 4032,col 5)-(line 4045,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase8()",
        "snippet": "  public void testSwitchCase8() throws Exception {\n    // This really tests the inference inside the switch clause.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (g(x.foo)) { case 3: return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4048,
        "end_line": 4064,
        "comment": "",
        "child_ranges": [
            "(line 4050,col 5)-(line 4063,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck1()",
        "snippet": "  public void testNoTypeCheck1() throws Exception {\n    testTypes(\"/** @notypecheck */function foo() { new 4 }\");\n  }\n",
        "begin_line": 4066,
        "end_line": 4068,
        "comment": "",
        "child_ranges": [
            "(line 4067,col 5)-(line 4067,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck2()",
        "snippet": "  public void testNoTypeCheck2() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function() { new 4 }\");\n  }\n",
        "begin_line": 4070,
        "end_line": 4072,
        "comment": "",
        "child_ranges": [
            "(line 4071,col 5)-(line 4071,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck3()",
        "snippet": "  public void testNoTypeCheck3() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 4074,
        "end_line": 4076,
        "comment": "",
        "child_ranges": [
            "(line 4075,col 5)-(line 4075,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck4()",
        "snippet": "  public void testNoTypeCheck4() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function() { new 4 }\");\n  }\n",
        "begin_line": 4078,
        "end_line": 4081,
        "comment": "",
        "child_ranges": [
            "(line 4079,col 5)-(line 4080,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck5()",
        "snippet": "  public void testNoTypeCheck5() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function() { new 4 }\");\n  }\n",
        "begin_line": 4083,
        "end_line": 4086,
        "comment": "",
        "child_ranges": [
            "(line 4084,col 5)-(line 4085,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck6()",
        "snippet": "  public void testNoTypeCheck6() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 4088,
        "end_line": 4091,
        "comment": "",
        "child_ranges": [
            "(line 4089,col 5)-(line 4090,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck7()",
        "snippet": "  public void testNoTypeCheck7() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function bar() { new 4 }\");\n  }\n",
        "begin_line": 4093,
        "end_line": 4096,
        "comment": "",
        "child_ranges": [
            "(line 4094,col 5)-(line 4095,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck8()",
        "snippet": "  public void testNoTypeCheck8() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ var foo;\" +\n        \"var bar = 3; /** @param {string} x */ function f(x) {} f(bar);\");\n  }\n",
        "begin_line": 4098,
        "end_line": 4101,
        "comment": "",
        "child_ranges": [
            "(line 4099,col 5)-(line 4100,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testImplicitCast()",
        "snippet": "  public void testImplicitCast() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\",\n             \"(new Element).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 4103,
        "end_line": 4109,
        "comment": "",
        "child_ranges": [
            "(line 4104,col 5)-(line 4108,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testImplicitCastSubclassAccess()",
        "snippet": "  public void testImplicitCastSubclassAccess() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"/** @constructor \\n @extends Element */\" +\n             \"function DIVElement() {};\",\n             \"(new DIVElement).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 4111,
        "end_line": 4119,
        "comment": "",
        "child_ranges": [
            "(line 4112,col 5)-(line 4118,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testImplicitCastNotInExterns()",
        "snippet": "  public void testImplicitCastNotInExterns() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"(new Element).innerHTML = new Array();\",\n             new String[] {\n               \"Illegal annotation on innerHTML. @implicitCast may only be \" +\n               \"used in externs.\",\n               \"assignment to property innerHTML of Element\\n\" +\n               \"found   : Array\\n\" +\n               \"required: string\"\n               });\n  }\n",
        "begin_line": 4121,
        "end_line": 4134,
        "comment": "",
        "child_ranges": [
            "(line 4122,col 5)-(line 4133,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumberNode()",
        "snippet": "  public void testNumberNode() throws Exception {\n    Node n = typeCheck(Node.newNumber(0));\n\n    assertEquals(NUMBER_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4136,
        "end_line": 4140,
        "comment": "",
        "child_ranges": [
            "(line 4137,col 5)-(line 4137,col 42)",
            "(line 4139,col 5)-(line 4139,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringNode()",
        "snippet": "  public void testStringNode() throws Exception {\n    Node n = typeCheck(Node.newString(\"hello\"));\n\n    assertEquals(STRING_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4142,
        "end_line": 4146,
        "comment": "",
        "child_ranges": [
            "(line 4143,col 5)-(line 4143,col 48)",
            "(line 4145,col 5)-(line 4145,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanNodeTrue()",
        "snippet": "  public void testBooleanNodeTrue() throws Exception {\n    Node trueNode = typeCheck(new Node(Token.TRUE));\n\n    assertEquals(BOOLEAN_TYPE, trueNode.getJSType());\n  }\n",
        "begin_line": 4148,
        "end_line": 4152,
        "comment": "",
        "child_ranges": [
            "(line 4149,col 5)-(line 4149,col 52)",
            "(line 4151,col 5)-(line 4151,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanNodeFalse()",
        "snippet": "  public void testBooleanNodeFalse() throws Exception {\n    Node falseNode = typeCheck(new Node(Token.FALSE));\n\n    assertEquals(BOOLEAN_TYPE, falseNode.getJSType());\n  }\n",
        "begin_line": 4154,
        "end_line": 4158,
        "comment": "",
        "child_ranges": [
            "(line 4155,col 5)-(line 4155,col 54)",
            "(line 4157,col 5)-(line 4157,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUndefinedNode()",
        "snippet": "  public void testUndefinedNode() throws Exception {\n    Node p = new Node(Token.ADD);\n    Node n = Node.newString(Token.NAME, \"undefined\");\n    p.addChildToBack(n);\n    p.addChildToBack(Node.newNumber(5));\n    typeCheck(p);\n\n    assertEquals(VOID_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4160,
        "end_line": 4168,
        "comment": "",
        "child_ranges": [
            "(line 4161,col 5)-(line 4161,col 33)",
            "(line 4162,col 5)-(line 4162,col 53)",
            "(line 4163,col 5)-(line 4163,col 24)",
            "(line 4164,col 5)-(line 4164,col 40)",
            "(line 4165,col 5)-(line 4165,col 17)",
            "(line 4167,col 5)-(line 4167,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumberAutoboxing()",
        "snippet": "  public void testNumberAutoboxing() throws Exception {\n    testTypes(\"/** @type Number */var a = 4;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null|undefined)\");\n  }\n",
        "begin_line": 4170,
        "end_line": 4175,
        "comment": "",
        "child_ranges": [
            "(line 4171,col 5)-(line 4174,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumberUnboxing()",
        "snippet": "  public void testNumberUnboxing() throws Exception {\n    testTypes(\"/** @type number */var a = new Number(4);\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4177,
        "end_line": 4182,
        "comment": "",
        "child_ranges": [
            "(line 4178,col 5)-(line 4181,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringAutoboxing()",
        "snippet": "  public void testStringAutoboxing() throws Exception {\n    testTypes(\"/** @type String */var a = 'hello';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null|undefined)\");\n  }\n",
        "begin_line": 4184,
        "end_line": 4189,
        "comment": "",
        "child_ranges": [
            "(line 4185,col 5)-(line 4188,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringUnboxing()",
        "snippet": "  public void testStringUnboxing() throws Exception {\n    testTypes(\"/** @type string */var a = new String('hello');\",\n        \"initializing variable\\n\" +\n        \"found   : String\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4191,
        "end_line": 4196,
        "comment": "",
        "child_ranges": [
            "(line 4192,col 5)-(line 4195,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanAutoboxing()",
        "snippet": "  public void testBooleanAutoboxing() throws Exception {\n    testTypes(\"/** @type Boolean */var a = true;\",\n        \"initializing variable\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (Boolean|null|undefined)\");\n  }\n",
        "begin_line": 4198,
        "end_line": 4203,
        "comment": "",
        "child_ranges": [
            "(line 4199,col 5)-(line 4202,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanUnboxing()",
        "snippet": "  public void testBooleanUnboxing() throws Exception {\n    testTypes(\"/** @type boolean */var a = new Boolean(false);\",\n        \"initializing variable\\n\" +\n        \"found   : Boolean\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4205,
        "end_line": 4210,
        "comment": "",
        "child_ranges": [
            "(line 4206,col 5)-(line 4209,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIssue86()",
        "snippet": "  public void testIssue86() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.get = function(){};\" +\n        \"/** @constructor \\n * @implements {I} */ function F() {}\" +\n        \"/** @override */ F.prototype.get = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4212,
        "end_line": 4221,
        "comment": "",
        "child_ranges": [
            "(line 4213,col 5)-(line 4220,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIssue124()",
        "snippet": "  public void testIssue124() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = 1;\" +\n        \"}\");\n  }\n",
        "begin_line": 4223,
        "end_line": 4230,
        "comment": "",
        "child_ranges": [
            "(line 4224,col 5)-(line 4229,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIssue124b()",
        "snippet": "  public void testIssue124b() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = undefined;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|undefined)\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 4232,
        "end_line": 4242,
        "comment": "",
        "child_ranges": [
            "(line 4233,col 5)-(line 4241,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug592170()",
        "snippet": "  public void testBug592170() throws Exception {\n    testTypes(\n        \"/** @param {Function} opt_f ... */\" +\n        \"function foo(opt_f) {\" +\n        \"  /** @type {Function} */\" +\n        \"  return opt_f || function () {};\" +\n        \"}\");\n  }\n",
        "begin_line": 4249,
        "end_line": 4256,
        "comment": "\n   * Tests that the || operator is type checked correctly, that is of\n   * the type of the first argument or of the second argument. See\n   * bugid 592170 for more details.\n   ",
        "child_ranges": [
            "(line 4250,col 5)-(line 4255,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug901455()",
        "snippet": "  public void testBug901455() throws Exception {\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = undefined === a()\");\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = a() === undefined\");\n  }\n",
        "begin_line": 4263,
        "end_line": 4268,
        "comment": "\n   * Tests that undefined can be compared shallowly to a value of type\n   * (number,undefined) regardless of the side on which the undefined\n   * value is.\n   ",
        "child_ranges": [
            "(line 4264,col 5)-(line 4265,col 37)",
            "(line 4266,col 5)-(line 4267,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug908701()",
        "snippet": "  public void testBug908701() throws Exception {\n    testTypes(\"/** @type {String} */var s = new String('foo');\" +\n        \"var b = s.match(/a/) != null;\");\n  }\n",
        "begin_line": 4273,
        "end_line": 4276,
        "comment": "\n   * Tests that the match method of strings returns nullable arrays.\n   ",
        "child_ranges": [
            "(line 4274,col 5)-(line 4275,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug908625()",
        "snippet": "  public void testBug908625() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\" +\n        \"/** @constructor\\n * @extends A */function B(){}\" +\n        \"/** @param {B} b\" +\n        \"\\n @return {(A,undefined)} */function foo(b){return b}\");\n  }\n",
        "begin_line": 4281,
        "end_line": 4286,
        "comment": "\n   * Tests that named types play nicely with subtyping.\n   ",
        "child_ranges": [
            "(line 4282,col 5)-(line 4285,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug911118()",
        "snippet": "  public void testBug911118() throws Exception {\n    // verifying the type assigned to anonymous functions assigned variables\n    Scope s = parseAndTypeCheckWithScope(\"var a = function(){};\").scope;\n    JSType type = s.getVar(\"a\").getType();\n    assertEquals(\"function (): undefined\", type.toString());\n\n    // verifying the bug example\n    testTypes(\"function nullFunction() {};\" +\n        \"var foo = nullFunction;\" +\n        \"foo = function() {};\" +\n        \"foo();\");\n  }\n",
        "begin_line": 4292,
        "end_line": 4303,
        "comment": "\n   * Tests that assigning two untyped functions to a variable whose type is\n   * inferred and calling this variable is legal.\n   ",
        "child_ranges": [
            "(line 4294,col 5)-(line 4294,col 72)",
            "(line 4295,col 5)-(line 4295,col 42)",
            "(line 4296,col 5)-(line 4296,col 60)",
            "(line 4299,col 5)-(line 4302,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug909000()",
        "snippet": "  public void testBug909000() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\\n\" +\n        \"/** @param {!A} a\\n\" +\n        \"@return {boolean}*/\\n\" +\n        \"function y(a) { return a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4305,
        "end_line": 4313,
        "comment": "",
        "child_ranges": [
            "(line 4306,col 5)-(line 4312,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug930117()",
        "snippet": "  public void testBug930117() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */function f(x){}\" +\n        \"f(null);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4315,
        "end_line": 4322,
        "comment": "",
        "child_ranges": [
            "(line 4316,col 5)-(line 4321,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1484445()",
        "snippet": "  public void testBug1484445() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (foo.bar == null && foo.baz == null) {\" +\n        \"      foo.bar;\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 4324,
        "end_line": 4337,
        "comment": "",
        "child_ranges": [
            "(line 4325,col 5)-(line 4336,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1859535()",
        "snippet": "  public void testBug1859535() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {Function} childCtor Child class.\\n\" +\n        \" * @param {Function} parentCtor Parent class.\\n\" +\n        \" */\" +\n        \"var inherits = function(childCtor, parentCtor) {\" +\n        \"  /** @constructor */\" +\n        \"  function tempCtor() {};\" +\n        \"  tempCtor.prototype = parentCtor.prototype;\" +\n        \"  childCtor.superClass_ = parentCtor.prototype;\" +\n        \"  childCtor.prototype = new tempCtor();\" +\n        \"  /** @override */ childCtor.prototype.constructor = childCtor;\" +\n        \"};\" +\n        \"/**\" +\n        \" * @param {Function} constructor\\n\" +\n        \" * @param {Object} var_args\\n\" +\n        \" * @return {Object}\\n\" +\n        \" */\" +\n        \"var factory = function(constructor, var_args) {\" +\n        \"  /** @constructor */\" +\n        \"  var tempCtor = function() {};\" +\n        \"  tempCtor.prototype = constructor.prototype;\" +\n        \"  var obj = new tempCtor();\" +\n        \"  constructor.apply(obj, arguments);\" +\n        \"  return obj;\" +\n        \"};\");\n  }\n",
        "begin_line": 4339,
        "end_line": 4366,
        "comment": "",
        "child_ranges": [
            "(line 4340,col 5)-(line 4365,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1940591()",
        "snippet": "  public void testBug1940591() throws Exception {\n    testTypes(\n        \"/** @type {Object} */\" +\n        \"var a = {};\\n\" +\n        \"/** @type {number} */\\n\" +\n        \"a.name = 0;\\n\" +\n        \"/**\\n\" +\n        \" * @param {Function} x anything.\\n\" +\n        \" */\\n\" +\n        \"a.g = function(x) { x.name = 'a'; }\");\n  }\n",
        "begin_line": 4368,
        "end_line": 4378,
        "comment": "",
        "child_ranges": [
            "(line 4369,col 5)-(line 4377,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1942972()",
        "snippet": "  public void testBug1942972() throws Exception {\n    testTypes(\n        \"var google = {\\n\"+\n        \"  gears: {\\n\" +\n        \"    factory: {},\\n\" +\n        \"    workerPool: {}\\n\" +\n        \"  }\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"google.gears = {factory: {}};\\n\");\n  }\n",
        "begin_line": 4380,
        "end_line": 4390,
        "comment": "",
        "child_ranges": [
            "(line 4381,col 5)-(line 4389,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1943776()",
        "snippet": "  public void testBug1943776() throws Exception {\n    testTypes(\n        \"/** @return  {{foo: Array}} */\" +\n        \"function bar() {\" +\n        \"  return {foo: []};\" +\n        \"}\");\n  }\n",
        "begin_line": 4392,
        "end_line": 4398,
        "comment": "",
        "child_ranges": [
            "(line 4393,col 5)-(line 4397,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1987544()",
        "snippet": "  public void testBug1987544() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function foo(x) {}\" +\n        \"var duration;\" +\n        \"if (true && !(duration = 3)) {\" +\n        \" foo(duration);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4400,
        "end_line": 4410,
        "comment": "",
        "child_ranges": [
            "(line 4401,col 5)-(line 4409,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1940769()",
        "snippet": "  public void testBug1940769() throws Exception {\n    testTypes(\n        \"/** @return {!Object} */ \" +\n        \"function proto(obj) { return obj.prototype; }\" +\n        \"/** @constructor */ function Map() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Map}\\n\" +\n        \" */\" +\n        \"function Map2() { Map.call(this); };\" +\n        \"Map2.prototype = proto(Map);\");\n  }\n",
        "begin_line": 4412,
        "end_line": 4423,
        "comment": "",
        "child_ranges": [
            "(line 4413,col 5)-(line 4422,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug2335992()",
        "snippet": "  public void testBug2335992() throws Exception {\n    testTypes(\n        \"/** @return {*} */ function f() { return 3; }\" +\n        \"var x = f();\" +\n        \"/** @type {string} */\" +\n        \"x.y = 3;\",\n        \"assignment to property y of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4425,
        "end_line": 4434,
        "comment": "",
        "child_ranges": [
            "(line 4426,col 5)-(line 4433,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug2341812()",
        "snippet": "  public void testBug2341812() throws Exception {\n    testTypes(\n        \"/** @interface */\" +\n        \"function EventTarget() {}\" +\n        \"/** @constructor \\n * @implements {EventTarget} */\" +\n        \"function Node() {}\" +\n        \"/** @type {number} */ Node.prototype.index;\" +\n        \"/** @param {EventTarget} x \\n * @return {string} */\" +\n        \"function foo(x) { return x.index; }\");\n  }\n",
        "begin_line": 4436,
        "end_line": 4445,
        "comment": "",
        "child_ranges": [
            "(line 4437,col 5)-(line 4444,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScopedConstructors()",
        "snippet": "  public void testScopedConstructors() throws Exception {\n    testTypes(\n        \"function foo1() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {number} */ this.x = 3;\" +\n        \"  }\" +\n        \"}\" +\n        \"function foo2() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {string} */ this.x = 'y';\" +\n        \"  }\" +\n        \"  /** \" +\n        \"   * @param {Bar} b\\n\" +\n        \"   * @return {number}\\n\" +\n        \"   */\" +\n        \"  function baz(b) { return b.x; }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4447,
        "end_line": 4467,
        "comment": "",
        "child_ranges": [
            "(line 4448,col 5)-(line 4466,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference1()",
        "snippet": "  public void testQualifiedNameInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (!foo.baz) break; \" +\n        \"    foo.bar = null;\" +\n        \"  }\" +\n        // Tests a bug where this condition always evaluated to true.\n        \"  return foo.bar == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 4469,
        "end_line": 4483,
        "comment": "",
        "child_ranges": [
            "(line 4470,col 5)-(line 4482,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference2()",
        "snippet": "  public void testQualifiedNameInference2() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 4485,
        "end_line": 4498,
        "comment": "",
        "child_ranges": [
            "(line 4486,col 5)-(line 4497,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference3()",
        "snippet": "  public void testQualifiedNameInference3() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"} function g() { x.y = null; }\");\n  }\n",
        "begin_line": 4500,
        "end_line": 4513,
        "comment": "",
        "child_ranges": [
            "(line 4501,col 5)-(line 4512,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference4()",
        "snippet": "  public void testQualifiedNameInference4() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\\n\" +\n        \"/**\\n\" +\n        \" * @param {?string} x \\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function Foo(x) { this.x_ = x; }\\n\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x_) { f(this.x_); }\" +\n        \"};\");\n  }\n",
        "begin_line": 4515,
        "end_line": 4526,
        "comment": "",
        "child_ranges": [
            "(line 4516,col 5)-(line 4525,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSheqRefinedScope()",
        "snippet": "  public void testSheqRefinedScope() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n @extends A */ function B() {}\\n\" +\n        \"/** @return {number} */\\n\" +\n        \"B.prototype.p = function() { return 1; }\\n\" +\n        \"/** @param {A} a\\n @param {B} b */\\n\" +\n        \"function f(a, b) {\\n\" +\n        \"  b.p();\\n\" +\n        \"  if (a === b) {\\n\" +\n        \"    b.p();\\n\" +\n        \"  }\\n\" +\n        \"}\");\n    Node nodeC = n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild();\n    JSType typeC = nodeC.getJSType();\n    assertTrue(typeC.isNumber());\n\n    Node nodeB = nodeC.getFirstChild().getFirstChild();\n    JSType typeB = nodeB.getJSType();\n    assertEquals(\"B\", typeB.toString());\n  }\n",
        "begin_line": 4528,
        "end_line": 4549,
        "comment": "",
        "child_ranges": [
            "(line 4529,col 5)-(line 4540,col 13)",
            "(line 4541,col 5)-(line 4542,col 39)",
            "(line 4543,col 5)-(line 4543,col 37)",
            "(line 4544,col 5)-(line 4544,col 33)",
            "(line 4546,col 5)-(line 4546,col 55)",
            "(line 4547,col 5)-(line 4547,col 37)",
            "(line 4548,col 5)-(line 4548,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssignToUntypedVariable()",
        "snippet": "  public void testAssignToUntypedVariable() throws Exception {\n    Node n = parseAndTypeCheck(\"var z; z = 1;\");\n\n    Node assign = n.getLastChild().getFirstChild();\n    Node node = assign.getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertEquals(\"number\", node.getJSType().toString());\n  }\n",
        "begin_line": 4551,
        "end_line": 4558,
        "comment": "",
        "child_ranges": [
            "(line 4552,col 5)-(line 4552,col 48)",
            "(line 4554,col 5)-(line 4554,col 51)",
            "(line 4555,col 5)-(line 4555,col 39)",
            "(line 4556,col 5)-(line 4556,col 50)",
            "(line 4557,col 5)-(line 4557,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssignToUntypedProperty()",
        "snippet": "  public void testAssignToUntypedProperty() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.a = 1;\" +\n        \"(new Foo).a;\");\n\n    Node node = n.getLastChild().getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertTrue(node.getJSType().isNumber());\n  }\n",
        "begin_line": 4560,
        "end_line": 4569,
        "comment": "",
        "child_ranges": [
            "(line 4561,col 5)-(line 4564,col 24)",
            "(line 4566,col 5)-(line 4566,col 49)",
            "(line 4567,col 5)-(line 4567,col 50)",
            "(line 4568,col 5)-(line 4568,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew1()",
        "snippet": "  public void testNew1() throws Exception {\n    testTypes(\"new 4\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4571,
        "end_line": 4573,
        "comment": "",
        "child_ranges": [
            "(line 4572,col 5)-(line 4572,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew2()",
        "snippet": "  public void testNew2() throws Exception {\n    testTypes(\"var Math = {}; new Math()\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4575,
        "end_line": 4577,
        "comment": "",
        "child_ranges": [
            "(line 4576,col 5)-(line 4576,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew3()",
        "snippet": "  public void testNew3() throws Exception {\n    testTypes(\"new Date()\");\n  }\n",
        "begin_line": 4579,
        "end_line": 4581,
        "comment": "",
        "child_ranges": [
            "(line 4580,col 5)-(line 4580,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew4()",
        "snippet": "  public void testNew4() throws Exception {\n    testTypes(\"/** @constructor */function A(){}; new A();\");\n  }\n",
        "begin_line": 4583,
        "end_line": 4585,
        "comment": "",
        "child_ranges": [
            "(line 4584,col 5)-(line 4584,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew5()",
        "snippet": "  public void testNew5() throws Exception {\n    testTypes(\"function A(){}; new A();\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4587,
        "end_line": 4589,
        "comment": "",
        "child_ranges": [
            "(line 4588,col 5)-(line 4588,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew6()",
        "snippet": "  public void testNew6() throws Exception {\n    TypeCheckResult p =\n      parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\" +\n      \"var a = new A();\");\n\n    JSType aType = p.scope.getVar(\"a\").getType();\n    assertTrue(aType instanceof ObjectType);\n    ObjectType aObjectType = (ObjectType) aType;\n    assertEquals(\"A\", aObjectType.getConstructor().getReferenceName());\n  }\n",
        "begin_line": 4591,
        "end_line": 4600,
        "comment": "",
        "child_ranges": [
            "(line 4592,col 5)-(line 4594,col 26)",
            "(line 4596,col 5)-(line 4596,col 49)",
            "(line 4597,col 5)-(line 4597,col 44)",
            "(line 4598,col 5)-(line 4598,col 48)",
            "(line 4599,col 5)-(line 4599,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew7()",
        "snippet": "  public void testNew7() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"if (opt_constructor) { new opt_constructor; }\" +\n        \"}\");\n  }\n",
        "begin_line": 4602,
        "end_line": 4607,
        "comment": "",
        "child_ranges": [
            "(line 4603,col 5)-(line 4606,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew8()",
        "snippet": "  public void testNew8() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new opt_constructor;\" +\n        \"}\");\n  }\n",
        "begin_line": 4609,
        "end_line": 4614,
        "comment": "",
        "child_ranges": [
            "(line 4610,col 5)-(line 4613,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew9()",
        "snippet": "  public void testNew9() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 4616,
        "end_line": 4621,
        "comment": "",
        "child_ranges": [
            "(line 4617,col 5)-(line 4620,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew10()",
        "snippet": "  public void testNew10() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @param {Function} opt_constructor */\" +\n        \"goog.Foo = function (opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 4623,
        "end_line": 4629,
        "comment": "",
        "child_ranges": [
            "(line 4624,col 5)-(line 4628,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew11()",
        "snippet": "  public void testNew11() throws Exception {\n    testTypes(\"/** @param {Function} c1 */\" +\n        \"function f(c1) {\" +\n        \"  var c2 = function(){};\" +\n        \"  c1.prototype = new c2;\" +\n        \"}\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4631,
        "end_line": 4637,
        "comment": "",
        "child_ranges": [
            "(line 4632,col 5)-(line 4636,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew12()",
        "snippet": "  public void testNew12() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = new Array();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertEquals(ARRAY_TYPE, a.getType());\n  }\n",
        "begin_line": 4639,
        "end_line": 4644,
        "comment": "",
        "child_ranges": [
            "(line 4640,col 5)-(line 4640,col 75)",
            "(line 4641,col 5)-(line 4641,col 32)",
            "(line 4643,col 5)-(line 4643,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew13()",
        "snippet": "  public void testNew13() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */function FooBar(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 4646,
        "end_line": 4654,
        "comment": "",
        "child_ranges": [
            "(line 4647,col 5)-(line 4649,col 33)",
            "(line 4650,col 5)-(line 4650,col 32)",
            "(line 4652,col 5)-(line 4652,col 50)",
            "(line 4653,col 5)-(line 4653,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew14()",
        "snippet": "  public void testNew14() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */var FooBar = function(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 4656,
        "end_line": 4664,
        "comment": "",
        "child_ranges": [
            "(line 4657,col 5)-(line 4659,col 33)",
            "(line 4660,col 5)-(line 4660,col 32)",
            "(line 4662,col 5)-(line 4662,col 50)",
            "(line 4663,col 5)-(line 4663,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew15()",
        "snippet": "  public void testNew15() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"var a = new goog.A();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"goog.A\", a.getType().toString());\n  }\n",
        "begin_line": 4666,
        "end_line": 4675,
        "comment": "",
        "child_ranges": [
            "(line 4667,col 5)-(line 4670,col 33)",
            "(line 4671,col 5)-(line 4671,col 32)",
            "(line 4673,col 5)-(line 4673,col 50)",
            "(line 4674,col 5)-(line 4674,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew16()",
        "snippet": "  public void testNew16() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @constructor \\n\" +\n        \" */\" +\n        \"function Foo(x) {}\" +\n        \"function g() { new Foo(1); }\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4677,
        "end_line": 4688,
        "comment": "",
        "child_ranges": [
            "(line 4678,col 5)-(line 4687,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName1()",
        "snippet": "  public void testName1() throws Exception {\n    assertEquals(VOID_TYPE, testNameNode(\"undefined\"));\n  }\n",
        "begin_line": 4690,
        "end_line": 4692,
        "comment": "",
        "child_ranges": [
            "(line 4691,col 5)-(line 4691,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName2()",
        "snippet": "  public void testName2() throws Exception {\n    assertEquals(OBJECT_FUNCTION_TYPE, testNameNode(\"Object\"));\n  }\n",
        "begin_line": 4694,
        "end_line": 4696,
        "comment": "",
        "child_ranges": [
            "(line 4695,col 5)-(line 4695,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName3()",
        "snippet": "  public void testName3() throws Exception {\n    assertEquals(ARRAY_FUNCTION_TYPE, testNameNode(\"Array\"));\n  }\n",
        "begin_line": 4698,
        "end_line": 4700,
        "comment": "",
        "child_ranges": [
            "(line 4699,col 5)-(line 4699,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName4()",
        "snippet": "  public void testName4() throws Exception {\n    assertEquals(DATE_FUNCTION_TYPE, testNameNode(\"Date\"));\n  }\n",
        "begin_line": 4702,
        "end_line": 4704,
        "comment": "",
        "child_ranges": [
            "(line 4703,col 5)-(line 4703,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName5()",
        "snippet": "  public void testName5() throws Exception {\n    assertEquals(REGEXP_FUNCTION_TYPE, testNameNode(\"RegExp\"));\n  }\n",
        "begin_line": 4706,
        "end_line": 4708,
        "comment": "",
        "child_ranges": [
            "(line 4707,col 5)-(line 4707,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNameNode(java.lang.String)",
        "snippet": "  private JSType testNameNode(String name) {\n    Node node = Node.newString(Token.NAME, name);\n    Node parent = new Node(Token.SCRIPT, node);\n    parent.setInputId(new InputId(\"code\"));\n\n    Node externs = new Node(Token.SCRIPT);\n    externs.setInputId(new InputId(\"externs\"));\n\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, parent);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, parent);\n    return node.getJSType();\n  }\n",
        "begin_line": 4713,
        "end_line": 4726,
        "comment": "\n   * Type checks a NAME node and retrieve its type.\n   ",
        "child_ranges": [
            "(line 4714,col 5)-(line 4714,col 49)",
            "(line 4715,col 5)-(line 4715,col 47)",
            "(line 4716,col 5)-(line 4716,col 43)",
            "(line 4718,col 5)-(line 4718,col 42)",
            "(line 4719,col 5)-(line 4719,col 47)",
            "(line 4721,col 5)-(line 4721,col 66)",
            "(line 4722,col 5)-(line 4722,col 46)",
            "(line 4724,col 5)-(line 4724,col 52)",
            "(line 4725,col 5)-(line 4725,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation1()",
        "snippet": "  public void testBitOperation1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ ~foo(); }\",\n        \"operator ~ cannot be applied to undefined\");\n  }\n",
        "begin_line": 4728,
        "end_line": 4731,
        "comment": "",
        "child_ranges": [
            "(line 4729,col 5)-(line 4730,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation2()",
        "snippet": "  public void testBitOperation2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()<<3;}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 4733,
        "end_line": 4736,
        "comment": "",
        "child_ranges": [
            "(line 4734,col 5)-(line 4735,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation3()",
        "snippet": "  public void testBitOperation3() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3<<foo();}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 4738,
        "end_line": 4741,
        "comment": "",
        "child_ranges": [
            "(line 4739,col 5)-(line 4740,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation4()",
        "snippet": "  public void testBitOperation4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()>>>3;}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 4743,
        "end_line": 4746,
        "comment": "",
        "child_ranges": [
            "(line 4744,col 5)-(line 4745,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation5()",
        "snippet": "  public void testBitOperation5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3>>>foo();}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 4748,
        "end_line": 4751,
        "comment": "",
        "child_ranges": [
            "(line 4749,col 5)-(line 4750,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation6()",
        "snippet": "  public void testBitOperation6() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = foo()&3;}\",\n        \"bad left operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 4753,
        "end_line": 4758,
        "comment": "",
        "child_ranges": [
            "(line 4754,col 5)-(line 4757,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation7()",
        "snippet": "  public void testBitOperation7() throws Exception {\n    testTypes(\"var x = null; x |= undefined; x &= 3; x ^= '3'; x |= true;\");\n  }\n",
        "begin_line": 4760,
        "end_line": 4762,
        "comment": "",
        "child_ranges": [
            "(line 4761,col 5)-(line 4761,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation8()",
        "snippet": "  public void testBitOperation8() throws Exception {\n    testTypes(\"var x = void 0; x |= new Number(3);\");\n  }\n",
        "begin_line": 4764,
        "end_line": 4766,
        "comment": "",
        "child_ranges": [
            "(line 4765,col 5)-(line 4765,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation9()",
        "snippet": "  public void testBitOperation9() throws Exception {\n    testTypes(\"var x = void 0; x |= {};\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : {}\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 4768,
        "end_line": 4773,
        "comment": "",
        "child_ranges": [
            "(line 4769,col 5)-(line 4772,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall1()",
        "snippet": "  public void testCall1() throws Exception {\n    testTypes(\"3();\", \"number expressions are not callable\");\n  }\n",
        "begin_line": 4775,
        "end_line": 4777,
        "comment": "",
        "child_ranges": [
            "(line 4776,col 5)-(line 4776,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall2()",
        "snippet": "  public void testCall2() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4779,
        "end_line": 4784,
        "comment": "",
        "child_ranges": [
            "(line 4780,col 5)-(line 4783,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall3()",
        "snippet": "  public void testCall3() throws Exception {\n    // We are checking that an unresolved named type can successfully\n    // meet with a functional type to produce a callable type.\n    testTypes(\"/** @type {Function|undefined} */var opt_f;\" +\n        \"/** @type {some.unknown.type} */var f1;\" +\n        \"var f2 = opt_f || f1;\" +\n        \"f2();\",\n        \"Bad type annotation. Unknown type some.unknown.type\");\n  }\n",
        "begin_line": 4786,
        "end_line": 4794,
        "comment": "",
        "child_ranges": [
            "(line 4789,col 5)-(line 4793,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall4()",
        "snippet": "  public void testCall4() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 4796,
        "end_line": 4801,
        "comment": "",
        "child_ranges": [
            "(line 4797,col 5)-(line 4800,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall5()",
        "snippet": "  public void testCall5() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ foo('abc'); }\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 4803,
        "end_line": 4808,
        "comment": "",
        "child_ranges": [
            "(line 4804,col 5)-(line 4807,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall6()",
        "snippet": "  public void testCall6() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){}\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4810,
        "end_line": 4816,
        "comment": "",
        "child_ranges": [
            "(line 4811,col 5)-(line 4815,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall7()",
        "snippet": "  public void testCall7() throws Exception {\n    testTypes(\"/** @param {!RegExp} a*/var foo = function bar(a){};\" +\n        \"foo('abc');\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 4818,
        "end_line": 4824,
        "comment": "",
        "child_ranges": [
            "(line 4819,col 5)-(line 4823,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall8()",
        "snippet": "  public void testCall8() throws Exception {\n    testTypes(\"/** @type {Function|number} */var f;f();\",\n        \"(Function|number) expressions are \" +\n        \"not callable\");\n  }\n",
        "begin_line": 4826,
        "end_line": 4830,
        "comment": "",
        "child_ranges": [
            "(line 4827,col 5)-(line 4829,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall9()",
        "snippet": "  public void testCall9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @param {!goog.Foo} a */ var bar = function(a){};\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: goog.Foo\");\n  }\n",
        "begin_line": 4832,
        "end_line": 4841,
        "comment": "",
        "child_ranges": [
            "(line 4833,col 5)-(line 4840,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall10()",
        "snippet": "  public void testCall10() throws Exception {\n    testTypes(\"/** @type {Function} */var f;f();\");\n  }\n",
        "begin_line": 4843,
        "end_line": 4845,
        "comment": "",
        "child_ranges": [
            "(line 4844,col 5)-(line 4844,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall11()",
        "snippet": "  public void testCall11() throws Exception {\n    testTypes(\"var f = new Function(); f();\");\n  }\n",
        "begin_line": 4847,
        "end_line": 4849,
        "comment": "",
        "child_ranges": [
            "(line 4848,col 5)-(line 4848,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall1()",
        "snippet": "  public void testFunctionCall1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 3);\");\n  }\n",
        "begin_line": 4851,
        "end_line": 4855,
        "comment": "",
        "child_ranges": [
            "(line 4852,col 5)-(line 4854,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall2()",
        "snippet": "  public void testFunctionCall2() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 'bar');\",\n        \"actual parameter 2 of foo.call does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4857,
        "end_line": 4864,
        "comment": "",
        "child_ranges": [
            "(line 4858,col 5)-(line 4863,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall3()",
        "snippet": "  public void testFunctionCall3() throws Exception {\n    testTypes(\n        \"/** @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\");\n  }\n",
        "begin_line": 4866,
        "end_line": 4871,
        "comment": "",
        "child_ranges": [
            "(line 4867,col 5)-(line 4870,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall4()",
        "snippet": "  public void testFunctionCall4() throws Exception {\n    testTypes(\n        \"/** @param {string} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\",\n        \"actual parameter 2 of this.bar.call \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4873,
        "end_line": 4882,
        "comment": "",
        "child_ranges": [
            "(line 4874,col 5)-(line 4881,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall5()",
        "snippet": "  public void testFunctionCall5() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.call(this, x); };\");\n  }\n",
        "begin_line": 4884,
        "end_line": 4888,
        "comment": "",
        "child_ranges": [
            "(line 4885,col 5)-(line 4887,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall6()",
        "snippet": "  public void testFunctionCall6() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.apply(this, x); };\");\n  }\n",
        "begin_line": 4890,
        "end_line": 4894,
        "comment": "",
        "child_ranges": [
            "(line 4891,col 5)-(line 4893,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall7()",
        "snippet": "  public void testFunctionCall7() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.call(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 4896,
        "end_line": 4902,
        "comment": "",
        "child_ranges": [
            "(line 4897,col 5)-(line 4901,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall8()",
        "snippet": "  public void testFunctionCall8() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.apply(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 4904,
        "end_line": 4910,
        "comment": "",
        "child_ranges": [
            "(line 4905,col 5)-(line 4909,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast2()",
        "snippet": "  public void testCast2() throws Exception {\n    // can upcast to a base type.\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n @extends {base} */function derived() {}\\n\" +\n        \"/** @type {base} */ var baz = new derived();\\n\");\n  }\n",
        "begin_line": 4912,
        "end_line": 4917,
        "comment": "",
        "child_ranges": [
            "(line 4914,col 5)-(line 4916,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast3()",
        "snippet": "  public void testCast3() throws Exception {\n    // cannot downcast\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = new base();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : base\\n\" +\n        \"required: derived\");\n  }\n",
        "begin_line": 4919,
        "end_line": 4927,
        "comment": "",
        "child_ranges": [
            "(line 4921,col 5)-(line 4926,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast4()",
        "snippet": "  public void testCast4() throws Exception {\n    // downcast must be explicit\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = \" +\n        \"/** @type {!derived} */(new base());\\n\");\n  }\n",
        "begin_line": 4929,
        "end_line": 4935,
        "comment": "",
        "child_ranges": [
            "(line 4931,col 5)-(line 4934,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast5()",
        "snippet": "  public void testCast5() throws Exception {\n    // cannot explicitly cast to an unrelated type\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor */function bar() {}\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: bar\\n\" +\n        \"to  : foo\");\n  }\n",
        "begin_line": 4937,
        "end_line": 4945,
        "comment": "",
        "child_ranges": [
            "(line 4939,col 5)-(line 4944,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast6()",
        "snippet": "  public void testCast6() throws Exception {\n    // can explicitly cast to a subtype or supertype\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor \\n @extends foo */function bar() {}\\n\" +\n        \"var baz = /** @type {!bar} */(new bar);\\n\" +\n        \"var baz = /** @type {!foo} */(new foo);\\n\" +\n        \"var baz = /** @type {bar} */(new bar);\\n\" +\n        \"var baz = /** @type {foo} */(new foo);\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\" +\n        \"var baz = /** @type {!bar} */(new foo);\\n\" +\n        \"var baz = /** @type {foo} */(new bar);\\n\" +\n        \"var baz = /** @type {bar} */(new foo);\\n\");\n  }\n",
        "begin_line": 4947,
        "end_line": 4959,
        "comment": "",
        "child_ranges": [
            "(line 4949,col 5)-(line 4958,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast7()",
        "snippet": "  public void testCast7() throws Exception {\n    testTypes(\"var x = /** @type {foo} */ (new Object());\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4961,
        "end_line": 4964,
        "comment": "",
        "child_ranges": [
            "(line 4962,col 5)-(line 4963,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast8()",
        "snippet": "  public void testCast8() throws Exception {\n    testTypes(\"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4966,
        "end_line": 4969,
        "comment": "",
        "child_ranges": [
            "(line 4967,col 5)-(line 4968,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast9()",
        "snippet": "  public void testCast9() throws Exception {\n    testTypes(\"var foo = {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4971,
        "end_line": 4975,
        "comment": "",
        "child_ranges": [
            "(line 4972,col 5)-(line 4974,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast10()",
        "snippet": "  public void testCast10() throws Exception {\n    testTypes(\"var foo = function() {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4977,
        "end_line": 4981,
        "comment": "",
        "child_ranges": [
            "(line 4978,col 5)-(line 4980,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast11()",
        "snippet": "  public void testCast11() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 4983,
        "end_line": 4987,
        "comment": "",
        "child_ranges": [
            "(line 4984,col 5)-(line 4986,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast12()",
        "snippet": "  public void testCast12() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 4989,
        "end_line": 4993,
        "comment": "",
        "child_ranges": [
            "(line 4990,col 5)-(line 4992,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast13()",
        "snippet": "  public void testCast13() throws Exception {\n    // Test to make sure that the forward-declaration still allows for\n    // a warning.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.foo'], []);\" +\n        \"goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 4995,
        "end_line": 5003,
        "comment": "",
        "child_ranges": [
            "(line 4998,col 5)-(line 5002,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast14()",
        "snippet": "  public void testCast14() throws Exception {\n    // Test to make sure that the forward-declaration still prevents\n    // some warnings.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.bar'], []);\" +\n        \"function f() { return /** @type {goog.bar} */ (new Object()); }\",\n        null);\n  }\n",
        "begin_line": 5005,
        "end_line": 5012,
        "comment": "",
        "child_ranges": [
            "(line 5008,col 5)-(line 5011,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast15()",
        "snippet": "  public void testCast15() throws Exception {\n    // This fixes a bug where a type cast on an object literal\n    // would cause a runtime cast exception if the node was visited\n    // more than once.\n    //\n    // Some code assumes that an object literal must have a object type,\n    // while because of the cast, it could have any type (including\n    // a union).\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n          \"/** @param {number} x */ function f(x) {}\" +\n          \"f(x.foo);\" +\n          \"f([].foo);\" +\n        \"}\",\n        \"Property foo never defined on Array\");\n  }\n",
        "begin_line": 5014,
        "end_line": 5030,
        "comment": "",
        "child_ranges": [
            "(line 5022,col 5)-(line 5029,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast16()",
        "snippet": "  public void testCast16() throws Exception {\n    // Mostly verifying that rhino actually understands these JsDocs.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ ({})\");\n\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = (/** @type {Foo} */ {})\");\n\n    // Not really encourage because of possible ambiguity but it works.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ {}\");\n  }\n",
        "begin_line": 5032,
        "end_line": 5043,
        "comment": "",
        "child_ranges": [
            "(line 5034,col 5)-(line 5035,col 62)",
            "(line 5037,col 5)-(line 5038,col 62)",
            "(line 5041,col 5)-(line 5042,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNestedCasts()",
        "snippet": "  public void testNestedCasts() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/** @constructor */var V = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {T|V}\\n\" +\n        \"*/\\n\" +\n        \"function f(b) { return b ? new T() : new V(); }\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {boolean|undefined}\\n\" +\n        \"*/\\n\" +\n        \"function g(b) { return b ? true : undefined; }\\n\" +\n        \"/** @return {T} */\\n\" +\n        \"function h() {\\n\" +\n        \"return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 5045,
        "end_line": 5062,
        "comment": "",
        "child_ranges": [
            "(line 5046,col 5)-(line 5061,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast1()",
        "snippet": "  public void testNativeCast1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(String(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5064,
        "end_line": 5071,
        "comment": "",
        "child_ranges": [
            "(line 5065,col 5)-(line 5070,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast2()",
        "snippet": "  public void testNativeCast2() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f(Number(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5073,
        "end_line": 5080,
        "comment": "",
        "child_ranges": [
            "(line 5074,col 5)-(line 5079,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast3()",
        "snippet": "  public void testNativeCast3() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Boolean(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5082,
        "end_line": 5089,
        "comment": "",
        "child_ranges": [
            "(line 5083,col 5)-(line 5088,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast4()",
        "snippet": "  public void testNativeCast4() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Error(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5091,
        "end_line": 5098,
        "comment": "",
        "child_ranges": [
            "(line 5092,col 5)-(line 5097,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadConstructorCall()",
        "snippet": "  public void testBadConstructorCall() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo();\",\n        \"Constructor function (new:Foo): undefined should be called \" +\n        \"with the \\\"new\\\" keyword\");\n  }\n",
        "begin_line": 5100,
        "end_line": 5106,
        "comment": "",
        "child_ranges": [
            "(line 5101,col 5)-(line 5105,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeof()",
        "snippet": "  public void testTypeof() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = typeof foo(); }\");\n  }\n",
        "begin_line": 5108,
        "end_line": 5110,
        "comment": "",
        "child_ranges": [
            "(line 5109,col 5)-(line 5109,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType1()",
        "snippet": "  public void testConstructorType1() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\" +\n        \"/**@type{!Foo}*/var f = new Date();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: Foo\");\n  }\n",
        "begin_line": 5112,
        "end_line": 5118,
        "comment": "",
        "child_ranges": [
            "(line 5113,col 5)-(line 5117,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType2()",
        "snippet": "  public void testConstructorType2() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\");\n  }\n",
        "begin_line": 5120,
        "end_line": 5126,
        "comment": "",
        "child_ranges": [
            "(line 5121,col 5)-(line 5125,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType3()",
        "snippet": "  public void testConstructorType3() throws Exception {\n    // Reverse the declaration order so that we know that Foo is getting set\n    // even on an out-of-order declaration sequence.\n    testTypes(\"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\" +\n        \"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 5128,
        "end_line": 5136,
        "comment": "",
        "child_ranges": [
            "(line 5131,col 5)-(line 5135,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType4()",
        "snippet": "  public void testConstructorType4() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{!Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{!Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{!String}*/var n = f.bar;\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 5138,
        "end_line": 5147,
        "comment": "",
        "child_ranges": [
            "(line 5139,col 5)-(line 5146,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType5()",
        "snippet": "  public void testConstructorType5() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\\n\" +\n        \"if (Foo){}\\n\");\n  }\n",
        "begin_line": 5149,
        "end_line": 5152,
        "comment": "",
        "child_ranges": [
            "(line 5150,col 5)-(line 5151,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType6()",
        "snippet": "  public void testConstructorType6() throws Exception {\n    testTypes(\"/** @constructor */\\n\" +\n        \"function bar() {}\\n\" +\n        \"function _foo() {\\n\" +\n        \" /** @param {bar} x */\\n\" +\n        \"  function f(x) {}\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 5154,
        "end_line": 5161,
        "comment": "",
        "child_ranges": [
            "(line 5155,col 5)-(line 5160,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType7()",
        "snippet": "  public void testConstructorType7() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\");\n\n    JSType type = p.scope.getVar(\"A\").getType();\n    assertTrue(type instanceof FunctionType);\n    FunctionType fType = (FunctionType) type;\n    assertEquals(\"A\", fType.getReferenceName());\n  }\n",
        "begin_line": 5163,
        "end_line": 5171,
        "comment": "",
        "child_ranges": [
            "(line 5164,col 5)-(line 5165,col 73)",
            "(line 5167,col 5)-(line 5167,col 48)",
            "(line 5168,col 5)-(line 5168,col 45)",
            "(line 5169,col 5)-(line 5169,col 45)",
            "(line 5170,col 5)-(line 5170,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnonymousType1()",
        "snippet": "  public void testAnonymousType1() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @constructor */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 5173,
        "end_line": 5177,
        "comment": "",
        "child_ranges": [
            "(line 5174,col 5)-(line 5176,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnonymousType2()",
        "snippet": "  public void testAnonymousType2() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @interface */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 5179,
        "end_line": 5183,
        "comment": "",
        "child_ranges": [
            "(line 5180,col 5)-(line 5182,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnonymousType3()",
        "snippet": "  public void testAnonymousType3() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @enum */\\n\" +\n        \"f().bar = {FOO: 1};\");\n  }\n",
        "begin_line": 5185,
        "end_line": 5189,
        "comment": "",
        "child_ranges": [
            "(line 5186,col 5)-(line 5188,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang1()",
        "snippet": "  public void testBang1() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (Object|null|undefined)\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 5191,
        "end_line": 5197,
        "comment": "",
        "child_ranges": [
            "(line 5192,col 5)-(line 5196,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang2()",
        "snippet": "  public void testBang2() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x ? x : new Object(); }\");\n  }\n",
        "begin_line": 5199,
        "end_line": 5202,
        "comment": "",
        "child_ranges": [
            "(line 5200,col 5)-(line 5201,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang3()",
        "snippet": "  public void testBang3() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return /** @type {!Object} */ (x); }\");\n  }\n",
        "begin_line": 5204,
        "end_line": 5207,
        "comment": "",
        "child_ranges": [
            "(line 5205,col 5)-(line 5206,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang4()",
        "snippet": "  public void testBang4() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) {\\n\" +\n        \"if (typeof x != 'undefined') { return x == y; }\\n\" +\n        \"else { return x != y; }\\n}\");\n  }\n",
        "begin_line": 5209,
        "end_line": 5214,
        "comment": "",
        "child_ranges": [
            "(line 5210,col 5)-(line 5213,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang5()",
        "snippet": "  public void testBang5() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) { return !!x && x == y; }\");\n  }\n",
        "begin_line": 5216,
        "end_line": 5219,
        "comment": "",
        "child_ranges": [
            "(line 5217,col 5)-(line 5218,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang6()",
        "snippet": "  public void testBang6() throws Exception {\n    testTypes(\"/** @param {Object?} x\\n@return {Object} */\\n\" +\n        \"function f(x) { return x; }\");\n  }\n",
        "begin_line": 5221,
        "end_line": 5224,
        "comment": "",
        "child_ranges": [
            "(line 5222,col 5)-(line 5223,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang7()",
        "snippet": "  public void testBang7() throws Exception {\n    testTypes(\"/**@param {(Object,string,null)} x\\n\" +\n        \"@return {(Object,string)}*/function f(x) { return x; }\");\n  }\n",
        "begin_line": 5226,
        "end_line": 5229,
        "comment": "",
        "child_ranges": [
            "(line 5227,col 5)-(line 5228,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDefinePropertyOnNullableObject1()",
        "snippet": "  public void testDefinePropertyOnNullableObject1() throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @type {number} */ n.x = 1;\\n\" +\n        \"/** @return {boolean} */function f() { return n.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5231,
        "end_line": 5238,
        "comment": "",
        "child_ranges": [
            "(line 5232,col 5)-(line 5237,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDefinePropertyOnNullableObject2()",
        "snippet": "  public void testDefinePropertyOnNullableObject2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T} t\\n@return {boolean} */function f(t) {\\n\" +\n        \"t.x = 1; return t.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5240,
        "end_line": 5247,
        "comment": "",
        "child_ranges": [
            "(line 5241,col 5)-(line 5246,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownConstructorInstanceType1()",
        "snippet": "  public void testUnknownConstructorInstanceType1() throws Exception {\n    testTypes(\"/** @return {Array} */ function g(f) { return new f(); }\");\n  }\n",
        "begin_line": 5249,
        "end_line": 5251,
        "comment": "",
        "child_ranges": [
            "(line 5250,col 5)-(line 5250,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownConstructorInstanceType2()",
        "snippet": "  public void testUnknownConstructorInstanceType2() throws Exception {\n    testTypes(\"function g(f) { return /** @type Array */ new f(); }\");\n  }\n",
        "begin_line": 5253,
        "end_line": 5255,
        "comment": "",
        "child_ranges": [
            "(line 5254,col 5)-(line 5254,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownConstructorInstanceType3()",
        "snippet": "  public void testUnknownConstructorInstanceType3() throws Exception {\n    testTypes(\"function g(f) { var x = new f(); x.a = 1; return x; }\");\n  }\n",
        "begin_line": 5257,
        "end_line": 5259,
        "comment": "",
        "child_ranges": [
            "(line 5258,col 5)-(line 5258,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownPrototypeChain()",
        "snippet": "  public void testUnknownPrototypeChain() throws Exception {\n    testTypes(\"/**\\n\" +\n              \"* @param {Object} co\\n\" +\n              \" * @return {Object}\\n\" +\n              \" */\\n\" +\n              \"function inst(co) {\\n\" +\n              \" /** @constructor */\\n\" +\n              \" var c = function() {};\\n\" +\n              \" c.prototype = co.prototype;\\n\" +\n              \" return new c;\\n\" +\n              \"}\");\n  }\n",
        "begin_line": 5261,
        "end_line": 5272,
        "comment": "",
        "child_ranges": [
            "(line 5262,col 5)-(line 5271,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNamespacedConstructor()",
        "snippet": "  public void testNamespacedConstructor() throws Exception {\n    Node root = parseAndTypeCheck(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.MyClass = function() {};\" +\n        \"/** @return {!goog.MyClass} */ \" +\n        \"function foo() { return new goog.MyClass(); }\");\n\n    JSType typeOfFoo = root.getLastChild().getJSType();\n    assert(typeOfFoo instanceof FunctionType);\n\n    JSType retType = ((FunctionType) typeOfFoo).getReturnType();\n    assert(retType instanceof ObjectType);\n    assertEquals(\"goog.MyClass\", ((ObjectType) retType).getReferenceName());\n  }\n",
        "begin_line": 5274,
        "end_line": 5287,
        "comment": "",
        "child_ranges": [
            "(line 5275,col 5)-(line 5279,col 57)",
            "(line 5281,col 5)-(line 5281,col 55)",
            "(line 5282,col 5)-(line 5282,col 46)",
            "(line 5284,col 5)-(line 5284,col 64)",
            "(line 5285,col 5)-(line 5285,col 42)",
            "(line 5286,col 5)-(line 5286,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComplexNamespace()",
        "snippet": "  public void testComplexNamespace() throws Exception {\n    String js =\n      \"var goog = {};\" +\n      \"goog.foo = {};\" +\n      \"goog.foo.bar = 5;\";\n\n    TypeCheckResult p = parseAndTypeCheckWithScope(js);\n\n    // goog type in the scope\n    JSType googScopeType = p.scope.getVar(\"goog\").getType();\n    assertTrue(googScopeType instanceof ObjectType);\n    assertTrue(\"foo property not present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"foo\"));\n    assertFalse(\"bar property present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"bar\"));\n\n    // goog type on the VAR node\n    Node varNode = p.root.getFirstChild();\n    assertEquals(Token.VAR, varNode.getType());\n    JSType googNodeType = varNode.getFirstChild().getJSType();\n    assertTrue(googNodeType instanceof ObjectType);\n\n    // goog scope type and goog type on VAR node must be the same\n    assertTrue(googScopeType == googNodeType);\n\n    // goog type on the left of the GETPROP node (under fist ASSIGN)\n    Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo1.getType());\n    assertEquals(\"goog\", getpropFoo1.getFirstChild().getString());\n    JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo1Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo1Type == googScopeType);\n\n    // the foo property should be defined on goog\n    JSType googFooType = ((ObjectType) googScopeType).getPropertyType(\"foo\");\n    assertTrue(googFooType instanceof ObjectType);\n\n    // goog type on the left of the GETPROP lower level node\n    // (under second ASSIGN)\n    Node getpropFoo2 = varNode.getNext().getNext()\n        .getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo2.getType());\n    assertEquals(\"goog\", getpropFoo2.getFirstChild().getString());\n    JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo2Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo2Type == googScopeType);\n\n    // goog.foo type on the left of the top level GETPROP node\n    // (under second ASSIGN)\n    JSType googFooGetprop2Type = getpropFoo2.getJSType();\n    assertTrue(\"goog.foo incorrectly annotated in goog.foo.bar selection\",\n        googFooGetprop2Type instanceof ObjectType);\n    ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type;\n    assertFalse(\"foo property present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"foo\"));\n    assertTrue(\"bar property not present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"bar\"));\n    assertEquals(\"bar property on goog.foo type incorrectly inferred\",\n        NUMBER_TYPE, googFooGetprop2ObjectType.getPropertyType(\"bar\"));\n  }\n",
        "begin_line": 5289,
        "end_line": 5352,
        "comment": "",
        "child_ranges": [
            "(line 5290,col 5)-(line 5293,col 26)",
            "(line 5295,col 5)-(line 5295,col 55)",
            "(line 5298,col 5)-(line 5298,col 60)",
            "(line 5299,col 5)-(line 5299,col 52)",
            "(line 5300,col 5)-(line 5301,col 57)",
            "(line 5302,col 5)-(line 5303,col 57)",
            "(line 5306,col 5)-(line 5306,col 42)",
            "(line 5307,col 5)-(line 5307,col 47)",
            "(line 5308,col 5)-(line 5308,col 62)",
            "(line 5309,col 5)-(line 5309,col 51)",
            "(line 5312,col 5)-(line 5312,col 46)",
            "(line 5315,col 5)-(line 5315,col 73)",
            "(line 5316,col 5)-(line 5316,col 55)",
            "(line 5317,col 5)-(line 5317,col 66)",
            "(line 5318,col 5)-(line 5318,col 73)",
            "(line 5319,col 5)-(line 5319,col 58)",
            "(line 5322,col 5)-(line 5322,col 53)",
            "(line 5325,col 5)-(line 5325,col 77)",
            "(line 5326,col 5)-(line 5326,col 50)",
            "(line 5330,col 5)-(line 5331,col 57)",
            "(line 5332,col 5)-(line 5332,col 55)",
            "(line 5333,col 5)-(line 5333,col 66)",
            "(line 5334,col 5)-(line 5334,col 73)",
            "(line 5335,col 5)-(line 5335,col 58)",
            "(line 5338,col 5)-(line 5338,col 53)",
            "(line 5342,col 5)-(line 5342,col 57)",
            "(line 5343,col 5)-(line 5344,col 51)",
            "(line 5345,col 5)-(line 5345,col 76)",
            "(line 5346,col 5)-(line 5347,col 54)",
            "(line 5348,col 5)-(line 5349,col 54)",
            "(line 5350,col 5)-(line 5351,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomSimpleNamespace()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype.m1 = 5\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 5354,
        "end_line": 5364,
        "comment": "",
        "child_ranges": [
            "(line 5356,col 5)-(line 5358,col 30)",
            "(line 5360,col 5)-(line 5360,col 55)",
            "(line 5361,col 5)-(line 5362,col 43)",
            "(line 5363,col 5)-(line 5363,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace1()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"goog.A = /** @constructor */function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 5366,
        "end_line": 5374,
        "comment": "",
        "child_ranges": [
            "(line 5368,col 5)-(line 5371,col 54)",
            "(line 5373,col 5)-(line 5373,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace2()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 5376,
        "end_line": 5384,
        "comment": "",
        "child_ranges": [
            "(line 5378,col 5)-(line 5381,col 54)",
            "(line 5383,col 5)-(line 5383,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace(com.google.javascript.jscomp.LooseTypeCheckTest.TypeCheckResult)",
        "snippet": "  private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(\n      TypeCheckResult p) {\n    ObjectType goog = (ObjectType) p.scope.getVar(\"goog\").getType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, goog.getPropertiesCount());\n    JSType googA = goog.getPropertyType(\"A\");\n    assertNotNull(googA);\n    assertTrue(googA instanceof FunctionType);\n    FunctionType googAFunction = (FunctionType) googA;\n    ObjectType classA = googAFunction.getInstanceType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, classA.getPropertiesCount());\n    checkObjectType(classA, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 5386,
        "end_line": 5397,
        "comment": "",
        "child_ranges": [
            "(line 5388,col 5)-(line 5388,col 68)",
            "(line 5389,col 5)-(line 5389,col 73)",
            "(line 5390,col 5)-(line 5390,col 45)",
            "(line 5391,col 5)-(line 5391,col 25)",
            "(line 5392,col 5)-(line 5392,col 46)",
            "(line 5393,col 5)-(line 5393,col 54)",
            "(line 5394,col 5)-(line 5394,col 56)",
            "(line 5395,col 5)-(line 5395,col 75)",
            "(line 5396,col 5)-(line 5396,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()",
        "snippet": "  public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 2,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 5399,
        "end_line": 5410,
        "comment": "",
        "child_ranges": [
            "(line 5401,col 5)-(line 5403,col 43)",
            "(line 5405,col 5)-(line 5405,col 55)",
            "(line 5406,col 5)-(line 5407,col 43)",
            "(line 5408,col 5)-(line 5408,col 53)",
            "(line 5409,col 5)-(line 5409,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDontAddMethodsIfNoConstructor()",
        "snippet": "  public void testDontAddMethodsIfNoConstructor()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    JSType functionAType = js1Node.getFirstChild().getJSType();\n    assertEquals(\"function (): undefined\", functionAType.toString());\n    assertEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m1\"));\n    assertEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m2\"));\n  }\n",
        "begin_line": 5412,
        "end_line": 5424,
        "comment": "",
        "child_ranges": [
            "(line 5414,col 5)-(line 5416,col 43)",
            "(line 5418,col 5)-(line 5418,col 63)",
            "(line 5419,col 5)-(line 5419,col 69)",
            "(line 5420,col 5)-(line 5421,col 49)",
            "(line 5422,col 5)-(line 5423,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionAssignement()",
        "snippet": "  public void testFunctionAssignement() throws Exception {\n    testTypes(\"/**\" +\n        \"* @param {string} ph0\" +\n        \"* @param {string} ph1\" +\n        \"* @return {string}\" +\n        \"*/\" +\n        \"function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return ''}\" +\n        \"/** @type {Function} */\" +\n        \"var MSG_CALENDAR_ADD_ERROR = MSG_CALENDAR_ACCESS_ERROR;\");\n  }\n",
        "begin_line": 5426,
        "end_line": 5435,
        "comment": "",
        "child_ranges": [
            "(line 5427,col 5)-(line 5434,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddMethodsPrototypeTwoWays()",
        "snippet": "  public void testAddMethodsPrototypeTwoWays() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true};\" +\n        \"A.prototype.m3 = 'third property!';\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(\"A\", instanceType.toString());\n    assertEquals(NATIVE_PROPERTIES_COUNT + 3,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m3\", STRING_TYPE);\n  }\n",
        "begin_line": 5437,
        "end_line": 5450,
        "comment": "",
        "child_ranges": [
            "(line 5438,col 5)-(line 5441,col 47)",
            "(line 5443,col 5)-(line 5443,col 55)",
            "(line 5444,col 5)-(line 5444,col 47)",
            "(line 5445,col 5)-(line 5446,col 43)",
            "(line 5447,col 5)-(line 5447,col 53)",
            "(line 5448,col 5)-(line 5448,col 54)",
            "(line 5449,col 5)-(line 5449,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrototypePropertyTypes()",
        "snippet": "  public void testPrototypePropertyTypes() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {\\n\" +\n        \"  /** @type string */ this.m1;\\n\" +\n        \"  /** @type Object? */ this.m2 = {};\\n\" +\n        \"  /** @type boolean */ this.m3;\\n\" +\n        \"}\\n\" +\n        \"/** @type string */ A.prototype.m4;\\n\" +\n        \"/** @type number */ A.prototype.m5 = 0;\\n\" +\n        \"/** @type boolean */ A.prototype.m6;\\n\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 6,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", STRING_TYPE);\n    checkObjectType(instanceType, \"m2\",\n        createUnionType(createUnionType(OBJECT_TYPE, NULL_TYPE), VOID_TYPE));\n    checkObjectType(instanceType, \"m3\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m4\", STRING_TYPE);\n    checkObjectType(instanceType, \"m5\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m6\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 5452,
        "end_line": 5473,
        "comment": "",
        "child_ranges": [
            "(line 5453,col 5)-(line 5461,col 50)",
            "(line 5463,col 5)-(line 5463,col 55)",
            "(line 5464,col 5)-(line 5465,col 43)",
            "(line 5466,col 5)-(line 5466,col 53)",
            "(line 5467,col 5)-(line 5468,col 77)",
            "(line 5469,col 5)-(line 5469,col 54)",
            "(line 5470,col 5)-(line 5470,col 53)",
            "(line 5471,col 5)-(line 5471,col 53)",
            "(line 5472,col 5)-(line 5472,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueTypeBuiltInPrototypePropertyType()",
        "snippet": "  public void testValueTypeBuiltInPrototypePropertyType() throws Exception {\n    Node node = parseAndTypeCheck(\"\\\"x\\\".charAt(0)\");\n    assertEquals(STRING_TYPE, node.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5475,
        "end_line": 5478,
        "comment": "",
        "child_ranges": [
            "(line 5476,col 5)-(line 5476,col 53)",
            "(line 5477,col 5)-(line 5477,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDeclareBuiltInConstructor()",
        "snippet": "  public void testDeclareBuiltInConstructor() throws Exception {\n    // Built-in prototype properties should be accessible\n    // even if the built-in constructor is declared.\n    Node node = parseAndTypeCheck(\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"(new String(\\\"x\\\")).charAt(0)\");\n    assertEquals(STRING_TYPE, node.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5480,
        "end_line": 5487,
        "comment": "",
        "child_ranges": [
            "(line 5483,col 5)-(line 5485,col 41)",
            "(line 5486,col 5)-(line 5486,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendBuiltInType1()",
        "snippet": "  public void testExtendBuiltInType1() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n1 = parseAndTypeCheck(externs + \"(new String(\\\"x\\\")).substr(0,1);\");\n    assertEquals(STRING_TYPE, n1.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5489,
        "end_line": 5500,
        "comment": "",
        "child_ranges": [
            "(line 5490,col 5)-(line 5497,col 70)",
            "(line 5498,col 5)-(line 5498,col 78)",
            "(line 5499,col 5)-(line 5499,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendBuiltInType2()",
        "snippet": "  public void testExtendBuiltInType2() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n2 = parseAndTypeCheck(externs + \"\\\"x\\\".substr(0,1);\");\n    assertEquals(STRING_TYPE, n2.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5502,
        "end_line": 5513,
        "comment": "",
        "child_ranges": [
            "(line 5503,col 5)-(line 5510,col 70)",
            "(line 5511,col 5)-(line 5511,col 64)",
            "(line 5512,col 5)-(line 5512,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendFunction1()",
        "snippet": "  public void testExtendFunction1() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(new Function()).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 5515,
        "end_line": 5521,
        "comment": "",
        "child_ranges": [
            "(line 5516,col 5)-(line 5518,col 33)",
            "(line 5519,col 5)-(line 5519,col 62)",
            "(line 5520,col 5)-(line 5520,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendFunction2()",
        "snippet": "  public void testExtendFunction2() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(function() {}).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 5523,
        "end_line": 5529,
        "comment": "",
        "child_ranges": [
            "(line 5524,col 5)-(line 5526,col 32)",
            "(line 5527,col 5)-(line 5527,col 62)",
            "(line 5528,col 5)-(line 5528,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck1()",
        "snippet": "  public void testInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5531,
        "end_line": 5536,
        "comment": "",
        "child_ranges": [
            "(line 5532,col 5)-(line 5535,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck2()",
        "snippet": "  public void testInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"property foo not defined on any superclass of Sub\");\n  }\n",
        "begin_line": 5538,
        "end_line": 5544,
        "comment": "",
        "child_ranges": [
            "(line 5539,col 5)-(line 5543,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck3()",
        "snippet": "  public void testInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5546,
        "end_line": 5554,
        "comment": "",
        "child_ranges": [
            "(line 5547,col 5)-(line 5553,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck4()",
        "snippet": "  public void testInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5556,
        "end_line": 5562,
        "comment": "",
        "child_ranges": [
            "(line 5557,col 5)-(line 5561,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck5()",
        "snippet": "  public void testInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Root; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5564,
        "end_line": 5573,
        "comment": "",
        "child_ranges": [
            "(line 5565,col 5)-(line 5572,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck6()",
        "snippet": "  public void testInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5575,
        "end_line": 5582,
        "comment": "",
        "child_ranges": [
            "(line 5576,col 5)-(line 5581,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck7()",
        "snippet": "  public void testInheritanceCheck7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"goog.Sub.prototype.foo = 5;\",\n        \"property foo already defined on superclass goog.Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5584,
        "end_line": 5593,
        "comment": "",
        "child_ranges": [
            "(line 5585,col 5)-(line 5592,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck8()",
        "snippet": "  public void testInheritanceCheck8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 5595,
        "end_line": 5602,
        "comment": "",
        "child_ranges": [
            "(line 5596,col 5)-(line 5601,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck9_1()",
        "snippet": "  public void testInheritanceCheck9_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 5604,
        "end_line": 5611,
        "comment": "",
        "child_ranges": [
            "(line 5605,col 5)-(line 5610,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck9_2()",
        "snippet": "  public void testInheritanceCheck9_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 5613,
        "end_line": 5621,
        "comment": "",
        "child_ranges": [
            "(line 5614,col 5)-(line 5620,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck9_3()",
        "snippet": "  public void testInheritanceCheck9_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 5623,
        "end_line": 5635,
        "comment": "",
        "child_ranges": [
            "(line 5624,col 5)-(line 5634,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck10_1()",
        "snippet": "  public void testInheritanceCheck10_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() { return 4; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 5637,
        "end_line": 5645,
        "comment": "",
        "child_ranges": [
            "(line 5638,col 5)-(line 5644,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck10_2()",
        "snippet": "  public void testInheritanceCheck10_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 5647,
        "end_line": 5656,
        "comment": "",
        "child_ranges": [
            "(line 5648,col 5)-(line 5655,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck10_3()",
        "snippet": "  public void testInheritanceCheck10_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Root\\n\" +\n        \"original: function (this:Root): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 5658,
        "end_line": 5671,
        "comment": "",
        "child_ranges": [
            "(line 5659,col 5)-(line 5670,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck11()",
        "snippet": "  public void testInterfaceInheritanceCheck11() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 5673,
        "end_line": 5684,
        "comment": "",
        "child_ranges": [
            "(line 5674,col 5)-(line 5683,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck12()",
        "snippet": "  public void testInheritanceCheck12() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = \\\"some string\\\";\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass goog.Super\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 5686,
        "end_line": 5697,
        "comment": "",
        "child_ranges": [
            "(line 5687,col 5)-(line 5696,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck13()",
        "snippet": "  public void testInheritanceCheck13() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 5699,
        "end_line": 5705,
        "comment": "",
        "child_ranges": [
            "(line 5700,col 5)-(line 5704,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck14()",
        "snippet": "  public void testInheritanceCheck14() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */\\n\" +\n        \"goog.Super = function() {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 5707,
        "end_line": 5715,
        "comment": "",
        "child_ranges": [
            "(line 5708,col 5)-(line 5714,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck1()",
        "snippet": "  public void testInterfaceInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on interface Super; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 5747,
        "end_line": 5755,
        "comment": "",
        "child_ranges": [
            "(line 5748,col 5)-(line 5754,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck2()",
        "snippet": "  public void testInterfaceInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5757,
        "end_line": 5763,
        "comment": "",
        "child_ranges": [
            "(line 5758,col 5)-(line 5762,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck3()",
        "snippet": "  public void testInterfaceInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @return {number} */Sub.prototype.foo = function() { return 1;};\",\n        \"property foo already defined on interface Root; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 5765,
        "end_line": 5774,
        "comment": "",
        "child_ranges": [
            "(line 5766,col 5)-(line 5773,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck4()",
        "snippet": "  public void testInterfaceInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n * @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1;};\");\n  }\n",
        "begin_line": 5776,
        "end_line": 5784,
        "comment": "",
        "child_ranges": [
            "(line 5777,col 5)-(line 5783,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck5()",
        "snippet": "  public void testInterfaceInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @return {string} */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 5786,
        "end_line": 5797,
        "comment": "",
        "child_ranges": [
            "(line 5787,col 5)-(line 5796,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck6()",
        "snippet": "  public void testInterfaceInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {string} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Root\\n\" +\n        \"original: function (this:Root): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 5799,
        "end_line": 5811,
        "comment": "",
        "child_ranges": [
            "(line 5800,col 5)-(line 5810,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck7()",
        "snippet": "  public void testInterfaceInheritanceCheck7() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 5813,
        "end_line": 5824,
        "comment": "",
        "child_ranges": [
            "(line 5814,col 5)-(line 5823,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck8()",
        "snippet": "  public void testInterfaceInheritanceCheck8() throws Exception {\n    testTypes(\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        new String[] {\n          \"Bad type annotation. Unknown type Super\",\n          \"property foo not defined on any superclass of Sub\"\n        });\n  }\n",
        "begin_line": 5826,
        "end_line": 5834,
        "comment": "",
        "child_ranges": [
            "(line 5827,col 5)-(line 5833,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfacePropertyNotImplemented()",
        "snippet": "  public void testInterfacePropertyNotImplemented() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Int} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 5836,
        "end_line": 5842,
        "comment": "",
        "child_ranges": [
            "(line 5837,col 5)-(line 5841,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfacePropertyNotImplemented2()",
        "snippet": "  public void testInterfacePropertyNotImplemented2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int} */function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 5844,
        "end_line": 5851,
        "comment": "",
        "child_ranges": [
            "(line 5845,col 5)-(line 5850,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubConstructorImplementingInterface()",
        "snippet": "  public void testStubConstructorImplementingInterface() throws Exception {\n    // This does not throw a warning for unimplemented property because Foo is\n    // just a stub.\n    testTypes(\n        // externs\n        \"/** @interface */ function Int() {}\\n\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\",\n        \"\", null, false);\n  }\n",
        "begin_line": 5853,
        "end_line": 5862,
        "comment": "",
        "child_ranges": [
            "(line 5856,col 5)-(line 5861,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() throws Exception {\n    Node n = parseAndTypeCheck(\"var a = {m1: 7, m2: 'hello'}\");\n\n    Node nameNode = n.getFirstChild().getFirstChild();\n    Node objectNode = nameNode.getFirstChild();\n\n    // node extraction\n    assertEquals(Token.NAME, nameNode.getType());\n    assertEquals(Token.OBJECTLIT, objectNode.getType());\n\n    // value's type\n    ObjectType objectType =\n        (ObjectType) objectNode.getJSType();\n    assertEquals(NUMBER_TYPE, objectType.getPropertyType(\"m1\"));\n    assertEquals(STRING_TYPE, objectType.getPropertyType(\"m2\"));\n\n    // variable's type\n    assertEquals(objectType, nameNode.getJSType());\n  }\n",
        "begin_line": 5864,
        "end_line": 5882,
        "comment": "",
        "child_ranges": [
            "(line 5865,col 5)-(line 5865,col 63)",
            "(line 5867,col 5)-(line 5867,col 54)",
            "(line 5868,col 5)-(line 5868,col 47)",
            "(line 5871,col 5)-(line 5871,col 49)",
            "(line 5872,col 5)-(line 5872,col 56)",
            "(line 5875,col 5)-(line 5876,col 44)",
            "(line 5877,col 5)-(line 5877,col 64)",
            "(line 5878,col 5)-(line 5878,col 64)",
            "(line 5881,col 5)-(line 5881,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectLiteralDeclaration1()",
        "snippet": "  public void testObjectLiteralDeclaration1() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"/** @type {boolean} */ abc: true,\" +\n        \"/** @type {number} */ 'def': 0,\" +\n        \"/** @type {string} */ 3: 'fgh'\" +\n        \"};\");\n  }\n",
        "begin_line": 5884,
        "end_line": 5891,
        "comment": "",
        "child_ranges": [
            "(line 5885,col 5)-(line 5890,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCallDateConstructorAsFunction()",
        "snippet": "  public void testCallDateConstructorAsFunction() throws Exception {\n    // ECMA-262 15.9.2: When Date is called as a function rather than as a\n    // constructor, it returns a string.\n    Node n = parseAndTypeCheck(\"Date()\");\n    assertEquals(STRING_TYPE, n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5893,
        "end_line": 5898,
        "comment": "",
        "child_ranges": [
            "(line 5896,col 5)-(line 5896,col 41)",
            "(line 5897,col 5)-(line 5897,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCallErrorConstructorAsFunction()",
        "snippet": "  public void testCallErrorConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Error('x')\");\n    assertEquals(ERROR_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5903,
        "end_line": 5907,
        "comment": "",
        "child_ranges": [
            "(line 5904,col 5)-(line 5904,col 45)",
            "(line 5905,col 5)-(line 5906,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCallArrayConstructorAsFunction()",
        "snippet": "  public void testCallArrayConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Array()\");\n    assertEquals(ARRAY_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5909,
        "end_line": 5913,
        "comment": "",
        "child_ranges": [
            "(line 5910,col 5)-(line 5910,col 42)",
            "(line 5911,col 5)-(line 5912,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyTypeOfUnionType()",
        "snippet": "  public void testPropertyTypeOfUnionType() throws Exception {\n    testTypes(\"var a = {};\" +\n        \"/** @constructor */ a.N = function() {};\\n\" +\n        \"a.N.prototype.p = 1;\\n\" +\n        \"/** @constructor */ a.S = function() {};\\n\" +\n        \"a.S.prototype.p = 'a';\\n\" +\n        \"/** @param {!a.N|!a.S} x\\n@return {string} */\\n\" +\n        \"var f = function(x) { return x.p; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5915,
        "end_line": 5926,
        "comment": "",
        "child_ranges": [
            "(line 5916,col 5)-(line 5925,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface1()",
        "snippet": "  public void testAnnotatedPropertyOnInterface1() throws Exception {\n    // For interfaces we must allow function definitions that don't have a\n    // return statement, even though they declare a returned type.\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() {};\");\n  }\n",
        "begin_line": 5959,
        "end_line": 5964,
        "comment": "",
        "child_ranges": [
            "(line 5962,col 5)-(line 5963,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface2()",
        "snippet": "  public void testAnnotatedPropertyOnInterface2() throws Exception {\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 5966,
        "end_line": 5969,
        "comment": "",
        "child_ranges": [
            "(line 5967,col 5)-(line 5968,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface3()",
        "snippet": "  public void testAnnotatedPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 5971,
        "end_line": 5974,
        "comment": "",
        "child_ranges": [
            "(line 5972,col 5)-(line 5973,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface4()",
        "snippet": "  public void testAnnotatedPropertyOnInterface4() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = goog.abstractMethod;\");\n  }\n",
        "begin_line": 5976,
        "end_line": 5981,
        "comment": "",
        "child_ranges": [
            "(line 5977,col 5)-(line 5980,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnUnannotatedPropertyOnInterface5()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @desc x does something */u.T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 5995,
        "end_line": 5998,
        "comment": "",
        "child_ranges": [
            "(line 5996,col 5)-(line 5997,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnUnannotatedPropertyOnInterface6()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @desc x does something */T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 6000,
        "end_line": 6003,
        "comment": "",
        "child_ranges": [
            "(line 6001,col 5)-(line 6002,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnDataPropertyOnInterface3()",
        "snippet": "  public void testWarnDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @type {number} */u.T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 6019,
        "end_line": 6024,
        "comment": "",
        "child_ranges": [
            "(line 6020,col 5)-(line 6023,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnDataPropertyOnInterface4()",
        "snippet": "  public void testWarnDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 6026,
        "end_line": 6031,
        "comment": "",
        "child_ranges": [
            "(line 6027,col 5)-(line 6030,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testErrorMismatchingPropertyOnInterface4()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @param {Number} foo */u.T.prototype.x =\\n\" +\n        \"function() {};\",\n        \"parameter foo does not appear in u.T.prototype.x's parameter list\");\n  }\n",
        "begin_line": 6062,
        "end_line": 6067,
        "comment": "",
        "child_ranges": [
            "(line 6063,col 5)-(line 6066,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testErrorMismatchingPropertyOnInterface5()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = function() { };\",\n        \"assignment to property x of T.prototype\\n\" +\n        \"found   : function (): undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6069,
        "end_line": 6075,
        "comment": "",
        "child_ranges": [
            "(line 6070,col 5)-(line 6074,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testErrorMismatchingPropertyOnInterface6()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */T.prototype.x = 1\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\"\n        );\n  }\n",
        "begin_line": 6077,
        "end_line": 6083,
        "comment": "",
        "child_ranges": [
            "(line 6078,col 5)-(line 6082,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceNonEmptyFunction()",
        "snippet": "  public void testInterfaceNonEmptyFunction() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"T.prototype.x = function() { return 'foo'; }\",\n        \"interface member functions must have an empty body\"\n        );\n  }\n",
        "begin_line": 6085,
        "end_line": 6090,
        "comment": "",
        "child_ranges": [
            "(line 6086,col 5)-(line 6089,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDoubleNestedInterface()",
        "snippet": "  public void testDoubleNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @interface */ I1.I2.I3 = function() {};\\n\");\n  }\n",
        "begin_line": 6092,
        "end_line": 6096,
        "comment": "",
        "child_ranges": [
            "(line 6093,col 5)-(line 6095,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticDataPropertyOnNestedInterface()",
        "snippet": "  public void testStaticDataPropertyOnNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @type {number} */ I1.I2.x = 1;\\n\");\n  }\n",
        "begin_line": 6098,
        "end_line": 6102,
        "comment": "",
        "child_ranges": [
            "(line 6099,col 5)-(line 6101,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInstantiation()",
        "snippet": "  public void testInterfaceInstantiation() throws Exception {\n    testTypes(\"/** @interface */var f = function(){}; new f\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 6104,
        "end_line": 6107,
        "comment": "",
        "child_ranges": [
            "(line 6105,col 5)-(line 6106,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrototypeLoop()",
        "snippet": "  public void testPrototypeLoop() throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n        \"/** @constructor \\n * @extends {T} */var T = function() {};\" +\n        \"alert((new T).foo);\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type T\",\n            \"Could not resolve type in @extends tag of T\"));\n  }\n",
        "begin_line": 6109,
        "end_line": 6117,
        "comment": "",
        "child_ranges": [
            "(line 6110,col 5)-(line 6116,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDirectPrototypeAssign()",
        "snippet": "  public void testDirectPrototypeAssign() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @type {Array} */ Bar.prototype = new Foo()\",\n        \"assignment to property prototype of Bar\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: (Array|null|undefined)\");\n  }\n",
        "begin_line": 6119,
        "end_line": 6127,
        "comment": "",
        "child_ranges": [
            "(line 6120,col 5)-(line 6126,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry1()",
        "snippet": "  public void testResolutionViaRegistry1() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6132,
        "end_line": 6143,
        "comment": "",
        "child_ranges": [
            "(line 6133,col 5)-(line 6142,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry2()",
        "snippet": "  public void testResolutionViaRegistry2() throws Exception {\n    testTypes(\n        \"/** @constructor */ u.T = function() {\" +\n        \"  this.a = 0; };\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6145,
        "end_line": 6157,
        "comment": "",
        "child_ranges": [
            "(line 6146,col 5)-(line 6156,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry3()",
        "snippet": "  public void testResolutionViaRegistry3() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a = 0;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6159,
        "end_line": 6170,
        "comment": "",
        "child_ranges": [
            "(line 6160,col 5)-(line 6169,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry4()",
        "snippet": "  public void testResolutionViaRegistry4() throws Exception {\n    testTypes(\"/** @constructor */ u.A = function() {};\\n\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.A = function() {}\\n;\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.B = function() {};\\n\" +\n        \"var ab = new u.A.B();\\n\" +\n        \"/** @type {!u.A} */ var a = ab;\\n\" +\n        \"/** @type {!u.A.A} */ var aa = ab;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : u.A.B\\n\" +\n        \"required: u.A.A\");\n  }\n",
        "begin_line": 6172,
        "end_line": 6182,
        "comment": "",
        "child_ranges": [
            "(line 6173,col 5)-(line 6181,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry5()",
        "snippet": "  public void testResolutionViaRegistry5() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ u.T = function() {}; u.T\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof FunctionType);\n    assertEquals(\"u.T\",\n        ((FunctionType) type).getInstanceType().getReferenceName());\n  }\n",
        "begin_line": 6184,
        "end_line": 6191,
        "comment": "",
        "child_ranges": [
            "(line 6185,col 5)-(line 6185,col 79)",
            "(line 6186,col 5)-(line 6186,col 62)",
            "(line 6187,col 5)-(line 6187,col 38)",
            "(line 6188,col 5)-(line 6188,col 45)",
            "(line 6189,col 5)-(line 6190,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGatherProperyWithoutAnnotation1()",
        "snippet": "  public void testGatherProperyWithoutAnnotation1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ var T = function() {};\" +\n        \"/** @type {!T} */var t; t.x; t;\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    assertEquals(\n        Lists.newArrayList(objectType),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 6193,
        "end_line": 6204,
        "comment": "",
        "child_ranges": [
            "(line 6194,col 5)-(line 6195,col 43)",
            "(line 6196,col 5)-(line 6196,col 62)",
            "(line 6197,col 5)-(line 6197,col 38)",
            "(line 6198,col 5)-(line 6198,col 43)",
            "(line 6199,col 5)-(line 6199,col 46)",
            "(line 6200,col 5)-(line 6200,col 45)",
            "(line 6201,col 5)-(line 6203,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGatherProperyWithoutAnnotation2()",
        "snippet": "  public void testGatherProperyWithoutAnnotation2() throws Exception {\n    TypeCheckResult ns =\n        parseAndTypeCheckWithScope(\"/** @type {!Object} */var t; t.x; t;\");\n    Node n = ns.root;\n    Scope s = ns.scope;\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertEquals(type, OBJECT_TYPE);\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    assertEquals(\n        Lists.newArrayList(OBJECT_TYPE),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 6206,
        "end_line": 6220,
        "comment": "",
        "child_ranges": [
            "(line 6207,col 5)-(line 6208,col 75)",
            "(line 6209,col 5)-(line 6209,col 21)",
            "(line 6210,col 5)-(line 6210,col 23)",
            "(line 6211,col 5)-(line 6211,col 62)",
            "(line 6212,col 5)-(line 6212,col 38)",
            "(line 6213,col 5)-(line 6213,col 36)",
            "(line 6214,col 5)-(line 6214,col 43)",
            "(line 6215,col 5)-(line 6215,col 46)",
            "(line 6216,col 5)-(line 6216,col 45)",
            "(line 6217,col 5)-(line 6219,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionMasksVariableBug()",
        "snippet": "  public void testFunctionMasksVariableBug() throws Exception {\n    testTypes(\"var x = 4; var f = function x(b) { return b ? 1 : x(true); };\",\n        \"function x masks variable (IE bug)\");\n  }\n",
        "begin_line": 6222,
        "end_line": 6225,
        "comment": "",
        "child_ranges": [
            "(line 6223,col 5)-(line 6224,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa1()",
        "snippet": "  public void testDfa1() throws Exception {\n    testTypes(\"var x = null;\\n x = 1;\\n /** @type number */ var y = x;\");\n  }\n",
        "begin_line": 6227,
        "end_line": 6229,
        "comment": "",
        "child_ranges": [
            "(line 6228,col 5)-(line 6228,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa2()",
        "snippet": "  public void testDfa2() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\nvar x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 6231,
        "end_line": 6235,
        "comment": "",
        "child_ranges": [
            "(line 6232,col 5)-(line 6234,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa3()",
        "snippet": "  public void testDfa3() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\n\" +\n        \"/** @type {number|string} */ var x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 6237,
        "end_line": 6242,
        "comment": "",
        "child_ranges": [
            "(line 6238,col 5)-(line 6241,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa4()",
        "snippet": "  public void testDfa4() throws Exception {\n    testTypes(\"/** @param {Date?} d */ function f(d) {\\n\" +\n        \"if (!d) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = d;\\n}\");\n  }\n",
        "begin_line": 6244,
        "end_line": 6248,
        "comment": "",
        "child_ranges": [
            "(line 6245,col 5)-(line 6247,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa5()",
        "snippet": "  public void testDfa5() throws Exception {\n    testTypes(\"/** @return {string?} */ function u() {return 'a';}\\n\" +\n        \"/** @param {string?} x\\n@return {string} */ function f(x) {\\n\" +\n        \"while (!x) { x = u(); }\\nreturn x;\\n}\");\n  }\n",
        "begin_line": 6250,
        "end_line": 6254,
        "comment": "",
        "child_ranges": [
            "(line 6251,col 5)-(line 6253,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa6()",
        "snippet": "  public void testDfa6() throws Exception {\n    testTypes(\"/** @return {Object?} */ function u() {return {};}\\n\" +\n        \"/** @param {Object?} x */ function f(x) {\\n\" +\n        \"while (x) { x = u(); if (!x) { x = u(); } }\\n}\");\n  }\n",
        "begin_line": 6256,
        "end_line": 6260,
        "comment": "",
        "child_ranges": [
            "(line 6257,col 5)-(line 6259,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa7()",
        "snippet": "  public void testDfa7() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {Date?} */ T.prototype.x = null;\\n\" +\n        \"/** @param {!T} t */ function f(t) {\\n\" +\n        \"if (!t.x) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = t.x;\\n}\");\n  }\n",
        "begin_line": 6262,
        "end_line": 6268,
        "comment": "",
        "child_ranges": [
            "(line 6263,col 5)-(line 6267,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa8()",
        "snippet": "  public void testDfa8() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {number|string} */ T.prototype.x = '';\\n\" +\n        \"function u() {}\\n\" +\n        \"/** @param {!T} t\\n@return {number} */ function f(t) {\\n\" +\n        \"if (u()) { t.x = 1; } else { t.x = 2; } return t.x;\\n}\");\n  }\n",
        "begin_line": 6270,
        "end_line": 6276,
        "comment": "",
        "child_ranges": [
            "(line 6271,col 5)-(line 6275,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa9()",
        "snippet": "  public void testDfa9() throws Exception {\n    testTypes(\"function f() {\\n/** @type {string?} */var x;\\nx = null;\\n\" +\n        \"if (x == null) { return 0; } else { return 1; } }\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 6278,
        "end_line": 6284,
        "comment": "",
        "child_ranges": [
            "(line 6279,col 5)-(line 6283,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa10()",
        "snippet": "  public void testDfa10() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {string?} x */function f(x) {\\n\" +\n        \"if (!x) { x = ''; }\\n\" +\n        \"if (g(x)) { return 0; } else { return 1; } }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 6286,
        "end_line": 6294,
        "comment": "",
        "child_ranges": [
            "(line 6287,col 5)-(line 6293,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa11()",
        "snippet": "  public void testDfa11() throws Exception {\n    testTypes(\"/** @param {string} opt_x\\n@return {string} */\\n\" +\n        \"function f(opt_x) { if (!opt_x) { \" +\n        \"throw new Error('x cannot be empty'); } return opt_x; }\");\n  }\n",
        "begin_line": 6296,
        "end_line": 6300,
        "comment": "",
        "child_ranges": [
            "(line 6297,col 5)-(line 6299,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa12()",
        "snippet": "  public void testDfa12() throws Exception {\n    testTypes(\"/** @param {string} x \\n * @constructor \\n */\" +\n        \"var Bar = function(x) {};\" +\n        \"/** @param {string} x */ function g(x) { return true; }\" +\n        \"/** @param {string|number} opt_x */ \" +\n        \"function f(opt_x) { \" +\n        \"  if (opt_x) { new Bar(g(opt_x) && 'x'); }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6302,
        "end_line": 6313,
        "comment": "",
        "child_ranges": [
            "(line 6303,col 5)-(line 6312,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa13()",
        "snippet": "  public void testDfa13() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @param {number} y \\n\" +\n        \" * @param {number} z \\n\" +\n        \" */\" +\n        \"function g(x, y, z) {}\" +\n        \"function f() { \" +\n        \"  var x = 'a'; g(x, x = 3, x);\" +\n        \"}\");\n  }\n",
        "begin_line": 6315,
        "end_line": 6326,
        "comment": "",
        "child_ranges": [
            "(line 6316,col 5)-(line 6325,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast1()",
        "snippet": "  public void testTypeInferenceWithCast1() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 6328,
        "end_line": 6334,
        "comment": "",
        "child_ranges": [
            "(line 6329,col 5)-(line 6333,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast2()",
        "snippet": "  public void testTypeInferenceWithCast2() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y; y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 6336,
        "end_line": 6342,
        "comment": "",
        "child_ranges": [
            "(line 6337,col 5)-(line 6341,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast3()",
        "snippet": "  public void testTypeInferenceWithCast3() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x));}\");\n  }\n",
        "begin_line": 6344,
        "end_line": 6349,
        "comment": "",
        "child_ranges": [
            "(line 6345,col 5)-(line 6348,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast4()",
        "snippet": "  public void testTypeInferenceWithCast4() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x)) && 1;}\");\n  }\n",
        "begin_line": 6351,
        "end_line": 6356,
        "comment": "",
        "child_ranges": [
            "(line 6352,col 5)-(line 6355,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast5()",
        "snippet": "  public void testTypeInferenceWithCast5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function foo(x) {}\" +\n        \"/** @param {{length:*}} y */ function bar(y) {\" +\n        \"  /** @type {string} */ y.length;\" +\n        \"  foo(y.length);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6358,
        "end_line": 6368,
        "comment": "",
        "child_ranges": [
            "(line 6359,col 5)-(line 6367,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithClosure1()",
        "snippet": "  public void testTypeInferenceWithClosure1() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 6370,
        "end_line": 6378,
        "comment": "",
        "child_ranges": [
            "(line 6371,col 5)-(line 6377,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithClosure2()",
        "snippet": "  public void testTypeInferenceWithClosure2() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x === 3;\" +\n        \"}\",\n        \"condition always evaluates to the same value\\n\" +\n        \"left : (null|string|undefined)\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 6380,
        "end_line": 6391,
        "comment": "",
        "child_ranges": [
            "(line 6381,col 5)-(line 6390,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardPropertyReference()",
        "snippet": "  public void testForwardPropertyReference() throws Exception {\n    testTypes(\"/** @constructor */ var Foo = function() { this.init(); };\" +\n        \"/** @return {string} */\" +\n        \"Foo.prototype.getString = function() {\" +\n        \"  return this.number_;\" +\n        \"};\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {number} */\" +\n        \"  this.number_ = 3;\" +\n        \"};\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6393,
        "end_line": 6406,
        "comment": "",
        "child_ranges": [
            "(line 6394,col 5)-(line 6405,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoForwardTypeDeclaration()",
        "snippet": "  public void testNoForwardTypeDeclaration() throws Exception {\n    testTypes(\n        \"/** @param {MyType} x */ function f(x) {}\",\n        \"Bad type annotation. Unknown type MyType\");\n  }\n",
        "begin_line": 6408,
        "end_line": 6412,
        "comment": "",
        "child_ranges": [
            "(line 6409,col 5)-(line 6411,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoForwardTypeDeclarationAndNoBraces()",
        "snippet": "  public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n    testTypes(\"/** @return The result. */ function f() {}\");\n  }\n",
        "begin_line": 6414,
        "end_line": 6416,
        "comment": "",
        "child_ranges": [
            "(line 6415,col 5)-(line 6415,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardTypeDeclaration1()",
        "snippet": "  public void testForwardTypeDeclaration1() throws Exception {\n    testClosureTypes(\n        // malformed addDependency calls shouldn't cause a crash\n        \"goog.addDependency();\" +\n        \"goog.addDependency('y', [goog]);\" +\n\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x \\n * @return {number} */\" +\n        \"function f(x) { return 3; }\", null);\n  }\n",
        "begin_line": 6418,
        "end_line": 6427,
        "comment": "",
        "child_ranges": [
            "(line 6419,col 5)-(line 6426,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardTypeDeclaration2()",
        "snippet": "  public void testForwardTypeDeclaration2() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null|undefined)\");\n  }\n",
        "begin_line": 6429,
        "end_line": 6437,
        "comment": "",
        "child_ranges": [
            "(line 6430,col 5)-(line 6431,col 53)",
            "(line 6432,col 5)-(line 6432,col 30)",
            "(line 6433,col 5)-(line 6436,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardTypeDeclaration3()",
        "snippet": "  public void testForwardTypeDeclaration3() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null|undefined)\");\n  }\n",
        "begin_line": 6439,
        "end_line": 6448,
        "comment": "",
        "child_ranges": [
            "(line 6440,col 5)-(line 6447,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateTypeDef()",
        "snippet": "  public void testDuplicateTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @typedef {number} */ goog.Bar;\",\n        \"variable goog.Bar redefined with type None, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (new:goog.Bar): undefined\");\n  }\n",
        "begin_line": 6450,
        "end_line": 6458,
        "comment": "",
        "child_ranges": [
            "(line 6451,col 5)-(line 6457,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeDef1()",
        "snippet": "  public void testTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 6460,
        "end_line": 6466,
        "comment": "",
        "child_ranges": [
            "(line 6461,col 5)-(line 6465,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeDef2()",
        "snippet": "  public void testTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6468,
        "end_line": 6477,
        "comment": "",
        "child_ranges": [
            "(line 6469,col 5)-(line 6476,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeDef3()",
        "snippet": "  public void testTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ var Bar;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6479,
        "end_line": 6488,
        "comment": "",
        "child_ranges": [
            "(line 6480,col 5)-(line 6487,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCircularTypeDef()",
        "snippet": "  public void testCircularTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number|Array.<goog.Bar>} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 6490,
        "end_line": 6496,
        "comment": "",
        "child_ranges": [
            "(line 6491,col 5)-(line 6495,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent1()",
        "snippet": "  public void testGetTypedPercent1() throws Exception {\n    String js = \"var id = function(x) { return x; }\\n\" +\n                \"var id2 = function(x) { return id(x); }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6498,
        "end_line": 6502,
        "comment": "",
        "child_ranges": [
            "(line 6499,col 5)-(line 6500,col 58)",
            "(line 6501,col 5)-(line 6501,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent2()",
        "snippet": "  public void testGetTypedPercent2() throws Exception {\n    String js = \"var x = {}; x.y = 1;\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6504,
        "end_line": 6507,
        "comment": "",
        "child_ranges": [
            "(line 6505,col 5)-(line 6505,col 39)",
            "(line 6506,col 5)-(line 6506,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent3()",
        "snippet": "  public void testGetTypedPercent3() throws Exception {\n    String js = \"var f = function(x) { x.a = x.b; }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6509,
        "end_line": 6512,
        "comment": "",
        "child_ranges": [
            "(line 6510,col 5)-(line 6510,col 53)",
            "(line 6511,col 5)-(line 6511,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent4()",
        "snippet": "  public void testGetTypedPercent4() throws Exception {\n    String js = \"var n = {};\\n /** @constructor */ n.T = function() {};\\n\" +\n        \"/** @type n.T */ var x = new n.T();\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6514,
        "end_line": 6518,
        "comment": "",
        "child_ranges": [
            "(line 6515,col 5)-(line 6516,col 46)",
            "(line 6517,col 5)-(line 6517,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.getTypedPercent(java.lang.String)",
        "snippet": "  private double getTypedPercent(String js) throws Exception {\n    Node n = compiler.parseTestCode(js);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    TypeCheck t = makeTypeCheck();\n    t.processForTesting(null, n);\n    return t.getTypedPercent();\n  }\n",
        "begin_line": 6520,
        "end_line": 6530,
        "comment": "",
        "child_ranges": [
            "(line 6521,col 5)-(line 6521,col 40)",
            "(line 6523,col 5)-(line 6523,col 41)",
            "(line 6524,col 5)-(line 6524,col 61)",
            "(line 6525,col 5)-(line 6525,col 46)",
            "(line 6527,col 5)-(line 6527,col 34)",
            "(line 6528,col 5)-(line 6528,col 33)",
            "(line 6529,col 5)-(line 6529,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.getInstanceType(com.google.javascript.rhino.Node)",
        "snippet": "  private ObjectType getInstanceType(Node js1Node) {\n    JSType type = js1Node.getFirstChild().getJSType();\n    assertNotNull(type);\n    assertTrue(type instanceof FunctionType);\n    FunctionType functionType = (FunctionType) type;\n    assertTrue(functionType.isConstructor());\n    return functionType.getInstanceType();\n  }\n",
        "begin_line": 6532,
        "end_line": 6539,
        "comment": "",
        "child_ranges": [
            "(line 6533,col 5)-(line 6533,col 54)",
            "(line 6534,col 5)-(line 6534,col 24)",
            "(line 6535,col 5)-(line 6535,col 45)",
            "(line 6536,col 5)-(line 6536,col 52)",
            "(line 6537,col 5)-(line 6537,col 45)",
            "(line 6538,col 5)-(line 6538,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrototypePropertyReference()",
        "snippet": "  public void testPrototypePropertyReference() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.bar = function(a){};\\n\"\n        + \"/** @param {Foo} f */\\n\"\n        + \"function baz(f) {\\n\"\n        + \"  Foo.prototype.bar.call(f, 3);\\n\"\n        + \"}\");\n    assertEquals(0, compiler.getErrorCount());\n    assertEquals(0, compiler.getWarningCount());\n\n    assertTrue(p.scope.getVar(\"Foo\").getType() instanceof FunctionType);\n    FunctionType fooType = (FunctionType) p.scope.getVar(\"Foo\").getType();\n    assertEquals(\"function (this:Foo, number): undefined\",\n                 fooType.getPrototype().getPropertyType(\"bar\").toString());\n  }\n",
        "begin_line": 6541,
        "end_line": 6558,
        "comment": "",
        "child_ranges": [
            "(line 6542,col 5)-(line 6550,col 15)",
            "(line 6551,col 5)-(line 6551,col 46)",
            "(line 6552,col 5)-(line 6552,col 48)",
            "(line 6554,col 5)-(line 6554,col 72)",
            "(line 6555,col 5)-(line 6555,col 74)",
            "(line 6556,col 5)-(line 6557,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolvingNamedTypes()",
        "snippet": "  public void testResolvingNamedTypes() throws Exception {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"var Foo = function() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.foo = function(a) {\\n\"\n        + \"  return this.baz().toString();\\n\"\n        + \"};\\n\"\n        + \"/** @return {Baz} */\\n\"\n        + \"Foo.prototype.baz = function() { return new Baz(); };\\n\"\n        + \"/** @constructor\\n\"\n        + \"  * @extends Foo */\\n\"\n        + \"var Bar = function() {};\"\n        + \"/** @constructor */\\n\"\n        + \"var Baz = function() {};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6560,
        "end_line": 6576,
        "comment": "",
        "child_ranges": [
            "(line 6561,col 5)-(line 6574,col 37)",
            "(line 6575,col 5)-(line 6575,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty1()",
        "snippet": "  public void testMissingProperty1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.a = 3; };\");\n  }\n",
        "begin_line": 6578,
        "end_line": 6583,
        "comment": "",
        "child_ranges": [
            "(line 6579,col 5)-(line 6582,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty2()",
        "snippet": "  public void testMissingProperty2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 6585,
        "end_line": 6591,
        "comment": "",
        "child_ranges": [
            "(line 6586,col 5)-(line 6590,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty3()",
        "snippet": "  public void testMissingProperty3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).a = 3;\");\n  }\n",
        "begin_line": 6593,
        "end_line": 6598,
        "comment": "",
        "child_ranges": [
            "(line 6594,col 5)-(line 6597,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty4()",
        "snippet": "  public void testMissingProperty4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).b = 3;\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 6600,
        "end_line": 6606,
        "comment": "",
        "child_ranges": [
            "(line 6601,col 5)-(line 6605,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty5()",
        "snippet": "  public void testMissingProperty5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor */ function Bar() { this.a = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 6608,
        "end_line": 6614,
        "comment": "",
        "child_ranges": [
            "(line 6609,col 5)-(line 6613,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty6()",
        "snippet": "  public void testMissingProperty6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ \" +\n        \"function Bar() { this.a = 3; };\");\n  }\n",
        "begin_line": 6616,
        "end_line": 6622,
        "comment": "",
        "child_ranges": [
            "(line 6617,col 5)-(line 6621,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty7()",
        "snippet": "  public void testMissingProperty7() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return obj.impossible; }\",\n        \"Property impossible never defined on Object\");\n  }\n",
        "begin_line": 6624,
        "end_line": 6629,
        "comment": "",
        "child_ranges": [
            "(line 6625,col 5)-(line 6628,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty8()",
        "snippet": "  public void testMissingProperty8() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return typeof obj.impossible; }\");\n  }\n",
        "begin_line": 6631,
        "end_line": 6635,
        "comment": "",
        "child_ranges": [
            "(line 6632,col 5)-(line 6634,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty9()",
        "snippet": "  public void testMissingProperty9() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { if (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 6637,
        "end_line": 6641,
        "comment": "",
        "child_ranges": [
            "(line 6638,col 5)-(line 6640,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty10()",
        "snippet": "  public void testMissingProperty10() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { while (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 6643,
        "end_line": 6647,
        "comment": "",
        "child_ranges": [
            "(line 6644,col 5)-(line 6646,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty11()",
        "snippet": "  public void testMissingProperty11() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { for (;obj.impossible;) { return true; } }\");\n  }\n",
        "begin_line": 6649,
        "end_line": 6653,
        "comment": "",
        "child_ranges": [
            "(line 6650,col 5)-(line 6652,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty12()",
        "snippet": "  public void testMissingProperty12() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { do { } while (obj.impossible); }\");\n  }\n",
        "begin_line": 6655,
        "end_line": 6659,
        "comment": "",
        "child_ranges": [
            "(line 6656,col 5)-(line 6658,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty13()",
        "snippet": "  public void testMissingProperty13() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isDef(obj.impossible); }\");\n  }\n",
        "begin_line": 6661,
        "end_line": 6666,
        "comment": "",
        "child_ranges": [
            "(line 6662,col 5)-(line 6665,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty14()",
        "snippet": "  public void testMissingProperty14() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isNull(obj.impossible); }\",\n        \"Property isNull never defined on goog\");\n  }\n",
        "begin_line": 6668,
        "end_line": 6674,
        "comment": "",
        "child_ranges": [
            "(line 6669,col 5)-(line 6673,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty15()",
        "snippet": "  public void testMissingProperty15() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { x.foo(); } }\");\n  }\n",
        "begin_line": 6676,
        "end_line": 6680,
        "comment": "",
        "child_ranges": [
            "(line 6677,col 5)-(line 6679,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty16()",
        "snippet": "  public void testMissingProperty16() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo(); if (x.foo) {} }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 6682,
        "end_line": 6687,
        "comment": "",
        "child_ranges": [
            "(line 6683,col 5)-(line 6686,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty17()",
        "snippet": "  public void testMissingProperty17() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (typeof x.foo == 'function') { x.foo(); } }\");\n  }\n",
        "begin_line": 6689,
        "end_line": 6693,
        "comment": "",
        "child_ranges": [
            "(line 6690,col 5)-(line 6692,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty18()",
        "snippet": "  public void testMissingProperty18() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo instanceof Function) { x.foo(); } }\");\n  }\n",
        "begin_line": 6695,
        "end_line": 6699,
        "comment": "",
        "child_ranges": [
            "(line 6696,col 5)-(line 6698,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty19()",
        "snippet": "  public void testMissingProperty19() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 6701,
        "end_line": 6706,
        "comment": "",
        "child_ranges": [
            "(line 6702,col 5)-(line 6705,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty20()",
        "snippet": "  public void testMissingProperty20() throws Exception {\n    // NOTE(nicksantos): In the else branch, we know that x.foo is a\n    // CHECKED_UNKNOWN (UNKNOWN restricted to a falsey value). We could\n    // do some more sophisticated analysis here. Obviously, if x.foo is false,\n    // then x.foo cannot possibly be called. For example, you could imagine a\n    // VagueType that was like UnknownType, but had some constraints on it\n    // so that we knew it could never be a function.\n    //\n    // For now, we just punt on this issue.\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { } else { x.foo(); } }\");\n  }\n",
        "begin_line": 6708,
        "end_line": 6720,
        "comment": "",
        "child_ranges": [
            "(line 6717,col 5)-(line 6719,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty21()",
        "snippet": "  public void testMissingProperty21() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo && x.foo(); }\");\n  }\n",
        "begin_line": 6722,
        "end_line": 6726,
        "comment": "",
        "child_ranges": [
            "(line 6723,col 5)-(line 6725,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty22()",
        "snippet": "  public void testMissingProperty22() throws Exception {\n    testTypes(\n        \"/** @param {Object} x \\n * @return {boolean} */\" +\n        \"function f(x) { return x.foo ? x.foo() : true; }\");\n  }\n",
        "begin_line": 6728,
        "end_line": 6732,
        "comment": "",
        "child_ranges": [
            "(line 6729,col 5)-(line 6731,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty23()",
        "snippet": "  public void testMissingProperty23() throws Exception {\n    testTypes(\n        \"function f(x) { x.impossible(); }\",\n        \"Property impossible never defined on x\");\n  }\n",
        "begin_line": 6734,
        "end_line": 6738,
        "comment": "",
        "child_ranges": [
            "(line 6735,col 5)-(line 6737,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty24()",
        "snippet": "  public void testMissingProperty24() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {MissingType} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 6740,
        "end_line": 6745,
        "comment": "",
        "child_ranges": [
            "(line 6741,col 5)-(line 6744,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty25()",
        "snippet": "  public void testMissingProperty25() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"(new FooAlias()).bar();\");\n  }\n",
        "begin_line": 6747,
        "end_line": 6753,
        "comment": "",
        "child_ranges": [
            "(line 6748,col 5)-(line 6752,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty26()",
        "snippet": "  public void testMissingProperty26() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"FooAlias.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\");\n  }\n",
        "begin_line": 6755,
        "end_line": 6761,
        "comment": "",
        "child_ranges": [
            "(line 6756,col 5)-(line 6760,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty27()",
        "snippet": "  public void testMissingProperty27() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {?MissingType} x */\" +\n        \"function f(x) {\" +\n        \"  for (var parent = x; parent; parent = parent.getParent()) {}\" +\n        \"}\", null);\n  }\n",
        "begin_line": 6763,
        "end_line": 6770,
        "comment": "",
        "child_ranges": [
            "(line 6764,col 5)-(line 6769,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty28()",
        "snippet": "  public void testMissingProperty28() throws Exception {\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foo;\" +\n        \"}\");\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foox;\" +\n        \"}\",\n        \"Property foox never defined on obj\");\n  }\n",
        "begin_line": 6772,
        "end_line": 6784,
        "comment": "",
        "child_ranges": [
            "(line 6773,col 5)-(line 6777,col 13)",
            "(line 6778,col 5)-(line 6783,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty29()",
        "snippet": "  public void testMissingProperty29() throws Exception {\n    // This used to emit a warning.\n    testTypes(\n        // externs\n        \"/** @constructor */ var Foo;\" +\n        \"Foo.prototype.opera;\" +\n        \"Foo.prototype.opera.postError;\",\n        \"\",\n        null,\n        false);\n  }\n",
        "begin_line": 6786,
        "end_line": 6796,
        "comment": "",
        "child_ranges": [
            "(line 6788,col 5)-(line 6795,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDeclaredNativeTypeEquality()",
        "snippet": "  public void testDeclaredNativeTypeEquality() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Object() {};\");\n    assertEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n                 n.getFirstChild().getJSType());\n  }\n",
        "begin_line": 6798,
        "end_line": 6802,
        "comment": "",
        "child_ranges": [
            "(line 6799,col 5)-(line 6799,col 76)",
            "(line 6800,col 5)-(line 6801,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUndefinedVar()",
        "snippet": "  public void testUndefinedVar() throws Exception {\n    Node n = parseAndTypeCheck(\"var undefined;\");\n    assertEquals(registry.getNativeType(JSTypeNative.VOID_TYPE),\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6804,
        "end_line": 6808,
        "comment": "",
        "child_ranges": [
            "(line 6805,col 5)-(line 6805,col 49)",
            "(line 6806,col 5)-(line 6807,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFlowScopeBug1()",
        "snippet": "  public void testFlowScopeBug1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @param {number} a \\n\"\n        + \"* @param {number} b */\\n\"\n        + \"function f(a, b) {\\n\"\n        + \"/** @type number */\"\n        + \"var i = 0;\"\n        + \"for (; (i + a) < b; ++i) {}}\");\n\n    // check the type of the add node for i + f\n    assertEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE),\n        n.getFirstChild().getLastChild().getLastChild().getFirstChild()\n        .getNext().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6810,
        "end_line": 6822,
        "comment": "",
        "child_ranges": [
            "(line 6811,col 5)-(line 6816,col 42)",
            "(line 6819,col 5)-(line 6821,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFlowScopeBug2()",
        "snippet": "  public void testFlowScopeBug2() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.hi = false;\"\n        + \"function foo(a, b) {\\n\"\n        + \"  /** @type Array */\"\n        + \"  var arr;\"\n        + \"  /** @type number */\"\n        + \"  var iter;\"\n        + \"  for (iter = 0; iter < arr.length; ++ iter) {\"\n        + \"    /** @type Foo */\"\n        + \"    var afoo = arr[iter];\"\n        + \"    afoo;\"\n        + \"  }\"\n        + \"}\");\n\n    // check the type of afoo when referenced\n    assertEquals(registry.createOptionalType(\n            registry.createNullableType(registry.getType(\"Foo\"))),\n        n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild().getJSType());\n  }\n",
        "begin_line": 6824,
        "end_line": 6844,
        "comment": "",
        "child_ranges": [
            "(line 6825,col 5)-(line 6837,col 15)",
            "(line 6840,col 5)-(line 6843,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddSingletonGetter()",
        "snippet": "  public void testAddSingletonGetter() {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {};\\n\" +\n        \"goog.addSingletonGetter(Foo);\");\n    ObjectType o = (ObjectType) n.getFirstChild().getJSType();\n    assertEquals(\"function (): Foo\",\n        o.getPropertyType(\"getInstance\").toString());\n    assertEquals(\"Foo\", o.getPropertyType(\"instance_\").toString());\n  }\n",
        "begin_line": 6846,
        "end_line": 6854,
        "comment": "",
        "child_ranges": [
            "(line 6847,col 5)-(line 6849,col 41)",
            "(line 6850,col 5)-(line 6850,col 62)",
            "(line 6851,col 5)-(line 6852,col 53)",
            "(line 6853,col 5)-(line 6853,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckStandaloneAST()",
        "snippet": "  public void testTypeCheckStandaloneAST() throws Exception {\n    Node n = compiler.parseTestCode(\"function Foo() { }\");\n    typeCheck(n);\n    TypedScopeCreator scopeCreator = new TypedScopeCreator(compiler);\n    Scope topScope = scopeCreator.createScope(n, null);\n\n    Node second = compiler.parseTestCode(\"new Foo\");\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, second);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry, topScope, scopeCreator, CheckLevel.WARNING, CheckLevel.OFF)\n        .process(null, second);\n\n    assertEquals(1, compiler.getWarningCount());\n    assertEquals(\"cannot instantiate non-constructor\",\n        compiler.getWarnings()[0].description);\n  }\n",
        "begin_line": 6856,
        "end_line": 6878,
        "comment": "",
        "child_ranges": [
            "(line 6857,col 5)-(line 6857,col 58)",
            "(line 6858,col 5)-(line 6858,col 17)",
            "(line 6859,col 5)-(line 6859,col 69)",
            "(line 6860,col 5)-(line 6860,col 55)",
            "(line 6862,col 5)-(line 6862,col 52)",
            "(line 6864,col 5)-(line 6864,col 41)",
            "(line 6865,col 5)-(line 6865,col 66)",
            "(line 6866,col 5)-(line 6866,col 46)",
            "(line 6868,col 5)-(line 6873,col 31)",
            "(line 6875,col 5)-(line 6875,col 48)",
            "(line 6876,col 5)-(line 6877,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadTemplateType1()",
        "snippet": "  public void testBadTemplateType1() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {T} y\\n\" +\n        \"* @param {function(this:T, ...)} z\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y, z) {}\\n\" +\n        \"f(this, this, function() { this });\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format());\n  }\n",
        "begin_line": 6880,
        "end_line": 6891,
        "comment": "",
        "child_ranges": [
            "(line 6881,col 5)-(line 6890,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadTemplateType2()",
        "snippet": "  public void testBadTemplateType2() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {function(this:T, ...)} y\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y) {}\\n\" +\n        \"f(0, function() {});\",\n        TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(\"number\"));\n  }\n",
        "begin_line": 6893,
        "end_line": 6903,
        "comment": "",
        "child_ranges": [
            "(line 6894,col 5)-(line 6902,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadTemplateType3()",
        "snippet": "  public void testBadTemplateType3() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {T} x\\n\" +\n        \" * @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x) {}\\n\" +\n        \"f(this);\",\n        TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format());\n  }\n",
        "begin_line": 6905,
        "end_line": 6914,
        "comment": "",
        "child_ranges": [
            "(line 6906,col 5)-(line 6913,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadTemplateType4()",
        "snippet": "  public void testBadTemplateType4() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n  }\n",
        "begin_line": 6916,
        "end_line": 6924,
        "comment": "",
        "child_ranges": [
            "(line 6917,col 5)-(line 6923,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadTemplateType5()",
        "snippet": "  public void testBadTemplateType5() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"* @return {T}\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n  }\n",
        "begin_line": 6926,
        "end_line": 6935,
        "comment": "",
        "child_ranges": [
            "(line 6927,col 5)-(line 6934,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.checkObjectType(com.google.javascript.rhino.jstype.ObjectType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void checkObjectType(ObjectType objectType, String propertyName,\n        JSType expectedType) {\n    assertTrue(\"Expected \" + objectType.getReferenceName() +\n        \" to have property \" +\n        propertyName, objectType.hasProperty(propertyName));\n    assertEquals(\"Expected \" + objectType.getReferenceName() +\n        \"'s property \" +\n        propertyName + \" to have type \" + expectedType,\n        expectedType, objectType.getPropertyType(propertyName));\n  }\n",
        "begin_line": 6937,
        "end_line": 6946,
        "comment": "",
        "child_ranges": [
            "(line 6939,col 5)-(line 6941,col 60)",
            "(line 6942,col 5)-(line 6945,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String)",
        "snippet": "  private void testTypes(String js) throws Exception {\n    testTypes(js, (String) null);\n  }\n",
        "begin_line": 6948,
        "end_line": 6950,
        "comment": "",
        "child_ranges": [
            "(line 6949,col 5)-(line 6949,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testTypes(String js, String description) throws Exception {\n    testTypes(js, description, false);\n  }\n",
        "begin_line": 6952,
        "end_line": 6954,
        "comment": "",
        "child_ranges": [
            "(line 6953,col 5)-(line 6953,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testTypes(String js, DiagnosticType type) throws Exception {\n    testTypes(js, type.format(), false);\n  }\n",
        "begin_line": 6956,
        "end_line": 6958,
        "comment": "",
        "child_ranges": [
            "(line 6957,col 5)-(line 6957,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosureTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testClosureTypes(String js, String description)\n      throws Exception {\n    testClosureTypesMultipleWarnings(js,\n        description == null ? null : Lists.newArrayList(description));\n  }\n",
        "begin_line": 6960,
        "end_line": 6964,
        "comment": "",
        "child_ranges": [
            "(line 6962,col 5)-(line 6963,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosureTypesMultipleWarnings(java.lang.String, java.util.List<java.lang.String>)",
        "snippet": "  private void testClosureTypesMultipleWarnings(\n      String js, List<String> descriptions) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    // For processing goog.addDependency for forward typedefs.\n    new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR, true)\n        .process(null, n);\n\n    CodingConvention convention = compiler.getCodingConvention();\n    new TypeCheck(compiler,\n        new ClosureReverseAbstractInterpreter(\n            convention, registry).append(\n                new SemanticReverseAbstractInterpreter(\n                    convention, registry))\n            .getFirst(),\n        registry)\n        .processForTesting(null, n);\n\n    assertEquals(0, compiler.getErrorCount());\n\n    if (descriptions == null) {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          0, compiler.getWarningCount());\n    } else {\n      assertEquals(descriptions.size(), compiler.getWarningCount());\n      for (int i = 0; i < descriptions.size(); i++) {\n        assertEquals(descriptions.get(i),\n            compiler.getWarnings()[i].description);\n      }\n    }\n  }\n",
        "begin_line": 6966,
        "end_line": 7005,
        "comment": "",
        "child_ranges": [
            "(line 6968,col 5)-(line 6968,col 40)",
            "(line 6969,col 5)-(line 6969,col 41)",
            "(line 6970,col 5)-(line 6970,col 61)",
            "(line 6971,col 5)-(line 6971,col 46)",
            "(line 6973,col 5)-(line 6975,col 37)",
            "(line 6978,col 5)-(line 6979,col 26)",
            "(line 6981,col 5)-(line 6981,col 65)",
            "(line 6982,col 5)-(line 6989,col 36)",
            "(line 6991,col 5)-(line 6991,col 46)",
            "(line 6993,col 5)-(line 7004,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String js, String description, boolean isError)\n      throws Exception {\n    testTypes(DEFAULT_EXTERNS, js, description, isError);\n  }\n",
        "begin_line": 7007,
        "end_line": 7010,
        "comment": "",
        "child_ranges": [
            "(line 7009,col 5)-(line 7009,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String externs, String js, String description, boolean isError)\n      throws Exception {\n    Node n = parseAndTypeCheck(externs, js);\n\n    JSError[] errors = compiler.getErrors();\n    if (description != null && isError) {\n      assertTrue(\"expected an error\", errors.length > 0);\n      assertEquals(description, errors[0].description);\n      errors = Arrays.asList(errors).subList(1, errors.length).toArray(\n          new JSError[errors.length - 1]);\n    }\n    if (errors.length > 0) {\n      fail(\"unexpected error(s):\\n\" + Joiner.on(\"\\n\").join(errors));\n    }\n\n    JSError[] warnings = compiler.getWarnings();\n    if (description != null && !isError) {\n      assertTrue(\"expected a warning\", warnings.length > 0);\n      assertEquals(description, warnings[0].description);\n      warnings = Arrays.asList(warnings).subList(1, warnings.length).toArray(\n          new JSError[warnings.length - 1]);\n    }\n    if (warnings.length > 0) {\n      fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n    }\n  }\n",
        "begin_line": 7012,
        "end_line": 7037,
        "comment": "",
        "child_ranges": [
            "(line 7014,col 5)-(line 7014,col 44)",
            "(line 7016,col 5)-(line 7016,col 44)",
            "(line 7017,col 5)-(line 7022,col 5)",
            "(line 7023,col 5)-(line 7025,col 5)",
            "(line 7027,col 5)-(line 7027,col 48)",
            "(line 7028,col 5)-(line 7033,col 5)",
            "(line 7034,col 5)-(line 7036,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheck(java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String js) {\n    return parseAndTypeCheck(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 7042,
        "end_line": 7044,
        "comment": "\n   * Parses and type checks the JavaScript code.\n   ",
        "child_ranges": [
            "(line 7043,col 5)-(line 7043,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheck(java.lang.String, java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String externs, String js) {\n    return parseAndTypeCheckWithScope(externs, js).root;\n  }\n",
        "begin_line": 7046,
        "end_line": 7048,
        "comment": "",
        "child_ranges": [
            "(line 7047,col 5)-(line 7047,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheckWithScope(java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(String js) {\n    return parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 7054,
        "end_line": 7056,
        "comment": "\n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
        "child_ranges": [
            "(line 7055,col 5)-(line 7055,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheckWithScope(java.lang.String, java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(\n      String externs, String js) {\n    compiler.init(\n        Lists.newArrayList(JSSourceFile.fromCode(\"[externs]\", externs)),\n        Lists.newArrayList(JSSourceFile.fromCode(\"[testcode]\", js)),\n        compiler.getOptions());\n\n    Node n = compiler.getInput(new InputId(\"[testcode]\")).getAstRoot(compiler);\n    Node externsNode = compiler.getInput(new InputId(\"[externs]\"))\n        .getAstRoot(compiler);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    Scope s = makeTypeCheck().processForTesting(externsNode, n);\n    return new TypeCheckResult(n, s);\n  }\n",
        "begin_line": 7058,
        "end_line": 7077,
        "comment": "",
        "child_ranges": [
            "(line 7060,col 5)-(line 7063,col 31)",
            "(line 7065,col 5)-(line 7065,col 79)",
            "(line 7066,col 5)-(line 7067,col 30)",
            "(line 7068,col 5)-(line 7068,col 65)",
            "(line 7069,col 5)-(line 7069,col 46)",
            "(line 7071,col 5)-(line 7073,col 37)",
            "(line 7075,col 5)-(line 7075,col 64)",
            "(line 7076,col 5)-(line 7076,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.typeCheck(com.google.javascript.rhino.Node)",
        "snippet": "  private Node typeCheck(Node n) {\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, n);\n    return n;\n  }\n",
        "begin_line": 7079,
        "end_line": 7086,
        "comment": "",
        "child_ranges": [
            "(line 7080,col 5)-(line 7080,col 45)",
            "(line 7081,col 5)-(line 7081,col 65)",
            "(line 7082,col 5)-(line 7082,col 46)",
            "(line 7084,col 5)-(line 7084,col 47)",
            "(line 7085,col 5)-(line 7085,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.makeTypeCheck()",
        "snippet": "  private TypeCheck makeTypeCheck() {\n    return new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry);\n  }\n",
        "begin_line": 7088,
        "end_line": 7094,
        "comment": "",
        "child_ranges": [
            "(line 7089,col 5)-(line 7093,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String[])",
        "snippet": "  void testTypes(String js, String[] warnings) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n\n    makeTypeCheck().processForTesting(null, n);\n    assertEquals(0, compiler.getErrorCount());\n    if (warnings != null) {\n      assertEquals(warnings.length, compiler.getWarningCount());\n      JSError[] messages = compiler.getWarnings();\n      for (int i = 0; i < warnings.length && i < compiler.getWarningCount();\n           i++) {\n        assertEquals(warnings[i], messages[i].description);\n      }\n    } else {\n      assertEquals(0, compiler.getWarningCount());\n    }\n  }\n",
        "begin_line": 7096,
        "end_line": 7114,
        "comment": "",
        "child_ranges": [
            "(line 7097,col 5)-(line 7097,col 40)",
            "(line 7098,col 5)-(line 7098,col 46)",
            "(line 7099,col 5)-(line 7099,col 45)",
            "(line 7100,col 5)-(line 7100,col 65)",
            "(line 7102,col 5)-(line 7102,col 47)",
            "(line 7103,col 5)-(line 7103,col 46)",
            "(line 7104,col 5)-(line 7113,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.suppressMissingProperty(java.lang.String...)",
        "snippet": "  String suppressMissingProperty(String ... props) {\n    String result = \"function dummy(x) { \";\n    for (String prop : props) {\n      result += \"x.\" + prop + \" = 3;\";\n    }\n    return result + \"}\";\n  }\n",
        "begin_line": 7116,
        "end_line": 7122,
        "comment": "",
        "child_ranges": [
            "(line 7117,col 5)-(line 7117,col 43)",
            "(line 7118,col 5)-(line 7120,col 5)",
            "(line 7121,col 5)-(line 7121,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.TypeCheckResult.TypeCheckResult(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "    private TypeCheckResult(Node root, Scope scope) {\n      this.root = root;\n      this.scope = scope;\n    }\n",
        "begin_line": 7128,
        "end_line": 7131,
        "comment": "",
        "child_ranges": [
            "(line 7129,col 7)-(line 7129,col 23)",
            "(line 7130,col 7)-(line 7130,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    reportMissingOverrides = CheckLevel.WARNING;\n  }\n",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 18)",
            "(line 44,col 5)-(line 44,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInitialTypingScope()",
        "snippet": "  public void testInitialTypingScope() {\n    Scope s = new TypedScopeCreator(compiler,\n        CodingConventions.getDefault()).createInitialScope(\n            new Node(Token.BLOCK));\n\n    assertEquals(ARRAY_FUNCTION_TYPE, s.getVar(\"Array\").getType());\n    assertEquals(BOOLEAN_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Boolean\").getType());\n    assertEquals(DATE_FUNCTION_TYPE, s.getVar(\"Date\").getType());\n    assertEquals(ERROR_FUNCTION_TYPE, s.getVar(\"Error\").getType());\n    assertEquals(EVAL_ERROR_FUNCTION_TYPE,\n        s.getVar(\"EvalError\").getType());\n    assertEquals(NUMBER_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Number\").getType());\n    assertEquals(OBJECT_FUNCTION_TYPE, s.getVar(\"Object\").getType());\n    assertEquals(RANGE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"RangeError\").getType());\n    assertEquals(REFERENCE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"ReferenceError\").getType());\n    assertEquals(REGEXP_FUNCTION_TYPE, s.getVar(\"RegExp\").getType());\n    assertEquals(STRING_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"String\").getType());\n    assertEquals(SYNTAX_ERROR_FUNCTION_TYPE,\n        s.getVar(\"SyntaxError\").getType());\n    assertEquals(TYPE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"TypeError\").getType());\n    assertEquals(URI_ERROR_FUNCTION_TYPE,\n        s.getVar(\"URIError\").getType());\n  }\n",
        "begin_line": 47,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 50,col 35)",
            "(line 52,col 5)-(line 52,col 67)",
            "(line 53,col 5)-(line 54,col 39)",
            "(line 55,col 5)-(line 55,col 65)",
            "(line 56,col 5)-(line 56,col 67)",
            "(line 57,col 5)-(line 58,col 41)",
            "(line 59,col 5)-(line 60,col 38)",
            "(line 61,col 5)-(line 61,col 69)",
            "(line 62,col 5)-(line 63,col 42)",
            "(line 64,col 5)-(line 65,col 46)",
            "(line 66,col 5)-(line 66,col 69)",
            "(line 67,col 5)-(line 68,col 38)",
            "(line 69,col 5)-(line 70,col 43)",
            "(line 71,col 5)-(line 72,col 41)",
            "(line 73,col 5)-(line 74,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck1()",
        "snippet": "  public void testTypeCheck1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ if (foo()) return; }\");\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck2()",
        "snippet": "  public void testTypeCheck2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo(); x--; }\",\n        \"increment/decrement\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 81,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 85,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck4()",
        "snippet": "  public void testTypeCheck4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ !foo(); }\");\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck5()",
        "snippet": "  public void testTypeCheck5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = +foo(); }\",\n        \"sign operator\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 92,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 96,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck6()",
        "snippet": "  public void testTypeCheck6() throws Exception {\n    testTypes(\n        \"/**@return {void}*/function foo(){\" +\n        \"/** @type {undefined|number} */var a;if (a == foo())return;}\");\n  }\n",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 100,col 5)-(line 102,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck8()",
        "snippet": "  public void testTypeCheck8() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){do {} while (foo());}\");\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck9()",
        "snippet": "  public void testTypeCheck9() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){while (foo());}\");\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 110,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck10()",
        "snippet": "  public void testTypeCheck10() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){for (;foo(););}\");\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck11()",
        "snippet": "  public void testTypeCheck11() throws Exception {\n    testTypes(\"/**@type !Number */var a;\" +\n        \"/**@type !String */var b;\" +\n        \"a = b;\",\n        \"assignment\\n\" +\n        \"found   : String\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 117,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 123,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck12()",
        "snippet": "  public void testTypeCheck12() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = 3^foo();}\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 126,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 127,col 5)-(line 130,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck13()",
        "snippet": "  public void testTypeCheck13() throws Exception {\n    testTypes(\"/**@type {!Number|!String}*/var i; i=/xx/;\",\n        \"assignment\\n\" +\n        \"found   : RegExp\\n\" +\n        \"required: (Number|String)\");\n  }\n",
        "begin_line": 133,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 137,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck14()",
        "snippet": "  public void testTypeCheck14() throws Exception {\n    testTypes(\"/**@param opt_a*/function foo(opt_a){}\");\n  }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 141,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck15()",
        "snippet": "  public void testTypeCheck15() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x;x=null;x=10;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null)\");\n  }\n",
        "begin_line": 145,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 149,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck16()",
        "snippet": "  public void testTypeCheck16() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null)\");\n  }\n",
        "begin_line": 152,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 156,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck17()",
        "snippet": "  public void testTypeCheck17() throws Exception {\n    testTypes(\"/**@return {Number}\\n@param {Number} opt_foo */\\n\" +\n        \"function a(opt_foo){\\nreturn /**@type {Number}*/(opt_foo);\\n}\");\n  }\n",
        "begin_line": 160,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 161,col 5)-(line 162,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck18()",
        "snippet": "  public void testTypeCheck18() throws Exception {\n    testTypes(\"/**@return {RegExp}\\n*/\\n function a(){return new RegExp();}\");\n  }\n",
        "begin_line": 166,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 167,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck19()",
        "snippet": "  public void testTypeCheck19() throws Exception {\n    testTypes(\"/**@return {Array}\\n*/\\n function a(){return new Array();}\");\n  }\n",
        "begin_line": 170,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 171,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck20()",
        "snippet": "  public void testTypeCheck20() throws Exception {\n    testTypes(\"/**@return {Date}\\n*/\\n function a(){return new Date();}\");\n  }\n",
        "begin_line": 174,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 175,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckBasicDowncast()",
        "snippet": "  public void testTypeCheckBasicDowncast() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {Object} */ var bar = new foo();\\n\");\n  }\n",
        "begin_line": 178,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 180,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckNoDowncastToNumber()",
        "snippet": "  public void testTypeCheckNoDowncastToNumber() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {!Number} */ var bar = new foo();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : foo\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 183,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 188,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck21()",
        "snippet": "  public void testTypeCheck21() throws Exception {\n    testTypes(\"/** @type Array.<String> */var foo;\");\n  }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 192,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck22()",
        "snippet": "  public void testTypeCheck22() throws Exception {\n    testTypes(\"/** @param {Element|Object} p */\\nfunction foo(p){}\\n\" +\n                  \"/** @constructor */function Element(){}\\n\" +\n                  \"/** @type {Element|Object} */var v;\\n\" +\n                  \"foo(v);\\n\");\n  }\n",
        "begin_line": 195,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 199,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck23()",
        "snippet": "  public void testTypeCheck23() throws Exception {\n    testTypes(\"/** @type {(Object,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 203,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck24()",
        "snippet": "  public void testTypeCheck24() throws Exception {\n    testTypes(\"/** @constructor */function MyType(){}\\n\" +\n        \"/** @type {(MyType,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 206,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 208,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckDefaultExterns()",
        "snippet": "  public void testTypeCheckDefaultExterns() throws Exception {\n    testTypes(\"/** @param {string} x */ function f(x) {}\" +\n        \"f([].length);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 211,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 216,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckCustomExterns()",
        "snippet": "  public void testTypeCheckCustomExterns() throws Exception {\n    testTypes(\n        DEFAULT_EXTERNS + \"/** @type {boolean} */ Array.prototype.oogabooga;\",\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f([].oogabooga);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\", false);\n  }\n",
        "begin_line": 219,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 220,col 5)-(line 226,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray1()",
        "snippet": "  public void testParameterizedArray1() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 229,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 235,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray2()",
        "snippet": "  public void testParameterizedArray2() throws Exception {\n    testTypes(\"/** @param {!Array.<!Array.<number>>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 238,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 239,col 5)-(line 244,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray3()",
        "snippet": "  public void testParameterizedArray3() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { a[1] = 0; return a[0]; };\");\n  }\n",
        "begin_line": 247,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 250,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray4()",
        "snippet": "  public void testParameterizedArray4() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 253,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 258,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray5()",
        "snippet": "  public void testParameterizedArray5() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\");\n  }\n",
        "begin_line": 261,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 262,col 5)-(line 263,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray6()",
        "snippet": "  public void testParameterizedArray6() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : *\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 266,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 267,col 5)-(line 272,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray7()",
        "snippet": "  public void testParameterizedArray7() throws Exception {\n    testTypes(\"/** @param {?Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 275,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 281,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject1()",
        "snippet": "  public void testParameterizedObject1() throws Exception {\n    testTypes(\"/** @param {!Object.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 284,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 285,col 5)-(line 290,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject2()",
        "snippet": "  public void testParameterizedObject2() throws Exception {\n    testTypes(\"/** @param {!Object.<string,number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 293,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 294,col 5)-(line 299,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject3()",
        "snippet": "  public void testParameterizedObject3() throws Exception {\n    testTypes(\"/** @param {!Object.<number,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 302,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 303,col 5)-(line 308,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject4()",
        "snippet": "  public void testParameterizedObject4() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!Object.<E,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: E.<string>\");\n  }\n",
        "begin_line": 311,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 312,col 5)-(line 318,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject5()",
        "snippet": "  public void testParameterizedObject5() throws Exception {\n    testTypes(\"/** @constructor */ function F() {\" +\n        \"  /** @type {Object.<number, string>} */ this.numbers = {};\" +\n        \"}\" +\n        \"(new F()).numbers['ten'] = '10';\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 321,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 322,col 5)-(line 328,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnionOfFunctionAndType()",
        "snippet": "  public void testUnionOfFunctionAndType() throws Exception {\n    testTypes(\"/** @type {null|(function(Number):void)} */ var a;\" +\n        \"/** @type {(function(Number):void)|null} */ var b = null; a = b;\");\n  }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 333,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalParameterComparedToUndefined()",
        "snippet": "  public void testOptionalParameterComparedToUndefined() throws Exception {\n    testTypes(\"/**@param opt_a {Number}*/function foo(opt_a)\" +\n        \"{if (opt_a==undefined) var b = 3;}\");\n  }\n",
        "begin_line": 336,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 338,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalAllType()",
        "snippet": "  public void testOptionalAllType() throws Exception {\n    testTypes(\"/** @param {*} opt_x */function f(opt_x) { return opt_x }\\n\" +\n        \"/** @type {*} */var y;\\n\" +\n        \"f(y);\");\n  }\n",
        "begin_line": 341,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 344,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalUnknownNamedType()",
        "snippet": "  public void testOptionalUnknownNamedType() throws Exception {\n    testTypes(\"/** @param {!T} opt_x\\n@return {undefined} */\\n\" +\n        \"function f(opt_x) { return opt_x; }\\n\" +\n        \"/** @constructor */var T = function() {};\",\n        \"inconsistent return type\\n\" +\n        \"found   : (T|undefined)\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 347,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 353,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam()",
        "snippet": "  public void testOptionalArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a()};\");\n  }\n",
        "begin_line": 356,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 357,col 5)-(line 358,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam2()",
        "snippet": "  public void testOptionalArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 363,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam3()",
        "snippet": "  public void testOptionalArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(undefined)};\");\n  }\n",
        "begin_line": 366,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 368,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam4()",
        "snippet": "  public void testOptionalArgFunctionParam4() throws Exception {\n    String expectedWarning = \"Function a: called with 2 argument(s). \" +\n        \"Function requires at least 0 argument(s) and no more than 1 \" +\n        \"argument(s).\";\n\n    testTypes(\"/** @param {function(number=)} a */function f(a) {a(3,4)};\",\n              expectedWarning, false);\n  }\n",
        "begin_line": 371,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 372,col 5)-(line 374,col 23)",
            "(line 376,col 5)-(line 377,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParamError()",
        "snippet": "  public void testOptionalArgFunctionParamError() throws Exception {\n    String expectedWarning =\n        \"Bad type annotation. variable length argument must be last\";\n    testTypes(\"/** @param {function(...[number], number=)} a */\" +\n              \"function f(a) {};\", expectedWarning, false);\n  }\n",
        "begin_line": 380,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 381,col 5)-(line 382,col 69)",
            "(line 383,col 5)-(line 384,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam()",
        "snippet": "  public void testOptionalNullableArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a()};\");\n  }\n",
        "begin_line": 387,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 388,col 5)-(line 389,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam2()",
        "snippet": "  public void testOptionalNullableArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(null)};\");\n  }\n",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 394,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam3()",
        "snippet": "  public void testOptionalNullableArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 397,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 398,col 5)-(line 399,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn()",
        "snippet": "  public void testOptionalArgFunctionReturn() throws Exception {\n    testTypes(\"/** @return {function(number=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()()\");\n  }\n",
        "begin_line": 402,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 403,col 5)-(line 405,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn2()",
        "snippet": "  public void testOptionalArgFunctionReturn2() throws Exception {\n    testTypes(\"/** @return {function(Object=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()({})\");\n  }\n",
        "begin_line": 408,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 409,col 5)-(line 411,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanType()",
        "snippet": "  public void testBooleanType() throws Exception {\n    testTypes(\"/**@type {boolean} */var x = 1 < 2;\");\n  }\n",
        "begin_line": 414,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 415,col 5)-(line 415,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction1()",
        "snippet": "  public void testBooleanReduction1() throws Exception {\n    testTypes(\"/**@type {string} */var x; x = null || \\\"a\\\";\");\n  }\n",
        "begin_line": 418,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction2()",
        "snippet": "  public void testBooleanReduction2() throws Exception {\n    // It's important for the type system to recognize that in no case\n    // can the boolean expression evaluate to a boolean value.\n    testTypes(\"/** @param {string} s\\n @return {string} */\" +\n        \"(function(s) { return ((s == 'a') && s) || 'b'; })\");\n  }\n",
        "begin_line": 422,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 426,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction3()",
        "snippet": "  public void testBooleanReduction3() throws Exception {\n    testTypes(\"/** @param {string} s\\n @return {string?} */\" +\n        \"(function(s) { return s && null && 3; })\");\n  }\n",
        "begin_line": 429,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 430,col 5)-(line 431,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction4()",
        "snippet": "  public void testBooleanReduction4() throws Exception {\n    testTypes(\"/** @param {Object} x\\n @return {Object} */\" +\n        \"(function(x) { return null || x || null ; })\");\n  }\n",
        "begin_line": 434,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 435,col 5)-(line 436,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction5()",
        "snippet": "  public void testBooleanReduction5() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || typeof x == 'string') {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 439,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 440,col 5)-(line 449,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction6()",
        "snippet": "  public void testBooleanReduction6() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string|null} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!(x && typeof x != 'string')) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 452,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 453,col 5)-(line 462,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction7()",
        "snippet": "   public void testBooleanReduction7() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {Array|T} x\\n\" +\n        \"* @return {null}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 465,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 466,col 5)-(line 476,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNullAnd()",
        "snippet": "  public void testNullAnd() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x && x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 479,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 480,col 5)-(line 484,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNullOr()",
        "snippet": "  public void testNullOr() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x || x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 487,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 492,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation1()",
        "snippet": "  public void testBooleanPreservation1() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\";\" +\n        \"x = ((x == \\\"a\\\") && x) || x == \\\"b\\\";\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 495,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 496,col 5)-(line 500,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation2()",
        "snippet": "  public void testBooleanPreservation2() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\"; x = (x == \\\"a\\\") || x;\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 503,
        "end_line": 508,
        "comment": "",
        "child_ranges": [
            "(line 504,col 5)-(line 507,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation3()",
        "snippet": "  public void testBooleanPreservation3() throws Exception {\n    testTypes(\"/** @param {Function?} x\\n @return {boolean?} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"condition always evaluates to false\\n\" +\n        \"left : Function\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 510,
        "end_line": 516,
        "comment": "",
        "child_ranges": [
            "(line 511,col 5)-(line 515,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation4()",
        "snippet": "  public void testBooleanPreservation4() throws Exception {\n    testTypes(\"/** @param {Function?|boolean} x\\n @return {boolean} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|null)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 518,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 519,col 5)-(line 523,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction1()",
        "snippet": "  public void testTypeOfReduction1() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x == 'number' ? String(x) : x; }\");\n  }\n",
        "begin_line": 526,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 527,col 5)-(line 528,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction2()",
        "snippet": "  public void testTypeOfReduction2() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'string' ? String(x) : x; }\");\n  }\n",
        "begin_line": 531,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 532,col 5)-(line 533,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction3()",
        "snippet": "  public void testTypeOfReduction3() throws Exception {\n    testTypes(\"/** @param {number|null} x\\n @return {number} */ \" +\n        \"function f(x) { return typeof x == 'object' ? 1 : x; }\");\n  }\n",
        "begin_line": 536,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 537,col 5)-(line 538,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction4()",
        "snippet": "  public void testTypeOfReduction4() throws Exception {\n    testTypes(\"/** @param {Object|undefined} x\\n @return {Object} */ \" +\n        \"function f(x) { return typeof x == 'undefined' ? {} : x; }\");\n  }\n",
        "begin_line": 541,
        "end_line": 544,
        "comment": "",
        "child_ranges": [
            "(line 542,col 5)-(line 543,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction5()",
        "snippet": "  public void testTypeOfReduction5() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!E|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'number' ? x : 'a'; }\");\n  }\n",
        "begin_line": 546,
        "end_line": 550,
        "comment": "",
        "child_ranges": [
            "(line 547,col 5)-(line 549,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction6()",
        "snippet": "  public void testTypeOfReduction6() throws Exception {\n    testTypes(\"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return typeof x == 'string' && x.length == 3 ? x : 'a';\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 552,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 553,col 5)-(line 556,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction7()",
        "snippet": "  public void testTypeOfReduction7() throws Exception {\n    testTypes(\"/** @return {string} */var f = function(x) { \" +\n        \"return typeof x == 'number' ? x : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 559,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 560,col 5)-(line 564,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction8()",
        "snippet": "  public void testTypeOfReduction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isString(x) && x.length == 3 ? x : 'a';\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 567,
        "end_line": 574,
        "comment": "",
        "child_ranges": [
            "(line 568,col 5)-(line 573,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction9()",
        "snippet": "  public void testTypeOfReduction9() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {!Array|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? 'a' : x;\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 576,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 577,col 5)-(line 582,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction10()",
        "snippet": "  public void testTypeOfReduction10() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 585,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 586,col 5)-(line 591,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction11()",
        "snippet": "  public void testTypeOfReduction11() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isObject(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 594,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 595,col 5)-(line 600,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction12()",
        "snippet": "  public void testTypeOfReduction12() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n @return {Array} */ \" +\n        \"function f(x) { return typeof x == 'object' ? x : []; }\");\n  }\n",
        "begin_line": 603,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 604,col 5)-(line 606,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction13()",
        "snippet": "  public void testTypeOfReduction13() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n@return {Array} */ \" +\n        \"function f(x) { return goog.isObject(x) ? x : []; }\", null);\n  }\n",
        "begin_line": 609,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 614,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction14()",
        "snippet": "  public void testTypeOfReduction14() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(x) { \" +\n        \"  return goog.isString(arguments[0]) ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 617,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 619,col 5)-(line 623,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction15()",
        "snippet": "  public void testTypeOfReduction15() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(x) { \" +\n        \"  return typeof arguments[0] == 'string' ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 626,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 628,col 5)-(line 632,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction1()",
        "snippet": "  public void testQualifiedNameReduction1() throws Exception {\n    testTypes(\"var x = {}; /** @type {string?} */ x.a = 'a';\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 635,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 636,col 5)-(line 638,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction2()",
        "snippet": "  public void testQualifiedNameReduction2() throws Exception {\n    testTypes(\"/** @param {string?} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return this.a ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 641,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 642,col 5)-(line 645,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction3()",
        "snippet": "  public void testQualifiedNameReduction3() throws Exception {\n    testTypes(\"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return typeof this.a == 'string' ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 648,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 652,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction4()",
        "snippet": "  public void testQualifiedNameReduction4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return goog.isString(this.a) ? this.a : 'a'; }\", null);\n  }\n",
        "begin_line": 655,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 656,col 5)-(line 661,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5a()",
        "snippet": "  public void testQualifiedNameReduction5a() throws Exception {\n    testTypes(\"var x = {/** @type {string} */ a:'b' };\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a; }\");\n  }\n",
        "begin_line": 664,
        "end_line": 668,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 667,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5b()",
        "snippet": "  public void testQualifiedNameReduction5b() throws Exception {\n    testTypes(\n        \"var x = {/** @type {number} */ a:12 };\\n\" +\n        \"/** @return {string} */\\n\" +\n        \"var f = function() {\\n\" +\n        \"  return x.a;\\n\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 670,
        "end_line": 680,
        "comment": "",
        "child_ranges": [
            "(line 671,col 5)-(line 679,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5c()",
        "snippet": "  public void testQualifiedNameReduction5c() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @type {number} */ a:0 };\\n\" +\n        \"return (x.a) ? (x.a) : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 682,
        "end_line": 690,
        "comment": "",
        "child_ranges": [
            "(line 683,col 5)-(line 689,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction6()",
        "snippet": "  public void testQualifiedNameReduction6() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @return {string?} */ get a() {return 'a'}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 692,
        "end_line": 697,
        "comment": "",
        "child_ranges": [
            "(line 693,col 5)-(line 696,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction7()",
        "snippet": "  public void testQualifiedNameReduction7() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @return {number} */ get a() {return 12}};\\n\" +\n        \"return x.a; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 699,
        "end_line": 707,
        "comment": "",
        "child_ranges": [
            "(line 700,col 5)-(line 706,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction7a()",
        "snippet": "  public void testQualifiedNameReduction7a() throws Exception {\n    // It would be nice to find a way to make this an error.\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {get a() {return 12}};\\n\" +\n        \"return x.a; }\");\n  }\n",
        "begin_line": 709,
        "end_line": 715,
        "comment": "",
        "child_ranges": [
            "(line 711,col 5)-(line 714,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction8()",
        "snippet": "  public void testQualifiedNameReduction8() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {get a() {return 'a'}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 717,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 718,col 5)-(line 721,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction9()",
        "snippet": "  public void testQualifiedNameReduction9() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = { /** @param {string} b */ set a(b) {}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 724,
        "end_line": 729,
        "comment": "",
        "child_ranges": [
            "(line 725,col 5)-(line 728,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction10()",
        "snippet": "  public void testQualifiedNameReduction10() throws Exception {\n    // TODO(johnlenz): separate setter property types from getter property\n    // types.\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = { /** @param {number} b */ set a(b) {}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 731,
        "end_line": 741,
        "comment": "",
        "child_ranges": [
            "(line 734,col 5)-(line 740,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef1a()",
        "snippet": "  public void testObjLitDef1a() throws Exception {\n    testTypes(\n        \"var x = {/** @type {number} */ a:12 };\\n\" +\n        \"x.a = 'a';\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 743,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 744,col 5)-(line 749,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef1b()",
        "snippet": "  public void testObjLitDef1b() throws Exception {\n    testTypes(\n        \"function f(){\" +\n          \"var x = {/** @type {number} */ a:12 };\\n\" +\n          \"x.a = 'a';\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 752,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 753,col 5)-(line 761,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef2a()",
        "snippet": "  public void testObjLitDef2a() throws Exception {\n    testTypes(\n        \"var x = {/** @param {number} b */ set a(b){} };\\n\" +\n        \"x.a = 'a';\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 764,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 765,col 5)-(line 770,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef2b()",
        "snippet": "  public void testObjLitDef2b() throws Exception {\n    testTypes(\n        \"function f(){\" +\n          \"var x = {/** @param {number} b */ set a(b){} };\\n\" +\n          \"x.a = 'a';\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 773,
        "end_line": 783,
        "comment": "",
        "child_ranges": [
            "(line 774,col 5)-(line 782,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef3a()",
        "snippet": "  public void testObjLitDef3a() throws Exception {\n    testTypes(\n        \"/** @type {string} */ var y;\\n\" +\n        \"var x = {/** @return {number} */ get a(){} };\\n\" +\n        \"y = x.a;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 785,
        "end_line": 793,
        "comment": "",
        "child_ranges": [
            "(line 786,col 5)-(line 792,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef3b()",
        "snippet": "  public void testObjLitDef3b() throws Exception {\n    testTypes(\n      \"/** @type {string} */ var y;\\n\" +\n        \"function f(){\" +\n          \"var x = {/** @return {number} */ get a(){} };\\n\" +\n          \"y = x.a;\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 795,
        "end_line": 806,
        "comment": "",
        "child_ranges": [
            "(line 796,col 5)-(line 805,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef4()",
        "snippet": "  public void testObjLitDef4() throws Exception {\n    testTypes(\n        \"var x = {\" +\n          \"/** @return {number} */ a:12 };\\n\",\n          \"assignment to property a of {a: function (): number}\\n\" +\n          \"found   : number\\n\" +\n          \"required: function (): number\");\n  }\n",
        "begin_line": 808,
        "end_line": 815,
        "comment": "",
        "child_ranges": [
            "(line 809,col 5)-(line 814,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef5()",
        "snippet": "  public void testObjLitDef5() throws Exception {\n    testTypes(\n        \"var x = {};\\n\" +\n        \"/** @return {number} */ x.a = 12;\\n\",\n        \"assignment to property a of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: function (): number\");\n  }\n",
        "begin_line": 817,
        "end_line": 824,
        "comment": "",
        "child_ranges": [
            "(line 818,col 5)-(line 823,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction1()",
        "snippet": "  public void testInstanceOfReduction1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T|string} x\\n@return {T} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return x; } else { return new T(); }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 827,
        "end_line": 833,
        "comment": "",
        "child_ranges": [
            "(line 828,col 5)-(line 832,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction2()",
        "snippet": "  public void testInstanceOfReduction2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {!T|string} x\\n@return {string} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return ''; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 835,
        "end_line": 841,
        "comment": "",
        "child_ranges": [
            "(line 836,col 5)-(line 840,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndeclaredGlobalProperty1()",
        "snippet": "  public void testUndeclaredGlobalProperty1() throws Exception {\n    testTypes(\"/** @const */ var x = {}; x.y = null;\" +\n        \"function f(a) { x.y = a; }\" +\n        \"/** @param {string} a */ function g(a) { }\" +\n        \"function h() { g(x.y); }\");\n  }\n",
        "begin_line": 843,
        "end_line": 848,
        "comment": "",
        "child_ranges": [
            "(line 844,col 5)-(line 847,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndeclaredGlobalProperty2()",
        "snippet": "  public void testUndeclaredGlobalProperty2() throws Exception {\n    testTypes(\"/** @const */ var x = {}; x.y = null;\" +\n        \"function f() { x.y = 3; }\" +\n        \"/** @param {string} a */ function g(a) { }\" +\n        \"function h() { g(x.y); }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 850,
        "end_line": 858,
        "comment": "",
        "child_ranges": [
            "(line 851,col 5)-(line 857,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLocallyInferredGlobalProperty1()",
        "snippet": "  public void testLocallyInferredGlobalProperty1() throws Exception {\n    // We used to have a bug where x.y.z leaked from f into h.\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @type {number} */ F.prototype.z;\" +\n        \"/** @const */ var x = {}; /** @type {F} */ x.y;\" +\n        \"function f() { x.y.z = 'abc'; }\" +\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"function h() { g(x.y.z); }\",\n        \"assignment to property z of F\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 860,
        "end_line": 872,
        "comment": "",
        "child_ranges": [
            "(line 862,col 5)-(line 871,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInferredPropagation()",
        "snippet": "  public void testPropertyInferredPropagation() throws Exception {\n    testTypes(\"/** @return {Object} */function f() { return {}; }\\n\" +\n         \"function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\\n\" +\n         \"function h() { var x = f(); x.a = false; }\");\n  }\n",
        "begin_line": 874,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 875,col 5)-(line 877,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference1()",
        "snippet": "  public void testPropertyInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 880,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 887,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference2()",
        "snippet": "  public void testPropertyInference2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = null; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 890,
        "end_line": 899,
        "comment": "",
        "child_ranges": [
            "(line 891,col 5)-(line 898,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference3()",
        "snippet": "  public void testPropertyInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 901,
        "end_line": 910,
        "comment": "",
        "child_ranges": [
            "(line 902,col 5)-(line 909,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference4()",
        "snippet": "  public void testPropertyInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 912,
        "end_line": 921,
        "comment": "",
        "child_ranges": [
            "(line 913,col 5)-(line 920,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference5()",
        "snippet": "  public void testPropertyInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\");\n  }\n",
        "begin_line": 923,
        "end_line": 929,
        "comment": "",
        "child_ranges": [
            "(line 924,col 5)-(line 928,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference6()",
        "snippet": "  public void testPropertyInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\");\n  }\n",
        "begin_line": 931,
        "end_line": 937,
        "comment": "",
        "child_ranges": [
            "(line 932,col 5)-(line 936,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference7()",
        "snippet": "  public void testPropertyInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 939,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 940,col 5)-(line 947,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference8()",
        "snippet": "  public void testPropertyInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { \" +\n        \"  /** @type {string} */ this.x_ = 'x';\" +\n        \"}\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"assignment to property x_ of F\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 950,
        "end_line": 961,
        "comment": "",
        "child_ranges": [
            "(line 951,col 5)-(line 960,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForObjectProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForObjectProperties()\n      throws Exception {\n    testTypes(\"/** @param {Object} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Object} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 963,
        "end_line": 973,
        "comment": "",
        "child_ranges": [
            "(line 965,col 5)-(line 972,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForFunctionProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForFunctionProperties()\n      throws Exception {\n    testTypes(\"/** @param {Function} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Function} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 975,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 977,col 5)-(line 984,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope1()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope1() throws Exception {\n    testTypes(\"/** @param {!Object} o\\n@return {string} */\\n\" +\n        \"function f(o) { o.x = 1; return o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 987,
        "end_line": 993,
        "comment": "",
        "child_ranges": [
            "(line 988,col 5)-(line 992,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope2()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope2() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { o.x = 'a';\\nif (x) {o.x = x;}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 995,
        "end_line": 1001,
        "comment": "",
        "child_ranges": [
            "(line 996,col 5)-(line 1000,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope3()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope3() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { if (x) {o.x = x;} else {o.x = 'a';}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1003,
        "end_line": 1009,
        "comment": "",
        "child_ranges": [
            "(line 1004,col 5)-(line 1008,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x = 0;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1011,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1013,col 5)-(line 1017,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1020,
        "end_line": 1027,
        "comment": "",
        "child_ranges": [
            "(line 1022,col 5)-(line 1026,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()\n      throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1029,
        "end_line": 1037,
        "comment": "",
        "child_ranges": [
            "(line 1031,col 5)-(line 1036,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()\n      throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1039,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1041,col 5)-(line 1046,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition1()",
        "snippet": "  public void testPropertyUsedBeforeDefinition1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1049,
        "end_line": 1057,
        "comment": "",
        "child_ranges": [
            "(line 1050,col 5)-(line 1056,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition2()",
        "snippet": "  public void testPropertyUsedBeforeDefinition2() throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"n.T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ n.T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1059,
        "end_line": 1068,
        "comment": "",
        "child_ranges": [
            "(line 1060,col 5)-(line 1067,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd1()",
        "snippet": "  public void testAdd1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 'abc'+foo();}\");\n  }\n",
        "begin_line": 1070,
        "end_line": 1072,
        "comment": "",
        "child_ranges": [
            "(line 1071,col 5)-(line 1071,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd2()",
        "snippet": "  public void testAdd2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()+4;}\");\n  }\n",
        "begin_line": 1074,
        "end_line": 1076,
        "comment": "",
        "child_ranges": [
            "(line 1075,col 5)-(line 1075,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd3()",
        "snippet": "  public void testAdd3() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1078,
        "end_line": 1082,
        "comment": "",
        "child_ranges": [
            "(line 1079,col 5)-(line 1081,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd4()",
        "snippet": "  public void testAdd4() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1084,
        "end_line": 1088,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 5)-(line 1087,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd5()",
        "snippet": "  public void testAdd5() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1090,
        "end_line": 1094,
        "comment": "",
        "child_ranges": [
            "(line 1091,col 5)-(line 1093,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd6()",
        "snippet": "  public void testAdd6() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\");\n  }\n",
        "begin_line": 1096,
        "end_line": 1100,
        "comment": "",
        "child_ranges": [
            "(line 1097,col 5)-(line 1099,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd7()",
        "snippet": "  public void testAdd7() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1102,
        "end_line": 1109,
        "comment": "",
        "child_ranges": [
            "(line 1103,col 5)-(line 1108,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd8()",
        "snippet": "  public void testAdd8() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1111,
        "end_line": 1118,
        "comment": "",
        "child_ranges": [
            "(line 1112,col 5)-(line 1117,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd9()",
        "snippet": "  public void testAdd9() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1120,
        "end_line": 1127,
        "comment": "",
        "child_ranges": [
            "(line 1121,col 5)-(line 1126,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd10()",
        "snippet": "  public void testAdd10() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 1129,
        "end_line": 1135,
        "comment": "",
        "child_ranges": [
            "(line 1131,col 5)-(line 1134,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd11()",
        "snippet": "  public void testAdd11() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 1137,
        "end_line": 1143,
        "comment": "",
        "child_ranges": [
            "(line 1139,col 5)-(line 1142,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd12()",
        "snippet": "  public void testAdd12() throws Exception {\n    testTypes(\"/** @return {(number,string)} */ function a() { return 5; }\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a() + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1145,
        "end_line": 1152,
        "comment": "",
        "child_ranges": [
            "(line 1146,col 5)-(line 1151,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd13()",
        "snippet": "  public void testAdd13() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1154,
        "end_line": 1161,
        "comment": "",
        "child_ranges": [
            "(line 1155,col 5)-(line 1160,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd14()",
        "snippet": "  public void testAdd14() throws Exception {\n    testTypes(\"/** @type {(null,string)} */ var a = null;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1163,
        "end_line": 1170,
        "comment": "",
        "child_ranges": [
            "(line 1164,col 5)-(line 1169,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd15()",
        "snippet": "  public void testAdd15() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1172,
        "end_line": 1179,
        "comment": "",
        "child_ranges": [
            "(line 1173,col 5)-(line 1178,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd16()",
        "snippet": "  public void testAdd16() throws Exception {\n    testTypes(\"/** @type {(undefined,string)} */ var a = undefined;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1181,
        "end_line": 1188,
        "comment": "",
        "child_ranges": [
            "(line 1182,col 5)-(line 1187,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd17()",
        "snippet": "  public void testAdd17() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {(undefined,string)} */ var b = undefined;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1190,
        "end_line": 1197,
        "comment": "",
        "child_ranges": [
            "(line 1191,col 5)-(line 1196,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd18()",
        "snippet": "  public void testAdd18() throws Exception {\n    testTypes(\"function f() {};\" +\n        \"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var c = a + f();\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1199,
        "end_line": 1206,
        "comment": "",
        "child_ranges": [
            "(line 1200,col 5)-(line 1205,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd19()",
        "snippet": "  public void testAdd19() throws Exception {\n    testTypes(\"/** @param {number} opt_x\\n@param {number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1208,
        "end_line": 1212,
        "comment": "",
        "child_ranges": [
            "(line 1209,col 5)-(line 1211,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd20()",
        "snippet": "  public void testAdd20() throws Exception {\n    testTypes(\"/** @param {!Number} opt_x\\n@param {!Number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1214,
        "end_line": 1218,
        "comment": "",
        "child_ranges": [
            "(line 1215,col 5)-(line 1217,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd21()",
        "snippet": "  public void testAdd21() throws Exception {\n    testTypes(\"/** @param {Number|Boolean} opt_x\\n\" +\n        \"@param {number|boolean} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1220,
        "end_line": 1225,
        "comment": "",
        "child_ranges": [
            "(line 1221,col 5)-(line 1224,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison1()",
        "snippet": "  public void testNumericComparison1() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1227,
        "end_line": 1229,
        "comment": "",
        "child_ranges": [
            "(line 1228,col 5)-(line 1228,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison2()",
        "snippet": "  public void testNumericComparison2() throws Exception {\n    testTypes(\"/**@param {!Object} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : Object\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1231,
        "end_line": 1236,
        "comment": "",
        "child_ranges": [
            "(line 1232,col 5)-(line 1235,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison3()",
        "snippet": "  public void testNumericComparison3() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1238,
        "end_line": 1240,
        "comment": "",
        "child_ranges": [
            "(line 1239,col 5)-(line 1239,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison4()",
        "snippet": "  public void testNumericComparison4() throws Exception {\n    testTypes(\"/**@param {(number,undefined)} a*/ \" +\n              \"function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1242,
        "end_line": 1245,
        "comment": "",
        "child_ranges": [
            "(line 1243,col 5)-(line 1244,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison5()",
        "snippet": "  public void testNumericComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : *\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1247,
        "end_line": 1252,
        "comment": "",
        "child_ranges": [
            "(line 1248,col 5)-(line 1251,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison6()",
        "snippet": "  public void testNumericComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ function foo() { if (3 >= foo()) return; }\",\n        \"right side of numeric comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1254,
        "end_line": 1259,
        "comment": "",
        "child_ranges": [
            "(line 1255,col 5)-(line 1258,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison1()",
        "snippet": "  public void testStringComparison1() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1261,
        "end_line": 1263,
        "comment": "",
        "child_ranges": [
            "(line 1262,col 5)-(line 1262,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison2()",
        "snippet": "  public void testStringComparison2() throws Exception {\n    testTypes(\"/**@param {Object} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1265,
        "end_line": 1267,
        "comment": "",
        "child_ranges": [
            "(line 1266,col 5)-(line 1266,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison3()",
        "snippet": "  public void testStringComparison3() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1269,
        "end_line": 1271,
        "comment": "",
        "child_ranges": [
            "(line 1270,col 5)-(line 1270,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison4()",
        "snippet": "  public void testStringComparison4() throws Exception {\n    testTypes(\"/**@param {string|undefined} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1273,
        "end_line": 1276,
        "comment": "",
        "child_ranges": [
            "(line 1274,col 5)-(line 1275,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison5()",
        "snippet": "  public void testStringComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1278,
        "end_line": 1281,
        "comment": "",
        "child_ranges": [
            "(line 1279,col 5)-(line 1280,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison6()",
        "snippet": "  public void testStringComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ \" +\n        \"function foo() { if ('a' >= foo()) return; }\",\n        \"right side of comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1283,
        "end_line": 1289,
        "comment": "",
        "child_ranges": [
            "(line 1284,col 5)-(line 1288,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison1()",
        "snippet": "  public void testValueOfComparison1() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {!O} b*/ function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1291,
        "end_line": 1295,
        "comment": "",
        "child_ranges": [
            "(line 1292,col 5)-(line 1294,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison2()",
        "snippet": "  public void testValueOfComparison2() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {number} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1297,
        "end_line": 1302,
        "comment": "",
        "child_ranges": [
            "(line 1298,col 5)-(line 1301,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison3()",
        "snippet": "  public void testValueOfComparison3() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.toString = function() { return 'o'; };\" +\n        \"/**@param {!O} a\\n@param {string} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1304,
        "end_line": 1309,
        "comment": "",
        "child_ranges": [
            "(line 1305,col 5)-(line 1308,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGenericRelationalExpression()",
        "snippet": "  public void testGenericRelationalExpression() throws Exception {\n    testTypes(\"/**@param {*} a\\n@param {*} b*/ \" +\n                  \"function f(a,b) {return a < b;}\");\n  }\n",
        "begin_line": 1311,
        "end_line": 1314,
        "comment": "",
        "child_ranges": [
            "(line 1312,col 5)-(line 1313,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof1()",
        "snippet": "  public void testInstanceof1() throws Exception {\n    testTypes(\"function foo(){\" +\n        \"if (bar instanceof 3)return;}\",\n        \"instanceof requires an object\\n\" +\n        \"found   : number\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 1316,
        "end_line": 1322,
        "comment": "",
        "child_ranges": [
            "(line 1317,col 5)-(line 1321,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof2()",
        "snippet": "  public void testInstanceof2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){\" +\n        \"if (foo() instanceof Object)return;}\",\n        \"deterministic instanceof yields false\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: NoObject\");\n  }\n",
        "begin_line": 1324,
        "end_line": 1330,
        "comment": "",
        "child_ranges": [
            "(line 1325,col 5)-(line 1329,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof3()",
        "snippet": "  public void testInstanceof3() throws Exception {\n    testTypes(\"/**@return {*} */function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1332,
        "end_line": 1335,
        "comment": "",
        "child_ranges": [
            "(line 1333,col 5)-(line 1334,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof4()",
        "snippet": "  public void testInstanceof4() throws Exception {\n    testTypes(\"/**@return {(Object|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1337,
        "end_line": 1340,
        "comment": "",
        "child_ranges": [
            "(line 1338,col 5)-(line 1339,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof5()",
        "snippet": "  public void testInstanceof5() throws Exception {\n    // No warning for unknown types.\n    testTypes(\"/** @return {?} */ function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1342,
        "end_line": 1346,
        "comment": "",
        "child_ranges": [
            "(line 1344,col 5)-(line 1345,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof6()",
        "snippet": "  public void testInstanceof6() throws Exception {\n    testTypes(\"/**@return {(Array|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1348,
        "end_line": 1351,
        "comment": "",
        "child_ranges": [
            "(line 1349,col 5)-(line 1350,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction3()",
        "snippet": "  public void testInstanceOfReduction3() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {Object} x \\n\" +\n        \" * @param {Function} y \\n\" +\n        \" * @return {boolean} \\n\" +\n        \" */\\n\" +\n        \"var f = function(x, y) {\\n\" +\n        \"  return x instanceof y;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 1353,
        "end_line": 1363,
        "comment": "",
        "child_ranges": [
            "(line 1354,col 5)-(line 1362,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping1()",
        "snippet": "  public void testScoping1() throws Exception {\n    testTypes(\n        \"/**@param {string} a*/function foo(a){\" +\n        \"  /**@param {Array|string} a*/function bar(a){\" +\n        \"    if (a instanceof Array)return;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 1365,
        "end_line": 1372,
        "comment": "",
        "child_ranges": [
            "(line 1366,col 5)-(line 1371,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping2()",
        "snippet": "  public void testScoping2() throws Exception {\n    testTypes(\n        \"/** @type number */ var a;\" +\n        \"function Foo() {\" +\n        \"  /** @type string */ var a;\" +\n        \"}\");\n  }\n",
        "begin_line": 1374,
        "end_line": 1380,
        "comment": "",
        "child_ranges": [
            "(line 1375,col 5)-(line 1379,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping3()",
        "snippet": "  public void testScoping3() throws Exception {\n    testTypes(\"\\n\\n/** @type{Number}*/var b;\\n/** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:3 with type (Number|null)\");\n  }\n",
        "begin_line": 1382,
        "end_line": 1386,
        "comment": "",
        "child_ranges": [
            "(line 1383,col 5)-(line 1385,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping4()",
        "snippet": "  public void testScoping4() throws Exception {\n    testTypes(\"/** @type{Number}*/var b; if (true) /** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:1 with type (Number|null)\");\n  }\n",
        "begin_line": 1388,
        "end_line": 1392,
        "comment": "",
        "child_ranges": [
            "(line 1389,col 5)-(line 1391,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping5()",
        "snippet": "  public void testScoping5() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; var b;\");\n  }\n",
        "begin_line": 1394,
        "end_line": 1398,
        "comment": "",
        "child_ranges": [
            "(line 1397,col 5)-(line 1397,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping6()",
        "snippet": "  public void testScoping6() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; if (true) var b;\");\n  }\n",
        "begin_line": 1400,
        "end_line": 1404,
        "comment": "",
        "child_ranges": [
            "(line 1403,col 5)-(line 1403,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping7()",
        "snippet": "  public void testScoping7() throws Exception {\n    testTypes(\"/** @constructor */function A() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of A\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1406,
        "end_line": 1413,
        "comment": "",
        "child_ranges": [
            "(line 1407,col 5)-(line 1412,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping8()",
        "snippet": "  public void testScoping8() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\" +\n        \"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1415,
        "end_line": 1423,
        "comment": "",
        "child_ranges": [
            "(line 1416,col 5)-(line 1422,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping9()",
        "snippet": "  public void testScoping9() throws Exception {\n    testTypes(\"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\" +\n        \"/** @constructor */function A() {}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1425,
        "end_line": 1433,
        "comment": "",
        "child_ranges": [
            "(line 1426,col 5)-(line 1432,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping10()",
        "snippet": "  public void testScoping10() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = function b(){};\");\n\n    // a declared, b is not\n    assertTrue(p.scope.isDeclared(\"a\", false));\n    assertFalse(p.scope.isDeclared(\"b\", false));\n\n    // checking that a has the correct assigned type\n    assertEquals(\"function (): undefined\",\n        p.scope.getVar(\"a\").getType().toString());\n  }\n",
        "begin_line": 1435,
        "end_line": 1445,
        "comment": "",
        "child_ranges": [
            "(line 1436,col 5)-(line 1436,col 78)",
            "(line 1439,col 5)-(line 1439,col 47)",
            "(line 1440,col 5)-(line 1440,col 48)",
            "(line 1443,col 5)-(line 1444,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping11()",
        "snippet": "  public void testScoping11() throws Exception {\n    // named function expressions create a binding in their body only\n    // the return is wrong but the assignment is ok since the type of b is ?\n    testTypes(\n        \"/** @return {number} */var a = function b(){ return b };\",\n        \"inconsistent return type\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1447,
        "end_line": 1455,
        "comment": "",
        "child_ranges": [
            "(line 1450,col 5)-(line 1454,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping12()",
        "snippet": "  public void testScoping12() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @type {number} */ F.prototype.bar = 3;\" +\n        \"/** @param {!F} f */ function g(f) {\" +\n        \"  /** @return {string} */\" +\n        \"  function h() {\" +\n        \"    return f.bar;\" +\n        \"  }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1457,
        "end_line": 1470,
        "comment": "",
        "child_ranges": [
            "(line 1458,col 5)-(line 1469,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments1()",
        "snippet": "  public void testFunctionArguments1() throws Exception {\n    testFunctionType(\n        \"/** @param {number} a\\n@return {string} */\" +\n        \"function f(a) {}\",\n        \"function (number): string\");\n  }\n",
        "begin_line": 1472,
        "end_line": 1477,
        "comment": "",
        "child_ranges": [
            "(line 1473,col 5)-(line 1476,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments2()",
        "snippet": "  public void testFunctionArguments2() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(opt_a) {}\",\n        \"function (number=): string\");\n  }\n",
        "begin_line": 1479,
        "end_line": 1484,
        "comment": "",
        "child_ranges": [
            "(line 1480,col 5)-(line 1483,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments3()",
        "snippet": "  public void testFunctionArguments3() throws Exception {\n    testFunctionType(\n        \"/** @param {number} b\\n@return {string} */\" +\n        \"function f(a,b) {}\",\n        \"function (?, number): string\");\n  }\n",
        "begin_line": 1486,
        "end_line": 1491,
        "comment": "",
        "child_ranges": [
            "(line 1487,col 5)-(line 1490,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments4()",
        "snippet": "  public void testFunctionArguments4() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(a,opt_a) {}\",\n        \"function (?, number=): string\");\n  }\n",
        "begin_line": 1493,
        "end_line": 1498,
        "comment": "",
        "child_ranges": [
            "(line 1494,col 5)-(line 1497,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments5()",
        "snippet": "  public void testFunctionArguments5() throws Exception {\n    testTypes(\n        \"function a(opt_a,a) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1500,
        "end_line": 1504,
        "comment": "",
        "child_ranges": [
            "(line 1501,col 5)-(line 1503,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments6()",
        "snippet": "  public void testFunctionArguments6() throws Exception {\n    testTypes(\n        \"function a(var_args,a) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1506,
        "end_line": 1510,
        "comment": "",
        "child_ranges": [
            "(line 1507,col 5)-(line 1509,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments7()",
        "snippet": "  public void testFunctionArguments7() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(a,opt_a,var_args) {}\");\n  }\n",
        "begin_line": 1512,
        "end_line": 1516,
        "comment": "",
        "child_ranges": [
            "(line 1513,col 5)-(line 1515,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments8()",
        "snippet": "  public void testFunctionArguments8() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,var_args,b) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1518,
        "end_line": 1522,
        "comment": "",
        "child_ranges": [
            "(line 1519,col 5)-(line 1521,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments9()",
        "snippet": "  public void testFunctionArguments9() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,var_args,b,c) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1524,
        "end_line": 1529,
        "comment": "",
        "child_ranges": [
            "(line 1526,col 5)-(line 1528,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments10()",
        "snippet": "  public void testFunctionArguments10() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,b,c) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1531,
        "end_line": 1536,
        "comment": "",
        "child_ranges": [
            "(line 1533,col 5)-(line 1535,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments11()",
        "snippet": "  public void testFunctionArguments11() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,b,c,var_args,d) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1538,
        "end_line": 1542,
        "comment": "",
        "child_ranges": [
            "(line 1539,col 5)-(line 1541,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments12()",
        "snippet": "  public void testFunctionArguments12() throws Exception {\n    testTypes(\"/** @param foo {String} */function bar(baz){}\",\n        \"parameter foo does not appear in bar's parameter list\");\n  }\n",
        "begin_line": 1544,
        "end_line": 1547,
        "comment": "",
        "child_ranges": [
            "(line 1545,col 5)-(line 1546,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments13()",
        "snippet": "  public void testFunctionArguments13() throws Exception {\n    // verifying that the argument type have non-inferrable types\n    testTypes(\n        \"/** @return {boolean} */ function u() { return true; }\" +\n        \"/** @param {boolean} b\\n@return {?boolean} */\" +\n        \"function f(b) { if (u()) { b = null; } return b; }\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1549,
        "end_line": 1558,
        "comment": "",
        "child_ranges": [
            "(line 1551,col 5)-(line 1557,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments14()",
        "snippet": "  public void testFunctionArguments14() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @param {number} opt_y\\n\" +\n        \" * @param {boolean} var_args\\n\" +\n        \" */ function f(x, opt_y, var_args) {}\" +\n        \"f('3'); f('3', 2); f('3', 2, true); f('3', 2, true, false);\");\n  }\n",
        "begin_line": 1560,
        "end_line": 1568,
        "comment": "",
        "child_ranges": [
            "(line 1561,col 5)-(line 1567,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments15()",
        "snippet": "  public void testFunctionArguments15() throws Exception {\n    testTypes(\n        \"/** @param {?function(*)} f */\" +\n        \"function g(f) { f(1, 2); }\",\n        \"Function f: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1570,
        "end_line": 1577,
        "comment": "",
        "child_ranges": [
            "(line 1571,col 5)-(line 1576,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments16()",
        "snippet": "  public void testFunctionArguments16() throws Exception {\n    testTypes(\n        \"/** @param {...number} var_args */\" +\n        \"function g(var_args) {} g(1, true);\",\n        \"actual parameter 2 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 1579,
        "end_line": 1586,
        "comment": "",
        "child_ranges": [
            "(line 1580,col 5)-(line 1585,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrintFunctionName1()",
        "snippet": "  public void testPrintFunctionName1() throws Exception {\n    // Ensures that the function name is pretty.\n    testTypes(\n        \"var goog = {}; goog.run = function(f) {};\" +\n        \"goog.run();\",\n        \"Function goog.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1588,
        "end_line": 1596,
        "comment": "",
        "child_ranges": [
            "(line 1590,col 5)-(line 1595,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrintFunctionName2()",
        "snippet": "  public void testPrintFunctionName2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.run = function(f) {};\" +\n        \"(new Foo).run();\",\n        \"Function Foo.prototype.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1598,
        "end_line": 1606,
        "comment": "",
        "child_ranges": [
            "(line 1599,col 5)-(line 1605,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference1()",
        "snippet": "  public void testFunctionInference1() throws Exception {\n    testFunctionType(\n        \"function f(a) {}\",\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1608,
        "end_line": 1612,
        "comment": "",
        "child_ranges": [
            "(line 1609,col 5)-(line 1611,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference2()",
        "snippet": "  public void testFunctionInference2() throws Exception {\n    testFunctionType(\n        \"function f(a,b) {}\",\n        \"function (?, ?): undefined\");\n  }\n",
        "begin_line": 1614,
        "end_line": 1618,
        "comment": "",
        "child_ranges": [
            "(line 1615,col 5)-(line 1617,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference3()",
        "snippet": "  public void testFunctionInference3() throws Exception {\n    testFunctionType(\n        \"function f(var_args) {}\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 1620,
        "end_line": 1624,
        "comment": "",
        "child_ranges": [
            "(line 1621,col 5)-(line 1623,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference4()",
        "snippet": "  public void testFunctionInference4() throws Exception {\n    testFunctionType(\n        \"function f(a,b,c,var_args) {}\",\n        \"function (?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1626,
        "end_line": 1630,
        "comment": "",
        "child_ranges": [
            "(line 1627,col 5)-(line 1629,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference5()",
        "snippet": "  public void testFunctionInference5() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1632,
        "end_line": 1636,
        "comment": "",
        "child_ranges": [
            "(line 1633,col 5)-(line 1635,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference6()",
        "snippet": "  public void testFunctionInference6() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n        \"function (this:Date, ?=): string\");\n  }\n",
        "begin_line": 1638,
        "end_line": 1642,
        "comment": "",
        "child_ranges": [
            "(line 1639,col 5)-(line 1641,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference7()",
        "snippet": "  public void testFunctionInference7() throws Exception {\n    testFunctionType(\n        \"/** @this Date */function f(a,b,c,var_args) {}\",\n        \"function (this:Date, ?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1644,
        "end_line": 1648,
        "comment": "",
        "child_ranges": [
            "(line 1645,col 5)-(line 1647,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference8()",
        "snippet": "  public void testFunctionInference8() throws Exception {\n    testFunctionType(\n        \"function f() {}\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1650,
        "end_line": 1654,
        "comment": "",
        "child_ranges": [
            "(line 1651,col 5)-(line 1653,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference9()",
        "snippet": "  public void testFunctionInference9() throws Exception {\n    testFunctionType(\n        \"var f = function() {};\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1656,
        "end_line": 1660,
        "comment": "",
        "child_ranges": [
            "(line 1657,col 5)-(line 1659,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference10()",
        "snippet": "  public void testFunctionInference10() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@param {boolean} b\\n@return {string} */\" +\n        \"var f = function(a,b) {};\",\n        \"function (this:Date, ?, boolean): string\");\n  }\n",
        "begin_line": 1662,
        "end_line": 1667,
        "comment": "",
        "child_ranges": [
            "(line 1663,col 5)-(line 1666,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference11()",
        "snippet": "  public void testFunctionInference11() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @return {number}*/goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 1669,
        "end_line": 1675,
        "comment": "",
        "child_ranges": [
            "(line 1670,col 5)-(line 1674,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference12()",
        "snippet": "  public void testFunctionInference12() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1677,
        "end_line": 1683,
        "comment": "",
        "child_ranges": [
            "(line 1678,col 5)-(line 1682,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference13()",
        "snippet": "  public void testFunctionInference13() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @param {!goog.Foo} f */function eatFoo(f){};\",\n        \"eatFoo\",\n        \"function (goog.Foo): undefined\");\n  }\n",
        "begin_line": 1685,
        "end_line": 1692,
        "comment": "",
        "child_ranges": [
            "(line 1686,col 5)-(line 1691,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference14()",
        "snippet": "  public void testFunctionInference14() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @return {!goog.Foo} */function eatFoo(){ return new goog.Foo; };\",\n        \"eatFoo\",\n        \"function (): goog.Foo\");\n  }\n",
        "begin_line": 1694,
        "end_line": 1701,
        "comment": "",
        "child_ranges": [
            "(line 1695,col 5)-(line 1700,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference15()",
        "snippet": "  public void testFunctionInference15() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"f.prototype.foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1703,
        "end_line": 1709,
        "comment": "",
        "child_ranges": [
            "(line 1704,col 5)-(line 1708,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference16()",
        "snippet": "  public void testFunctionInference16() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"(new f).foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1711,
        "end_line": 1717,
        "comment": "",
        "child_ranges": [
            "(line 1712,col 5)-(line 1716,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference17()",
        "snippet": "  public void testFunctionInference17() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {}\" +\n        \"function abstractMethod() {}\" +\n        \"/** @param {number} x */ f.prototype.foo = abstractMethod;\",\n        \"(new f).foo\",\n        \"function (this:f, number): ?\");\n  }\n",
        "begin_line": 1719,
        "end_line": 1726,
        "comment": "",
        "child_ranges": [
            "(line 1720,col 5)-(line 1725,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference18()",
        "snippet": "  public void testFunctionInference18() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @this {Date} */ goog.eatWithDate;\",\n        \"goog.eatWithDate\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1728,
        "end_line": 1734,
        "comment": "",
        "child_ranges": [
            "(line 1729,col 5)-(line 1733,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference19()",
        "snippet": "  public void testFunctionInference19() throws Exception {\n    testFunctionType(\n        \"/** @param {string} x */ var f;\",\n        \"f\",\n        \"function (string): ?\");\n  }\n",
        "begin_line": 1736,
        "end_line": 1741,
        "comment": "",
        "child_ranges": [
            "(line 1737,col 5)-(line 1740,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference20()",
        "snippet": "  public void testFunctionInference20() throws Exception {\n    testFunctionType(\n        \"/** @this {Date} */ var f;\",\n        \"f\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1743,
        "end_line": 1748,
        "comment": "",
        "child_ranges": [
            "(line 1744,col 5)-(line 1747,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" /** @type {number} */ var x = 3;\\n\" +\n        \" function g() { x = null; }\" +\n        \" return x;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1750,
        "end_line": 1760,
        "comment": "",
        "child_ranges": [
            "(line 1751,col 5)-(line 1759,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = null;\\n\" +\n        \" function g() { x = 3; }\" +\n        \" g();\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1762,
        "end_line": 1774,
        "comment": "",
        "child_ranges": [
            "(line 1763,col 5)-(line 1773,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction3()",
        "snippet": "  public void testInnerFunction3() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = 3;\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1776,
        "end_line": 1789,
        "comment": "",
        "child_ranges": [
            "(line 1777,col 5)-(line 1788,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction4()",
        "snippet": "  public void testInnerFunction4() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = '3';\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = 3; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1791,
        "end_line": 1804,
        "comment": "",
        "child_ranges": [
            "(line 1792,col 5)-(line 1803,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction5()",
        "snippet": "  public void testInnerFunction5() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" /** @return {number} */\" +\n        \" function g() { var x = 3;x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1806,
        "end_line": 1818,
        "comment": "",
        "child_ranges": [
            "(line 1807,col 5)-(line 1817,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction6()",
        "snippet": "  public void testInnerFunction6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\", null);\n  }\n",
        "begin_line": 1820,
        "end_line": 1828,
        "comment": "",
        "child_ranges": [
            "(line 1821,col 5)-(line 1827,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction7()",
        "snippet": "  public void testInnerFunction7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" /** @type {number|function()} */\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1830,
        "end_line": 1842,
        "comment": "",
        "child_ranges": [
            "(line 1831,col 5)-(line 1841,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction8()",
        "snippet": "  public void testInnerFunction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" function x() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1844,
        "end_line": 1855,
        "comment": "",
        "child_ranges": [
            "(line 1845,col 5)-(line 1854,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction9()",
        "snippet": "  public void testInnerFunction9() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" function g() { x = null; };\\n\" +\n        \" function h() { return x == null; }\" +\n        \" return h();\" +\n        \"}\");\n  }\n",
        "begin_line": 1857,
        "end_line": 1865,
        "comment": "",
        "child_ranges": [
            "(line 1858,col 5)-(line 1864,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction10()",
        "snippet": "  public void testInnerFunction10() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @type {?number} */ var x = null;\" +\n        \"  /** @return {string} */\" +\n        \"  function g() {\" +\n        \"    if (!x) {\" +\n        \"      x = 1;\" +\n        \"    }\" +\n        \"    return x;\" +\n        \"  }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1867,
        "end_line": 1882,
        "comment": "",
        "child_ranges": [
            "(line 1868,col 5)-(line 1881,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction11()",
        "snippet": "  public void testInnerFunction11() throws Exception {\n    // TODO(nicksantos): This is actually bad inference, because\n    // h sets x to null. We should fix this, but for now we do it\n    // this way so that we don't break existing binaries. We will\n    // need to change TypeInference#isUnflowable to fix this.\n    testTypes(\n        \"function f() {\" +\n        \"  /** @type {?number} */ var x = null;\" +\n        \"  /** @return {number} */\" +\n        \"  function g() {\" +\n        \"    x = 1;\" +\n        \"    h();\" +\n        \"    return x;\" +\n        \"  }\" +\n        \"  function h() {\" +\n        \"    x = null;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 1884,
        "end_line": 1902,
        "comment": "",
        "child_ranges": [
            "(line 1889,col 5)-(line 1901,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling1()",
        "snippet": "  public void testAbstractMethodHandling1() throws Exception {\n    testTypes(\n        \"/** @type {Function} */ var abstractFn = function() {};\" +\n        \"abstractFn(1);\");\n  }\n",
        "begin_line": 1904,
        "end_line": 1908,
        "comment": "",
        "child_ranges": [
            "(line 1905,col 5)-(line 1907,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling2()",
        "snippet": "  public void testAbstractMethodHandling2() throws Exception {\n    testTypes(\n        \"var abstractFn = function() {};\" +\n        \"abstractFn(1);\",\n        \"Function abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1910,
        "end_line": 1917,
        "comment": "",
        "child_ranges": [
            "(line 1911,col 5)-(line 1916,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling3()",
        "snippet": "  public void testAbstractMethodHandling3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\");\n  }\n",
        "begin_line": 1919,
        "end_line": 1924,
        "comment": "",
        "child_ranges": [
            "(line 1920,col 5)-(line 1923,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling4()",
        "snippet": "  public void testAbstractMethodHandling4() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\",\n        \"Function goog.abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1926,
        "end_line": 1934,
        "comment": "",
        "child_ranges": [
            "(line 1927,col 5)-(line 1933,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling5()",
        "snippet": "  public void testAbstractMethodHandling5() throws Exception {\n    testTypes(\n        \"/** @type {!Function} */ var abstractFn = function() {};\" +\n        \"/** @param {number} x */ var f = abstractFn;\" +\n        \"f('x');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1936,
        "end_line": 1944,
        "comment": "",
        "child_ranges": [
            "(line 1937,col 5)-(line 1943,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling6()",
        "snippet": "  public void testAbstractMethodHandling6() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"/** @param {number} x */ goog.f = abstractFn;\" +\n        \"goog.f('x');\",\n        \"actual parameter 1 of goog.f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1946,
        "end_line": 1955,
        "comment": "",
        "child_ranges": [
            "(line 1947,col 5)-(line 1954,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference1()",
        "snippet": "  public void testMethodInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1957,
        "end_line": 1967,
        "comment": "",
        "child_ranges": [
            "(line 1958,col 5)-(line 1966,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference2()",
        "snippet": "  public void testMethodInference2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.F = function() {};\" +\n        \"/** @return {number} */ goog.F.prototype.foo = \" +\n        \"    function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {goog.F} */ \" +\n        \"goog.G = function() {};\" +\n        \"/** @override */ goog.G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1969,
        "end_line": 1981,
        "comment": "",
        "child_ranges": [
            "(line 1970,col 5)-(line 1980,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference3()",
        "snippet": "  public void testMethodInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1983,
        "end_line": 1995,
        "comment": "",
        "child_ranges": [
            "(line 1984,col 5)-(line 1994,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference4()",
        "snippet": "  public void testMethodInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1997,
        "end_line": 2009,
        "comment": "",
        "child_ranges": [
            "(line 1998,col 5)-(line 2008,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference5()",
        "snippet": "  public void testMethodInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x \\n * @return {string} */ \" +\n        \"F.prototype.foo = function(x) { return 'x'; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @type {number} */ G.prototype.num = 3;\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return this.num + y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2011,
        "end_line": 2024,
        "comment": "",
        "child_ranges": [
            "(line 2012,col 5)-(line 2023,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference6()",
        "snippet": "  public void testMethodInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { };\" +\n        \"(new G()).foo(1);\");\n  }\n",
        "begin_line": 2026,
        "end_line": 2034,
        "comment": "",
        "child_ranges": [
            "(line 2027,col 5)-(line 2033,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference7()",
        "snippet": "  public void testMethodInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function(x, y) { };\" +\n        \"(new G()).foo();\",\n        \"Function G.prototype.foo: called with 0 argument(s). \" +\n        \"Function requires at least 2 argument(s) \" +\n        \"and no more than 2 argument(s).\");\n  }\n",
        "begin_line": 2036,
        "end_line": 2047,
        "comment": "",
        "child_ranges": [
            "(line 2037,col 5)-(line 2046,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference8()",
        "snippet": "  public void testMethodInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(a, opt_b, var_args) { };\" +\n        \"(new G()).foo();\",\n        \"Function G.prototype.foo: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s).\");\n  }\n",
        "begin_line": 2049,
        "end_line": 2060,
        "comment": "",
        "child_ranges": [
            "(line 2050,col 5)-(line 2059,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference9()",
        "snippet": "  public void testMethodInference9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(a, var_args, opt_b) { };\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 2062,
        "end_line": 2071,
        "comment": "",
        "child_ranges": [
            "(line 2063,col 5)-(line 2070,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration1()",
        "snippet": "  public void testStaticMethodDeclaration1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { F.foo(true); }\" +\n        \"/** @param {number} x */ F.foo = function(x) {};\",\n        \"actual parameter 1 of F.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2073,
        "end_line": 2080,
        "comment": "",
        "child_ranges": [
            "(line 2074,col 5)-(line 2079,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration2()",
        "snippet": "  public void testStaticMethodDeclaration2() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"actual parameter 1 of goog.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2082,
        "end_line": 2089,
        "comment": "",
        "child_ranges": [
            "(line 2083,col 5)-(line 2088,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration3()",
        "snippet": "  public void testStaticMethodDeclaration3() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"goog.foo = function() {};\",\n        \"Function goog.foo: called with 1 argument(s). Function requires \" +\n        \"at least 0 argument(s) and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 2091,
        "end_line": 2097,
        "comment": "",
        "child_ranges": [
            "(line 2092,col 5)-(line 2096,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl1()",
        "snippet": "  public void testDuplicateStaticMethodDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (number): undefined, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (number): undefined\");\n  }\n",
        "begin_line": 2099,
        "end_line": 2107,
        "comment": "",
        "child_ranges": [
            "(line 2100,col 5)-(line 2106,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl2()",
        "snippet": "  public void testDuplicateStaticMethodDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x \\n * @suppress {duplicate} */ \" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2109,
        "end_line": 2115,
        "comment": "",
        "child_ranges": [
            "(line 2110,col 5)-(line 2114,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl3()",
        "snippet": "  public void testDuplicateStaticMethodDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2117,
        "end_line": 2122,
        "comment": "",
        "child_ranges": [
            "(line 2118,col 5)-(line 2121,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl4()",
        "snippet": "  public void testDuplicateStaticMethodDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Function} */ goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2124,
        "end_line": 2129,
        "comment": "",
        "child_ranges": [
            "(line 2125,col 5)-(line 2128,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl5()",
        "snippet": "  public void testDuplicateStaticMethodDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"/** @return {undefined} */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (?): undefined, \" +\n        \"original definition at [testcode]:1 with type \" +\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 2131,
        "end_line": 2139,
        "comment": "",
        "child_ranges": [
            "(line 2132,col 5)-(line 2138,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl1()",
        "snippet": "  public void testDuplicateStaticPropertyDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 2141,
        "end_line": 2147,
        "comment": "",
        "child_ranges": [
            "(line 2142,col 5)-(line 2146,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl2()",
        "snippet": "  public void testDuplicateStaticPropertyDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} \\n * @suppress {duplicate} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 2149,
        "end_line": 2155,
        "comment": "",
        "child_ranges": [
            "(line 2150,col 5)-(line 2154,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl3()",
        "snippet": "  public void testDuplicateStaticPropertyDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 2157,
        "end_line": 2165,
        "comment": "",
        "child_ranges": [
            "(line 2158,col 5)-(line 2164,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl4()",
        "snippet": "  public void testDuplicateStaticPropertyDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 2167,
        "end_line": 2175,
        "comment": "",
        "child_ranges": [
            "(line 2168,col 5)-(line 2174,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl5()",
        "snippet": "  public void testDuplicateStaticPropertyDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 2177,
        "end_line": 2185,
        "comment": "",
        "child_ranges": [
            "(line 2178,col 5)-(line 2184,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl6()",
        "snippet": "  public void testDuplicateStaticPropertyDecl6() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 2187,
        "end_line": 2192,
        "comment": "",
        "child_ranges": [
            "(line 2188,col 5)-(line 2191,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl7()",
        "snippet": "  public void testDuplicateStaticPropertyDecl7() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {string} x */ goog.foo;\" +\n        \"/** @type {function(string)} */ goog.foo;\");\n  }\n",
        "begin_line": 2194,
        "end_line": 2199,
        "comment": "",
        "child_ranges": [
            "(line 2195,col 5)-(line 2198,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl8()",
        "snippet": "  public void testDuplicateStaticPropertyDecl8() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\" +\n        \"/** @return {EventCopy} */ goog.foo;\");\n  }\n",
        "begin_line": 2201,
        "end_line": 2207,
        "comment": "",
        "child_ranges": [
            "(line 2202,col 5)-(line 2206,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl9()",
        "snippet": "  public void testDuplicateStaticPropertyDecl9() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\");\n  }\n",
        "begin_line": 2209,
        "end_line": 2215,
        "comment": "",
        "child_ranges": [
            "(line 2210,col 5)-(line 2214,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDec20()",
        "snippet": "  public void testDuplicateStaticPropertyDec20() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @fileoverview\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */\" +\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 2217,
        "end_line": 2226,
        "comment": "",
        "child_ranges": [
            "(line 2218,col 5)-(line 2225,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateLocalVarDecl()",
        "snippet": "  public void testDuplicateLocalVarDecl() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @param {number} x */\\n\" +\n        \"function f(x) { /** @type {string} */ var x = ''; }\",\n        Lists.newArrayList(\n            \"variable x redefined with type string, original definition\" +\n            \" at  [testcode] :2 with type number\",\n            \"initializing variable\\n\" +\n            \"found   : string\\n\" +\n            \"required: number\"));\n  }\n",
        "begin_line": 2228,
        "end_line": 2238,
        "comment": "",
        "child_ranges": [
            "(line 2229,col 5)-(line 2237,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod1()",
        "snippet": "  public void testDuplicateInstanceMethod1() throws Exception {\n    // If there's no jsdoc on the methods, then we treat them like\n    // any other inferred properties.\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.bar = function() {};\" +\n        \"F.prototype.bar = function() {};\");\n  }\n",
        "begin_line": 2240,
        "end_line": 2247,
        "comment": "",
        "child_ranges": [
            "(line 2243,col 5)-(line 2246,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod2()",
        "snippet": "  public void testDuplicateInstanceMethod2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\",\n        \"variable F.prototype.bar redefined with type \" +\n        \"function (this:F): undefined, original definition at \" +\n        \"[testcode]:1 with type function (this:F): undefined\");\n  }\n",
        "begin_line": 2249,
        "end_line": 2257,
        "comment": "",
        "child_ranges": [
            "(line 2250,col 5)-(line 2256,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod3()",
        "snippet": "  public void testDuplicateInstanceMethod3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.bar = function() {};\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\",\n        \"variable F.prototype.bar redefined with type \" +\n        \"function (this:F): undefined, original definition at \" +\n        \"[testcode]:1 with type function (this:F): undefined\");\n  }\n",
        "begin_line": 2259,
        "end_line": 2267,
        "comment": "",
        "child_ranges": [
            "(line 2260,col 5)-(line 2266,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod4()",
        "snippet": "  public void testDuplicateInstanceMethod4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\" +\n        \"F.prototype.bar = function() {};\");\n  }\n",
        "begin_line": 2269,
        "end_line": 2274,
        "comment": "",
        "child_ranges": [
            "(line 2270,col 5)-(line 2273,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration1()",
        "snippet": "  public void testStubFunctionDeclaration1() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @param {number} x \\n * @param {string} y \\n\" +\n        \"  * @return {number} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        \"function (this:f, number, string): number\");\n  }\n",
        "begin_line": 2276,
        "end_line": 2283,
        "comment": "",
        "child_ranges": [
            "(line 2277,col 5)-(line 2282,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration2()",
        "snippet": "  public void testStubFunctionDeclaration2() throws Exception {\n    testExternFunctionType(\n        // externs\n        \"/** @constructor */ function f() {};\" +\n        \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n        \"f.subclass\",\n        \"function (new:f.subclass): ?\");\n  }\n",
        "begin_line": 2285,
        "end_line": 2292,
        "comment": "",
        "child_ranges": [
            "(line 2286,col 5)-(line 2291,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration3()",
        "snippet": "  public void testStubFunctionDeclaration3() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @return {undefined} */ f.foo;\",\n        \"f.foo\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 2294,
        "end_line": 2300,
        "comment": "",
        "child_ranges": [
            "(line 2295,col 5)-(line 2299,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration4()",
        "snippet": "  public void testStubFunctionDeclaration4() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @return {number} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        \"function (this:f): number\");\n  }\n",
        "begin_line": 2302,
        "end_line": 2309,
        "comment": "",
        "child_ranges": [
            "(line 2303,col 5)-(line 2308,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration5()",
        "snippet": "  public void testStubFunctionDeclaration5() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @type {Function} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2311,
        "end_line": 2318,
        "comment": "",
        "child_ranges": [
            "(line 2312,col 5)-(line 2317,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration6()",
        "snippet": "  public void testStubFunctionDeclaration6() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2320,
        "end_line": 2326,
        "comment": "",
        "child_ranges": [
            "(line 2321,col 5)-(line 2325,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration7()",
        "snippet": "  public void testStubFunctionDeclaration7() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo = function() {};\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2328,
        "end_line": 2334,
        "comment": "",
        "child_ranges": [
            "(line 2329,col 5)-(line 2333,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration8()",
        "snippet": "  public void testStubFunctionDeclaration8() throws Exception {\n    testFunctionType(\n        \"/** @type {Function} */ var f = function() {}; \",\n        \"f\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2336,
        "end_line": 2341,
        "comment": "",
        "child_ranges": [
            "(line 2337,col 5)-(line 2340,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration9()",
        "snippet": "  public void testStubFunctionDeclaration9() throws Exception {\n    testFunctionType(\n        \"/** @type {function():number} */ var f; \",\n        \"f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 2343,
        "end_line": 2348,
        "comment": "",
        "child_ranges": [
            "(line 2344,col 5)-(line 2347,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration10()",
        "snippet": "  public void testStubFunctionDeclaration10() throws Exception {\n    testFunctionType(\n        \"/** @type {function(number):number} */ var f = function(x) {};\",\n        \"f\",\n        \"function (number): number\");\n  }\n",
        "begin_line": 2350,
        "end_line": 2355,
        "comment": "",
        "child_ranges": [
            "(line 2351,col 5)-(line 2354,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNestedFunctionInference1()",
        "snippet": "  public void testNestedFunctionInference1() throws Exception {\n    String nestedAssignOfFooAndBar =\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = f.prototype.bar = function(){};\";\n    testFunctionType(nestedAssignOfFooAndBar, \"(new f).bar\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 2357,
        "end_line": 2363,
        "comment": "",
        "child_ranges": [
            "(line 2358,col 5)-(line 2360,col 60)",
            "(line 2361,col 5)-(line 2362,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionType)\n      throws Exception {\n    testFunctionType(functionDef, \"f\", functionType);\n  }\n",
        "begin_line": 2369,
        "end_line": 2372,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code \"f\"}.\n   ",
        "child_ranges": [
            "(line 2371,col 5)-(line 2371,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    // using the variable initialization check to verify the function's type\n    testTypes(\n        functionDef +\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2378,
        "end_line": 2387,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2381,col 5)-(line 2386,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExternFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testExternFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    testTypes(\n        functionDef,\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\", false);\n  }\n",
        "begin_line": 2394,
        "end_line": 2402,
        "comment": "\n   * Tests the type of a function definition in externs.\n   * The function defined by {@code functionDef} should be\n   * named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2396,col 5)-(line 2401,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeRedefinition()",
        "snippet": "  public void testTypeRedefinition() throws Exception {\n    testTypes(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n        + \"/** @constructor */ a.A = function() {}\",\n        \"variable a.A redefined with type function (new:a.A): undefined, \" +\n        \"original definition at [testcode]:1 with type enum{a.A}\");\n  }\n",
        "begin_line": 2404,
        "end_line": 2409,
        "comment": "",
        "child_ranges": [
            "(line 2405,col 5)-(line 2408,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn1()",
        "snippet": "  public void testIn1() throws Exception {\n    testTypes(\"'foo' in Object\");\n  }\n",
        "begin_line": 2411,
        "end_line": 2413,
        "comment": "",
        "child_ranges": [
            "(line 2412,col 5)-(line 2412,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn2()",
        "snippet": "  public void testIn2() throws Exception {\n    testTypes(\"3 in Object\");\n  }\n",
        "begin_line": 2415,
        "end_line": 2417,
        "comment": "",
        "child_ranges": [
            "(line 2416,col 5)-(line 2416,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn3()",
        "snippet": "  public void testIn3() throws Exception {\n    testTypes(\"undefined in Object\");\n  }\n",
        "begin_line": 2419,
        "end_line": 2421,
        "comment": "",
        "child_ranges": [
            "(line 2420,col 5)-(line 2420,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn4()",
        "snippet": "  public void testIn4() throws Exception {\n    testTypes(\"Date in Object\",\n        \"left side of 'in'\\n\" +\n        \"found   : function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2423,
        "end_line": 2428,
        "comment": "",
        "child_ranges": [
            "(line 2424,col 5)-(line 2427,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn5()",
        "snippet": "  public void testIn5() throws Exception {\n    testTypes(\"'x' in null\",\n        \"'in' requires an object\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2430,
        "end_line": 2435,
        "comment": "",
        "child_ranges": [
            "(line 2431,col 5)-(line 2434,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn6()",
        "snippet": "  public void testIn6() throws Exception {\n    testTypes(\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\" +\n        \"g(1 in {});\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2437,
        "end_line": 2445,
        "comment": "",
        "child_ranges": [
            "(line 2438,col 5)-(line 2444,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn7()",
        "snippet": "  public void testIn7() throws Exception {\n    // Make sure we do inference in the 'in' expression.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  return g(x.foo) in {};\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2447,
        "end_line": 2463,
        "comment": "",
        "child_ranges": [
            "(line 2449,col 5)-(line 2462,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn1()",
        "snippet": "  public void testForIn1() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"for (var k in {}) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2465,
        "end_line": 2474,
        "comment": "",
        "child_ranges": [
            "(line 2466,col 5)-(line 2473,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn2()",
        "snippet": "  public void testForIn2() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @enum {string} */ var E = {FOO: 'bar'};\" +\n        \"/** @type {Object.<E, string>} */ var obj = {};\" +\n        \"var k = null;\" +\n        \"for (k in obj) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : E.<string>\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2476,
        "end_line": 2488,
        "comment": "",
        "child_ranges": [
            "(line 2477,col 5)-(line 2487,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn3()",
        "snippet": "  public void testForIn3() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @type {Object.<number>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(obj[k]);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2490,
        "end_line": 2500,
        "comment": "",
        "child_ranges": [
            "(line 2491,col 5)-(line 2499,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn4()",
        "snippet": "  public void testForIn4() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @enum {string} */ var E = {FOO: 'bar'};\" +\n        \"/** @type {Object.<E, Array>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(obj[k]);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (Array|null)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2502,
        "end_line": 2513,
        "comment": "",
        "child_ranges": [
            "(line 2503,col 5)-(line 2512,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn5()",
        "snippet": "  public void testForIn5() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @constructor */ var E = function(){};\" +\n        \"/** @type {Object.<E, number>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2515,
        "end_line": 2526,
        "comment": "",
        "child_ranges": [
            "(line 2516,col 5)-(line 2525,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison2()",
        "snippet": "  public void testComparison2() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type !Date */var b;\" +\n        \"if (a!==b) {}\",\n        \"condition always evaluates to the same value\\n\" +\n        \"left : number\\n\" +\n        \"right: Date\");\n  }\n",
        "begin_line": 2538,
        "end_line": 2545,
        "comment": "",
        "child_ranges": [
            "(line 2539,col 5)-(line 2544,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison3()",
        "snippet": "  public void testComparison3() throws Exception {\n    // Since null == undefined in JavaScript, this code is reasonable.\n    testTypes(\"/** @type {(Object,undefined)} */var a;\" +\n        \"var b = a == null\");\n  }\n",
        "begin_line": 2547,
        "end_line": 2551,
        "comment": "",
        "child_ranges": [
            "(line 2549,col 5)-(line 2550,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison4()",
        "snippet": "  public void testComparison4() throws Exception {\n    testTypes(\"/** @type {(!Object,undefined)} */var a;\" +\n        \"/** @type {!Object} */var b;\" +\n        \"var c = a == b\");\n  }\n",
        "begin_line": 2553,
        "end_line": 2557,
        "comment": "",
        "child_ranges": [
            "(line 2554,col 5)-(line 2556,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison5()",
        "snippet": "  public void testComparison5() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2559,
        "end_line": 2566,
        "comment": "",
        "child_ranges": [
            "(line 2560,col 5)-(line 2565,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison6()",
        "snippet": "  public void testComparison6() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a != b\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2568,
        "end_line": 2575,
        "comment": "",
        "child_ranges": [
            "(line 2569,col 5)-(line 2574,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison7()",
        "snippet": "  public void testComparison7() throws Exception {\n    testTypes(\"var a;\" +\n        \"var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: undefined\");\n  }\n",
        "begin_line": 2577,
        "end_line": 2584,
        "comment": "",
        "child_ranges": [
            "(line 2578,col 5)-(line 2583,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison8()",
        "snippet": "  public void testComparison8() throws Exception {\n    testTypes(\"/** @type {Array.<string>} */ var a = [];\" +\n        \"a[0] == null || a[1] == undefined\");\n  }\n",
        "begin_line": 2586,
        "end_line": 2589,
        "comment": "",
        "child_ranges": [
            "(line 2587,col 5)-(line 2588,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison9()",
        "snippet": "  public void testComparison9() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] == null\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2591,
        "end_line": 2597,
        "comment": "",
        "child_ranges": [
            "(line 2592,col 5)-(line 2596,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison10()",
        "snippet": "  public void testComparison10() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] === null\");\n  }\n",
        "begin_line": 2599,
        "end_line": 2602,
        "comment": "",
        "child_ranges": [
            "(line 2600,col 5)-(line 2601,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison11()",
        "snippet": "  public void testComparison11() throws Exception {\n    testTypes(\n        \"(function(){}) == 'x'\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 2604,
        "end_line": 2610,
        "comment": "",
        "child_ranges": [
            "(line 2605,col 5)-(line 2609,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison12()",
        "snippet": "  public void testComparison12() throws Exception {\n    testTypes(\n        \"(function(){}) == 3\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 2612,
        "end_line": 2618,
        "comment": "",
        "child_ranges": [
            "(line 2613,col 5)-(line 2617,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison13()",
        "snippet": "  public void testComparison13() throws Exception {\n    testTypes(\n        \"(function(){}) == false\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: boolean\");\n  }\n",
        "begin_line": 2620,
        "end_line": 2626,
        "comment": "",
        "child_ranges": [
            "(line 2621,col 5)-(line 2625,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeleteOperator1()",
        "snippet": "  public void testDeleteOperator1() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/** @return {string} */ function f() { return delete x['a']; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2628,
        "end_line": 2635,
        "comment": "",
        "child_ranges": [
            "(line 2629,col 5)-(line 2634,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeleteOperator2()",
        "snippet": "  public void testDeleteOperator2() throws Exception {\n    testTypes(\n        \"var obj = {};\" +\n        \"/** \\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @return {Object} */ function f(x) { return obj; }\" +\n        \"/** @param {?number} x */ function g(x) {\" +\n        \"  if (x) { delete f(x)['a']; }\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2637,
        "end_line": 2649,
        "comment": "",
        "child_ranges": [
            "(line 2638,col 5)-(line 2648,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnumStaticMethod1()",
        "snippet": "  public void testEnumStaticMethod1() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"Foo.method(true);\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2651,
        "end_line": 2659,
        "comment": "",
        "child_ranges": [
            "(line 2652,col 5)-(line 2658,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnumStaticMethod2()",
        "snippet": "  public void testEnumStaticMethod2() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"function f() { Foo.method(true); }\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2661,
        "end_line": 2669,
        "comment": "",
        "child_ranges": [
            "(line 2662,col 5)-(line 2668,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum1()",
        "snippet": "  public void testEnum1() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n\" +\n        \"/**@type {a}*/var d;d=a.BB;\");\n  }\n",
        "begin_line": 2671,
        "end_line": 2674,
        "comment": "",
        "child_ranges": [
            "(line 2672,col 5)-(line 2673,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum2()",
        "snippet": "  public void testEnum2() throws Exception {\n    testTypes(\"/**@enum*/var a={b:1}\",\n        \"enum key b must be a syntactic constant\");\n  }\n",
        "begin_line": 2676,
        "end_line": 2679,
        "comment": "",
        "child_ranges": [
            "(line 2677,col 5)-(line 2678,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum3()",
        "snippet": "  public void testEnum3() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,BB:2}\",\n        \"variable a.BB redefined with type a.<number>, \" +\n        \"original definition at [testcode]:1 with type a.<number>\");\n  }\n",
        "begin_line": 2681,
        "end_line": 2685,
        "comment": "",
        "child_ranges": [
            "(line 2682,col 5)-(line 2684,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum4()",
        "snippet": "  public void testEnum4() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:'string'}\",\n        \"assignment to property BB of enum{a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2687,
        "end_line": 2692,
        "comment": "",
        "child_ranges": [
            "(line 2688,col 5)-(line 2691,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum5()",
        "snippet": "  public void testEnum5() throws Exception {\n    testTypes(\"/**@enum {String}*/var a={BB:'string'}\",\n        \"assignment to property BB of enum{a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null)\");\n  }\n",
        "begin_line": 2694,
        "end_line": 2699,
        "comment": "",
        "child_ranges": [
            "(line 2695,col 5)-(line 2698,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum6()",
        "snippet": "  public void testEnum6() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n/**@type {!Array}*/var d;d=a.BB;\",\n        \"assignment\\n\" +\n        \"found   : a.<number>\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 2701,
        "end_line": 2706,
        "comment": "",
        "child_ranges": [
            "(line 2702,col 5)-(line 2705,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum7()",
        "snippet": "  public void testEnum7() throws Exception {\n    testTypes(\"/** @enum */var a={AA:1,BB:2,CC:3};\" +\n        \"/** @type a */var b=a.D;\",\n        \"element D does not exist on this enum\");\n  }\n",
        "begin_line": 2708,
        "end_line": 2712,
        "comment": "",
        "child_ranges": [
            "(line 2709,col 5)-(line 2711,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum8()",
        "snippet": "  public void testEnum8() throws Exception {\n    testClosureTypesMultipleWarnings(\"/** @enum */var a=8;\",\n        Lists.newArrayList(\n            \"enum initializer must be an object literal or an enum\",\n            \"initializing variable\\n\" +\n            \"found   : number\\n\" +\n            \"required: enum{a}\"));\n  }\n",
        "begin_line": 2714,
        "end_line": 2721,
        "comment": "",
        "child_ranges": [
            "(line 2715,col 5)-(line 2720,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum9()",
        "snippet": "  public void testEnum9() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = {};\" +\n        \"/** @enum */goog.a=8;\",\n        Lists.newArrayList(\n            \"assignment to property a of goog\\n\" +\n            \"found   : number\\n\" +\n            \"required: enum{goog.a}\",\n            \"enum initializer must be an object literal or an enum\"));\n  }\n",
        "begin_line": 2723,
        "end_line": 2732,
        "comment": "",
        "child_ranges": [
            "(line 2724,col 5)-(line 2731,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum10()",
        "snippet": "  public void testEnum10() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { A : 3 };\");\n  }\n",
        "begin_line": 2734,
        "end_line": 2738,
        "comment": "",
        "child_ranges": [
            "(line 2735,col 5)-(line 2737,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum11()",
        "snippet": "  public void testEnum11() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { 502 : 3 };\");\n  }\n",
        "begin_line": 2740,
        "end_line": 2744,
        "comment": "",
        "child_ranges": [
            "(line 2741,col 5)-(line 2743,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum12()",
        "snippet": "  public void testEnum12() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum */ var b = a;\");\n  }\n",
        "begin_line": 2746,
        "end_line": 2750,
        "comment": "",
        "child_ranges": [
            "(line 2747,col 5)-(line 2749,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum13()",
        "snippet": "  public void testEnum13() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum {string} */ var b = a;\",\n        \"incompatible enum element types\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2752,
        "end_line": 2759,
        "comment": "",
        "child_ranges": [
            "(line 2753,col 5)-(line 2758,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum14()",
        "snippet": "  public void testEnum14() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.FOO;\");\n  }\n",
        "begin_line": 2761,
        "end_line": 2766,
        "comment": "",
        "child_ranges": [
            "(line 2762,col 5)-(line 2765,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum15()",
        "snippet": "  public void testEnum15() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.BAR;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2768,
        "end_line": 2774,
        "comment": "",
        "child_ranges": [
            "(line 2769,col 5)-(line 2773,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum16()",
        "snippet": "  public void testEnum16() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog .a={BB:1,BB:2}\",\n        \"variable goog.a.BB redefined with type goog.a.<number>, \" +\n        \"original definition at [testcode]:1 with type goog.a.<number>\");\n  }\n",
        "begin_line": 2776,
        "end_line": 2781,
        "comment": "",
        "child_ranges": [
            "(line 2777,col 5)-(line 2780,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum17()",
        "snippet": "  public void testEnum17() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:'string'}\",\n        \"assignment to property BB of enum{goog.a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2783,
        "end_line": 2789,
        "comment": "",
        "child_ranges": [
            "(line 2784,col 5)-(line 2788,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum18()",
        "snippet": "  public void testEnum18() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {!E} x\\n@return {number} */\\n\" +\n        \"var f = function(x) { return x; };\");\n  }\n",
        "begin_line": 2791,
        "end_line": 2795,
        "comment": "",
        "child_ranges": [
            "(line 2792,col 5)-(line 2794,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum19()",
        "snippet": "  public void testEnum19() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {number} x\\n@return {!E} */\\n\" +\n        \"var f = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: E.<number>\");\n  }\n",
        "begin_line": 2797,
        "end_line": 2804,
        "comment": "",
        "child_ranges": [
            "(line 2798,col 5)-(line 2803,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum20()",
        "snippet": "  public void testEnum20() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2}; var x = []; x[E.A] = 0;\");\n  }\n",
        "begin_line": 2806,
        "end_line": 2808,
        "comment": "",
        "child_ranges": [
            "(line 2807,col 5)-(line 2807,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum21()",
        "snippet": "  public void testEnum21() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @enum {string} */ var E = {A : 'a', B : 'b'};\\n\" +\n        \"/** @param {!E} x\\n@return {!E} */ function f(x) { return x; }\");\n    Node nodeX = n.getLastChild().getLastChild().getLastChild().getLastChild();\n    JSType typeE = nodeX.getJSType();\n    assertFalse(typeE.isObject());\n    assertFalse(typeE.isNullable());\n  }\n",
        "begin_line": 2810,
        "end_line": 2818,
        "comment": "",
        "child_ranges": [
            "(line 2811,col 5)-(line 2813,col 74)",
            "(line 2814,col 5)-(line 2814,col 79)",
            "(line 2815,col 5)-(line 2815,col 37)",
            "(line 2816,col 5)-(line 2816,col 34)",
            "(line 2817,col 5)-(line 2817,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum22()",
        "snippet": "  public void testEnum22() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2820,
        "end_line": 2823,
        "comment": "",
        "child_ranges": [
            "(line 2821,col 5)-(line 2822,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum23()",
        "snippet": "  public void testEnum23() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {string} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2825,
        "end_line": 2831,
        "comment": "",
        "child_ranges": [
            "(line 2826,col 5)-(line 2830,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum24()",
        "snippet": "  public void testEnum24() throws Exception {\n    testTypes(\"/**@enum {Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<(Object|null)>\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2833,
        "end_line": 2839,
        "comment": "",
        "child_ranges": [
            "(line 2834,col 5)-(line 2838,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum25()",
        "snippet": "  public void testEnum25() throws Exception {\n    testTypes(\"/**@enum {!Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2841,
        "end_line": 2844,
        "comment": "",
        "child_ranges": [
            "(line 2842,col 5)-(line 2843,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum26()",
        "snippet": "  public void testEnum26() throws Exception {\n    testTypes(\"var a = {}; /**@enum*/ a.B = {A: 1, B: 2};\" +\n        \"/** @param {a.B} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2846,
        "end_line": 2849,
        "comment": "",
        "child_ranges": [
            "(line 2847,col 5)-(line 2848,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum27()",
        "snippet": "  public void testEnum27() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A == x; }\");\n  }\n",
        "begin_line": 2851,
        "end_line": 2855,
        "comment": "",
        "child_ranges": [
            "(line 2853,col 5)-(line 2854,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum28()",
        "snippet": "  public void testEnum28() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A.B == x; }\");\n  }\n",
        "begin_line": 2857,
        "end_line": 2861,
        "comment": "",
        "child_ranges": [
            "(line 2859,col 5)-(line 2860,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum29()",
        "snippet": "  public void testEnum29() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2863,
        "end_line": 2869,
        "comment": "",
        "child_ranges": [
            "(line 2864,col 5)-(line 2868,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum30()",
        "snippet": "  public void testEnum30() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2871,
        "end_line": 2874,
        "comment": "",
        "child_ranges": [
            "(line 2872,col 5)-(line 2873,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum31()",
        "snippet": "  public void testEnum31() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: A.<number>\");\n  }\n",
        "begin_line": 2876,
        "end_line": 2882,
        "comment": "",
        "child_ranges": [
            "(line 2877,col 5)-(line 2881,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum32()",
        "snippet": "  public void testEnum32() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2884,
        "end_line": 2887,
        "comment": "",
        "child_ranges": [
            "(line 2885,col 5)-(line 2886,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum34()",
        "snippet": "  public void testEnum34() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @param {number} x */ function f(x) { return x == A.B; }\");\n  }\n",
        "begin_line": 2889,
        "end_line": 2892,
        "comment": "",
        "child_ranges": [
            "(line 2890,col 5)-(line 2891,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum35()",
        "snippet": "  public void testEnum35() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {a.b} */ function f() { return a.b.C; }\");\n  }\n",
        "begin_line": 2894,
        "end_line": 2897,
        "comment": "",
        "child_ranges": [
            "(line 2895,col 5)-(line 2896,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum36()",
        "snippet": "  public void testEnum36() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {!a.b} */ function f() { return 1; }\",\n              \"inconsistent return type\\n\" +\n              \"found   : number\\n\" +\n              \"required: a.b.<number>\");\n  }\n",
        "begin_line": 2899,
        "end_line": 2905,
        "comment": "",
        "child_ranges": [
            "(line 2900,col 5)-(line 2904,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum37()",
        "snippet": "  public void testEnum37() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @enum {number} */ goog.a = {};\" +\n        \"/** @enum */ var b = goog.a;\");\n  }\n",
        "begin_line": 2907,
        "end_line": 2912,
        "comment": "",
        "child_ranges": [
            "(line 2908,col 5)-(line 2911,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum38()",
        "snippet": "  public void testEnum38() throws Exception {\n    testTypes(\n        \"/** @enum {MyEnum} */ var MyEnum = {};\" +\n        \"/** @param {MyEnum} x */ function f(x) {}\",\n        \"Parse error. Cycle detected in inheritance chain \" +\n        \"of type MyEnum\");\n  }\n",
        "begin_line": 2914,
        "end_line": 2920,
        "comment": "",
        "child_ranges": [
            "(line 2915,col 5)-(line 2919,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum39()",
        "snippet": "  public void testEnum39() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {MyEnum} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2922,
        "end_line": 2930,
        "comment": "",
        "child_ranges": [
            "(line 2923,col 5)-(line 2929,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum40()",
        "snippet": "  public void testEnum40() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {number} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2932,
        "end_line": 2940,
        "comment": "",
        "child_ranges": [
            "(line 2933,col 5)-(line 2939,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum41()",
        "snippet": "  public void testEnum41() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var MyEnum = {/** @const */ FOO: 1};\" +\n        \"/** @return {string} */\" +\n        \"function f() { return MyEnum.FOO; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2942,
        "end_line": 2950,
        "comment": "",
        "child_ranges": [
            "(line 2943,col 5)-(line 2949,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum42()",
        "snippet": "  public void testEnum42() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @enum {Object} */ var MyEnum = {FOO: {newProperty: 1, b: 2}};\" +\n        \"f(MyEnum.FOO.newProperty);\");\n  }\n",
        "begin_line": 2952,
        "end_line": 2957,
        "comment": "",
        "child_ranges": [
            "(line 2953,col 5)-(line 2956,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum1()",
        "snippet": "  public void testAliasedEnum1() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2959,
        "end_line": 2964,
        "comment": "",
        "child_ranges": [
            "(line 2960,col 5)-(line 2963,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum2()",
        "snippet": "  public void testAliasedEnum2() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2966,
        "end_line": 2971,
        "comment": "",
        "child_ranges": [
            "(line 2967,col 5)-(line 2970,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum3()",
        "snippet": "  public void testAliasedEnum3() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2973,
        "end_line": 2978,
        "comment": "",
        "child_ranges": [
            "(line 2974,col 5)-(line 2977,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum4()",
        "snippet": "  public void testAliasedEnum4() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2980,
        "end_line": 2985,
        "comment": "",
        "child_ranges": [
            "(line 2981,col 5)-(line 2984,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum5()",
        "snippet": "  public void testAliasedEnum5() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {string} x */ function f(x) {} f(MyEnum.FOO);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : YourEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2987,
        "end_line": 2995,
        "comment": "",
        "child_ranges": [
            "(line 2988,col 5)-(line 2994,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse1()",
        "snippet": "  public void testBackwardsEnumUse1() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\");\n  }\n",
        "begin_line": 2997,
        "end_line": 3001,
        "comment": "",
        "child_ranges": [
            "(line 2998,col 5)-(line 3000,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse2()",
        "snippet": "  public void testBackwardsEnumUse2() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3003,
        "end_line": 3010,
        "comment": "",
        "child_ranges": [
            "(line 3004,col 5)-(line 3009,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse3()",
        "snippet": "  public void testBackwardsEnumUse3() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\");\n  }\n",
        "begin_line": 3012,
        "end_line": 3017,
        "comment": "",
        "child_ranges": [
            "(line 3013,col 5)-(line 3016,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse4()",
        "snippet": "  public void testBackwardsEnumUse4() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"inconsistent return type\\n\" +\n        \"found   : YourEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3019,
        "end_line": 3027,
        "comment": "",
        "child_ranges": [
            "(line 3020,col 5)-(line 3026,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse5()",
        "snippet": "  public void testBackwardsEnumUse5() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.BAR; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 3029,
        "end_line": 3035,
        "comment": "",
        "child_ranges": [
            "(line 3030,col 5)-(line 3034,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse1()",
        "snippet": "  public void testBackwardsTypedefUse1() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {string} */ var MyTypedef;\",\n        \"@this type of a function must be an object\\n\" +\n        \"Actual type: string\");\n  }\n",
        "begin_line": 3037,
        "end_line": 3043,
        "comment": "",
        "child_ranges": [
            "(line 3038,col 5)-(line 3042,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse2()",
        "snippet": "  public void testBackwardsTypedefUse2() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {!(Date|Array)} */ var MyTypedef;\");\n  }\n",
        "begin_line": 3045,
        "end_line": 3049,
        "comment": "",
        "child_ranges": [
            "(line 3046,col 5)-(line 3048,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse3()",
        "snippet": "  public void testBackwardsTypedefUse3() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {(Date|string)} */ var MyTypedef;\",\n        \"@this type of a function must be an object\\n\" +\n        \"Actual type: (Date|null|string)\");\n  }\n",
        "begin_line": 3051,
        "end_line": 3057,
        "comment": "",
        "child_ranges": [
            "(line 3052,col 5)-(line 3056,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse4()",
        "snippet": "  public void testBackwardsTypedefUse4() throws Exception {\n    testTypes(\n        \"/** @return {MyTypedef} */ function f() { return null; }\" +\n        \"/** @typedef {string} */ var MyTypedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3059,
        "end_line": 3066,
        "comment": "",
        "child_ranges": [
            "(line 3060,col 5)-(line 3065,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse6()",
        "snippet": "  public void testBackwardsTypedefUse6() throws Exception {\n    testTypes(\n        \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {string} */ goog.MyTypedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3068,
        "end_line": 3076,
        "comment": "",
        "child_ranges": [
            "(line 3069,col 5)-(line 3075,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse7()",
        "snippet": "  public void testBackwardsTypedefUse7() throws Exception {\n    testTypes(\n        \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {Object} */ goog.MyTypedef;\");\n  }\n",
        "begin_line": 3078,
        "end_line": 3083,
        "comment": "",
        "child_ranges": [
            "(line 3079,col 5)-(line 3082,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse8()",
        "snippet": "  public void testBackwardsTypedefUse8() throws Exception {\n    // Tehnically, this isn't quite right, because the JS runtime\n    // will coerce null -> the global object. But we'll punt on that for now.\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;\");\n  }\n",
        "begin_line": 3085,
        "end_line": 3093,
        "comment": "",
        "child_ranges": [
            "(line 3088,col 5)-(line 3092,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse9()",
        "snippet": "  public void testBackwardsTypedefUse9() throws Exception {\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 3095,
        "end_line": 3104,
        "comment": "",
        "child_ranges": [
            "(line 3096,col 5)-(line 3103,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse10()",
        "snippet": "  public void testBackwardsTypedefUse10() throws Exception {\n    testTypes(\n        \"/** @param {goog.MyEnum} x */ function g(x) {}\" +\n        \"var goog = {};\" +\n        \"/** @enum {goog.MyTypedef} */ goog.MyEnum = {FOO: 1};\" +\n        \"/** @typedef {number} */ goog.MyTypedef;\" +\n        \"g(1);\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: goog.MyEnum.<number>\");\n  }\n",
        "begin_line": 3106,
        "end_line": 3116,
        "comment": "",
        "child_ranges": [
            "(line 3107,col 5)-(line 3115,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsConstructor1()",
        "snippet": "  public void testBackwardsConstructor1() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = function(x) {};\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3118,
        "end_line": 3126,
        "comment": "",
        "child_ranges": [
            "(line 3119,col 5)-(line 3125,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsConstructor2()",
        "snippet": "  public void testBackwardsConstructor2() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var YourFoo = function(x) {};\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = YourFoo;\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3128,
        "end_line": 3138,
        "comment": "",
        "child_ranges": [
            "(line 3129,col 5)-(line 3137,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMinimalConstructorAnnotation()",
        "snippet": "  public void testMinimalConstructorAnnotation() throws Exception {\n    testTypes(\"/** @constructor */function Foo(){}\");\n  }\n",
        "begin_line": 3140,
        "end_line": 3142,
        "comment": "",
        "child_ranges": [
            "(line 3141,col 5)-(line 3141,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends1()",
        "snippet": "  public void testGoodExtends1() throws Exception {\n    // A minimal @extends example\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 3144,
        "end_line": 3148,
        "comment": "",
        "child_ranges": [
            "(line 3146,col 5)-(line 3147,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends2()",
        "snippet": "  public void testGoodExtends2() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends base */function derived() {}\\n\" +\n        \"/** @constructor */function base() {}\\n\");\n  }\n",
        "begin_line": 3150,
        "end_line": 3153,
        "comment": "",
        "child_ranges": [
            "(line 3151,col 5)-(line 3152,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends3()",
        "snippet": "  public void testGoodExtends3() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends {Object} */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 3155,
        "end_line": 3158,
        "comment": "",
        "child_ranges": [
            "(line 3156,col 5)-(line 3157,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends4()",
        "snippet": "  public void testGoodExtends4() throws Exception {\n    // Ensure that @extends actually sets the base type of a constructor\n    // correctly. Because this isn't part of the human-readable Function\n    // definition, we need to crawl the prototype chain (eww).\n    Node n = parseAndTypeCheck(\n        \"var goog = {};\\n\" +\n        \"/** @constructor */goog.Base = function(){};\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {goog.Base} */goog.Derived = function(){};\\n\");\n    Node subTypeName = n.getLastChild().getLastChild().getFirstChild();\n    assertEquals(\"goog.Derived\", subTypeName.getQualifiedName());\n\n    FunctionType subCtorType =\n        (FunctionType) subTypeName.getNext().getJSType();\n    assertEquals(\"goog.Derived\", subCtorType.getInstanceType().toString());\n\n    JSType superType = subCtorType.getPrototype().getImplicitPrototype();\n    assertEquals(\"goog.Base\", superType.toString());\n  }\n",
        "begin_line": 3160,
        "end_line": 3178,
        "comment": "",
        "child_ranges": [
            "(line 3164,col 5)-(line 3168,col 69)",
            "(line 3169,col 5)-(line 3169,col 71)",
            "(line 3170,col 5)-(line 3170,col 65)",
            "(line 3172,col 5)-(line 3173,col 57)",
            "(line 3174,col 5)-(line 3174,col 75)",
            "(line 3176,col 5)-(line 3176,col 73)",
            "(line 3177,col 5)-(line 3177,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends5()",
        "snippet": "  public void testGoodExtends5() throws Exception {\n    // we allow for the extends annotation to be placed first\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\");\n  }\n",
        "begin_line": 3180,
        "end_line": 3184,
        "comment": "",
        "child_ranges": [
            "(line 3182,col 5)-(line 3183,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends6()",
        "snippet": "  public void testGoodExtends6() throws Exception {\n    testFunctionType(\n        CLOSURE_DEFS +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @return {number} */ \" +\n        \"  base.prototype.foo = function() { return 1; };\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"goog.inherits(derived, base);\",\n        \"derived.superClass_.foo\",\n        \"function (this:base): number\");\n  }\n",
        "begin_line": 3186,
        "end_line": 3196,
        "comment": "",
        "child_ranges": [
            "(line 3187,col 5)-(line 3195,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends7()",
        "snippet": "  public void testGoodExtends7() throws Exception {\n    testFunctionType(\n        \"Function.prototype.inherits = function(x) {};\" +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"derived.inherits(base);\",\n        \"(new derived).constructor\",\n        \"function (new:derived): undefined\");\n  }\n",
        "begin_line": 3198,
        "end_line": 3206,
        "comment": "",
        "child_ranges": [
            "(line 3199,col 5)-(line 3205,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends8()",
        "snippet": "  public void testGoodExtends8() throws Exception {\n    testTypes(\"/** @constructor \\n @extends {Base} */ function Sub() {}\" +\n        \"/** @return {number} */ function f() { return (new Sub()).foo; }\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @type {boolean} */ Base.prototype.foo = true;\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3208,
        "end_line": 3216,
        "comment": "",
        "child_ranges": [
            "(line 3209,col 5)-(line 3215,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends9()",
        "snippet": "  public void testGoodExtends9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @override */ Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 3218,
        "end_line": 3225,
        "comment": "",
        "child_ranges": [
            "(line 3219,col 5)-(line 3224,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends10()",
        "snippet": "  public void testGoodExtends10() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @return {Super} */ function foo() { return new Sub(); }\");\n  }\n",
        "begin_line": 3227,
        "end_line": 3233,
        "comment": "",
        "child_ranges": [
            "(line 3228,col 5)-(line 3232,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends11()",
        "snippet": "  public void testGoodExtends11() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {boolean} x */ Super.prototype.foo = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"(new Sub()).foo(0);\",\n        \"actual parameter 1 of Super.prototype.foo \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 3235,
        "end_line": 3246,
        "comment": "",
        "child_ranges": [
            "(line 3236,col 5)-(line 3245,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends12()",
        "snippet": "  public void testGoodExtends12() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"/** @constructor \\n * @extends {Sub} */ function Sub2() {}\" +\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {Super} x */ function foo(x) {}\" +\n        \"foo(new Sub2());\");\n  }\n",
        "begin_line": 3248,
        "end_line": 3255,
        "comment": "",
        "child_ranges": [
            "(line 3249,col 5)-(line 3254,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends13()",
        "snippet": "  public void testGoodExtends13() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {B}  */ function C() {}\" +\n        \"/** @constructor \\n * @extends {D}  */ function E() {}\" +\n        \"/** @constructor \\n * @extends {C}  */ function D() {}\" +\n        \"/** @constructor \\n * @extends {A} */ function B() {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"/** @param {number} x */ function f(x) {} f(new E());\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : E\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3257,
        "end_line": 3268,
        "comment": "",
        "child_ranges": [
            "(line 3258,col 5)-(line 3267,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends14()",
        "snippet": "  public void testGoodExtends14() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Function} f */ function g(f) {\" +\n        \"  /** @constructor */ function NewType() {};\" +\n        \"  goog.inherits(NewType, f);\" +\n        \"  (new NewType());\" +\n        \"}\");\n  }\n",
        "begin_line": 3270,
        "end_line": 3278,
        "comment": "",
        "child_ranges": [
            "(line 3271,col 5)-(line 3277,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends15()",
        "snippet": "  public void testGoodExtends15() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function OldType() {}\" +\n        \"/** @param {?function(new:OldType)} f */ function g(f) {\" +\n        \"  /**\\n\" +\n        \"    * @constructor\\n\" +\n        \"    * @extends {OldType}\\n\" +\n        \"    */\\n\" +\n        \"  function NewType() {};\" +\n        \"  goog.inherits(NewType, f);\" +\n        \"  NewType.prototype.method = function() {\" +\n        \"    NewType.superClass_.foo.call(this);\" +\n        \"  };\" +\n        \"}\",\n        \"Property foo never defined on OldType.prototype\");\n  }\n",
        "begin_line": 3280,
        "end_line": 3296,
        "comment": "",
        "child_ranges": [
            "(line 3281,col 5)-(line 3295,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends16()",
        "snippet": "  public void testGoodExtends16() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Function} f */ function g(f) {\" +\n        \"  /** @constructor */ function NewType() {};\" +\n        \"  goog.inherits(f, NewType);\" +\n        \"  (new NewType());\" +\n        \"}\");\n  }\n",
        "begin_line": 3298,
        "end_line": 3306,
        "comment": "",
        "child_ranges": [
            "(line 3299,col 5)-(line 3305,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends1()",
        "snippet": "  public void testBadExtends1() throws Exception {\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {not_base} */function derived() {}\\n\",\n        \"Bad type annotation. Unknown type not_base\");\n  }\n",
        "begin_line": 3308,
        "end_line": 3312,
        "comment": "",
        "child_ranges": [
            "(line 3309,col 5)-(line 3311,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends2()",
        "snippet": "  public void testBadExtends2() throws Exception {\n    testTypes(\"/** @constructor */function base() {\\n\" +\n        \"/** @type {!Number}*/\\n\" +\n        \"this.baseMember = new Number(4);\\n\" +\n        \"}\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {base} */function derived() {}\\n\" +\n        \"/** @param {!String} x*/\\n\" +\n        \"function foo(x){ }\\n\" +\n        \"/** @type {!derived}*/var y;\\n\" +\n        \"foo(y.baseMember);\\n\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 3314,
        "end_line": 3328,
        "comment": "",
        "child_ranges": [
            "(line 3315,col 5)-(line 3327,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends3()",
        "snippet": "  public void testBadExtends3() throws Exception {\n    testTypes(\"/** @extends {Object} */function base() {}\",\n        \"@extends used without @constructor or @interface for base\");\n  }\n",
        "begin_line": 3330,
        "end_line": 3333,
        "comment": "",
        "child_ranges": [
            "(line 3331,col 5)-(line 3332,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends4()",
        "snippet": "  public void testBadExtends4() throws Exception {\n    // If there's a subclass of a class with a bad extends,\n    // we only want to warn about the first one.\n    testTypes(\n        \"/** @constructor \\n * @extends {bad} */ function Sub() {}\" +\n        \"/** @constructor \\n * @extends {Sub} */ function Sub2() {}\" +\n        \"/** @param {Sub} x */ function foo(x) {}\" +\n        \"foo(new Sub2());\",\n        \"Bad type annotation. Unknown type bad\");\n  }\n",
        "begin_line": 3335,
        "end_line": 3344,
        "comment": "",
        "child_ranges": [
            "(line 3338,col 5)-(line 3343,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLateExtends()",
        "snippet": "  public void testLateExtends() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.foo = function() {};\\n\" +\n        \"/** @constructor */function Bar() {}\\n\" +\n        \"goog.inherits(Foo, Bar);\\n\",\n        \"Missing @extends tag on type Foo\");\n  }\n",
        "begin_line": 3346,
        "end_line": 3354,
        "comment": "",
        "child_ranges": [
            "(line 3347,col 5)-(line 3353,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMatch()",
        "snippet": "  public void testSuperclassMatch() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\");\n  }\n",
        "begin_line": 3356,
        "end_line": 3362,
        "comment": "",
        "child_ranges": [
            "(line 3357,col 5)-(line 3357,col 76)",
            "(line 3358,col 5)-(line 3361,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMatchWithMixin()",
        "snippet": "  public void testSuperclassMatchWithMixin() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor */ var Baz = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.mixin = function(y){};\" +\n        \"Bar.inherits(Foo);\\n\" +\n        \"Bar.mixin(Baz);\\n\");\n  }\n",
        "begin_line": 3364,
        "end_line": 3373,
        "comment": "",
        "child_ranges": [
            "(line 3365,col 5)-(line 3365,col 76)",
            "(line 3366,col 5)-(line 3372,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMismatch1()",
        "snippet": "  public void testSuperclassMismatch1() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Object */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 3375,
        "end_line": 3382,
        "comment": "",
        "child_ranges": [
            "(line 3376,col 5)-(line 3376,col 76)",
            "(line 3377,col 5)-(line 3381,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMismatch2()",
        "snippet": "  public void testSuperclassMismatch2() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function(){};\\n\" +\n        \"/** @constructor */ var Bar = function(){};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 3384,
        "end_line": 3391,
        "comment": "",
        "child_ranges": [
            "(line 3385,col 5)-(line 3385,col 76)",
            "(line 3386,col 5)-(line 3390,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass1()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass1() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\");\n  }\n",
        "begin_line": 3393,
        "end_line": 3400,
        "comment": "",
        "child_ranges": [
            "(line 3394,col 5)-(line 3399,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass2()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass2() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\" +\n        \"/** @constructor */ function Base() {}\");\n  }\n",
        "begin_line": 3402,
        "end_line": 3409,
        "comment": "",
        "child_ranges": [
            "(line 3403,col 5)-(line 3408,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment1()",
        "snippet": "  public void testDirectPrototypeAssignment1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"Base.prototype.foo = 3;\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"/** @return {string} */ function foo() { return (new A).foo; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3411,
        "end_line": 3421,
        "comment": "",
        "child_ranges": [
            "(line 3412,col 5)-(line 3420,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment2()",
        "snippet": "  public void testDirectPrototypeAssignment2() throws Exception {\n    // This ensures that we don't attach property 'foo' onto the Base\n    // instance object.\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ function foo() { return (new Base).foo; }\");\n  }\n",
        "begin_line": 3423,
        "end_line": 3432,
        "comment": "",
        "child_ranges": [
            "(line 3426,col 5)-(line 3431,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment3()",
        "snippet": "  public void testDirectPrototypeAssignment3() throws Exception {\n    // This verifies that the compiler doesn't crash if the user\n    // overwrites the prototype of a global variable in a local scope.\n    testTypes(\n        \"/** @constructor */ var MainWidgetCreator = function() {};\" +\n        \"/** @param {Function} ctor */\" +\n        \"function createMainWidget(ctor) {\" +\n        \"  /** @constructor */ function tempCtor() {};\" +\n        \"  tempCtor.prototype = ctor.prototype;\" +\n        \"  MainWidgetCreator.superClass_ = ctor.prototype;\" +\n        \"  MainWidgetCreator.prototype = new tempCtor();\" +\n        \"}\");\n  }\n",
        "begin_line": 3434,
        "end_line": 3446,
        "comment": "",
        "child_ranges": [
            "(line 3437,col 5)-(line 3445,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements1()",
        "snippet": "  public void testGoodImplements1() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\");\n  }\n",
        "begin_line": 3448,
        "end_line": 3451,
        "comment": "",
        "child_ranges": [
            "(line 3449,col 5)-(line 3450,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements2()",
        "snippet": "  public void testGoodImplements2() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {Base1}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 3453,
        "end_line": 3460,
        "comment": "",
        "child_ranges": [
            "(line 3454,col 5)-(line 3459,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements3()",
        "snippet": "  public void testGoodImplements3() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @constructor \\n @implements {Disposable} */function f() {}\");\n  }\n",
        "begin_line": 3462,
        "end_line": 3465,
        "comment": "",
        "child_ranges": [
            "(line 3463,col 5)-(line 3464,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements4()",
        "snippet": "  public void testGoodImplements4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type {!Function} */\" +\n        \"goog.abstractMethod = function() {};\" +\n        \"/** @interface */\\n\" +\n        \"goog.Disposable = goog.abstractMethod;\" +\n        \"goog.Disposable.prototype.dispose = goog.abstractMethod;\" +\n        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n        \"goog.SubDisposable = function() {};\" +\n        \"/** @inheritDoc */ \" +\n        \"goog.SubDisposable.prototype.dispose = function() {};\");\n  }\n",
        "begin_line": 3467,
        "end_line": 3478,
        "comment": "",
        "child_ranges": [
            "(line 3468,col 5)-(line 3477,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements1()",
        "snippet": "  public void testBadImplements1() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {nonExistent}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 3480,
        "end_line": 3488,
        "comment": "",
        "child_ranges": [
            "(line 3481,col 5)-(line 3487,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements2()",
        "snippet": "  public void testBadImplements2() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n */function f() {}\",\n        \"@implements used without @constructor or @interface for f\");\n  }\n",
        "begin_line": 3490,
        "end_line": 3494,
        "comment": "",
        "child_ranges": [
            "(line 3491,col 5)-(line 3493,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements3()",
        "snippet": "  public void testBadImplements3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {!Function} */ goog.abstractMethod = function(){};\" +\n        \"/** @interface */ var Disposable = goog.abstractMethod;\" +\n        \"Disposable.prototype.method = goog.abstractMethod;\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\",\n        \"property method on interface Disposable is not implemented by type f\");\n  }\n",
        "begin_line": 3496,
        "end_line": 3504,
        "comment": "",
        "child_ranges": [
            "(line 3497,col 5)-(line 3503,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements4()",
        "snippet": "  public void testBadImplements4() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @interface */function f() {}\",\n        \"f cannot implement this type; an interface can only extend, \" +\n        \"but not implement interfaces\");\n  }\n",
        "begin_line": 3506,
        "end_line": 3511,
        "comment": "",
        "child_ranges": [
            "(line 3507,col 5)-(line 3510,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {B}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 3513,
        "end_line": 3519,
        "comment": "",
        "child_ranges": [
            "(line 3514,col 5)-(line 3518,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends1()",
        "snippet": "  public void testBadInterfaceExtends1() throws Exception {\n    testTypes(\"/** @interface \\n * @extends {nonExistent} */function A() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 3521,
        "end_line": 3524,
        "comment": "",
        "child_ranges": [
            "(line 3522,col 5)-(line 3523,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends2()",
        "snippet": "  public void testBadInterfaceExtends2() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; a constructor can only extend objects \" +\n        \"and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 3526,
        "end_line": 3531,
        "comment": "",
        "child_ranges": [
            "(line 3527,col 5)-(line 3530,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends3()",
        "snippet": "  public void testBadInterfaceExtends3() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; a constructor can only extend objects \" +\n        \"and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 3533,
        "end_line": 3538,
        "comment": "",
        "child_ranges": [
            "(line 3534,col 5)-(line 3537,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends4()",
        "snippet": "  public void testBadInterfaceExtends4() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 3540,
        "end_line": 3547,
        "comment": "",
        "child_ranges": [
            "(line 3544,col 5)-(line 3546,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends5()",
        "snippet": "  public void testBadInterfaceExtends5() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 3549,
        "end_line": 3556,
        "comment": "",
        "child_ranges": [
            "(line 3553,col 5)-(line 3555,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsAConstructor()",
        "snippet": "  public void testBadImplementsAConstructor() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n * @implements {A} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3558,
        "end_line": 3562,
        "comment": "",
        "child_ranges": [
            "(line 3559,col 5)-(line 3561,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsNonInterfaceType()",
        "snippet": "  public void testBadImplementsNonInterfaceType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {Boolean} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3564,
        "end_line": 3567,
        "comment": "",
        "child_ranges": [
            "(line 3565,col 5)-(line 3566,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsNonObjectType()",
        "snippet": "  public void testBadImplementsNonObjectType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {string} */function S() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3569,
        "end_line": 3572,
        "comment": "",
        "child_ranges": [
            "(line 3570,col 5)-(line 3571,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment1()",
        "snippet": "  public void testInterfaceAssignment1() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\");\n  }\n",
        "begin_line": 3574,
        "end_line": 3579,
        "comment": "",
        "child_ranges": [
            "(line 3575,col 5)-(line 3578,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment2()",
        "snippet": "  public void testInterfaceAssignment2() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\",\n        \"initializing variable\\n\" +\n        \"found   : T\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3581,
        "end_line": 3589,
        "comment": "",
        "child_ranges": [
            "(line 3582,col 5)-(line 3588,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment3()",
        "snippet": "  public void testInterfaceAssignment3() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I|number} */var i = t;\");\n  }\n",
        "begin_line": 3591,
        "end_line": 3596,
        "comment": "",
        "child_ranges": [
            "(line 3592,col 5)-(line 3595,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment4()",
        "snippet": "  public void testInterfaceAssignment4() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1|I2} */var i = t;\");\n  }\n",
        "begin_line": 3598,
        "end_line": 3604,
        "comment": "",
        "child_ranges": [
            "(line 3599,col 5)-(line 3603,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment5()",
        "snippet": "  public void testInterfaceAssignment5() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1}\\n@implements {I2}*/\" +\n        \"var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\");\n  }\n",
        "begin_line": 3606,
        "end_line": 3614,
        "comment": "",
        "child_ranges": [
            "(line 3607,col 5)-(line 3613,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment6()",
        "snippet": "  public void testInterfaceAssignment6() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"/** @type {!I1} */var i1 = new T();\\n\" +\n        \"/** @type {!I2} */var i2 = i1;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : I1\\n\" +\n        \"required: I2\");\n  }\n",
        "begin_line": 3616,
        "end_line": 3625,
        "comment": "",
        "child_ranges": [
            "(line 3617,col 5)-(line 3624,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment7()",
        "snippet": "  public void testInterfaceAssignment7() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface\\n@extends {I1}*/var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\" +\n        \"i1 = i2;\\n\");\n  }\n",
        "begin_line": 3627,
        "end_line": 3635,
        "comment": "",
        "child_ranges": [
            "(line 3628,col 5)-(line 3634,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment8()",
        "snippet": "  public void testInterfaceAssignment8() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @type {I} */var i;\\n\" +\n        \"/** @type {Object} */var o = i;\\n\" +\n        \"new Object().prototype = i.prototype;\");\n  }\n",
        "begin_line": 3637,
        "end_line": 3642,
        "comment": "",
        "child_ranges": [
            "(line 3638,col 5)-(line 3641,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment9()",
        "snippet": "  public void testInterfaceAssignment9() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @return {I?} */function f() { return null; }\\n\" +\n        \"/** @type {!I} */var i = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I|null)\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3644,
        "end_line": 3651,
        "comment": "",
        "child_ranges": [
            "(line 3645,col 5)-(line 3650,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment10()",
        "snippet": "  public void testInterfaceAssignment10() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2} */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3653,
        "end_line": 3662,
        "comment": "",
        "child_ranges": [
            "(line 3654,col 5)-(line 3661,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment11()",
        "snippet": "  public void testInterfaceAssignment11() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2|!T} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2|T)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3664,
        "end_line": 3673,
        "comment": "",
        "child_ranges": [
            "(line 3665,col 5)-(line 3672,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment12()",
        "snippet": "  public void testInterfaceAssignment12() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n              \"/** @constructor\\n@implements{I}*/var T1 = function() {};\\n\" +\n              \"/** @constructor\\n@extends {T1}*/var T2 = function() {};\\n\" +\n              \"/** @return {I} */function f() { return new T2(); }\");\n  }\n",
        "begin_line": 3675,
        "end_line": 3680,
        "comment": "",
        "child_ranges": [
            "(line 3676,col 5)-(line 3679,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment13()",
        "snippet": "  public void testInterfaceAssignment13() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I}*/var T = function() {};\\n\" +\n        \"/** @constructor */function Super() {};\\n\" +\n        \"/** @return {I} */Super.prototype.foo = \" +\n        \"function() { return new T(); };\\n\" +\n        \"/** @constructor\\n@extends {Super} */function Sub() {}\\n\" +\n        \"/** @override\\n@return {T} */Sub.prototype.foo = \" +\n        \"function() { return new T(); };\\n\");\n  }\n",
        "begin_line": 3682,
        "end_line": 3691,
        "comment": "",
        "child_ranges": [
            "(line 3683,col 5)-(line 3690,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop1()",
        "snippet": "  public void testGetprop1() throws Exception {\n    testTypes(\"/** @return {void}*/function foo(){foo().bar;}\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3693,
        "end_line": 3698,
        "comment": "",
        "child_ranges": [
            "(line 3694,col 5)-(line 3697,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop2()",
        "snippet": "  public void testGetprop2() throws Exception {\n    testTypes(\"var x = null; x.alert();\",\n        \"No properties on this expression\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3700,
        "end_line": 3705,
        "comment": "",
        "child_ranges": [
            "(line 3701,col 5)-(line 3704,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop3()",
        "snippet": "  public void testGetprop3() throws Exception {\n    testTypes(\n        \"/** @constructor */ \" +\n        \"function Foo() { /** @type {?Object} */ this.x = null; }\" +\n        \"Foo.prototype.initX = function() { this.x = {foo: 1}; };\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x == null) { this.initX(); alert(this.x.foo); }\" +\n        \"};\");\n  }\n",
        "begin_line": 3707,
        "end_line": 3715,
        "comment": "",
        "child_ranges": [
            "(line 3708,col 5)-(line 3714,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess1()",
        "snippet": "  public void testArrayAccess1() throws Exception {\n    testTypes(\"var a = []; var b = a['hi'];\");\n  }\n",
        "begin_line": 3717,
        "end_line": 3719,
        "comment": "",
        "child_ranges": [
            "(line 3718,col 5)-(line 3718,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess2()",
        "snippet": "  public void testArrayAccess2() throws Exception {\n    testTypes(\"var a = []; var b = a[[1,2]];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3721,
        "end_line": 3726,
        "comment": "",
        "child_ranges": [
            "(line 3722,col 5)-(line 3725,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess3()",
        "snippet": "  public void testArrayAccess3() throws Exception {\n    testTypes(\"var bar = [];\" +\n        \"/** @return {void} */function baz(){};\" +\n        \"var foo = bar[baz()];\",\n        \"array access\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3728,
        "end_line": 3735,
        "comment": "",
        "child_ranges": [
            "(line 3729,col 5)-(line 3734,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess4()",
        "snippet": "  public void testArrayAccess4() throws Exception {\n    testTypes(\"/**@return {!Array}*/function foo(){};var bar = foo()[foo()];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3737,
        "end_line": 3742,
        "comment": "",
        "child_ranges": [
            "(line 3738,col 5)-(line 3741,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess6()",
        "snippet": "  public void testArrayAccess6() throws Exception {\n    testTypes(\"var bar = null[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3744,
        "end_line": 3749,
        "comment": "",
        "child_ranges": [
            "(line 3745,col 5)-(line 3748,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess7()",
        "snippet": "  public void testArrayAccess7() throws Exception {\n    testTypes(\"var bar = void 0; bar[0];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3751,
        "end_line": 3756,
        "comment": "",
        "child_ranges": [
            "(line 3752,col 5)-(line 3755,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess8()",
        "snippet": "  public void testArrayAccess8() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar[0]; bar[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3758,
        "end_line": 3765,
        "comment": "",
        "child_ranges": [
            "(line 3761,col 5)-(line 3764,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess9()",
        "snippet": "  public void testArrayAccess9() throws Exception {\n    testTypes(\"/** @return {?Array} */ function f() { return []; }\" +\n        \"f()[{}]\",\n        \"array access\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3767,
        "end_line": 3773,
        "comment": "",
        "child_ranges": [
            "(line 3768,col 5)-(line 3772,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess()",
        "snippet": "  public void testPropAccess() throws Exception {\n    testTypes(\"/** @param {*} x */var f = function(x) {\\n\" +\n        \"var o = String(x);\\n\" +\n        \"if (typeof o['a'] != 'undefined') { return o['a']; }\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 3775,
        "end_line": 3781,
        "comment": "",
        "child_ranges": [
            "(line 3776,col 5)-(line 3780,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess2()",
        "snippet": "  public void testPropAccess2() throws Exception {\n    testTypes(\"var bar = void 0; bar.baz;\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3783,
        "end_line": 3788,
        "comment": "",
        "child_ranges": [
            "(line 3784,col 5)-(line 3787,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess3()",
        "snippet": "  public void testPropAccess3() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar.baz; bar.bax;\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3790,
        "end_line": 3797,
        "comment": "",
        "child_ranges": [
            "(line 3793,col 5)-(line 3796,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess4()",
        "snippet": "  public void testPropAccess4() throws Exception {\n    testTypes(\"/** @param {*} x */ function f(x) { return x['hi']; }\");\n  }\n",
        "begin_line": 3799,
        "end_line": 3801,
        "comment": "",
        "child_ranges": [
            "(line 3800,col 5)-(line 3800,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase1()",
        "snippet": "  public void testSwitchCase1() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type string*/var b;\" +\n        \"switch(a){case b:;}\",\n        \"case expression doesn't match switch\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3803,
        "end_line": 3810,
        "comment": "",
        "child_ranges": [
            "(line 3804,col 5)-(line 3809,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase2()",
        "snippet": "  public void testSwitchCase2() throws Exception {\n    testTypes(\"var a = null; switch (typeof a) { case 'foo': }\");\n  }\n",
        "begin_line": 3812,
        "end_line": 3814,
        "comment": "",
        "child_ranges": [
            "(line 3813,col 5)-(line 3813,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar1()",
        "snippet": "  public void testVar1() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @type {(string,null)} */var a = null\");\n\n    assertEquals(createUnionType(STRING_TYPE, NULL_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3816,
        "end_line": 3822,
        "comment": "",
        "child_ranges": [
            "(line 3817,col 5)-(line 3818,col 79)",
            "(line 3820,col 5)-(line 3821,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar2()",
        "snippet": "  public void testVar2() throws Exception {\n    testTypes(\"/** @type {Function} */ var a = function(){}\");\n  }\n",
        "begin_line": 3824,
        "end_line": 3826,
        "comment": "",
        "child_ranges": [
            "(line 3825,col 5)-(line 3825,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar3()",
        "snippet": "  public void testVar3() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = 3;\");\n\n    assertEquals(NUMBER_TYPE, p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3828,
        "end_line": 3832,
        "comment": "",
        "child_ranges": [
            "(line 3829,col 5)-(line 3829,col 65)",
            "(line 3831,col 5)-(line 3831,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar4()",
        "snippet": "  public void testVar4() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var a = 3; a = 'string';\");\n\n    assertEquals(createUnionType(STRING_TYPE, NUMBER_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3834,
        "end_line": 3840,
        "comment": "",
        "child_ranges": [
            "(line 3835,col 5)-(line 3836,col 36)",
            "(line 3838,col 5)-(line 3839,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar5()",
        "snippet": "  public void testVar5() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type string */goog.foo = 'hello';\" +\n        \"/** @type number */var a = goog.foo;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3842,
        "end_line": 3849,
        "comment": "",
        "child_ranges": [
            "(line 3843,col 5)-(line 3848,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar6()",
        "snippet": "  public void testVar6() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  return function() {\" +\n        \"    /** @type {!Date} */\" +\n        \"    var a = 7;\" +\n        \"  };\" +\n        \"}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3851,
        "end_line": 3862,
        "comment": "",
        "child_ranges": [
            "(line 3852,col 5)-(line 3861,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar7()",
        "snippet": "  public void testVar7() throws Exception {\n    testTypes(\"/** @type number */var a, b;\",\n        \"declaration of multiple variables with shared type information\");\n  }\n",
        "begin_line": 3864,
        "end_line": 3867,
        "comment": "",
        "child_ranges": [
            "(line 3865,col 5)-(line 3866,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar8()",
        "snippet": "  public void testVar8() throws Exception {\n    testTypes(\"var a, b;\");\n  }\n",
        "begin_line": 3869,
        "end_line": 3871,
        "comment": "",
        "child_ranges": [
            "(line 3870,col 5)-(line 3870,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar9()",
        "snippet": "  public void testVar9() throws Exception {\n    testTypes(\"/** @enum */var a;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 3873,
        "end_line": 3876,
        "comment": "",
        "child_ranges": [
            "(line 3874,col 5)-(line 3875,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar10()",
        "snippet": "  public void testVar10() throws Exception {\n    testTypes(\"/** @type !Number */var foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3878,
        "end_line": 3883,
        "comment": "",
        "child_ranges": [
            "(line 3879,col 5)-(line 3882,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar11()",
        "snippet": "  public void testVar11() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3885,
        "end_line": 3890,
        "comment": "",
        "child_ranges": [
            "(line 3886,col 5)-(line 3889,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar12()",
        "snippet": "  public void testVar12() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc', \" +\n        \"/** @type !RegExp */bar = 5;\",\n        new String[] {\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: RegExp\"});\n  }\n",
        "begin_line": 3892,
        "end_line": 3902,
        "comment": "",
        "child_ranges": [
            "(line 3893,col 5)-(line 3901,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar13()",
        "snippet": "  public void testVar13() throws Exception {\n    // this caused an NPE\n    testTypes(\"var /** @type number */a,a;\");\n  }\n",
        "begin_line": 3904,
        "end_line": 3907,
        "comment": "",
        "child_ranges": [
            "(line 3906,col 5)-(line 3906,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar14()",
        "snippet": "  public void testVar14() throws Exception {\n    testTypes(\"/** @return {number} */ function f() { var x; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3909,
        "end_line": 3914,
        "comment": "",
        "child_ranges": [
            "(line 3910,col 5)-(line 3913,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar15()",
        "snippet": "  public void testVar15() throws Exception {\n    testTypes(\"/** @return {number} */\" +\n        \"function f() { var x = x || {}; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3916,
        "end_line": 3922,
        "comment": "",
        "child_ranges": [
            "(line 3917,col 5)-(line 3921,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign1()",
        "snippet": "  public void testAssign1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3924,
        "end_line": 3930,
        "comment": "",
        "child_ranges": [
            "(line 3925,col 5)-(line 3929,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign2()",
        "snippet": "  public void testAssign2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3932,
        "end_line": 3939,
        "comment": "",
        "child_ranges": [
            "(line 3933,col 5)-(line 3938,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign3()",
        "snippet": "  public void testAssign3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 4;\");\n  }\n",
        "begin_line": 3941,
        "end_line": 3945,
        "comment": "",
        "child_ranges": [
            "(line 3942,col 5)-(line 3944,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign4()",
        "snippet": "  public void testAssign4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"goog.foo = 3;\" +\n        \"goog.foo = 'hello';\");\n  }\n",
        "begin_line": 3947,
        "end_line": 3951,
        "comment": "",
        "child_ranges": [
            "(line 3948,col 5)-(line 3950,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignInference()",
        "snippet": "  public void testAssignInference() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {Array} x\" +\n        \" * @return {number}\" +\n        \" */\" +\n        \"function f(x) {\" +\n        \"  var y = null;\" +\n        \"  y = x[0];\" +\n        \"  if (y == null) { return 4; } else { return 6; }\" +\n        \"}\");\n  }\n",
        "begin_line": 3953,
        "end_line": 3964,
        "comment": "",
        "child_ranges": [
            "(line 3954,col 5)-(line 3963,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr1()",
        "snippet": "  public void testOr1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b || undefined;\");\n  }\n",
        "begin_line": 3966,
        "end_line": 3970,
        "comment": "",
        "child_ranges": [
            "(line 3967,col 5)-(line 3969,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr2()",
        "snippet": "  public void testOr2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b || undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3972,
        "end_line": 3979,
        "comment": "",
        "child_ranges": [
            "(line 3973,col 5)-(line 3978,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr3()",
        "snippet": "  public void testOr3() throws Exception {\n    testTypes(\"/** @type {(number, undefined)} */var a;\" +\n        \"/** @type number */var c = a || 3;\");\n  }\n",
        "begin_line": 3981,
        "end_line": 3984,
        "comment": "",
        "child_ranges": [
            "(line 3982,col 5)-(line 3983,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr4()",
        "snippet": "  public void testOr4() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=null || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3991,
        "end_line": 3996,
        "comment": "\n   * Test that type inference continues with the right side,\n   * when no short-circuiting is possible.\n   * See bugid 1205387 for more details.\n   ",
        "child_ranges": [
            "(line 3992,col 6)-(line 3995,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr5()",
        "snippet": "  public void testOr5() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=undefined || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 4001,
        "end_line": 4006,
        "comment": "\n   * @see #testOr4()\n   ",
        "child_ranges": [
            "(line 4002,col 6)-(line 4005,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd1()",
        "snippet": "  public void testAnd1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b && undefined;\");\n  }\n",
        "begin_line": 4008,
        "end_line": 4012,
        "comment": "",
        "child_ranges": [
            "(line 4009,col 5)-(line 4011,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd2()",
        "snippet": "  public void testAnd2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4014,
        "end_line": 4021,
        "comment": "",
        "child_ranges": [
            "(line 4015,col 5)-(line 4020,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd3()",
        "snippet": "  public void testAnd3() throws Exception {\n    testTypes(\"/** @type {(!Array, undefined)} */var a;\" +\n        \"/** @type number */var c = a && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4023,
        "end_line": 4029,
        "comment": "",
        "child_ranges": [
            "(line 4024,col 5)-(line 4028,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd4()",
        "snippet": "  public void testAnd4() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type null */var x; /** @type {number?} */var y;\\n\" +\n        \"if (x && y) { f(y) }\");\n  }\n",
        "begin_line": 4031,
        "end_line": 4035,
        "comment": "",
        "child_ranges": [
            "(line 4032,col 5)-(line 4034,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd5()",
        "snippet": "  public void testAnd5() throws Exception {\n    testTypes(\"/** @param {number} x\\n@param {string} y*/function f(x,y){};\\n\" +\n        \"/** @type {number?} */var x; /** @type {string?} */var y;\\n\" +\n        \"if (x && y) { f(x, y) }\");\n  }\n",
        "begin_line": 4037,
        "end_line": 4041,
        "comment": "",
        "child_ranges": [
            "(line 4038,col 5)-(line 4040,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd6()",
        "snippet": "  public void testAnd6() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type {number|undefined} */var x;\\n\" +\n        \"if (x && f(x)) { f(x) }\");\n  }\n",
        "begin_line": 4043,
        "end_line": 4047,
        "comment": "",
        "child_ranges": [
            "(line 4044,col 5)-(line 4046,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd7()",
        "snippet": "  public void testAnd7() throws Exception {\n    // TODO(user): a deterministic warning should be generated for this\n    // case since x && x is always false. The implementation of this requires\n    // a more precise handling of a null value within a variable's type.\n    // Currently, a null value defaults to ? which passes every check.\n    testTypes(\"/** @type null */var x; if (x && x) {}\");\n  }\n",
        "begin_line": 4049,
        "end_line": 4055,
        "comment": "",
        "child_ranges": [
            "(line 4054,col 5)-(line 4054,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHook()",
        "snippet": "  public void testHook() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo()?a:b; }\");\n  }\n",
        "begin_line": 4057,
        "end_line": 4059,
        "comment": "",
        "child_ranges": [
            "(line 4058,col 5)-(line 4058,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType1()",
        "snippet": "  public void testHookRestrictsType1() throws Exception {\n    testTypes(\"/** @return {(string,null)} */\" +\n        \"function f() { return null;}\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */\" +\n        \"var b = a ? a : 'default';\");\n  }\n",
        "begin_line": 4061,
        "end_line": 4067,
        "comment": "",
        "child_ranges": [
            "(line 4062,col 5)-(line 4066,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType2()",
        "snippet": "  public void testHookRestrictsType2() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a = null;\" +\n        \"/** @type null */\" +\n        \"var b = a ? null : a;\");\n  }\n",
        "begin_line": 4069,
        "end_line": 4074,
        "comment": "",
        "child_ranges": [
            "(line 4070,col 5)-(line 4073,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType3()",
        "snippet": "  public void testHookRestrictsType3() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a;\" +\n        \"/** @type null */\" +\n        \"var b = (!a) ? a : null;\");\n  }\n",
        "begin_line": 4076,
        "end_line": 4081,
        "comment": "",
        "child_ranges": [
            "(line 4077,col 5)-(line 4080,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType4()",
        "snippet": "  public void testHookRestrictsType4() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type boolean */\" +\n        \"var b = a != null ? a : true;\");\n  }\n",
        "begin_line": 4083,
        "end_line": 4088,
        "comment": "",
        "child_ranges": [
            "(line 4084,col 5)-(line 4087,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType5()",
        "snippet": "  public void testHookRestrictsType5() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {(undefined)} */\" +\n        \"var b = a == null ? a : undefined;\");\n  }\n",
        "begin_line": 4090,
        "end_line": 4095,
        "comment": "",
        "child_ranges": [
            "(line 4091,col 5)-(line 4094,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType6()",
        "snippet": "  public void testHookRestrictsType6() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == null ? 5 : a;\");\n  }\n",
        "begin_line": 4097,
        "end_line": 4102,
        "comment": "",
        "child_ranges": [
            "(line 4098,col 5)-(line 4101,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType7()",
        "snippet": "  public void testHookRestrictsType7() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == undefined ? 5 : a;\");\n  }\n",
        "begin_line": 4104,
        "end_line": 4109,
        "comment": "",
        "child_ranges": [
            "(line 4105,col 5)-(line 4108,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWhileRestrictsType1()",
        "snippet": "  public void testWhileRestrictsType1() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {number?} x */\\n\" +\n        \"function f(x) {\\n\" +\n        \"while (x) {\\n\" +\n        \"if (g(x)) { x = 1; }\\n\" +\n        \"x = x-1;\\n}\\n}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 4111,
        "end_line": 4121,
        "comment": "",
        "child_ranges": [
            "(line 4112,col 5)-(line 4120,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWhileRestrictsType2()",
        "snippet": "  public void testWhileRestrictsType2() throws Exception {\n    testTypes(\"/** @param {number?} x\\n@return {number}*/\\n\" +\n        \"function f(x) {\\n/** @type {number} */var y = 0;\" +\n        \"while (x) {\\n\" +\n        \"y = x;\\n\" +\n        \"x = x-1;\\n}\\n\" +\n        \"return y;}\");\n  }\n",
        "begin_line": 4123,
        "end_line": 4130,
        "comment": "",
        "child_ranges": [
            "(line 4124,col 5)-(line 4129,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions1()",
        "snippet": "  public void testHigherOrderFunctions1() throws Exception {\n    testTypes(\n        \"/** @type {function(number)} */var f;\" +\n        \"f(true);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4132,
        "end_line": 4139,
        "comment": "",
        "child_ranges": [
            "(line 4133,col 5)-(line 4138,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions2()",
        "snippet": "  public void testHigherOrderFunctions2() throws Exception {\n    testTypes(\n        \"/** @type {function():!Date} */var f;\" +\n        \"/** @type boolean */var a = f();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4141,
        "end_line": 4148,
        "comment": "",
        "child_ranges": [
            "(line 4142,col 5)-(line 4147,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions3()",
        "snippet": "  public void testHigherOrderFunctions3() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 4150,
        "end_line": 4154,
        "comment": "",
        "child_ranges": [
            "(line 4151,col 5)-(line 4153,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions4()",
        "snippet": "  public void testHigherOrderFunctions4() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error,...[number]):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 4156,
        "end_line": 4160,
        "comment": "",
        "child_ranges": [
            "(line 4157,col 5)-(line 4159,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions5()",
        "snippet": "  public void testHigherOrderFunctions5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"/** @type {function(new:Error,...[number]):Date} */ var f;\" +\n        \"g(new f());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4162,
        "end_line": 4170,
        "comment": "",
        "child_ranges": [
            "(line 4163,col 5)-(line 4169,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias1()",
        "snippet": "  public void testConstructorAlias1() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4172,
        "end_line": 4182,
        "comment": "",
        "child_ranges": [
            "(line 4173,col 5)-(line 4181,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias2()",
        "snippet": "  public void testConstructorAlias2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4184,
        "end_line": 4194,
        "comment": "",
        "child_ranges": [
            "(line 4185,col 5)-(line 4193,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias3()",
        "snippet": "  public void testConstructorAlias3() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4196,
        "end_line": 4206,
        "comment": "",
        "child_ranges": [
            "(line 4197,col 5)-(line 4205,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias4()",
        "snippet": "  public void testConstructorAlias4() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4208,
        "end_line": 4218,
        "comment": "",
        "child_ranges": [
            "(line 4209,col 5)-(line 4217,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias5()",
        "snippet": "  public void testConstructorAlias5() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {FooAlias} */ function foo() { \" +\n        \"  return new Foo(); }\");\n  }\n",
        "begin_line": 4220,
        "end_line": 4226,
        "comment": "",
        "child_ranges": [
            "(line 4221,col 5)-(line 4225,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias6()",
        "snippet": "  public void testConstructorAlias6() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {Foo} */ function foo() { \" +\n        \"  return new FooAlias(); }\");\n  }\n",
        "begin_line": 4228,
        "end_line": 4234,
        "comment": "",
        "child_ranges": [
            "(line 4229,col 5)-(line 4233,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias7()",
        "snippet": "  public void testConstructorAlias7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4236,
        "end_line": 4246,
        "comment": "",
        "child_ranges": [
            "(line 4237,col 5)-(line 4245,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias8()",
        "snippet": "  public void testConstructorAlias8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4248,
        "end_line": 4260,
        "comment": "",
        "child_ranges": [
            "(line 4249,col 5)-(line 4259,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias9()",
        "snippet": "  public void testConstructorAlias9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4262,
        "end_line": 4273,
        "comment": "",
        "child_ranges": [
            "(line 4263,col 5)-(line 4272,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias10()",
        "snippet": "  public void testConstructorAlias10() throws Exception {\n    testTypes(\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4275,
        "end_line": 4285,
        "comment": "",
        "child_ranges": [
            "(line 4276,col 5)-(line 4284,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure1()",
        "snippet": "  public void testClosure1() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDef(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4287,
        "end_line": 4294,
        "comment": "",
        "child_ranges": [
            "(line 4288,col 5)-(line 4293,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure2()",
        "snippet": "  public void testClosure2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string?} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4296,
        "end_line": 4303,
        "comment": "",
        "child_ranges": [
            "(line 4297,col 5)-(line 4302,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure3()",
        "snippet": "  public void testClosure3() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDefAndNotNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4305,
        "end_line": 4312,
        "comment": "",
        "child_ranges": [
            "(line 4306,col 5)-(line 4311,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure4()",
        "snippet": "  public void testClosure4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDef(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4314,
        "end_line": 4321,
        "comment": "",
        "child_ranges": [
            "(line 4315,col 5)-(line 4320,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure5()",
        "snippet": "  public void testClosure5() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string?} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4323,
        "end_line": 4330,
        "comment": "",
        "child_ranges": [
            "(line 4324,col 5)-(line 4329,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure6()",
        "snippet": "  public void testClosure6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDefAndNotNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4332,
        "end_line": 4339,
        "comment": "",
        "child_ranges": [
            "(line 4333,col 5)-(line 4338,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure7()",
        "snippet": "  public void testClosure7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */ var a = foo();\" +\n        \"/** @type {number} */\" +\n        \"var b = goog.asserts.assert(a);\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4341,
        "end_line": 4350,
        "comment": "",
        "child_ranges": [
            "(line 4342,col 5)-(line 4349,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn1()",
        "snippet": "  public void testReturn1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4352,
        "end_line": 4357,
        "comment": "",
        "child_ranges": [
            "(line 4353,col 5)-(line 4356,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn2()",
        "snippet": "  public void testReturn2() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4359,
        "end_line": 4364,
        "comment": "",
        "child_ranges": [
            "(line 4360,col 5)-(line 4363,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn3()",
        "snippet": "  public void testReturn3() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return 'abc'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4366,
        "end_line": 4371,
        "comment": "",
        "child_ranges": [
            "(line 4367,col 5)-(line 4370,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn4()",
        "snippet": "  public void testReturn4() throws Exception {\n    testTypes(\"/**@return {!Number}\\n*/\\n function a(){return new Array();}\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4373,
        "end_line": 4378,
        "comment": "",
        "child_ranges": [
            "(line 4374,col 5)-(line 4377,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn5()",
        "snippet": "  public void testReturn5() throws Exception {\n    testTypes(\"/** @param {number} n\\n\" +\n        \"@constructor */function n(n){return};\");\n  }\n",
        "begin_line": 4380,
        "end_line": 4383,
        "comment": "",
        "child_ranges": [
            "(line 4381,col 5)-(line 4382,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn6()",
        "snippet": "  public void testReturn6() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(opt_a) { return opt_a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4385,
        "end_line": 4392,
        "comment": "",
        "child_ranges": [
            "(line 4386,col 5)-(line 4391,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn7()",
        "snippet": "  public void testReturn7() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 4394,
        "end_line": 4401,
        "comment": "",
        "child_ranges": [
            "(line 4395,col 5)-(line 4400,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn8()",
        "snippet": "  public void testReturn8() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.prototype.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 4403,
        "end_line": 4410,
        "comment": "",
        "child_ranges": [
            "(line 4404,col 5)-(line 4409,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn1()",
        "snippet": "  public void testInferredReturn1() throws Exception {\n    testTypes(\n        \"function f() {} /** @param {number} x */ function g(x) {}\" +\n        \"g(f());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4412,
        "end_line": 4419,
        "comment": "",
        "child_ranges": [
            "(line 4413,col 5)-(line 4418,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn2()",
        "snippet": "  public void testInferredReturn2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() {}; \" +\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"g((new Foo()).bar());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4421,
        "end_line": 4430,
        "comment": "",
        "child_ranges": [
            "(line 4422,col 5)-(line 4429,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn3()",
        "snippet": "  public void testInferredReturn3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() {}; \" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {number} \\n * @override  */ \" +\n        \"SubFoo.prototype.bar = function() { return 3; }; \",\n        \"mismatch of the bar property type and the type of the property \" +\n        \"it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo): undefined\\n\" +\n        \"override: function (this:SubFoo): number\");\n  }\n",
        "begin_line": 4432,
        "end_line": 4443,
        "comment": "",
        "child_ranges": [
            "(line 4433,col 5)-(line 4442,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn4()",
        "snippet": "  public void testInferredReturn4() throws Exception {\n    // By design, this throws a warning. if you want global x to be\n    // defined to some other type of function, then you need to declare it\n    // as a greater type.\n    testTypes(\n        \"var x = function() {};\" +\n        \"x = /** @type {function(): number} */ (function() { return 3; });\",\n        \"assignment\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: function (): undefined\");\n  }\n",
        "begin_line": 4445,
        "end_line": 4455,
        "comment": "",
        "child_ranges": [
            "(line 4449,col 5)-(line 4454,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn5()",
        "snippet": "  public void testInferredReturn5() throws Exception {\n    // If x is local, then the function type is not declared.\n    testTypes(\n        \"/** @return {string} */\" +\n        \"function f() {\" +\n        \"  var x = function() {};\" +\n        \"  x = /** @type {function(): number} */ (function() { return 3; });\" +\n        \"  return x();\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4457,
        "end_line": 4469,
        "comment": "",
        "child_ranges": [
            "(line 4459,col 5)-(line 4468,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn6()",
        "snippet": "  public void testInferredReturn6() throws Exception {\n    testTypes(\n        \"/** @return {string} */\" +\n        \"function f() {\" +\n        \"  var x = function() {};\" +\n        \"  if (f()) \" +\n        \"    x = /** @type {function(): number} */ \" +\n        \"        (function() { return 3; });\" +\n        \"  return x();\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4471,
        "end_line": 4484,
        "comment": "",
        "child_ranges": [
            "(line 4472,col 5)-(line 4483,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn7()",
        "snippet": "  public void testInferredReturn7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"Foo.prototype.bar = function(x) { return 3; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4486,
        "end_line": 4494,
        "comment": "",
        "child_ranges": [
            "(line 4487,col 5)-(line 4493,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn8()",
        "snippet": "  public void testInferredReturn8() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number} x */ SubFoo.prototype.bar = \" +\n        \"    function(x) { return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4496,
        "end_line": 4507,
        "comment": "",
        "child_ranges": [
            "(line 4497,col 5)-(line 4497,col 44)",
            "(line 4498,col 5)-(line 4506,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam1()",
        "snippet": "  public void testInferredParam1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"Foo.prototype.bar = function(y) { f(y); };\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4509,
        "end_line": 4518,
        "comment": "",
        "child_ranges": [
            "(line 4510,col 5)-(line 4517,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam2()",
        "snippet": "  public void testInferredParam2() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4520,
        "end_line": 4532,
        "comment": "",
        "child_ranges": [
            "(line 4521,col 5)-(line 4521,col 44)",
            "(line 4522,col 5)-(line 4531,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam3()",
        "snippet": "  public void testInferredParam3() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4534,
        "end_line": 4546,
        "comment": "",
        "child_ranges": [
            "(line 4535,col 5)-(line 4535,col 44)",
            "(line 4536,col 5)-(line 4545,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam4()",
        "snippet": "  public void testInferredParam4() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4548,
        "end_line": 4560,
        "comment": "",
        "child_ranges": [
            "(line 4549,col 5)-(line 4549,col 44)",
            "(line 4550,col 5)-(line 4559,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam5()",
        "snippet": "  public void testInferredParam5() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number=} x \\n * @param {...number} y  */ \" +\n        \"SubFoo.prototype.bar = \" +\n        \"    function(x, y) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4562,
        "end_line": 4575,
        "comment": "",
        "child_ranges": [
            "(line 4563,col 5)-(line 4563,col 44)",
            "(line 4564,col 5)-(line 4574,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam6()",
        "snippet": "  public void testInferredParam6() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number=} x \\n * @param {number=} y */ \" +\n        \"SubFoo.prototype.bar = \" +\n        \"    function(x, y) { f(y); };\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4577,
        "end_line": 4590,
        "comment": "",
        "child_ranges": [
            "(line 4578,col 5)-(line 4578,col 44)",
            "(line 4579,col 5)-(line 4589,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenReturn1()",
        "snippet": "  public void testOverriddenReturn1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @return {Object} */ Foo.prototype.bar = \" +\n        \"    function() { return {}; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {SubFoo}\\n * @override */ SubFoo.prototype.bar = \" +\n        \"    function() { return new Foo(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: (SubFoo|null)\");\n  }\n",
        "begin_line": 4592,
        "end_line": 4603,
        "comment": "",
        "child_ranges": [
            "(line 4593,col 5)-(line 4602,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenReturn2()",
        "snippet": "  public void testOverriddenReturn2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @return {SubFoo} */ Foo.prototype.bar = \" +\n        \"    function() { return new SubFoo(); };\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {Foo} x\\n * @override */ SubFoo.prototype.bar = \" +\n        \"    function() { return new SubFoo(); }\",\n        \"mismatch of the bar property type and the type of the \" +\n        \"property it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo): (SubFoo|null)\\n\" +\n        \"override: function (this:SubFoo): (Foo|null)\");\n  }\n",
        "begin_line": 4605,
        "end_line": 4617,
        "comment": "",
        "child_ranges": [
            "(line 4606,col 5)-(line 4616,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis1()",
        "snippet": "  public void testThis1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4619,
        "end_line": 4627,
        "comment": "",
        "child_ranges": [
            "(line 4620,col 5)-(line 4626,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis2()",
        "snippet": "  public void testThis2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4629,
        "end_line": 4639,
        "comment": "",
        "child_ranges": [
            "(line 4630,col 5)-(line 4638,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis3()",
        "snippet": "  public void testThis3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"  this.foo = 5;\" +\n        \"};\");\n  }\n",
        "begin_line": 4641,
        "end_line": 4647,
        "comment": "",
        "child_ranges": [
            "(line 4642,col 5)-(line 4646,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis4()",
        "snippet": "  public void testThis4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */goog.A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4649,
        "end_line": 4659,
        "comment": "",
        "child_ranges": [
            "(line 4650,col 5)-(line 4658,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis5()",
        "snippet": "  public void testThis5() throws Exception {\n    testTypes(\"/** @this Date\\n@return {number}*/function h() { return this }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4661,
        "end_line": 4666,
        "comment": "",
        "child_ranges": [
            "(line 4662,col 5)-(line 4665,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis6()",
        "snippet": "  public void testThis6() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor\\n@return {!Date} */\" +\n        \"goog.A = function(){ return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 4668,
        "end_line": 4675,
        "comment": "",
        "child_ranges": [
            "(line 4669,col 5)-(line 4674,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis7()",
        "snippet": "  public void testThis7() throws Exception {\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"/** @return {number} */A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4677,
        "end_line": 4683,
        "comment": "",
        "child_ranges": [
            "(line 4678,col 5)-(line 4682,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis8()",
        "snippet": "  public void testThis8() throws Exception {\n    testTypes(\"/** @constructor */function A(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4685,
        "end_line": 4694,
        "comment": "",
        "child_ranges": [
            "(line 4686,col 5)-(line 4693,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis9()",
        "snippet": "  public void testThis9() throws Exception {\n    // In A.bar, the type of {@code this} is unknown.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ A.bar = function() { return this.foo; };\");\n  }\n",
        "begin_line": 4696,
        "end_line": 4701,
        "comment": "",
        "child_ranges": [
            "(line 4698,col 5)-(line 4700,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis10()",
        "snippet": "  public void testThis10() throws Exception {\n    // In A.bar, the type of {@code this} is inferred from the @this tag.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @this {A}\\n@return {string} */\" +\n        \"A.bar = function() { return this.foo; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4703,
        "end_line": 4712,
        "comment": "",
        "child_ranges": [
            "(line 4705,col 5)-(line 4711,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis11()",
        "snippet": "  public void testThis11() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Ctor() {\" +\n        \"  /** @this {Date} */\" +\n        \"  this.method = function() {\" +\n        \"    f(this);\" +\n        \"  };\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4714,
        "end_line": 4726,
        "comment": "",
        "child_ranges": [
            "(line 4715,col 5)-(line 4725,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis12()",
        "snippet": "  public void testThis12() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Ctor() {}\" +\n        \"Ctor.prototype['method'] = function() {\" +\n        \"  f(this);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Ctor\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4728,
        "end_line": 4738,
        "comment": "",
        "child_ranges": [
            "(line 4729,col 5)-(line 4737,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis13()",
        "snippet": "  public void testThis13() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Ctor() {}\" +\n        \"Ctor.prototype = {\" +\n        \"  method: function() {\" +\n        \"    f(this);\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Ctor\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4740,
        "end_line": 4752,
        "comment": "",
        "child_ranges": [
            "(line 4741,col 5)-(line 4751,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis14()",
        "snippet": "  public void testThis14() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(this.Object);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : function (new:Object, *=): ?\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4754,
        "end_line": 4761,
        "comment": "",
        "child_ranges": [
            "(line 4755,col 5)-(line 4760,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction1()",
        "snippet": "  public void testThisTypeOfFunction1() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Object)} */ function f() {}\" +\n        \"f();\");\n  }\n",
        "begin_line": 4763,
        "end_line": 4767,
        "comment": "",
        "child_ranges": [
            "(line 4764,col 5)-(line 4766,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction2()",
        "snippet": "  public void testThisTypeOfFunction2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @type {function(this:F)} */ function f() {}\" +\n        \"f();\",\n        \"\\\"function (this:F): ?\\\" must be called with a \\\"this\\\" type\");\n  }\n",
        "begin_line": 4769,
        "end_line": 4775,
        "comment": "",
        "child_ranges": [
            "(line 4770,col 5)-(line 4774,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction3()",
        "snippet": "  public void testThisTypeOfFunction3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.bar = function() {};\" +\n        \"var f = (new F()).bar; f();\",\n        \"\\\"function (this:F): undefined\\\" must be called with a \\\"this\\\" type\");\n  }\n",
        "begin_line": 4777,
        "end_line": 4783,
        "comment": "",
        "child_ranges": [
            "(line 4778,col 5)-(line 4782,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction4()",
        "snippet": "  public void testThisTypeOfFunction4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.moveTo = function(x, y) {};\" +\n        \"F.prototype.lineTo = function(x, y) {};\" +\n        \"function demo() {\" +\n        \"  var path = new F();\" +\n        \"  var points = [[1,1], [2,2]];\" +\n        \"  for (var i = 0; i < points.length; i++) {\" +\n        \"    (i == 0 ? path.moveTo : path.lineTo)(\" +\n        \"       points[i][0], points[i][1]);\" +\n        \"  }\" +\n        \"}\",\n        \"\\\"function (this:F, ?, ?): undefined\\\" \" +\n        \"must be called with a \\\"this\\\" type\");\n  }\n",
        "begin_line": 4785,
        "end_line": 4800,
        "comment": "",
        "child_ranges": [
            "(line 4786,col 5)-(line 4799,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis1()",
        "snippet": "  public void testGlobalThis1() throws Exception {\n    testTypes(\"/** @constructor */ function Window() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Window.prototype.alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of Window.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4802,
        "end_line": 4811,
        "comment": "",
        "child_ranges": [
            "(line 4803,col 5)-(line 4810,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis2()",
        "snippet": "  public void testGlobalThis2() throws Exception {\n    // this.alert = 3 doesn't count as a declaration, so this isn't a warning.\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"this.alert = 3;\" +\n        \"(new Bindow()).alert(this.alert)\");\n  }\n",
        "begin_line": 4813,
        "end_line": 4820,
        "comment": "",
        "child_ranges": [
            "(line 4815,col 5)-(line 4819,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis2b()",
        "snippet": "  public void testGlobalThis2b() throws Exception {\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"/** @return {number} */ this.alert = function() { return 3; };\" +\n        \"(new Bindow()).alert(this.alert())\",\n        \"actual parameter 1 of Bindow.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4823,
        "end_line": 4833,
        "comment": "",
        "child_ranges": [
            "(line 4824,col 5)-(line 4832,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis3()",
        "snippet": "  public void testGlobalThis3() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"function alert(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4835,
        "end_line": 4844,
        "comment": "",
        "child_ranges": [
            "(line 4836,col 5)-(line 4843,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis4()",
        "snippet": "  public void testGlobalThis4() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4846,
        "end_line": 4855,
        "comment": "",
        "child_ranges": [
            "(line 4847,col 5)-(line 4854,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis5()",
        "snippet": "  public void testGlobalThis5() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @param {string} msg */ \" +\n        \"  var alert = function(msg) {};\" +\n        \"}\" +\n        \"this.alert(3);\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 4857,
        "end_line": 4865,
        "comment": "",
        "child_ranges": [
            "(line 4858,col 5)-(line 4864,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis6()",
        "snippet": "  public void testGlobalThis6() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"var x = 3;\" +\n        \"x = 'msg';\" +\n        \"this.alert(this.x);\");\n  }\n",
        "begin_line": 4867,
        "end_line": 4874,
        "comment": "",
        "child_ranges": [
            "(line 4868,col 5)-(line 4873,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis7()",
        "snippet": "  public void testGlobalThis7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Window() {}\" +\n        \"/** @param {Window} msg */ \" +\n        \"var foo = function(msg) {};\" +\n        \"foo(this);\");\n  }\n",
        "begin_line": 4876,
        "end_line": 4882,
        "comment": "",
        "child_ranges": [
            "(line 4877,col 5)-(line 4881,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis8()",
        "snippet": "  public void testGlobalThis8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Window() {}\" +\n        \"/** @param {number} msg */ \" +\n        \"var foo = function(msg) {};\" +\n        \"foo(this);\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : global this\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4884,
        "end_line": 4893,
        "comment": "",
        "child_ranges": [
            "(line 4885,col 5)-(line 4892,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis9()",
        "snippet": "  public void testGlobalThis9() throws Exception {\n    testTypes(\n        // Window is not marked as a constructor, so the\n        // inheritance doesn't happen.\n        \"function Window() {}\" +\n        \"Window.prototype.alert = function() {};\" +\n        \"this.alert();\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 4895,
        "end_line": 4903,
        "comment": "",
        "child_ranges": [
            "(line 4896,col 5)-(line 4902,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType1()",
        "snippet": "  public void testControlFlowRestrictsType1() throws Exception {\n    testTypes(\"/** @return {String?} */ function f() { return null; }\" +\n        \"/** @type {String?} */ var a = f();\" +\n        \"/** @type String */ var b = new String('foo');\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 4905,
        "end_line": 4915,
        "comment": "",
        "child_ranges": [
            "(line 4906,col 5)-(line 4914,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType2()",
        "snippet": "  public void testControlFlowRestrictsType2() throws Exception {\n    testTypes(\"/** @return {(string,null)} */ function f() { return null; }\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */ var b = 'foo';\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 4917,
        "end_line": 4930,
        "comment": "",
        "child_ranges": [
            "(line 4918,col 5)-(line 4929,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType3()",
        "snippet": "  public void testControlFlowRestrictsType3() throws Exception {\n    testTypes(\"/** @type {(string,void)} */\" +\n        \"var a;\" +\n        \"/** @type string */\" +\n        \"var b = 'foo';\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 4932,
        "end_line": 4940,
        "comment": "",
        "child_ranges": [
            "(line 4933,col 5)-(line 4939,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType4()",
        "snippet": "  public void testControlFlowRestrictsType4() throws Exception {\n    testTypes(\"/** @param {string} a */ function f(a){}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\");\n  }\n",
        "begin_line": 4942,
        "end_line": 4946,
        "comment": "",
        "child_ranges": [
            "(line 4943,col 5)-(line 4945,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType5()",
        "snippet": "  public void testControlFlowRestrictsType5() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"a || f(a);\");\n  }\n",
        "begin_line": 4948,
        "end_line": 4952,
        "comment": "",
        "child_ranges": [
            "(line 4949,col 5)-(line 4951,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType6()",
        "snippet": "  public void testControlFlowRestrictsType6() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4954,
        "end_line": 4961,
        "comment": "",
        "child_ranges": [
            "(line 4955,col 5)-(line 4960,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType7()",
        "snippet": "  public void testControlFlowRestrictsType7() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4963,
        "end_line": 4970,
        "comment": "",
        "child_ranges": [
            "(line 4964,col 5)-(line 4969,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType8()",
        "snippet": "  public void testControlFlowRestrictsType8() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"if (a || f(a)) {}\");\n  }\n",
        "begin_line": 4972,
        "end_line": 4976,
        "comment": "",
        "child_ranges": [
            "(line 4973,col 5)-(line 4975,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType9()",
        "snippet": "  public void testControlFlowRestrictsType9() throws Exception {\n    testTypes(\"/** @param {number?} x\\n * @return {number}*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || x == 1) { return 1; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 4978,
        "end_line": 4983,
        "comment": "",
        "child_ranges": [
            "(line 4979,col 5)-(line 4982,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType10()",
        "snippet": "  public void testControlFlowRestrictsType10() throws Exception {\n    // We should correctly infer that y will be (null|{}) because\n    // the loop wraps around.\n    testTypes(\"/** @param {number} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \"  var y = null;\" +\n        \"  for (var i = 0; i < 10; i++) {\" +\n        \"    f(y);\" +\n        \"    if (y != null) {\" +\n        \"      // y is None the first time it goes thru this branch\\n\" +\n        \"    } else {\" +\n        \"      y = {};\" +\n        \"    }\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (null|{})\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4985,
        "end_line": 5003,
        "comment": "",
        "child_ranges": [
            "(line 4988,col 5)-(line 5002,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType11()",
        "snippet": "  public void testControlFlowRestrictsType11() throws Exception {\n    testTypes(\"/** @param {boolean} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \"  var y = null;\" +\n        \"  if (y != null) {\" +\n        \"    for (var i = 0; i < 10; i++) {\" +\n        \"      f(y);\" +\n        \"    }\" +\n        \"  }\" +\n        \"};\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 5005,
        "end_line": 5018,
        "comment": "",
        "child_ranges": [
            "(line 5006,col 5)-(line 5017,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase3()",
        "snippet": "  public void testSwitchCase3() throws Exception {\n    testTypes(\"/** @type String */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A': }\");\n  }\n",
        "begin_line": 5020,
        "end_line": 5024,
        "comment": "",
        "child_ranges": [
            "(line 5021,col 5)-(line 5023,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase4()",
        "snippet": "  public void testSwitchCase4() throws Exception {\n    testTypes(\"/** @type {(string,Null)} */\" +\n        \"var a = 'foo';\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 5026,
        "end_line": 5030,
        "comment": "",
        "child_ranges": [
            "(line 5027,col 5)-(line 5029,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase5()",
        "snippet": "  public void testSwitchCase5() throws Exception {\n    testTypes(\"/** @type {(String,Null)} */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 5032,
        "end_line": 5036,
        "comment": "",
        "child_ranges": [
            "(line 5033,col 5)-(line 5035,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase6()",
        "snippet": "  public void testSwitchCase6() throws Exception {\n    testTypes(\"/** @type {(Number,Null)} */\" +\n        \"var a = new Number(5);\" +\n        \"switch (a) { case 5:break; case null:break; }\");\n  }\n",
        "begin_line": 5038,
        "end_line": 5042,
        "comment": "",
        "child_ranges": [
            "(line 5039,col 5)-(line 5041,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase7()",
        "snippet": "  public void testSwitchCase7() throws Exception {\n    // This really tests the inference inside the case.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (3) { case g(x.foo): return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5044,
        "end_line": 5060,
        "comment": "",
        "child_ranges": [
            "(line 5046,col 5)-(line 5059,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase8()",
        "snippet": "  public void testSwitchCase8() throws Exception {\n    // This really tests the inference inside the switch clause.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (g(x.foo)) { case 3: return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5062,
        "end_line": 5078,
        "comment": "",
        "child_ranges": [
            "(line 5064,col 5)-(line 5077,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck1()",
        "snippet": "  public void testNoTypeCheck1() throws Exception {\n    testTypes(\"/** @notypecheck */function foo() { new 4 }\");\n  }\n",
        "begin_line": 5080,
        "end_line": 5082,
        "comment": "",
        "child_ranges": [
            "(line 5081,col 5)-(line 5081,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck2()",
        "snippet": "  public void testNoTypeCheck2() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function() { new 4 }\");\n  }\n",
        "begin_line": 5084,
        "end_line": 5086,
        "comment": "",
        "child_ranges": [
            "(line 5085,col 5)-(line 5085,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck3()",
        "snippet": "  public void testNoTypeCheck3() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 5088,
        "end_line": 5090,
        "comment": "",
        "child_ranges": [
            "(line 5089,col 5)-(line 5089,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck4()",
        "snippet": "  public void testNoTypeCheck4() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function() { new 4 }\");\n  }\n",
        "begin_line": 5092,
        "end_line": 5095,
        "comment": "",
        "child_ranges": [
            "(line 5093,col 5)-(line 5094,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck5()",
        "snippet": "  public void testNoTypeCheck5() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function() { new 4 }\");\n  }\n",
        "begin_line": 5097,
        "end_line": 5100,
        "comment": "",
        "child_ranges": [
            "(line 5098,col 5)-(line 5099,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck6()",
        "snippet": "  public void testNoTypeCheck6() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 5102,
        "end_line": 5105,
        "comment": "",
        "child_ranges": [
            "(line 5103,col 5)-(line 5104,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck7()",
        "snippet": "  public void testNoTypeCheck7() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function bar() { new 4 }\");\n  }\n",
        "begin_line": 5107,
        "end_line": 5110,
        "comment": "",
        "child_ranges": [
            "(line 5108,col 5)-(line 5109,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck8()",
        "snippet": "  public void testNoTypeCheck8() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ var foo;\" +\n        \"var bar = 3; /** @param {string} x */ function f(x) {} f(bar);\");\n  }\n",
        "begin_line": 5112,
        "end_line": 5115,
        "comment": "",
        "child_ranges": [
            "(line 5113,col 5)-(line 5114,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck9()",
        "snippet": "  public void testNoTypeCheck9() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \" /** @type {string} */ var a = 1\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 5117,
        "end_line": 5124,
        "comment": "",
        "child_ranges": [
            "(line 5118,col 5)-(line 5123,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck10()",
        "snippet": "  public void testNoTypeCheck10() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \" function h() {/** @type {string} */ var a = 1}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 5126,
        "end_line": 5133,
        "comment": "",
        "child_ranges": [
            "(line 5127,col 5)-(line 5132,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck11()",
        "snippet": "  public void testNoTypeCheck11() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"/** @notypecheck */ function h() {/** @type {string} */ var a = 1}\"\n        );\n  }\n",
        "begin_line": 5135,
        "end_line": 5139,
        "comment": "",
        "child_ranges": [
            "(line 5136,col 5)-(line 5138,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck12()",
        "snippet": "  public void testNoTypeCheck12() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"function h() {/** @type {string}\\n * @notypecheck\\n*/ var a = 1}\"\n        );\n  }\n",
        "begin_line": 5141,
        "end_line": 5145,
        "comment": "",
        "child_ranges": [
            "(line 5142,col 5)-(line 5144,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck13()",
        "snippet": "  public void testNoTypeCheck13() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"function h() {/** @type {string}\\n * @notypecheck\\n*/ var a = 1;\" +\n        \"/** @type {string}*/ var b = 1}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 5147,
        "end_line": 5155,
        "comment": "",
        "child_ranges": [
            "(line 5148,col 5)-(line 5154,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck14()",
        "snippet": "  public void testNoTypeCheck14() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ function g() { }\" +\n        \"g(1,2,3)\");\n  }\n",
        "begin_line": 5157,
        "end_line": 5160,
        "comment": "",
        "child_ranges": [
            "(line 5158,col 5)-(line 5159,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCast()",
        "snippet": "  public void testImplicitCast() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\",\n             \"(new Element).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 5162,
        "end_line": 5168,
        "comment": "",
        "child_ranges": [
            "(line 5163,col 5)-(line 5167,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCastSubclassAccess()",
        "snippet": "  public void testImplicitCastSubclassAccess() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"/** @constructor \\n @extends Element */\" +\n             \"function DIVElement() {};\",\n             \"(new DIVElement).innerHTML = new Array();\",\n             null, false);\n  }\n",
        "begin_line": 5170,
        "end_line": 5179,
        "comment": "",
        "child_ranges": [
            "(line 5171,col 5)-(line 5178,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCastNotInExterns()",
        "snippet": "  public void testImplicitCastNotInExterns() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"(new Element).innerHTML = new Array();\",\n             new String[] {\n               \"Illegal annotation on innerHTML. @implicitCast may only be \" +\n               \"used in externs.\",\n               \"assignment to property innerHTML of Element\\n\" +\n               \"found   : Array\\n\" +\n               \"required: string\"});\n  }\n",
        "begin_line": 5181,
        "end_line": 5193,
        "comment": "",
        "child_ranges": [
            "(line 5182,col 5)-(line 5192,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberNode()",
        "snippet": "  public void testNumberNode() throws Exception {\n    Node n = typeCheck(Node.newNumber(0));\n\n    assertEquals(NUMBER_TYPE, n.getJSType());\n  }\n",
        "begin_line": 5195,
        "end_line": 5199,
        "comment": "",
        "child_ranges": [
            "(line 5196,col 5)-(line 5196,col 42)",
            "(line 5198,col 5)-(line 5198,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringNode()",
        "snippet": "  public void testStringNode() throws Exception {\n    Node n = typeCheck(Node.newString(\"hello\"));\n\n    assertEquals(STRING_TYPE, n.getJSType());\n  }\n",
        "begin_line": 5201,
        "end_line": 5205,
        "comment": "",
        "child_ranges": [
            "(line 5202,col 5)-(line 5202,col 48)",
            "(line 5204,col 5)-(line 5204,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanNodeTrue()",
        "snippet": "  public void testBooleanNodeTrue() throws Exception {\n    Node trueNode = typeCheck(new Node(Token.TRUE));\n\n    assertEquals(BOOLEAN_TYPE, trueNode.getJSType());\n  }\n",
        "begin_line": 5207,
        "end_line": 5211,
        "comment": "",
        "child_ranges": [
            "(line 5208,col 5)-(line 5208,col 52)",
            "(line 5210,col 5)-(line 5210,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanNodeFalse()",
        "snippet": "  public void testBooleanNodeFalse() throws Exception {\n    Node falseNode = typeCheck(new Node(Token.FALSE));\n\n    assertEquals(BOOLEAN_TYPE, falseNode.getJSType());\n  }\n",
        "begin_line": 5213,
        "end_line": 5217,
        "comment": "",
        "child_ranges": [
            "(line 5214,col 5)-(line 5214,col 54)",
            "(line 5216,col 5)-(line 5216,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndefinedNode()",
        "snippet": "  public void testUndefinedNode() throws Exception {\n    Node p = new Node(Token.ADD);\n    Node n = Node.newString(Token.NAME, \"undefined\");\n    p.addChildToBack(n);\n    p.addChildToBack(Node.newNumber(5));\n    typeCheck(p);\n\n    assertEquals(VOID_TYPE, n.getJSType());\n  }\n",
        "begin_line": 5219,
        "end_line": 5227,
        "comment": "",
        "child_ranges": [
            "(line 5220,col 5)-(line 5220,col 33)",
            "(line 5221,col 5)-(line 5221,col 53)",
            "(line 5222,col 5)-(line 5222,col 24)",
            "(line 5223,col 5)-(line 5223,col 40)",
            "(line 5224,col 5)-(line 5224,col 17)",
            "(line 5226,col 5)-(line 5226,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberAutoboxing()",
        "snippet": "  public void testNumberAutoboxing() throws Exception {\n    testTypes(\"/** @type Number */var a = 4;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null)\");\n  }\n",
        "begin_line": 5229,
        "end_line": 5234,
        "comment": "",
        "child_ranges": [
            "(line 5230,col 5)-(line 5233,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberUnboxing()",
        "snippet": "  public void testNumberUnboxing() throws Exception {\n    testTypes(\"/** @type number */var a = new Number(4);\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5236,
        "end_line": 5241,
        "comment": "",
        "child_ranges": [
            "(line 5237,col 5)-(line 5240,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringAutoboxing()",
        "snippet": "  public void testStringAutoboxing() throws Exception {\n    testTypes(\"/** @type String */var a = 'hello';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null)\");\n  }\n",
        "begin_line": 5243,
        "end_line": 5248,
        "comment": "",
        "child_ranges": [
            "(line 5244,col 5)-(line 5247,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringUnboxing()",
        "snippet": "  public void testStringUnboxing() throws Exception {\n    testTypes(\"/** @type string */var a = new String('hello');\",\n        \"initializing variable\\n\" +\n        \"found   : String\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5250,
        "end_line": 5255,
        "comment": "",
        "child_ranges": [
            "(line 5251,col 5)-(line 5254,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanAutoboxing()",
        "snippet": "  public void testBooleanAutoboxing() throws Exception {\n    testTypes(\"/** @type Boolean */var a = true;\",\n        \"initializing variable\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (Boolean|null)\");\n  }\n",
        "begin_line": 5257,
        "end_line": 5262,
        "comment": "",
        "child_ranges": [
            "(line 5258,col 5)-(line 5261,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanUnboxing()",
        "snippet": "  public void testBooleanUnboxing() throws Exception {\n    testTypes(\"/** @type boolean */var a = new Boolean(false);\",\n        \"initializing variable\\n\" +\n        \"found   : Boolean\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5264,
        "end_line": 5269,
        "comment": "",
        "child_ranges": [
            "(line 5265,col 5)-(line 5268,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue86()",
        "snippet": "  public void testIssue86() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.get = function(){};\" +\n        \"/** @constructor \\n * @implements {I} */ function F() {}\" +\n        \"/** @override */ F.prototype.get = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5271,
        "end_line": 5280,
        "comment": "",
        "child_ranges": [
            "(line 5272,col 5)-(line 5279,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue124()",
        "snippet": "  public void testIssue124() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = 1;\" +\n        \"}\");\n  }\n",
        "begin_line": 5282,
        "end_line": 5289,
        "comment": "",
        "child_ranges": [
            "(line 5283,col 5)-(line 5288,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue124b()",
        "snippet": "  public void testIssue124b() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = undefined;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|undefined)\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 5291,
        "end_line": 5301,
        "comment": "",
        "child_ranges": [
            "(line 5292,col 5)-(line 5300,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue259()",
        "snippet": "  public void testIssue259() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */\" +\n        \"var Clock = function() {\" +\n        \"  /** @constructor */\" +\n        \"  this.Date = function() {};\" +\n        \"  f(new this.Date());\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : this.Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5303,
        "end_line": 5315,
        "comment": "",
        "child_ranges": [
            "(line 5304,col 5)-(line 5314,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue301()",
        "snippet": "  public void testIssue301() throws Exception {\n    testTypes(\n        \"Array.indexOf = function() {};\" +\n        \"var s = 'hello';\" +\n        \"alert(s.toLowerCase.indexOf('1'));\",\n        \"Property indexOf never defined on String.prototype.toLowerCase\");\n  }\n",
        "begin_line": 5317,
        "end_line": 5323,
        "comment": "",
        "child_ranges": [
            "(line 5318,col 5)-(line 5322,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue368()",
        "snippet": "  public void testIssue368() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo(){}\" +\n        \"/**\\n\" +\n        \" * @param {number} one\\n\" +\n        \" * @param {string} two\\n\" +\n        \" */\\n\" +\n        \"Foo.prototype.add = function(one, two) {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar(){}\" +\n        \"/** @override */\\n\" +\n        \"Bar.prototype.add = function(ignored) {};\" +\n        \"(new Bar()).add(1, 2);\",\n        \"actual parameter 2 of Bar.prototype.add does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5325,
        "end_line": 5344,
        "comment": "",
        "child_ranges": [
            "(line 5326,col 5)-(line 5343,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue380()",
        "snippet": "  public void testIssue380() throws Exception {\n    testTypes(\n        \"/** @type { function(string): {innerHTML: string} } */\" +\n        \"document.getElementById;\" +\n        \"var list = /** @type {!Array.<string>} */ ['hello', 'you'];\\n\" +\n        \"list.push('?');\\n\" +\n        \"document.getElementById('node').innerHTML = list.toString();\");\n  }\n",
        "begin_line": 5346,
        "end_line": 5353,
        "comment": "",
        "child_ranges": [
            "(line 5347,col 5)-(line 5352,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue483()",
        "snippet": "  public void testIssue483() throws Exception {\n    testTypes(\n        \"/** @constructor */ function C() {\" +\n        \"  /** @type {?Array} */ this.a = [];\" +\n        \"}\" +\n        \"C.prototype.f = function() {\" +\n        \"  if (this.a.length > 0) {\" +\n        \"    g(this.a);\" +\n        \"  }\" +\n        \"};\" +\n        \"/** @param {number} a */ function g(a) {}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5355,
        "end_line": 5369,
        "comment": "",
        "child_ranges": [
            "(line 5356,col 5)-(line 5368,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537a()",
        "snippet": "  public void testIssue537a() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {method: function() {}};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz()) this.method(1);\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Function Foo.prototype.method: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 5371,
        "end_line": 5392,
        "comment": "",
        "child_ranges": [
            "(line 5372,col 5)-(line 5391,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537b()",
        "snippet": "  public void testIssue537b() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {method: function() {}};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz(1)) this.method();\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Function Bar.prototype.baz: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 5394,
        "end_line": 5415,
        "comment": "",
        "child_ranges": [
            "(line 5395,col 5)-(line 5414,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537c()",
        "snippet": "  public void testIssue537c() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz2()) alert(1);\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Property baz2 never defined on Bar\");\n  }\n",
        "begin_line": 5417,
        "end_line": 5435,
        "comment": "",
        "child_ranges": [
            "(line 5418,col 5)-(line 5434,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537d()",
        "snippet": "  public void testIssue537d() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {\" +\n        \"  /** @return {Bar} */ x: function() { new Bar(); },\" +\n        \"  /** @return {Foo} */ y: function() { new Bar(); }\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  this.xy = 3;\" +\n        \"}\" +\n        \"/** @return {Bar} */ function f() { return new Bar(); }\" +\n        \"/** @return {Foo} */ function g() { return new Bar(); }\" +\n        \"Bar.prototype = {\" +\n        \"  /** @return {Bar} */ x: function() { new Bar(); },\" +\n        \"  /** @return {Foo} */ y: function() { new Bar(); }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\");\n  }\n",
        "begin_line": 5437,
        "end_line": 5458,
        "comment": "",
        "child_ranges": [
            "(line 5438,col 5)-(line 5457,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue586()",
        "snippet": "  public void testIssue586() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"var MyClass = function() {};\" +\n        \"/** @param {boolean} success */\" +\n        \"MyClass.prototype.fn = function(success) {};\" +\n        \"MyClass.prototype.test = function() {\" +\n        \"  this.fn();\" +\n        \"  this.fn = function() {};\" +\n        \"};\",\n        \"Function MyClass.prototype.fn: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 5460,
        "end_line": 5473,
        "comment": "",
        "child_ranges": [
            "(line 5461,col 5)-(line 5472,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug592170()",
        "snippet": "  public void testBug592170() throws Exception {\n    testTypes(\n        \"/** @param {Function} opt_f ... */\" +\n        \"function foo(opt_f) {\" +\n        \"  /** @type {Function} */\" +\n        \"  return opt_f || function () {};\" +\n        \"}\");\n  }\n",
        "begin_line": 5480,
        "end_line": 5487,
        "comment": "\n   * Tests that the || operator is type checked correctly, that is of\n   * the type of the first argument or of the second argument. See\n   * bugid 592170 for more details.\n   ",
        "child_ranges": [
            "(line 5481,col 5)-(line 5486,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug901455()",
        "snippet": "  public void testBug901455() throws Exception {\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = undefined === a()\");\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = a() === undefined\");\n  }\n",
        "begin_line": 5494,
        "end_line": 5499,
        "comment": "\n   * Tests that undefined can be compared shallowly to a value of type\n   * (number,undefined) regardless of the side on which the undefined\n   * value is.\n   ",
        "child_ranges": [
            "(line 5495,col 5)-(line 5496,col 37)",
            "(line 5497,col 5)-(line 5498,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug908701()",
        "snippet": "  public void testBug908701() throws Exception {\n    testTypes(\"/** @type {String} */var s = new String('foo');\" +\n        \"var b = s.match(/a/) != null;\");\n  }\n",
        "begin_line": 5504,
        "end_line": 5507,
        "comment": "\n   * Tests that the match method of strings returns nullable arrays.\n   ",
        "child_ranges": [
            "(line 5505,col 5)-(line 5506,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug908625()",
        "snippet": "  public void testBug908625() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\" +\n        \"/** @constructor\\n * @extends A */function B(){}\" +\n        \"/** @param {B} b\" +\n        \"\\n @return {(A,undefined)} */function foo(b){return b}\");\n  }\n",
        "begin_line": 5512,
        "end_line": 5517,
        "comment": "\n   * Tests that named types play nicely with subtyping.\n   ",
        "child_ranges": [
            "(line 5513,col 5)-(line 5516,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug911118()",
        "snippet": "  public void testBug911118() throws Exception {\n    // verifying the type assigned to function expressions assigned variables\n    Scope s = parseAndTypeCheckWithScope(\"var a = function(){};\").scope;\n    JSType type = s.getVar(\"a\").getType();\n    assertEquals(\"function (): undefined\", type.toString());\n\n    // verifying the bug example\n    testTypes(\"function nullFunction() {};\" +\n        \"var foo = nullFunction;\" +\n        \"foo = function() {};\" +\n        \"foo();\");\n  }\n",
        "begin_line": 5523,
        "end_line": 5534,
        "comment": "\n   * Tests that assigning two untyped functions to a variable whose type is\n   * inferred and calling this variable is legal.\n   ",
        "child_ranges": [
            "(line 5525,col 5)-(line 5525,col 72)",
            "(line 5526,col 5)-(line 5526,col 42)",
            "(line 5527,col 5)-(line 5527,col 60)",
            "(line 5530,col 5)-(line 5533,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug909000()",
        "snippet": "  public void testBug909000() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\\n\" +\n        \"/** @param {!A} a\\n\" +\n        \"@return {boolean}*/\\n\" +\n        \"function y(a) { return a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5536,
        "end_line": 5544,
        "comment": "",
        "child_ranges": [
            "(line 5537,col 5)-(line 5543,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug930117()",
        "snippet": "  public void testBug930117() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */function f(x){}\" +\n        \"f(null);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5546,
        "end_line": 5553,
        "comment": "",
        "child_ranges": [
            "(line 5547,col 5)-(line 5552,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1484445()",
        "snippet": "  public void testBug1484445() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (foo.bar == null && foo.baz == null) {\" +\n        \"      foo.bar;\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 5555,
        "end_line": 5568,
        "comment": "",
        "child_ranges": [
            "(line 5556,col 5)-(line 5567,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1859535()",
        "snippet": "  public void testBug1859535() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {Function} childCtor Child class.\\n\" +\n        \" * @param {Function} parentCtor Parent class.\\n\" +\n        \" */\" +\n        \"var inherits = function(childCtor, parentCtor) {\" +\n        \"  /** @constructor */\" +\n        \"  function tempCtor() {};\" +\n        \"  tempCtor.prototype = parentCtor.prototype;\" +\n        \"  childCtor.superClass_ = parentCtor.prototype;\" +\n        \"  childCtor.prototype = new tempCtor();\" +\n        \"  /** @override */ childCtor.prototype.constructor = childCtor;\" +\n        \"};\" +\n        \"/**\" +\n        \" * @param {Function} constructor\\n\" +\n        \" * @param {Object} var_args\\n\" +\n        \" * @return {Object}\\n\" +\n        \" */\" +\n        \"var factory = function(constructor, var_args) {\" +\n        \"  /** @constructor */\" +\n        \"  var tempCtor = function() {};\" +\n        \"  tempCtor.prototype = constructor.prototype;\" +\n        \"  var obj = new tempCtor();\" +\n        \"  constructor.apply(obj, arguments);\" +\n        \"  return obj;\" +\n        \"};\");\n  }\n",
        "begin_line": 5570,
        "end_line": 5597,
        "comment": "",
        "child_ranges": [
            "(line 5571,col 5)-(line 5596,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1940591()",
        "snippet": "  public void testBug1940591() throws Exception {\n    testTypes(\n        \"/** @type {Object} */\" +\n        \"var a = {};\\n\" +\n        \"/** @type {number} */\\n\" +\n        \"a.name = 0;\\n\" +\n        \"/**\\n\" +\n        \" * @param {Function} x anything.\\n\" +\n        \" */\\n\" +\n        \"a.g = function(x) { x.name = 'a'; }\");\n  }\n",
        "begin_line": 5599,
        "end_line": 5609,
        "comment": "",
        "child_ranges": [
            "(line 5600,col 5)-(line 5608,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1942972()",
        "snippet": "  public void testBug1942972() throws Exception {\n    testTypes(\n        \"var google = {\\n\"+\n        \"  gears: {\\n\" +\n        \"    factory: {},\\n\" +\n        \"    workerPool: {}\\n\" +\n        \"  }\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"google.gears = {factory: {}};\\n\");\n  }\n",
        "begin_line": 5611,
        "end_line": 5621,
        "comment": "",
        "child_ranges": [
            "(line 5612,col 5)-(line 5620,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1943776()",
        "snippet": "  public void testBug1943776() throws Exception {\n    testTypes(\n        \"/** @return  {{foo: Array}} */\" +\n        \"function bar() {\" +\n        \"  return {foo: []};\" +\n        \"}\");\n  }\n",
        "begin_line": 5623,
        "end_line": 5629,
        "comment": "",
        "child_ranges": [
            "(line 5624,col 5)-(line 5628,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1987544()",
        "snippet": "  public void testBug1987544() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function foo(x) {}\" +\n        \"var duration;\" +\n        \"if (true && !(duration = 3)) {\" +\n        \" foo(duration);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5631,
        "end_line": 5641,
        "comment": "",
        "child_ranges": [
            "(line 5632,col 5)-(line 5640,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1940769()",
        "snippet": "  public void testBug1940769() throws Exception {\n    testTypes(\n        \"/** @return {!Object} */ \" +\n        \"function proto(obj) { return obj.prototype; }\" +\n        \"/** @constructor */ function Map() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Map}\\n\" +\n        \" */\" +\n        \"function Map2() { Map.call(this); };\" +\n        \"Map2.prototype = proto(Map);\");\n  }\n",
        "begin_line": 5643,
        "end_line": 5654,
        "comment": "",
        "child_ranges": [
            "(line 5644,col 5)-(line 5653,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug2335992()",
        "snippet": "  public void testBug2335992() throws Exception {\n    testTypes(\n        \"/** @return {*} */ function f() { return 3; }\" +\n        \"var x = f();\" +\n        \"/** @type {string} */\" +\n        \"x.y = 3;\",\n        \"assignment to property y of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5656,
        "end_line": 5665,
        "comment": "",
        "child_ranges": [
            "(line 5657,col 5)-(line 5664,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug2341812()",
        "snippet": "  public void testBug2341812() throws Exception {\n    testTypes(\n        \"/** @interface */\" +\n        \"function EventTarget() {}\" +\n        \"/** @constructor \\n * @implements {EventTarget} */\" +\n        \"function Node() {}\" +\n        \"/** @type {number} */ Node.prototype.index;\" +\n        \"/** @param {EventTarget} x \\n * @return {string} */\" +\n        \"function foo(x) { return x.index; }\");\n  }\n",
        "begin_line": 5667,
        "end_line": 5676,
        "comment": "",
        "child_ranges": [
            "(line 5668,col 5)-(line 5675,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScopedConstructors1()",
        "snippet": "  public void testScopedConstructors1() throws Exception {\n    testTypes(\n        \"function foo1() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {number} */ this.x = 3;\" +\n        \"  }\" +\n        \"}\" +\n        \"function foo2() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {string} */ this.x = 'y';\" +\n        \"  }\" +\n        \"  /** \" +\n        \"   * @param {Bar} b\\n\" +\n        \"   * @return {number}\\n\" +\n        \"   */\" +\n        \"  function baz(b) { return b.x; }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5678,
        "end_line": 5698,
        "comment": "",
        "child_ranges": [
            "(line 5679,col 5)-(line 5697,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScopedConstructors2()",
        "snippet": "  public void testScopedConstructors2() throws Exception {\n    testTypes(\n        \"/** @param {Function} f */\" +\n        \"function foo1(f) {\" +\n        \"  /** @param {Function} g */\" +\n        \"  f.prototype.bar = function(g) {};\" +\n        \"}\");\n  }\n",
        "begin_line": 5700,
        "end_line": 5707,
        "comment": "",
        "child_ranges": [
            "(line 5701,col 5)-(line 5706,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference1()",
        "snippet": "  public void testQualifiedNameInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (!foo.baz) break; \" +\n        \"    foo.bar = null;\" +\n        \"  }\" +\n        // Tests a bug where this condition always evaluated to true.\n        \"  return foo.bar == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 5709,
        "end_line": 5723,
        "comment": "",
        "child_ranges": [
            "(line 5710,col 5)-(line 5722,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference2()",
        "snippet": "  public void testQualifiedNameInference2() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 5725,
        "end_line": 5738,
        "comment": "",
        "child_ranges": [
            "(line 5726,col 5)-(line 5737,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference3()",
        "snippet": "  public void testQualifiedNameInference3() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"} function g() { x.y = null; }\");\n  }\n",
        "begin_line": 5740,
        "end_line": 5753,
        "comment": "",
        "child_ranges": [
            "(line 5741,col 5)-(line 5752,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference4()",
        "snippet": "  public void testQualifiedNameInference4() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\\n\" +\n        \"/**\\n\" +\n        \" * @param {?string} x \\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function Foo(x) { this.x_ = x; }\\n\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x_) { f(this.x_); }\" +\n        \"};\");\n  }\n",
        "begin_line": 5755,
        "end_line": 5766,
        "comment": "",
        "child_ranges": [
            "(line 5756,col 5)-(line 5765,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference5()",
        "snippet": "  public void testQualifiedNameInference5() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"    /** @param {number} x */ ns.foo = function(x) {}; })();\" +\n        \"(function() { ns.foo(true); })();\",\n        \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5768,
        "end_line": 5777,
        "comment": "",
        "child_ranges": [
            "(line 5769,col 5)-(line 5776,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference6()",
        "snippet": "  public void testQualifiedNameInference6() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"/** @param {number} x */ ns.foo = function(x) {};\" +\n        \"(function() { \" +\n        \"    ns.foo = function(x) {};\" +\n        \"    ns.foo(true); })();\",\n        \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5779,
        "end_line": 5789,
        "comment": "",
        "child_ranges": [
            "(line 5780,col 5)-(line 5788,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference7()",
        "snippet": "  public void testQualifiedNameInference7() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.Foo = function(x) {};\" +\n        \"  /** @param {ns.Foo} x */ function f(x) {}\" +\n        \"  f(new ns.Foo(true));\" +\n        \"})();\",\n        \"actual parameter 1 of ns.Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5791,
        "end_line": 5803,
        "comment": "",
        "child_ranges": [
            "(line 5792,col 5)-(line 5802,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference8()",
        "snippet": "  public void testQualifiedNameInference8() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.Foo = function(x) {};\" +\n        \"})();\" +\n        \"/** @param {ns.Foo} x */ function f(x) {}\" +\n        \"f(new ns.Foo(true));\",\n        \"Bad type annotation. Unknown type ns.Foo\");\n  }\n",
        "begin_line": 5805,
        "end_line": 5815,
        "comment": "",
        "child_ranges": [
            "(line 5806,col 5)-(line 5814,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference9()",
        "snippet": "  public void testQualifiedNameInference9() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"ns.ns2 = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.ns2.Foo = function(x) {};\" +\n        \"  /** @param {ns.ns2.Foo} x */ function f(x) {}\" +\n        \"  f(new ns.ns2.Foo(true));\" +\n        \"})();\",\n        \"actual parameter 1 of ns.ns2.Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5817,
        "end_line": 5830,
        "comment": "",
        "child_ranges": [
            "(line 5818,col 5)-(line 5829,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference10()",
        "snippet": "  public void testQualifiedNameInference10() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"ns.ns2 = {}; \" +\n        \"(function() { \" +\n        \"  /** @interface */ \" +\n        \"  ns.ns2.Foo = function() {};\" +\n        \"  /** @constructor \\n * @implements {ns.ns2.Foo} */ \" +\n        \"  function F() {}\" +\n        \"  (new F());\" +\n        \"})();\");\n  }\n",
        "begin_line": 5832,
        "end_line": 5843,
        "comment": "",
        "child_ranges": [
            "(line 5833,col 5)-(line 5842,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSheqRefinedScope()",
        "snippet": "  public void testSheqRefinedScope() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n @extends A */ function B() {}\\n\" +\n        \"/** @return {number} */\\n\" +\n        \"B.prototype.p = function() { return 1; }\\n\" +\n        \"/** @param {A} a\\n @param {B} b */\\n\" +\n        \"function f(a, b) {\\n\" +\n        \"  b.p();\\n\" +\n        \"  if (a === b) {\\n\" +\n        \"    b.p();\\n\" +\n        \"  }\\n\" +\n        \"}\");\n    Node nodeC = n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild();\n    JSType typeC = nodeC.getJSType();\n    assertTrue(typeC.isNumber());\n\n    Node nodeB = nodeC.getFirstChild().getFirstChild();\n    JSType typeB = nodeB.getJSType();\n    assertEquals(\"B\", typeB.toString());\n  }\n",
        "begin_line": 5845,
        "end_line": 5866,
        "comment": "",
        "child_ranges": [
            "(line 5846,col 5)-(line 5857,col 13)",
            "(line 5858,col 5)-(line 5859,col 39)",
            "(line 5860,col 5)-(line 5860,col 37)",
            "(line 5861,col 5)-(line 5861,col 33)",
            "(line 5863,col 5)-(line 5863,col 55)",
            "(line 5864,col 5)-(line 5864,col 37)",
            "(line 5865,col 5)-(line 5865,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignToUntypedVariable()",
        "snippet": "  public void testAssignToUntypedVariable() throws Exception {\n    Node n = parseAndTypeCheck(\"var z; z = 1;\");\n\n    Node assign = n.getLastChild().getFirstChild();\n    Node node = assign.getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertEquals(\"number\", node.getJSType().toString());\n  }\n",
        "begin_line": 5868,
        "end_line": 5875,
        "comment": "",
        "child_ranges": [
            "(line 5869,col 5)-(line 5869,col 48)",
            "(line 5871,col 5)-(line 5871,col 51)",
            "(line 5872,col 5)-(line 5872,col 39)",
            "(line 5873,col 5)-(line 5873,col 50)",
            "(line 5874,col 5)-(line 5874,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignToUntypedProperty()",
        "snippet": "  public void testAssignToUntypedProperty() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.a = 1;\" +\n        \"(new Foo).a;\");\n\n    Node node = n.getLastChild().getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertTrue(node.getJSType().isNumber());\n  }\n",
        "begin_line": 5877,
        "end_line": 5886,
        "comment": "",
        "child_ranges": [
            "(line 5878,col 5)-(line 5881,col 24)",
            "(line 5883,col 5)-(line 5883,col 49)",
            "(line 5884,col 5)-(line 5884,col 50)",
            "(line 5885,col 5)-(line 5885,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew1()",
        "snippet": "  public void testNew1() throws Exception {\n    testTypes(\"new 4\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 5888,
        "end_line": 5890,
        "comment": "",
        "child_ranges": [
            "(line 5889,col 5)-(line 5889,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew2()",
        "snippet": "  public void testNew2() throws Exception {\n    testTypes(\"var Math = {}; new Math()\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 5892,
        "end_line": 5894,
        "comment": "",
        "child_ranges": [
            "(line 5893,col 5)-(line 5893,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew3()",
        "snippet": "  public void testNew3() throws Exception {\n    testTypes(\"new Date()\");\n  }\n",
        "begin_line": 5896,
        "end_line": 5898,
        "comment": "",
        "child_ranges": [
            "(line 5897,col 5)-(line 5897,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew4()",
        "snippet": "  public void testNew4() throws Exception {\n    testTypes(\"/** @constructor */function A(){}; new A();\");\n  }\n",
        "begin_line": 5900,
        "end_line": 5902,
        "comment": "",
        "child_ranges": [
            "(line 5901,col 5)-(line 5901,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew5()",
        "snippet": "  public void testNew5() throws Exception {\n    testTypes(\"function A(){}; new A();\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 5904,
        "end_line": 5906,
        "comment": "",
        "child_ranges": [
            "(line 5905,col 5)-(line 5905,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew6()",
        "snippet": "  public void testNew6() throws Exception {\n    TypeCheckResult p =\n      parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\" +\n      \"var a = new A();\");\n\n    JSType aType = p.scope.getVar(\"a\").getType();\n    assertTrue(aType instanceof ObjectType);\n    ObjectType aObjectType = (ObjectType) aType;\n    assertEquals(\"A\", aObjectType.getConstructor().getReferenceName());\n  }\n",
        "begin_line": 5908,
        "end_line": 5917,
        "comment": "",
        "child_ranges": [
            "(line 5909,col 5)-(line 5911,col 26)",
            "(line 5913,col 5)-(line 5913,col 49)",
            "(line 5914,col 5)-(line 5914,col 44)",
            "(line 5915,col 5)-(line 5915,col 48)",
            "(line 5916,col 5)-(line 5916,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew7()",
        "snippet": "  public void testNew7() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"if (opt_constructor) { new opt_constructor; }\" +\n        \"}\");\n  }\n",
        "begin_line": 5919,
        "end_line": 5924,
        "comment": "",
        "child_ranges": [
            "(line 5920,col 5)-(line 5923,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew8()",
        "snippet": "  public void testNew8() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new opt_constructor;\" +\n        \"}\");\n  }\n",
        "begin_line": 5926,
        "end_line": 5931,
        "comment": "",
        "child_ranges": [
            "(line 5927,col 5)-(line 5930,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew9()",
        "snippet": "  public void testNew9() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 5933,
        "end_line": 5938,
        "comment": "",
        "child_ranges": [
            "(line 5934,col 5)-(line 5937,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew10()",
        "snippet": "  public void testNew10() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @param {Function} opt_constructor */\" +\n        \"goog.Foo = function (opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 5940,
        "end_line": 5946,
        "comment": "",
        "child_ranges": [
            "(line 5941,col 5)-(line 5945,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew11()",
        "snippet": "  public void testNew11() throws Exception {\n    testTypes(\"/** @param {Function} c1 */\" +\n        \"function f(c1) {\" +\n        \"  var c2 = function(){};\" +\n        \"  c1.prototype = new c2;\" +\n        \"}\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 5948,
        "end_line": 5954,
        "comment": "",
        "child_ranges": [
            "(line 5949,col 5)-(line 5953,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew12()",
        "snippet": "  public void testNew12() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = new Array();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertEquals(ARRAY_TYPE, a.getType());\n  }\n",
        "begin_line": 5956,
        "end_line": 5961,
        "comment": "",
        "child_ranges": [
            "(line 5957,col 5)-(line 5957,col 75)",
            "(line 5958,col 5)-(line 5958,col 32)",
            "(line 5960,col 5)-(line 5960,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew13()",
        "snippet": "  public void testNew13() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */function FooBar(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 5963,
        "end_line": 5971,
        "comment": "",
        "child_ranges": [
            "(line 5964,col 5)-(line 5966,col 33)",
            "(line 5967,col 5)-(line 5967,col 32)",
            "(line 5969,col 5)-(line 5969,col 50)",
            "(line 5970,col 5)-(line 5970,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew14()",
        "snippet": "  public void testNew14() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */var FooBar = function(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 5973,
        "end_line": 5981,
        "comment": "",
        "child_ranges": [
            "(line 5974,col 5)-(line 5976,col 33)",
            "(line 5977,col 5)-(line 5977,col 32)",
            "(line 5979,col 5)-(line 5979,col 50)",
            "(line 5980,col 5)-(line 5980,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew15()",
        "snippet": "  public void testNew15() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"var a = new goog.A();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"goog.A\", a.getType().toString());\n  }\n",
        "begin_line": 5983,
        "end_line": 5992,
        "comment": "",
        "child_ranges": [
            "(line 5984,col 5)-(line 5987,col 33)",
            "(line 5988,col 5)-(line 5988,col 32)",
            "(line 5990,col 5)-(line 5990,col 50)",
            "(line 5991,col 5)-(line 5991,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew16()",
        "snippet": "  public void testNew16() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @constructor \\n\" +\n        \" */\" +\n        \"function Foo(x) {}\" +\n        \"function g() { new Foo(1); }\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5994,
        "end_line": 6005,
        "comment": "",
        "child_ranges": [
            "(line 5995,col 5)-(line 6004,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew17()",
        "snippet": "  public void testNew17() throws Exception {\n    testTypes(\"var goog = {}; goog.x = 3; new goog.x\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 6007,
        "end_line": 6010,
        "comment": "",
        "child_ranges": [
            "(line 6008,col 5)-(line 6009,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew18()",
        "snippet": "  public void testNew18() throws Exception {\n    testTypes(\"var goog = {};\" +\n              \"/** @constructor */ goog.F = function() {};\" +\n              \"/** @constructor */ goog.G = goog.F;\");\n  }\n",
        "begin_line": 6012,
        "end_line": 6016,
        "comment": "",
        "child_ranges": [
            "(line 6013,col 5)-(line 6015,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName1()",
        "snippet": "  public void testName1() throws Exception {\n    assertEquals(VOID_TYPE, testNameNode(\"undefined\"));\n  }\n",
        "begin_line": 6018,
        "end_line": 6020,
        "comment": "",
        "child_ranges": [
            "(line 6019,col 5)-(line 6019,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName2()",
        "snippet": "  public void testName2() throws Exception {\n    assertEquals(OBJECT_FUNCTION_TYPE, testNameNode(\"Object\"));\n  }\n",
        "begin_line": 6022,
        "end_line": 6024,
        "comment": "",
        "child_ranges": [
            "(line 6023,col 5)-(line 6023,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName3()",
        "snippet": "  public void testName3() throws Exception {\n    assertEquals(ARRAY_FUNCTION_TYPE, testNameNode(\"Array\"));\n  }\n",
        "begin_line": 6026,
        "end_line": 6028,
        "comment": "",
        "child_ranges": [
            "(line 6027,col 5)-(line 6027,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName4()",
        "snippet": "  public void testName4() throws Exception {\n    assertEquals(DATE_FUNCTION_TYPE, testNameNode(\"Date\"));\n  }\n",
        "begin_line": 6030,
        "end_line": 6032,
        "comment": "",
        "child_ranges": [
            "(line 6031,col 5)-(line 6031,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName5()",
        "snippet": "  public void testName5() throws Exception {\n    assertEquals(REGEXP_FUNCTION_TYPE, testNameNode(\"RegExp\"));\n  }\n",
        "begin_line": 6034,
        "end_line": 6036,
        "comment": "",
        "child_ranges": [
            "(line 6035,col 5)-(line 6035,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNameNode(java.lang.String)",
        "snippet": "  private JSType testNameNode(String name) {\n    Node node = Node.newString(Token.NAME, name);\n    Node parent = new Node(Token.SCRIPT, node);\n    parent.setInputId(new InputId(\"code\"));\n\n    Node externs = new Node(Token.SCRIPT);\n    externs.setInputId(new InputId(\"externs\"));\n\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, parent);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, parent);\n    return node.getJSType();\n  }\n",
        "begin_line": 6041,
        "end_line": 6054,
        "comment": "\n   * Type checks a NAME node and retrieve its type.\n   ",
        "child_ranges": [
            "(line 6042,col 5)-(line 6042,col 49)",
            "(line 6043,col 5)-(line 6043,col 47)",
            "(line 6044,col 5)-(line 6044,col 43)",
            "(line 6046,col 5)-(line 6046,col 42)",
            "(line 6047,col 5)-(line 6047,col 47)",
            "(line 6049,col 5)-(line 6049,col 66)",
            "(line 6050,col 5)-(line 6050,col 46)",
            "(line 6052,col 5)-(line 6052,col 52)",
            "(line 6053,col 5)-(line 6053,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation1()",
        "snippet": "  public void testBitOperation1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ ~foo(); }\",\n        \"operator ~ cannot be applied to undefined\");\n  }\n",
        "begin_line": 6056,
        "end_line": 6059,
        "comment": "",
        "child_ranges": [
            "(line 6057,col 5)-(line 6058,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation2()",
        "snippet": "  public void testBitOperation2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()<<3;}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 6061,
        "end_line": 6064,
        "comment": "",
        "child_ranges": [
            "(line 6062,col 5)-(line 6063,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation3()",
        "snippet": "  public void testBitOperation3() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3<<foo();}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 6066,
        "end_line": 6069,
        "comment": "",
        "child_ranges": [
            "(line 6067,col 5)-(line 6068,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation4()",
        "snippet": "  public void testBitOperation4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()>>>3;}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 6071,
        "end_line": 6074,
        "comment": "",
        "child_ranges": [
            "(line 6072,col 5)-(line 6073,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation5()",
        "snippet": "  public void testBitOperation5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3>>>foo();}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 6076,
        "end_line": 6079,
        "comment": "",
        "child_ranges": [
            "(line 6077,col 5)-(line 6078,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation6()",
        "snippet": "  public void testBitOperation6() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = foo()&3;}\",\n        \"bad left operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 6081,
        "end_line": 6086,
        "comment": "",
        "child_ranges": [
            "(line 6082,col 5)-(line 6085,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation7()",
        "snippet": "  public void testBitOperation7() throws Exception {\n    testTypes(\"var x = null; x |= undefined; x &= 3; x ^= '3'; x |= true;\");\n  }\n",
        "begin_line": 6088,
        "end_line": 6090,
        "comment": "",
        "child_ranges": [
            "(line 6089,col 5)-(line 6089,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation8()",
        "snippet": "  public void testBitOperation8() throws Exception {\n    testTypes(\"var x = void 0; x |= new Number(3);\");\n  }\n",
        "begin_line": 6092,
        "end_line": 6094,
        "comment": "",
        "child_ranges": [
            "(line 6093,col 5)-(line 6093,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation9()",
        "snippet": "  public void testBitOperation9() throws Exception {\n    testTypes(\"var x = void 0; x |= {};\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : {}\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 6096,
        "end_line": 6101,
        "comment": "",
        "child_ranges": [
            "(line 6097,col 5)-(line 6100,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall1()",
        "snippet": "  public void testCall1() throws Exception {\n    testTypes(\"3();\", \"number expressions are not callable\");\n  }\n",
        "begin_line": 6103,
        "end_line": 6105,
        "comment": "",
        "child_ranges": [
            "(line 6104,col 5)-(line 6104,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall2()",
        "snippet": "  public void testCall2() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 6107,
        "end_line": 6112,
        "comment": "",
        "child_ranges": [
            "(line 6108,col 5)-(line 6111,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall3()",
        "snippet": "  public void testCall3() throws Exception {\n    // We are checking that an unresolved named type can successfully\n    // meet with a functional type to produce a callable type.\n    testTypes(\"/** @type {Function|undefined} */var opt_f;\" +\n        \"/** @type {some.unknown.type} */var f1;\" +\n        \"var f2 = opt_f || f1;\" +\n        \"f2();\",\n        \"Bad type annotation. Unknown type some.unknown.type\");\n  }\n",
        "begin_line": 6114,
        "end_line": 6122,
        "comment": "",
        "child_ranges": [
            "(line 6117,col 5)-(line 6121,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall4()",
        "snippet": "  public void testCall4() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 6124,
        "end_line": 6129,
        "comment": "",
        "child_ranges": [
            "(line 6125,col 5)-(line 6128,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall5()",
        "snippet": "  public void testCall5() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ foo('abc'); }\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 6131,
        "end_line": 6136,
        "comment": "",
        "child_ranges": [
            "(line 6132,col 5)-(line 6135,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall6()",
        "snippet": "  public void testCall6() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){}\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 6138,
        "end_line": 6144,
        "comment": "",
        "child_ranges": [
            "(line 6139,col 5)-(line 6143,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall7()",
        "snippet": "  public void testCall7() throws Exception {\n    testTypes(\"/** @param {!RegExp} a*/var foo = function bar(a){};\" +\n        \"foo('abc');\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 6146,
        "end_line": 6152,
        "comment": "",
        "child_ranges": [
            "(line 6147,col 5)-(line 6151,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall8()",
        "snippet": "  public void testCall8() throws Exception {\n    testTypes(\"/** @type {Function|number} */var f;f();\",\n        \"(Function|number) expressions are \" +\n        \"not callable\");\n  }\n",
        "begin_line": 6154,
        "end_line": 6158,
        "comment": "",
        "child_ranges": [
            "(line 6155,col 5)-(line 6157,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall9()",
        "snippet": "  public void testCall9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @param {!goog.Foo} a */ var bar = function(a){};\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: goog.Foo\");\n  }\n",
        "begin_line": 6160,
        "end_line": 6169,
        "comment": "",
        "child_ranges": [
            "(line 6161,col 5)-(line 6168,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall10()",
        "snippet": "  public void testCall10() throws Exception {\n    testTypes(\"/** @type {Function} */var f;f();\");\n  }\n",
        "begin_line": 6171,
        "end_line": 6173,
        "comment": "",
        "child_ranges": [
            "(line 6172,col 5)-(line 6172,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall11()",
        "snippet": "  public void testCall11() throws Exception {\n    testTypes(\"var f = new Function(); f();\");\n  }\n",
        "begin_line": 6175,
        "end_line": 6177,
        "comment": "",
        "child_ranges": [
            "(line 6176,col 5)-(line 6176,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall1()",
        "snippet": "  public void testFunctionCall1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 3);\");\n  }\n",
        "begin_line": 6179,
        "end_line": 6183,
        "comment": "",
        "child_ranges": [
            "(line 6180,col 5)-(line 6182,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall2()",
        "snippet": "  public void testFunctionCall2() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 'bar');\",\n        \"actual parameter 2 of foo.call does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6185,
        "end_line": 6192,
        "comment": "",
        "child_ranges": [
            "(line 6186,col 5)-(line 6191,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall3()",
        "snippet": "  public void testFunctionCall3() throws Exception {\n    testTypes(\n        \"/** @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\");\n  }\n",
        "begin_line": 6194,
        "end_line": 6199,
        "comment": "",
        "child_ranges": [
            "(line 6195,col 5)-(line 6198,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall4()",
        "snippet": "  public void testFunctionCall4() throws Exception {\n    testTypes(\n        \"/** @param {string} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\",\n        \"actual parameter 2 of this.bar.call \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6201,
        "end_line": 6210,
        "comment": "",
        "child_ranges": [
            "(line 6202,col 5)-(line 6209,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall5()",
        "snippet": "  public void testFunctionCall5() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.call(this, x); };\");\n  }\n",
        "begin_line": 6212,
        "end_line": 6216,
        "comment": "",
        "child_ranges": [
            "(line 6213,col 5)-(line 6215,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall6()",
        "snippet": "  public void testFunctionCall6() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.apply(this, x); };\");\n  }\n",
        "begin_line": 6218,
        "end_line": 6222,
        "comment": "",
        "child_ranges": [
            "(line 6219,col 5)-(line 6221,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall7()",
        "snippet": "  public void testFunctionCall7() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.call(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 6224,
        "end_line": 6230,
        "comment": "",
        "child_ranges": [
            "(line 6225,col 5)-(line 6229,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall8()",
        "snippet": "  public void testFunctionCall8() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.apply(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 6232,
        "end_line": 6238,
        "comment": "",
        "child_ranges": [
            "(line 6233,col 5)-(line 6237,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind1()",
        "snippet": "  public void testFunctionBind1() throws Exception {\n    testTypes(\n        \"/** @type {function(string, number): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f.bind(null, 3);\",\n        \"actual parameter 2 of f.bind does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6240,
        "end_line": 6248,
        "comment": "",
        "child_ranges": [
            "(line 6241,col 5)-(line 6247,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind2()",
        "snippet": "  public void testFunctionBind2() throws Exception {\n    testTypes(\n        \"/** @type {function(number): boolean} */\" +\n        \"function f(x) { return true; }\" +\n        \"f(f.bind(null, 3)());\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6250,
        "end_line": 6258,
        "comment": "",
        "child_ranges": [
            "(line 6251,col 5)-(line 6257,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind3()",
        "snippet": "  public void testFunctionBind3() throws Exception {\n    testTypes(\n        \"/** @type {function(number, string): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f.bind(null, 3)(true);\",\n        \"actual parameter 1 of function does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6260,
        "end_line": 6268,
        "comment": "",
        "child_ranges": [
            "(line 6261,col 5)-(line 6267,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind4()",
        "snippet": "  public void testFunctionBind4() throws Exception {\n    testTypes(\n        \"/** @param {...number} x */\" +\n        \"function f(x) {}\" +\n        \"f.bind(null, 3, 3, 3)(true);\",\n        \"actual parameter 1 of function does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 6270,
        "end_line": 6278,
        "comment": "",
        "child_ranges": [
            "(line 6271,col 5)-(line 6277,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind5()",
        "snippet": "  public void testFunctionBind5() throws Exception {\n    testTypes(\n        \"/** @param {...number} x */\" +\n        \"function f(x) {}\" +\n        \"f.bind(null, true)(3, 3, 3);\",\n        \"actual parameter 2 of f.bind does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 6280,
        "end_line": 6288,
        "comment": "",
        "child_ranges": [
            "(line 6281,col 5)-(line 6287,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoogBind1()",
        "snippet": "  public void testGoogBind1() throws Exception {\n    // We currently do not support goog.bind natively.\n    testClosureTypes(\n        \"var goog = {}; goog.bind = function(var_args) {};\" +\n        \"/** @type {function(number): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f(goog.bind(f, null, 'x')());\",\n        null);\n  }\n",
        "begin_line": 6290,
        "end_line": 6298,
        "comment": "",
        "child_ranges": [
            "(line 6292,col 5)-(line 6297,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast2()",
        "snippet": "  public void testCast2() throws Exception {\n    // can upcast to a base type.\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n @extends {base} */function derived() {}\\n\" +\n        \"/** @type {base} */ var baz = new derived();\\n\");\n  }\n",
        "begin_line": 6300,
        "end_line": 6305,
        "comment": "",
        "child_ranges": [
            "(line 6302,col 5)-(line 6304,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast3()",
        "snippet": "  public void testCast3() throws Exception {\n    // cannot downcast\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = new base();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : base\\n\" +\n        \"required: derived\");\n  }\n",
        "begin_line": 6307,
        "end_line": 6315,
        "comment": "",
        "child_ranges": [
            "(line 6309,col 5)-(line 6314,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast4()",
        "snippet": "  public void testCast4() throws Exception {\n    // downcast must be explicit\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = \" +\n        \"/** @type {!derived} */(new base());\\n\");\n  }\n",
        "begin_line": 6317,
        "end_line": 6323,
        "comment": "",
        "child_ranges": [
            "(line 6319,col 5)-(line 6322,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast5()",
        "snippet": "  public void testCast5() throws Exception {\n    // cannot explicitly cast to an unrelated type\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor */function bar() {}\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: bar\\n\" +\n        \"to  : foo\");\n  }\n",
        "begin_line": 6325,
        "end_line": 6333,
        "comment": "",
        "child_ranges": [
            "(line 6327,col 5)-(line 6332,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast6()",
        "snippet": "  public void testCast6() throws Exception {\n    // can explicitly cast to a subtype or supertype\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor \\n @extends foo */function bar() {}\\n\" +\n        \"var baz = /** @type {!bar} */(new bar);\\n\" +\n        \"var baz = /** @type {!foo} */(new foo);\\n\" +\n        \"var baz = /** @type {bar} */(new bar);\\n\" +\n        \"var baz = /** @type {foo} */(new foo);\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\" +\n        \"var baz = /** @type {!bar} */(new foo);\\n\" +\n        \"var baz = /** @type {foo} */(new bar);\\n\" +\n        \"var baz = /** @type {bar} */(new foo);\\n\");\n  }\n",
        "begin_line": 6335,
        "end_line": 6347,
        "comment": "",
        "child_ranges": [
            "(line 6337,col 5)-(line 6346,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast7()",
        "snippet": "  public void testCast7() throws Exception {\n    testTypes(\"var x = /** @type {foo} */ (new Object());\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 6349,
        "end_line": 6352,
        "comment": "",
        "child_ranges": [
            "(line 6350,col 5)-(line 6351,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast8()",
        "snippet": "  public void testCast8() throws Exception {\n    testTypes(\"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 6354,
        "end_line": 6357,
        "comment": "",
        "child_ranges": [
            "(line 6355,col 5)-(line 6356,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast9()",
        "snippet": "  public void testCast9() throws Exception {\n    testTypes(\"var foo = {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 6359,
        "end_line": 6363,
        "comment": "",
        "child_ranges": [
            "(line 6360,col 5)-(line 6362,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast10()",
        "snippet": "  public void testCast10() throws Exception {\n    testTypes(\"var foo = function() {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 6365,
        "end_line": 6369,
        "comment": "",
        "child_ranges": [
            "(line 6366,col 5)-(line 6368,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast11()",
        "snippet": "  public void testCast11() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 6371,
        "end_line": 6375,
        "comment": "",
        "child_ranges": [
            "(line 6372,col 5)-(line 6374,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast12()",
        "snippet": "  public void testCast12() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 6377,
        "end_line": 6381,
        "comment": "",
        "child_ranges": [
            "(line 6378,col 5)-(line 6380,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast13()",
        "snippet": "  public void testCast13() throws Exception {\n    // Test to make sure that the forward-declaration still allows for\n    // a warning.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.foo'], []);\" +\n        \"goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 6383,
        "end_line": 6391,
        "comment": "",
        "child_ranges": [
            "(line 6386,col 5)-(line 6390,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast14()",
        "snippet": "  public void testCast14() throws Exception {\n    // Test to make sure that the forward-declaration still prevents\n    // some warnings.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.bar'], []);\" +\n        \"function f() { return /** @type {goog.bar} */ (new Object()); }\",\n        null);\n  }\n",
        "begin_line": 6393,
        "end_line": 6400,
        "comment": "",
        "child_ranges": [
            "(line 6396,col 5)-(line 6399,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast15()",
        "snippet": "  public void testCast15() throws Exception {\n    // This fixes a bug where a type cast on an object literal\n    // would cause a runtime cast exception if the node was visited\n    // more than once.\n    //\n    // Some code assumes that an object literal must have a object type,\n    // while because of the cast, it could have any type (including\n    // a union).\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n          \"/** @param {number} x */ function f(x) {}\" +\n          \"f(x.foo);\" +\n          \"f([].foo);\" +\n        \"}\",\n        \"Property foo never defined on Array\");\n  }\n",
        "begin_line": 6402,
        "end_line": 6418,
        "comment": "",
        "child_ranges": [
            "(line 6410,col 5)-(line 6417,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast16()",
        "snippet": "  public void testCast16() throws Exception {\n    // A type cast should not invalidate the checks on the members\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ (\" +\n          \"  {/** @type {string} */ foo: 3});\" +\n        \"}\",\n        \"assignment to property foo of Object\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6420,
        "end_line": 6430,
        "comment": "",
        "child_ranges": [
            "(line 6422,col 5)-(line 6429,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast17()",
        "snippet": "  public void testCast17() throws Exception {\n    // Mostly verifying that rhino actually understands these JsDocs.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ ({})\");\n\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = (/** @type {Foo} */ {})\");\n\n    // Not really encourage because of possible ambiguity but it works.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ {}\");\n  }\n",
        "begin_line": 6432,
        "end_line": 6443,
        "comment": "",
        "child_ranges": [
            "(line 6434,col 5)-(line 6435,col 62)",
            "(line 6437,col 5)-(line 6438,col 62)",
            "(line 6441,col 5)-(line 6442,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNestedCasts()",
        "snippet": "  public void testNestedCasts() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/** @constructor */var V = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {T|V}\\n\" +\n        \"*/\\n\" +\n        \"function f(b) { return b ? new T() : new V(); }\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {boolean|undefined}\\n\" +\n        \"*/\\n\" +\n        \"function g(b) { return b ? true : undefined; }\\n\" +\n        \"/** @return {T} */\\n\" +\n        \"function h() {\\n\" +\n        \"return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 6445,
        "end_line": 6462,
        "comment": "",
        "child_ranges": [
            "(line 6446,col 5)-(line 6461,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast1()",
        "snippet": "  public void testNativeCast1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(String(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6464,
        "end_line": 6471,
        "comment": "",
        "child_ranges": [
            "(line 6465,col 5)-(line 6470,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast2()",
        "snippet": "  public void testNativeCast2() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f(Number(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6473,
        "end_line": 6480,
        "comment": "",
        "child_ranges": [
            "(line 6474,col 5)-(line 6479,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast3()",
        "snippet": "  public void testNativeCast3() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Boolean(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6482,
        "end_line": 6489,
        "comment": "",
        "child_ranges": [
            "(line 6483,col 5)-(line 6488,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast4()",
        "snippet": "  public void testNativeCast4() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Error(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6491,
        "end_line": 6498,
        "comment": "",
        "child_ranges": [
            "(line 6492,col 5)-(line 6497,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadConstructorCall()",
        "snippet": "  public void testBadConstructorCall() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo();\",\n        \"Constructor function (new:Foo): undefined should be called \" +\n        \"with the \\\"new\\\" keyword\");\n  }\n",
        "begin_line": 6500,
        "end_line": 6506,
        "comment": "",
        "child_ranges": [
            "(line 6501,col 5)-(line 6505,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeof()",
        "snippet": "  public void testTypeof() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = typeof foo(); }\");\n  }\n",
        "begin_line": 6508,
        "end_line": 6510,
        "comment": "",
        "child_ranges": [
            "(line 6509,col 5)-(line 6509,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType1()",
        "snippet": "  public void testConstructorType1() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\" +\n        \"/**@type{!Foo}*/var f = new Date();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: Foo\");\n  }\n",
        "begin_line": 6512,
        "end_line": 6518,
        "comment": "",
        "child_ranges": [
            "(line 6513,col 5)-(line 6517,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType2()",
        "snippet": "  public void testConstructorType2() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\");\n  }\n",
        "begin_line": 6520,
        "end_line": 6526,
        "comment": "",
        "child_ranges": [
            "(line 6521,col 5)-(line 6525,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType3()",
        "snippet": "  public void testConstructorType3() throws Exception {\n    // Reverse the declaration order so that we know that Foo is getting set\n    // even on an out-of-order declaration sequence.\n    testTypes(\"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\" +\n        \"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 6528,
        "end_line": 6536,
        "comment": "",
        "child_ranges": [
            "(line 6531,col 5)-(line 6535,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType4()",
        "snippet": "  public void testConstructorType4() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{!Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{!Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{!String}*/var n = f.bar;\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 6538,
        "end_line": 6547,
        "comment": "",
        "child_ranges": [
            "(line 6539,col 5)-(line 6546,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType5()",
        "snippet": "  public void testConstructorType5() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\\n\" +\n        \"if (Foo){}\\n\");\n  }\n",
        "begin_line": 6549,
        "end_line": 6552,
        "comment": "",
        "child_ranges": [
            "(line 6550,col 5)-(line 6551,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType6()",
        "snippet": "  public void testConstructorType6() throws Exception {\n    testTypes(\"/** @constructor */\\n\" +\n        \"function bar() {}\\n\" +\n        \"function _foo() {\\n\" +\n        \" /** @param {bar} x */\\n\" +\n        \"  function f(x) {}\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 6554,
        "end_line": 6561,
        "comment": "",
        "child_ranges": [
            "(line 6555,col 5)-(line 6560,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType7()",
        "snippet": "  public void testConstructorType7() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\");\n\n    JSType type = p.scope.getVar(\"A\").getType();\n    assertTrue(type instanceof FunctionType);\n    FunctionType fType = (FunctionType) type;\n    assertEquals(\"A\", fType.getReferenceName());\n  }\n",
        "begin_line": 6563,
        "end_line": 6571,
        "comment": "",
        "child_ranges": [
            "(line 6564,col 5)-(line 6565,col 73)",
            "(line 6567,col 5)-(line 6567,col 48)",
            "(line 6568,col 5)-(line 6568,col 45)",
            "(line 6569,col 5)-(line 6569,col 45)",
            "(line 6570,col 5)-(line 6570,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType8()",
        "snippet": "  public void testConstructorType8() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"ns.create = function() { return function() {}; };\" +\n        \"/** @constructor */ ns.Foo = ns.create();\" +\n        \"ns.Foo.prototype = {x: 0, y: 0};\" +\n        \"/**\\n\" +\n        \" * @param {ns.Foo} foo\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function f(foo) {\" +\n        \"  return foo.x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6573,
        "end_line": 6589,
        "comment": "",
        "child_ranges": [
            "(line 6574,col 5)-(line 6588,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType9()",
        "snippet": "  public void testConstructorType9() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"ns.create = function() { return function() {}; };\" +\n        \"ns.extend = function(x) { return x; };\" +\n        \"/** @constructor */ ns.Foo = ns.create();\" +\n        \"ns.Foo.prototype = ns.extend({x: 0, y: 0});\" +\n        \"/**\\n\" +\n        \" * @param {ns.Foo} foo\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function f(foo) {\" +\n        \"  return foo.x;\" +\n        \"}\");\n  }\n",
        "begin_line": 6591,
        "end_line": 6605,
        "comment": "",
        "child_ranges": [
            "(line 6592,col 5)-(line 6604,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousPrototype1()",
        "snippet": "  public void testAnonymousPrototype1() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"/** @constructor */ ns.Foo = function() {\" +\n        \"  this.bar(3, 5);\" +\n        \"};\" +\n        \"ns.Foo.prototype = {\" +\n        \"  bar: function(x) {}\" +\n        \"};\",\n        \"Function ns.Foo.prototype.bar: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) and no more \" +\n        \"than 1 argument(s).\");\n  }\n",
        "begin_line": 6607,
        "end_line": 6619,
        "comment": "",
        "child_ranges": [
            "(line 6608,col 5)-(line 6618,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousPrototype2()",
        "snippet": "  public void testAnonymousPrototype2() throws Exception {\n    testTypes(\n        \"/** @interface */ var Foo = function() {};\" +\n        \"Foo.prototype = {\" +\n        \"  foo: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @implements {Foo}\\n\" +\n        \" */ var Bar = function() {};\",\n        \"property foo on interface Foo is not implemented by type Bar\");\n  }\n",
        "begin_line": 6621,
        "end_line": 6632,
        "comment": "",
        "child_ranges": [
            "(line 6622,col 5)-(line 6631,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType1()",
        "snippet": "  public void testAnonymousType1() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @constructor */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 6634,
        "end_line": 6638,
        "comment": "",
        "child_ranges": [
            "(line 6635,col 5)-(line 6637,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType2()",
        "snippet": "  public void testAnonymousType2() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @interface */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 6640,
        "end_line": 6644,
        "comment": "",
        "child_ranges": [
            "(line 6641,col 5)-(line 6643,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType3()",
        "snippet": "  public void testAnonymousType3() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @enum */\\n\" +\n        \"f().bar = {FOO: 1};\");\n  }\n",
        "begin_line": 6646,
        "end_line": 6650,
        "comment": "",
        "child_ranges": [
            "(line 6647,col 5)-(line 6649,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang1()",
        "snippet": "  public void testBang1() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (Object|null)\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 6652,
        "end_line": 6658,
        "comment": "",
        "child_ranges": [
            "(line 6653,col 5)-(line 6657,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang2()",
        "snippet": "  public void testBang2() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x ? x : new Object(); }\");\n  }\n",
        "begin_line": 6660,
        "end_line": 6663,
        "comment": "",
        "child_ranges": [
            "(line 6661,col 5)-(line 6662,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang3()",
        "snippet": "  public void testBang3() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return /** @type {!Object} */ (x); }\");\n  }\n",
        "begin_line": 6665,
        "end_line": 6668,
        "comment": "",
        "child_ranges": [
            "(line 6666,col 5)-(line 6667,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang4()",
        "snippet": "  public void testBang4() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) {\\n\" +\n        \"if (typeof x != 'undefined') { return x == y; }\\n\" +\n        \"else { return x != y; }\\n}\");\n  }\n",
        "begin_line": 6670,
        "end_line": 6675,
        "comment": "",
        "child_ranges": [
            "(line 6671,col 5)-(line 6674,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang5()",
        "snippet": "  public void testBang5() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) { return !!x && x == y; }\");\n  }\n",
        "begin_line": 6677,
        "end_line": 6680,
        "comment": "",
        "child_ranges": [
            "(line 6678,col 5)-(line 6679,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang6()",
        "snippet": "  public void testBang6() throws Exception {\n    testTypes(\"/** @param {Object?} x\\n@return {Object} */\\n\" +\n        \"function f(x) { return x; }\");\n  }\n",
        "begin_line": 6682,
        "end_line": 6685,
        "comment": "",
        "child_ranges": [
            "(line 6683,col 5)-(line 6684,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang7()",
        "snippet": "  public void testBang7() throws Exception {\n    testTypes(\"/**@param {(Object,string,null)} x\\n\" +\n        \"@return {(Object,string)}*/function f(x) { return x; }\");\n  }\n",
        "begin_line": 6687,
        "end_line": 6690,
        "comment": "",
        "child_ranges": [
            "(line 6688,col 5)-(line 6689,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject1()",
        "snippet": "  public void testDefinePropertyOnNullableObject1() throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @type {number} */ n.x = 1;\\n\" +\n        \"/** @return {boolean} */function f() { return n.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6692,
        "end_line": 6699,
        "comment": "",
        "child_ranges": [
            "(line 6693,col 5)-(line 6698,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject2()",
        "snippet": "  public void testDefinePropertyOnNullableObject2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T} t\\n@return {boolean} */function f(t) {\\n\" +\n        \"t.x = 1; return t.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6701,
        "end_line": 6708,
        "comment": "",
        "child_ranges": [
            "(line 6702,col 5)-(line 6707,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType1()",
        "snippet": "  public void testUnknownConstructorInstanceType1() throws Exception {\n    testTypes(\"/** @return {Array} */ function g(f) { return new f(); }\");\n  }\n",
        "begin_line": 6710,
        "end_line": 6712,
        "comment": "",
        "child_ranges": [
            "(line 6711,col 5)-(line 6711,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType2()",
        "snippet": "  public void testUnknownConstructorInstanceType2() throws Exception {\n    testTypes(\"function g(f) { return /** @type Array */ new f(); }\");\n  }\n",
        "begin_line": 6714,
        "end_line": 6716,
        "comment": "",
        "child_ranges": [
            "(line 6715,col 5)-(line 6715,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType3()",
        "snippet": "  public void testUnknownConstructorInstanceType3() throws Exception {\n    testTypes(\"function g(f) { var x = new f(); x.a = 1; return x; }\");\n  }\n",
        "begin_line": 6718,
        "end_line": 6720,
        "comment": "",
        "child_ranges": [
            "(line 6719,col 5)-(line 6719,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownPrototypeChain()",
        "snippet": "  public void testUnknownPrototypeChain() throws Exception {\n    testTypes(\"/**\\n\" +\n              \"* @param {Object} co\\n\" +\n              \" * @return {Object}\\n\" +\n              \" */\\n\" +\n              \"function inst(co) {\\n\" +\n              \" /** @constructor */\\n\" +\n              \" var c = function() {};\\n\" +\n              \" c.prototype = co.prototype;\\n\" +\n              \" return new c;\\n\" +\n              \"}\");\n  }\n",
        "begin_line": 6722,
        "end_line": 6733,
        "comment": "",
        "child_ranges": [
            "(line 6723,col 5)-(line 6732,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNamespacedConstructor()",
        "snippet": "  public void testNamespacedConstructor() throws Exception {\n    Node root = parseAndTypeCheck(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.MyClass = function() {};\" +\n        \"/** @return {!goog.MyClass} */ \" +\n        \"function foo() { return new goog.MyClass(); }\");\n\n    JSType typeOfFoo = root.getLastChild().getJSType();\n    assert(typeOfFoo instanceof FunctionType);\n\n    JSType retType = ((FunctionType) typeOfFoo).getReturnType();\n    assert(retType instanceof ObjectType);\n    assertEquals(\"goog.MyClass\", ((ObjectType) retType).getReferenceName());\n  }\n",
        "begin_line": 6735,
        "end_line": 6748,
        "comment": "",
        "child_ranges": [
            "(line 6736,col 5)-(line 6740,col 57)",
            "(line 6742,col 5)-(line 6742,col 55)",
            "(line 6743,col 5)-(line 6743,col 46)",
            "(line 6745,col 5)-(line 6745,col 64)",
            "(line 6746,col 5)-(line 6746,col 42)",
            "(line 6747,col 5)-(line 6747,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComplexNamespace()",
        "snippet": "  public void testComplexNamespace() throws Exception {\n    String js =\n      \"var goog = {};\" +\n      \"goog.foo = {};\" +\n      \"goog.foo.bar = 5;\";\n\n    TypeCheckResult p = parseAndTypeCheckWithScope(js);\n\n    // goog type in the scope\n    JSType googScopeType = p.scope.getVar(\"goog\").getType();\n    assertTrue(googScopeType instanceof ObjectType);\n    assertTrue(\"foo property not present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"foo\"));\n    assertFalse(\"bar property present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"bar\"));\n\n    // goog type on the VAR node\n    Node varNode = p.root.getFirstChild();\n    assertEquals(Token.VAR, varNode.getType());\n    JSType googNodeType = varNode.getFirstChild().getJSType();\n    assertTrue(googNodeType instanceof ObjectType);\n\n    // goog scope type and goog type on VAR node must be the same\n    assertTrue(googScopeType == googNodeType);\n\n    // goog type on the left of the GETPROP node (under fist ASSIGN)\n    Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo1.getType());\n    assertEquals(\"goog\", getpropFoo1.getFirstChild().getString());\n    JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo1Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo1Type == googScopeType);\n\n    // the foo property should be defined on goog\n    JSType googFooType = ((ObjectType) googScopeType).getPropertyType(\"foo\");\n    assertTrue(googFooType instanceof ObjectType);\n\n    // goog type on the left of the GETPROP lower level node\n    // (under second ASSIGN)\n    Node getpropFoo2 = varNode.getNext().getNext()\n        .getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo2.getType());\n    assertEquals(\"goog\", getpropFoo2.getFirstChild().getString());\n    JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo2Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo2Type == googScopeType);\n\n    // goog.foo type on the left of the top level GETPROP node\n    // (under second ASSIGN)\n    JSType googFooGetprop2Type = getpropFoo2.getJSType();\n    assertTrue(\"goog.foo incorrectly annotated in goog.foo.bar selection\",\n        googFooGetprop2Type instanceof ObjectType);\n    ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type;\n    assertFalse(\"foo property present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"foo\"));\n    assertTrue(\"bar property not present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"bar\"));\n    assertEquals(\"bar property on goog.foo type incorrectly inferred\",\n        NUMBER_TYPE, googFooGetprop2ObjectType.getPropertyType(\"bar\"));\n  }\n",
        "begin_line": 6750,
        "end_line": 6813,
        "comment": "",
        "child_ranges": [
            "(line 6751,col 5)-(line 6754,col 26)",
            "(line 6756,col 5)-(line 6756,col 55)",
            "(line 6759,col 5)-(line 6759,col 60)",
            "(line 6760,col 5)-(line 6760,col 52)",
            "(line 6761,col 5)-(line 6762,col 57)",
            "(line 6763,col 5)-(line 6764,col 57)",
            "(line 6767,col 5)-(line 6767,col 42)",
            "(line 6768,col 5)-(line 6768,col 47)",
            "(line 6769,col 5)-(line 6769,col 62)",
            "(line 6770,col 5)-(line 6770,col 51)",
            "(line 6773,col 5)-(line 6773,col 46)",
            "(line 6776,col 5)-(line 6776,col 73)",
            "(line 6777,col 5)-(line 6777,col 55)",
            "(line 6778,col 5)-(line 6778,col 66)",
            "(line 6779,col 5)-(line 6779,col 73)",
            "(line 6780,col 5)-(line 6780,col 58)",
            "(line 6783,col 5)-(line 6783,col 53)",
            "(line 6786,col 5)-(line 6786,col 77)",
            "(line 6787,col 5)-(line 6787,col 50)",
            "(line 6791,col 5)-(line 6792,col 57)",
            "(line 6793,col 5)-(line 6793,col 55)",
            "(line 6794,col 5)-(line 6794,col 66)",
            "(line 6795,col 5)-(line 6795,col 73)",
            "(line 6796,col 5)-(line 6796,col 58)",
            "(line 6799,col 5)-(line 6799,col 53)",
            "(line 6803,col 5)-(line 6803,col 57)",
            "(line 6804,col 5)-(line 6805,col 51)",
            "(line 6806,col 5)-(line 6806,col 76)",
            "(line 6807,col 5)-(line 6808,col 54)",
            "(line 6809,col 5)-(line 6810,col 54)",
            "(line 6811,col 5)-(line 6812,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomSimpleNamespace()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype.m1 = 5\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 6815,
        "end_line": 6825,
        "comment": "",
        "child_ranges": [
            "(line 6817,col 5)-(line 6819,col 30)",
            "(line 6821,col 5)-(line 6821,col 55)",
            "(line 6822,col 5)-(line 6823,col 43)",
            "(line 6824,col 5)-(line 6824,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace1()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"goog.A = /** @constructor */function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 6827,
        "end_line": 6835,
        "comment": "",
        "child_ranges": [
            "(line 6829,col 5)-(line 6832,col 54)",
            "(line 6834,col 5)-(line 6834,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace2()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 6837,
        "end_line": 6845,
        "comment": "",
        "child_ranges": [
            "(line 6839,col 5)-(line 6842,col 54)",
            "(line 6844,col 5)-(line 6844,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace(com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult)",
        "snippet": "  private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(\n      TypeCheckResult p) {\n    ObjectType goog = (ObjectType) p.scope.getVar(\"goog\").getType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, goog.getPropertiesCount());\n    JSType googA = goog.getPropertyType(\"A\");\n    assertNotNull(googA);\n    assertTrue(googA instanceof FunctionType);\n    FunctionType googAFunction = (FunctionType) googA;\n    ObjectType classA = googAFunction.getInstanceType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, classA.getPropertiesCount());\n    checkObjectType(classA, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 6847,
        "end_line": 6858,
        "comment": "",
        "child_ranges": [
            "(line 6849,col 5)-(line 6849,col 68)",
            "(line 6850,col 5)-(line 6850,col 73)",
            "(line 6851,col 5)-(line 6851,col 45)",
            "(line 6852,col 5)-(line 6852,col 25)",
            "(line 6853,col 5)-(line 6853,col 46)",
            "(line 6854,col 5)-(line 6854,col 54)",
            "(line 6855,col 5)-(line 6855,col 56)",
            "(line 6856,col 5)-(line 6856,col 75)",
            "(line 6857,col 5)-(line 6857,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()",
        "snippet": "  public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 2,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 6860,
        "end_line": 6871,
        "comment": "",
        "child_ranges": [
            "(line 6862,col 5)-(line 6864,col 43)",
            "(line 6866,col 5)-(line 6866,col 55)",
            "(line 6867,col 5)-(line 6868,col 43)",
            "(line 6869,col 5)-(line 6869,col 53)",
            "(line 6870,col 5)-(line 6870,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDontAddMethodsIfNoConstructor()",
        "snippet": "  public void testDontAddMethodsIfNoConstructor()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    JSType functionAType = js1Node.getFirstChild().getJSType();\n    assertEquals(\"function (): undefined\", functionAType.toString());\n    assertEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m1\"));\n    assertEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m2\"));\n  }\n",
        "begin_line": 6873,
        "end_line": 6885,
        "comment": "",
        "child_ranges": [
            "(line 6875,col 5)-(line 6877,col 43)",
            "(line 6879,col 5)-(line 6879,col 63)",
            "(line 6880,col 5)-(line 6880,col 69)",
            "(line 6881,col 5)-(line 6882,col 49)",
            "(line 6883,col 5)-(line 6884,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionAssignement()",
        "snippet": "  public void testFunctionAssignement() throws Exception {\n    testTypes(\"/**\" +\n        \"* @param {string} ph0\" +\n        \"* @param {string} ph1\" +\n        \"* @return {string}\" +\n        \"*/\" +\n        \"function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return ''}\" +\n        \"/** @type {Function} */\" +\n        \"var MSG_CALENDAR_ADD_ERROR = MSG_CALENDAR_ACCESS_ERROR;\");\n  }\n",
        "begin_line": 6887,
        "end_line": 6896,
        "comment": "",
        "child_ranges": [
            "(line 6888,col 5)-(line 6895,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddMethodsPrototypeTwoWays()",
        "snippet": "  public void testAddMethodsPrototypeTwoWays() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true};\" +\n        \"A.prototype.m3 = 'third property!';\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(\"A\", instanceType.toString());\n    assertEquals(NATIVE_PROPERTIES_COUNT + 3,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m3\", STRING_TYPE);\n  }\n",
        "begin_line": 6898,
        "end_line": 6911,
        "comment": "",
        "child_ranges": [
            "(line 6899,col 5)-(line 6902,col 47)",
            "(line 6904,col 5)-(line 6904,col 55)",
            "(line 6905,col 5)-(line 6905,col 47)",
            "(line 6906,col 5)-(line 6907,col 43)",
            "(line 6908,col 5)-(line 6908,col 53)",
            "(line 6909,col 5)-(line 6909,col 54)",
            "(line 6910,col 5)-(line 6910,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypePropertyTypes()",
        "snippet": "  public void testPrototypePropertyTypes() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {\\n\" +\n        \"  /** @type string */ this.m1;\\n\" +\n        \"  /** @type Object? */ this.m2 = {};\\n\" +\n        \"  /** @type boolean */ this.m3;\\n\" +\n        \"}\\n\" +\n        \"/** @type string */ A.prototype.m4;\\n\" +\n        \"/** @type number */ A.prototype.m5 = 0;\\n\" +\n        \"/** @type boolean */ A.prototype.m6;\\n\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 6,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", STRING_TYPE);\n    checkObjectType(instanceType, \"m2\",\n        createUnionType(OBJECT_TYPE, NULL_TYPE));\n    checkObjectType(instanceType, \"m3\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m4\", STRING_TYPE);\n    checkObjectType(instanceType, \"m5\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m6\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 6913,
        "end_line": 6934,
        "comment": "",
        "child_ranges": [
            "(line 6914,col 5)-(line 6922,col 50)",
            "(line 6924,col 5)-(line 6924,col 55)",
            "(line 6925,col 5)-(line 6926,col 43)",
            "(line 6927,col 5)-(line 6927,col 53)",
            "(line 6928,col 5)-(line 6929,col 49)",
            "(line 6930,col 5)-(line 6930,col 54)",
            "(line 6931,col 5)-(line 6931,col 53)",
            "(line 6932,col 5)-(line 6932,col 53)",
            "(line 6933,col 5)-(line 6933,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueTypeBuiltInPrototypePropertyType()",
        "snippet": "  public void testValueTypeBuiltInPrototypePropertyType() throws Exception {\n    Node node = parseAndTypeCheck(\"\\\"x\\\".charAt(0)\");\n    assertEquals(STRING_TYPE, node.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6936,
        "end_line": 6939,
        "comment": "",
        "child_ranges": [
            "(line 6937,col 5)-(line 6937,col 53)",
            "(line 6938,col 5)-(line 6938,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeclareBuiltInConstructor()",
        "snippet": "  public void testDeclareBuiltInConstructor() throws Exception {\n    // Built-in prototype properties should be accessible\n    // even if the built-in constructor is declared.\n    Node node = parseAndTypeCheck(\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"(new String(\\\"x\\\")).charAt(0)\");\n    assertEquals(STRING_TYPE, node.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6941,
        "end_line": 6948,
        "comment": "",
        "child_ranges": [
            "(line 6944,col 5)-(line 6946,col 41)",
            "(line 6947,col 5)-(line 6947,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendBuiltInType1()",
        "snippet": "  public void testExtendBuiltInType1() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n1 = parseAndTypeCheck(externs + \"(new String(\\\"x\\\")).substr(0,1);\");\n    assertEquals(STRING_TYPE, n1.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6950,
        "end_line": 6961,
        "comment": "",
        "child_ranges": [
            "(line 6951,col 5)-(line 6958,col 70)",
            "(line 6959,col 5)-(line 6959,col 78)",
            "(line 6960,col 5)-(line 6960,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendBuiltInType2()",
        "snippet": "  public void testExtendBuiltInType2() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n2 = parseAndTypeCheck(externs + \"\\\"x\\\".substr(0,1);\");\n    assertEquals(STRING_TYPE, n2.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6963,
        "end_line": 6974,
        "comment": "",
        "child_ranges": [
            "(line 6964,col 5)-(line 6971,col 70)",
            "(line 6972,col 5)-(line 6972,col 64)",
            "(line 6973,col 5)-(line 6973,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendFunction1()",
        "snippet": "  public void testExtendFunction1() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(new Function()).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 6976,
        "end_line": 6982,
        "comment": "",
        "child_ranges": [
            "(line 6977,col 5)-(line 6979,col 33)",
            "(line 6980,col 5)-(line 6980,col 62)",
            "(line 6981,col 5)-(line 6981,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendFunction2()",
        "snippet": "  public void testExtendFunction2() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(function() {}).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 6984,
        "end_line": 6990,
        "comment": "",
        "child_ranges": [
            "(line 6985,col 5)-(line 6987,col 32)",
            "(line 6988,col 5)-(line 6988,col 62)",
            "(line 6989,col 5)-(line 6989,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck1()",
        "snippet": "  public void testInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 6992,
        "end_line": 6997,
        "comment": "",
        "child_ranges": [
            "(line 6993,col 5)-(line 6996,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck2()",
        "snippet": "  public void testInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"property foo not defined on any superclass of Sub\");\n  }\n",
        "begin_line": 6999,
        "end_line": 7005,
        "comment": "",
        "child_ranges": [
            "(line 7000,col 5)-(line 7004,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck3()",
        "snippet": "  public void testInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 7007,
        "end_line": 7015,
        "comment": "",
        "child_ranges": [
            "(line 7008,col 5)-(line 7014,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck4()",
        "snippet": "  public void testInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 7017,
        "end_line": 7023,
        "comment": "",
        "child_ranges": [
            "(line 7018,col 5)-(line 7022,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck5()",
        "snippet": "  public void testInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Root; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 7025,
        "end_line": 7034,
        "comment": "",
        "child_ranges": [
            "(line 7026,col 5)-(line 7033,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck6()",
        "snippet": "  public void testInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 7036,
        "end_line": 7043,
        "comment": "",
        "child_ranges": [
            "(line 7037,col 5)-(line 7042,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck7()",
        "snippet": "  public void testInheritanceCheck7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"goog.Sub.prototype.foo = 5;\",\n        \"property foo already defined on superclass goog.Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 7045,
        "end_line": 7054,
        "comment": "",
        "child_ranges": [
            "(line 7046,col 5)-(line 7053,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck8()",
        "snippet": "  public void testInheritanceCheck8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 7056,
        "end_line": 7063,
        "comment": "",
        "child_ranges": [
            "(line 7057,col 5)-(line 7062,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_1()",
        "snippet": "  public void testInheritanceCheck9_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 7065,
        "end_line": 7072,
        "comment": "",
        "child_ranges": [
            "(line 7066,col 5)-(line 7071,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_2()",
        "snippet": "  public void testInheritanceCheck9_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 7074,
        "end_line": 7082,
        "comment": "",
        "child_ranges": [
            "(line 7075,col 5)-(line 7081,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_3()",
        "snippet": "  public void testInheritanceCheck9_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 7084,
        "end_line": 7096,
        "comment": "",
        "child_ranges": [
            "(line 7085,col 5)-(line 7095,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_1()",
        "snippet": "  public void testInheritanceCheck10_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 7098,
        "end_line": 7106,
        "comment": "",
        "child_ranges": [
            "(line 7099,col 5)-(line 7105,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_2()",
        "snippet": "  public void testInheritanceCheck10_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 7108,
        "end_line": 7117,
        "comment": "",
        "child_ranges": [
            "(line 7109,col 5)-(line 7116,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_3()",
        "snippet": "  public void testInheritanceCheck10_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Root\\n\" +\n        \"original: function (this:Root): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 7119,
        "end_line": 7132,
        "comment": "",
        "child_ranges": [
            "(line 7120,col 5)-(line 7131,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck11()",
        "snippet": "  public void testInterfaceInheritanceCheck11() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 7134,
        "end_line": 7145,
        "comment": "",
        "child_ranges": [
            "(line 7135,col 5)-(line 7144,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck12()",
        "snippet": "  public void testInheritanceCheck12() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = \\\"some string\\\";\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass goog.Super\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 7147,
        "end_line": 7158,
        "comment": "",
        "child_ranges": [
            "(line 7148,col 5)-(line 7157,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck13()",
        "snippet": "  public void testInheritanceCheck13() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 7160,
        "end_line": 7166,
        "comment": "",
        "child_ranges": [
            "(line 7161,col 5)-(line 7165,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck14()",
        "snippet": "  public void testInheritanceCheck14() throws Exception {\n    testClosureTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */\\n\" +\n        \"goog.Super = function() {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 7168,
        "end_line": 7176,
        "comment": "",
        "child_ranges": [
            "(line 7169,col 5)-(line 7175,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck1()",
        "snippet": "  public void testInterfaceInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on interface Super; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 7208,
        "end_line": 7216,
        "comment": "",
        "child_ranges": [
            "(line 7209,col 5)-(line 7215,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck2()",
        "snippet": "  public void testInterfaceInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 7218,
        "end_line": 7224,
        "comment": "",
        "child_ranges": [
            "(line 7219,col 5)-(line 7223,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck3()",
        "snippet": "  public void testInterfaceInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @return {number} */Sub.prototype.foo = function() { return 1;};\",\n        \"property foo already defined on interface Root; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 7226,
        "end_line": 7235,
        "comment": "",
        "child_ranges": [
            "(line 7227,col 5)-(line 7234,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck4()",
        "snippet": "  public void testInterfaceInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n * @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1;};\");\n  }\n",
        "begin_line": 7237,
        "end_line": 7245,
        "comment": "",
        "child_ranges": [
            "(line 7238,col 5)-(line 7244,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck5()",
        "snippet": "  public void testInterfaceInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @return {string} */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 7247,
        "end_line": 7258,
        "comment": "",
        "child_ranges": [
            "(line 7248,col 5)-(line 7257,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck6()",
        "snippet": "  public void testInterfaceInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {string} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Root\\n\" +\n        \"original: function (this:Root): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 7260,
        "end_line": 7272,
        "comment": "",
        "child_ranges": [
            "(line 7261,col 5)-(line 7271,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck7()",
        "snippet": "  public void testInterfaceInheritanceCheck7() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 7274,
        "end_line": 7285,
        "comment": "",
        "child_ranges": [
            "(line 7275,col 5)-(line 7284,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck8()",
        "snippet": "  public void testInterfaceInheritanceCheck8() throws Exception {\n    testTypes(\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        new String[] {\n          \"Bad type annotation. Unknown type Super\",\n          \"property foo not defined on any superclass of Sub\"\n        });\n  }\n",
        "begin_line": 7287,
        "end_line": 7295,
        "comment": "",
        "child_ranges": [
            "(line 7288,col 5)-(line 7294,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck9()",
        "snippet": "  public void testInterfaceInheritanceCheck9() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.bar = function() {};\" +\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.bar = function() {return 3; };\" +\n        \"/** @return {number} */ F.prototype.foo = function() {return 3; };\" +\n        \"/** @constructor \\n * @extends {F} \\n * @implements {I} */ \" +\n        \"function G() {}\" +\n        \"/** @return {string} */ function f() { return new G().bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7297,
        "end_line": 7310,
        "comment": "",
        "child_ranges": [
            "(line 7298,col 5)-(line 7309,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck10()",
        "snippet": "  public void testInterfaceInheritanceCheck10() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.bar = function() {};\" +\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() {return 3; };\" +\n        \"/** @constructor \\n * @extends {F} \\n * @implements {I} */ \" +\n        \"function G() {}\" +\n        \"/** @return {number} \\n * @override */ \" +\n        \"G.prototype.bar = G.prototype.foo;\" +\n        \"/** @return {string} */ function f() { return new G().bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7312,
        "end_line": 7326,
        "comment": "",
        "child_ranges": [
            "(line 7313,col 5)-(line 7325,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck12()",
        "snippet": "  public void testInterfaceInheritanceCheck12() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {};\\n\" +\n        \"/** @type {string} */ I.prototype.foobar;\\n\" +\n        \"/** \\n * @constructor \\n * @implements {I} */\\n\" +\n        \"function C() {\\n\" +\n        \"/** \\n * @type {number} */ this.foobar = 2;};\\n\" +\n        \"/** @type {I} */ \\n var test = new C(); alert(test.foobar);\",\n        \"mismatch of the foobar property type and the type of the property\" +\n        \" it overrides from interface I\\n\" +\n        \"original: string\\n\" +\n        \"override: number\");\n  }\n",
        "begin_line": 7328,
        "end_line": 7340,
        "comment": "",
        "child_ranges": [
            "(line 7329,col 5)-(line 7339,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck13()",
        "snippet": "  public void testInterfaceInheritanceCheck13() throws Exception {\n    testTypes(\n        \"function abstractMethod() {};\\n\" +\n        \"/** @interface */var base = function() {};\\n\" +\n        \"/** @extends {base} \\n @interface */ var Int = function() {}\\n\" +\n        \"/** @type {{bar : !Function}} */ var x; \\n\" +\n        \"/** @type {!Function} */ base.prototype.bar = abstractMethod; \\n\" +\n        \"/** @type {Int} */ foo;\\n\" +\n        \"foo.bar();\");\n  }\n",
        "begin_line": 7342,
        "end_line": 7351,
        "comment": "",
        "child_ranges": [
            "(line 7343,col 5)-(line 7350,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented()",
        "snippet": "  public void testInterfacePropertyNotImplemented() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Int} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 7353,
        "end_line": 7359,
        "comment": "",
        "child_ranges": [
            "(line 7354,col 5)-(line 7358,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented2()",
        "snippet": "  public void testInterfacePropertyNotImplemented2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int} */function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 7361,
        "end_line": 7368,
        "comment": "",
        "child_ranges": [
            "(line 7362,col 5)-(line 7367,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubConstructorImplementingInterface()",
        "snippet": "  public void testStubConstructorImplementingInterface() throws Exception {\n    // This does not throw a warning for unimplemented property because Foo is\n    // just a stub.\n    testTypes(\n        // externs\n        \"/** @interface */ function Int() {}\\n\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\",\n        \"\", null, false);\n  }\n",
        "begin_line": 7370,
        "end_line": 7379,
        "comment": "",
        "child_ranges": [
            "(line 7373,col 5)-(line 7378,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() throws Exception {\n    Node n = parseAndTypeCheck(\"var a = {m1: 7, m2: 'hello'}\");\n\n    Node nameNode = n.getFirstChild().getFirstChild();\n    Node objectNode = nameNode.getFirstChild();\n\n    // node extraction\n    assertEquals(Token.NAME, nameNode.getType());\n    assertEquals(Token.OBJECTLIT, objectNode.getType());\n\n    // value's type\n    ObjectType objectType =\n        (ObjectType) objectNode.getJSType();\n    assertEquals(NUMBER_TYPE, objectType.getPropertyType(\"m1\"));\n    assertEquals(STRING_TYPE, objectType.getPropertyType(\"m2\"));\n\n    // variable's type\n    assertEquals(objectType, nameNode.getJSType());\n  }\n",
        "begin_line": 7381,
        "end_line": 7399,
        "comment": "",
        "child_ranges": [
            "(line 7382,col 5)-(line 7382,col 63)",
            "(line 7384,col 5)-(line 7384,col 54)",
            "(line 7385,col 5)-(line 7385,col 47)",
            "(line 7388,col 5)-(line 7388,col 49)",
            "(line 7389,col 5)-(line 7389,col 56)",
            "(line 7392,col 5)-(line 7393,col 44)",
            "(line 7394,col 5)-(line 7394,col 64)",
            "(line 7395,col 5)-(line 7395,col 64)",
            "(line 7398,col 5)-(line 7398,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration1()",
        "snippet": "  public void testObjectLiteralDeclaration1() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"/** @type {boolean} */ abc: true,\" +\n        \"/** @type {number} */ 'def': 0,\" +\n        \"/** @type {string} */ 3: 'fgh'\" +\n        \"};\");\n  }\n",
        "begin_line": 7401,
        "end_line": 7408,
        "comment": "",
        "child_ranges": [
            "(line 7402,col 5)-(line 7407,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration2()",
        "snippet": "  public void testObjectLiteralDeclaration2() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"  /** @type {boolean} */ abc: true\" +\n        \"};\" +\n        \"x.abc = 0;\",\n        \"assignment to property abc of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 7410,
        "end_line": 7419,
        "comment": "",
        "child_ranges": [
            "(line 7411,col 5)-(line 7418,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration3()",
        "snippet": "  public void testObjectLiteralDeclaration3() throws Exception {\n    testTypes(\n        \"/** @param {{foo: !Function}} x */ function f(x) {}\" +\n        \"f({foo: function() {}});\");\n  }\n",
        "begin_line": 7421,
        "end_line": 7425,
        "comment": "",
        "child_ranges": [
            "(line 7422,col 5)-(line 7424,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration4()",
        "snippet": "  public void testObjectLiteralDeclaration4() throws Exception {\n    testClosureTypes(\n        \"var x = {\" +\n        \"  /** @param {boolean} x */ abc: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\",\n        \"assignment to property abc of x\\n\" +\n        \"found   : function (string): undefined\\n\" +\n        \"required: function (boolean): undefined\");\n    // TODO(user): suppress {duplicate} currently also silence the\n    // redefining type error in the TypeValidator. May be it needs\n    // a new suppress name instead?\n  }\n",
        "begin_line": 7427,
        "end_line": 7442,
        "comment": "",
        "child_ranges": [
            "(line 7428,col 5)-(line 7438,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration5()",
        "snippet": "  public void testObjectLiteralDeclaration5() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"  /** @param {boolean} x */ abc: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @param {boolean} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\");\n  }\n",
        "begin_line": 7444,
        "end_line": 7453,
        "comment": "",
        "child_ranges": [
            "(line 7445,col 5)-(line 7452,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration6()",
        "snippet": "  public void testObjectLiteralDeclaration6() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/**\\n\" +\n        \" * @param {boolean} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\" +\n        \"x = {\" +\n        \"  /**\\n\" +\n        \"   * @param {boolean} x\\n\" +\n        \"   * @suppress {duplicate}\\n\" +\n        \"   */\" +\n        \"  abc: function(x) {}\" +\n        \"};\");\n  }\n",
        "begin_line": 7455,
        "end_line": 7469,
        "comment": "",
        "child_ranges": [
            "(line 7456,col 5)-(line 7468,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration7()",
        "snippet": "  public void testObjectLiteralDeclaration7() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/**\\n\" +\n        \" * @type {function(boolean): undefined}\\n\" +\n        \" */ x.abc = function(x) {};\" +\n        \"x = {\" +\n        \"  /**\\n\" +\n        \"   * @param {boolean} x\\n\" +\n        \"   * @suppress {duplicate}\\n\" +\n        \"   */\" +\n        \"  abc: function(x) {}\" +\n        \"};\");\n  }\n",
        "begin_line": 7471,
        "end_line": 7484,
        "comment": "",
        "child_ranges": [
            "(line 7472,col 5)-(line 7483,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallDateConstructorAsFunction()",
        "snippet": "  public void testCallDateConstructorAsFunction() throws Exception {\n    // ECMA-262 15.9.2: When Date is called as a function rather than as a\n    // constructor, it returns a string.\n    Node n = parseAndTypeCheck(\"Date()\");\n    assertEquals(STRING_TYPE, n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 7486,
        "end_line": 7491,
        "comment": "",
        "child_ranges": [
            "(line 7489,col 5)-(line 7489,col 41)",
            "(line 7490,col 5)-(line 7490,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallErrorConstructorAsFunction()",
        "snippet": "  public void testCallErrorConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Error('x')\");\n    assertEquals(ERROR_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 7496,
        "end_line": 7500,
        "comment": "",
        "child_ranges": [
            "(line 7497,col 5)-(line 7497,col 45)",
            "(line 7498,col 5)-(line 7499,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallArrayConstructorAsFunction()",
        "snippet": "  public void testCallArrayConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Array()\");\n    assertEquals(ARRAY_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 7502,
        "end_line": 7506,
        "comment": "",
        "child_ranges": [
            "(line 7503,col 5)-(line 7503,col 42)",
            "(line 7504,col 5)-(line 7505,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyTypeOfUnionType()",
        "snippet": "  public void testPropertyTypeOfUnionType() throws Exception {\n    testTypes(\"var a = {};\" +\n        \"/** @constructor */ a.N = function() {};\\n\" +\n        \"a.N.prototype.p = 1;\\n\" +\n        \"/** @constructor */ a.S = function() {};\\n\" +\n        \"a.S.prototype.p = 'a';\\n\" +\n        \"/** @param {!a.N|!a.S} x\\n@return {string} */\\n\" +\n        \"var f = function(x) { return x.p; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7508,
        "end_line": 7519,
        "comment": "",
        "child_ranges": [
            "(line 7509,col 5)-(line 7518,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface1()",
        "snippet": "  public void testAnnotatedPropertyOnInterface1() throws Exception {\n    // For interfaces we must allow function definitions that don't have a\n    // return statement, even though they declare a returned type.\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() {};\");\n  }\n",
        "begin_line": 7552,
        "end_line": 7557,
        "comment": "",
        "child_ranges": [
            "(line 7555,col 5)-(line 7556,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface2()",
        "snippet": "  public void testAnnotatedPropertyOnInterface2() throws Exception {\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 7559,
        "end_line": 7562,
        "comment": "",
        "child_ranges": [
            "(line 7560,col 5)-(line 7561,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface3()",
        "snippet": "  public void testAnnotatedPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 7564,
        "end_line": 7567,
        "comment": "",
        "child_ranges": [
            "(line 7565,col 5)-(line 7566,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface4()",
        "snippet": "  public void testAnnotatedPropertyOnInterface4() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = goog.abstractMethod;\");\n  }\n",
        "begin_line": 7569,
        "end_line": 7574,
        "comment": "",
        "child_ranges": [
            "(line 7570,col 5)-(line 7573,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface5()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @desc x does something */u.T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 7588,
        "end_line": 7591,
        "comment": "",
        "child_ranges": [
            "(line 7589,col 5)-(line 7590,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface6()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @desc x does something */T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 7593,
        "end_line": 7596,
        "comment": "",
        "child_ranges": [
            "(line 7594,col 5)-(line 7595,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface1()",
        "snippet": "  public void testDataPropertyOnInterface1() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\");\n  }\n",
        "begin_line": 7606,
        "end_line": 7609,
        "comment": "",
        "child_ranges": [
            "(line 7607,col 5)-(line 7608,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface2()",
        "snippet": "  public void testDataPropertyOnInterface2() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() {}\\n\" +\n        \"C.prototype.x = 'foo';\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 7611,
        "end_line": 7624,
        "comment": "",
        "child_ranges": [
            "(line 7612,col 5)-(line 7612,col 44)",
            "(line 7613,col 5)-(line 7623,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface3()",
        "snippet": "  public void testDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() {}\\n\" +\n        \"/** @override */\\n\" +\n        \"C.prototype.x = 'foo';\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 7626,
        "end_line": 7639,
        "comment": "",
        "child_ranges": [
            "(line 7627,col 5)-(line 7638,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface4()",
        "snippet": "  public void testDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() { /** @type {string} */ \\n this.x = 'foo'; }\\n\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 7641,
        "end_line": 7652,
        "comment": "",
        "child_ranges": [
            "(line 7642,col 5)-(line 7651,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface3()",
        "snippet": "  public void testWarnDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @type {number} */u.T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 7654,
        "end_line": 7659,
        "comment": "",
        "child_ranges": [
            "(line 7655,col 5)-(line 7658,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface4()",
        "snippet": "  public void testWarnDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 7661,
        "end_line": 7666,
        "comment": "",
        "child_ranges": [
            "(line 7662,col 5)-(line 7665,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface4()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @param {Number} foo */u.T.prototype.x =\\n\" +\n        \"function() {};\",\n        \"parameter foo does not appear in u.T.prototype.x's parameter list\");\n  }\n",
        "begin_line": 7697,
        "end_line": 7702,
        "comment": "",
        "child_ranges": [
            "(line 7698,col 5)-(line 7701,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface5()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = function() { };\",\n        \"assignment to property x of T.prototype\\n\" +\n        \"found   : function (): undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7704,
        "end_line": 7710,
        "comment": "",
        "child_ranges": [
            "(line 7705,col 5)-(line 7709,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface6()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */T.prototype.x = 1\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\"\n        );\n  }\n",
        "begin_line": 7712,
        "end_line": 7718,
        "comment": "",
        "child_ranges": [
            "(line 7713,col 5)-(line 7717,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceNonEmptyFunction()",
        "snippet": "  public void testInterfaceNonEmptyFunction() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"T.prototype.x = function() { return 'foo'; }\",\n        \"interface member functions must have an empty body\"\n        );\n  }\n",
        "begin_line": 7720,
        "end_line": 7725,
        "comment": "",
        "child_ranges": [
            "(line 7721,col 5)-(line 7724,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDoubleNestedInterface()",
        "snippet": "  public void testDoubleNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @interface */ I1.I2.I3 = function() {};\\n\");\n  }\n",
        "begin_line": 7727,
        "end_line": 7731,
        "comment": "",
        "child_ranges": [
            "(line 7728,col 5)-(line 7730,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticDataPropertyOnNestedInterface()",
        "snippet": "  public void testStaticDataPropertyOnNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @type {number} */ I1.I2.x = 1;\\n\");\n  }\n",
        "begin_line": 7733,
        "end_line": 7737,
        "comment": "",
        "child_ranges": [
            "(line 7734,col 5)-(line 7736,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInstantiation()",
        "snippet": "  public void testInterfaceInstantiation() throws Exception {\n    testTypes(\"/** @interface */var f = function(){}; new f\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 7739,
        "end_line": 7742,
        "comment": "",
        "child_ranges": [
            "(line 7740,col 5)-(line 7741,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypeLoop()",
        "snippet": "  public void testPrototypeLoop() throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n        \"/** @constructor \\n * @extends {T} */var T = function() {};\" +\n        \"alert((new T).foo);\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type T\",\n            \"Could not resolve type in @extends tag of T\"));\n  }\n",
        "begin_line": 7744,
        "end_line": 7752,
        "comment": "",
        "child_ranges": [
            "(line 7745,col 5)-(line 7751,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssign()",
        "snippet": "  public void testDirectPrototypeAssign() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @type {Array} */ Bar.prototype = new Foo()\",\n        \"assignment to property prototype of Bar\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: (Array|null)\");\n  }\n",
        "begin_line": 7754,
        "end_line": 7762,
        "comment": "",
        "child_ranges": [
            "(line 7755,col 5)-(line 7761,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry1()",
        "snippet": "  public void testResolutionViaRegistry1() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7767,
        "end_line": 7778,
        "comment": "",
        "child_ranges": [
            "(line 7768,col 5)-(line 7777,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry2()",
        "snippet": "  public void testResolutionViaRegistry2() throws Exception {\n    testTypes(\n        \"/** @constructor */ u.T = function() {\" +\n        \"  this.a = 0; };\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7780,
        "end_line": 7792,
        "comment": "",
        "child_ranges": [
            "(line 7781,col 5)-(line 7791,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry3()",
        "snippet": "  public void testResolutionViaRegistry3() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a = 0;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7794,
        "end_line": 7805,
        "comment": "",
        "child_ranges": [
            "(line 7795,col 5)-(line 7804,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry4()",
        "snippet": "  public void testResolutionViaRegistry4() throws Exception {\n    testTypes(\"/** @constructor */ u.A = function() {};\\n\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.A = function() {}\\n;\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.B = function() {};\\n\" +\n        \"var ab = new u.A.B();\\n\" +\n        \"/** @type {!u.A} */ var a = ab;\\n\" +\n        \"/** @type {!u.A.A} */ var aa = ab;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : u.A.B\\n\" +\n        \"required: u.A.A\");\n  }\n",
        "begin_line": 7807,
        "end_line": 7817,
        "comment": "",
        "child_ranges": [
            "(line 7808,col 5)-(line 7816,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry5()",
        "snippet": "  public void testResolutionViaRegistry5() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ u.T = function() {}; u.T\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof FunctionType);\n    assertEquals(\"u.T\",\n        ((FunctionType) type).getInstanceType().getReferenceName());\n  }\n",
        "begin_line": 7819,
        "end_line": 7826,
        "comment": "",
        "child_ranges": [
            "(line 7820,col 5)-(line 7820,col 79)",
            "(line 7821,col 5)-(line 7821,col 62)",
            "(line 7822,col 5)-(line 7822,col 38)",
            "(line 7823,col 5)-(line 7823,col 45)",
            "(line 7824,col 5)-(line 7825,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation1()",
        "snippet": "  public void testGatherProperyWithoutAnnotation1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ var T = function() {};\" +\n        \"/** @type {!T} */var t; t.x; t;\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    assertEquals(\n        Lists.newArrayList(objectType),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 7828,
        "end_line": 7839,
        "comment": "",
        "child_ranges": [
            "(line 7829,col 5)-(line 7830,col 43)",
            "(line 7831,col 5)-(line 7831,col 62)",
            "(line 7832,col 5)-(line 7832,col 38)",
            "(line 7833,col 5)-(line 7833,col 43)",
            "(line 7834,col 5)-(line 7834,col 46)",
            "(line 7835,col 5)-(line 7835,col 45)",
            "(line 7836,col 5)-(line 7838,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation2()",
        "snippet": "  public void testGatherProperyWithoutAnnotation2() throws Exception {\n    TypeCheckResult ns =\n        parseAndTypeCheckWithScope(\"/** @type {!Object} */var t; t.x; t;\");\n    Node n = ns.root;\n    Scope s = ns.scope;\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertEquals(type, OBJECT_TYPE);\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    assertEquals(\n        Lists.newArrayList(OBJECT_TYPE),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 7841,
        "end_line": 7855,
        "comment": "",
        "child_ranges": [
            "(line 7842,col 5)-(line 7843,col 75)",
            "(line 7844,col 5)-(line 7844,col 21)",
            "(line 7845,col 5)-(line 7845,col 23)",
            "(line 7846,col 5)-(line 7846,col 62)",
            "(line 7847,col 5)-(line 7847,col 38)",
            "(line 7848,col 5)-(line 7848,col 36)",
            "(line 7849,col 5)-(line 7849,col 43)",
            "(line 7850,col 5)-(line 7850,col 46)",
            "(line 7851,col 5)-(line 7851,col 45)",
            "(line 7852,col 5)-(line 7854,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionMasksVariableBug()",
        "snippet": "  public void testFunctionMasksVariableBug() throws Exception {\n    testTypes(\"var x = 4; var f = function x(b) { return b ? 1 : x(true); };\",\n        \"function x masks variable (IE bug)\");\n  }\n",
        "begin_line": 7857,
        "end_line": 7860,
        "comment": "",
        "child_ranges": [
            "(line 7858,col 5)-(line 7859,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa1()",
        "snippet": "  public void testDfa1() throws Exception {\n    testTypes(\"var x = null;\\n x = 1;\\n /** @type number */ var y = x;\");\n  }\n",
        "begin_line": 7862,
        "end_line": 7864,
        "comment": "",
        "child_ranges": [
            "(line 7863,col 5)-(line 7863,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa2()",
        "snippet": "  public void testDfa2() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\nvar x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 7866,
        "end_line": 7870,
        "comment": "",
        "child_ranges": [
            "(line 7867,col 5)-(line 7869,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa3()",
        "snippet": "  public void testDfa3() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\n\" +\n        \"/** @type {number|string} */ var x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 7872,
        "end_line": 7877,
        "comment": "",
        "child_ranges": [
            "(line 7873,col 5)-(line 7876,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa4()",
        "snippet": "  public void testDfa4() throws Exception {\n    testTypes(\"/** @param {Date?} d */ function f(d) {\\n\" +\n        \"if (!d) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = d;\\n}\");\n  }\n",
        "begin_line": 7879,
        "end_line": 7883,
        "comment": "",
        "child_ranges": [
            "(line 7880,col 5)-(line 7882,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa5()",
        "snippet": "  public void testDfa5() throws Exception {\n    testTypes(\"/** @return {string?} */ function u() {return 'a';}\\n\" +\n        \"/** @param {string?} x\\n@return {string} */ function f(x) {\\n\" +\n        \"while (!x) { x = u(); }\\nreturn x;\\n}\");\n  }\n",
        "begin_line": 7885,
        "end_line": 7889,
        "comment": "",
        "child_ranges": [
            "(line 7886,col 5)-(line 7888,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa6()",
        "snippet": "  public void testDfa6() throws Exception {\n    testTypes(\"/** @return {Object?} */ function u() {return {};}\\n\" +\n        \"/** @param {Object?} x */ function f(x) {\\n\" +\n        \"while (x) { x = u(); if (!x) { x = u(); } }\\n}\");\n  }\n",
        "begin_line": 7891,
        "end_line": 7895,
        "comment": "",
        "child_ranges": [
            "(line 7892,col 5)-(line 7894,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa7()",
        "snippet": "  public void testDfa7() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {Date?} */ T.prototype.x = null;\\n\" +\n        \"/** @param {!T} t */ function f(t) {\\n\" +\n        \"if (!t.x) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = t.x;\\n}\");\n  }\n",
        "begin_line": 7897,
        "end_line": 7903,
        "comment": "",
        "child_ranges": [
            "(line 7898,col 5)-(line 7902,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa8()",
        "snippet": "  public void testDfa8() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {number|string} */ T.prototype.x = '';\\n\" +\n        \"function u() {}\\n\" +\n        \"/** @param {!T} t\\n@return {number} */ function f(t) {\\n\" +\n        \"if (u()) { t.x = 1; } else { t.x = 2; } return t.x;\\n}\");\n  }\n",
        "begin_line": 7905,
        "end_line": 7911,
        "comment": "",
        "child_ranges": [
            "(line 7906,col 5)-(line 7910,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa9()",
        "snippet": "  public void testDfa9() throws Exception {\n    testTypes(\"function f() {\\n/** @type {string?} */var x;\\nx = null;\\n\" +\n        \"if (x == null) { return 0; } else { return 1; } }\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 7913,
        "end_line": 7919,
        "comment": "",
        "child_ranges": [
            "(line 7914,col 5)-(line 7918,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa10()",
        "snippet": "  public void testDfa10() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {string?} x */function f(x) {\\n\" +\n        \"if (!x) { x = ''; }\\n\" +\n        \"if (g(x)) { return 0; } else { return 1; } }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 7921,
        "end_line": 7929,
        "comment": "",
        "child_ranges": [
            "(line 7922,col 5)-(line 7928,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa11()",
        "snippet": "  public void testDfa11() throws Exception {\n    testTypes(\"/** @param {string} opt_x\\n@return {string} */\\n\" +\n        \"function f(opt_x) { if (!opt_x) { \" +\n        \"throw new Error('x cannot be empty'); } return opt_x; }\");\n  }\n",
        "begin_line": 7931,
        "end_line": 7935,
        "comment": "",
        "child_ranges": [
            "(line 7932,col 5)-(line 7934,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa12()",
        "snippet": "  public void testDfa12() throws Exception {\n    testTypes(\"/** @param {string} x \\n * @constructor \\n */\" +\n        \"var Bar = function(x) {};\" +\n        \"/** @param {string} x */ function g(x) { return true; }\" +\n        \"/** @param {string|number} opt_x */ \" +\n        \"function f(opt_x) { \" +\n        \"  if (opt_x) { new Bar(g(opt_x) && 'x'); }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7937,
        "end_line": 7948,
        "comment": "",
        "child_ranges": [
            "(line 7938,col 5)-(line 7947,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa13()",
        "snippet": "  public void testDfa13() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @param {number} y \\n\" +\n        \" * @param {number} z \\n\" +\n        \" */\" +\n        \"function g(x, y, z) {}\" +\n        \"function f() { \" +\n        \"  var x = 'a'; g(x, x = 3, x);\" +\n        \"}\");\n  }\n",
        "begin_line": 7950,
        "end_line": 7961,
        "comment": "",
        "child_ranges": [
            "(line 7951,col 5)-(line 7960,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast1()",
        "snippet": "  public void testTypeInferenceWithCast1() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 7963,
        "end_line": 7969,
        "comment": "",
        "child_ranges": [
            "(line 7964,col 5)-(line 7968,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast2()",
        "snippet": "  public void testTypeInferenceWithCast2() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y; y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 7971,
        "end_line": 7977,
        "comment": "",
        "child_ranges": [
            "(line 7972,col 5)-(line 7976,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast3()",
        "snippet": "  public void testTypeInferenceWithCast3() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x));}\");\n  }\n",
        "begin_line": 7979,
        "end_line": 7984,
        "comment": "",
        "child_ranges": [
            "(line 7980,col 5)-(line 7983,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast4()",
        "snippet": "  public void testTypeInferenceWithCast4() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x)) && 1;}\");\n  }\n",
        "begin_line": 7986,
        "end_line": 7991,
        "comment": "",
        "child_ranges": [
            "(line 7987,col 5)-(line 7990,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast5()",
        "snippet": "  public void testTypeInferenceWithCast5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function foo(x) {}\" +\n        \"/** @param {{length:*}} y */ function bar(y) {\" +\n        \"  /** @type {string} */ y.length;\" +\n        \"  foo(y.length);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7993,
        "end_line": 8003,
        "comment": "",
        "child_ranges": [
            "(line 7994,col 5)-(line 8002,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithClosure1()",
        "snippet": "  public void testTypeInferenceWithClosure1() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 8005,
        "end_line": 8013,
        "comment": "",
        "child_ranges": [
            "(line 8006,col 5)-(line 8012,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithClosure2()",
        "snippet": "  public void testTypeInferenceWithClosure2() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x === 3;\" +\n        \"}\",\n        \"condition always evaluates to the same value\\n\" +\n        \"left : (null|string)\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 8015,
        "end_line": 8026,
        "comment": "",
        "child_ranges": [
            "(line 8016,col 5)-(line 8025,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithNoEntry1()",
        "snippet": "  public void testTypeInferenceWithNoEntry1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {?{baz: number}} */ this.bar = {baz: 3};\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function SubFoo() {}\" +\n        \"/** Method */\" +\n        \"SubFoo.prototype.method = function() {\" +\n        \"  for (var i = 0; i < 10; i++) {\" +\n        \"    f(this.bar);\" +\n        \"    f(this.bar.baz);\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\"+\n        \"found   : (null|{baz: number})\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 8028,
        "end_line": 8050,
        "comment": "",
        "child_ranges": [
            "(line 8029,col 5)-(line 8049,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithNoEntry2()",
        "snippet": "  public void testTypeInferenceWithNoEntry2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @param {!Object} x */ function g(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {?{baz: number}} */ this.bar = {baz: 3};\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function SubFoo() {}\" +\n        \"/** Method */\" +\n        \"SubFoo.prototype.method = function() {\" +\n        \"  for (var i = 0; i < 10; i++) {\" +\n        \"    f(this.bar);\" +\n        \"    goog.asserts.assert(this.bar);\" +\n        \"    g(this.bar);\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\"+\n        \"found   : (null|{baz: number})\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 8052,
        "end_line": 8077,
        "comment": "",
        "child_ranges": [
            "(line 8053,col 5)-(line 8076,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardPropertyReference()",
        "snippet": "  public void testForwardPropertyReference() throws Exception {\n    testTypes(\"/** @constructor */ var Foo = function() { this.init(); };\" +\n        \"/** @return {string} */\" +\n        \"Foo.prototype.getString = function() {\" +\n        \"  return this.number_;\" +\n        \"};\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {number} */\" +\n        \"  this.number_ = 3;\" +\n        \"};\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8079,
        "end_line": 8092,
        "comment": "",
        "child_ranges": [
            "(line 8080,col 5)-(line 8091,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoForwardTypeDeclaration()",
        "snippet": "  public void testNoForwardTypeDeclaration() throws Exception {\n    testTypes(\n        \"/** @param {MyType} x */ function f(x) {}\",\n        \"Bad type annotation. Unknown type MyType\");\n  }\n",
        "begin_line": 8094,
        "end_line": 8098,
        "comment": "",
        "child_ranges": [
            "(line 8095,col 5)-(line 8097,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoForwardTypeDeclarationAndNoBraces()",
        "snippet": "  public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n    testTypes(\"/** @return The result. */ function f() {}\");\n  }\n",
        "begin_line": 8100,
        "end_line": 8102,
        "comment": "",
        "child_ranges": [
            "(line 8101,col 5)-(line 8101,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration1()",
        "snippet": "  public void testForwardTypeDeclaration1() throws Exception {\n    testClosureTypes(\n        // malformed addDependency calls shouldn't cause a crash\n        \"goog.addDependency();\" +\n        \"goog.addDependency('y', [goog]);\" +\n\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x \\n * @return {number} */\" +\n        \"function f(x) { return 3; }\", null);\n  }\n",
        "begin_line": 8104,
        "end_line": 8113,
        "comment": "",
        "child_ranges": [
            "(line 8105,col 5)-(line 8112,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration2()",
        "snippet": "  public void testForwardTypeDeclaration2() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null)\");\n  }\n",
        "begin_line": 8115,
        "end_line": 8123,
        "comment": "",
        "child_ranges": [
            "(line 8116,col 5)-(line 8117,col 53)",
            "(line 8118,col 5)-(line 8118,col 30)",
            "(line 8119,col 5)-(line 8122,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration3()",
        "snippet": "  public void testForwardTypeDeclaration3() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null)\");\n  }\n",
        "begin_line": 8125,
        "end_line": 8134,
        "comment": "",
        "child_ranges": [
            "(line 8126,col 5)-(line 8133,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration4()",
        "snippet": "  public void testForwardTypeDeclaration4() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(new MyType());\",\n        null);\n  }\n",
        "begin_line": 8136,
        "end_line": 8143,
        "comment": "",
        "child_ranges": [
            "(line 8137,col 5)-(line 8142,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration5()",
        "snippet": "  public void testForwardTypeDeclaration5() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {MyType}\\n\" +\n        \" */ var YourType = function() {};\" +\n        \"/** @override */ YourType.prototype.method = function() {};\",\n        \"Could not resolve type in @extends tag of YourType\");\n  }\n",
        "begin_line": 8145,
        "end_line": 8154,
        "comment": "",
        "child_ranges": [
            "(line 8146,col 5)-(line 8153,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration6()",
        "snippet": "  public void testForwardTypeDeclaration6() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @implements {MyType}\\n\" +\n        \" */ var YourType = function() {};\" +\n        \"/** @override */ YourType.prototype.method = function() {};\",\n        Lists.newArrayList(\n            \"Could not resolve type in @implements tag of YourType\",\n            \"property method not defined on any superclass of YourType\"));\n  }\n",
        "begin_line": 8156,
        "end_line": 8167,
        "comment": "",
        "child_ranges": [
            "(line 8157,col 5)-(line 8166,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration7()",
        "snippet": "  public void testForwardTypeDeclaration7() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType=} x */\" +\n        \"function f(x) { return x == undefined; }\", null);\n  }\n",
        "begin_line": 8169,
        "end_line": 8174,
        "comment": "",
        "child_ranges": [
            "(line 8170,col 5)-(line 8173,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration8()",
        "snippet": "  public void testForwardTypeDeclaration8() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */\" +\n        \"function f(x) { return x.name == undefined; }\", null);\n  }\n",
        "begin_line": 8176,
        "end_line": 8181,
        "comment": "",
        "child_ranges": [
            "(line 8177,col 5)-(line 8180,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration9()",
        "snippet": "  public void testForwardTypeDeclaration9() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */\" +\n        \"function f(x) { x.name = 'Bob'; }\", null);\n  }\n",
        "begin_line": 8183,
        "end_line": 8188,
        "comment": "",
        "child_ranges": [
            "(line 8184,col 5)-(line 8187,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration10()",
        "snippet": "  public void testForwardTypeDeclaration10() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType|number} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\", null);\n    testClosureTypes(f + \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: (MyType|null|number)\");\n  }\n",
        "begin_line": 8190,
        "end_line": 8199,
        "comment": "",
        "child_ranges": [
            "(line 8191,col 5)-(line 8192,col 60)",
            "(line 8193,col 5)-(line 8193,col 30)",
            "(line 8194,col 5)-(line 8194,col 40)",
            "(line 8195,col 5)-(line 8198,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateTypeDef()",
        "snippet": "  public void testDuplicateTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @typedef {number} */ goog.Bar;\",\n        \"variable goog.Bar redefined with type None, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (new:goog.Bar): undefined\");\n  }\n",
        "begin_line": 8201,
        "end_line": 8209,
        "comment": "",
        "child_ranges": [
            "(line 8202,col 5)-(line 8208,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef1()",
        "snippet": "  public void testTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 8211,
        "end_line": 8217,
        "comment": "",
        "child_ranges": [
            "(line 8212,col 5)-(line 8216,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef2()",
        "snippet": "  public void testTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 8219,
        "end_line": 8228,
        "comment": "",
        "child_ranges": [
            "(line 8220,col 5)-(line 8227,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef3()",
        "snippet": "  public void testTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ var Bar;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 8230,
        "end_line": 8239,
        "comment": "",
        "child_ranges": [
            "(line 8231,col 5)-(line 8238,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef4()",
        "snippet": "  public void testTypeDef4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function A() {}\" +\n        \"/** @constructor */ function B() {}\" +\n        \"/** @typedef {(A|B)} */ var AB;\" +\n        \"/** @param {AB} x */ function f(x) {}\" +\n        \"f(new A()); f(new B()); f(1);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (A|B|null)\");\n  }\n",
        "begin_line": 8241,
        "end_line": 8251,
        "comment": "",
        "child_ranges": [
            "(line 8242,col 5)-(line 8250,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef5()",
        "snippet": "  public void testTypeDef5() throws Exception {\n    // Notice that the error message is slightly different than\n    // the one for testTypeDef4, even though they should be the same.\n    // This is an implementation detail necessary for NamedTypes work out\n    // ok, and it should change if NamedTypes ever go away.\n    testTypes(\n        \"/** @param {AB} x */ function f(x) {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"/** @constructor */ function B() {}\" +\n        \"/** @typedef {(A|B)} */ var AB;\" +\n        \"f(new A()); f(new B()); f(1);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (A|B|null)\");\n  }\n",
        "begin_line": 8253,
        "end_line": 8267,
        "comment": "",
        "child_ranges": [
            "(line 8258,col 5)-(line 8266,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCircularTypeDef()",
        "snippet": "  public void testCircularTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number|Array.<goog.Bar>} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 8269,
        "end_line": 8275,
        "comment": "",
        "child_ranges": [
            "(line 8270,col 5)-(line 8274,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent1()",
        "snippet": "  public void testGetTypedPercent1() throws Exception {\n    String js = \"var id = function(x) { return x; }\\n\" +\n                \"var id2 = function(x) { return id(x); }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 8277,
        "end_line": 8281,
        "comment": "",
        "child_ranges": [
            "(line 8278,col 5)-(line 8279,col 58)",
            "(line 8280,col 5)-(line 8280,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent2()",
        "snippet": "  public void testGetTypedPercent2() throws Exception {\n    String js = \"var x = {}; x.y = 1;\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 8283,
        "end_line": 8286,
        "comment": "",
        "child_ranges": [
            "(line 8284,col 5)-(line 8284,col 39)",
            "(line 8285,col 5)-(line 8285,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent3()",
        "snippet": "  public void testGetTypedPercent3() throws Exception {\n    String js = \"var f = function(x) { x.a = x.b; }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 8288,
        "end_line": 8291,
        "comment": "",
        "child_ranges": [
            "(line 8289,col 5)-(line 8289,col 53)",
            "(line 8290,col 5)-(line 8290,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent4()",
        "snippet": "  public void testGetTypedPercent4() throws Exception {\n    String js = \"var n = {};\\n /** @constructor */ n.T = function() {};\\n\" +\n        \"/** @type n.T */ var x = new n.T();\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 8293,
        "end_line": 8297,
        "comment": "",
        "child_ranges": [
            "(line 8294,col 5)-(line 8295,col 46)",
            "(line 8296,col 5)-(line 8296,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent5()",
        "snippet": "  public void testGetTypedPercent5() throws Exception {\n    String js = \"/** @enum {number} */ keys = {A: 1,B: 2,C: 3};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 8299,
        "end_line": 8302,
        "comment": "",
        "child_ranges": [
            "(line 8300,col 5)-(line 8300,col 65)",
            "(line 8301,col 5)-(line 8301,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent6()",
        "snippet": "  public void testGetTypedPercent6() throws Exception {\n    String js = \"a = {TRUE: 1, FALSE: 0};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 8304,
        "end_line": 8307,
        "comment": "",
        "child_ranges": [
            "(line 8305,col 5)-(line 8305,col 43)",
            "(line 8306,col 5)-(line 8306,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.getTypedPercent(java.lang.String)",
        "snippet": "  private double getTypedPercent(String js) throws Exception {\n    Node n = compiler.parseTestCode(js);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    TypeCheck t = makeTypeCheck();\n    t.processForTesting(null, n);\n    return t.getTypedPercent();\n  }\n",
        "begin_line": 8309,
        "end_line": 8319,
        "comment": "",
        "child_ranges": [
            "(line 8310,col 5)-(line 8310,col 40)",
            "(line 8312,col 5)-(line 8312,col 41)",
            "(line 8313,col 5)-(line 8313,col 61)",
            "(line 8314,col 5)-(line 8314,col 46)",
            "(line 8316,col 5)-(line 8316,col 34)",
            "(line 8317,col 5)-(line 8317,col 33)",
            "(line 8318,col 5)-(line 8318,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.getInstanceType(com.google.javascript.rhino.Node)",
        "snippet": "  private ObjectType getInstanceType(Node js1Node) {\n    JSType type = js1Node.getFirstChild().getJSType();\n    assertNotNull(type);\n    assertTrue(type instanceof FunctionType);\n    FunctionType functionType = (FunctionType) type;\n    assertTrue(functionType.isConstructor());\n    return functionType.getInstanceType();\n  }\n",
        "begin_line": 8321,
        "end_line": 8328,
        "comment": "",
        "child_ranges": [
            "(line 8322,col 5)-(line 8322,col 54)",
            "(line 8323,col 5)-(line 8323,col 24)",
            "(line 8324,col 5)-(line 8324,col 45)",
            "(line 8325,col 5)-(line 8325,col 52)",
            "(line 8326,col 5)-(line 8326,col 45)",
            "(line 8327,col 5)-(line 8327,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypePropertyReference()",
        "snippet": "  public void testPrototypePropertyReference() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.bar = function(a){};\\n\"\n        + \"/** @param {Foo} f */\\n\"\n        + \"function baz(f) {\\n\"\n        + \"  Foo.prototype.bar.call(f, 3);\\n\"\n        + \"}\");\n    assertEquals(0, compiler.getErrorCount());\n    assertEquals(0, compiler.getWarningCount());\n\n    assertTrue(p.scope.getVar(\"Foo\").getType() instanceof FunctionType);\n    FunctionType fooType = (FunctionType) p.scope.getVar(\"Foo\").getType();\n    assertEquals(\"function (this:Foo, number): undefined\",\n                 fooType.getPrototype().getPropertyType(\"bar\").toString());\n  }\n",
        "begin_line": 8330,
        "end_line": 8347,
        "comment": "",
        "child_ranges": [
            "(line 8331,col 5)-(line 8339,col 15)",
            "(line 8340,col 5)-(line 8340,col 46)",
            "(line 8341,col 5)-(line 8341,col 48)",
            "(line 8343,col 5)-(line 8343,col 72)",
            "(line 8344,col 5)-(line 8344,col 74)",
            "(line 8345,col 5)-(line 8346,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolvingNamedTypes()",
        "snippet": "  public void testResolvingNamedTypes() throws Exception {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"var Foo = function() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.foo = function(a) {\\n\"\n        + \"  return this.baz().toString();\\n\"\n        + \"};\\n\"\n        + \"/** @return {Baz} */\\n\"\n        + \"Foo.prototype.baz = function() { return new Baz(); };\\n\"\n        + \"/** @constructor\\n\"\n        + \"  * @extends Foo */\\n\"\n        + \"var Bar = function() {};\"\n        + \"/** @constructor */\\n\"\n        + \"var Baz = function() {};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 8349,
        "end_line": 8365,
        "comment": "",
        "child_ranges": [
            "(line 8350,col 5)-(line 8363,col 37)",
            "(line 8364,col 5)-(line 8364,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty1()",
        "snippet": "  public void testMissingProperty1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.a = 3; };\");\n  }\n",
        "begin_line": 8367,
        "end_line": 8372,
        "comment": "",
        "child_ranges": [
            "(line 8368,col 5)-(line 8371,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty2()",
        "snippet": "  public void testMissingProperty2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 8374,
        "end_line": 8380,
        "comment": "",
        "child_ranges": [
            "(line 8375,col 5)-(line 8379,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty3()",
        "snippet": "  public void testMissingProperty3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).a = 3;\");\n  }\n",
        "begin_line": 8382,
        "end_line": 8387,
        "comment": "",
        "child_ranges": [
            "(line 8383,col 5)-(line 8386,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty4()",
        "snippet": "  public void testMissingProperty4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).b = 3;\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 8389,
        "end_line": 8395,
        "comment": "",
        "child_ranges": [
            "(line 8390,col 5)-(line 8394,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty5()",
        "snippet": "  public void testMissingProperty5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor */ function Bar() { this.a = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 8397,
        "end_line": 8403,
        "comment": "",
        "child_ranges": [
            "(line 8398,col 5)-(line 8402,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty6()",
        "snippet": "  public void testMissingProperty6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ \" +\n        \"function Bar() { this.a = 3; };\");\n  }\n",
        "begin_line": 8405,
        "end_line": 8411,
        "comment": "",
        "child_ranges": [
            "(line 8406,col 5)-(line 8410,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty7()",
        "snippet": "  public void testMissingProperty7() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return obj.impossible; }\",\n        \"Property impossible never defined on Object\");\n  }\n",
        "begin_line": 8413,
        "end_line": 8418,
        "comment": "",
        "child_ranges": [
            "(line 8414,col 5)-(line 8417,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty8()",
        "snippet": "  public void testMissingProperty8() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return typeof obj.impossible; }\");\n  }\n",
        "begin_line": 8420,
        "end_line": 8424,
        "comment": "",
        "child_ranges": [
            "(line 8421,col 5)-(line 8423,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty9()",
        "snippet": "  public void testMissingProperty9() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { if (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 8426,
        "end_line": 8430,
        "comment": "",
        "child_ranges": [
            "(line 8427,col 5)-(line 8429,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty10()",
        "snippet": "  public void testMissingProperty10() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { while (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 8432,
        "end_line": 8436,
        "comment": "",
        "child_ranges": [
            "(line 8433,col 5)-(line 8435,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty11()",
        "snippet": "  public void testMissingProperty11() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { for (;obj.impossible;) { return true; } }\");\n  }\n",
        "begin_line": 8438,
        "end_line": 8442,
        "comment": "",
        "child_ranges": [
            "(line 8439,col 5)-(line 8441,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty12()",
        "snippet": "  public void testMissingProperty12() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { do { } while (obj.impossible); }\");\n  }\n",
        "begin_line": 8444,
        "end_line": 8448,
        "comment": "",
        "child_ranges": [
            "(line 8445,col 5)-(line 8447,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty13()",
        "snippet": "  public void testMissingProperty13() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isDef(obj.impossible); }\");\n  }\n",
        "begin_line": 8450,
        "end_line": 8455,
        "comment": "",
        "child_ranges": [
            "(line 8451,col 5)-(line 8454,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty14()",
        "snippet": "  public void testMissingProperty14() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isNull(obj.impossible); }\",\n        \"Property isNull never defined on goog\");\n  }\n",
        "begin_line": 8457,
        "end_line": 8463,
        "comment": "",
        "child_ranges": [
            "(line 8458,col 5)-(line 8462,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty15()",
        "snippet": "  public void testMissingProperty15() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { x.foo(); } }\");\n  }\n",
        "begin_line": 8465,
        "end_line": 8469,
        "comment": "",
        "child_ranges": [
            "(line 8466,col 5)-(line 8468,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty16()",
        "snippet": "  public void testMissingProperty16() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo(); if (x.foo) {} }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 8471,
        "end_line": 8476,
        "comment": "",
        "child_ranges": [
            "(line 8472,col 5)-(line 8475,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty17()",
        "snippet": "  public void testMissingProperty17() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (typeof x.foo == 'function') { x.foo(); } }\");\n  }\n",
        "begin_line": 8478,
        "end_line": 8482,
        "comment": "",
        "child_ranges": [
            "(line 8479,col 5)-(line 8481,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty18()",
        "snippet": "  public void testMissingProperty18() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo instanceof Function) { x.foo(); } }\");\n  }\n",
        "begin_line": 8484,
        "end_line": 8488,
        "comment": "",
        "child_ranges": [
            "(line 8485,col 5)-(line 8487,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty19()",
        "snippet": "  public void testMissingProperty19() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 8490,
        "end_line": 8495,
        "comment": "",
        "child_ranges": [
            "(line 8491,col 5)-(line 8494,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty20()",
        "snippet": "  public void testMissingProperty20() throws Exception {\n    // NOTE(nicksantos): In the else branch, we know that x.foo is a\n    // CHECKED_UNKNOWN (UNKNOWN restricted to a falsey value). We could\n    // do some more sophisticated analysis here. Obviously, if x.foo is false,\n    // then x.foo cannot possibly be called. For example, you could imagine a\n    // VagueType that was like UnknownType, but had some constraints on it\n    // so that we knew it could never be a function.\n    //\n    // For now, we just punt on this issue.\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { } else { x.foo(); } }\");\n  }\n",
        "begin_line": 8497,
        "end_line": 8509,
        "comment": "",
        "child_ranges": [
            "(line 8506,col 5)-(line 8508,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty21()",
        "snippet": "  public void testMissingProperty21() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo && x.foo(); }\");\n  }\n",
        "begin_line": 8511,
        "end_line": 8515,
        "comment": "",
        "child_ranges": [
            "(line 8512,col 5)-(line 8514,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty22()",
        "snippet": "  public void testMissingProperty22() throws Exception {\n    testTypes(\n        \"/** @param {Object} x \\n * @return {boolean} */\" +\n        \"function f(x) { return x.foo ? x.foo() : true; }\");\n  }\n",
        "begin_line": 8517,
        "end_line": 8521,
        "comment": "",
        "child_ranges": [
            "(line 8518,col 5)-(line 8520,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty23()",
        "snippet": "  public void testMissingProperty23() throws Exception {\n    testTypes(\n        \"function f(x) { x.impossible(); }\",\n        \"Property impossible never defined on x\");\n  }\n",
        "begin_line": 8523,
        "end_line": 8527,
        "comment": "",
        "child_ranges": [
            "(line 8524,col 5)-(line 8526,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty24()",
        "snippet": "  public void testMissingProperty24() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {MissingType} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 8529,
        "end_line": 8534,
        "comment": "",
        "child_ranges": [
            "(line 8530,col 5)-(line 8533,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty25()",
        "snippet": "  public void testMissingProperty25() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"(new FooAlias()).bar();\");\n  }\n",
        "begin_line": 8536,
        "end_line": 8542,
        "comment": "",
        "child_ranges": [
            "(line 8537,col 5)-(line 8541,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty26()",
        "snippet": "  public void testMissingProperty26() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"FooAlias.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\");\n  }\n",
        "begin_line": 8544,
        "end_line": 8550,
        "comment": "",
        "child_ranges": [
            "(line 8545,col 5)-(line 8549,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty27()",
        "snippet": "  public void testMissingProperty27() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {?MissingType} x */\" +\n        \"function f(x) {\" +\n        \"  for (var parent = x; parent; parent = parent.getParent()) {}\" +\n        \"}\", null);\n  }\n",
        "begin_line": 8552,
        "end_line": 8559,
        "comment": "",
        "child_ranges": [
            "(line 8553,col 5)-(line 8558,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty28()",
        "snippet": "  public void testMissingProperty28() throws Exception {\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foo;\" +\n        \"}\");\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foox;\" +\n        \"}\",\n        \"Property foox never defined on obj\");\n  }\n",
        "begin_line": 8561,
        "end_line": 8573,
        "comment": "",
        "child_ranges": [
            "(line 8562,col 5)-(line 8566,col 13)",
            "(line 8567,col 5)-(line 8572,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty29()",
        "snippet": "  public void testMissingProperty29() throws Exception {\n    // This used to emit a warning.\n    testTypes(\n        // externs\n        \"/** @constructor */ var Foo;\" +\n        \"Foo.prototype.opera;\" +\n        \"Foo.prototype.opera.postError;\",\n        \"\",\n        null,\n        false);\n  }\n",
        "begin_line": 8575,
        "end_line": 8585,
        "comment": "",
        "child_ranges": [
            "(line 8577,col 5)-(line 8584,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty30()",
        "snippet": "  public void testMissingProperty30() throws Exception {\n    testTypes(\n        \"/** @return {*} */\" +\n        \"function f() {\" +\n        \" return {};\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Object} y */ function g(y) { return y.a; }\");\n  }\n",
        "begin_line": 8587,
        "end_line": 8595,
        "comment": "",
        "child_ranges": [
            "(line 8588,col 5)-(line 8594,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty31()",
        "snippet": "  public void testMissingProperty31() throws Exception {\n    testTypes(\n        \"/** @return {Array|number} */\" +\n        \"function f() {\" +\n        \" return [];\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Array} y */ function g(y) { return y.a; }\");\n  }\n",
        "begin_line": 8597,
        "end_line": 8605,
        "comment": "",
        "child_ranges": [
            "(line 8598,col 5)-(line 8604,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty32()",
        "snippet": "  public void testMissingProperty32() throws Exception {\n    testTypes(\n        \"/** @return {Array|number} */\" +\n        \"function f() {\" +\n        \" return [];\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Date} y */ function g(y) { return y.a; }\",\n        \"Property a never defined on Date\");\n  }\n",
        "begin_line": 8607,
        "end_line": 8616,
        "comment": "",
        "child_ranges": [
            "(line 8608,col 5)-(line 8615,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty33()",
        "snippet": "  public void testMissingProperty33() throws Exception {\n    testTypes(\n      \"/** @param {Object} x */\" +\n      \"function f(x) { !x.foo || x.foo(); }\");\n  }\n",
        "begin_line": 8618,
        "end_line": 8622,
        "comment": "",
        "child_ranges": [
            "(line 8619,col 5)-(line 8621,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty34()",
        "snippet": "  public void testMissingProperty34() throws Exception {\n    testTypes(\n        \"/** @fileoverview \\n * @suppress {missingProperties} */\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\");\n  }\n",
        "begin_line": 8624,
        "end_line": 8630,
        "comment": "",
        "child_ranges": [
            "(line 8625,col 5)-(line 8629,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty35()",
        "snippet": "  public void testMissingProperty35() throws Exception {\n    // Bar has specialProp defined, so Bar|Baz may have specialProp defined.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @constructor */ function Baz() {}\" +\n        \"/** @param {Foo|Bar} x */ function f(x) { x.specialProp = 1; }\" +\n        \"/** @param {Bar|Baz} x */ function g(x) { return x.specialProp; }\");\n  }\n",
        "begin_line": 8632,
        "end_line": 8640,
        "comment": "",
        "child_ranges": [
            "(line 8634,col 5)-(line 8639,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty36()",
        "snippet": "  public void testMissingProperty36() throws Exception {\n    // Foo has baz defined, and SubFoo has bar defined, so some objects with\n    // bar may have baz.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.baz = 0;\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"SubFoo.prototype.bar = 0;\" +\n        \"/** @param {{bar: number}} x */ function f(x) { return x.baz; }\");\n  }\n",
        "begin_line": 8642,
        "end_line": 8651,
        "comment": "",
        "child_ranges": [
            "(line 8645,col 5)-(line 8650,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty37()",
        "snippet": "  public void testMissingProperty37() throws Exception {\n    // This used to emit a missing property warning because we couldn't\n    // determine that the inf(Foo, {isVisible:boolean}) == SubFoo.\n    testTypes(\n        \"/** @param {{isVisible: boolean}} x */ function f(x){\" +\n        \"  x.isVisible = false;\" +\n        \"}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/**\\n\" +\n        \" * @constructor \\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/** @type {boolean} */ SubFoo.prototype.isVisible = true;\" +\n        \"/**\\n\" +\n        \" * @param {Foo} x\\n\" +\n        \" * @return {boolean}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return x.isVisible; }\");\n  }\n",
        "begin_line": 8653,
        "end_line": 8671,
        "comment": "",
        "child_ranges": [
            "(line 8656,col 5)-(line 8670,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty38()",
        "snippet": "  public void testMissingProperty38() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @return {Foo|Bar} */ function f() { return new Foo(); }\" +\n        \"f().missing;\",\n        \"Property missing never defined on (Bar|Foo|null)\");\n  }\n",
        "begin_line": 8673,
        "end_line": 8680,
        "comment": "",
        "child_ranges": [
            "(line 8674,col 5)-(line 8679,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty39()",
        "snippet": "  public void testMissingProperty39() throws Exception {\n    testTypes(\n        \"/** @return {string|number} */ function f() { return 3; }\" +\n        \"f().length;\");\n  }\n",
        "begin_line": 8682,
        "end_line": 8686,
        "comment": "",
        "child_ranges": [
            "(line 8683,col 5)-(line 8685,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty40()",
        "snippet": "  public void testMissingProperty40() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {(Array|MissingType)} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 8688,
        "end_line": 8693,
        "comment": "",
        "child_ranges": [
            "(line 8689,col 5)-(line 8692,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty41()",
        "snippet": "  public void testMissingProperty41() throws Exception {\n    testTypes(\n        \"/** @param {(Array|Date)} x */\" +\n        \"function f(x) { if (x.impossible) x.impossible(); }\");\n  }\n",
        "begin_line": 8695,
        "end_line": 8699,
        "comment": "",
        "child_ranges": [
            "(line 8696,col 5)-(line 8698,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReflectObject1()",
        "snippet": "  public void testReflectObject1() throws Exception {\n    testClosureTypes(\n        \"var goog = {}; goog.reflect = {}; \" +\n        \"goog.reflect.object = function(x, y){};\" +\n        \"/** @constructor */ function A() {}\" +\n        \"goog.reflect.object(A, {x: 3});\",\n        null);\n  }\n",
        "begin_line": 8701,
        "end_line": 8708,
        "comment": "",
        "child_ranges": [
            "(line 8702,col 5)-(line 8707,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReflectObject2()",
        "snippet": "  public void testReflectObject2() throws Exception {\n    testClosureTypes(\n        \"var goog = {}; goog.reflect = {}; \" +\n        \"goog.reflect.object = function(x, y){};\" +\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"goog.reflect.object(A, {x: f(1 + 1)});\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8710,
        "end_line": 8720,
        "comment": "",
        "child_ranges": [
            "(line 8711,col 5)-(line 8719,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends1()",
        "snippet": "  public void testLends1() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends */ ({bar: 1}));\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 8722,
        "end_line": 8728,
        "comment": "",
        "child_ranges": [
            "(line 8723,col 5)-(line 8727,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends2()",
        "snippet": "  public void testLends2() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foob} */ ({bar: 1}));\",\n        \"Variable Foob not declared before @lends annotation.\");\n  }\n",
        "begin_line": 8730,
        "end_line": 8736,
        "comment": "",
        "child_ranges": [
            "(line 8731,col 5)-(line 8735,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends3()",
        "snippet": "  public void testLends3() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, {bar: 1});\" +\n        \"alert(Foo.bar);\",\n        \"Property bar never defined on Foo\");\n  }\n",
        "begin_line": 8738,
        "end_line": 8745,
        "comment": "",
        "child_ranges": [
            "(line 8739,col 5)-(line 8744,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends4()",
        "snippet": "  public void testLends4() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo} */ ({bar: 1}));\" +\n        \"alert(Foo.bar);\");\n  }\n",
        "begin_line": 8747,
        "end_line": 8753,
        "comment": "",
        "child_ranges": [
            "(line 8748,col 5)-(line 8752,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends5()",
        "snippet": "  public void testLends5() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, {bar: 1});\" +\n        \"alert((new Foo()).bar);\",\n        \"Property bar never defined on Foo\");\n  }\n",
        "begin_line": 8755,
        "end_line": 8762,
        "comment": "",
        "child_ranges": [
            "(line 8756,col 5)-(line 8761,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends6()",
        "snippet": "  public void testLends6() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo.prototype} */ ({bar: 1}));\" +\n        \"alert((new Foo()).bar);\");\n  }\n",
        "begin_line": 8764,
        "end_line": 8770,
        "comment": "",
        "child_ranges": [
            "(line 8765,col 5)-(line 8769,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends7()",
        "snippet": "  public void testLends7() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo.prototype|Foo} */ ({bar: 1}));\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 8772,
        "end_line": 8778,
        "comment": "",
        "child_ranges": [
            "(line 8773,col 5)-(line 8777,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends8()",
        "snippet": "  public void testLends8() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @type {number} */ var Foo = 3;\" +\n        \"extend(Foo, /** @lends {Foo} */ ({bar: 1}));\",\n        \"May only lend properties to object types. Foo has type number.\");\n  }\n",
        "begin_line": 8780,
        "end_line": 8786,
        "comment": "",
        "child_ranges": [
            "(line 8781,col 5)-(line 8785,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends9()",
        "snippet": "  public void testLends9() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {!Foo} */ ({bar: 1}));\",\n        Lists.newArrayList(\n            \"Bad type annotation. expected closing }\",\n            \"Bad type annotation. missing object name in @lends tag\"));\n  }\n",
        "begin_line": 8788,
        "end_line": 8796,
        "comment": "",
        "child_ranges": [
            "(line 8789,col 5)-(line 8795,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends10()",
        "snippet": "  public void testLends10() throws Exception {\n    testTypes(\n        \"function defineClass(x) { return function() {}; } \" +\n        \"/** @constructor */\" +\n        \"var Foo = defineClass(\" +\n        \"    /** @lends {Foo.prototype} */ ({/** @type {number} */ bar: 1}));\" +\n        \"/** @return {string} */ function f() { return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8798,
        "end_line": 8808,
        "comment": "",
        "child_ranges": [
            "(line 8799,col 5)-(line 8807,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends11()",
        "snippet": "  public void testLends11() throws Exception {\n    testTypes(\n        \"function defineClass(x, y) { return function() {}; } \" +\n        \"/** @constructor */\" +\n        \"var Foo = function() {};\" +\n        \"/** @return {*} */ Foo.prototype.bar = function() { return 3; };\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"var SubFoo = defineClass(Foo, \" +\n        \"    /** @lends {SubFoo.prototype} */ ({\\n\" +\n        \"      /** @return {number} */ bar: function() { return 3; }}));\" +\n        \"/** @return {string} */ function f() { return (new SubFoo()).bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8810,
        "end_line": 8827,
        "comment": "",
        "child_ranges": [
            "(line 8811,col 5)-(line 8826,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeclaredNativeTypeEquality()",
        "snippet": "  public void testDeclaredNativeTypeEquality() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Object() {};\");\n    assertEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n                 n.getFirstChild().getJSType());\n  }\n",
        "begin_line": 8829,
        "end_line": 8833,
        "comment": "",
        "child_ranges": [
            "(line 8830,col 5)-(line 8830,col 76)",
            "(line 8831,col 5)-(line 8832,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndefinedVar()",
        "snippet": "  public void testUndefinedVar() throws Exception {\n    Node n = parseAndTypeCheck(\"var undefined;\");\n    assertEquals(registry.getNativeType(JSTypeNative.VOID_TYPE),\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8835,
        "end_line": 8839,
        "comment": "",
        "child_ranges": [
            "(line 8836,col 5)-(line 8836,col 49)",
            "(line 8837,col 5)-(line 8838,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFlowScopeBug1()",
        "snippet": "  public void testFlowScopeBug1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @param {number} a \\n\"\n        + \"* @param {number} b */\\n\"\n        + \"function f(a, b) {\\n\"\n        + \"/** @type number */\"\n        + \"var i = 0;\"\n        + \"for (; (i + a) < b; ++i) {}}\");\n\n    // check the type of the add node for i + f\n    assertEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE),\n        n.getFirstChild().getLastChild().getLastChild().getFirstChild()\n        .getNext().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8841,
        "end_line": 8853,
        "comment": "",
        "child_ranges": [
            "(line 8842,col 5)-(line 8847,col 42)",
            "(line 8850,col 5)-(line 8852,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFlowScopeBug2()",
        "snippet": "  public void testFlowScopeBug2() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.hi = false;\"\n        + \"function foo(a, b) {\\n\"\n        + \"  /** @type Array */\"\n        + \"  var arr;\"\n        + \"  /** @type number */\"\n        + \"  var iter;\"\n        + \"  for (iter = 0; iter < arr.length; ++ iter) {\"\n        + \"    /** @type Foo */\"\n        + \"    var afoo = arr[iter];\"\n        + \"    afoo;\"\n        + \"  }\"\n        + \"}\");\n\n    // check the type of afoo when referenced\n    assertEquals(registry.createNullableType(registry.getType(\"Foo\")),\n        n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild().getJSType());\n  }\n",
        "begin_line": 8855,
        "end_line": 8874,
        "comment": "",
        "child_ranges": [
            "(line 8856,col 5)-(line 8868,col 15)",
            "(line 8871,col 5)-(line 8873,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddSingletonGetter()",
        "snippet": "  public void testAddSingletonGetter() {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {};\\n\" +\n        \"goog.addSingletonGetter(Foo);\");\n    ObjectType o = (ObjectType) n.getFirstChild().getJSType();\n    assertEquals(\"function (): Foo\",\n        o.getPropertyType(\"getInstance\").toString());\n    assertEquals(\"Foo\", o.getPropertyType(\"instance_\").toString());\n  }\n",
        "begin_line": 8876,
        "end_line": 8884,
        "comment": "",
        "child_ranges": [
            "(line 8877,col 5)-(line 8879,col 41)",
            "(line 8880,col 5)-(line 8880,col 62)",
            "(line 8881,col 5)-(line 8882,col 53)",
            "(line 8883,col 5)-(line 8883,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckStandaloneAST()",
        "snippet": "  public void testTypeCheckStandaloneAST() throws Exception {\n    Node n = compiler.parseTestCode(\"function Foo() { }\");\n    typeCheck(n);\n    TypedScopeCreator scopeCreator = new TypedScopeCreator(compiler);\n    Scope topScope = scopeCreator.createScope(n, null);\n\n    Node second = compiler.parseTestCode(\"new Foo\");\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, second);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry, topScope, scopeCreator, CheckLevel.WARNING, CheckLevel.OFF)\n        .process(null, second);\n\n    assertEquals(1, compiler.getWarningCount());\n    assertEquals(\"cannot instantiate non-constructor\",\n        compiler.getWarnings()[0].description);\n  }\n",
        "begin_line": 8886,
        "end_line": 8908,
        "comment": "",
        "child_ranges": [
            "(line 8887,col 5)-(line 8887,col 58)",
            "(line 8888,col 5)-(line 8888,col 17)",
            "(line 8889,col 5)-(line 8889,col 69)",
            "(line 8890,col 5)-(line 8890,col 55)",
            "(line 8892,col 5)-(line 8892,col 52)",
            "(line 8894,col 5)-(line 8894,col 41)",
            "(line 8895,col 5)-(line 8895,col 66)",
            "(line 8896,col 5)-(line 8896,col 46)",
            "(line 8898,col 5)-(line 8903,col 31)",
            "(line 8905,col 5)-(line 8905,col 48)",
            "(line 8906,col 5)-(line 8907,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUpdateParameterTypeOnClosure()",
        "snippet": "  public void testUpdateParameterTypeOnClosure() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @constructor\\n\" +\n        \"* @param {*=} opt_value\\n\" +\n        \"* @return {?}\\n\" +\n        \"*/\\n\" +\n        \"function Object(opt_value) {}\\n\" +\n        \"/**\\n\" +\n        \"* @constructor\\n\" +\n        \"* @param {...*} var_args\\n\" +\n        \"*/\\n\" +\n        \"function Function(var_args) {}\\n\" +\n        \"/**\\n\" +\n        \"* @type {Function}\\n\" +\n        \"*/\\n\" +\n        // The line below sets JSDocInfo on Object so that the type of the\n        // argument to function f has JSDoc through its prototype chain.\n        \"Object.prototype.constructor = function() {};\\n\",\n        \"/**\\n\" +\n        \"* @param {function(): boolean} fn\\n\" +\n        \"*/\\n\" +\n        \"function f(fn) {}\\n\" +\n        \"f(function(g) { });\\n\",\n        null,\n        false);\n  }\n",
        "begin_line": 8910,
        "end_line": 8936,
        "comment": "",
        "child_ranges": [
            "(line 8911,col 5)-(line 8935,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType1()",
        "snippet": "  public void testBadTemplateType1() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {T} y\\n\" +\n        \"* @param {function(this:T, ...)} z\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y, z) {}\\n\" +\n        \"f(this, this, function() { this });\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format());\n  }\n",
        "begin_line": 8938,
        "end_line": 8949,
        "comment": "",
        "child_ranges": [
            "(line 8939,col 5)-(line 8948,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType2()",
        "snippet": "  public void testBadTemplateType2() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {function(this:T, ...)} y\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y) {}\\n\" +\n        \"f(0, function() {});\",\n        TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(\"number\"));\n  }\n",
        "begin_line": 8951,
        "end_line": 8961,
        "comment": "",
        "child_ranges": [
            "(line 8952,col 5)-(line 8960,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType3()",
        "snippet": "  public void testBadTemplateType3() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {T} x\\n\" +\n        \" * @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x) {}\\n\" +\n        \"f(this);\",\n        TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format());\n  }\n",
        "begin_line": 8963,
        "end_line": 8972,
        "comment": "",
        "child_ranges": [
            "(line 8964,col 5)-(line 8971,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType4()",
        "snippet": "  public void testBadTemplateType4() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n  }\n",
        "begin_line": 8974,
        "end_line": 8982,
        "comment": "",
        "child_ranges": [
            "(line 8975,col 5)-(line 8981,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType5()",
        "snippet": "  public void testBadTemplateType5() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"* @return {T}\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n  }\n",
        "begin_line": 8984,
        "end_line": 8993,
        "comment": "",
        "child_ranges": [
            "(line 8985,col 5)-(line 8992,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralUndefinedThisArgument()",
        "snippet": "  public void testFunctionLiteralUndefinedThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() { this; });\",\n        \"Function literal argument refers to undefined this argument\");\n  }\n",
        "begin_line": 8995,
        "end_line": 9005,
        "comment": "",
        "child_ranges": [
            "(line 8996,col 5)-(line 9004,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralDefinedThisArgument()",
        "snippet": "  public void testFunctionLiteralDefinedThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() { this; }, {});\");\n  }\n",
        "begin_line": 9007,
        "end_line": 9016,
        "comment": "",
        "child_ranges": [
            "(line 9008,col 5)-(line 9015,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralUnreadNullThisArgument()",
        "snippet": "  public void testFunctionLiteralUnreadNullThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() {}, null);\");\n  }\n",
        "begin_line": 9018,
        "end_line": 9027,
        "comment": "",
        "child_ranges": [
            "(line 9019,col 5)-(line 9026,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnionTemplateThisType()",
        "snippet": "  public void testUnionTemplateThisType() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {F|Array} */ function g() { return []; }\" +\n        \"/** @param {F} x */ function h(x) { }\" +\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {function(this:T, ...)} y\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y) {}\\n\" +\n        \"f(g(), function() { h(this); });\",\n        \"actual parameter 1 of h does not match formal parameter\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (F|null)\");\n  }\n",
        "begin_line": 9029,
        "end_line": 9044,
        "comment": "",
        "child_ranges": [
            "(line 9030,col 5)-(line 9043,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testActiveXObject()",
        "snippet": "  public void testActiveXObject() throws Exception {\n    testTypes(\n        \"/** @type {Object} */ var x = new ActiveXObject();\" +\n        \"/** @type { {impossibleProperty} } */ var y = new ActiveXObject();\");\n  }\n",
        "begin_line": 9046,
        "end_line": 9050,
        "comment": "",
        "child_ranges": [
            "(line 9047,col 5)-(line 9049,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType1()",
        "snippet": "  public void testRecordType1() throws Exception {\n    testTypes(\n        \"/** @param {{prop: number}} x */\" +\n        \"function f(x) {}\" +\n        \"f({});\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : {prop: (number|undefined)}\\n\" +\n        \"required: {prop: number}\");\n  }\n",
        "begin_line": 9052,
        "end_line": 9060,
        "comment": "",
        "child_ranges": [
            "(line 9053,col 5)-(line 9059,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType2()",
        "snippet": "  public void testRecordType2() throws Exception {\n    testTypes(\n        \"/** @param {{prop: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"f({});\");\n  }\n",
        "begin_line": 9062,
        "end_line": 9067,
        "comment": "",
        "child_ranges": [
            "(line 9063,col 5)-(line 9066,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType3()",
        "snippet": "  public void testRecordType3() throws Exception {\n    testTypes(\n        \"/** @param {{prop: number}} x */\" +\n        \"function f(x) {}\" +\n        \"f({prop: 'x'});\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : {prop: (number|string)}\\n\" +\n        \"required: {prop: number}\");\n  }\n",
        "begin_line": 9069,
        "end_line": 9077,
        "comment": "",
        "child_ranges": [
            "(line 9070,col 5)-(line 9076,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType4()",
        "snippet": "  public void testRecordType4() throws Exception {\n    // Notice that we do not do flow-based inference on the object type:\n    // We don't try to prove that x.prop may not be string until x\n    // gets passed to g.\n    testClosureTypesMultipleWarnings(\n        \"/** @param {{prop: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"/** @param {{prop: (string|undefined)}} x */\" +\n        \"function g(x) {}\" +\n        \"var x = {}; f(x); g(x);\",\n        Lists.newArrayList(\n            \"actual parameter 1 of f does not match formal parameter\\n\" +\n            \"found   : {prop: (number|string|undefined)}\\n\" +\n            \"required: {prop: (number|undefined)}\",\n            \"actual parameter 1 of g does not match formal parameter\\n\" +\n            \"found   : {prop: (number|string|undefined)}\\n\" +\n            \"required: {prop: (string|undefined)}\"));\n  }\n",
        "begin_line": 9079,
        "end_line": 9096,
        "comment": "",
        "child_ranges": [
            "(line 9083,col 5)-(line 9095,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType5()",
        "snippet": "  public void testRecordType5() throws Exception {\n    testTypes(\n        \"/** @param {{prop: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"/** @param {{otherProp: (string|undefined)}} x */\" +\n        \"function g(x) {}\" +\n        \"var x = {}; f(x); g(x);\");\n  }\n",
        "begin_line": 9098,
        "end_line": 9105,
        "comment": "",
        "child_ranges": [
            "(line 9099,col 5)-(line 9104,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType6()",
        "snippet": "  public void testRecordType6() throws Exception {\n    testTypes(\n        \"/** @return {{prop: (number|undefined)}} x */\" +\n        \"function f() { return {}; }\");\n  }\n",
        "begin_line": 9107,
        "end_line": 9111,
        "comment": "",
        "child_ranges": [
            "(line 9108,col 5)-(line 9110,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType7()",
        "snippet": "  public void testRecordType7() throws Exception {\n    testTypes(\n        \"/** @return {{prop: (number|undefined)}} x */\" +\n        \"function f() { var x = {}; g(x); return x; }\" +\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : {prop: (number|undefined)}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9113,
        "end_line": 9122,
        "comment": "",
        "child_ranges": [
            "(line 9114,col 5)-(line 9121,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType8()",
        "snippet": "  public void testRecordType8() throws Exception {\n    testTypes(\n        \"/** @return {{prop: (number|string)}} x */\" +\n        \"function f() { var x = {prop: 3}; g(x.prop); return x; }\" +\n        \"/** @param {string} x */\" +\n        \"function g(x) {}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 9124,
        "end_line": 9133,
        "comment": "",
        "child_ranges": [
            "(line 9125,col 5)-(line 9132,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateRecordFields1()",
        "snippet": "  public void testDuplicateRecordFields1() throws Exception {\n    testTypes(\"/**\"\n         + \"* @param {{x:string, x:number}} a\"\n         + \"*/\"\n         + \"function f(a) {};\",\n         \"Parse error. Duplicate record field x\");\n  }\n",
        "begin_line": 9135,
        "end_line": 9141,
        "comment": "",
        "child_ranges": [
            "(line 9136,col 5)-(line 9140,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateRecordFields2()",
        "snippet": "  public void testDuplicateRecordFields2() throws Exception {\n    testTypes(\"/**\"\n         + \"* @param {{name:string,number:x,number:y}} a\"\n         + \" */\"\n         + \"function f(a) {};\",\n         new String[] {\"Bad type annotation. Unknown type x\",\n           \"Parse error. Duplicate record field number\",\n           \"Bad type annotation. Unknown type y\"});\n  }\n",
        "begin_line": 9143,
        "end_line": 9151,
        "comment": "",
        "child_ranges": [
            "(line 9144,col 5)-(line 9150,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface1()",
        "snippet": "  public void testMultipleExtendsInterface1() throws Exception {\n    testTypes(\"/** @interface */ function base1() {}\\n\"\n        + \"/** @interface */ function base2() {}\\n\"\n        + \"/** @interface\\n\"\n        + \"* @extends {base1}\\n\"\n        + \"* @extends {base2}\\n\"\n        + \"*/\\n\"\n        + \"function derived() {}\");\n  }\n",
        "begin_line": 9153,
        "end_line": 9161,
        "comment": "",
        "child_ranges": [
            "(line 9154,col 5)-(line 9160,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface2()",
        "snippet": "  public void testMultipleExtendsInterface2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @desc description */Int0.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int0 is not implemented by type Foo\");\n  }\n",
        "begin_line": 9163,
        "end_line": 9172,
        "comment": "",
        "child_ranges": [
            "(line 9164,col 5)-(line 9171,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface3()",
        "snippet": "  public void testMultipleExtendsInterface3() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @desc description */Int1.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int1 is not implemented by type Foo\");\n  }\n",
        "begin_line": 9174,
        "end_line": 9183,
        "comment": "",
        "child_ranges": [
            "(line 9175,col 5)-(line 9182,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface4()",
        "snippet": "  public void testMultipleExtendsInterface4() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} \\n\" +\n        \" @extends {number} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"Int2 @extends non-object type number\");\n  }\n",
        "begin_line": 9185,
        "end_line": 9194,
        "comment": "",
        "child_ranges": [
            "(line 9186,col 5)-(line 9193,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface5()",
        "snippet": "  public void testMultipleExtendsInterface5() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @constructor */function Int1() {};\" +\n        \"/** @desc description @ return {string} x */\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\",\n        \"Int2 cannot extend this type; a constructor can only extend \" +\n        \"objects and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 9196,
        "end_line": 9205,
        "comment": "",
        "child_ranges": [
            "(line 9197,col 5)-(line 9204,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface6()",
        "snippet": "  public void testMultipleExtendsInterface6() throws Exception {\n    testTypes(\n        \"/** @interface */function Super1() {};\" +\n        \"/** @interface */function Super2() {};\" +\n        \"/** @param {number} bar */Super2.prototype.foo = function(bar) {};\" +\n        \"/** @interface\\n @extends {Super1}\\n \" +\n        \"@extends {Super2} */function Sub() {};\" +\n        \"/** @override\\n @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super2\\n\" +\n        \"original: function (this:Super2, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 9207,
        "end_line": 9220,
        "comment": "",
        "child_ranges": [
            "(line 9208,col 5)-(line 9219,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterfaceAssignment()",
        "snippet": "  public void testMultipleExtendsInterfaceAssignment() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */ var I2 = function() {}\\n\" +\n        \"/** @interface\\n@extends {I1}\\n@extends {I2}*/\" +\n        \"var I3 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I3}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n         \"/** @type {I1} */var i1 = t;\\n\" +\n         \"/** @type {I2} */var i2 = t;\\n\" +\n         \"/** @type {I3} */var i3 = t;\\n\" +\n         \"i1 = i3;\\n\" +\n         \"i2 = i3;\\n\");\n  }\n",
        "begin_line": 9222,
        "end_line": 9234,
        "comment": "",
        "child_ranges": [
            "(line 9223,col 5)-(line 9233,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterfaceParamPass()",
        "snippet": "  public void testMultipleExtendsInterfaceParamPass() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */ var I2 = function() {}\\n\" +\n        \"/** @interface\\n@extends {I1}\\n@extends {I2}*/\" +\n        \"var I3 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I3}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @param x I1 \\n@param y I2\\n@param z I3*/function foo(x,y,z){};\\n\" +\n        \"foo(t,t,t)\\n\");\n  }\n",
        "begin_line": 9236,
        "end_line": 9245,
        "comment": "",
        "child_ranges": [
            "(line 9237,col 5)-(line 9244,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadMultipleExtendsClass()",
        "snippet": "  public void testBadMultipleExtendsClass() throws Exception {\n    testTypes(\"/** @constructor */ function base1() {}\\n\"\n        + \"/** @constructor */ function base2() {}\\n\"\n        + \"/** @constructor\\n\"\n        + \"* @extends {base1}\\n\"\n        + \"* @extends {base2}\\n\"\n        + \"*/\\n\"\n        + \"function derived() {}\",\n        \"Bad type annotation. type annotation incompatible \"\n        + \"with other annotations\");\n  }\n",
        "begin_line": 9247,
        "end_line": 9257,
        "comment": "",
        "child_ranges": [
            "(line 9248,col 5)-(line 9256,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceExtendsResolution()",
        "snippet": "  public void testInterfaceExtendsResolution() throws Exception {\n    testTypes(\"/** @interface \\n @extends {A} */ function B() {};\\n\" +\n        \"/** @constructor \\n @implements {B} */ function C() {};\\n\" +\n        \"/** @interface */ function A() {};\");\n  }\n",
        "begin_line": 9259,
        "end_line": 9263,
        "comment": "",
        "child_ranges": [
            "(line 9260,col 5)-(line 9262,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyCanBeDefinedInObject()",
        "snippet": "  public void testPropertyCanBeDefinedInObject() throws Exception {\n    testTypes(\"/** @interface */ function I() {};\" +\n        \"I.prototype.bar = function() {};\" +\n        \"/** @type {Object} */ var foo;\" +\n        \"foo.bar();\");\n  }\n",
        "begin_line": 9265,
        "end_line": 9270,
        "comment": "",
        "child_ranges": [
            "(line 9266,col 5)-(line 9269,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.checkObjectType(com.google.javascript.rhino.jstype.ObjectType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void checkObjectType(ObjectType objectType, String propertyName,\n        JSType expectedType) {\n    assertTrue(\"Expected \" + objectType.getReferenceName() +\n        \" to have property \" +\n        propertyName, objectType.hasProperty(propertyName));\n    assertEquals(\"Expected \" + objectType.getReferenceName() +\n        \"'s property \" +\n        propertyName + \" to have type \" + expectedType,\n        expectedType, objectType.getPropertyType(propertyName));\n  }\n",
        "begin_line": 9272,
        "end_line": 9281,
        "comment": "",
        "child_ranges": [
            "(line 9274,col 5)-(line 9276,col 60)",
            "(line 9277,col 5)-(line 9280,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility1()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility1() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\",\n        \"Interface Int2 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 9283,
        "end_line": 9295,
        "comment": "",
        "child_ranges": [
            "(line 9284,col 5)-(line 9294,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility2()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @interface */function Int2() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @type {Object} */\" +\n        \"Int2.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} \\n\" +\n        \"@extends {Int2}*/\" +\n        \"function Int3() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in \" +\n            \"its super interfaces Int0 and Int1\",\n            \"Interface Int3 has a property foo with incompatible types in \" +\n            \"its super interfaces Int1 and Int2\"\n        });\n  }\n",
        "begin_line": 9297,
        "end_line": 9317,
        "comment": "",
        "child_ranges": [
            "(line 9298,col 5)-(line 9316,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility3()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility3() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\",\n        \"Interface Int3 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 9319,
        "end_line": 9332,
        "comment": "",
        "child_ranges": [
            "(line 9320,col 5)-(line 9331,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility4()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility4() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface \\n @extends {Int0} */ function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @interface */function Int2() {};\" +\n        \"/** @interface \\n @extends {Int2} */ function Int3() {};\" +\n        \"/** @type {string} */\" +\n        \"Int2.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} \\n @extends {Int3} */\" +\n        \"function Int4() {};\",\n        \"Interface Int4 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int2\");\n  }\n",
        "begin_line": 9334,
        "end_line": 9348,
        "comment": "",
        "child_ranges": [
            "(line 9335,col 5)-(line 9347,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility5()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility5() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {number} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int1\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\"});\n  }\n",
        "begin_line": 9350,
        "end_line": 9371,
        "comment": "",
        "child_ranges": [
            "(line 9351,col 5)-(line 9370,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility6()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility6() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {string} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        \"Interface Int3 has a property foo with incompatible types in its\" +\n        \" super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 9373,
        "end_line": 9391,
        "comment": "",
        "child_ranges": [
            "(line 9374,col 5)-(line 9390,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility7()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility7() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {Object} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int1\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\"});\n  }\n",
        "begin_line": 9393,
        "end_line": 9414,
        "comment": "",
        "child_ranges": [
            "(line 9394,col 5)-(line 9413,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility8()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility8() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.bar;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {Object} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @type {Null} */\" +\n        \"Int4.prototype.bar;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int5 has a property bar with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int4\"});\n  }\n",
        "begin_line": 9416,
        "end_line": 9439,
        "comment": "",
        "child_ranges": [
            "(line 9417,col 5)-(line 9438,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String)",
        "snippet": "  private void testTypes(String js) throws Exception {\n    testTypes(js, (String) null);\n  }\n",
        "begin_line": 9441,
        "end_line": 9443,
        "comment": "",
        "child_ranges": [
            "(line 9442,col 5)-(line 9442,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testTypes(String js, String description) throws Exception {\n    testTypes(js, description, false);\n  }\n",
        "begin_line": 9445,
        "end_line": 9447,
        "comment": "",
        "child_ranges": [
            "(line 9446,col 5)-(line 9446,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testTypes(String js, DiagnosticType type) throws Exception {\n    testTypes(js, type.format(), false);\n  }\n",
        "begin_line": 9449,
        "end_line": 9451,
        "comment": "",
        "child_ranges": [
            "(line 9450,col 5)-(line 9450,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosureTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testClosureTypes(String js, String description)\n      throws Exception {\n    testClosureTypesMultipleWarnings(js,\n        description == null ? null : Lists.newArrayList(description));\n  }\n",
        "begin_line": 9453,
        "end_line": 9457,
        "comment": "",
        "child_ranges": [
            "(line 9455,col 5)-(line 9456,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosureTypesMultipleWarnings(java.lang.String, java.util.List<java.lang.String>)",
        "snippet": "  private void testClosureTypesMultipleWarnings(\n      String js, List<String> descriptions) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    // For processing goog.addDependency for forward typedefs.\n    new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR, true)\n        .process(null, n);\n\n    CodingConvention convention = compiler.getCodingConvention();\n    new TypeCheck(compiler,\n        new ClosureReverseAbstractInterpreter(\n            convention, registry).append(\n                new SemanticReverseAbstractInterpreter(\n                    convention, registry))\n            .getFirst(),\n        registry)\n        .processForTesting(null, n);\n\n    assertEquals(\n        \"unexpected error(s) : \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    if (descriptions == null) {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          0, compiler.getWarningCount());\n    } else {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          descriptions.size(), compiler.getWarningCount());\n      for (int i = 0; i < descriptions.size(); i++) {\n        assertEquals(descriptions.get(i),\n            compiler.getWarnings()[i].description);\n      }\n    }\n  }\n",
        "begin_line": 9459,
        "end_line": 9504,
        "comment": "",
        "child_ranges": [
            "(line 9461,col 5)-(line 9461,col 40)",
            "(line 9462,col 5)-(line 9462,col 41)",
            "(line 9463,col 5)-(line 9463,col 61)",
            "(line 9464,col 5)-(line 9464,col 46)",
            "(line 9466,col 5)-(line 9468,col 37)",
            "(line 9471,col 5)-(line 9472,col 26)",
            "(line 9474,col 5)-(line 9474,col 65)",
            "(line 9475,col 5)-(line 9482,col 36)",
            "(line 9484,col 5)-(line 9487,col 37)",
            "(line 9489,col 5)-(line 9503,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String js, String description, boolean isError)\n      throws Exception {\n    testTypes(DEFAULT_EXTERNS, js, description, isError);\n  }\n",
        "begin_line": 9506,
        "end_line": 9509,
        "comment": "",
        "child_ranges": [
            "(line 9508,col 5)-(line 9508,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String externs, String js, String description, boolean isError)\n      throws Exception {\n    Node n = parseAndTypeCheck(externs, js);\n\n    JSError[] errors = compiler.getErrors();\n    if (description != null && isError) {\n      assertTrue(\"expected an error\", errors.length > 0);\n      assertEquals(description, errors[0].description);\n      errors = Arrays.asList(errors).subList(1, errors.length).toArray(\n          new JSError[errors.length - 1]);\n    }\n    if (errors.length > 0) {\n      fail(\"unexpected error(s):\\n\" + Joiner.on(\"\\n\").join(errors));\n    }\n\n    JSError[] warnings = compiler.getWarnings();\n    if (description != null && !isError) {\n      assertTrue(\"expected a warning\", warnings.length > 0);\n      assertEquals(description, warnings[0].description);\n      warnings = Arrays.asList(warnings).subList(1, warnings.length).toArray(\n          new JSError[warnings.length - 1]);\n    }\n    if (warnings.length > 0) {\n      fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n    }\n  }\n",
        "begin_line": 9511,
        "end_line": 9536,
        "comment": "",
        "child_ranges": [
            "(line 9513,col 5)-(line 9513,col 44)",
            "(line 9515,col 5)-(line 9515,col 44)",
            "(line 9516,col 5)-(line 9521,col 5)",
            "(line 9522,col 5)-(line 9524,col 5)",
            "(line 9526,col 5)-(line 9526,col 48)",
            "(line 9527,col 5)-(line 9532,col 5)",
            "(line 9533,col 5)-(line 9535,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String js) {\n    return parseAndTypeCheck(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 9541,
        "end_line": 9543,
        "comment": "\n   * Parses and type checks the JavaScript code.\n   ",
        "child_ranges": [
            "(line 9542,col 5)-(line 9542,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String, java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String externs, String js) {\n    return parseAndTypeCheckWithScope(externs, js).root;\n  }\n",
        "begin_line": 9545,
        "end_line": 9547,
        "comment": "",
        "child_ranges": [
            "(line 9546,col 5)-(line 9546,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(String js) {\n    return parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 9553,
        "end_line": 9555,
        "comment": "\n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
        "child_ranges": [
            "(line 9554,col 5)-(line 9554,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String, java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(\n      String externs, String js) {\n    compiler.init(\n        Lists.newArrayList(JSSourceFile.fromCode(\"[externs]\", externs)),\n        Lists.newArrayList(JSSourceFile.fromCode(\"[testcode]\", js)),\n        compiler.getOptions());\n\n    Node n = compiler.getInput(new InputId(\"[testcode]\")).getAstRoot(compiler);\n    Node externsNode = compiler.getInput(new InputId(\"[externs]\"))\n        .getAstRoot(compiler);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    Scope s = makeTypeCheck().processForTesting(externsNode, n);\n    return new TypeCheckResult(n, s);\n  }\n",
        "begin_line": 9557,
        "end_line": 9576,
        "comment": "",
        "child_ranges": [
            "(line 9559,col 5)-(line 9562,col 31)",
            "(line 9564,col 5)-(line 9564,col 79)",
            "(line 9565,col 5)-(line 9566,col 30)",
            "(line 9567,col 5)-(line 9567,col 65)",
            "(line 9568,col 5)-(line 9568,col 46)",
            "(line 9570,col 5)-(line 9572,col 37)",
            "(line 9574,col 5)-(line 9574,col 64)",
            "(line 9575,col 5)-(line 9575,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.typeCheck(com.google.javascript.rhino.Node)",
        "snippet": "  private Node typeCheck(Node n) {\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, n);\n    return n;\n  }\n",
        "begin_line": 9578,
        "end_line": 9585,
        "comment": "",
        "child_ranges": [
            "(line 9579,col 5)-(line 9579,col 45)",
            "(line 9580,col 5)-(line 9580,col 65)",
            "(line 9581,col 5)-(line 9581,col 46)",
            "(line 9583,col 5)-(line 9583,col 47)",
            "(line 9584,col 5)-(line 9584,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.makeTypeCheck()",
        "snippet": "  private TypeCheck makeTypeCheck() {\n    return new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry,\n        reportMissingOverrides,\n        CheckLevel.OFF);\n  }\n",
        "begin_line": 9587,
        "end_line": 9595,
        "comment": "",
        "child_ranges": [
            "(line 9588,col 5)-(line 9594,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String[])",
        "snippet": "  void testTypes(String js, String[] warnings) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n\n    makeTypeCheck().processForTesting(null, n);\n    assertEquals(0, compiler.getErrorCount());\n    if (warnings != null) {\n      assertEquals(warnings.length, compiler.getWarningCount());\n      JSError[] messages = compiler.getWarnings();\n      for (int i = 0; i < warnings.length && i < compiler.getWarningCount();\n           i++) {\n        assertEquals(warnings[i], messages[i].description);\n      }\n    } else {\n      assertEquals(0, compiler.getWarningCount());\n    }\n  }\n",
        "begin_line": 9597,
        "end_line": 9615,
        "comment": "",
        "child_ranges": [
            "(line 9598,col 5)-(line 9598,col 40)",
            "(line 9599,col 5)-(line 9599,col 46)",
            "(line 9600,col 5)-(line 9600,col 45)",
            "(line 9601,col 5)-(line 9601,col 65)",
            "(line 9603,col 5)-(line 9603,col 47)",
            "(line 9604,col 5)-(line 9604,col 46)",
            "(line 9605,col 5)-(line 9614,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.suppressMissingProperty(java.lang.String...)",
        "snippet": "  String suppressMissingProperty(String ... props) {\n    String result = \"function dummy(x) { \";\n    for (String prop : props) {\n      result += \"x.\" + prop + \" = 3;\";\n    }\n    return result + \"}\";\n  }\n",
        "begin_line": 9617,
        "end_line": 9623,
        "comment": "",
        "child_ranges": [
            "(line 9618,col 5)-(line 9618,col 43)",
            "(line 9619,col 5)-(line 9621,col 5)",
            "(line 9622,col 5)-(line 9622,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult.TypeCheckResult(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "    private TypeCheckResult(Node root, Scope scope) {\n      this.root = root;\n      this.scope = scope;\n    }\n",
        "begin_line": 9629,
        "end_line": 9632,
        "comment": "",
        "child_ranges": [
            "(line 9630,col 7)-(line 9630,col 23)",
            "(line 9631,col 7)-(line 9631,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.LooseTypeCheckTest",
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 52)",
            "(line 70,col 5)-(line 70,col 52)",
            "(line 71,col 5)-(line 72,col 65)",
            "(line 73,col 5)-(line 73,col 55)",
            "(line 74,col 5)-(line 74,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.LooseTypeCheckTest",
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.LooseTypeCheckTest",
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    compiler = new Compiler();\n    compiler.initOptions(getOptions());\n    registry = compiler.getTypeRegistry();\n    initTypes();\n  }\n",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 83,col 30)",
            "(line 84,col 5)-(line 84,col 39)",
            "(line 85,col 5)-(line 85,col 42)",
            "(line 86,col 5)-(line 86,col 16)"
        ]
    }
]