[
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(DurationFormatUtilsTest.class);\n        suite.setName(\"DurationFormatUtils Tests\");\n        return suite;\n    }\n",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 71)",
            "(line 48,col 9)-(line 48,col 51)",
            "(line 49,col 9)-(line 49,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.DurationFormatUtilsTest(java.lang.String)",
        "snippet": "    public DurationFormatUtilsTest(String s) {\n        super(s);\n    }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new DurationFormatUtils());\n        Constructor[] cons = DurationFormatUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(DurationFormatUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(DurationFormatUtils.class.getModifiers()));\n    }\n",
        "begin_line": 57,
        "end_line": 64,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 49)",
            "(line 59,col 9)-(line 59,col 81)",
            "(line 60,col 9)-(line 60,col 37)",
            "(line 61,col 9)-(line 61,col 70)",
            "(line 62,col 9)-(line 62,col 88)",
            "(line 63,col 9)-(line 63,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords()",
        "snippet": "    public void testFormatDurationWords() {\n        String text = null;\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false);\n        assertEquals(\"50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false);\n        assertEquals(\"1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false);\n        assertEquals(\"2 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false);\n        assertEquals(\"2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false);\n        assertEquals(\"1 hour 12 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false);\n        assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true);\n        assertEquals(\"50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true);\n        assertEquals(\"1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true);\n        assertEquals(\"2 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true);\n        assertEquals(\"2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true);\n        assertEquals(\"1 hour 12 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true);\n        assertEquals(\"1 day\", text);\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 2 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true);\n        assertEquals(\"0 days 1 hour 12 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true);\n        assertEquals(\"1 day\", text);\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false);\n        assertEquals(\"0 days 1 hour 12 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\n        assertEquals(\"1 day 1 hour 12 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\n        assertEquals(\"2 days 1 hour 12 minutes 0 seconds\", text);\n        for (int i = 2; i < 31; i++) {\n            text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000, false, false);\n            // assertEquals(i + \" days 0 hours 0 minutes 0 seconds\", text);\n            //            \n            // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours\n            // -2 minutes -47...>\n            // at junit.framework.Assert.assertEquals(Assert.java:81)\n            // at junit.framework.Assert.assertEquals(Assert.java:87)\n            // at\n            // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124)\n            // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n            // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n            // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n            // at java.lang.reflect.Method.invoke(Method.java:324)\n            // at junit.framework.TestCase.runTest(TestCase.java:154)\n            // at junit.framework.TestCase.runBare(TestCase.java:127)\n            // at junit.framework.TestResult$1.protect(TestResult.java:106)\n            // at junit.framework.TestResult.runProtected(TestResult.java:124)\n            // at junit.framework.TestResult.run(TestResult.java:109)\n            // at junit.framework.TestCase.run(TestCase.java:118)\n            // at junit.framework.TestSuite.runTest(TestSuite.java:208)\n            // at junit.framework.TestSuite.run(TestSuite.java:203)\n            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n        }\n    }\n",
        "begin_line": 67,
        "end_line": 149,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 27)",
            "(line 70,col 9)-(line 70,col 79)",
            "(line 71,col 9)-(line 71,col 41)",
            "(line 72,col 9)-(line 72,col 79)",
            "(line 73,col 9)-(line 73,col 49)",
            "(line 74,col 9)-(line 74,col 80)",
            "(line 75,col 9)-(line 75,col 50)",
            "(line 76,col 9)-(line 76,col 80)",
            "(line 77,col 9)-(line 77,col 49)",
            "(line 78,col 9)-(line 78,col 84)",
            "(line 79,col 9)-(line 79,col 58)",
            "(line 80,col 9)-(line 80,col 89)",
            "(line 81,col 9)-(line 81,col 64)",
            "(line 83,col 9)-(line 83,col 78)",
            "(line 84,col 9)-(line 84,col 41)",
            "(line 85,col 9)-(line 85,col 78)",
            "(line 86,col 9)-(line 86,col 49)",
            "(line 87,col 9)-(line 87,col 79)",
            "(line 88,col 9)-(line 88,col 40)",
            "(line 89,col 9)-(line 89,col 79)",
            "(line 90,col 9)-(line 90,col 49)",
            "(line 91,col 9)-(line 91,col 83)",
            "(line 92,col 9)-(line 92,col 48)",
            "(line 93,col 9)-(line 93,col 88)",
            "(line 94,col 9)-(line 94,col 36)",
            "(line 96,col 9)-(line 96,col 79)",
            "(line 97,col 9)-(line 97,col 66)",
            "(line 98,col 9)-(line 98,col 79)",
            "(line 99,col 9)-(line 99,col 64)",
            "(line 100,col 9)-(line 100,col 80)",
            "(line 101,col 9)-(line 101,col 55)",
            "(line 102,col 9)-(line 102,col 80)",
            "(line 103,col 9)-(line 103,col 64)",
            "(line 104,col 9)-(line 104,col 84)",
            "(line 105,col 9)-(line 105,col 55)",
            "(line 106,col 9)-(line 106,col 89)",
            "(line 107,col 9)-(line 107,col 36)",
            "(line 109,col 9)-(line 109,col 80)",
            "(line 110,col 9)-(line 110,col 66)",
            "(line 111,col 9)-(line 111,col 80)",
            "(line 112,col 9)-(line 112,col 64)",
            "(line 113,col 9)-(line 113,col 81)",
            "(line 114,col 9)-(line 114,col 65)",
            "(line 115,col 9)-(line 115,col 81)",
            "(line 116,col 9)-(line 116,col 64)",
            "(line 117,col 9)-(line 117,col 85)",
            "(line 118,col 9)-(line 118,col 65)",
            "(line 119,col 9)-(line 119,col 107)",
            "(line 120,col 9)-(line 120,col 64)",
            "(line 121,col 9)-(line 121,col 111)",
            "(line 122,col 9)-(line 122,col 65)",
            "(line 123,col 9)-(line 148,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationPluralWords()",
        "snippet": "    public void testFormatDurationPluralWords() {\n        long oneSecond = 1000;\n        long oneMinute = oneSecond * 60;\n        long oneHour = oneMinute * 60;\n        long oneDay = oneHour * 24;\n        String text = null;\n\n        text = DurationFormatUtils.formatDurationWords(oneSecond, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(oneSecond * 2, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 2 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneSecond * 11, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 11 seconds\", text);\n\n        text = DurationFormatUtils.formatDurationWords(oneMinute, false, false);\n        assertEquals(\"0 days 0 hours 1 minute 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneMinute * 2, false, false);\n        assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneMinute * 11, false, false);\n        assertEquals(\"0 days 0 hours 11 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneMinute + oneSecond, false, false);\n        assertEquals(\"0 days 0 hours 1 minute 1 second\", text);\n\n        text = DurationFormatUtils.formatDurationWords(oneHour, false, false);\n        assertEquals(\"0 days 1 hour 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneHour * 2, false, false);\n        assertEquals(\"0 days 2 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneHour * 11, false, false);\n        assertEquals(\"0 days 11 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneHour + oneMinute + oneSecond, false, false);\n        assertEquals(\"0 days 1 hour 1 minute 1 second\", text);\n\n        text = DurationFormatUtils.formatDurationWords(oneDay, false, false);\n        assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneDay * 2, false, false);\n        assertEquals(\"2 days 0 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneDay * 11, false, false);\n        assertEquals(\"11 days 0 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneDay + oneHour + oneMinute + oneSecond, false, false);\n        assertEquals(\"1 day 1 hour 1 minute 1 second\", text);\n    }\n",
        "begin_line": 154,
        "end_line": 194,
        "comment": "\n     * Tests that \"1 <unit>s\" gets converted to \"1 <unit>\" but that \"11 <unit>s\" is left alone.\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 30)",
            "(line 156,col 9)-(line 156,col 40)",
            "(line 157,col 9)-(line 157,col 38)",
            "(line 158,col 9)-(line 158,col 35)",
            "(line 159,col 9)-(line 159,col 27)",
            "(line 161,col 9)-(line 161,col 80)",
            "(line 162,col 9)-(line 162,col 64)",
            "(line 163,col 9)-(line 163,col 84)",
            "(line 164,col 9)-(line 164,col 65)",
            "(line 165,col 9)-(line 165,col 85)",
            "(line 166,col 9)-(line 166,col 66)",
            "(line 168,col 9)-(line 168,col 80)",
            "(line 169,col 9)-(line 169,col 64)",
            "(line 170,col 9)-(line 170,col 84)",
            "(line 171,col 9)-(line 171,col 65)",
            "(line 172,col 9)-(line 172,col 85)",
            "(line 173,col 9)-(line 173,col 66)",
            "(line 174,col 9)-(line 174,col 92)",
            "(line 175,col 9)-(line 175,col 63)",
            "(line 177,col 9)-(line 177,col 78)",
            "(line 178,col 9)-(line 178,col 64)",
            "(line 179,col 9)-(line 179,col 82)",
            "(line 180,col 9)-(line 180,col 65)",
            "(line 181,col 9)-(line 181,col 83)",
            "(line 182,col 9)-(line 182,col 66)",
            "(line 183,col 9)-(line 183,col 102)",
            "(line 184,col 9)-(line 184,col 62)",
            "(line 186,col 9)-(line 186,col 77)",
            "(line 187,col 9)-(line 187,col 64)",
            "(line 188,col 9)-(line 188,col 81)",
            "(line 189,col 9)-(line 189,col 65)",
            "(line 190,col 9)-(line 190,col 82)",
            "(line 191,col 9)-(line 191,col 66)",
            "(line 192,col 9)-(line 192,col 111)",
            "(line 193,col 9)-(line 193,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationHMS()",
        "snippet": "    public void testFormatDurationHMS() {\n        long time = 0;\n        assertEquals(\"0:00:00.000\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 1;\n        assertEquals(\"0:00:00.001\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 15;\n        assertEquals(\"0:00:00.015\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 165;\n        assertEquals(\"0:00:00.165\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 1675;\n        assertEquals(\"0:00:01.675\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 13465;\n        assertEquals(\"0:00:13.465\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 72789;\n        assertEquals(\"0:01:12.789\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 12789 + 32 * 60000;\n        assertEquals(\"0:32:12.789\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 12789 + 62 * 60000;\n        assertEquals(\"1:02:12.789\", DurationFormatUtils.formatDurationHMS(time));\n    }\n",
        "begin_line": 196,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 22)",
            "(line 198,col 9)-(line 198,col 81)",
            "(line 200,col 9)-(line 200,col 17)",
            "(line 201,col 9)-(line 201,col 81)",
            "(line 203,col 9)-(line 203,col 18)",
            "(line 204,col 9)-(line 204,col 81)",
            "(line 206,col 9)-(line 206,col 19)",
            "(line 207,col 9)-(line 207,col 81)",
            "(line 209,col 9)-(line 209,col 20)",
            "(line 210,col 9)-(line 210,col 81)",
            "(line 212,col 9)-(line 212,col 21)",
            "(line 213,col 9)-(line 213,col 81)",
            "(line 215,col 9)-(line 215,col 21)",
            "(line 216,col 9)-(line 216,col 81)",
            "(line 218,col 9)-(line 218,col 34)",
            "(line 219,col 9)-(line 219,col 81)",
            "(line 221,col 9)-(line 221,col 34)",
            "(line 222,col 9)-(line 222,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationISO()",
        "snippet": "    public void testFormatDurationISO() {\n        assertEquals(\"P0Y0M0DT0H0M0.000S\", DurationFormatUtils.formatDurationISO(0L));\n        assertEquals(\"P0Y0M0DT0H0M0.001S\", DurationFormatUtils.formatDurationISO(1L));\n        assertEquals(\"P0Y0M0DT0H0M0.010S\", DurationFormatUtils.formatDurationISO(10L));\n        assertEquals(\"P0Y0M0DT0H0M0.100S\", DurationFormatUtils.formatDurationISO(100L));\n        assertEquals(\"P0Y0M0DT0H1M15.321S\", DurationFormatUtils.formatDurationISO(75321L));\n    }\n",
        "begin_line": 225,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 86)",
            "(line 227,col 9)-(line 227,col 86)",
            "(line 228,col 9)-(line 228,col 87)",
            "(line 229,col 9)-(line 229,col 88)",
            "(line 230,col 9)-(line 230,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDuration()",
        "snippet": "    public void testFormatDuration() {\n        long duration = 0;\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"m\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"s\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"S\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"SSSS\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyyy\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyMM\"));\n\n        duration = 60 * 1000;\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\n        assertEquals(\"1\", DurationFormatUtils.formatDuration(duration, \"m\"));\n        assertEquals(\"60\", DurationFormatUtils.formatDuration(duration, \"s\"));\n        assertEquals(\"60000\", DurationFormatUtils.formatDuration(duration, \"S\"));\n        assertEquals(\"01:00\", DurationFormatUtils.formatDuration(duration, \"mm:ss\"));\n\n        Calendar base = Calendar.getInstance();\n        base.set(2000, 0, 1, 0, 0, 0);\n        base.set(Calendar.MILLISECOND, 0);\n\n        Calendar cal = Calendar.getInstance();\n        cal.set(2003, 1, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        duration = cal.getTime().getTime() - base.getTime().getTime(); // duration from 2000-01-01 to cal\n        // don't use 1970 in test as time zones were less reliable in 1970 than now\n        // remember that duration formatting ignores time zones, working on strict hour lengths\n        int days = 366 + 365 + 365 + 31;\n        assertEquals(\"0 0 \" + days, DurationFormatUtils.formatDuration(duration, \"y M d\"));\n    }\n",
        "begin_line": 233,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 26)",
            "(line 235,col 9)-(line 235,col 77)",
            "(line 236,col 9)-(line 236,col 77)",
            "(line 237,col 9)-(line 237,col 77)",
            "(line 238,col 9)-(line 238,col 77)",
            "(line 239,col 9)-(line 239,col 77)",
            "(line 240,col 9)-(line 240,col 77)",
            "(line 241,col 9)-(line 241,col 77)",
            "(line 242,col 9)-(line 242,col 83)",
            "(line 243,col 9)-(line 243,col 83)",
            "(line 244,col 9)-(line 244,col 83)",
            "(line 246,col 9)-(line 246,col 29)",
            "(line 247,col 9)-(line 247,col 77)",
            "(line 248,col 9)-(line 248,col 77)",
            "(line 249,col 9)-(line 249,col 77)",
            "(line 250,col 9)-(line 250,col 77)",
            "(line 251,col 9)-(line 251,col 77)",
            "(line 252,col 9)-(line 252,col 78)",
            "(line 253,col 9)-(line 253,col 81)",
            "(line 254,col 9)-(line 254,col 85)",
            "(line 256,col 9)-(line 256,col 47)",
            "(line 257,col 9)-(line 257,col 38)",
            "(line 258,col 9)-(line 258,col 42)",
            "(line 260,col 9)-(line 260,col 46)",
            "(line 261,col 9)-(line 261,col 37)",
            "(line 262,col 9)-(line 262,col 41)",
            "(line 263,col 9)-(line 263,col 70)",
            "(line 266,col 9)-(line 266,col 40)",
            "(line 267,col 9)-(line 267,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatPeriodISO()",
        "snippet": "    public void testFormatPeriodISO() {\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar base = Calendar.getInstance(timeZone);\n        base.set(1970, 0, 1, 0, 0, 0);\n        base.set(Calendar.MILLISECOND, 0);\n\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002, 1, 23, 9, 11, 12);\n        cal.set(Calendar.MILLISECOND, 1);\n        String text;\n        // repeat a test from testDateTimeISO to compare extended and not extended.\n        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n        // test fixture is the same as above, but now with extended format.\n        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\n                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n        assertEquals(\"P32Y1M22DT9H11M12.001S\", text);\n        // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration\n        cal.set(1971, 1, 3, 10, 30, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\n                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n        assertEquals(\"P1Y1M2DT10H30M0.000S\", text);\n        // want a way to say 'don't print the seconds in format()' or other fields for that matter:\n        // assertEquals(\"P1Y2M3DT10H30M\", text);\n    }\n",
        "begin_line": 270,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 58)",
            "(line 272,col 9)-(line 272,col 55)",
            "(line 273,col 9)-(line 273,col 38)",
            "(line 274,col 9)-(line 274,col 42)",
            "(line 276,col 9)-(line 276,col 54)",
            "(line 277,col 9)-(line 277,col 40)",
            "(line 278,col 9)-(line 278,col 41)",
            "(line 279,col 9)-(line 279,col 20)",
            "(line 281,col 9)-(line 281,col 73)",
            "(line 282,col 9)-(line 282,col 56)",
            "(line 284,col 9)-(line 285,col 82)",
            "(line 286,col 9)-(line 286,col 53)",
            "(line 288,col 9)-(line 288,col 39)",
            "(line 289,col 9)-(line 289,col 41)",
            "(line 290,col 9)-(line 291,col 82)",
            "(line 292,col 9)-(line 292,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatPeriod()",
        "snippet": "    public void testFormatPeriod() {\n        Calendar cal1970 = Calendar.getInstance();\n        cal1970.set(1970, 0, 1, 0, 0, 0);\n        cal1970.set(Calendar.MILLISECOND, 0);\n        long time1970 = cal1970.getTime().getTime();\n\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"H\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"m\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"s\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"S\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"SSSS\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyyy\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyMM\"));\n\n        long time = time1970 + 60 * 1000;\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"H\"));\n        assertEquals(\"1\", DurationFormatUtils.formatPeriod(time1970, time, \"m\"));\n        assertEquals(\"60\", DurationFormatUtils.formatPeriod(time1970, time, \"s\"));\n        assertEquals(\"60000\", DurationFormatUtils.formatPeriod(time1970, time, \"S\"));\n        assertEquals(\"01:00\", DurationFormatUtils.formatPeriod(time1970, time, \"mm:ss\"));\n\n        Calendar cal = Calendar.getInstance();\n        cal.set(1973, 6, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        time = cal.getTime().getTime();\n        assertEquals(\"36\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n        assertEquals(\"3 years 6 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n        assertEquals(\"03/06\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n\n        cal.set(1973, 10, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        time = cal.getTime().getTime();\n        assertEquals(\"310\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n        assertEquals(\"3 years 10 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n        assertEquals(\"03/10\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n\n        cal.set(1974, 0, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        time = cal.getTime().getTime();\n        assertEquals(\"40\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n        assertEquals(\"4 years 0 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n        assertEquals(\"04/00\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n        assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\n        assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"MM\"));\n        assertEquals(\"048\", DurationFormatUtils.formatPeriod(time1970, time, \"MMM\"));\n    }\n",
        "begin_line": 297,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 50)",
            "(line 299,col 9)-(line 299,col 41)",
            "(line 300,col 9)-(line 300,col 45)",
            "(line 301,col 9)-(line 301,col 52)",
            "(line 303,col 9)-(line 303,col 85)",
            "(line 304,col 9)-(line 304,col 85)",
            "(line 305,col 9)-(line 305,col 85)",
            "(line 306,col 9)-(line 306,col 85)",
            "(line 307,col 9)-(line 307,col 85)",
            "(line 308,col 9)-(line 308,col 85)",
            "(line 309,col 9)-(line 309,col 85)",
            "(line 310,col 9)-(line 310,col 91)",
            "(line 311,col 9)-(line 311,col 91)",
            "(line 312,col 9)-(line 312,col 91)",
            "(line 314,col 9)-(line 314,col 41)",
            "(line 315,col 9)-(line 315,col 81)",
            "(line 316,col 9)-(line 316,col 81)",
            "(line 317,col 9)-(line 317,col 81)",
            "(line 318,col 9)-(line 318,col 81)",
            "(line 319,col 9)-(line 319,col 81)",
            "(line 320,col 9)-(line 320,col 82)",
            "(line 321,col 9)-(line 321,col 85)",
            "(line 322,col 9)-(line 322,col 89)",
            "(line 324,col 9)-(line 324,col 46)",
            "(line 325,col 9)-(line 325,col 37)",
            "(line 326,col 9)-(line 326,col 41)",
            "(line 327,col 9)-(line 327,col 39)",
            "(line 328,col 9)-(line 328,col 83)",
            "(line 329,col 9)-(line 329,col 115)",
            "(line 330,col 9)-(line 330,col 89)",
            "(line 332,col 9)-(line 332,col 38)",
            "(line 333,col 9)-(line 333,col 41)",
            "(line 334,col 9)-(line 334,col 39)",
            "(line 335,col 9)-(line 335,col 84)",
            "(line 336,col 9)-(line 336,col 116)",
            "(line 337,col 9)-(line 337,col 89)",
            "(line 339,col 9)-(line 339,col 37)",
            "(line 340,col 9)-(line 340,col 41)",
            "(line 341,col 9)-(line 341,col 39)",
            "(line 342,col 9)-(line 342,col 83)",
            "(line 343,col 9)-(line 343,col 115)",
            "(line 344,col 9)-(line 344,col 89)",
            "(line 345,col 9)-(line 345,col 82)",
            "(line 346,col 9)-(line 346,col 83)",
            "(line 347,col 9)-(line 347,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testLexx()",
        "snippet": "    public void testLexx() {\n        // tests each constant\n        assertArrayEquals(new DurationFormatUtils.Token[]{\n            new DurationFormatUtils.Token(DurationFormatUtils.y, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx(\"yMdHmsS\"));\n\n        // tests the ISO8601-like\n        assertArrayEquals(new DurationFormatUtils.Token[]{\n            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.m, 2),\n            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.s, 2),\n            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(\"H:mm:ss.SSS\"));\n\n        // test the iso extended format\n        assertArrayEquals(new DurationFormatUtils.Token[]{\n            new DurationFormatUtils.Token(new StringBuffer(\"P\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.y, 4),\n            new DurationFormatUtils.Token(new StringBuffer(\"Y\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"DT\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"H\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.S, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"S\"), 1)}, DurationFormatUtils\n                .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));\n\n        // test failures in equals\n        DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4);\n        assertFalse(\"Token equal to non-Token class. \", token.equals(new Object()));\n        assertFalse(\"Token equal to Token with wrong value class. \", token.equals(new DurationFormatUtils.Token(\n                new Object())));\n        assertFalse(\"Token equal to Token with different count. \", token.equals(new DurationFormatUtils.Token(\n                DurationFormatUtils.y, 1)));\n        DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(new Integer(1), 4);\n        assertTrue(\"Token with Number value not equal to itself. \", numToken.equals(numToken));\n    }\n",
        "begin_line": 350,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 352,col 9)-(line 359,col 107)",
            "(line 362,col 9)-(line 369,col 111)",
            "(line 372,col 9)-(line 388,col 72)",
            "(line 391,col 9)-(line 391,col 98)",
            "(line 392,col 9)-(line 392,col 84)",
            "(line 393,col 9)-(line 394,col 32)",
            "(line 395,col 9)-(line 396,col 44)",
            "(line 397,col 9)-(line 397,col 94)",
            "(line 398,col 9)-(line 398,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testBugzilla38401()",
        "snippet": "    public void testBugzilla38401() {}\n",
        "begin_line": 403,
        "end_line": 403,
        "comment": " http://issues.apache.org/bugzilla/show_bug.cgi?id=38401",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testJiraLang281()",
        "snippet": "    public void testJiraLang281() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(Calendar.MONTH, Calendar.DECEMBER);\n        cal.set(Calendar.DAY_OF_MONTH, 31);\n        cal.set(Calendar.YEAR, 2005);\n        cal.set(Calendar.HOUR_OF_DAY, 0);\n        cal.set(Calendar.MINUTE, 0);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n\n        Calendar cal2 = Calendar.getInstance();\n        cal2.set(Calendar.MONTH, Calendar.OCTOBER);\n        cal2.set(Calendar.DAY_OF_MONTH, 6);\n        cal2.set(Calendar.YEAR, 2006);\n        cal2.set(Calendar.HOUR_OF_DAY, 0);\n        cal2.set(Calendar.MINUTE, 0);\n        cal2.set(Calendar.SECOND, 0);\n        cal2.set(Calendar.MILLISECOND, 0);\n        String result = DurationFormatUtils.formatPeriod(cal.getTime().getTime(), cal2.getTime().getTime(), \"MM\");\n        assertEquals(\"09\", result);\n    }\n",
        "begin_line": 417,
        "end_line": 437,
        "comment": " https://issues.apache.org/jira/browse/LANG-281",
        "child_ranges": [
            "(line 418,col 9)-(line 418,col 46)",
            "(line 419,col 9)-(line 419,col 51)",
            "(line 420,col 9)-(line 420,col 43)",
            "(line 421,col 9)-(line 421,col 37)",
            "(line 422,col 9)-(line 422,col 41)",
            "(line 423,col 9)-(line 423,col 36)",
            "(line 424,col 9)-(line 424,col 36)",
            "(line 425,col 9)-(line 425,col 41)",
            "(line 427,col 9)-(line 427,col 47)",
            "(line 428,col 9)-(line 428,col 51)",
            "(line 429,col 9)-(line 429,col 43)",
            "(line 430,col 9)-(line 430,col 38)",
            "(line 431,col 9)-(line 431,col 42)",
            "(line 432,col 9)-(line 432,col 37)",
            "(line 433,col 9)-(line 433,col 37)",
            "(line 434,col 9)-(line 434,col 42)",
            "(line 435,col 9)-(line 435,col 114)",
            "(line 436,col 9)-(line 436,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.assertArrayEquals(org.apache.commons.lang.time.DurationFormatUtils.Token[], org.apache.commons.lang.time.DurationFormatUtils.Token[])",
        "snippet": "    private void assertArrayEquals(DurationFormatUtils.Token[] obj1, DurationFormatUtils.Token[] obj2) {\n        assertEquals(\"Arrays are unequal length. \", obj1.length, obj2.length);\n        for (int i = 0; i < obj1.length; i++) {\n            assertTrue(\"Index \" + i + \" not equal, \" + obj1[i] + \" vs \" + obj2, obj1[i].equals(obj2[i]));\n        }\n    }\n",
        "begin_line": 439,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 440,col 9)-(line 440,col 78)",
            "(line 441,col 9)-(line 443,col 9)"
        ]
    }
]