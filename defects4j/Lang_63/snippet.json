[
    {
        "name": "DurationFormatUtils.formatPeriod#262",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String, boolean, java.util.TimeZone)",
        "snippet": "    public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, \n            TimeZone timezone) {\n\n        long millis = endMillis - startMillis;\n        if (millis < 28 * DateUtils.MILLIS_PER_DAY) {\n            return formatDuration(millis, format, padWithZeros);\n        }\n\n        Token[] tokens = lexx(format);\n\n        // timezones get funky around 0, so normalizing everything to GMT \n        // stops the hours being off\n        Calendar start = Calendar.getInstance(timezone);\n        start.setTime(new Date(startMillis));\n        Calendar end = Calendar.getInstance(timezone);\n        end.setTime(new Date(endMillis));\n\n        // initial estimates\n        int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);\n        int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);\n        int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);\n        int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);\n        int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);\n        int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);\n        int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);\n\n        // each initial estimate is adjusted in case it is under 0\n        while (milliseconds < 0) {\n            milliseconds += 1000;\n            seconds -= 1;\n        }\n        while (seconds < 0) {\n            seconds += 60;\n            minutes -= 1;\n        }\n        while (minutes < 0) {\n            minutes += 60;\n            hours -= 1;\n        }\n        while (hours < 0) {\n            hours += 24;\n            days -= 1;\n        }\n        while (days < 0) {\n            days += 31;\n//days += 31; // TODO: Need tests to show this is bad and the new code is good.\n// HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is \n// 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.\n// Also it's contextual - if asked for no M in the format then I should probably \n// be doing no calculating here.\n            months -= 1;\n        }\n        while (months < 0) {\n            months += 12;\n            years -= 1;\n        }\n        milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);\n        seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);\n        minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n        hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n        years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n\n        // This next block of code adds in values that \n        // aren't requested. This allows the user to ask for the \n        // number of months and get the real count and not just 0->11.\n        if (!Token.containsTokenWithValue(tokens, y)) {\n            if (Token.containsTokenWithValue(tokens, M)) {\n                months += 12 * years;\n                years = 0;\n            } else {\n                // TODO: this is a bit weak, needs work to know about leap years\n                days += 365 * years;\n                years = 0;\n            }\n        }\n        if (!Token.containsTokenWithValue(tokens, M)) {\n            days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);\n            months = 0;\n        }\n        if (!Token.containsTokenWithValue(tokens, d)) {\n            hours += 24 * days;\n            days = 0;\n        }\n        if (!Token.containsTokenWithValue(tokens, H)) {\n            minutes += 60 * hours;\n            hours = 0;\n        }\n        if (!Token.containsTokenWithValue(tokens, m)) {\n            seconds += 60 * minutes;\n            minutes = 0;\n        }\n        if (!Token.containsTokenWithValue(tokens, s)) {\n            milliseconds += 1000 * seconds;\n            seconds = 0;\n        }\n\n        return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n    }\n",
        "begin_line": 262,
        "end_line": 361,
        "comment": "\n     * <p>Formats the time gap as a string, using the specified format.\n     * Padding the left hand side of numbers with zeroes is optional and \n     * the timezone may be specified. \n     * \n     * @param startMillis  the start of the duration\n     * @param endMillis  the end of the duration\n     * @param format  the way in which to format the duration\n     * @param padWithZeros whether to pad the left hand side of numbers with 0's\n     * @param timezone the millis are defined in\n     * @return the time as a String\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFormatUtils.reduceAndCorrect#432",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(java.util.Calendar, java.util.Calendar, int, int)",
        "snippet": "    static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {\n        end.add( field, -1 * difference );\n        int endValue = end.get(field);\n        int startValue = start.get(field);\n        if (endValue < startValue) {\n            int newdiff = startValue - endValue;\n            end.add( field, newdiff );\n            return newdiff;\n        } else {\n            return 0;\n        }\n    }\n",
        "begin_line": 432,
        "end_line": 443,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFormatUtils.formatPeriod#246",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String)",
        "snippet": "    public static String formatPeriod(long startMillis, long endMillis, String format) {\n        return formatPeriod(startMillis, endMillis, format, true, TimeZone.getDefault());\n    }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n     * <p>Formats the time gap as a string, using the specified format.\n     * Padding the left hand side of numbers with zeroes is optional.\n     * \n     * @param startMillis  the start of the duration\n     * @param endMillis  the end of the duration\n     * @param format  the way in which to format the duration\n     * @return the time as a String\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFormatUtils.format#378",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.format(org.apache.commons.lang.time.DurationFormatUtils.Token[], int, int, int, int, int, int, int, boolean)",
        "snippet": "    static String format(Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds,\n            int milliseconds, boolean padWithZeros) {\n        StringBuffer buffer = new StringBuffer();\n        boolean lastOutputSeconds = false;\n        int sz = tokens.length;\n        for (int i = 0; i < sz; i++) {\n            Token token = tokens[i];\n            Object value = token.getValue();\n            int count = token.getCount();\n            if (value instanceof StringBuffer) {\n                buffer.append(value.toString());\n            } else {\n                if (value == y) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer\n                            .toString(years));\n                    lastOutputSeconds = false;\n                } else if (value == M) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer\n                            .toString(months));\n                    lastOutputSeconds = false;\n                } else if (value == d) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer\n                            .toString(days));\n                    lastOutputSeconds = false;\n                } else if (value == H) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer\n                            .toString(hours));\n                    lastOutputSeconds = false;\n                } else if (value == m) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer\n                            .toString(minutes));\n                    lastOutputSeconds = false;\n                } else if (value == s) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer\n                            .toString(seconds));\n                    lastOutputSeconds = true;\n                } else if (value == S) {\n                    if (lastOutputSeconds) {\n                        milliseconds += 1000;\n                        String str = padWithZeros\n                                ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0')\n                                : Integer.toString(milliseconds);\n                        buffer.append(str.substring(1));\n                    } else {\n                        buffer.append(padWithZeros\n                                ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0')\n                                : Integer.toString(milliseconds));\n                    }\n                    lastOutputSeconds = false;\n                }\n            }\n        }\n        return buffer.toString();\n    }\n",
        "begin_line": 378,
        "end_line": 431,
        "comment": "\n     * <p>The internal method to do the formatting.</p>\n     * \n     * @param tokens  the tokens\n     * @param years  the number of years\n     * @param months  the number of months\n     * @param days  the number of days\n     * @param hours  the number of hours\n     * @param minutes  the number of minutes\n     * @param seconds  the number of seconds\n     * @param milliseconds  the number of millis\n     * @param padWithZeros  whether to pad\n     * @return the formetted string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFormatUtils.lexx#459",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.lexx(java.lang.String)",
        "snippet": "    static Token[] lexx(String format) {\n        char[] array = format.toCharArray();\n        java.util.ArrayList list = new java.util.ArrayList(array.length);\n\n        boolean inLiteral = false;\n        StringBuffer buffer = null;\n        Token previous = null;\n        int sz = array.length;\n        for(int i=0; i<sz; i++) {\n            char ch = array[i];\n            if(inLiteral && ch != '\\'') {\n                buffer.append(ch);\n                continue;\n            }\n            Object value = null;\n            switch(ch) {\n                // TODO: Need to handle escaping of '\n                case '\\'' : \n                  if(inLiteral) {\n                      buffer = null;\n                      inLiteral = false;\n                  } else {\n                      buffer = new StringBuffer();\n                      list.add(new Token(buffer));\n                      inLiteral = true;\n                  }\n                  break;\n                case 'y'  : value = y; break;\n                case 'M'  : value = M; break;\n                case 'd'  : value = d; break;\n                case 'H'  : value = H; break;\n                case 'm'  : value = m; break;\n                case 's'  : value = s; break;\n                case 'S'  : value = S; break;\n                default   : \n                  if(buffer == null) {\n                      buffer = new StringBuffer();\n                      list.add(new Token(buffer));\n                  }\n                  buffer.append(ch);\n            }\n\n            if(value != null) {\n                if(previous != null && previous.getValue() == value) {\n                    previous.increment();\n                } else {\n                    Token token = new Token(value);\n                    list.add(token); \n                    previous = token;\n                }\n                buffer = null; \n            }\n        }\n        return (Token[]) list.toArray( new Token[0] );\n    }\n",
        "begin_line": 459,
        "end_line": 513,
        "comment": "\n     * Parses a classic date format string into Tokens\n     *\n     * @param format to parse\n     * @return Token[] of tokens\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFormatUtils.containsTokenWithValue#527",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(org.apache.commons.lang.time.DurationFormatUtils.Token[], java.lang.Object)",
        "snippet": "        static boolean containsTokenWithValue(Token[] tokens, Object value) {\n            int sz = tokens.length;\n            for (int i = 0; i < sz; i++) {\n                if (tokens[i].getValue() == value) {\n                    return true;\n                }\n            }\n            return false;\n        }\n",
        "begin_line": 527,
        "end_line": 535,
        "comment": "\n         * Helper method to determine if a set of tokens contain a value\n         *\n         * @param tokens set to look in\n         * @param value to look for\n         * @return boolean <code>true</code> if contained\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringUtils.leftPad#3864",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.leftPad(java.lang.String, int, char)",
        "snippet": "    public static String leftPad(String str, int size, char padChar) {\n        if (str == null) {\n            return null;\n        }\n        int pads = size - str.length();\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return leftPad(str, size, String.valueOf(padChar));\n        }\n        return padding(pads, padChar).concat(str);\n    }\n",
        "begin_line": 3864,
        "end_line": 3876,
        "comment": "\n     * <p>Left pad a String with a specified character.</p>\n     *\n     * <p>Pad to a size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *, *)     = null\n     * StringUtils.leftPad(\"\", 3, 'z')     = \"zzz\"\n     * StringUtils.leftPad(\"bat\", 3, 'z')  = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5, 'z')  = \"zzbat\"\n     * StringUtils.leftPad(\"bat\", 1, 'z')  = \"bat\"\n     * StringUtils.leftPad(\"bat\", -1, 'z') = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padChar  the character to pad with\n     * @return left padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFormatUtils.increment#565",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.increment()",
        "snippet": "        void increment() { \n            count++;\n        }\n",
        "begin_line": 565,
        "end_line": 567,
        "comment": "\n         * Adds another one of the value\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFormatUtils.getCount#574",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.getCount()",
        "snippet": "        int getCount() {\n            return count;\n        }\n",
        "begin_line": 574,
        "end_line": 576,
        "comment": "\n         * Gets the current number of values represented\n         *\n         * @return int number of values represented\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFormatUtils.Token#545",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.Token(java.lang.Object)",
        "snippet": "        Token(Object value) {\n            this.value = value;\n            this.count = 1;\n        }\n",
        "begin_line": 545,
        "end_line": 548,
        "comment": "\n         * Wraps a token around a value. A value would be something like a 'Y'.\n         *\n         * @param value to wrap\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "DurationFormatUtils.getValue#583",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.getValue()",
        "snippet": "        Object getValue() {\n            return value;\n        }\n",
        "begin_line": 583,
        "end_line": 585,
        "comment": "\n         * Gets the particular value this token represents.\n         * \n         * @return Object value\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    }
]