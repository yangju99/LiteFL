[
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "\n     * Main method.\n     * \n     * @param args  command line arguments, ignored\n     ",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StrBuilderTest.class);\n        suite.setName(\"StrBuilder Tests\");\n        return suite;\n    }\n",
        "begin_line": 53,
        "end_line": 57,
        "comment": "\n     * Return a new test suite containing this test case.\n     * \n     * @return a new test suite containing this test case\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 62)",
            "(line 55,col 9)-(line 55,col 42)",
            "(line 56,col 9)-(line 56,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.StrBuilderTest(java.lang.String)",
        "snippet": "    public StrBuilderTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Create a new test case with the specified name.\n     * \n     * @param name\n     *            name\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        StrBuilder sb0 = new StrBuilder();\n        assertEquals(32, sb0.capacity());\n        assertEquals(0, sb0.length());\n        assertEquals(0, sb0.size());\n\n        StrBuilder sb1 = new StrBuilder(32);\n        assertEquals(32, sb1.capacity());\n        assertEquals(0, sb1.length());\n        assertEquals(0, sb1.size());\n\n        StrBuilder sb2 = new StrBuilder(0);\n        assertEquals(32, sb2.capacity());\n        assertEquals(0, sb2.length());\n        assertEquals(0, sb2.size());\n\n        StrBuilder sb3 = new StrBuilder(-1);\n        assertEquals(32, sb3.capacity());\n        assertEquals(0, sb3.length());\n        assertEquals(0, sb3.size());\n\n        StrBuilder sb4 = new StrBuilder(1);\n        assertEquals(1, sb4.capacity());\n        assertEquals(0, sb4.length());\n        assertEquals(0, sb4.size());\n\n        StrBuilder sb5 = new StrBuilder((String) null);\n        assertEquals(32, sb5.capacity());\n        assertEquals(0, sb5.length());\n        assertEquals(0, sb5.size());\n\n        StrBuilder sb6 = new StrBuilder(\"\");\n        assertEquals(32, sb6.capacity());\n        assertEquals(0, sb6.length());\n        assertEquals(0, sb6.size());\n\n        StrBuilder sb7 = new StrBuilder(\"foo\");\n        assertEquals(35, sb7.capacity());\n        assertEquals(3, sb7.length());\n        assertEquals(3, sb7.size());\n    }\n",
        "begin_line": 70,
        "end_line": 110,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 42)",
            "(line 72,col 9)-(line 72,col 41)",
            "(line 73,col 9)-(line 73,col 38)",
            "(line 74,col 9)-(line 74,col 36)",
            "(line 76,col 9)-(line 76,col 44)",
            "(line 77,col 9)-(line 77,col 41)",
            "(line 78,col 9)-(line 78,col 38)",
            "(line 79,col 9)-(line 79,col 36)",
            "(line 81,col 9)-(line 81,col 43)",
            "(line 82,col 9)-(line 82,col 41)",
            "(line 83,col 9)-(line 83,col 38)",
            "(line 84,col 9)-(line 84,col 36)",
            "(line 86,col 9)-(line 86,col 44)",
            "(line 87,col 9)-(line 87,col 41)",
            "(line 88,col 9)-(line 88,col 38)",
            "(line 89,col 9)-(line 89,col 36)",
            "(line 91,col 9)-(line 91,col 43)",
            "(line 92,col 9)-(line 92,col 40)",
            "(line 93,col 9)-(line 93,col 38)",
            "(line 94,col 9)-(line 94,col 36)",
            "(line 96,col 9)-(line 96,col 55)",
            "(line 97,col 9)-(line 97,col 41)",
            "(line 98,col 9)-(line 98,col 38)",
            "(line 99,col 9)-(line 99,col 36)",
            "(line 101,col 9)-(line 101,col 44)",
            "(line 102,col 9)-(line 102,col 41)",
            "(line 103,col 9)-(line 103,col 38)",
            "(line 104,col 9)-(line 104,col 36)",
            "(line 106,col 9)-(line 106,col 47)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 38)",
            "(line 109,col 9)-(line 109,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testChaining()",
        "snippet": "    public void testChaining() {\n        StrBuilder sb = new StrBuilder();\n        assertSame(sb, sb.setNewLineText(null));\n        assertSame(sb, sb.setNullText(null));\n        assertSame(sb, sb.setLength(1));\n        assertSame(sb, sb.setCharAt(0, 'a'));\n        assertSame(sb, sb.ensureCapacity(0));\n        assertSame(sb, sb.minimizeCapacity());\n        assertSame(sb, sb.clear());\n        assertSame(sb, sb.reverse());\n        assertSame(sb, sb.trim());\n    }\n",
        "begin_line": 113,
        "end_line": 124,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 115,col 48)",
            "(line 116,col 9)-(line 116,col 45)",
            "(line 117,col 9)-(line 117,col 40)",
            "(line 118,col 9)-(line 118,col 45)",
            "(line 119,col 9)-(line 119,col 45)",
            "(line 120,col 9)-(line 120,col 46)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 37)",
            "(line 123,col 9)-(line 123,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetSetNewLineText()",
        "snippet": "    public void testGetSetNewLineText() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(null, sb.getNewLineText());\n\n        sb.setNewLineText(\"#\");\n        assertEquals(\"#\", sb.getNewLineText());\n\n        sb.setNewLineText(\"\");\n        assertEquals(\"\", sb.getNewLineText());\n\n        sb.setNewLineText((String) null);\n        assertEquals(null, sb.getNewLineText());\n    }\n",
        "begin_line": 127,
        "end_line": 139,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 41)",
            "(line 129,col 9)-(line 129,col 48)",
            "(line 131,col 9)-(line 131,col 31)",
            "(line 132,col 9)-(line 132,col 47)",
            "(line 134,col 9)-(line 134,col 30)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 137,col 9)-(line 137,col 41)",
            "(line 138,col 9)-(line 138,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetSetNullText()",
        "snippet": "    public void testGetSetNullText() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(null, sb.getNullText());\n\n        sb.setNullText(\"null\");\n        assertEquals(\"null\", sb.getNullText());\n\n        sb.setNullText(\"\");\n        assertEquals(null, sb.getNullText());\n\n        sb.setNullText(\"NULL\");\n        assertEquals(\"NULL\", sb.getNullText());\n\n        sb.setNullText((String) null);\n        assertEquals(null, sb.getNullText());\n    }\n",
        "begin_line": 142,
        "end_line": 157,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 41)",
            "(line 144,col 9)-(line 144,col 45)",
            "(line 146,col 9)-(line 146,col 31)",
            "(line 147,col 9)-(line 147,col 47)",
            "(line 149,col 9)-(line 149,col 27)",
            "(line 150,col 9)-(line 150,col 45)",
            "(line 152,col 9)-(line 152,col 31)",
            "(line 153,col 9)-(line 153,col 47)",
            "(line 155,col 9)-(line 155,col 38)",
            "(line 156,col 9)-(line 156,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testCapacityAndLength()",
        "snippet": "    public void testCapacityAndLength() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(32, sb.capacity());\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.minimizeCapacity();\n        assertEquals(0, sb.capacity());\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.ensureCapacity(32);\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.append(\"foo\");\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(3, sb.length());\n        assertEquals(3, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.clear();\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.append(\"123456789012345678901234567890123\");\n        assertTrue(sb.capacity() > 32);\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.ensureCapacity(16);\n        assertTrue(sb.capacity() > 16);\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.minimizeCapacity();\n        assertEquals(33, sb.capacity());\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        try {\n            sb.setLength(-1);\n            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.setLength(33);\n        assertEquals(33, sb.capacity());\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.setLength(16);\n        assertTrue(sb.capacity() >= 16);\n        assertEquals(16, sb.length());\n        assertEquals(16, sb.size());\n        assertEquals(\"1234567890123456\", sb.toString());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.setLength(32);\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(32, sb.length());\n        assertEquals(32, sb.size());\n        assertEquals(\"1234567890123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", sb.toString());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.setLength(0);\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n    }\n",
        "begin_line": 160,
        "end_line": 241,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 41)",
            "(line 162,col 9)-(line 162,col 40)",
            "(line 163,col 9)-(line 163,col 37)",
            "(line 164,col 9)-(line 164,col 35)",
            "(line 165,col 9)-(line 165,col 33)",
            "(line 167,col 9)-(line 167,col 30)",
            "(line 168,col 9)-(line 168,col 39)",
            "(line 169,col 9)-(line 169,col 37)",
            "(line 170,col 9)-(line 170,col 35)",
            "(line 171,col 9)-(line 171,col 33)",
            "(line 173,col 9)-(line 173,col 30)",
            "(line 174,col 9)-(line 174,col 40)",
            "(line 175,col 9)-(line 175,col 37)",
            "(line 176,col 9)-(line 176,col 35)",
            "(line 177,col 9)-(line 177,col 33)",
            "(line 179,col 9)-(line 179,col 25)",
            "(line 180,col 9)-(line 180,col 40)",
            "(line 181,col 9)-(line 181,col 37)",
            "(line 182,col 9)-(line 182,col 35)",
            "(line 183,col 9)-(line 183,col 42)",
            "(line 185,col 9)-(line 185,col 19)",
            "(line 186,col 9)-(line 186,col 40)",
            "(line 187,col 9)-(line 187,col 37)",
            "(line 188,col 9)-(line 188,col 35)",
            "(line 189,col 9)-(line 189,col 33)",
            "(line 191,col 9)-(line 191,col 55)",
            "(line 192,col 9)-(line 192,col 39)",
            "(line 193,col 9)-(line 193,col 38)",
            "(line 194,col 9)-(line 194,col 36)",
            "(line 195,col 9)-(line 195,col 42)",
            "(line 197,col 9)-(line 197,col 30)",
            "(line 198,col 9)-(line 198,col 39)",
            "(line 199,col 9)-(line 199,col 38)",
            "(line 200,col 9)-(line 200,col 36)",
            "(line 201,col 9)-(line 201,col 42)",
            "(line 203,col 9)-(line 203,col 30)",
            "(line 204,col 9)-(line 204,col 40)",
            "(line 205,col 9)-(line 205,col 38)",
            "(line 206,col 9)-(line 206,col 36)",
            "(line 207,col 9)-(line 207,col 42)",
            "(line 209,col 9)-(line 214,col 9)",
            "(line 216,col 9)-(line 216,col 25)",
            "(line 217,col 9)-(line 217,col 40)",
            "(line 218,col 9)-(line 218,col 38)",
            "(line 219,col 9)-(line 219,col 36)",
            "(line 220,col 9)-(line 220,col 42)",
            "(line 222,col 9)-(line 222,col 25)",
            "(line 223,col 9)-(line 223,col 40)",
            "(line 224,col 9)-(line 224,col 38)",
            "(line 225,col 9)-(line 225,col 36)",
            "(line 226,col 9)-(line 226,col 56)",
            "(line 227,col 9)-(line 227,col 42)",
            "(line 229,col 9)-(line 229,col 25)",
            "(line 230,col 9)-(line 230,col 40)",
            "(line 231,col 9)-(line 231,col 38)",
            "(line 232,col 9)-(line 232,col 36)",
            "(line 233,col 9)-(line 233,col 88)",
            "(line 234,col 9)-(line 234,col 42)",
            "(line 236,col 9)-(line 236,col 24)",
            "(line 237,col 9)-(line 237,col 40)",
            "(line 238,col 9)-(line 238,col 37)",
            "(line 239,col 9)-(line 239,col 35)",
            "(line 240,col 9)-(line 240,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLength()",
        "snippet": "    public void testLength() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(0, sb.length());\n        \n        sb.append(\"Hello\");\n        assertEquals(5, sb.length());\n    }\n",
        "begin_line": 244,
        "end_line": 250,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 41)",
            "(line 246,col 9)-(line 246,col 37)",
            "(line 248,col 9)-(line 248,col 27)",
            "(line 249,col 9)-(line 249,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testSetLength()",
        "snippet": "    public void testSetLength() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"Hello\");\n        sb.setLength(2);  // shorten\n        assertEquals(\"He\", sb.toString());\n        sb.setLength(2);  // no change\n        assertEquals(\"He\", sb.toString());\n        sb.setLength(3);  // lengthen\n        assertEquals(\"He\\0\", sb.toString());\n\n        try {\n            sb.setLength(-1);\n            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n    }\n",
        "begin_line": 252,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 41)",
            "(line 254,col 9)-(line 254,col 27)",
            "(line 255,col 9)-(line 255,col 24)",
            "(line 256,col 9)-(line 256,col 42)",
            "(line 257,col 9)-(line 257,col 24)",
            "(line 258,col 9)-(line 258,col 42)",
            "(line 259,col 9)-(line 259,col 24)",
            "(line 260,col 9)-(line 260,col 44)",
            "(line 262,col 9)-(line 267,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testCapacity()",
        "snippet": "    public void testCapacity() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(sb.buffer.length, sb.capacity());\n        \n        sb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\n        assertEquals(sb.buffer.length, sb.capacity());\n    }\n",
        "begin_line": 271,
        "end_line": 277,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 272,col 9)-(line 272,col 41)",
            "(line 273,col 9)-(line 273,col 54)",
            "(line 275,col 9)-(line 275,col 62)",
            "(line 276,col 9)-(line 276,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testEnsureCapacity()",
        "snippet": "    public void testEnsureCapacity() {\n        StrBuilder sb = new StrBuilder();\n        sb.ensureCapacity(2);\n        assertEquals(true, sb.capacity() >= 2);\n        \n        sb.ensureCapacity(-1);\n        assertEquals(true, sb.capacity() >= 0);\n        \n        sb.append(\"HelloWorld\");\n        sb.ensureCapacity(40);\n        assertEquals(true, sb.capacity() >= 40);\n    }\n",
        "begin_line": 279,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 41)",
            "(line 281,col 9)-(line 281,col 29)",
            "(line 282,col 9)-(line 282,col 47)",
            "(line 284,col 9)-(line 284,col 30)",
            "(line 285,col 9)-(line 285,col 47)",
            "(line 287,col 9)-(line 287,col 32)",
            "(line 288,col 9)-(line 288,col 30)",
            "(line 289,col 9)-(line 289,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testMinimizeCapacity()",
        "snippet": "    public void testMinimizeCapacity() {\n        StrBuilder sb = new StrBuilder();\n        sb.minimizeCapacity();\n        assertEquals(0, sb.capacity());\n        \n        sb.append(\"HelloWorld\");\n        sb.minimizeCapacity();\n        assertEquals(10, sb.capacity());\n    }\n",
        "begin_line": 292,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 41)",
            "(line 294,col 9)-(line 294,col 30)",
            "(line 295,col 9)-(line 295,col 39)",
            "(line 297,col 9)-(line 297,col 32)",
            "(line 298,col 9)-(line 298,col 30)",
            "(line 299,col 9)-(line 299,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testSize()",
        "snippet": "    public void testSize() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(0, sb.size());\n        \n        sb.append(\"Hello\");\n        assertEquals(5, sb.size());\n    }\n",
        "begin_line": 303,
        "end_line": 309,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 41)",
            "(line 305,col 9)-(line 305,col 35)",
            "(line 307,col 9)-(line 307,col 27)",
            "(line 308,col 9)-(line 308,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIsEmpty()",
        "snippet": "    public void testIsEmpty() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(true, sb.isEmpty());\n        \n        sb.append(\"Hello\");\n        assertEquals(false, sb.isEmpty());\n        \n        sb.clear();\n        assertEquals(true, sb.isEmpty());\n    }\n",
        "begin_line": 311,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 41)",
            "(line 313,col 9)-(line 313,col 41)",
            "(line 315,col 9)-(line 315,col 27)",
            "(line 316,col 9)-(line 316,col 42)",
            "(line 318,col 9)-(line 318,col 19)",
            "(line 319,col 9)-(line 319,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testClear()",
        "snippet": "    public void testClear() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"Hello\");\n        sb.clear();\n        assertEquals(0, sb.length());\n        assertEquals(true, sb.buffer.length >= 5);\n    }\n",
        "begin_line": 322,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 41)",
            "(line 324,col 9)-(line 324,col 27)",
            "(line 325,col 9)-(line 325,col 19)",
            "(line 326,col 9)-(line 326,col 37)",
            "(line 327,col 9)-(line 327,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testCharAt()",
        "snippet": "    public void testCharAt() {\n        StrBuilder sb = new StrBuilder();\n        try {\n            sb.charAt(0);\n            fail(\"charAt(0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.charAt(-1);\n            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        sb.append(\"foo\");\n        assertEquals('f', sb.charAt(0));\n        assertEquals('o', sb.charAt(1));\n        assertEquals('o', sb.charAt(2));\n        try {\n            sb.charAt(-1);\n            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.charAt(3);\n            fail(\"charAt(3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n    }\n",
        "begin_line": 331,
        "end_line": 361,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 41)",
            "(line 333,col 9)-(line 338,col 9)",
            "(line 339,col 9)-(line 344,col 9)",
            "(line 345,col 9)-(line 345,col 25)",
            "(line 346,col 9)-(line 346,col 40)",
            "(line 347,col 9)-(line 347,col 40)",
            "(line 348,col 9)-(line 348,col 40)",
            "(line 349,col 9)-(line 354,col 9)",
            "(line 355,col 9)-(line 360,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testSetCharAt()",
        "snippet": "    public void testSetCharAt() {\n        StrBuilder sb = new StrBuilder();\n        try {\n            sb.setCharAt(0, 'f');\n            fail(\"setCharAt(0,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.setCharAt(-1, 'f');\n            fail(\"setCharAt(-1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        sb.append(\"foo\");\n        sb.setCharAt(0, 'b');\n        sb.setCharAt(1, 'a');\n        sb.setCharAt(2, 'r');\n        try {\n            sb.setCharAt(3, '!');\n            fail(\"setCharAt(3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        assertEquals(\"bar\", sb.toString());\n    }\n",
        "begin_line": 364,
        "end_line": 389,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 41)",
            "(line 366,col 9)-(line 371,col 9)",
            "(line 372,col 9)-(line 377,col 9)",
            "(line 378,col 9)-(line 378,col 25)",
            "(line 379,col 9)-(line 379,col 29)",
            "(line 380,col 9)-(line 380,col 29)",
            "(line 381,col 9)-(line 381,col 29)",
            "(line 382,col 9)-(line 387,col 9)",
            "(line 388,col 9)-(line 388,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteCharAt()",
        "snippet": "    public void testDeleteCharAt() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        sb.deleteCharAt(0);\n        assertEquals(\"bc\", sb.toString()); \n        \n        try {\n            sb.deleteCharAt(1000);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n    }\n",
        "begin_line": 392,
        "end_line": 401,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 46)",
            "(line 394,col 9)-(line 394,col 27)",
            "(line 395,col 9)-(line 395,col 42)",
            "(line 397,col 9)-(line 400,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testToCharArray()",
        "snippet": "    public void testToCharArray() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());\n\n        char[] a = sb.toCharArray();\n        assertNotNull(\"toCharArray() result is null\", a);\n        assertEquals(\"toCharArray() result is too large\", 0, a.length);\n\n        sb.append(\"junit\");\n        a = sb.toCharArray();\n        assertEquals(\"toCharArray() result incorrect length\", 5, a.length);\n        assertTrue(\"toCharArray() result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n    }\n",
        "begin_line": 404,
        "end_line": 416,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 41)",
            "(line 406,col 9)-(line 406,col 68)",
            "(line 408,col 9)-(line 408,col 36)",
            "(line 409,col 9)-(line 409,col 57)",
            "(line 410,col 9)-(line 410,col 71)",
            "(line 412,col 9)-(line 412,col 27)",
            "(line 413,col 9)-(line 413,col 29)",
            "(line 414,col 9)-(line 414,col 75)",
            "(line 415,col 9)-(line 415,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testToCharArrayIntInt()",
        "snippet": "    public void testToCharArrayIntInt() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));\n\n        sb.append(\"junit\");\n        char[] a = sb.toCharArray(0, 20); // too large test\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 5, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n\n        a = sb.toCharArray(0, 4);\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n\n        a = sb.toCharArray(0, 4);\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n\n        a = sb.toCharArray(0, 1);\n        assertNotNull(\"toCharArray(int,int) result is null\", a);\n\n        try {\n            sb.toCharArray(-1, 5);\n            fail(\"no string index out of bound on -1\");\n        } catch (IndexOutOfBoundsException e) {\n        }\n\n        try {\n            sb.toCharArray(6, 5);\n            fail(\"no string index out of bound on -1\");\n        } catch (IndexOutOfBoundsException e) {\n        }\n    }\n",
        "begin_line": 418,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 419,col 9)-(line 419,col 41)",
            "(line 420,col 9)-(line 420,col 72)",
            "(line 422,col 9)-(line 422,col 27)",
            "(line 423,col 9)-(line 423,col 41)",
            "(line 424,col 9)-(line 424,col 82)",
            "(line 425,col 9)-(line 425,col 106)",
            "(line 427,col 9)-(line 427,col 33)",
            "(line 428,col 9)-(line 428,col 82)",
            "(line 429,col 9)-(line 429,col 105)",
            "(line 431,col 9)-(line 431,col 33)",
            "(line 432,col 9)-(line 432,col 82)",
            "(line 433,col 9)-(line 433,col 105)",
            "(line 435,col 9)-(line 435,col 33)",
            "(line 436,col 9)-(line 436,col 64)",
            "(line 438,col 9)-(line 442,col 9)",
            "(line 444,col 9)-(line 448,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetChars()",
        "snippet": "    public void testGetChars ( ) {\n        StrBuilder sb = new StrBuilder();\n        \n        char[] input = new char[10];\n        char[] a = sb.getChars(input);\n        assertSame (input, a);\n        assertTrue(Arrays.equals(new char[10], a));\n        \n        sb.append(\"junit\");\n        a = sb.getChars(input);\n        assertSame(input, a);\n        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a));\n        \n        a = sb.getChars(null);\n        assertNotSame(input,a);\n        assertEquals(5,a.length);\n        assertTrue(Arrays.equals(\"junit\".toCharArray(),a));\n        \n        input = new char[5];\n        a = sb.getChars(input);\n        assertSame(input, a);\n        \n        input = new char[4];\n        a = sb.getChars(input);\n        assertNotSame(input, a);\n    }\n",
        "begin_line": 451,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 41)",
            "(line 454,col 9)-(line 454,col 36)",
            "(line 455,col 9)-(line 455,col 38)",
            "(line 456,col 9)-(line 456,col 30)",
            "(line 457,col 9)-(line 457,col 51)",
            "(line 459,col 9)-(line 459,col 27)",
            "(line 460,col 9)-(line 460,col 31)",
            "(line 461,col 9)-(line 461,col 29)",
            "(line 462,col 9)-(line 462,col 80)",
            "(line 464,col 9)-(line 464,col 30)",
            "(line 465,col 9)-(line 465,col 31)",
            "(line 466,col 9)-(line 466,col 33)",
            "(line 467,col 9)-(line 467,col 59)",
            "(line 469,col 9)-(line 469,col 28)",
            "(line 470,col 9)-(line 470,col 31)",
            "(line 471,col 9)-(line 471,col 29)",
            "(line 473,col 9)-(line 473,col 28)",
            "(line 474,col 9)-(line 474,col 31)",
            "(line 475,col 9)-(line 475,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()",
        "snippet": "    public void testGetCharsIntIntCharArrayInt( ) {\n        StrBuilder sb = new StrBuilder();\n               \n        sb.append(\"junit\");\n        char[] a = new char[5];\n        sb.getChars(0,5,a,0);\n        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a));\n        \n        a = new char[5];\n        sb.getChars(0,2,a,3);\n        assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a));\n        \n        try {\n            sb.getChars(-1,0,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(0,-1,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(0,20,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(4,2,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n    }\n",
        "begin_line": 478,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 41)",
            "(line 481,col 9)-(line 481,col 27)",
            "(line 482,col 9)-(line 482,col 31)",
            "(line 483,col 9)-(line 483,col 29)",
            "(line 484,col 9)-(line 484,col 70)",
            "(line 486,col 9)-(line 486,col 24)",
            "(line 487,col 9)-(line 487,col 29)",
            "(line 488,col 9)-(line 488,col 64)",
            "(line 490,col 9)-(line 495,col 9)",
            "(line 497,col 9)-(line 502,col 9)",
            "(line 504,col 9)-(line 509,col 9)",
            "(line 511,col 9)-(line 516,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteIntInt()",
        "snippet": "    public void testDeleteIntInt() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        sb.delete(0, 1);\n        assertEquals(\"bc\", sb.toString()); \n        sb.delete(1, 2);\n        assertEquals(\"b\", sb.toString());\n        sb.delete(0, 1);\n        assertEquals(\"\", sb.toString()); \n        sb.delete(0, 1000);\n        assertEquals(\"\", sb.toString()); \n        \n        try {\n            sb.delete(1, 2);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            sb.delete(-1, 1);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        \n        sb = new StrBuilder(\"anything\");\n        try {\n            sb.delete(2, 1);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n    }\n",
        "begin_line": 520,
        "end_line": 545,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 46)",
            "(line 522,col 9)-(line 522,col 24)",
            "(line 523,col 9)-(line 523,col 42)",
            "(line 524,col 9)-(line 524,col 24)",
            "(line 525,col 9)-(line 525,col 41)",
            "(line 526,col 9)-(line 526,col 24)",
            "(line 527,col 9)-(line 527,col 40)",
            "(line 528,col 9)-(line 528,col 27)",
            "(line 529,col 9)-(line 529,col 40)",
            "(line 531,col 9)-(line 534,col 48)",
            "(line 535,col 9)-(line 538,col 48)",
            "(line 540,col 9)-(line 540,col 40)",
            "(line 541,col 9)-(line 544,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_char()",
        "snippet": "    public void testDeleteAll_char() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.deleteAll('X');\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll('a');\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.deleteAll('c');\n        assertEquals(\"bbb\", sb.toString());\n        sb.deleteAll('b');\n        assertEquals(\"\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteAll('b');\n        assertEquals(\"\", sb.toString());\n    }\n",
        "begin_line": 548,
        "end_line": 562,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 549,col 9)-(line 549,col 51)",
            "(line 550,col 9)-(line 550,col 26)",
            "(line 551,col 9)-(line 551,col 48)",
            "(line 552,col 9)-(line 552,col 26)",
            "(line 553,col 9)-(line 553,col 46)",
            "(line 554,col 9)-(line 554,col 26)",
            "(line 555,col 9)-(line 555,col 43)",
            "(line 556,col 9)-(line 556,col 26)",
            "(line 557,col 9)-(line 557,col 40)",
            "(line 559,col 9)-(line 559,col 32)",
            "(line 560,col 9)-(line 560,col 26)",
            "(line 561,col 9)-(line 561,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_char()",
        "snippet": "    public void testDeleteFirst_char() {\n        StrBuilder sb = new StrBuilder(\"abcba\");\n        sb.deleteFirst('X');\n        assertEquals(\"abcba\", sb.toString());\n        sb.deleteFirst('a');\n        assertEquals(\"bcba\", sb.toString());\n        sb.deleteFirst('c');\n        assertEquals(\"bba\", sb.toString());\n        sb.deleteFirst('b');\n        assertEquals(\"ba\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteFirst('b');\n        assertEquals(\"\", sb.toString());\n    }\n",
        "begin_line": 564,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 565,col 48)",
            "(line 566,col 9)-(line 566,col 28)",
            "(line 567,col 9)-(line 567,col 45)",
            "(line 568,col 9)-(line 568,col 28)",
            "(line 569,col 9)-(line 569,col 44)",
            "(line 570,col 9)-(line 570,col 28)",
            "(line 571,col 9)-(line 571,col 43)",
            "(line 572,col 9)-(line 572,col 28)",
            "(line 573,col 9)-(line 573,col 42)",
            "(line 575,col 9)-(line 575,col 32)",
            "(line 576,col 9)-(line 576,col 28)",
            "(line 577,col 9)-(line 577,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_String()",
        "snippet": "    public void testDeleteAll_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.deleteAll((String) null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll(\"\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.deleteAll(\"X\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll(\"a\");\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.deleteAll(\"c\");\n        assertEquals(\"bbb\", sb.toString());\n        sb.deleteAll(\"b\");\n        assertEquals(\"\", sb.toString());\n\n        sb = new StrBuilder(\"abcbccba\");\n        sb.deleteAll(\"bc\");\n        assertEquals(\"acba\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteAll(\"bc\");\n        assertEquals(\"\", sb.toString());\n    }\n",
        "begin_line": 581,
        "end_line": 604,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 582,col 9)-(line 582,col 51)",
            "(line 583,col 9)-(line 583,col 36)",
            "(line 584,col 9)-(line 584,col 48)",
            "(line 585,col 9)-(line 585,col 25)",
            "(line 586,col 9)-(line 586,col 48)",
            "(line 588,col 9)-(line 588,col 26)",
            "(line 589,col 9)-(line 589,col 48)",
            "(line 590,col 9)-(line 590,col 26)",
            "(line 591,col 9)-(line 591,col 46)",
            "(line 592,col 9)-(line 592,col 26)",
            "(line 593,col 9)-(line 593,col 43)",
            "(line 594,col 9)-(line 594,col 26)",
            "(line 595,col 9)-(line 595,col 40)",
            "(line 597,col 9)-(line 597,col 40)",
            "(line 598,col 9)-(line 598,col 27)",
            "(line 599,col 9)-(line 599,col 44)",
            "(line 601,col 9)-(line 601,col 32)",
            "(line 602,col 9)-(line 602,col 27)",
            "(line 603,col 9)-(line 603,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_String()",
        "snippet": "    public void testDeleteFirst_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.deleteFirst((String) null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteFirst(\"\");\n        assertEquals(\"abcbccba\", sb.toString());\n\n        sb.deleteFirst(\"X\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteFirst(\"a\");\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.deleteFirst(\"c\");\n        assertEquals(\"bbccba\", sb.toString());\n        sb.deleteFirst(\"b\");\n        assertEquals(\"bccba\", sb.toString());\n\n        sb = new StrBuilder(\"abcbccba\");\n        sb.deleteFirst(\"bc\");\n        assertEquals(\"abccba\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteFirst(\"bc\");\n        assertEquals(\"\", sb.toString());\n    }\n",
        "begin_line": 606,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 607,col 9)-(line 607,col 51)",
            "(line 608,col 9)-(line 608,col 38)",
            "(line 609,col 9)-(line 609,col 48)",
            "(line 610,col 9)-(line 610,col 27)",
            "(line 611,col 9)-(line 611,col 48)",
            "(line 613,col 9)-(line 613,col 28)",
            "(line 614,col 9)-(line 614,col 48)",
            "(line 615,col 9)-(line 615,col 28)",
            "(line 616,col 9)-(line 616,col 47)",
            "(line 617,col 9)-(line 617,col 28)",
            "(line 618,col 9)-(line 618,col 46)",
            "(line 619,col 9)-(line 619,col 28)",
            "(line 620,col 9)-(line 620,col 45)",
            "(line 622,col 9)-(line 622,col 40)",
            "(line 623,col 9)-(line 623,col 29)",
            "(line 624,col 9)-(line 624,col 46)",
            "(line 626,col 9)-(line 626,col 32)",
            "(line 627,col 9)-(line 627,col 29)",
            "(line 628,col 9)-(line 628,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_StrMatcher()",
        "snippet": "    public void testDeleteAll_StrMatcher() {\n        StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n        sb.deleteAll((StrMatcher) null);\n        assertEquals(\"A0xA1A2yA3\", sb.toString());\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"xy\", sb.toString());\n\n        sb = new StrBuilder(\"Ax1\");\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"Ax1\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"\", sb.toString());\n    }\n",
        "begin_line": 632,
        "end_line": 646,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 633,col 9)-(line 633,col 53)",
            "(line 634,col 9)-(line 634,col 40)",
            "(line 635,col 9)-(line 635,col 50)",
            "(line 636,col 9)-(line 636,col 39)",
            "(line 637,col 9)-(line 637,col 42)",
            "(line 639,col 9)-(line 639,col 35)",
            "(line 640,col 9)-(line 640,col 39)",
            "(line 641,col 9)-(line 641,col 43)",
            "(line 643,col 9)-(line 643,col 32)",
            "(line 644,col 9)-(line 644,col 39)",
            "(line 645,col 9)-(line 645,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_StrMatcher()",
        "snippet": "    public void testDeleteFirst_StrMatcher() {\n        StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n        sb.deleteFirst((StrMatcher) null);\n        assertEquals(\"A0xA1A2yA3\", sb.toString());\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"xA1A2yA3\", sb.toString());\n\n        sb = new StrBuilder(\"Ax1\");\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"Ax1\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"\", sb.toString());\n    }\n",
        "begin_line": 648,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 649,col 9)-(line 649,col 53)",
            "(line 650,col 9)-(line 650,col 42)",
            "(line 651,col 9)-(line 651,col 50)",
            "(line 652,col 9)-(line 652,col 41)",
            "(line 653,col 9)-(line 653,col 48)",
            "(line 655,col 9)-(line 655,col 35)",
            "(line 656,col 9)-(line 656,col 41)",
            "(line 657,col 9)-(line 657,col 43)",
            "(line 659,col 9)-(line 659,col 32)",
            "(line 660,col 9)-(line 660,col 41)",
            "(line 661,col 9)-(line 661,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_int_int_String()",
        "snippet": "    public void testReplace_int_int_String() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        sb.replace(0, 1, \"d\");\n        assertEquals(\"dbc\", sb.toString());\n        sb.replace(0, 1, \"aaa\");\n        assertEquals(\"aaabc\", sb.toString());\n        sb.replace(0, 3, \"\");\n        assertEquals(\"bc\", sb.toString());\n        sb.replace(1, 2, (String) null);\n        assertEquals(\"b\", sb.toString());\n        sb.replace(1, 1000, \"text\");\n        assertEquals(\"btext\", sb.toString());\n        sb.replace(0, 1000, \"text\");\n        assertEquals(\"text\", sb.toString());\n        \n        sb = new StrBuilder(\"atext\");\n        sb.replace(1, 1, \"ny\");\n        assertEquals(\"anytext\", sb.toString());\n        try {\n            sb.replace(2, 1, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        \n        sb = new StrBuilder();\n        try {\n            sb.replace(1, 2, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            sb.replace(-1, 1, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n    }\n",
        "begin_line": 665,
        "end_line": 697,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 666,col 9)-(line 666,col 46)",
            "(line 667,col 9)-(line 667,col 30)",
            "(line 668,col 9)-(line 668,col 43)",
            "(line 669,col 9)-(line 669,col 32)",
            "(line 670,col 9)-(line 670,col 45)",
            "(line 671,col 9)-(line 671,col 29)",
            "(line 672,col 9)-(line 672,col 42)",
            "(line 673,col 9)-(line 673,col 40)",
            "(line 674,col 9)-(line 674,col 41)",
            "(line 675,col 9)-(line 675,col 36)",
            "(line 676,col 9)-(line 676,col 45)",
            "(line 677,col 9)-(line 677,col 36)",
            "(line 678,col 9)-(line 678,col 44)",
            "(line 680,col 9)-(line 680,col 37)",
            "(line 681,col 9)-(line 681,col 31)",
            "(line 682,col 9)-(line 682,col 47)",
            "(line 683,col 9)-(line 686,col 48)",
            "(line 688,col 9)-(line 688,col 30)",
            "(line 689,col 9)-(line 692,col 48)",
            "(line 693,col 9)-(line 696,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_char_char()",
        "snippet": "    public void testReplaceAll_char_char() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceAll('x', 'y');\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll('a', 'd');\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll('b', 'e');\n        assertEquals(\"dececced\", sb.toString());\n        sb.replaceAll('c', 'f');\n        assertEquals(\"defeffed\", sb.toString());\n        sb.replaceAll('d', 'd');\n        assertEquals(\"defeffed\", sb.toString());\n    }\n",
        "begin_line": 700,
        "end_line": 712,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 701,col 9)-(line 701,col 51)",
            "(line 702,col 9)-(line 702,col 32)",
            "(line 703,col 9)-(line 703,col 48)",
            "(line 704,col 9)-(line 704,col 32)",
            "(line 705,col 9)-(line 705,col 48)",
            "(line 706,col 9)-(line 706,col 32)",
            "(line 707,col 9)-(line 707,col 48)",
            "(line 708,col 9)-(line 708,col 32)",
            "(line 709,col 9)-(line 709,col 48)",
            "(line 710,col 9)-(line 710,col 32)",
            "(line 711,col 9)-(line 711,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_char_char()",
        "snippet": "    public void testReplaceFirst_char_char() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceFirst('x', 'y');\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst('a', 'd');\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst('b', 'e');\n        assertEquals(\"decbccba\", sb.toString());\n        sb.replaceFirst('c', 'f');\n        assertEquals(\"defbccba\", sb.toString());\n        sb.replaceFirst('d', 'd');\n        assertEquals(\"defbccba\", sb.toString());\n    }\n",
        "begin_line": 715,
        "end_line": 727,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 716,col 9)-(line 716,col 51)",
            "(line 717,col 9)-(line 717,col 34)",
            "(line 718,col 9)-(line 718,col 48)",
            "(line 719,col 9)-(line 719,col 34)",
            "(line 720,col 9)-(line 720,col 48)",
            "(line 721,col 9)-(line 721,col 34)",
            "(line 722,col 9)-(line 722,col 48)",
            "(line 723,col 9)-(line 723,col 34)",
            "(line 724,col 9)-(line 724,col 48)",
            "(line 725,col 9)-(line 725,col 34)",
            "(line 726,col 9)-(line 726,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_String_String()",
        "snippet": "    public void testReplaceAll_String_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceAll((String) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll((String) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"\", null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"\", \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceAll(\"x\", \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"a\", \"d\");\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll(\"d\", null);\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.replaceAll(\"cb\", \"-\");\n        assertEquals(\"b-c-\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceAll(\"b\", \"xbx\");\n        assertEquals(\"axbxcxbxa\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceAll(\"b\", \"xbx\");\n        assertEquals(\"xbxxbx\", sb.toString());\n    }\n",
        "begin_line": 730,
        "end_line": 757,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 731,col 9)-(line 731,col 51)",
            "(line 732,col 9)-(line 732,col 43)",
            "(line 733,col 9)-(line 733,col 48)",
            "(line 734,col 9)-(line 734,col 49)",
            "(line 735,col 9)-(line 735,col 48)",
            "(line 736,col 9)-(line 736,col 32)",
            "(line 737,col 9)-(line 737,col 48)",
            "(line 738,col 9)-(line 738,col 38)",
            "(line 739,col 9)-(line 739,col 48)",
            "(line 741,col 9)-(line 741,col 32)",
            "(line 742,col 9)-(line 742,col 48)",
            "(line 743,col 9)-(line 743,col 32)",
            "(line 744,col 9)-(line 744,col 48)",
            "(line 745,col 9)-(line 745,col 33)",
            "(line 746,col 9)-(line 746,col 46)",
            "(line 747,col 9)-(line 747,col 33)",
            "(line 748,col 9)-(line 748,col 44)",
            "(line 750,col 9)-(line 750,col 37)",
            "(line 751,col 9)-(line 751,col 34)",
            "(line 752,col 9)-(line 752,col 49)",
            "(line 754,col 9)-(line 754,col 34)",
            "(line 755,col 9)-(line 755,col 34)",
            "(line 756,col 9)-(line 756,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_String_String()",
        "snippet": "    public void testReplaceFirst_String_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceFirst((String) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst((String) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"\", null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"\", \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceFirst(\"x\", \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"a\", \"d\");\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst(\"d\", null);\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.replaceFirst(\"cb\", \"-\");\n        assertEquals(\"b-ccba\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceFirst(\"b\", \"xbx\");\n        assertEquals(\"axbxcba\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceFirst(\"b\", \"xbx\");\n        assertEquals(\"xbxb\", sb.toString());\n    }\n",
        "begin_line": 759,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 760,col 9)-(line 760,col 51)",
            "(line 761,col 9)-(line 761,col 45)",
            "(line 762,col 9)-(line 762,col 48)",
            "(line 763,col 9)-(line 763,col 51)",
            "(line 764,col 9)-(line 764,col 48)",
            "(line 765,col 9)-(line 765,col 34)",
            "(line 766,col 9)-(line 766,col 48)",
            "(line 767,col 9)-(line 767,col 40)",
            "(line 768,col 9)-(line 768,col 48)",
            "(line 770,col 9)-(line 770,col 34)",
            "(line 771,col 9)-(line 771,col 48)",
            "(line 772,col 9)-(line 772,col 34)",
            "(line 773,col 9)-(line 773,col 48)",
            "(line 774,col 9)-(line 774,col 35)",
            "(line 775,col 9)-(line 775,col 47)",
            "(line 776,col 9)-(line 776,col 35)",
            "(line 777,col 9)-(line 777,col 46)",
            "(line 779,col 9)-(line 779,col 37)",
            "(line 780,col 9)-(line 780,col 36)",
            "(line 781,col 9)-(line 781,col 47)",
            "(line 783,col 9)-(line 783,col 34)",
            "(line 784,col 9)-(line 784,col 36)",
            "(line 785,col 9)-(line 785,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_StrMatcher_String()",
        "snippet": "    public void testReplaceAll_StrMatcher_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceAll((StrMatcher) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll((StrMatcher) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.noneMatcher(), null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.noneMatcher(), \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceAll(StrMatcher.charMatcher('x'), \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.charMatcher('a'), \"d\");\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll(StrMatcher.charMatcher('d'), null);\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.replaceAll(StrMatcher.stringMatcher(\"cb\"), \"-\");\n        assertEquals(\"b-c-\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"axbxcxbxa\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"xbxxbx\", sb.toString());\n        \n        sb = new StrBuilder(\"A1-A2A3-A4\");\n        sb.replaceAll(A_NUMBER_MATCHER, \"***\");\n        assertEquals(\"***-******-***\", sb.toString());\n    }\n",
        "begin_line": 789,
        "end_line": 820,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 790,col 9)-(line 790,col 51)",
            "(line 791,col 9)-(line 791,col 47)",
            "(line 792,col 9)-(line 792,col 48)",
            "(line 793,col 9)-(line 793,col 53)",
            "(line 794,col 9)-(line 794,col 48)",
            "(line 795,col 9)-(line 795,col 54)",
            "(line 796,col 9)-(line 796,col 48)",
            "(line 797,col 9)-(line 797,col 60)",
            "(line 798,col 9)-(line 798,col 48)",
            "(line 800,col 9)-(line 800,col 56)",
            "(line 801,col 9)-(line 801,col 48)",
            "(line 802,col 9)-(line 802,col 56)",
            "(line 803,col 9)-(line 803,col 48)",
            "(line 804,col 9)-(line 804,col 57)",
            "(line 805,col 9)-(line 805,col 46)",
            "(line 806,col 9)-(line 806,col 59)",
            "(line 807,col 9)-(line 807,col 44)",
            "(line 809,col 9)-(line 809,col 37)",
            "(line 810,col 9)-(line 810,col 58)",
            "(line 811,col 9)-(line 811,col 49)",
            "(line 813,col 9)-(line 813,col 34)",
            "(line 814,col 9)-(line 814,col 58)",
            "(line 815,col 9)-(line 815,col 46)",
            "(line 817,col 9)-(line 817,col 42)",
            "(line 818,col 9)-(line 818,col 47)",
            "(line 819,col 9)-(line 819,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()",
        "snippet": "    public void testReplaceFirst_StrMatcher_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceFirst((StrMatcher) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst((StrMatcher) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.noneMatcher(), null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.noneMatcher(), \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceFirst(StrMatcher.charMatcher('x'), \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.charMatcher('a'), \"d\");\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.charMatcher('d'), null);\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.stringMatcher(\"cb\"), \"-\");\n        assertEquals(\"b-ccba\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"axbxcba\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"xbxb\", sb.toString());\n        \n        sb = new StrBuilder(\"A1-A2A3-A4\");\n        sb.replaceFirst(A_NUMBER_MATCHER, \"***\");\n        assertEquals(\"***-A2A3-A4\", sb.toString());\n    }\n",
        "begin_line": 822,
        "end_line": 853,
        "comment": "",
        "child_ranges": [
            "(line 823,col 9)-(line 823,col 51)",
            "(line 824,col 9)-(line 824,col 49)",
            "(line 825,col 9)-(line 825,col 48)",
            "(line 826,col 9)-(line 826,col 55)",
            "(line 827,col 9)-(line 827,col 48)",
            "(line 828,col 9)-(line 828,col 56)",
            "(line 829,col 9)-(line 829,col 48)",
            "(line 830,col 9)-(line 830,col 62)",
            "(line 831,col 9)-(line 831,col 48)",
            "(line 833,col 9)-(line 833,col 58)",
            "(line 834,col 9)-(line 834,col 48)",
            "(line 835,col 9)-(line 835,col 58)",
            "(line 836,col 9)-(line 836,col 48)",
            "(line 837,col 9)-(line 837,col 59)",
            "(line 838,col 9)-(line 838,col 47)",
            "(line 839,col 9)-(line 839,col 61)",
            "(line 840,col 9)-(line 840,col 46)",
            "(line 842,col 9)-(line 842,col 37)",
            "(line 843,col 9)-(line 843,col 60)",
            "(line 844,col 9)-(line 844,col 47)",
            "(line 846,col 9)-(line 846,col 34)",
            "(line 847,col 9)-(line 847,col 60)",
            "(line 848,col 9)-(line 848,col 44)",
            "(line 850,col 9)-(line 850,col 42)",
            "(line 851,col 9)-(line 851,col 49)",
            "(line 852,col 9)-(line 852,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryMatcher() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replace((StrMatcher) null, \"x\", 0, sb.length(), -1);\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replace(StrMatcher.charMatcher('a'), \"x\", 0, sb.length(), -1);\n        assertEquals(\"xbcbccbx\", sb.toString());\n        \n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"x\", 0, sb.length(), -1);\n        assertEquals(\"xbxcxx\", sb.toString());\n        \n        sb = new StrBuilder(\"A1-A2A3-A4\");\n        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n        assertEquals(\"***-******-***\", sb.toString());\n        \n        sb = new StrBuilder();\n        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n        assertEquals(\"\", sb.toString());\n    }\n",
        "begin_line": 856,
        "end_line": 874,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 857,col 9)-(line 857,col 51)",
            "(line 858,col 9)-(line 858,col 63)",
            "(line 859,col 9)-(line 859,col 48)",
            "(line 861,col 9)-(line 861,col 73)",
            "(line 862,col 9)-(line 862,col 48)",
            "(line 864,col 9)-(line 864,col 76)",
            "(line 865,col 9)-(line 865,col 46)",
            "(line 867,col 9)-(line 867,col 42)",
            "(line 868,col 9)-(line 868,col 64)",
            "(line 869,col 9)-(line 869,col 54)",
            "(line 871,col 9)-(line 871,col 30)",
            "(line 872,col 9)-(line 872,col 64)",
            "(line 873,col 9)-(line 873,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryReplace() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"-\", 0, sb.length(), -1);\n        assertEquals(\"ab-c-a\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"+++\", 0, sb.length(), -1);\n        assertEquals(\"ab+++c+++a\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"\", 0, sb.length(), -1);\n        assertEquals(\"abca\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), null, 0, sb.length(), -1);\n        assertEquals(\"abca\", sb.toString());\n    }\n",
        "begin_line": 876,
        "end_line": 896,
        "comment": "",
        "child_ranges": [
            "(line 877,col 9)-(line 877,col 51)",
            "(line 878,col 9)-(line 878,col 77)",
            "(line 879,col 9)-(line 879,col 48)",
            "(line 881,col 9)-(line 881,col 40)",
            "(line 882,col 9)-(line 882,col 76)",
            "(line 883,col 9)-(line 883,col 46)",
            "(line 885,col 9)-(line 885,col 40)",
            "(line 886,col 9)-(line 886,col 78)",
            "(line 887,col 9)-(line 887,col 50)",
            "(line 889,col 9)-(line 889,col 40)",
            "(line 890,col 9)-(line 890,col 75)",
            "(line 891,col 9)-(line 891,col 44)",
            "(line 893,col 9)-(line 893,col 40)",
            "(line 894,col 9)-(line 894,col 77)",
            "(line 895,col 9)-(line 895,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {\n        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 1, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 3, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 4, sb.length(), -1);\n        assertEquals(\"aaxa-ay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 5, sb.length(), -1);\n        assertEquals(\"aaxaa-y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 6, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 7, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 8, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 9, sb.length(), -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 10, sb.length(), -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 11, sb.length(), -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", -1, sb.length(), -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n    }\n",
        "begin_line": 898,
        "end_line": 956,
        "comment": "",
        "child_ranges": [
            "(line 899,col 9)-(line 899,col 53)",
            "(line 900,col 9)-(line 900,col 76)",
            "(line 901,col 9)-(line 901,col 46)",
            "(line 903,col 9)-(line 903,col 42)",
            "(line 904,col 9)-(line 904,col 76)",
            "(line 905,col 9)-(line 905,col 47)",
            "(line 907,col 9)-(line 907,col 42)",
            "(line 908,col 9)-(line 908,col 76)",
            "(line 909,col 9)-(line 909,col 47)",
            "(line 911,col 9)-(line 911,col 42)",
            "(line 912,col 9)-(line 912,col 76)",
            "(line 913,col 9)-(line 913,col 47)",
            "(line 915,col 9)-(line 915,col 42)",
            "(line 916,col 9)-(line 916,col 76)",
            "(line 917,col 9)-(line 917,col 48)",
            "(line 919,col 9)-(line 919,col 42)",
            "(line 920,col 9)-(line 920,col 76)",
            "(line 921,col 9)-(line 921,col 48)",
            "(line 923,col 9)-(line 923,col 42)",
            "(line 924,col 9)-(line 924,col 76)",
            "(line 925,col 9)-(line 925,col 49)",
            "(line 927,col 9)-(line 927,col 42)",
            "(line 928,col 9)-(line 928,col 76)",
            "(line 929,col 9)-(line 929,col 49)",
            "(line 931,col 9)-(line 931,col 42)",
            "(line 932,col 9)-(line 932,col 76)",
            "(line 933,col 9)-(line 933,col 49)",
            "(line 935,col 9)-(line 935,col 42)",
            "(line 936,col 9)-(line 936,col 76)",
            "(line 937,col 9)-(line 937,col 50)",
            "(line 939,col 9)-(line 939,col 42)",
            "(line 940,col 9)-(line 940,col 77)",
            "(line 941,col 9)-(line 941,col 50)",
            "(line 943,col 9)-(line 943,col 42)",
            "(line 944,col 9)-(line 947,col 49)",
            "(line 948,col 9)-(line 948,col 50)",
            "(line 950,col 9)-(line 950,col 42)",
            "(line 951,col 9)-(line 954,col 49)",
            "(line 955,col 9)-(line 955,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {\n        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 2, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 3, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 4, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 5, -1);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 6, -1);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 7, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 8, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 9, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 1000, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, 1, -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n    }\n",
        "begin_line": 958,
        "end_line": 1009,
        "comment": "",
        "child_ranges": [
            "(line 959,col 9)-(line 959,col 53)",
            "(line 960,col 9)-(line 960,col 66)",
            "(line 961,col 9)-(line 961,col 50)",
            "(line 963,col 9)-(line 963,col 42)",
            "(line 964,col 9)-(line 964,col 66)",
            "(line 965,col 9)-(line 965,col 49)",
            "(line 967,col 9)-(line 967,col 42)",
            "(line 968,col 9)-(line 968,col 66)",
            "(line 969,col 9)-(line 969,col 49)",
            "(line 971,col 9)-(line 971,col 42)",
            "(line 972,col 9)-(line 972,col 66)",
            "(line 973,col 9)-(line 973,col 49)",
            "(line 975,col 9)-(line 975,col 42)",
            "(line 976,col 9)-(line 976,col 66)",
            "(line 977,col 9)-(line 977,col 48)",
            "(line 979,col 9)-(line 979,col 42)",
            "(line 980,col 9)-(line 980,col 66)",
            "(line 981,col 9)-(line 981,col 48)",
            "(line 983,col 9)-(line 983,col 42)",
            "(line 984,col 9)-(line 984,col 66)",
            "(line 985,col 9)-(line 985,col 47)",
            "(line 987,col 9)-(line 987,col 42)",
            "(line 988,col 9)-(line 988,col 66)",
            "(line 989,col 9)-(line 989,col 47)",
            "(line 991,col 9)-(line 991,col 42)",
            "(line 992,col 9)-(line 992,col 66)",
            "(line 993,col 9)-(line 993,col 47)",
            "(line 995,col 9)-(line 995,col 42)",
            "(line 996,col 9)-(line 996,col 67)",
            "(line 997,col 9)-(line 997,col 46)",
            "(line 999,col 9)-(line 999,col 42)",
            "(line 1000,col 9)-(line 1000,col 69)",
            "(line 1001,col 9)-(line 1001,col 46)",
            "(line 1003,col 9)-(line 1003,col 42)",
            "(line 1004,col 9)-(line 1007,col 49)",
            "(line 1008,col 9)-(line 1008,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryCount() {\n        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 0);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 2);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 3);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 4);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 5);\n        assertEquals(\"-x--y-\", sb.toString());\n    }\n",
        "begin_line": 1011,
        "end_line": 1039,
        "comment": "",
        "child_ranges": [
            "(line 1012,col 9)-(line 1012,col 53)",
            "(line 1013,col 9)-(line 1013,col 67)",
            "(line 1014,col 9)-(line 1014,col 46)",
            "(line 1016,col 9)-(line 1016,col 42)",
            "(line 1017,col 9)-(line 1017,col 66)",
            "(line 1018,col 9)-(line 1018,col 50)",
            "(line 1020,col 9)-(line 1020,col 42)",
            "(line 1021,col 9)-(line 1021,col 66)",
            "(line 1022,col 9)-(line 1022,col 49)",
            "(line 1024,col 9)-(line 1024,col 42)",
            "(line 1025,col 9)-(line 1025,col 66)",
            "(line 1026,col 9)-(line 1026,col 48)",
            "(line 1028,col 9)-(line 1028,col 42)",
            "(line 1029,col 9)-(line 1029,col 66)",
            "(line 1030,col 9)-(line 1030,col 47)",
            "(line 1032,col 9)-(line 1032,col 42)",
            "(line 1033,col 9)-(line 1033,col 66)",
            "(line 1034,col 9)-(line 1034,col 46)",
            "(line 1036,col 9)-(line 1036,col 42)",
            "(line 1037,col 9)-(line 1037,col 66)",
            "(line 1038,col 9)-(line 1038,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReverse()",
        "snippet": "    public void testReverse() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(\"\", sb.reverse().toString());\n        \n        sb.clear().append(true);\n        assertEquals(\"eurt\", sb.reverse().toString());\n        assertEquals(\"true\", sb.reverse().toString());\n    }\n",
        "begin_line": 1042,
        "end_line": 1049,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1043,col 9)-(line 1043,col 41)",
            "(line 1044,col 9)-(line 1044,col 50)",
            "(line 1046,col 9)-(line 1046,col 32)",
            "(line 1047,col 9)-(line 1047,col 54)",
            "(line 1048,col 9)-(line 1048,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testTrim()",
        "snippet": "    public void testTrim() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(\"\", sb.reverse().toString());\n        \n        sb.clear().append(\" \\u0000 \");\n        assertEquals(\"\", sb.trim().toString());\n        \n        sb.clear().append(\" \\u0000 a b c\");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\"a b c \\u0000 \");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\" \\u0000 a b c \\u0000 \");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\"a b c\");\n        assertEquals(\"a b c\", sb.trim().toString());\n    }\n",
        "begin_line": 1052,
        "end_line": 1070,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1053,col 9)-(line 1053,col 41)",
            "(line 1054,col 9)-(line 1054,col 50)",
            "(line 1056,col 9)-(line 1056,col 38)",
            "(line 1057,col 9)-(line 1057,col 47)",
            "(line 1059,col 9)-(line 1059,col 43)",
            "(line 1060,col 9)-(line 1060,col 52)",
            "(line 1062,col 9)-(line 1062,col 43)",
            "(line 1063,col 9)-(line 1063,col 52)",
            "(line 1065,col 9)-(line 1065,col 51)",
            "(line 1066,col 9)-(line 1066,col 52)",
            "(line 1068,col 9)-(line 1068,col 35)",
            "(line 1069,col 9)-(line 1069,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testStartsWith()",
        "snippet": "    public void testStartsWith() {\n        StrBuilder sb = new StrBuilder();\n        assertFalse(sb.startsWith(\"a\"));\n        assertFalse(sb.startsWith(null));\n        assertTrue(sb.startsWith(\"\"));\n        sb.append(\"abc\");\n        assertTrue(sb.startsWith(\"a\"));\n        assertTrue(sb.startsWith(\"ab\"));\n        assertTrue(sb.startsWith(\"abc\"));\n        assertFalse(sb.startsWith(\"cba\"));\n    }\n",
        "begin_line": 1073,
        "end_line": 1083,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1074,col 9)-(line 1074,col 41)",
            "(line 1075,col 9)-(line 1075,col 40)",
            "(line 1076,col 9)-(line 1076,col 41)",
            "(line 1077,col 9)-(line 1077,col 38)",
            "(line 1078,col 9)-(line 1078,col 25)",
            "(line 1079,col 9)-(line 1079,col 39)",
            "(line 1080,col 9)-(line 1080,col 40)",
            "(line 1081,col 9)-(line 1081,col 41)",
            "(line 1082,col 9)-(line 1082,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testEndsWith()",
        "snippet": "    public void testEndsWith() {\n        StrBuilder sb = new StrBuilder();\n        assertFalse(sb.endsWith(\"a\"));\n        assertFalse(sb.endsWith(\"c\"));\n        assertTrue(sb.endsWith(\"\"));\n        assertFalse(sb.endsWith(null));\n        sb.append(\"abc\");\n        assertTrue(sb.endsWith(\"c\"));\n        assertTrue(sb.endsWith(\"bc\"));\n        assertTrue(sb.endsWith(\"abc\"));\n        assertFalse(sb.endsWith(\"cba\"));\n        assertFalse(sb.endsWith(\"abcd\"));\n        assertFalse(sb.endsWith(\" abc\"));\n        assertFalse(sb.endsWith(\"abc \"));\n    }\n",
        "begin_line": 1085,
        "end_line": 1099,
        "comment": "",
        "child_ranges": [
            "(line 1086,col 9)-(line 1086,col 41)",
            "(line 1087,col 9)-(line 1087,col 38)",
            "(line 1088,col 9)-(line 1088,col 38)",
            "(line 1089,col 9)-(line 1089,col 36)",
            "(line 1090,col 9)-(line 1090,col 39)",
            "(line 1091,col 9)-(line 1091,col 25)",
            "(line 1092,col 9)-(line 1092,col 37)",
            "(line 1093,col 9)-(line 1093,col 38)",
            "(line 1094,col 9)-(line 1094,col 39)",
            "(line 1095,col 9)-(line 1095,col 40)",
            "(line 1096,col 9)-(line 1096,col 41)",
            "(line 1097,col 9)-(line 1097,col 41)",
            "(line 1098,col 9)-(line 1098,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testSubstringInt()",
        "snippet": "    public void testSubstringInt() {\n        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n        assertEquals (\"goodbye\", sb.substring(6));\n        assertEquals (\"hello goodbye\".substring(6), sb.substring(6));\n        assertEquals (\"hello goodbye\", sb.substring(0));\n        assertEquals (\"hello goodbye\".substring(0), sb.substring(0));\n        try {\n            sb.substring(-1);\n            fail ();\n        } catch (IndexOutOfBoundsException e) {}\n        \n        try {\n            sb.substring(15);\n            fail ();\n        } catch (IndexOutOfBoundsException e) {}\n    \n    }\n",
        "begin_line": 1102,
        "end_line": 1118,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1103,col 9)-(line 1103,col 57)",
            "(line 1104,col 9)-(line 1104,col 50)",
            "(line 1105,col 9)-(line 1105,col 69)",
            "(line 1106,col 9)-(line 1106,col 56)",
            "(line 1107,col 9)-(line 1107,col 69)",
            "(line 1108,col 9)-(line 1111,col 48)",
            "(line 1113,col 9)-(line 1116,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testSubstringIntInt()",
        "snippet": "    public void testSubstringIntInt() {\n        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n        assertEquals (\"hello\", sb.substring(0, 5));\n        assertEquals (\"hello goodbye\".substring(0, 6), sb.substring(0, 6));\n        \n        assertEquals (\"goodbye\", sb.substring(6, 13));\n        assertEquals (\"hello goodbye\".substring(6,13), sb.substring(6, 13));\n        \n        assertEquals (\"goodbye\", sb.substring(6, 20));\n        \n        try {\n            sb.substring(-1, 5);\n            fail();\n        } catch (IndexOutOfBoundsException e) {}\n        \n        try {\n            sb.substring(15, 20);\n            fail();\n        } catch (IndexOutOfBoundsException e) {}\n    }\n",
        "begin_line": 1120,
        "end_line": 1139,
        "comment": "",
        "child_ranges": [
            "(line 1121,col 9)-(line 1121,col 57)",
            "(line 1122,col 9)-(line 1122,col 51)",
            "(line 1123,col 9)-(line 1123,col 75)",
            "(line 1125,col 9)-(line 1125,col 54)",
            "(line 1126,col 9)-(line 1126,col 76)",
            "(line 1128,col 9)-(line 1128,col 54)",
            "(line 1130,col 9)-(line 1133,col 48)",
            "(line 1135,col 9)-(line 1138,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testMidString()",
        "snippet": "    public void testMidString() {\n        StrBuilder sb = new StrBuilder(\"hello goodbye hello\");\n        assertEquals(\"goodbye\", sb.midString(6, 7));\n        assertEquals(\"hello\", sb.midString(0, 5));\n        assertEquals(\"hello\", sb.midString(-5, 5));\n        assertEquals(\"\", sb.midString(0, -1));\n        assertEquals(\"\", sb.midString(20, 2));\n        assertEquals(\"hello\", sb.midString(14, 22));\n    }\n",
        "begin_line": 1142,
        "end_line": 1150,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1143,col 9)-(line 1143,col 62)",
            "(line 1144,col 9)-(line 1144,col 52)",
            "(line 1145,col 9)-(line 1145,col 50)",
            "(line 1146,col 9)-(line 1146,col 51)",
            "(line 1147,col 9)-(line 1147,col 46)",
            "(line 1148,col 9)-(line 1148,col 46)",
            "(line 1149,col 9)-(line 1149,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testRightString()",
        "snippet": "    public void testRightString() {\n        StrBuilder sb = new StrBuilder(\"left right\");\n        assertEquals(\"right\", sb.rightString(5));\n        assertEquals(\"\", sb.rightString(0));\n        assertEquals(\"\", sb.rightString(-5));\n        assertEquals(\"left right\", sb.rightString(15));\n    }\n",
        "begin_line": 1152,
        "end_line": 1158,
        "comment": "",
        "child_ranges": [
            "(line 1153,col 9)-(line 1153,col 53)",
            "(line 1154,col 9)-(line 1154,col 49)",
            "(line 1155,col 9)-(line 1155,col 44)",
            "(line 1156,col 9)-(line 1156,col 45)",
            "(line 1157,col 9)-(line 1157,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLeftString()",
        "snippet": "    public void testLeftString() {\n        StrBuilder sb = new StrBuilder(\"left right\");\n        assertEquals(\"left\", sb.leftString(4));\n        assertEquals(\"\", sb.leftString(0));\n        assertEquals(\"\", sb.leftString(-5));\n        assertEquals(\"left right\", sb.leftString(15));\n    }\n",
        "begin_line": 1160,
        "end_line": 1166,
        "comment": "",
        "child_ranges": [
            "(line 1161,col 9)-(line 1161,col 53)",
            "(line 1162,col 9)-(line 1162,col 47)",
            "(line 1163,col 9)-(line 1163,col 43)",
            "(line 1164,col 9)-(line 1164,col 44)",
            "(line 1165,col 9)-(line 1165,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testContains_char()",
        "snippet": "    public void testContains_char() {\n        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertEquals(true, sb.contains('a'));\n        assertEquals(true, sb.contains('o'));\n        assertEquals(true, sb.contains('z'));\n        assertEquals(false, sb.contains('1'));\n    }\n",
        "begin_line": 1169,
        "end_line": 1175,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1170,col 9)-(line 1170,col 69)",
            "(line 1171,col 9)-(line 1171,col 45)",
            "(line 1172,col 9)-(line 1172,col 45)",
            "(line 1173,col 9)-(line 1173,col 45)",
            "(line 1174,col 9)-(line 1174,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testContains_String()",
        "snippet": "    public void testContains_String() {\n        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertEquals(true, sb.contains(\"a\"));\n        assertEquals(true, sb.contains(\"pq\"));\n        assertEquals(true, sb.contains(\"z\"));\n        assertEquals(false, sb.contains(\"zyx\"));\n        assertEquals(false, sb.contains((String) null));\n    }\n",
        "begin_line": 1177,
        "end_line": 1184,
        "comment": "",
        "child_ranges": [
            "(line 1178,col 9)-(line 1178,col 69)",
            "(line 1179,col 9)-(line 1179,col 45)",
            "(line 1180,col 9)-(line 1180,col 46)",
            "(line 1181,col 9)-(line 1181,col 45)",
            "(line 1182,col 9)-(line 1182,col 48)",
            "(line 1183,col 9)-(line 1183,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testContains_StrMatcher()",
        "snippet": "    public void testContains_StrMatcher() {\n        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertEquals(true, sb.contains(StrMatcher.charMatcher('a')));\n        assertEquals(true, sb.contains(StrMatcher.stringMatcher(\"pq\")));\n        assertEquals(true, sb.contains(StrMatcher.charMatcher('z')));\n        assertEquals(false, sb.contains(StrMatcher.stringMatcher(\"zy\")));\n        assertEquals(false, sb.contains((StrMatcher) null));\n\n        sb = new StrBuilder();\n        assertEquals(false, sb.contains(A_NUMBER_MATCHER));\n        sb.append(\"B A1 C\");\n        assertEquals(true, sb.contains(A_NUMBER_MATCHER));\n    }\n",
        "begin_line": 1186,
        "end_line": 1198,
        "comment": "",
        "child_ranges": [
            "(line 1187,col 9)-(line 1187,col 69)",
            "(line 1188,col 9)-(line 1188,col 69)",
            "(line 1189,col 9)-(line 1189,col 72)",
            "(line 1190,col 9)-(line 1190,col 69)",
            "(line 1191,col 9)-(line 1191,col 73)",
            "(line 1192,col 9)-(line 1192,col 60)",
            "(line 1194,col 9)-(line 1194,col 30)",
            "(line 1195,col 9)-(line 1195,col 59)",
            "(line 1196,col 9)-(line 1196,col 28)",
            "(line 1197,col 9)-(line 1197,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_char()",
        "snippet": "    public void testIndexOf_char() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf('a'));\n        \n        // should work like String#indexOf\n        assertEquals(\"abab\".indexOf('a'), sb.indexOf('a'));\n\n        assertEquals(1, sb.indexOf('b'));\n        assertEquals(\"abab\".indexOf('b'), sb.indexOf('b'));\n\n        assertEquals(-1, sb.indexOf('z'));\n    }\n",
        "begin_line": 1201,
        "end_line": 1212,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1202,col 9)-(line 1202,col 47)",
            "(line 1203,col 9)-(line 1203,col 41)",
            "(line 1206,col 9)-(line 1206,col 59)",
            "(line 1208,col 9)-(line 1208,col 41)",
            "(line 1209,col 9)-(line 1209,col 59)",
            "(line 1211,col 9)-(line 1211,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_char_int()",
        "snippet": "    public void testIndexOf_char_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf('a', -1));\n        assertEquals(0, sb.indexOf('a', 0));\n        assertEquals(2, sb.indexOf('a', 1));\n        assertEquals(-1, sb.indexOf('a', 4));\n        assertEquals(-1, sb.indexOf('a', 5));\n\n        // should work like String#indexOf\n        assertEquals(\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\n\n        assertEquals(3, sb.indexOf('b', 2));\n        assertEquals(\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\n\n        assertEquals(-1, sb.indexOf('z', 2));\n\n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.indexOf('z', 0));\n        assertEquals(-1, sb.indexOf('z', 3));\n    }\n",
        "begin_line": 1214,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1215,col 9)-(line 1215,col 47)",
            "(line 1216,col 9)-(line 1216,col 45)",
            "(line 1217,col 9)-(line 1217,col 44)",
            "(line 1218,col 9)-(line 1218,col 44)",
            "(line 1219,col 9)-(line 1219,col 45)",
            "(line 1220,col 9)-(line 1220,col 45)",
            "(line 1223,col 9)-(line 1223,col 65)",
            "(line 1225,col 9)-(line 1225,col 44)",
            "(line 1226,col 9)-(line 1226,col 65)",
            "(line 1228,col 9)-(line 1228,col 45)",
            "(line 1230,col 9)-(line 1230,col 38)",
            "(line 1231,col 9)-(line 1231,col 44)",
            "(line 1232,col 9)-(line 1232,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_char()",
        "snippet": "    public void testLastIndexOf_char() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        \n        assertEquals (2, sb.lastIndexOf('a'));\n        //should work like String#lastIndexOf\n        assertEquals (\"abab\".lastIndexOf('a'), sb.lastIndexOf('a'));\n        \n        assertEquals(3, sb.lastIndexOf('b'));\n        assertEquals (\"abab\".lastIndexOf('b'), sb.lastIndexOf('b'));\n        \n        assertEquals (-1, sb.lastIndexOf('z'));\n    }\n",
        "begin_line": 1235,
        "end_line": 1246,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 9)-(line 1236,col 47)",
            "(line 1238,col 9)-(line 1238,col 46)",
            "(line 1240,col 9)-(line 1240,col 68)",
            "(line 1242,col 9)-(line 1242,col 45)",
            "(line 1243,col 9)-(line 1243,col 68)",
            "(line 1245,col 9)-(line 1245,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_char_int()",
        "snippet": "    public void testLastIndexOf_char_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(-1, sb.lastIndexOf('a', -1));\n        assertEquals(0, sb.lastIndexOf('a', 0));\n        assertEquals(0, sb.lastIndexOf('a', 1));\n\n        // should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\n\n        assertEquals(1, sb.lastIndexOf('b', 2));\n        assertEquals(\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\n\n        assertEquals(-1, sb.lastIndexOf('z', 2));\n\n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.lastIndexOf('z', sb.length()));\n        assertEquals(-1, sb.lastIndexOf('z', 1));\n    }\n",
        "begin_line": 1248,
        "end_line": 1265,
        "comment": "",
        "child_ranges": [
            "(line 1249,col 9)-(line 1249,col 47)",
            "(line 1250,col 9)-(line 1250,col 50)",
            "(line 1251,col 9)-(line 1251,col 48)",
            "(line 1252,col 9)-(line 1252,col 48)",
            "(line 1255,col 9)-(line 1255,col 73)",
            "(line 1257,col 9)-(line 1257,col 48)",
            "(line 1258,col 9)-(line 1258,col 73)",
            "(line 1260,col 9)-(line 1260,col 49)",
            "(line 1262,col 9)-(line 1262,col 38)",
            "(line 1263,col 9)-(line 1263,col 58)",
            "(line 1264,col 9)-(line 1264,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_String()",
        "snippet": "    public void testIndexOf_String() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        \n        assertEquals(0, sb.indexOf(\"a\"));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\n        \n        assertEquals(0, sb.indexOf(\"ab\"));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\n        \n        assertEquals(1, sb.indexOf(\"b\"));\n        assertEquals(\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\n        \n        assertEquals(1, sb.indexOf(\"ba\"));\n        assertEquals(\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\n        \n        assertEquals(-1, sb.indexOf(\"z\"));\n        \n        assertEquals(-1, sb.indexOf((String) null));\n    }\n",
        "begin_line": 1268,
        "end_line": 1288,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1269,col 9)-(line 1269,col 47)",
            "(line 1271,col 9)-(line 1271,col 41)",
            "(line 1273,col 9)-(line 1273,col 59)",
            "(line 1275,col 9)-(line 1275,col 42)",
            "(line 1277,col 9)-(line 1277,col 61)",
            "(line 1279,col 9)-(line 1279,col 41)",
            "(line 1280,col 9)-(line 1280,col 59)",
            "(line 1282,col 9)-(line 1282,col 42)",
            "(line 1283,col 9)-(line 1283,col 61)",
            "(line 1285,col 9)-(line 1285,col 42)",
            "(line 1287,col 9)-(line 1287,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_String_int()",
        "snippet": "    public void testIndexOf_String_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf(\"a\", -1));\n        assertEquals(0, sb.indexOf(\"a\", 0));\n        assertEquals(2, sb.indexOf(\"a\", 1));\n        assertEquals(2, sb.indexOf(\"a\", 2));\n        assertEquals(-1, sb.indexOf(\"a\", 3));\n        assertEquals(-1, sb.indexOf(\"a\", 4));\n        assertEquals(-1, sb.indexOf(\"a\", 5));\n        \n        assertEquals(-1, sb.indexOf(\"abcdef\", 0));\n        assertEquals(0, sb.indexOf(\"\", 0));\n        assertEquals(1, sb.indexOf(\"\", 1));\n        \n        //should work like String#indexOf\n        assertEquals (\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\n        \n        assertEquals(2, sb.indexOf(\"ab\", 1));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\n        \n        assertEquals(3, sb.indexOf(\"b\", 2));\n        assertEquals(\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\n        \n        assertEquals(1, sb.indexOf(\"ba\", 1));\n        assertEquals(\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\n        \n        assertEquals(-1, sb.indexOf(\"z\", 2));\n        \n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.indexOf(\"za\", 0));\n        assertEquals(-1, sb.indexOf(\"za\", 3));\n        \n        assertEquals(-1, sb.indexOf((String) null, 2));\n    }\n",
        "begin_line": 1290,
        "end_line": 1324,
        "comment": "",
        "child_ranges": [
            "(line 1291,col 9)-(line 1291,col 47)",
            "(line 1292,col 9)-(line 1292,col 45)",
            "(line 1293,col 9)-(line 1293,col 44)",
            "(line 1294,col 9)-(line 1294,col 44)",
            "(line 1295,col 9)-(line 1295,col 44)",
            "(line 1296,col 9)-(line 1296,col 45)",
            "(line 1297,col 9)-(line 1297,col 45)",
            "(line 1298,col 9)-(line 1298,col 45)",
            "(line 1300,col 9)-(line 1300,col 50)",
            "(line 1301,col 9)-(line 1301,col 43)",
            "(line 1302,col 9)-(line 1302,col 43)",
            "(line 1305,col 9)-(line 1305,col 66)",
            "(line 1307,col 9)-(line 1307,col 45)",
            "(line 1309,col 9)-(line 1309,col 67)",
            "(line 1311,col 9)-(line 1311,col 44)",
            "(line 1312,col 9)-(line 1312,col 65)",
            "(line 1314,col 9)-(line 1314,col 45)",
            "(line 1315,col 9)-(line 1315,col 67)",
            "(line 1317,col 9)-(line 1317,col 45)",
            "(line 1319,col 9)-(line 1319,col 38)",
            "(line 1320,col 9)-(line 1320,col 45)",
            "(line 1321,col 9)-(line 1321,col 46)",
            "(line 1323,col 9)-(line 1323,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_String()",
        "snippet": "    public void testLastIndexOf_String() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        \n        assertEquals(2, sb.lastIndexOf(\"a\"));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\n        \n        assertEquals(2, sb.lastIndexOf(\"ab\"));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\n        \n        assertEquals(3, sb.lastIndexOf(\"b\"));\n        assertEquals(\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\n        \n        assertEquals(1, sb.lastIndexOf(\"ba\"));\n        assertEquals(\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\n        \n        assertEquals(-1, sb.lastIndexOf(\"z\"));\n        \n        assertEquals(-1, sb.lastIndexOf((String) null));\n    }\n",
        "begin_line": 1326,
        "end_line": 1346,
        "comment": "",
        "child_ranges": [
            "(line 1327,col 9)-(line 1327,col 47)",
            "(line 1329,col 9)-(line 1329,col 45)",
            "(line 1331,col 9)-(line 1331,col 67)",
            "(line 1333,col 9)-(line 1333,col 46)",
            "(line 1335,col 9)-(line 1335,col 69)",
            "(line 1337,col 9)-(line 1337,col 45)",
            "(line 1338,col 9)-(line 1338,col 67)",
            "(line 1340,col 9)-(line 1340,col 46)",
            "(line 1341,col 9)-(line 1341,col 69)",
            "(line 1343,col 9)-(line 1343,col 46)",
            "(line 1345,col 9)-(line 1345,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_String_int()",
        "snippet": "    public void testLastIndexOf_String_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(-1, sb.lastIndexOf(\"a\", -1));\n        assertEquals(0, sb.lastIndexOf(\"a\", 0));\n        assertEquals(0, sb.lastIndexOf(\"a\", 1));\n        assertEquals(2, sb.lastIndexOf(\"a\", 2));\n        assertEquals(2, sb.lastIndexOf(\"a\", 3));\n        assertEquals(2, sb.lastIndexOf(\"a\", 4));\n        assertEquals(2, sb.lastIndexOf(\"a\", 5));\n        \n        assertEquals(-1, sb.lastIndexOf(\"abcdef\", 3));\n        assertEquals(\"abab\".lastIndexOf(\"\", 3), sb.lastIndexOf(\"\", 3));\n        assertEquals(\"abab\".lastIndexOf(\"\", 1), sb.lastIndexOf(\"\", 1));\n        \n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\n        \n        assertEquals(0, sb.lastIndexOf(\"ab\", 1));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\n        \n        assertEquals(1, sb.lastIndexOf(\"b\", 2));\n        assertEquals(\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\n        \n        assertEquals(1, sb.lastIndexOf(\"ba\", 2));\n        assertEquals(\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\n        \n        assertEquals(-1, sb.lastIndexOf(\"z\", 2));\n        \n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.lastIndexOf(\"za\", sb.length()));\n        assertEquals(-1, sb.lastIndexOf(\"za\", 1));\n        \n        assertEquals(-1, sb.lastIndexOf((String) null, 2));\n    }\n",
        "begin_line": 1348,
        "end_line": 1382,
        "comment": "",
        "child_ranges": [
            "(line 1349,col 9)-(line 1349,col 47)",
            "(line 1350,col 9)-(line 1350,col 50)",
            "(line 1351,col 9)-(line 1351,col 48)",
            "(line 1352,col 9)-(line 1352,col 48)",
            "(line 1353,col 9)-(line 1353,col 48)",
            "(line 1354,col 9)-(line 1354,col 48)",
            "(line 1355,col 9)-(line 1355,col 48)",
            "(line 1356,col 9)-(line 1356,col 48)",
            "(line 1358,col 9)-(line 1358,col 54)",
            "(line 1359,col 9)-(line 1359,col 71)",
            "(line 1360,col 9)-(line 1360,col 71)",
            "(line 1363,col 9)-(line 1363,col 73)",
            "(line 1365,col 9)-(line 1365,col 49)",
            "(line 1367,col 9)-(line 1367,col 75)",
            "(line 1369,col 9)-(line 1369,col 48)",
            "(line 1370,col 9)-(line 1370,col 73)",
            "(line 1372,col 9)-(line 1372,col 49)",
            "(line 1373,col 9)-(line 1373,col 75)",
            "(line 1375,col 9)-(line 1375,col 49)",
            "(line 1377,col 9)-(line 1377,col 38)",
            "(line 1378,col 9)-(line 1378,col 59)",
            "(line 1379,col 9)-(line 1379,col 50)",
            "(line 1381,col 9)-(line 1381,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_StrMatcher()",
        "snippet": "    public void testIndexOf_StrMatcher() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.indexOf((StrMatcher) null));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));\n        assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));\n        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));\n        assertEquals(-1, sb.indexOf((StrMatcher) null));\n        \n        sb.append(\" A1 junction\");\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\n    }\n",
        "begin_line": 1385,
        "end_line": 1400,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1386,col 9)-(line 1386,col 41)",
            "(line 1387,col 9)-(line 1387,col 56)",
            "(line 1388,col 9)-(line 1388,col 66)",
            "(line 1390,col 9)-(line 1390,col 27)",
            "(line 1391,col 9)-(line 1391,col 65)",
            "(line 1392,col 9)-(line 1392,col 65)",
            "(line 1393,col 9)-(line 1393,col 63)",
            "(line 1394,col 9)-(line 1394,col 65)",
            "(line 1395,col 9)-(line 1395,col 63)",
            "(line 1396,col 9)-(line 1396,col 56)",
            "(line 1398,col 9)-(line 1398,col 34)",
            "(line 1399,col 9)-(line 1399,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_StrMatcher_int()",
        "snippet": "    public void testIndexOf_StrMatcher_int() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.indexOf((StrMatcher) null, 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));\n        \n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));\n        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));\n        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));\n        \n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));\n        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));\n        \n        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));\n        assertEquals(-1, sb.indexOf((StrMatcher) null, 0));\n        \n        sb.append(\" A1 junction with A2\");\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));\n        assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\n    }\n",
        "begin_line": 1402,
        "end_line": 1439,
        "comment": "",
        "child_ranges": [
            "(line 1403,col 9)-(line 1403,col 41)",
            "(line 1404,col 9)-(line 1404,col 59)",
            "(line 1405,col 9)-(line 1405,col 69)",
            "(line 1406,col 9)-(line 1406,col 69)",
            "(line 1408,col 9)-(line 1408,col 27)",
            "(line 1409,col 9)-(line 1409,col 69)",
            "(line 1410,col 9)-(line 1410,col 68)",
            "(line 1411,col 9)-(line 1411,col 69)",
            "(line 1412,col 9)-(line 1412,col 70)",
            "(line 1414,col 9)-(line 1414,col 69)",
            "(line 1415,col 9)-(line 1415,col 68)",
            "(line 1416,col 9)-(line 1416,col 68)",
            "(line 1417,col 9)-(line 1417,col 68)",
            "(line 1418,col 9)-(line 1418,col 68)",
            "(line 1419,col 9)-(line 1419,col 69)",
            "(line 1420,col 9)-(line 1420,col 69)",
            "(line 1421,col 9)-(line 1421,col 69)",
            "(line 1423,col 9)-(line 1423,col 67)",
            "(line 1424,col 9)-(line 1424,col 66)",
            "(line 1425,col 9)-(line 1425,col 66)",
            "(line 1426,col 9)-(line 1426,col 67)",
            "(line 1427,col 9)-(line 1427,col 68)",
            "(line 1429,col 9)-(line 1429,col 66)",
            "(line 1430,col 9)-(line 1430,col 59)",
            "(line 1432,col 9)-(line 1432,col 42)",
            "(line 1433,col 9)-(line 1433,col 57)",
            "(line 1434,col 9)-(line 1434,col 57)",
            "(line 1435,col 9)-(line 1435,col 58)",
            "(line 1436,col 9)-(line 1436,col 59)",
            "(line 1437,col 9)-(line 1437,col 59)",
            "(line 1438,col 9)-(line 1438,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_StrMatcher()",
        "snippet": "    public void testLastIndexOf_StrMatcher() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));\n        assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n        \n        sb.append(\" A1 junction\");\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\n    }\n",
        "begin_line": 1441,
        "end_line": 1456,
        "comment": "",
        "child_ranges": [
            "(line 1442,col 9)-(line 1442,col 41)",
            "(line 1443,col 9)-(line 1443,col 60)",
            "(line 1444,col 9)-(line 1444,col 70)",
            "(line 1446,col 9)-(line 1446,col 27)",
            "(line 1447,col 9)-(line 1447,col 69)",
            "(line 1448,col 9)-(line 1448,col 69)",
            "(line 1449,col 9)-(line 1449,col 67)",
            "(line 1450,col 9)-(line 1450,col 69)",
            "(line 1451,col 9)-(line 1451,col 67)",
            "(line 1452,col 9)-(line 1452,col 60)",
            "(line 1454,col 9)-(line 1454,col 34)",
            "(line 1455,col 9)-(line 1455,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()",
        "snippet": "    public void testLastIndexOf_StrMatcher_int() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));\n        \n        sb.append(\"ab bd\");\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));\n        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));\n        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));\n        \n        sb.append(\" A1 junction with A2\");\n        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));\n        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds\n        assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));\n    }\n",
        "begin_line": 1458,
        "end_line": 1496,
        "comment": "",
        "child_ranges": [
            "(line 1459,col 9)-(line 1459,col 41)",
            "(line 1460,col 9)-(line 1460,col 63)",
            "(line 1461,col 9)-(line 1461,col 73)",
            "(line 1462,col 9)-(line 1462,col 73)",
            "(line 1463,col 9)-(line 1463,col 74)",
            "(line 1465,col 9)-(line 1465,col 27)",
            "(line 1466,col 9)-(line 1466,col 74)",
            "(line 1467,col 9)-(line 1467,col 72)",
            "(line 1468,col 9)-(line 1468,col 72)",
            "(line 1469,col 9)-(line 1469,col 73)",
            "(line 1471,col 9)-(line 1471,col 74)",
            "(line 1472,col 9)-(line 1472,col 73)",
            "(line 1473,col 9)-(line 1473,col 72)",
            "(line 1474,col 9)-(line 1474,col 72)",
            "(line 1475,col 9)-(line 1475,col 72)",
            "(line 1476,col 9)-(line 1476,col 72)",
            "(line 1477,col 9)-(line 1477,col 72)",
            "(line 1478,col 9)-(line 1478,col 72)",
            "(line 1480,col 9)-(line 1480,col 72)",
            "(line 1481,col 9)-(line 1481,col 71)",
            "(line 1482,col 9)-(line 1482,col 70)",
            "(line 1483,col 9)-(line 1483,col 70)",
            "(line 1484,col 9)-(line 1484,col 71)",
            "(line 1486,col 9)-(line 1486,col 70)",
            "(line 1487,col 9)-(line 1487,col 63)",
            "(line 1489,col 9)-(line 1489,col 42)",
            "(line 1490,col 9)-(line 1490,col 62)",
            "(line 1491,col 9)-(line 1491,col 62)",
            "(line 1492,col 9)-(line 1492,col 61)",
            "(line 1493,col 9)-(line 1493,col 62)",
            "(line 1494,col 9)-(line 1494,col 62)",
            "(line 1495,col 9)-(line 1495,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.Anonymous-39315314-f24a-441d-a084-979ec8d549dd.isMatch(char[], int, int, int)",
        "snippet": "        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n            if (buffer[pos] == 'A') {\n                pos++;\n                if (pos < bufferEnd && buffer[pos] >= '0' && buffer[pos] <= '9') {\n                    return 2;\n                }\n            }\n            return 0;\n        }\n",
        "begin_line": 1499,
        "end_line": 1507,
        "comment": "",
        "child_ranges": [
            "(line 1500,col 13)-(line 1505,col 13)",
            "(line 1506,col 13)-(line 1506,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testAsTokenizer()",
        "snippet": "    public void testAsTokenizer() throws Exception {\n        // from Javadoc\n        StrBuilder b = new StrBuilder();\n        b.append(\"a b \");\n        StrTokenizer t = b.asTokenizer();\n        \n        String[] tokens1 = t.getTokenArray();\n        assertEquals(2, tokens1.length);\n        assertEquals(\"a\", tokens1[0]);\n        assertEquals(\"b\", tokens1[1]);\n        assertEquals(2, t.size());\n        \n        b.append(\"c d \");\n        String[] tokens2 = t.getTokenArray();\n        assertEquals(2, tokens2.length);\n        assertEquals(\"a\", tokens2[0]);\n        assertEquals(\"b\", tokens2[1]);\n        assertEquals(2, t.size());\n        assertEquals(\"a\", t.next());\n        assertEquals(\"b\", t.next());\n        \n        t.reset();\n        String[] tokens3 = t.getTokenArray();\n        assertEquals(4, tokens3.length);\n        assertEquals(\"a\", tokens3[0]);\n        assertEquals(\"b\", tokens3[1]);\n        assertEquals(\"c\", tokens3[2]);\n        assertEquals(\"d\", tokens3[3]);\n        assertEquals(4, t.size());\n        assertEquals(\"a\", t.next());\n        assertEquals(\"b\", t.next());\n        assertEquals(\"c\", t.next());\n        assertEquals(\"d\", t.next());\n        \n        assertEquals(\"a b c d \", t.getContent());\n    }\n",
        "begin_line": 1511,
        "end_line": 1546,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1513,col 9)-(line 1513,col 40)",
            "(line 1514,col 9)-(line 1514,col 25)",
            "(line 1515,col 9)-(line 1515,col 41)",
            "(line 1517,col 9)-(line 1517,col 45)",
            "(line 1518,col 9)-(line 1518,col 40)",
            "(line 1519,col 9)-(line 1519,col 38)",
            "(line 1520,col 9)-(line 1520,col 38)",
            "(line 1521,col 9)-(line 1521,col 34)",
            "(line 1523,col 9)-(line 1523,col 25)",
            "(line 1524,col 9)-(line 1524,col 45)",
            "(line 1525,col 9)-(line 1525,col 40)",
            "(line 1526,col 9)-(line 1526,col 38)",
            "(line 1527,col 9)-(line 1527,col 38)",
            "(line 1528,col 9)-(line 1528,col 34)",
            "(line 1529,col 9)-(line 1529,col 36)",
            "(line 1530,col 9)-(line 1530,col 36)",
            "(line 1532,col 9)-(line 1532,col 18)",
            "(line 1533,col 9)-(line 1533,col 45)",
            "(line 1534,col 9)-(line 1534,col 40)",
            "(line 1535,col 9)-(line 1535,col 38)",
            "(line 1536,col 9)-(line 1536,col 38)",
            "(line 1537,col 9)-(line 1537,col 38)",
            "(line 1538,col 9)-(line 1538,col 38)",
            "(line 1539,col 9)-(line 1539,col 34)",
            "(line 1540,col 9)-(line 1540,col 36)",
            "(line 1541,col 9)-(line 1541,col 36)",
            "(line 1542,col 9)-(line 1542,col 36)",
            "(line 1543,col 9)-(line 1543,col 36)",
            "(line 1545,col 9)-(line 1545,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testAsReader()",
        "snippet": "    public void testAsReader() throws Exception {\n        StrBuilder sb = new StrBuilder(\"some text\");\n        Reader reader = sb.asReader();\n        assertEquals(true, reader.ready());\n        char[] buf = new char[40];\n        assertEquals(9, reader.read(buf));\n        assertEquals(\"some text\", new String(buf, 0, 9));\n        \n        assertEquals(-1, reader.read());\n        assertEquals(false, reader.ready());\n        assertEquals(0, reader.skip(2));\n        assertEquals(0, reader.skip(-1));\n        \n        assertEquals(true, reader.markSupported());\n        reader = sb.asReader();\n        assertEquals('s', reader.read());\n        reader.mark(-1);\n        char[] array = new char[3];\n        assertEquals(3, reader.read(array, 0, 3));\n        assertEquals('o', array[0]);\n        assertEquals('m', array[1]);\n        assertEquals('e', array[2]);\n        reader.reset();\n        assertEquals(1, reader.read(array, 1, 1));\n        assertEquals('o', array[0]);\n        assertEquals('o', array[1]);\n        assertEquals('e', array[2]);\n        assertEquals(2, reader.skip(2));\n        assertEquals(' ', reader.read());\n        \n        assertEquals(true, reader.ready());\n        reader.close();\n        assertEquals(true, reader.ready());\n        \n        reader = sb.asReader();\n        array = new char[3];\n        try {\n            reader.read(array, -1, 0);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 0, -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 100, 1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 0, 100);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        \n        assertEquals(0, reader.read(array, 0, 0));\n        assertEquals(0, array[0]);\n        assertEquals(0, array[1]);\n        assertEquals(0, array[2]);\n        \n        reader.skip(9);\n        assertEquals(-1, reader.read(array, 0, 1));\n        \n        reader.reset();\n        array = new char[30];\n        assertEquals(9, reader.read(array, 0, 30));\n    }\n",
        "begin_line": 1549,
        "end_line": 1617,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1550,col 9)-(line 1550,col 52)",
            "(line 1551,col 9)-(line 1551,col 38)",
            "(line 1552,col 9)-(line 1552,col 43)",
            "(line 1553,col 9)-(line 1553,col 34)",
            "(line 1554,col 9)-(line 1554,col 42)",
            "(line 1555,col 9)-(line 1555,col 57)",
            "(line 1557,col 9)-(line 1557,col 40)",
            "(line 1558,col 9)-(line 1558,col 44)",
            "(line 1559,col 9)-(line 1559,col 40)",
            "(line 1560,col 9)-(line 1560,col 41)",
            "(line 1562,col 9)-(line 1562,col 51)",
            "(line 1563,col 9)-(line 1563,col 31)",
            "(line 1564,col 9)-(line 1564,col 41)",
            "(line 1565,col 9)-(line 1565,col 24)",
            "(line 1566,col 9)-(line 1566,col 35)",
            "(line 1567,col 9)-(line 1567,col 50)",
            "(line 1568,col 9)-(line 1568,col 36)",
            "(line 1569,col 9)-(line 1569,col 36)",
            "(line 1570,col 9)-(line 1570,col 36)",
            "(line 1571,col 9)-(line 1571,col 23)",
            "(line 1572,col 9)-(line 1572,col 50)",
            "(line 1573,col 9)-(line 1573,col 36)",
            "(line 1574,col 9)-(line 1574,col 36)",
            "(line 1575,col 9)-(line 1575,col 36)",
            "(line 1576,col 9)-(line 1576,col 40)",
            "(line 1577,col 9)-(line 1577,col 41)",
            "(line 1579,col 9)-(line 1579,col 43)",
            "(line 1580,col 9)-(line 1580,col 23)",
            "(line 1581,col 9)-(line 1581,col 43)",
            "(line 1583,col 9)-(line 1583,col 31)",
            "(line 1584,col 9)-(line 1584,col 28)",
            "(line 1585,col 9)-(line 1588,col 49)",
            "(line 1589,col 9)-(line 1592,col 49)",
            "(line 1593,col 9)-(line 1596,col 49)",
            "(line 1597,col 9)-(line 1600,col 49)",
            "(line 1601,col 9)-(line 1604,col 49)",
            "(line 1606,col 9)-(line 1606,col 50)",
            "(line 1607,col 9)-(line 1607,col 34)",
            "(line 1608,col 9)-(line 1608,col 34)",
            "(line 1609,col 9)-(line 1609,col 34)",
            "(line 1611,col 9)-(line 1611,col 23)",
            "(line 1612,col 9)-(line 1612,col 51)",
            "(line 1614,col 9)-(line 1614,col 23)",
            "(line 1615,col 9)-(line 1615,col 29)",
            "(line 1616,col 9)-(line 1616,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testAsWriter()",
        "snippet": "    public void testAsWriter() throws Exception {\n        StrBuilder sb = new StrBuilder(\"base\");\n        Writer writer = sb.asWriter();\n        \n        writer.write('l');\n        assertEquals(\"basel\", sb.toString());\n        \n        writer.write(new char[] {'i', 'n'});\n        assertEquals(\"baselin\", sb.toString());\n        \n        writer.write(new char[] {'n', 'e', 'r'}, 1, 2);\n        assertEquals(\"baseliner\", sb.toString());\n        \n        writer.write(\" rout\");\n        assertEquals(\"baseliner rout\", sb.toString());\n        \n        writer.write(\"ping that server\", 1, 3);\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.flush();  // no effect\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.close();  // no effect\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.write(\" hi\");  // works after close\n        assertEquals(\"baseliner routing hi\", sb.toString());\n        \n        sb.setLength(4);  // mix and match\n        writer.write('d');\n        assertEquals(\"based\", sb.toString());\n    }\n",
        "begin_line": 1620,
        "end_line": 1651,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1621,col 9)-(line 1621,col 47)",
            "(line 1622,col 9)-(line 1622,col 38)",
            "(line 1624,col 9)-(line 1624,col 26)",
            "(line 1625,col 9)-(line 1625,col 45)",
            "(line 1627,col 9)-(line 1627,col 44)",
            "(line 1628,col 9)-(line 1628,col 47)",
            "(line 1630,col 9)-(line 1630,col 55)",
            "(line 1631,col 9)-(line 1631,col 49)",
            "(line 1633,col 9)-(line 1633,col 30)",
            "(line 1634,col 9)-(line 1634,col 54)",
            "(line 1636,col 9)-(line 1636,col 47)",
            "(line 1637,col 9)-(line 1637,col 57)",
            "(line 1639,col 9)-(line 1639,col 23)",
            "(line 1640,col 9)-(line 1640,col 57)",
            "(line 1642,col 9)-(line 1642,col 23)",
            "(line 1643,col 9)-(line 1643,col 57)",
            "(line 1645,col 9)-(line 1645,col 28)",
            "(line 1646,col 9)-(line 1646,col 60)",
            "(line 1648,col 9)-(line 1648,col 24)",
            "(line 1649,col 9)-(line 1649,col 26)",
            "(line 1650,col 9)-(line 1650,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testEqualsIgnoreCase()",
        "snippet": "    public void testEqualsIgnoreCase() {\n        StrBuilder sb1 = new StrBuilder();\n        StrBuilder sb2 = new StrBuilder();\n        assertEquals(true, sb1.equalsIgnoreCase(sb1));\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n        assertEquals(true, sb2.equalsIgnoreCase(sb2));\n        \n        sb1.append(\"abc\");\n        assertEquals(false, sb1.equalsIgnoreCase(sb2));\n        \n        sb2.append(\"ABC\");\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n        \n        sb2.clear().append(\"abc\");\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n        assertEquals(true, sb1.equalsIgnoreCase(sb1));\n        assertEquals(true, sb2.equalsIgnoreCase(sb2));\n        \n        sb2.clear().append(\"aBc\");\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n    }\n",
        "begin_line": 1654,
        "end_line": 1674,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1655,col 9)-(line 1655,col 42)",
            "(line 1656,col 9)-(line 1656,col 42)",
            "(line 1657,col 9)-(line 1657,col 54)",
            "(line 1658,col 9)-(line 1658,col 54)",
            "(line 1659,col 9)-(line 1659,col 54)",
            "(line 1661,col 9)-(line 1661,col 26)",
            "(line 1662,col 9)-(line 1662,col 55)",
            "(line 1664,col 9)-(line 1664,col 26)",
            "(line 1665,col 9)-(line 1665,col 54)",
            "(line 1667,col 9)-(line 1667,col 34)",
            "(line 1668,col 9)-(line 1668,col 54)",
            "(line 1669,col 9)-(line 1669,col 54)",
            "(line 1670,col 9)-(line 1670,col 54)",
            "(line 1672,col 9)-(line 1672,col 34)",
            "(line 1673,col 9)-(line 1673,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testEquals()",
        "snippet": "    public void testEquals() {\n        StrBuilder sb1 = new StrBuilder();\n        StrBuilder sb2 = new StrBuilder();\n        assertEquals(true, sb1.equals(sb2));\n        assertEquals(true, sb1.equals(sb1));\n        assertEquals(true, sb2.equals(sb2));\n        assertEquals(true, sb1.equals((Object) sb2));\n        \n        sb1.append(\"abc\");\n        assertEquals(false, sb1.equals(sb2));\n        assertEquals(false, sb1.equals((Object) sb2));\n        \n        sb2.append(\"ABC\");\n        assertEquals(false, sb1.equals(sb2));\n        assertEquals(false, sb1.equals((Object) sb2));\n        \n        sb2.clear().append(\"abc\");\n        assertEquals(true, sb1.equals(sb2));\n        assertEquals(true, sb1.equals((Object) sb2));\n        \n        assertEquals(false, sb1.equals(new Integer(1)));\n        assertEquals(false, sb1.equals(\"abc\"));\n    }\n",
        "begin_line": 1677,
        "end_line": 1699,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1678,col 9)-(line 1678,col 42)",
            "(line 1679,col 9)-(line 1679,col 42)",
            "(line 1680,col 9)-(line 1680,col 44)",
            "(line 1681,col 9)-(line 1681,col 44)",
            "(line 1682,col 9)-(line 1682,col 44)",
            "(line 1683,col 9)-(line 1683,col 53)",
            "(line 1685,col 9)-(line 1685,col 26)",
            "(line 1686,col 9)-(line 1686,col 45)",
            "(line 1687,col 9)-(line 1687,col 54)",
            "(line 1689,col 9)-(line 1689,col 26)",
            "(line 1690,col 9)-(line 1690,col 45)",
            "(line 1691,col 9)-(line 1691,col 54)",
            "(line 1693,col 9)-(line 1693,col 34)",
            "(line 1694,col 9)-(line 1694,col 44)",
            "(line 1695,col 9)-(line 1695,col 53)",
            "(line 1697,col 9)-(line 1697,col 56)",
            "(line 1698,col 9)-(line 1698,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        StrBuilder sb = new StrBuilder();\n        int hc1a = sb.hashCode();\n        int hc1b = sb.hashCode();\n        assertEquals(0, hc1a);\n        assertEquals(hc1a, hc1b);\n        \n        sb.append(\"abc\");\n        int hc2a = sb.hashCode();\n        int hc2b = sb.hashCode();\n        assertEquals(true, hc2a != 0);\n        assertEquals(hc2a, hc2b);\n    }\n",
        "begin_line": 1702,
        "end_line": 1714,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1703,col 9)-(line 1703,col 41)",
            "(line 1704,col 9)-(line 1704,col 33)",
            "(line 1705,col 9)-(line 1705,col 33)",
            "(line 1706,col 9)-(line 1706,col 30)",
            "(line 1707,col 9)-(line 1707,col 33)",
            "(line 1709,col 9)-(line 1709,col 25)",
            "(line 1710,col 9)-(line 1710,col 33)",
            "(line 1711,col 9)-(line 1711,col 33)",
            "(line 1712,col 9)-(line 1712,col 38)",
            "(line 1713,col 9)-(line 1713,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testToString()",
        "snippet": "    public void testToString() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        assertEquals(\"abc\", sb.toString());\n    }\n",
        "begin_line": 1717,
        "end_line": 1720,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1718,col 9)-(line 1718,col 46)",
            "(line 1719,col 9)-(line 1719,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testToStringBuffer()",
        "snippet": "    public void testToStringBuffer() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\n        \n        sb.append(\"junit\");\n        assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\n    }\n",
        "begin_line": 1723,
        "end_line": 1729,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1724,col 9)-(line 1724,col 41)",
            "(line 1725,col 9)-(line 1725,col 84)",
            "(line 1727,col 9)-(line 1727,col 27)",
            "(line 1728,col 9)-(line 1728,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang294()",
        "snippet": "    public void testLang294() {\n        StrBuilder sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");\n        sb.deleteAll(\"\\n%BLAH%\");\n        assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString()); \n    }\n",
        "begin_line": 1732,
        "end_line": 1736,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1733,col 9)-(line 1733,col 93)",
            "(line 1734,col 9)-(line 1734,col 33)",
            "(line 1735,col 9)-(line 1735,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOfLang294()",
        "snippet": "    public void testIndexOfLang294() {\n        StrBuilder sb = new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertEquals(-1, sb.indexOf(\"three\"));\n    }\n",
        "begin_line": 1738,
        "end_line": 1742,
        "comment": "",
        "child_ranges": [
            "(line 1739,col 9)-(line 1739,col 54)",
            "(line 1740,col 9)-(line 1740,col 32)",
            "(line 1741,col 9)-(line 1741,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang295()",
        "snippet": "    public void testLang295() {\n        StrBuilder sb = new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertFalse( \"The contains(char) method is looking beyond the end of the string\", sb.contains('h'));\n        assertEquals( \"The indexOf(char) method is looking beyond the end of the string\", -1, sb.indexOf('h'));\n    }\n",
        "begin_line": 1745,
        "end_line": 1750,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1746,col 9)-(line 1746,col 54)",
            "(line 1747,col 9)-(line 1747,col 32)",
            "(line 1748,col 9)-(line 1748,col 108)",
            "(line 1749,col 9)-(line 1749,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang412Right()",
        "snippet": "    public void testLang412Right() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadRight(null, 10, '*');\n        assertEquals( \"Failed to invoke appendFixedWidthPadRight correctly\", \"**********\", sb.toString());\n    }\n",
        "begin_line": 1753,
        "end_line": 1757,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1754,col 9)-(line 1754,col 41)",
            "(line 1755,col 9)-(line 1755,col 51)",
            "(line 1756,col 9)-(line 1756,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang412Left()",
        "snippet": "    public void testLang412Left() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(null, 10, '*');\n        assertEquals( \"Failed to invoke appendFixedWidthPadLeft correctly\", \"**********\", sb.toString());\n    }\n",
        "begin_line": 1759,
        "end_line": 1763,
        "comment": "",
        "child_ranges": [
            "(line 1760,col 9)-(line 1760,col 41)",
            "(line 1761,col 9)-(line 1761,col 50)",
            "(line 1762,col 9)-(line 1762,col 105)"
        ]
    }
]