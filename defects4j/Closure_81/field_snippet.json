[
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OBJECT_IDS_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LABEL_ID_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TARGET_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BREAK_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CONTINUE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ENUM_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FUNCTION_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TEMP_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCAL_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CODEOFFSET_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FIXUPS_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VARS_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.USES_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.REGEXP_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CASES_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DEFAULT_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CASEARRAY_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SOURCENAME_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TYPE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LABEL_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FINALLY_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCALCOUNT_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TARGETBLOCK_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VARIABLE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LASTUSE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ISNUMBER_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTCALL_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.JSDOC_INFO_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VAR_ARGS_NAME",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INCRDECR_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NAME_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PARENTHESIZED_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.QUOTED_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OPT_ARG_NAME",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.EMPTY_BLOCK",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ORIGINALNAME_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BRACELESS_TYPE",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_CONSTANT_NAME",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_NAMESPACE",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_DISPATCHER",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTIVES",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECT_EVAL",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FREE_CALL",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LAST_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n      SOURCENAME_PROP   = 16,\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 29,     // the name node is a variable length\n                                  // argument placeholder. It can never be\n                                  // used in conjunction with JSDOC_INFO_PROP.\n      SKIP_INDEXES_PROP  = 30,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 31,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 32,    // type of element access operation\n      NAME_PROP          = 33,    // property name\n      PARENTHESIZED_PROP = 34,    // expression is parenthesized\n      QUOTED_PROP        = 35,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 36,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 37,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 38,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 44,    // The parameter is a var_args.\n      IS_NAMESPACE       = 45,    // The variable creates a namespace.\n      IS_DISPATCHER      = 46,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 47,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 49,    // A CALL without an explicit \"this\" value.\n                                  //\n      LAST_PROP          = 49;",
        "begin_line": 65,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BOTH",
        "snippet": "  public static final int\n      BOTH = 0,\n      LEFT = 1,\n      RIGHT = 2;",
        "begin_line": 155,
        "end_line": 158,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LEFT",
        "snippet": "  public static final int\n      BOTH = 0,\n      LEFT = 1,\n      RIGHT = 2;",
        "begin_line": 155,
        "end_line": 158,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.RIGHT",
        "snippet": "  public static final int\n      BOTH = 0,\n      LEFT = 1,\n      RIGHT = 2;",
        "begin_line": 155,
        "end_line": 158,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NON_SPECIALCALL",
        "snippet": "  public static final int    // values for SPECIALCALL_PROP\n      NON_SPECIALCALL  = 0,\n      SPECIALCALL_EVAL = 1,\n      SPECIALCALL_WITH = 2;",
        "begin_line": 160,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_EVAL",
        "snippet": "  public static final int    // values for SPECIALCALL_PROP\n      NON_SPECIALCALL  = 0,\n      SPECIALCALL_EVAL = 1,\n      SPECIALCALL_WITH = 2;",
        "begin_line": 160,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_WITH",
        "snippet": "  public static final int    // values for SPECIALCALL_PROP\n      NON_SPECIALCALL  = 0,\n      SPECIALCALL_EVAL = 1,\n      SPECIALCALL_WITH = 2;",
        "begin_line": 160,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DECR_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 165,
        "end_line": 167,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.POST_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 165,
        "end_line": 167,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PROPERTY_FLAG",
        "snippet": "  public static final int   // flags for MEMBER_TYPE_PROP\n      PROPERTY_FLAG    = 0x1, // property access: element is valid name\n      ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n      DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 169,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",
        "snippet": "  public static final int   // flags for MEMBER_TYPE_PROP\n      PROPERTY_FLAG    = 0x1, // property access: element is valid name\n      ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n      DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 169,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DESCENDANTS_FLAG",
        "snippet": "  public static final int   // flags for MEMBER_TYPE_PROP\n      PROPERTY_FLAG    = 0x1, // property access: element is valid name\n      ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n      DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 169,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 241,
        "end_line": 241,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.number",
        "snippet": "    private double number;",
        "begin_line": 269,
        "end_line": 269,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 274,
        "end_line": 274,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.str",
        "snippet": "    private String str;",
        "begin_line": 338,
        "end_line": 338,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 343,
        "end_line": 343,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.next",
        "snippet": "    final PropListItem next;",
        "begin_line": 345,
        "end_line": 345,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.type",
        "snippet": "    final int type;",
        "begin_line": 346,
        "end_line": 346,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.intValue",
        "snippet": "    final int intValue;",
        "begin_line": 347,
        "end_line": 347,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.PropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.PropListItem.objectValue",
        "snippet": "    final Object objectValue;",
        "begin_line": 348,
        "end_line": 348,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.type",
        "snippet": "  int type;              // type of the node; Token.NAME for example",
        "begin_line": 1076,
        "end_line": 1076,
        "comment": " type of the node; Token.NAME for example"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.next",
        "snippet": "  Node next;             // next sibling",
        "begin_line": 1077,
        "end_line": 1077,
        "comment": " next sibling"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.first",
        "snippet": "  private Node first;    // first element of a linked list of children",
        "begin_line": 1078,
        "end_line": 1078,
        "comment": " first element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.last",
        "snippet": "  private Node last;     // last element of a linked list of children",
        "begin_line": 1079,
        "end_line": 1079,
        "comment": " last element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.propListHead",
        "snippet": "  private PropListItem propListHead;",
        "begin_line": 1087,
        "end_line": 1087,
        "comment": "\n   * Linked list of properties. Since vast majority of nodes would have\n   * no more then 2 properties, linked list saves memory and provides\n   * fast lookup. If this does not holds, propListHead can be replaced\n   * by UintMap.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_BITS",
        "snippet": "  public static final int COLUMN_BITS = 12;",
        "begin_line": 1097,
        "end_line": 1097,
        "comment": "\n   * COLUMN_BITS represents how many of the lower-order bits of\n   * sourcePosition are reserved for storing the column number.\n   * Bits above these store the line number.\n   * This gives us decent position information for everything except\n   * files already passed through a minimizer, where lines might\n   * be longer than 4096 characters.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",
        "snippet": "  public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;",
        "begin_line": 1104,
        "end_line": 1104,
        "comment": "\n   * MAX_COLUMN_NUMBER represents the maximum column number that can\n   * be represented.  JSCompiler's modifications to Rhino cause all\n   * tokens located beyond the maximum column to MAX_COLUMN_NUMBER.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_MASK",
        "snippet": "  public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;",
        "begin_line": 1111,
        "end_line": 1111,
        "comment": "\n   * COLUMN_MASK stores a value where bits storing the column number\n   * are set, and bits storing the line are not set.  It's handy for\n   * separating column number from line number.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.sourcePosition",
        "snippet": "  private int sourcePosition;",
        "begin_line": 1119,
        "end_line": 1119,
        "comment": "\n   * Source position of this node. The position is encoded with the\n   * column number in the low 12 bits of the integer, and the line\n   * number in the rest.  Create some handy constants so we can change this\n   * size if we want.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.jsType",
        "snippet": "  private JSType jsType;",
        "begin_line": 1121,
        "end_line": 1121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.parent",
        "snippet": "  private Node parent;",
        "begin_line": 1123,
        "end_line": 1123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.start",
        "snippet": "    private final Node start;",
        "begin_line": 1218,
        "end_line": 1218,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.current",
        "snippet": "    private Node current;",
        "begin_line": 1219,
        "end_line": 1219,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.used",
        "snippet": "    private boolean used;",
        "begin_line": 1220,
        "end_line": 1220,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AncestorIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AncestorIterable.cur",
        "snippet": "    private Node cur;",
        "begin_line": 1295,
        "end_line": 1295,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",
        "snippet": "  final public static int FLAG_GLOBAL_STATE_UNMODIFIED = 1;",
        "begin_line": 2074,
        "end_line": 2074,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",
        "snippet": "  final public static int FLAG_THIS_UNMODIFIED = 2;",
        "begin_line": 2075,
        "end_line": 2075,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",
        "snippet": "  final public static int FLAG_ARGUMENTS_UNMODIFIED = 4;",
        "begin_line": 2076,
        "end_line": 2076,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_NO_THROWS",
        "snippet": "  final public static int FLAG_NO_THROWS = 8;",
        "begin_line": 2077,
        "end_line": 2077,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",
        "snippet": "  final public static int FLAG_LOCAL_RESULTS = 16;",
        "begin_line": 2078,
        "end_line": 2078,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",
        "snippet": "  final public static int SIDE_EFFECTS_FLAGS_MASK = 31;",
        "begin_line": 2080,
        "end_line": 2080,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",
        "snippet": "  final public static int SIDE_EFFECTS_ALL = 0;",
        "begin_line": 2082,
        "end_line": 2082,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",
        "snippet": "  final public static int NO_SIDE_EFFECTS =\n    FLAG_GLOBAL_STATE_UNMODIFIED\n    | FLAG_THIS_UNMODIFIED\n    | FLAG_ARGUMENTS_UNMODIFIED\n    | FLAG_NO_THROWS;",
        "begin_line": 2083,
        "end_line": 2087,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SideEffectFlags",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SideEffectFlags.value",
        "snippet": "    private int value = Node.SIDE_EFFECTS_ALL;",
        "begin_line": 2119,
        "end_line": 2119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeA",
        "snippet": "    final Node nodeA;",
        "begin_line": 2232,
        "end_line": 2232,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeB",
        "snippet": "    final Node nodeB;",
        "begin_line": 2233,
        "end_line": 2233,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolved",
        "snippet": "  private boolean resolved = false;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolveResult",
        "snippet": "  private JSType resolveResult = null;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",
        "snippet": "  public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
        "begin_line": 73,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",
        "snippet": "  public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
        "begin_line": 76,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",
        "snippet": "  public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
        "begin_line": 79,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",
        "snippet": "  public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
        "begin_line": 82,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ALPHA",
        "snippet": "  static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
        "begin_line": 90,
        "end_line": 94,
        "comment": "\n   * Total ordering on types based on their textual representation.\n   * This is used to have a deterministic output of the toString\n   * method of the union type since this output is used in tests.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ENUMDECL",
        "snippet": "  public static final int ENUMDECL = 1;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " A flag set on enum definition tree nodes"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",
        "snippet": "  public static final int NOT_ENUMDECL = 0;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeA",
        "snippet": "    public final JSType typeA;",
        "begin_line": 1014,
        "end_line": 1014,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeB",
        "snippet": "    public final JSType typeB;",
        "begin_line": 1015,
        "end_line": 1015,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "signature": "com.google.javascript.rhino.jstype.NullType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "signature": "com.google.javascript.rhino.jstype.StringType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.configResource",
        "snippet": "  private static final String configResource =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 36,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.annotationNames",
        "snippet": "  private static Set<String> annotationNames = null;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.suppressionNames",
        "snippet": "  private static Set<String> suppressionNames = null;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isChecked",
        "snippet": "  private final boolean isChecked;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " See the explanation of checked unknown types in JSTypeNative."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.call",
        "snippet": "  private ArrowType call;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\n   * {@code [[Call]]} property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.prototype",
        "snippet": "  private FunctionPrototypeType prototype;",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\n   * The {@code prototype} property. This field is lazily initialized by\n   * {@code #getPrototype()}. The most important reason for lazily\n   * initializing this field is that there are cycles in the native types\n   * graph, so some prototypes must temporarily be {@code null} during\n   * the construction of the graph.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.kind",
        "snippet": "  private final Kind kind;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * Whether a function is a constructor, an interface, or just an ordinary\n   * function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.typeOfThis",
        "snippet": "  private ObjectType typeOfThis;",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\n   * The type of {@code this} in the scope of this function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.source",
        "snippet": "  private Node source;",
        "begin_line": 102,
        "end_line": 102,
        "comment": "\n   * The function node which this type represents. It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = ImmutableList.of();",
        "begin_line": 108,
        "end_line": 108,
        "comment": "\n   * The interfaces directly implemented by this function.\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.subTypes",
        "snippet": "  private List<FunctionType> subTypes;",
        "begin_line": 114,
        "end_line": 114,
        "comment": "\n   * The types which are subtypes of this function. It is only relevant for\n   * constructors and may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 119,
        "end_line": 119,
        "comment": "\n   * The template type name. May be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.className",
        "snippet": "  private final String className;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.properties",
        "snippet": "  private final Map<String, Property> properties;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.nativeType",
        "snippet": "  private final boolean nativeType;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeFallback",
        "snippet": "  private ObjectType implicitPrototypeFallback;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " some subclasses override this to do special resolution handling."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.prettyPrint",
        "snippet": "  private boolean prettyPrint = false;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " by printing all properties."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",
        "snippet": "  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 480,
        "end_line": 480,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.type",
        "snippet": "    private JSType type;",
        "begin_line": 485,
        "end_line": 485,
        "comment": "\n     * Property's type.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inferred",
        "snippet": "    private final boolean inferred;",
        "begin_line": 490,
        "end_line": 490,
        "comment": "\n     * Whether the property's type is inferred.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inExterns",
        "snippet": "    private final boolean inExterns;",
        "begin_line": 495,
        "end_line": 495,
        "comment": "\n     * Whether the property is defined in the externs.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.propertyNode",
        "snippet": "    private final Node propertyNode;",
        "begin_line": 501,
        "end_line": 501,
        "comment": "\n     * The node corresponding to this property, e.g., a GETPROP node that\n     * declares this property.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.docInfo",
        "snippet": "    private JSDocInfo docInfo = null;",
        "begin_line": 504,
        "end_line": 504,
        "comment": "  The JSDocInfo for this property. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.ownerFunction",
        "snippet": "  private final FunctionType ownerFunction;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.parseJsDocDocumentation",
        "snippet": "  final boolean parseJsDocDocumentation;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n   * Whether to parse the descriptions of jsdoc comments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.isIdeMode",
        "snippet": "  final boolean isIdeMode;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n   * Whether we're in ide mode.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.annotationNames",
        "snippet": "  final Map<String, Annotation> annotationNames;",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\n   * Recognized JSDoc annotations, mapped from their name to their internal\n   * representation.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.suppressionNames",
        "snippet": "  final Set<String> suppressionNames;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "\n   * Recognized names in a {@code @suppress} tag.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.acceptES5",
        "snippet": "  final boolean acceptES5;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n   * Accept ECMAScript5 syntax, such as getter/setter.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.acceptConstKeyword",
        "snippet": "  final boolean acceptConstKeyword;",
        "begin_line": 61,
        "end_line": 61,
        "comment": "\n   * Accept `const' keyword.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "signature": "com.google.javascript.rhino.jstype.NoType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.constructor",
        "snippet": "  private final FunctionType constructor;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.MAX_UNION_SIZE",
        "snippet": "  private static final int MAX_UNION_SIZE = 20;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " then we should just give up and admit that we have no clue."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.alternates",
        "snippet": "  private final List<JSType> alternates = Lists.newArrayList();",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isAllType",
        "snippet": "  private boolean isAllType = false;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isNativeUnknownType",
        "snippet": "  private boolean isNativeUnknownType = false;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.areAllUnknownsChecked",
        "snippet": "  private boolean areAllUnknownsChecked = true;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.result",
        "snippet": "  private JSType result = null;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Memoize the result, in case build() is called multiple times."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.typeSorter",
        "snippet": "  private static final Comparator<JSType> typeSorter =\n      new Comparator<JSType>() {\n    @Override public int compare(JSType a, JSType b) {\n      return b.hashCode() - a.hashCode();\n    }\n  };",
        "begin_line": 201,
        "end_line": 206,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_UNKNOWN",
        "snippet": "    public static final int VERSION_UNKNOWN =   -1;",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n     * The unknown version.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_DEFAULT",
        "snippet": "    public static final int VERSION_DEFAULT =    0;",
        "begin_line": 83,
        "end_line": 83,
        "comment": "\n     * The default version.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_0",
        "snippet": "    public static final int VERSION_1_0 =      100;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * JavaScript 1.0\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_1",
        "snippet": "    public static final int VERSION_1_1 =      110;",
        "begin_line": 93,
        "end_line": 93,
        "comment": "\n     * JavaScript 1.1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_2",
        "snippet": "    public static final int VERSION_1_2 =      120;",
        "begin_line": 98,
        "end_line": 98,
        "comment": "\n     * JavaScript 1.2\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_3",
        "snippet": "    public static final int VERSION_1_3 =      130;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\n     * JavaScript 1.3\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_4",
        "snippet": "    public static final int VERSION_1_4 =      140;",
        "begin_line": 108,
        "end_line": 108,
        "comment": "\n     * JavaScript 1.4\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_5",
        "snippet": "    public static final int VERSION_1_5 =      150;",
        "begin_line": 113,
        "end_line": 113,
        "comment": "\n     * JavaScript 1.5\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_6",
        "snippet": "    public static final int VERSION_1_6 =      160;",
        "begin_line": 118,
        "end_line": 118,
        "comment": "\n     * JavaScript 1.5\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_NON_ECMA_GET_YEAR",
        "snippet": "    public static final int FEATURE_NON_ECMA_GET_YEAR = 1;",
        "begin_line": 127,
        "end_line": 127,
        "comment": "\n     * Controls behaviour of <tt>Date.prototype.getYear()</tt>.\n     * If <tt>hasFeature(FEATURE_NON_ECMA_GET_YEAR)</tt> returns true,\n     * Date.prototype.getYear subtructs 1900 only if 1900 <= date < 2000.\n     * The default behavior of {@link #hasFeature(int)} is always to subtruct\n     * 1900 as rquired by ECMAScript B.2.4.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME",
        "snippet": "    public static final int FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME = 2;",
        "begin_line": 138,
        "end_line": 138,
        "comment": "\n     * Control if member expression as function name extension is available.\n     * If <tt>hasFeature(FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME)</tt> returns\n     * true, allow <tt>function memberExpression(args) { body }</tt> to be\n     * syntax sugar for <tt>memberExpression = function(args) { body }</tt>,\n     * when memberExpression is not a simple identifier.\n     * See ECMAScript-262, section 11.2 for definition of memberExpression.\n     * By default {@link #hasFeature(int)} returns false.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER",
        "snippet": "    public static final int FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER = 3;",
        "begin_line": 148,
        "end_line": 148,
        "comment": "\n     * Control if reserved keywords are treated as identifiers.\n     * If <tt>hasFeature(RESERVED_KEYWORD_AS_IDENTIFIER)</tt> returns true,\n     * treat future reserved keyword (see  Ecma-262, section 7.5.3) as ordinary\n     * identifiers but warn about this usage.\n     *\n     * By default {@link #hasFeature(int)} returns false.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_TO_STRING_AS_SOURCE",
        "snippet": "    public static final int FEATURE_TO_STRING_AS_SOURCE = 4;",
        "begin_line": 161,
        "end_line": 161,
        "comment": "\n     * Control if <tt>toString()</tt> should returns the same result\n     * as  <tt>toSource()</tt> when applied to objects and arrays.\n     * If <tt>hasFeature(FEATURE_TO_STRING_AS_SOURCE)</tt> returns true,\n     * calling <tt>toString()</tt> on JS objects gives the same result as\n     * calling <tt>toSource()</tt>. That is it returns JS source with code\n     * to create an object with all enumeratable fields of the original object.\n     * <p>\n     * By default {@link #hasFeature(int)} returns true only if\n     * the current JS version is set to {@link #VERSION_1_2}.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_PARENT_PROTO_PROPRTIES",
        "snippet": "    public static final int FEATURE_PARENT_PROTO_PROPRTIES = 5;",
        "begin_line": 179,
        "end_line": 179,
        "comment": "\n     * Control if properties <tt>__proto__</tt> and <tt>__parent__</tt>\n     * are treated specially.\n     * If <tt>hasFeature(FEATURE_PARENT_PROTO_PROPRTIES)</tt> returns true,\n     * treat <tt>__parent__</tt> and <tt>__proto__</tt> as special properties.\n     * <p>\n     * The properties allow to query and set scope and prototype chains for the\n     * objects. The special meaning of the properties is available\n     * only when they are used as the right hand side of the dot operator.\n     * For example, while <tt>x.__proto__ = y</tt> changes the prototype\n     * chain of the object <tt>x</tt> to point to <tt>y</tt>,\n     * <tt>x[\"__proto__\"] = y</tt> simply assigns a new value to the property\n     * <tt>__proto__</tt> in <tt>x</tt> even when the feature is on.\n     *\n     * By default {@link #hasFeature(int)} returns true.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_E4X",
        "snippet": "    public static final int FEATURE_E4X = 6;",
        "begin_line": 190,
        "end_line": 190,
        "comment": "\n     * Control if support for E4X(ECMAScript for XML) extension is available.\n     * If hasFeature(FEATURE_E4X) returns true, the XML syntax is available.\n     * <p>\n     * By default {@link #hasFeature(int)} returns true if\n     * the current JS version is set to {@link #VERSION_DEFAULT}\n     * or is greater then {@link #VERSION_1_6}.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_DYNAMIC_SCOPE",
        "snippet": "    public static final int FEATURE_DYNAMIC_SCOPE = 7;",
        "begin_line": 207,
        "end_line": 207,
        "comment": "\n     * Control if dynamic scope should be used for name access.\n     * If hasFeature(FEATURE_DYNAMIC_SCOPE) returns true, then the name lookup\n     * during name resolution will use the top scope of the script or function\n     * which is at the top of JS execution stack instead of the top scope of the\n     * script or function from the current stack frame if the top scope of\n     * the top stack frame contains the top scope of the current stack frame\n     * on its prototype chain.\n     * <p>\n     * This is useful to define shared scope containing functions that can\n     * be called from scripts and functions using private scopes.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_VARS",
        "snippet": "    public static final int FEATURE_STRICT_VARS = 8;",
        "begin_line": 219,
        "end_line": 219,
        "comment": "\n     * Control if strict variable mode is enabled.\n     * When the feature is on Rhino reports runtime errors if assignment\n     * to a global variable that does not exist is executed. When the feature\n     * is off such assignments creates new variable in the global scope  as\n     * required by ECMA 262.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_EVAL",
        "snippet": "    public static final int FEATURE_STRICT_EVAL = 9;",
        "begin_line": 231,
        "end_line": 231,
        "comment": "\n     * Control if strict eval mode is enabled.\n     * When the feature is on Rhino reports runtime errors if non-string\n     * argument is passed to the eval function. When the feature is off\n     * eval simply return non-string argument as is without performing any\n     * evaluation as required by ECMA 262.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_LOCATION_INFORMATION_IN_ERROR",
        "snippet": "    public static final int FEATURE_LOCATION_INFORMATION_IN_ERROR = 10;",
        "begin_line": 248,
        "end_line": 248,
        "comment": "\n     * When the feature is on Rhino will add a \"fileName\" and \"lineNumber\"\n     * properties to Error objects automatically. When the feature is off, you\n     * have to explicitly pass them as the second and third argument to the\n     * Error constructor. Note that neither behaviour is fully ECMA 262\n     * compliant (as 262 doesn't specify a three-arg constructor), but keeping\n     * the feature off results in Error objects that don't have\n     * additional non-ECMA properties when constructed using the ECMA-defined\n     * single-arg constructor and is thus desirable if a stricter ECMA\n     * compliance is desired, specifically adherence to the point 15.11.5. of\n     * the standard.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_MODE",
        "snippet": "    public static final int FEATURE_STRICT_MODE = 11;",
        "begin_line": 259,
        "end_line": 259,
        "comment": "\n     * Controls whether JS 1.5 'strict mode' is enabled.\n     * When the feature is on, Rhino reports more than a dozen different\n     * warnings.  When the feature is off, these warnings are not generated.\n     * FEATURE_STRICT_MODE implies FEATURE_STRICT_VARS and FEATURE_STRICT_EVAL.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_WARNING_AS_ERROR",
        "snippet": "    public static final int FEATURE_WARNING_AS_ERROR = 12;",
        "begin_line": 265,
        "end_line": 265,
        "comment": "\n     * Controls whether a warning should be treated as an error.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.languageVersionProperty",
        "snippet": "    public static final String languageVersionProperty = \"language version\";",
        "begin_line": 267,
        "end_line": 267,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.errorReporterProperty",
        "snippet": "    public static final String errorReporterProperty   = \"error reporter\";",
        "begin_line": 268,
        "end_line": 268,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.emptyArgs",
        "snippet": "    public static final Object[] emptyArgs = ScriptRuntime.emptyArgs;",
        "begin_line": 273,
        "end_line": 273,
        "comment": "\n     * Convinient value to use as zero-length array of objects.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.threadContexts",
        "snippet": "    private static ThreadLocal<Context> threadContexts\n        = new ThreadLocal<Context>();",
        "begin_line": 407,
        "end_line": 408,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.implementationVersion",
        "snippet": "    private static String implementationVersion;",
        "begin_line": 1154,
        "end_line": 1154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.sealKey",
        "snippet": "    private Object sealKey;",
        "begin_line": 1157,
        "end_line": 1157,
        "comment": "     private boolean sealed;"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.iterating",
        "snippet": "    ObjToIntMap iterating;",
        "begin_line": 1162,
        "end_line": 1162,
        "comment": " Use ObjToIntMap instead of java.util.HashSet for JDK 1.1 compatibility"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.interpreterSecurityDomain",
        "snippet": "    Object interpreterSecurityDomain;",
        "begin_line": 1164,
        "end_line": 1164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.version",
        "snippet": "    int version;",
        "begin_line": 1166,
        "end_line": 1166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.errorReporter",
        "snippet": "    private ErrorReporter errorReporter;",
        "begin_line": 1168,
        "end_line": 1168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.locale",
        "snippet": "    private Locale locale;",
        "begin_line": 1169,
        "end_line": 1169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingDebug",
        "snippet": "    private boolean generatingDebug;",
        "begin_line": 1170,
        "end_line": 1170,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingDebugChanged",
        "snippet": "    private boolean generatingDebugChanged;",
        "begin_line": 1171,
        "end_line": 1171,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingSource",
        "snippet": "    private boolean generatingSource=true;",
        "begin_line": 1172,
        "end_line": 1172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.compileFunctionsWithDynamicScopeFlag",
        "snippet": "    boolean compileFunctionsWithDynamicScopeFlag;",
        "begin_line": 1173,
        "end_line": 1173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.useDynamicScope",
        "snippet": "    boolean useDynamicScope;",
        "begin_line": 1174,
        "end_line": 1174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.debuggerData",
        "snippet": "    private Object debuggerData;",
        "begin_line": 1175,
        "end_line": 1175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.enterCount",
        "snippet": "    private int enterCount;",
        "begin_line": 1176,
        "end_line": 1176,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.optimizationLevel",
        "snippet": "    private int optimizationLevel;",
        "begin_line": 1177,
        "end_line": 1177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.propertyListeners",
        "snippet": "    private Object propertyListeners;",
        "begin_line": 1178,
        "end_line": 1178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.hashtable",
        "snippet": "    private Hashtable<Object, Object> hashtable;",
        "begin_line": 1179,
        "end_line": 1179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.activationNames",
        "snippet": "    Hashtable<Object, Object> activationNames;",
        "begin_line": 1185,
        "end_line": 1185,
        "comment": "\n     * This is the list of names of objects forcing the creation of\n     * function activation records.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.lastInterpreterFrame",
        "snippet": "    Object lastInterpreterFrame;",
        "begin_line": 1188,
        "end_line": 1188,
        "comment": " For the interpreter to store the last frame for error reports etc."
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.previousInterpreterInvocations",
        "snippet": "    ObjArray previousInterpreterInvocations;",
        "begin_line": 1192,
        "end_line": 1192,
        "comment": " interpreter invocations"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.instructionCount",
        "snippet": "    int instructionCount;",
        "begin_line": 1195,
        "end_line": 1195,
        "comment": " For instruction counting (interpreter only)"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.instructionThreshold",
        "snippet": "    int instructionThreshold;",
        "begin_line": 1196,
        "end_line": 1196,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.scratchIndex",
        "snippet": "    int scratchIndex;",
        "begin_line": 1199,
        "end_line": 1199,
        "comment": " It can be used to return the second index-like result from function"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.scratchUint32",
        "snippet": "    long scratchUint32;",
        "begin_line": 1202,
        "end_line": 1202,
        "comment": " It can be used to return the second uint32 result from function"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "signature": "com.google.javascript.rhino.jstype.VoidType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.alternates",
        "snippet": "  Collection<JSType> alternates;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.hashcode",
        "snippet": "  private final int hashcode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceString",
        "snippet": "  private final String sourceString;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.config",
        "snippet": "  private final Config config;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformDispatcher",
        "snippet": "  private final TransformDispatcher transformDispatcher;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",
        "snippet": "  private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
        "begin_line": 86,
        "end_line": 86,
        "comment": " non-static for thread safety"
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.rootNodeJsDocHolder",
        "snippet": "  Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
        "begin_line": 90,
        "end_line": 90,
        "comment": " and stored in JSDocInfo for placeholder node."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileLevelJsDocBuilder",
        "snippet": "  Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
        "begin_line": 91,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileOverviewInfo",
        "snippet": "  JSDocInfo fileOverviewInfo = null;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.templateNode",
        "snippet": "  private Node templateNode;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " memory footprint associated with these."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.name",
        "snippet": "  private String name = null;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.sourceNode",
        "snippet": "  private Node sourceNode = null;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.parametersNode",
        "snippet": "  private Node parametersNode = null;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.returnType",
        "snippet": "  private JSType returnType = null;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.typeOfThis",
        "snippet": "  private ObjectType typeOfThis = null;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.templateTypeName",
        "snippet": "  private String templateTypeName = null;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.inferredReturnType",
        "snippet": "  private boolean inferredReturnType = false;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isConstructor",
        "snippet": "  private boolean isConstructor = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isNativeType",
        "snippet": "  private boolean isNativeType = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.root",
        "snippet": "  private final Node root = new Node(Token.LP);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.parameters",
        "snippet": "  final Node parameters;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnType",
        "snippet": "  JSType returnType;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnTypeInferred",
        "snippet": "  final boolean returnTypeInferred;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Whether the return type is inferred."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.visited",
        "snippet": "  private boolean visited;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.unknown",
        "snippet": "  private boolean unknown = true;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.NaN",
        "snippet": "    public static final double\n        NaN = Double.longBitsToDouble(0x7ff8000000000000L);",
        "begin_line": 81,
        "end_line": 82,
        "comment": " So we use ScriptRuntime.NaN instead of Double.NaN."
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.negativeZero",
        "snippet": "    public static final double\n        negativeZero = Double.longBitsToDouble(0x8000000000000000L);",
        "begin_line": 85,
        "end_line": 86,
        "comment": " A similar problem exists for negative zero."
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.NaNobj",
        "snippet": "    public static final Double NaNobj = new Double(NaN);",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.emptyArgs",
        "snippet": "    public static final Object[] emptyArgs = new Object[0];",
        "begin_line": 608,
        "end_line": 608,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.emptyStrings",
        "snippet": "    public static final String[] emptyStrings = new String[0];",
        "begin_line": 609,
        "end_line": 609,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "signature": "com.google.javascript.rhino.jstype.AllType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.reporter",
        "snippet": "  private final transient ErrorReporter reporter;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nativeTypes",
        "snippet": "  private final JSType[] nativeTypes;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " CPU time on bounds checking inside get()."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namesToTypes",
        "snippet": "  private final Map<String, JSType> namesToTypes;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namespaces",
        "snippet": "  private final Set<String> namespaces = new HashSet<String>();",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Set of namespaces in which types (or other namespaces) exist."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nonNullableTypeNames",
        "snippet": "  private final Set<String> nonNullableTypeNames = new HashSet<String>();",
        "begin_line": 108,
        "end_line": 108,
        "comment": " nullable or not."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclaredTypes",
        "snippet": "  private final Set<String> forwardDeclaredTypes = new HashSet<String>();",
        "begin_line": 113,
        "end_line": 113,
        "comment": " try to type-check them at all."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.typesIndexedByProperty",
        "snippet": "  private final Map<String, UnionTypeBuilder> typesIndexedByProperty =\n      Maps.newHashMap();",
        "begin_line": 117,
        "end_line": 118,
        "comment": " declared."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.eachRefTypeIndexedByProperty",
        "snippet": "  private final Map<String, Map<String, ObjectType>>\n      eachRefTypeIndexedByProperty = Maps.newHashMap();",
        "begin_line": 123,
        "end_line": 124,
        "comment": " for de-duping."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.greatestSubtypeByProperty",
        "snippet": "  private final Map<String, JSType> greatestSubtypeByProperty =\n      Maps.newHashMap();",
        "begin_line": 129,
        "end_line": 130,
        "comment": " typesIndexedByProperty."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.interfaceToImplementors",
        "snippet": "  private final Multimap<String, FunctionType> interfaceToImplementors =\n      LinkedHashMultimap.create();",
        "begin_line": 133,
        "end_line": 134,
        "comment": " A map from interface name to types that implement it."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unresolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 137,
        "end_line": 138,
        "comment": " All the unresolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 141,
        "end_line": 142,
        "comment": " All the resolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.lastGeneration",
        "snippet": "  private boolean lastGeneration = true;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " NamedType warns about unresolved types in the last generation."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " The template type name."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateType",
        "snippet": "  private TemplateType templateType;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " The template type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.tolerateUndefinedValues",
        "snippet": "  private final boolean tolerateUndefinedValues;",
        "begin_line": 153,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolveMode",
        "snippet": "  private ResolveMode resolveMode = ResolveMode.LAZY_NAMES;",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "          private static final long serialVersionUID = 1L;",
        "begin_line": 508,
        "end_line": 508,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "signature": "com.google.javascript.rhino.jstype.NumberType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    }
]