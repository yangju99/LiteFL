[
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    es5mode = false;\n  }\n",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 18)",
            "(line 48,col 5)-(line 48,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAssign1()",
        "snippet": "  public void testLinenoCharnoAssign1() throws Exception {\n    Node assign = parse(\"a = b\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.ASSIGN, assign.getType());\n    assertEquals(1, assign.getLineno());\n    assertEquals(2, assign.getCharno());\n  }\n",
        "begin_line": 51,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 65)",
            "(line 54,col 5)-(line 54,col 49)",
            "(line 55,col 5)-(line 55,col 40)",
            "(line 56,col 5)-(line 56,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAssign2()",
        "snippet": "  public void testLinenoCharnoAssign2() throws Exception {\n    Node assign = parse(\"\\n a.g.h.k    =  45\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.ASSIGN, assign.getType());\n    assertEquals(2, assign.getLineno());\n    assertEquals(12, assign.getCharno());\n  }\n",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 79)",
            "(line 62,col 5)-(line 62,col 49)",
            "(line 63,col 5)-(line 63,col 40)",
            "(line 64,col 5)-(line 64,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoCall()",
        "snippet": "  public void testLinenoCharnoCall() throws Exception {\n    Node call = parse(\"\\n foo(123);\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.CALL, call.getType());\n    assertEquals(2, call.getLineno());\n    assertEquals(4, call.getCharno());\n  }\n",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 70)",
            "(line 70,col 5)-(line 70,col 45)",
            "(line 71,col 5)-(line 71,col 38)",
            "(line 72,col 5)-(line 72,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetProp1()",
        "snippet": "  public void testLinenoCharnoGetProp1() throws Exception {\n    Node getprop = parse(\"\\n foo.bar\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETPROP, getprop.getType());\n    assertEquals(2, getprop.getLineno());\n    assertEquals(1, getprop.getCharno());\n\n    Node name = getprop.getFirstChild().getNext();\n    assertEquals(Token.STRING, name.getType());\n    assertEquals(2, name.getLineno());\n    assertEquals(5, name.getCharno());\n  }\n",
        "begin_line": 75,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 71)",
            "(line 78,col 5)-(line 78,col 51)",
            "(line 79,col 5)-(line 79,col 41)",
            "(line 80,col 5)-(line 80,col 41)",
            "(line 82,col 5)-(line 82,col 50)",
            "(line 83,col 5)-(line 83,col 47)",
            "(line 84,col 5)-(line 84,col 38)",
            "(line 85,col 5)-(line 85,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetProp2()",
        "snippet": "  public void testLinenoCharnoGetProp2() throws Exception {\n    Node getprop = parse(\"\\n foo.\\nbar\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETPROP, getprop.getType());\n    assertEquals(2, getprop.getLineno());\n    assertEquals(1, getprop.getCharno());\n\n    Node name = getprop.getFirstChild().getNext();\n    assertEquals(Token.STRING, name.getType());\n    assertEquals(3, name.getLineno());\n    assertEquals(0, name.getCharno());\n  }\n",
        "begin_line": 88,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 73)",
            "(line 91,col 5)-(line 91,col 51)",
            "(line 92,col 5)-(line 92,col 41)",
            "(line 93,col 5)-(line 93,col 41)",
            "(line 95,col 5)-(line 95,col 50)",
            "(line 96,col 5)-(line 96,col 47)",
            "(line 97,col 5)-(line 97,col 38)",
            "(line 98,col 5)-(line 98,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetelem1()",
        "snippet": "  public void testLinenoCharnoGetelem1() throws Exception {\n    Node call = parse(\"\\n foo[123]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETELEM, call.getType());\n    assertEquals(2, call.getLineno());\n    assertEquals(1, call.getCharno());\n  }\n",
        "begin_line": 101,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 102,col 69)",
            "(line 104,col 5)-(line 104,col 48)",
            "(line 105,col 5)-(line 105,col 38)",
            "(line 106,col 5)-(line 106,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetelem2()",
        "snippet": "  public void testLinenoCharnoGetelem2() throws Exception {\n    Node call = parse(\"\\n   \\n foo()[123]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETELEM, call.getType());\n    assertEquals(3, call.getLineno());\n    assertEquals(1, call.getCharno());\n  }\n",
        "begin_line": 109,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 110,col 76)",
            "(line 112,col 5)-(line 112,col 48)",
            "(line 113,col 5)-(line 113,col 38)",
            "(line 114,col 5)-(line 114,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetelem3()",
        "snippet": "  public void testLinenoCharnoGetelem3() throws Exception {\n    Node call = parse(\"\\n   \\n (8 + kl)[123]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETELEM, call.getType());\n    assertEquals(3, call.getLineno());\n    assertEquals(2, call.getCharno());\n  }\n",
        "begin_line": 117,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 79)",
            "(line 120,col 5)-(line 120,col 48)",
            "(line 121,col 5)-(line 121,col 38)",
            "(line 122,col 5)-(line 122,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoForComparison()",
        "snippet": "  public void testLinenoCharnoForComparison() throws Exception {\n    Node lt =\n      parse(\"for (; i < j;){}\").getFirstChild().getFirstChild().getNext();\n\n    assertEquals(Token.LT, lt.getType());\n    assertEquals(1, lt.getLineno());\n    assertEquals(9, lt.getCharno());\n  }\n",
        "begin_line": 125,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 127,col 74)",
            "(line 129,col 5)-(line 129,col 41)",
            "(line 130,col 5)-(line 130,col 36)",
            "(line 131,col 5)-(line 131,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoHook()",
        "snippet": "  public void testLinenoCharnoHook() throws Exception {\n    Node n = parse(\"\\n a ? 9 : 0\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.HOOK, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(1, n.getCharno());\n  }\n",
        "begin_line": 134,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 135,col 67)",
            "(line 137,col 5)-(line 137,col 42)",
            "(line 138,col 5)-(line 138,col 35)",
            "(line 139,col 5)-(line 139,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoArrayLiteral()",
        "snippet": "  public void testLinenoCharnoArrayLiteral() throws Exception {\n    Node n = parse(\"\\n  [8, 9]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.ARRAYLIT, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(2, n.getCharno());\n\n    n = n.getFirstChild();\n\n    assertEquals(Token.NUMBER, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(3, n.getCharno());\n\n    n = n.getNext();\n\n    assertEquals(Token.NUMBER, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(6, n.getCharno());\n  }\n",
        "begin_line": 142,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 143,col 5)-(line 143,col 65)",
            "(line 145,col 5)-(line 145,col 46)",
            "(line 146,col 5)-(line 146,col 35)",
            "(line 147,col 5)-(line 147,col 35)",
            "(line 149,col 5)-(line 149,col 26)",
            "(line 151,col 5)-(line 151,col 44)",
            "(line 152,col 5)-(line 152,col 35)",
            "(line 153,col 5)-(line 153,col 35)",
            "(line 155,col 5)-(line 155,col 20)",
            "(line 157,col 5)-(line 157,col 44)",
            "(line 158,col 5)-(line 158,col 35)",
            "(line 159,col 5)-(line 159,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoObjectLiteral()",
        "snippet": "  public void testLinenoCharnoObjectLiteral() throws Exception {\n    Node n = parse(\"\\n\\n var a = {a:0\\n,b :1};\")\n        .getFirstChild().getFirstChild().getFirstChild();\n\n    assertEquals(Token.OBJECTLIT, n.getType());\n    assertEquals(3, n.getLineno());\n    assertEquals(9, n.getCharno());\n\n    Node key = n.getFirstChild();\n\n    assertEquals(Token.STRING, key.getType());\n    assertEquals(3, key.getLineno());\n    assertEquals(10, key.getCharno());\n\n    Node value = key.getFirstChild();\n\n    assertEquals(Token.NUMBER, value.getType());\n    assertEquals(3, value.getLineno());\n    assertEquals(12, value.getCharno());\n\n    key = key.getNext();\n\n    assertEquals(Token.STRING, key.getType());\n    assertEquals(4, key.getLineno());\n    assertEquals(1, key.getCharno());\n\n    value = key.getFirstChild();\n\n    assertEquals(Token.NUMBER, value.getType());\n    assertEquals(4, value.getLineno());\n    assertEquals(4, value.getCharno());\n  }\n",
        "begin_line": 162,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 164,col 57)",
            "(line 166,col 5)-(line 166,col 47)",
            "(line 167,col 5)-(line 167,col 35)",
            "(line 168,col 5)-(line 168,col 35)",
            "(line 170,col 5)-(line 170,col 33)",
            "(line 172,col 5)-(line 172,col 46)",
            "(line 173,col 5)-(line 173,col 37)",
            "(line 174,col 5)-(line 174,col 38)",
            "(line 176,col 5)-(line 176,col 37)",
            "(line 178,col 5)-(line 178,col 48)",
            "(line 179,col 5)-(line 179,col 39)",
            "(line 180,col 5)-(line 180,col 40)",
            "(line 182,col 5)-(line 182,col 24)",
            "(line 184,col 5)-(line 184,col 46)",
            "(line 185,col 5)-(line 185,col 37)",
            "(line 186,col 5)-(line 186,col 37)",
            "(line 188,col 5)-(line 188,col 32)",
            "(line 190,col 5)-(line 190,col 48)",
            "(line 191,col 5)-(line 191,col 39)",
            "(line 192,col 5)-(line 192,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAdd()",
        "snippet": "  public void testLinenoCharnoAdd() throws Exception {\n    testLinenoCharnoBinop(\"+\");\n  }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 196,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoSub()",
        "snippet": "  public void testLinenoCharnoSub() throws Exception {\n    testLinenoCharnoBinop(\"-\");\n  }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 200,col 5)-(line 200,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoMul()",
        "snippet": "  public void testLinenoCharnoMul() throws Exception {\n    testLinenoCharnoBinop(\"*\");\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoDiv()",
        "snippet": "  public void testLinenoCharnoDiv() throws Exception {\n    testLinenoCharnoBinop(\"/\");\n  }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoMod()",
        "snippet": "  public void testLinenoCharnoMod() throws Exception {\n    testLinenoCharnoBinop(\"%\");\n  }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 212,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoShift()",
        "snippet": "  public void testLinenoCharnoShift() throws Exception {\n    testLinenoCharnoBinop(\"<<\");\n  }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoBinaryAnd()",
        "snippet": "  public void testLinenoCharnoBinaryAnd() throws Exception {\n    testLinenoCharnoBinop(\"&\");\n  }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAnd()",
        "snippet": "  public void testLinenoCharnoAnd() throws Exception {\n    testLinenoCharnoBinop(\"&&\");\n  }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoBinaryOr()",
        "snippet": "  public void testLinenoCharnoBinaryOr() throws Exception {\n    testLinenoCharnoBinop(\"|\");\n  }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoOr()",
        "snippet": "  public void testLinenoCharnoOr() throws Exception {\n    testLinenoCharnoBinop(\"||\");\n  }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 232,col 5)-(line 232,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoLt()",
        "snippet": "  public void testLinenoCharnoLt() throws Exception {\n    testLinenoCharnoBinop(\"<\");\n  }\n",
        "begin_line": 235,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 236,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoLe()",
        "snippet": "  public void testLinenoCharnoLe() throws Exception {\n    testLinenoCharnoBinop(\"<=\");\n  }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 240,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGt()",
        "snippet": "  public void testLinenoCharnoGt() throws Exception {\n    testLinenoCharnoBinop(\">\");\n  }\n",
        "begin_line": 243,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 244,col 5)-(line 244,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGe()",
        "snippet": "  public void testLinenoCharnoGe() throws Exception {\n    testLinenoCharnoBinop(\">=\");\n  }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoBinop(java.lang.String)",
        "snippet": "  private void testLinenoCharnoBinop(String binop) {\n    Node op = parse(\"var a = 89 \" + binop + \" 76\").getFirstChild().\n        getFirstChild().getFirstChild();\n\n    assertEquals(1, op.getLineno());\n    assertEquals(11, op.getCharno());\n  }\n",
        "begin_line": 251,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 253,col 40)",
            "(line 255,col 5)-(line 255,col 36)",
            "(line 256,col 5)-(line 256,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment1()",
        "snippet": "  public void testJSDocAttachment1() {\n    Node varNode = parse(\"/** @type number */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n    JSDocInfo info = varNode.getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 259,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 260,col 5)-(line 260,col 70)",
            "(line 263,col 5)-(line 263,col 47)",
            "(line 264,col 5)-(line 264,col 44)",
            "(line 265,col 5)-(line 265,col 24)",
            "(line 266,col 5)-(line 266,col 50)",
            "(line 269,col 5)-(line 269,col 44)",
            "(line 270,col 5)-(line 270,col 49)",
            "(line 271,col 5)-(line 271,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment2()",
        "snippet": "  public void testJSDocAttachment2() {\n    Node varNode = parse(\"/** @type number */var a,b;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n    JSDocInfo info = varNode.getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n\n    // First NAME\n    Node nameNode1 = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode1.getType());\n    assertNull(nameNode1.getJSDocInfo());\n\n    // Second NAME\n    Node nameNode2 = nameNode1.getNext();\n    assertEquals(Token.NAME, nameNode2.getType());\n    assertNull(nameNode2.getJSDocInfo());\n  }\n",
        "begin_line": 274,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 275,col 5)-(line 275,col 72)",
            "(line 278,col 5)-(line 278,col 47)",
            "(line 279,col 5)-(line 279,col 44)",
            "(line 280,col 5)-(line 280,col 24)",
            "(line 281,col 5)-(line 281,col 50)",
            "(line 284,col 5)-(line 284,col 45)",
            "(line 285,col 5)-(line 285,col 50)",
            "(line 286,col 5)-(line 286,col 41)",
            "(line 289,col 5)-(line 289,col 41)",
            "(line 290,col 5)-(line 290,col 50)",
            "(line 291,col 5)-(line 291,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment3()",
        "snippet": "  public void testJSDocAttachment3() {\n    Node assignNode = parse(\n        \"/** @type number */goog.FOO = 5;\").getFirstChild().getFirstChild();\n\n    // ASSIGN\n    assertEquals(Token.ASSIGN, assignNode.getType());\n    JSDocInfo info = assignNode.getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 294,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 295,col 5)-(line 296,col 76)",
            "(line 299,col 5)-(line 299,col 53)",
            "(line 300,col 5)-(line 300,col 47)",
            "(line 301,col 5)-(line 301,col 24)",
            "(line 302,col 5)-(line 302,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment4()",
        "snippet": "  public void testJSDocAttachment4() {\n    Node varNode = parse(\n        \"var a, /** @define {number} */b = 5;\").getFirstChild();\n\n    // ASSIGN\n    assertEquals(Token.VAR, varNode.getType());\n    assertNull(varNode.getJSDocInfo());\n\n    // a\n    Node a = varNode.getFirstChild();\n    assertNull(a.getJSDocInfo());\n\n    // b\n    Node b = a.getNext();\n    JSDocInfo info = b.getJSDocInfo();\n    assertNotNull(info);\n    assertTrue(info.isDefine());\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 305,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 306,col 5)-(line 307,col 64)",
            "(line 310,col 5)-(line 310,col 47)",
            "(line 311,col 5)-(line 311,col 39)",
            "(line 314,col 5)-(line 314,col 37)",
            "(line 315,col 5)-(line 315,col 33)",
            "(line 318,col 5)-(line 318,col 25)",
            "(line 319,col 5)-(line 319,col 38)",
            "(line 320,col 5)-(line 320,col 24)",
            "(line 321,col 5)-(line 321,col 32)",
            "(line 322,col 5)-(line 322,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment5()",
        "snippet": "  public void testJSDocAttachment5() {\n    Node varNode = parse(\n        \"var /** @type number */a, /** @define {number} */b = 5;\")\n        .getFirstChild();\n\n    // ASSIGN\n    assertEquals(Token.VAR, varNode.getType());\n    assertNull(varNode.getJSDocInfo());\n\n    // a\n    Node a = varNode.getFirstChild();\n    assertNotNull(a.getJSDocInfo());\n    JSDocInfo info = a.getJSDocInfo();\n    assertNotNull(info);\n    assertFalse(info.isDefine());\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n\n    // b\n    Node b = a.getNext();\n    info = b.getJSDocInfo();\n    assertNotNull(info);\n    assertTrue(info.isDefine());\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 325,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 326,col 5)-(line 328,col 25)",
            "(line 331,col 5)-(line 331,col 47)",
            "(line 332,col 5)-(line 332,col 39)",
            "(line 335,col 5)-(line 335,col 37)",
            "(line 336,col 5)-(line 336,col 36)",
            "(line 337,col 5)-(line 337,col 38)",
            "(line 338,col 5)-(line 338,col 24)",
            "(line 339,col 5)-(line 339,col 33)",
            "(line 340,col 5)-(line 340,col 50)",
            "(line 343,col 5)-(line 343,col 25)",
            "(line 344,col 5)-(line 344,col 28)",
            "(line 345,col 5)-(line 345,col 24)",
            "(line 346,col 5)-(line 346,col 32)",
            "(line 347,col 5)-(line 347,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment6()",
        "snippet": "  public void testJSDocAttachment6() throws Exception {\n    Node functionNode = parse(\n        \"var a = /** @param {number} index */5;\" +\n        \"/** @return boolean */function f(index){}\")\n        .getFirstChild().getNext();\n\n    assertEquals(Token.FUNCTION, functionNode.getType());\n    JSDocInfo info = functionNode.getJSDocInfo();\n    assertNotNull(info);\n    assertFalse(info.hasParameter(\"index\"));\n    assertTrue(info.hasReturnType());\n  }\n",
        "begin_line": 354,
        "end_line": 365,
        "comment": "\n   * Tests that a JSDoc comment in an unexpected place of the code does not\n   * propagate to following code due to {@link JSDocInfo} aggregation.\n   ",
        "child_ranges": [
            "(line 355,col 5)-(line 358,col 35)",
            "(line 360,col 5)-(line 360,col 57)",
            "(line 361,col 5)-(line 361,col 49)",
            "(line 362,col 5)-(line 362,col 24)",
            "(line 363,col 5)-(line 363,col 44)",
            "(line 364,col 5)-(line 364,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment7()",
        "snippet": "  public void testJSDocAttachment7() {\n    Node varNode = parse(\"/** */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 367,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 368,col 5)-(line 368,col 57)",
            "(line 371,col 5)-(line 371,col 47)",
            "(line 374,col 5)-(line 374,col 44)",
            "(line 375,col 5)-(line 375,col 49)",
            "(line 376,col 5)-(line 376,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment8()",
        "snippet": "  public void testJSDocAttachment8() {\n    Node varNode = parse(\"/** x */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 379,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 380,col 5)-(line 380,col 59)",
            "(line 383,col 5)-(line 383,col 47)",
            "(line 386,col 5)-(line 386,col 44)",
            "(line 387,col 5)-(line 387,col 49)",
            "(line 388,col 5)-(line 388,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment9()",
        "snippet": "  public void testJSDocAttachment9() {\n    Node varNode = parse(\"/** \\n x */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 391,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 392,col 5)-(line 392,col 62)",
            "(line 395,col 5)-(line 395,col 47)",
            "(line 398,col 5)-(line 398,col 44)",
            "(line 399,col 5)-(line 399,col 49)",
            "(line 400,col 5)-(line 400,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment10()",
        "snippet": "  public void testJSDocAttachment10() {\n    Node varNode = parse(\"/** x\\n */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 403,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 404,col 61)",
            "(line 407,col 5)-(line 407,col 47)",
            "(line 410,col 5)-(line 410,col 44)",
            "(line 411,col 5)-(line 411,col 49)",
            "(line 412,col 5)-(line 412,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment11()",
        "snippet": "  public void testJSDocAttachment11() {\n    Node varNode =\n       parse(\"/** @type {{x : number, 'y' : string, z}} */var a;\")\n        .getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n    JSDocInfo info = varNode.getJSDocInfo();\n    assertNotNull(info);\n\n    assertTypeEquals(createRecordTypeBuilder().\n                     addProperty(\"x\", NUMBER_TYPE, null).\n                     addProperty(\"y\", STRING_TYPE, null).\n                     addProperty(\"z\", UNKNOWN_TYPE, null).\n                     build(),\n                     info.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 415,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 416,col 5)-(line 418,col 25)",
            "(line 421,col 5)-(line 421,col 47)",
            "(line 422,col 5)-(line 422,col 44)",
            "(line 423,col 5)-(line 423,col 24)",
            "(line 425,col 5)-(line 430,col 37)",
            "(line 433,col 5)-(line 433,col 44)",
            "(line 434,col 5)-(line 434,col 49)",
            "(line 435,col 5)-(line 435,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment12()",
        "snippet": "  public void testJSDocAttachment12() {\n    Node varNode =\n       parse(\"var a = {/** @type {Object} */ b: c};\")\n        .getFirstChild();\n    Node objectLitNode = varNode.getFirstChild().getFirstChild();\n    assertEquals(Token.OBJECTLIT, objectLitNode.getType());\n    assertNotNull(objectLitNode.getFirstChild().getJSDocInfo());\n  }\n",
        "begin_line": 438,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 439,col 5)-(line 441,col 25)",
            "(line 442,col 5)-(line 442,col 65)",
            "(line 443,col 5)-(line 443,col 59)",
            "(line 444,col 5)-(line 444,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment13()",
        "snippet": "  public void testJSDocAttachment13() {\n    Node varNode = parse(\"/** foo */ var a;\").getFirstChild();\n    assertNotNull(varNode.getJSDocInfo());\n  }\n",
        "begin_line": 447,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 448,col 5)-(line 448,col 62)",
            "(line 449,col 5)-(line 449,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment14()",
        "snippet": "  public void testJSDocAttachment14() {\n    Node varNode = parse(\"/** */ var a;\").getFirstChild();\n    assertNull(varNode.getJSDocInfo());\n  }\n",
        "begin_line": 452,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 453,col 5)-(line 453,col 58)",
            "(line 454,col 5)-(line 454,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment15()",
        "snippet": "  public void testJSDocAttachment15() {\n    Node varNode = parse(\"/** \\n * \\n */ var a;\").getFirstChild();\n    assertNull(varNode.getJSDocInfo());\n  }\n",
        "begin_line": 457,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 458,col 5)-(line 458,col 66)",
            "(line 459,col 5)-(line 459,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing1()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing1() throws Exception {\n    assertNodeEquality(\n        parse(\"var a = [1,2]\"),\n        parse(\"/** @type Array.<number*/var a = [1,2]\",\n            MISSING_GT_MESSAGE));\n  }\n",
        "begin_line": 462,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 463,col 5)-(line 466,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing2()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing2() throws Exception {\n    assertNodeEquality(\n        parse(\"var a = [1,2]\"),\n        parse(\"/** @type {Array.<number}*/var a = [1,2]\",\n            MISSING_GT_MESSAGE));\n  }\n",
        "begin_line": 469,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 470,col 5)-(line 473,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing3()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing3() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @param {Array.<number} nums */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n            MISSING_GT_MESSAGE));\n  }\n",
        "begin_line": 476,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 477,col 5)-(line 481,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing4()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing4() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @return boolean */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\"));\n  }\n",
        "begin_line": 484,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 485,col 5)-(line 488,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing5()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing5() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @param boolean this is some string*/\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\"));\n  }\n",
        "begin_line": 491,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 492,col 5)-(line 495,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing6()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing6() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @param {bool!*%E$} */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n              \"expected closing }\",\n              \"expecting a variable name in a @param tag\"));\n  }\n",
        "begin_line": 498,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 499,col 5)-(line 504,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing7()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing7() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @see */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n              \"@see tag missing description\"));\n  }\n",
        "begin_line": 507,
        "end_line": 513,
        "comment": "",
        "child_ranges": [
            "(line 508,col 5)-(line 512,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing8()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing8() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @author */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n              \"@author tag missing author\"));\n  }\n",
        "begin_line": 515,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 516,col 5)-(line 520,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing9()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing9() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @someillegaltag */\" +\n              \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n              \"illegal use of unknown JSDoc tag \\\"someillegaltag\\\";\"\n              + \" ignoring it\"));\n  }\n",
        "begin_line": 523,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 524,col 5)-(line 529,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testUnescapedSlashInRegexpCharClass()",
        "snippet": "  public void testUnescapedSlashInRegexpCharClass() throws Exception {\n    // The tokenizer without the fix for this bug throws an error.\n    parse(\"var foo = /[/]/;\");\n    parse(\"var foo = /[hi there/]/;\");\n    parse(\"var foo = /[/yo dude]/;\");\n    parse(\"var foo = /\\\\/[@#$/watashi/wa/suteevu/desu]/;\");\n  }\n",
        "begin_line": 532,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 534,col 5)-(line 534,col 30)",
            "(line 535,col 5)-(line 535,col 38)",
            "(line 536,col 5)-(line 536,col 37)",
            "(line 537,col 5)-(line 537,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.assertNodeEquality(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void assertNodeEquality(Node expected, Node found) {\n    String message = expected.checkTreeEquals(found);\n    if (message != null) {\n      fail(message);\n    }\n  }\n",
        "begin_line": 540,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 541,col 5)-(line 541,col 53)",
            "(line 542,col 5)-(line 544,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testParse()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testParse() {\n    Node a = Node.newString(Token.NAME, \"a\");\n    a.addChildToFront(Node.newString(Token.NAME, \"b\"));\n    List<ParserResult> testCases = ImmutableList.of(\n        new ParserResult(\n            \"3;\",\n            createScript(new Node(Token.EXPR_RESULT, Node.newNumber(3.0)))),\n        new ParserResult(\n            \"var a = b;\",\n             createScript(new Node(Token.VAR, a))),\n        new ParserResult(\n            \"\\\"hell\\\\\\no\\\\ world\\\\\\n\\\\\\n!\\\"\",\n             createScript(new Node(Token.EXPR_RESULT,\n             Node.newString(Token.STRING, \"hello world!\")))));\n\n    for (ParserResult testCase : testCases) {\n      assertNodeEquality(testCase.node, parse(testCase.code));\n    }\n  }\n",
        "begin_line": 547,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 549,col 45)",
            "(line 550,col 5)-(line 550,col 55)",
            "(line 551,col 5)-(line 561,col 62)",
            "(line 563,col 5)-(line 565,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.createScript(com.google.javascript.rhino.Node)",
        "snippet": "  private Node createScript(Node n) {\n    Node script = new Node(Token.SCRIPT);\n    script.addChildToBack(n);\n    return script;\n  }\n",
        "begin_line": 568,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 569,col 5)-(line 569,col 41)",
            "(line 570,col 5)-(line 570,col 29)",
            "(line 571,col 5)-(line 571,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning1()",
        "snippet": "  public void testTrailingCommaWarning1() {\n    parse(\"var a = ['foo', 'bar'];\");\n  }\n",
        "begin_line": 574,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 575,col 5)-(line 575,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning2()",
        "snippet": "  public void testTrailingCommaWarning2() {\n    parse(\"var a = ['foo',,'bar'];\");\n  }\n",
        "begin_line": 578,
        "end_line": 580,
        "comment": "",
        "child_ranges": [
            "(line 579,col 5)-(line 579,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning3()",
        "snippet": "  public void testTrailingCommaWarning3() {\n    parse(\"var a = ['foo', 'bar',];\", TRAILING_COMMA_MESSAGE);\n  }\n",
        "begin_line": 582,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 583,col 5)-(line 583,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning4()",
        "snippet": "  public void testTrailingCommaWarning4() {\n    parse(\"var a = [,];\", TRAILING_COMMA_MESSAGE);\n  }\n",
        "begin_line": 586,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 587,col 5)-(line 587,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning5()",
        "snippet": "  public void testTrailingCommaWarning5() {\n    parse(\"var a = {'foo': 'bar'};\");\n  }\n",
        "begin_line": 590,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 591,col 5)-(line 591,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning6()",
        "snippet": "  public void testTrailingCommaWarning6() {\n    parse(\"var a = {'foo': 'bar',};\", TRAILING_COMMA_MESSAGE);\n  }\n",
        "begin_line": 594,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 595,col 5)-(line 595,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning7()",
        "snippet": "  public void testTrailingCommaWarning7() {\n    parseError(\"var a = {,};\", BAD_PROPERTY_MESSAGE);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testCatchClauseForbidden()",
        "snippet": "  public void testCatchClauseForbidden() {\n    parseError(\"try { } catch (e if true) {}\",\n        \"Catch clauses are not supported\");\n  }\n",
        "begin_line": 602,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 603,col 5)-(line 604,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testConstForbidden()",
        "snippet": "  public void testConstForbidden() {\n    parseError(\"const x = 3;\", \"Unsupported syntax: CONST\");\n  }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 608,col 5)-(line 608,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden()",
        "snippet": "  public void testDestructuringAssignForbidden() {\n    parseError(\"var [x, y] = foo();\", \"destructuring assignment forbidden\");\n  }\n",
        "begin_line": 611,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 612,col 5)-(line 612,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden2()",
        "snippet": "  public void testDestructuringAssignForbidden2() {\n    parseError(\"var {x, y} = foo();\", \"missing : after property id\");\n  }\n",
        "begin_line": 615,
        "end_line": 617,
        "comment": "",
        "child_ranges": [
            "(line 616,col 5)-(line 616,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden3()",
        "snippet": "  public void testDestructuringAssignForbidden3() {\n    parseError(\"var {x: x, y: y} = foo();\",\n        \"destructuring assignment forbidden\");\n  }\n",
        "begin_line": 619,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 620,col 5)-(line 621,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden4()",
        "snippet": "  public void testDestructuringAssignForbidden4() {\n    parseError(\"[x, y] = foo();\",\n        \"destructuring assignment forbidden\",\n        \"invalid assignment target\");\n  }\n",
        "begin_line": 624,
        "end_line": 628,
        "comment": "",
        "child_ranges": [
            "(line 625,col 5)-(line 627,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLetForbidden()",
        "snippet": "  public void testLetForbidden() {\n    parseError(\"function f() { let (x = 3) { alert(x); }; }\",\n        \"missing ; before statement\", \"syntax error\");\n  }\n",
        "begin_line": 630,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 631,col 5)-(line 632,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testYieldForbidden()",
        "snippet": "  public void testYieldForbidden() {\n    parseError(\"function f() { yield 3; }\", \"missing ; before statement\");\n  }\n",
        "begin_line": 635,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 636,col 5)-(line 636,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testBracelessFunctionForbidden()",
        "snippet": "  public void testBracelessFunctionForbidden() {\n    parseError(\"var sq = function(x) x * x;\",\n        \"missing { before function body\");\n  }\n",
        "begin_line": 639,
        "end_line": 642,
        "comment": "",
        "child_ranges": [
            "(line 640,col 5)-(line 641,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGeneratorsForbidden()",
        "snippet": "  public void testGeneratorsForbidden() {\n    parseError(\"var i = (x for (x in obj));\",\n        \"missing ) in parenthetical\");\n  }\n",
        "begin_line": 644,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 645,col 5)-(line 646,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden1()",
        "snippet": "  public void testGettersForbidden1() {\n    parseError(\"var x = {get foo() { return 3; }};\",\n        \"getters are not supported in Internet Explorer\");\n  }\n",
        "begin_line": 649,
        "end_line": 652,
        "comment": "",
        "child_ranges": [
            "(line 650,col 5)-(line 651,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden2()",
        "snippet": "  public void testGettersForbidden2() {\n    parseError(\"var x = {get foo bar() { return 3; }};\",\n        \"invalid property id\");\n  }\n",
        "begin_line": 654,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 655,col 5)-(line 656,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden3()",
        "snippet": "  public void testGettersForbidden3() {\n    parseError(\"var x = {a getter:function b() { return 3; }};\",\n        \"missing : after property id\", \"syntax error\");\n  }\n",
        "begin_line": 659,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 660,col 5)-(line 661,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden4()",
        "snippet": "  public void testGettersForbidden4() {\n    parseError(\"var x = {\\\"a\\\" getter:function b() { return 3; }};\",\n        \"missing : after property id\", \"syntax error\");\n  }\n",
        "begin_line": 664,
        "end_line": 667,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 666,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden5()",
        "snippet": "  public void testGettersForbidden5() {\n    parseError(\"var x = {a: 2, get foo() { return 3; }};\",\n        \"getters are not supported in Internet Explorer\");\n  }\n",
        "begin_line": 669,
        "end_line": 672,
        "comment": "",
        "child_ranges": [
            "(line 670,col 5)-(line 671,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSettersForbidden()",
        "snippet": "  public void testSettersForbidden() {\n    parseError(\"var x = {set foo() { return 3; }};\",\n        \"setters are not supported in Internet Explorer\");\n  }\n",
        "begin_line": 674,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 675,col 5)-(line 676,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSettersForbidden2()",
        "snippet": "  public void testSettersForbidden2() {\n    parseError(\"var x = {a setter:function b() { return 3; }};\",\n        \"missing : after property id\", \"syntax error\");\n  }\n",
        "begin_line": 679,
        "end_line": 682,
        "comment": "",
        "child_ranges": [
            "(line 680,col 5)-(line 681,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testFileOverviewJSDoc1()",
        "snippet": "  public void testFileOverviewJSDoc1() {\n    Node n = parse(\"/** @fileoverview Hi mom! */ function Foo() {}\");\n    assertEquals(Token.FUNCTION, n.getFirstChild().getType());\n    assertTrue(n.getJSDocInfo() != null);\n    assertNull(n.getFirstChild().getJSDocInfo());\n    assertEquals(\"Hi mom!\",\n        n.getJSDocInfo().getFileOverview());\n  }\n",
        "begin_line": 684,
        "end_line": 691,
        "comment": "",
        "child_ranges": [
            "(line 685,col 5)-(line 685,col 69)",
            "(line 686,col 5)-(line 686,col 62)",
            "(line 687,col 5)-(line 687,col 41)",
            "(line 688,col 5)-(line 688,col 49)",
            "(line 689,col 5)-(line 690,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testFileOverviewJSDocDoesNotHoseParsing()",
        "snippet": "  public void testFileOverviewJSDocDoesNotHoseParsing() {\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview Hi mom! \\n */ function Foo() {}\")\n            .getFirstChild().getType());\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview Hi mom! \\n * * * */ function Foo() {}\")\n            .getFirstChild().getType());\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview \\n * x */ function Foo() {}\")\n            .getFirstChild().getType());\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview \\n * x \\n */ function Foo() {}\")\n            .getFirstChild().getType());\n  }\n",
        "begin_line": 693,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 694,col 5)-(line 697,col 40)",
            "(line 698,col 5)-(line 701,col 40)",
            "(line 702,col 5)-(line 705,col 40)",
            "(line 706,col 5)-(line 709,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testFileOverviewJSDoc2()",
        "snippet": "  public void testFileOverviewJSDoc2() {\n    Node n = parse(\"/** @fileoverview Hi mom! */ \" +\n        \"/** @constructor */ function Foo() {}\");\n    assertTrue(n.getJSDocInfo() != null);\n    assertEquals(\"Hi mom!\", n.getJSDocInfo().getFileOverview());\n    assertTrue(n.getFirstChild().getJSDocInfo() != null);\n    assertFalse(n.getFirstChild().getJSDocInfo().hasFileOverview());\n    assertTrue(n.getFirstChild().getJSDocInfo().isConstructor());\n  }\n",
        "begin_line": 712,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 713,col 5)-(line 714,col 49)",
            "(line 715,col 5)-(line 715,col 41)",
            "(line 716,col 5)-(line 716,col 64)",
            "(line 717,col 5)-(line 717,col 57)",
            "(line 718,col 5)-(line 718,col 68)",
            "(line 719,col 5)-(line 719,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testObjectLiteralDoc1()",
        "snippet": "  public void testObjectLiteralDoc1() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.OBJECTLIT, objectLit.getType());\n\n    Node number = objectLit.getFirstChild();\n    assertEquals(Token.NUMBER, number.getType());\n    assertNotNull(number.getJSDocInfo());\n  }\n",
        "begin_line": 722,
        "end_line": 731,
        "comment": "",
        "child_ranges": [
            "(line 723,col 5)-(line 723,col 60)",
            "(line 725,col 5)-(line 725,col 71)",
            "(line 726,col 5)-(line 726,col 55)",
            "(line 728,col 5)-(line 728,col 44)",
            "(line 729,col 5)-(line 729,col 49)",
            "(line 730,col 5)-(line 730,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDuplicatedParam()",
        "snippet": "  public void testDuplicatedParam() {\n    parse(\"function foo(x, x) {}\", \"Duplicate parameter name \\\"x\\\".\");\n  }\n",
        "begin_line": 733,
        "end_line": 735,
        "comment": "",
        "child_ranges": [
            "(line 734,col 5)-(line 734,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGetter()",
        "snippet": "  public void testGetter() {\n    this.es5mode = false;\n    parseError(\"var x = {get a(){}};\",\n        \"getters are not supported in Internet Explorer\");\n    this.es5mode = true;\n    parse(\"var x = {get a(){}};\");\n    parseError(\"var x = {get a(b){}};\", \"getters may not have parameters\");\n  }\n",
        "begin_line": 737,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 738,col 5)-(line 738,col 25)",
            "(line 739,col 5)-(line 740,col 58)",
            "(line 741,col 5)-(line 741,col 24)",
            "(line 742,col 5)-(line 742,col 34)",
            "(line 743,col 5)-(line 743,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSetter()",
        "snippet": "  public void testSetter() {\n    this.es5mode = false;\n    parseError(\"var x = {set a(x){}};\",\n        \"setters are not supported in Internet Explorer\");\n    this.es5mode = true;\n    parse(\"var x = {set a(x){}};\");\n    parseError(\"var x = {set a(){}};\",\n        \"setters must have exactly one parameter\");\n  }\n",
        "begin_line": 746,
        "end_line": 754,
        "comment": "",
        "child_ranges": [
            "(line 747,col 5)-(line 747,col 25)",
            "(line 748,col 5)-(line 749,col 58)",
            "(line 750,col 5)-(line 750,col 24)",
            "(line 751,col 5)-(line 751,col 35)",
            "(line 752,col 5)-(line 753,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLamestWarningEver()",
        "snippet": "  public void testLamestWarningEver() {\n    // This used to be a warning.\n    parse(\"var x = /** @type {undefined} */ (y);\");\n    parse(\"var x = /** @type {void} */ (y);\");\n  }\n",
        "begin_line": 756,
        "end_line": 760,
        "comment": "",
        "child_ranges": [
            "(line 758,col 5)-(line 758,col 51)",
            "(line 759,col 5)-(line 759,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testUnfinishedComment()",
        "snippet": "  public void testUnfinishedComment() {\n    parseError(\"/** this is a comment \", \"unterminated comment\");\n  }\n",
        "begin_line": 762,
        "end_line": 764,
        "comment": "",
        "child_ranges": [
            "(line 763,col 5)-(line 763,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testParseBlockDescription()",
        "snippet": "  public void testParseBlockDescription() {\n    Node n = parse(\"/** This is a variable. */ var x;\");\n    Node var = n.getFirstChild();\n    assertNotNull(var.getJSDocInfo());\n    assertEquals(\"This is a variable.\",\n        var.getJSDocInfo().getBlockDescription());\n  }\n",
        "begin_line": 766,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 767,col 5)-(line 767,col 56)",
            "(line 768,col 5)-(line 768,col 33)",
            "(line 769,col 5)-(line 769,col 38)",
            "(line 770,col 5)-(line 771,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testUnnamedFunctionStatement()",
        "snippet": "  public void testUnnamedFunctionStatement() {\n    // Statements\n    parseError(\"function() {};\", \"unnamed function statement\");\n    parseError(\"if (true) { function() {}; }\", \"unnamed function statement\");\n    parse(\"function f() {};\");\n    // Expressions\n    parse(\"(function f() {});\");\n    parse(\"(function () {});\");\n  }\n",
        "begin_line": 774,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 776,col 5)-(line 776,col 63)",
            "(line 777,col 5)-(line 777,col 77)",
            "(line 778,col 5)-(line 778,col 30)",
            "(line 780,col 5)-(line 780,col 32)",
            "(line 781,col 5)-(line 781,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.parseError(java.lang.String, java.lang.String...)",
        "snippet": "  private void parseError(String string, String... errors) {\n    TestErrorReporter testErrorReporter = new TestErrorReporter(errors, null);\n    Node script = null;\n    try {\n      script = ParserRunner.parse(\n          \"input\", string, ParserRunner.createConfig(true, es5mode, false),\n          testErrorReporter, Logger.getAnonymousLogger());\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // verifying that all warnings were seen\n    assertTrue(testErrorReporter.hasEncounteredAllErrors());\n    assertTrue(testErrorReporter.hasEncounteredAllWarnings());\n  }\n",
        "begin_line": 784,
        "end_line": 798,
        "comment": "",
        "child_ranges": [
            "(line 785,col 5)-(line 785,col 78)",
            "(line 786,col 5)-(line 786,col 23)",
            "(line 787,col 5)-(line 793,col 5)",
            "(line 796,col 5)-(line 796,col 60)",
            "(line 797,col 5)-(line 797,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.parse(java.lang.String, java.lang.String...)",
        "snippet": "  private Node parse(String string, String... warnings) {\n    TestErrorReporter testErrorReporter = new TestErrorReporter(null, warnings);\n    Node script = null;\n    try {\n      script = ParserRunner.parse(\n          \"input\", string, ParserRunner.createConfig(true, es5mode, false),\n          testErrorReporter, Logger.getAnonymousLogger());\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // verifying that all warnings were seen\n    assertTrue(testErrorReporter.hasEncounteredAllErrors());\n    assertTrue(testErrorReporter.hasEncounteredAllWarnings());\n\n    return script;\n  }\n",
        "begin_line": 800,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 801,col 5)-(line 801,col 80)",
            "(line 802,col 5)-(line 802,col 23)",
            "(line 803,col 5)-(line 809,col 5)",
            "(line 812,col 5)-(line 812,col 60)",
            "(line 813,col 5)-(line 813,col 62)",
            "(line 815,col 5)-(line 815,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.ParserResult.ParserResult(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "    private ParserResult(String code, Node node) {\n      this.code = code;\n      this.node = node;\n    }\n",
        "begin_line": 822,
        "end_line": 825,
        "comment": "",
        "child_ranges": [
            "(line 823,col 7)-(line 823,col 23)",
            "(line 824,col 7)-(line 824,col 23)"
        ]
    }
]