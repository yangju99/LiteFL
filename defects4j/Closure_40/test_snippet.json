[
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    externs = DEFAULT_EXTERNS;\n    lastCompiler = null;\n  }\n",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 30)",
            "(line 65,col 5)-(line 65,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424()",
        "snippet": "  public void testBug1949424() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO'); FOO.bar = 3;\",\n         CLOSURE_COMPILED + \"var FOO$bar = 3;\");\n  }\n",
        "begin_line": 68,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 54)",
            "(line 70,col 5)-(line 70,col 38)",
            "(line 71,col 5)-(line 71,col 31)",
            "(line 72,col 5)-(line 73,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424_v2()",
        "snippet": "  public void testBug1949424_v2() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO.BAR'); FOO.BAR = 3;\",\n         CLOSURE_COMPILED + \"var FOO$BAR = 3;\");\n  }\n",
        "begin_line": 76,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 77,col 54)",
            "(line 78,col 5)-(line 78,col 38)",
            "(line 79,col 5)-(line 79,col 31)",
            "(line 80,col 5)-(line 81,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1956277()",
        "snippet": "  public void testBug1956277() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    test(options, \"var CONST = {}; CONST.bar = null;\" +\n         \"function f(url) { CONST.bar = url; }\",\n         \"var CONST$bar = null; function f(url) { CONST$bar = url; }\");\n  }\n",
        "begin_line": 84,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 54)",
            "(line 86,col 5)-(line 86,col 38)",
            "(line 87,col 5)-(line 87,col 35)",
            "(line 88,col 5)-(line 90,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1962380()",
        "snippet": "  public void testBug1962380() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    options.generateExports = true;\n    test(options,\n         CLOSURE_BOILERPLATE + \"/** @export */ goog.CONSTANT = 1;\" +\n         \"var x = goog.CONSTANT;\",\n         \"(function() {})('goog.CONSTANT', 1);\" +\n         \"var x = 1;\");\n  }\n",
        "begin_line": 93,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 54)",
            "(line 95,col 5)-(line 95,col 38)",
            "(line 96,col 5)-(line 96,col 35)",
            "(line 97,col 5)-(line 97,col 35)",
            "(line 98,col 5)-(line 102,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2410122()",
        "snippet": "  public void testBug2410122() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    options.closurePass = true;\n    test(options,\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"/** @export */ function G() { goog.base(this); } \" +\n         \"goog.inherits(G, F);\",\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"function G() { F.call(this); } \" +\n         \"goog.inherits(G, F); goog.exportSymbol('G', G);\");\n  }\n",
        "begin_line": 105,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 54)",
            "(line 107,col 5)-(line 107,col 35)",
            "(line 108,col 5)-(line 108,col 31)",
            "(line 109,col 5)-(line 117,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue90()",
        "snippet": "  public void testIssue90() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.removeDeadCode = true;\n    test(options,\n         \"var x; x && alert(1);\",\n         \"\");\n  }\n",
        "begin_line": 120,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 54)",
            "(line 122,col 5)-(line 122,col 33)",
            "(line 123,col 5)-(line 123,col 35)",
            "(line 124,col 5)-(line 124,col 34)",
            "(line 125,col 5)-(line 127,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOff()",
        "snippet": "  public void testClosurePassOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = false;\n    testSame(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\");\n    testSame(\n        options,\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\");\n  }\n",
        "begin_line": 130,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 54)",
            "(line 132,col 5)-(line 132,col 32)",
            "(line 133,col 5)-(line 135,col 78)",
            "(line 136,col 5)-(line 139,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOn()",
        "snippet": "  public void testClosurePassOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\",\n        ProcessClosurePrimitives.MISSING_PROVIDE_ERROR);\n    test(\n        options,\n        \"/** @define {boolean} */ var COMPILED = false;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\",\n        \"var COMPILED = true;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"'foo';\");\n  }\n",
        "begin_line": 142,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 143,col 5)-(line 143,col 54)",
            "(line 144,col 5)-(line 144,col 31)",
            "(line 145,col 5)-(line 148,col 56)",
            "(line 149,col 5)-(line 156,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCssNameCheck()",
        "snippet": "  public void testCssNameCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options, \"var x = 'foo';\",\n         CheckMissingGetCssName.MISSING_GETCSSNAME);\n  }\n",
        "begin_line": 159,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 54)",
            "(line 161,col 5)-(line 161,col 31)",
            "(line 162,col 5)-(line 162,col 59)",
            "(line 163,col 5)-(line 163,col 52)",
            "(line 164,col 5)-(line 165,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2592659()",
        "snippet": "  public void testBug2592659() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkTypes = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.WARNING;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options,\n        \"var goog = {};\\n\" +\n        \"/**\\n\" +\n        \" * @param {string} className\\n\" +\n        \" * @param {string=} opt_modifier\\n\" +\n        \" * @return {string}\\n\" +\n        \"*/\\n\" +\n        \"goog.getCssName = function(className, opt_modifier) {}\\n\" +\n        \"var x = goog.getCssName(123, 'a');\",\n        TypeValidator.TYPE_MISMATCH_WARNING);\n  }\n",
        "begin_line": 168,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 54)",
            "(line 170,col 5)-(line 170,col 31)",
            "(line 171,col 5)-(line 171,col 30)",
            "(line 172,col 5)-(line 172,col 61)",
            "(line 173,col 5)-(line 173,col 52)",
            "(line 174,col 5)-(line 183,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner1()",
        "snippet": "  public void testTypedefBeforeOwner1() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo = {}; foo.Bar.Type; foo.Bar = function() {};\");\n  }\n",
        "begin_line": 186,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 187,col 5)-(line 187,col 54)",
            "(line 188,col 5)-(line 188,col 31)",
            "(line 189,col 5)-(line 194,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner2()",
        "snippet": "  public void testTypedefBeforeOwner2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo$Bar$Type; var foo$Bar = function() {};\");\n  }\n",
        "begin_line": 197,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 54)",
            "(line 199,col 5)-(line 199,col 31)",
            "(line 200,col 5)-(line 200,col 38)",
            "(line 201,col 5)-(line 206,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportedNames()",
        "snippet": "  public void testExportedNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('b', goog);\",\n         \"var a = true; var c = {}; c.exportSymbol('b', c);\");\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('a', goog);\",\n         \"var b = true; var c = {}; c.exportSymbol('a', c);\");\n  }\n",
        "begin_line": 209,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 54)",
            "(line 211,col 5)-(line 211,col 31)",
            "(line 212,col 5)-(line 212,col 58)",
            "(line 213,col 5)-(line 216,col 62)",
            "(line 217,col 5)-(line 220,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOn()",
        "snippet": "  public void testCheckGlobalThisOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 223,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 54)",
            "(line 225,col 5)-(line 225,col 39)",
            "(line 226,col 5)-(line 226,col 52)",
            "(line 227,col 5)-(line 227,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSusiciousCodeOff()",
        "snippet": "  public void testSusiciousCodeOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = false;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 230,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 231,col 5)-(line 231,col 54)",
            "(line 232,col 5)-(line 232,col 40)",
            "(line 233,col 5)-(line 233,col 52)",
            "(line 234,col 5)-(line 234,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOff()",
        "snippet": "  public void testCheckGlobalThisOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.OFF;\n    testSame(options, \"function f() { this.y = 3; }\");\n  }\n",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 238,col 5)-(line 238,col 54)",
            "(line 239,col 5)-(line 239,col 39)",
            "(line 240,col 5)-(line 240,col 50)",
            "(line 241,col 5)-(line 241,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresAndCheckProvidesOff()",
        "snippet": "  public void testCheckRequiresAndCheckProvidesOff() {\n    testSame(createCompilerOptions(), new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    });\n  }\n",
        "begin_line": 244,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 248,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresOn()",
        "snippet": "  public void testCheckRequiresOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkRequires = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckRequiresForConstructors.MISSING_REQUIRE_WARNING);\n  }\n",
        "begin_line": 251,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 54)",
            "(line 253,col 5)-(line 253,col 45)",
            "(line 254,col 5)-(line 257,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesOn()",
        "snippet": "  public void testCheckProvidesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkProvides = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckProvides.MISSING_PROVIDE_WARNING);\n  }\n",
        "begin_line": 260,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 54)",
            "(line 262,col 5)-(line 262,col 45)",
            "(line 263,col 5)-(line 266,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOff()",
        "snippet": "  public void testGenerateExportsOff() {\n    testSame(createCompilerOptions(), \"/** @export */ function f() {}\");\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOn()",
        "snippet": "  public void testGenerateExportsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    test(options, \"/** @export */ function f() {}\",\n         \"/** @export */ function f() {} goog.exportSymbol('f', f);\");\n  }\n",
        "begin_line": 273,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 274,col 5)-(line 274,col 54)",
            "(line 275,col 5)-(line 275,col 35)",
            "(line 276,col 5)-(line 277,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOff()",
        "snippet": "  public void testExportTestFunctionsOff() {\n    testSame(createCompilerOptions(), \"function testFoo() {}\");\n  }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 281,col 5)-(line 281,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOn()",
        "snippet": "  public void testExportTestFunctionsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.exportTestFunctions = true;\n    test(options, \"function testFoo() {}\",\n         \"/** @export */ function testFoo() {}\" +\n         \"goog.exportSymbol('testFoo', testFoo);\");\n  }\n",
        "begin_line": 284,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 285,col 5)-(line 285,col 54)",
            "(line 286,col 5)-(line 286,col 39)",
            "(line 287,col 5)-(line 289,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOff()",
        "snippet": "  public void testCheckSymbolsOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3;\");\n  }\n",
        "begin_line": 292,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 293,col 5)-(line 293,col 54)",
            "(line 294,col 5)-(line 294,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOn()",
        "snippet": "  public void testCheckSymbolsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    test(options, \"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 297,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 298,col 54)",
            "(line 299,col 5)-(line 299,col 32)",
            "(line 300,col 5)-(line 300,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOff()",
        "snippet": "  public void testCheckReferencesOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3; var x = 5;\");\n  }\n",
        "begin_line": 303,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 304,col 54)",
            "(line 305,col 5)-(line 305,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOn()",
        "snippet": "  public void testCheckReferencesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    test(options, \"x = 3; var x = 5;\",\n         VariableReferenceCheck.UNDECLARED_REFERENCE);\n  }\n",
        "begin_line": 308,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 54)",
            "(line 310,col 5)-(line 310,col 50)",
            "(line 311,col 5)-(line 312,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInferTypes()",
        "snippet": "  public void testInferTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.inferTypes = true;\n    options.checkTypes = false;\n    options.closurePass = true;\n\n    test(options,\n        CLOSURE_BOILERPLATE +\n        \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n        TypeCheck.ENUM_NOT_CONSTANT);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n\n    // This does not generate a warning.\n    test(options, \"/** @type {number} */ var n = window.name;\",\n        \"var n = window.name;\");\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n  }\n",
        "begin_line": 315,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 316,col 5)-(line 316,col 54)",
            "(line 317,col 5)-(line 317,col 30)",
            "(line 318,col 5)-(line 318,col 31)",
            "(line 319,col 5)-(line 319,col 31)",
            "(line 321,col 5)-(line 324,col 37)",
            "(line 325,col 5)-(line 325,col 70)",
            "(line 328,col 5)-(line 329,col 32)",
            "(line 330,col 5)-(line 330,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckAndInference()",
        "snippet": "  public void testTypeCheckAndInference() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {number} */ var n = window.name;\",\n         TypeValidator.TYPE_MISMATCH_WARNING);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() > 0);\n  }\n",
        "begin_line": 333,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 334,col 5)-(line 334,col 54)",
            "(line 335,col 5)-(line 335,col 30)",
            "(line 336,col 5)-(line 337,col 46)",
            "(line 338,col 5)-(line 338,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeNameParser()",
        "snippet": "  public void testTypeNameParser() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {n} */ var n = window.name;\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 341,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 342,col 54)",
            "(line 343,col 5)-(line 343,col 30)",
            "(line 344,col 5)-(line 345,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMemoizedTypedScopeCreator()",
        "snippet": "  public void testMemoizedTypedScopeCreator() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, \"function someTest() {\\n\"\n        + \"  /** @constructor */\\n\"\n        + \"  function Foo() { this.instProp = 3; }\\n\"\n        + \"  Foo.prototype.protoProp = function(a, b) {};\\n\"\n        + \"  /** @constructor\\n @extends Foo */\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  goog.inherits(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.protoProp(o.protoProp, o.instProp);\\n\"\n        + \"}\",\n        \"function someTest() {\\n\"\n        + \"  function Foo() { this.b = 3; }\\n\"\n        + \"  Foo.prototype.a = function(a, b) {};\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  goog.c(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.a(o.a, o.b);\\n\"\n        + \"}\");\n  }\n",
        "begin_line": 353,
        "end_line": 376,
        "comment": " o.a(o.a, o.a), which is bad.",
        "child_ranges": [
            "(line 354,col 5)-(line 354,col 54)",
            "(line 355,col 5)-(line 355,col 30)",
            "(line 356,col 5)-(line 356,col 39)",
            "(line 357,col 5)-(line 357,col 67)",
            "(line 358,col 5)-(line 375,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckTypes()",
        "snippet": "  public void testCheckTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 378,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 379,col 5)-(line 379,col 54)",
            "(line 380,col 5)-(line 380,col 30)",
            "(line 381,col 5)-(line 382,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceCssNames()",
        "snippet": "  public void testReplaceCssNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.gatherCssNames = true;\n    test(options, \"/** @define {boolean} */\\n\"\n         + \"var COMPILED = false;\\n\"\n         + \"goog.setCssNameMapping({'foo':'bar'});\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return goog.getCssName('foo');\\n\"\n         + \"}\",\n         \"var COMPILED = true;\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return \\\"bar\\\";\"\n         + \"}\");\n    assertEquals(\n        ImmutableMap.of(\"foo\", new Integer(1)),\n        lastCompiler.getPassConfig().getIntermediateState().cssNames);\n  }\n",
        "begin_line": 385,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 386,col 5)-(line 386,col 54)",
            "(line 387,col 5)-(line 387,col 31)",
            "(line 388,col 5)-(line 388,col 34)",
            "(line 389,col 5)-(line 398,col 16)",
            "(line 399,col 5)-(line 401,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveClosureAsserts()",
        "snippet": "  public void testRemoveClosureAsserts() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    testSame(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\");\n    options.removeClosureAsserts = true;\n    test(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\",\n        \"var goog = {};\");\n  }\n",
        "begin_line": 404,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 405,col 5)-(line 405,col 54)",
            "(line 406,col 5)-(line 406,col 31)",
            "(line 407,col 5)-(line 409,col 40)",
            "(line 410,col 5)-(line 410,col 40)",
            "(line 411,col 5)-(line 414,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeprecation()",
        "snippet": "  public void testDeprecation() {\n    String code = \"/** @deprecated */ function f() { } function g() { f(); }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.DEPRECATED, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 417,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 418,col 5)-(line 418,col 78)",
            "(line 420,col 5)-(line 420,col 54)",
            "(line 421,col 5)-(line 421,col 28)",
            "(line 423,col 5)-(line 423,col 75)",
            "(line 424,col 5)-(line 424,col 28)",
            "(line 426,col 5)-(line 426,col 30)",
            "(line 427,col 5)-(line 427,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVisibility()",
        "snippet": "  public void testVisibility() {\n    String[] code = {\n        \"/** @private */ function f() { }\",\n        \"function g() { f(); }\"\n    };\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS);\n  }\n",
        "begin_line": 430,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 431,col 5)-(line 434,col 6)",
            "(line 436,col 5)-(line 436,col 54)",
            "(line 437,col 5)-(line 437,col 28)",
            "(line 439,col 5)-(line 439,col 75)",
            "(line 440,col 5)-(line 440,col 28)",
            "(line 442,col 5)-(line 442,col 30)",
            "(line 443,col 5)-(line 443,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testUnreachableCode()",
        "snippet": "  public void testUnreachableCode() {\n    String code = \"function f() { return \\n 3; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkUnreachableCode = CheckLevel.ERROR;\n    test(options, code, CheckUnreachableCode.UNREACHABLE_CODE);\n  }\n",
        "begin_line": 446,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 447,col 5)-(line 447,col 50)",
            "(line 449,col 5)-(line 449,col 54)",
            "(line 450,col 5)-(line 450,col 28)",
            "(line 452,col 5)-(line 452,col 52)",
            "(line 453,col 5)-(line 453,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMissingReturn()",
        "snippet": "  public void testMissingReturn() {\n    String code =\n        \"/** @return {number} */ function f() { if (f) { return 3; } }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkMissingReturn = CheckLevel.ERROR;\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 456,
        "end_line": 468,
        "comment": "",
        "child_ranges": [
            "(line 457,col 5)-(line 458,col 72)",
            "(line 460,col 5)-(line 460,col 54)",
            "(line 461,col 5)-(line 461,col 28)",
            "(line 463,col 5)-(line 463,col 50)",
            "(line 464,col 5)-(line 464,col 28)",
            "(line 466,col 5)-(line 466,col 30)",
            "(line 467,col 5)-(line 467,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIdGenerators()",
        "snippet": "  public void testIdGenerators() {\n    String code =  \"function f() {} f('id');\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.idGenerators = Sets.newHashSet(\"f\");\n    test(options, code, \"function f() {} 'a';\");\n  }\n",
        "begin_line": 470,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 471,col 5)-(line 471,col 46)",
            "(line 473,col 5)-(line 473,col 54)",
            "(line 474,col 5)-(line 474,col 28)",
            "(line 476,col 5)-(line 476,col 48)",
            "(line 477,col 5)-(line 477,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeArgumentsArray()",
        "snippet": "  public void testOptimizeArgumentsArray() {\n    String code =  \"function f() { return arguments[0]; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeArgumentsArray = true;\n    String argName = \"JSCompiler_OptimizeArgumentsArray_p0\";\n    test(options, code,\n         \"function f(\" + argName + \") { return \" + argName + \"; }\");\n  }\n",
        "begin_line": 480,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 481,col 59)",
            "(line 483,col 5)-(line 483,col 54)",
            "(line 484,col 5)-(line 484,col 28)",
            "(line 486,col 5)-(line 486,col 42)",
            "(line 487,col 5)-(line 487,col 60)",
            "(line 488,col 5)-(line 489,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeParameters()",
        "snippet": "  public void testOptimizeParameters() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeParameters = true;\n    test(options, code, \"function f() { var a = true; return a;} f();\");\n  }\n",
        "begin_line": 492,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 493,col 5)-(line 493,col 57)",
            "(line 495,col 5)-(line 495,col 54)",
            "(line 496,col 5)-(line 496,col 28)",
            "(line 498,col 5)-(line 498,col 38)",
            "(line 499,col 5)-(line 499,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeReturns()",
        "snippet": "  public void testOptimizeReturns() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeReturns = true;\n    test(options, code, \"function f(a) {return;} f(true);\");\n  }\n",
        "begin_line": 502,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 503,col 5)-(line 503,col 57)",
            "(line 505,col 5)-(line 505,col 54)",
            "(line 506,col 5)-(line 506,col 28)",
            "(line 508,col 5)-(line 508,col 35)",
            "(line 509,col 5)-(line 509,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveAbstractMethods()",
        "snippet": "  public void testRemoveAbstractMethods() {\n    String code = CLOSURE_BOILERPLATE +\n        \"var x = {}; x.foo = goog.abstractMethod; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options, code, CLOSURE_COMPILED + \" var x$bar = 3;\");\n  }\n",
        "begin_line": 512,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 513,col 5)-(line 514,col 62)",
            "(line 516,col 5)-(line 516,col 54)",
            "(line 517,col 5)-(line 517,col 28)",
            "(line 519,col 5)-(line 519,col 31)",
            "(line 520,col 5)-(line 520,col 38)",
            "(line 521,col 5)-(line 521,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties1()",
        "snippet": "  public void testCollapseProperties1() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 524,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 525,col 5)-(line 526,col 44)",
            "(line 528,col 5)-(line 528,col 54)",
            "(line 529,col 5)-(line 529,col 28)",
            "(line 531,col 5)-(line 531,col 38)",
            "(line 532,col 5)-(line 532,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties2()",
        "snippet": "  public void testCollapseProperties2() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.collapseObjectLiterals = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 535,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 536,col 5)-(line 537,col 44)",
            "(line 539,col 5)-(line 539,col 54)",
            "(line 540,col 5)-(line 540,col 28)",
            "(line 542,col 5)-(line 542,col 38)",
            "(line 543,col 5)-(line 543,col 42)",
            "(line 544,col 5)-(line 544,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral1()",
        "snippet": "  public void testCollapseObjectLiteral1() {\n    // Verify collapseObjectLiterals does nothing in global scope\n    String code = \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    testSame(options, code);\n  }\n",
        "begin_line": 547,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 549,col 54)",
            "(line 551,col 5)-(line 551,col 54)",
            "(line 552,col 5)-(line 552,col 28)",
            "(line 554,col 5)-(line 554,col 42)",
            "(line 555,col 5)-(line 555,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral2()",
        "snippet": "  public void testCollapseObjectLiteral2() {\n    String code =\n        \"function f() {var x = {}; x.FOO = 5; x.bar = 3;}\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    test(options, code,\n        \"function f(){\" +\n        \"var JSCompiler_object_inline_FOO_0;\" +\n        \"var JSCompiler_object_inline_bar_1;\" +\n        \"JSCompiler_object_inline_FOO_0=5;\" +\n        \"JSCompiler_object_inline_bar_1=3}\");\n  }\n",
        "begin_line": 558,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 559,col 5)-(line 560,col 59)",
            "(line 562,col 5)-(line 562,col 54)",
            "(line 563,col 5)-(line 563,col 28)",
            "(line 565,col 5)-(line 565,col 42)",
            "(line 566,col 5)-(line 571,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTightenTypesWithoutTypeCheck()",
        "snippet": "  public void testTightenTypesWithoutTypeCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.tightenTypes = true;\n    test(options, \"\", DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n  }\n",
        "begin_line": 574,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 575,col 5)-(line 575,col 54)",
            "(line 576,col 5)-(line 576,col 32)",
            "(line 577,col 5)-(line 577,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDisambiguateProperties()",
        "snippet": "  public void testDisambiguateProperties() {\n    String code =\n        \"/** @constructor */ function Foo(){} Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ function Baz(){} Baz.prototype.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.disambiguateProperties = true;\n    options.checkTypes = true;\n    test(options, code,\n         \"function Foo(){} Foo.prototype.Foo_prototype$bar = 3;\" +\n         \"function Baz(){} Baz.prototype.Baz_prototype$bar = 3;\");\n  }\n",
        "begin_line": 580,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 581,col 5)-(line 583,col 70)",
            "(line 585,col 5)-(line 585,col 54)",
            "(line 586,col 5)-(line 586,col 28)",
            "(line 588,col 5)-(line 588,col 42)",
            "(line 589,col 5)-(line 589,col 30)",
            "(line 590,col 5)-(line 592,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkPureCalls()",
        "snippet": "  public void testMarkPureCalls() {\n    String testCode = \"function foo() {} foo();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.computeFunctionSideEffects = true;\n    test(options, testCode, \"function foo() {}\");\n  }\n",
        "begin_line": 595,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 596,col 49)",
            "(line 597,col 5)-(line 597,col 54)",
            "(line 598,col 5)-(line 598,col 34)",
            "(line 600,col 5)-(line 600,col 32)",
            "(line 602,col 5)-(line 602,col 46)",
            "(line 603,col 5)-(line 603,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkNoSideEffects()",
        "snippet": "  public void testMarkNoSideEffects() {\n    String testCode = \"noSideEffects();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.markNoSideEffectCalls = true;\n    test(options, testCode, \"\");\n  }\n",
        "begin_line": 606,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 607,col 5)-(line 607,col 41)",
            "(line 608,col 5)-(line 608,col 54)",
            "(line 609,col 5)-(line 609,col 34)",
            "(line 611,col 5)-(line 611,col 32)",
            "(line 613,col 5)-(line 613,col 41)",
            "(line 614,col 5)-(line 614,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testChainedCalls()",
        "snippet": "  public void testChainedCalls() {\n    CompilerOptions options = createCompilerOptions();\n    options.chainCalls = true;\n    test(\n        options,\n        \"/** @constructor */ function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar(); \" +\n        \"f.bar(); \",\n        \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar().bar();\");\n  }\n",
        "begin_line": 617,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 618,col 5)-(line 618,col 54)",
            "(line 619,col 5)-(line 619,col 30)",
            "(line 620,col 5)-(line 630,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtraAnnotationNames()",
        "snippet": "  public void testExtraAnnotationNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.setExtraAnnotationNames(Sets.newHashSet(\"TagA\", \"TagB\"));\n    test(\n        options,\n        \"/** @TagA */ var f = new Foo(); /** @TagB */ f.bar();\",\n        \"var f = new Foo(); f.bar();\");\n  }\n",
        "begin_line": 633,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 634,col 5)-(line 634,col 54)",
            "(line 635,col 5)-(line 635,col 69)",
            "(line 636,col 5)-(line 639,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizePrototypeMethods()",
        "snippet": "  public void testDevirtualizePrototypeMethods() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    test(\n        options,\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\",\n        \"var Foo = function() {};\" +\n        \"var JSCompiler_StaticMethods_bar = \" +\n        \"    function(JSCompiler_StaticMethods_bar$self) {};\" +\n        \"JSCompiler_StaticMethods_bar(new Foo());\");\n  }\n",
        "begin_line": 642,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 643,col 5)-(line 643,col 54)",
            "(line 644,col 5)-(line 644,col 48)",
            "(line 645,col 5)-(line 653,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConsts()",
        "snippet": "  public void testCheckConsts() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineConstantVars = true;\n    test(options, \"var FOO = true; FOO = false\",\n        ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 656,
        "end_line": 661,
        "comment": "",
        "child_ranges": [
            "(line 657,col 5)-(line 657,col 54)",
            "(line 658,col 5)-(line 658,col 38)",
            "(line 659,col 5)-(line 660,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAllChecksOn()",
        "snippet": "  public void testAllChecksOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkControlStructures = true;\n    options.checkRequires = CheckLevel.ERROR;\n    options.checkProvides = CheckLevel.ERROR;\n    options.generateExports = true;\n    options.exportTestFunctions = true;\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"goog\";\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkSymbols = true;\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    options.processObjectPropertyString = true;\n    options.collapseProperties = true;\n    test(options, CLOSURE_BOILERPLATE, CLOSURE_COMPILED);\n  }\n",
        "begin_line": 663,
        "end_line": 681,
        "comment": "",
        "child_ranges": [
            "(line 664,col 5)-(line 664,col 54)",
            "(line 665,col 5)-(line 665,col 39)",
            "(line 666,col 5)-(line 666,col 42)",
            "(line 667,col 5)-(line 667,col 45)",
            "(line 668,col 5)-(line 668,col 45)",
            "(line 669,col 5)-(line 669,col 35)",
            "(line 670,col 5)-(line 670,col 39)",
            "(line 671,col 5)-(line 671,col 31)",
            "(line 672,col 5)-(line 672,col 59)",
            "(line 673,col 5)-(line 673,col 53)",
            "(line 674,col 5)-(line 674,col 51)",
            "(line 675,col 5)-(line 675,col 47)",
            "(line 676,col 5)-(line 676,col 32)",
            "(line 677,col 5)-(line 677,col 50)",
            "(line 678,col 5)-(line 678,col 47)",
            "(line 679,col 5)-(line 679,col 38)",
            "(line 680,col 5)-(line 680,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckingWithSyntheticBlocks()",
        "snippet": "  public void testTypeCheckingWithSyntheticBlocks() {\n    CompilerOptions options = createCompilerOptions();\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkTypes = true;\n\n    // We used to have a bug where the CFG drew an\n    // edge straight from synStart to f(progress).\n    // If that happens, then progress will get type {number|undefined}.\n    testSame(\n        options,\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \" synStart('foo');\" +\n        \" var progress = 1;\" +\n        \" f(progress);\" +\n        \" synEnd('foo');\" +\n        \"}\");\n  }\n",
        "begin_line": 683,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 684,col 5)-(line 684,col 54)",
            "(line 685,col 5)-(line 685,col 51)",
            "(line 686,col 5)-(line 686,col 47)",
            "(line 687,col 5)-(line 687,col 30)",
            "(line 692,col 5)-(line 700,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCompilerDoesNotBlowUpIfUndefinedSymbols()",
        "snippet": "  public void testCompilerDoesNotBlowUpIfUndefinedSymbols() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n\n    // Disable the undefined variable check.\n    options.setWarningLevel(\n        DiagnosticGroup.forType(VarCheck.UNDEFINED_VAR_ERROR),\n        CheckLevel.OFF);\n\n    // The compiler used to throw an IllegalStateException on this.\n    testSame(options, \"var x = {foo: y};\");\n  }\n",
        "begin_line": 703,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 704,col 5)-(line 704,col 54)",
            "(line 705,col 5)-(line 705,col 32)",
            "(line 708,col 5)-(line 710,col 24)",
            "(line 713,col 5)-(line 713,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConstantTagsMustAlwaysBeRemoved()",
        "snippet": "  public void testConstantTagsMustAlwaysBeRemoved() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    String originalText = \"var G_GEO_UNKNOWN_ADDRESS=1;\\n\" +\n        \"function foo() {\" +\n        \"  var localVar = 2;\\n\" +\n        \"  if (G_GEO_UNKNOWN_ADDRESS == localVar) {\\n\" +\n        \"    alert(\\\"A\\\"); }}\";\n    String expectedText = \"var G_GEO_UNKNOWN_ADDRESS=1;\" +\n        \"function foo(){var a=2;if(G_GEO_UNKNOWN_ADDRESS==a){alert(\\\"A\\\")}}\";\n\n    test(options, originalText, expectedText);\n  }\n",
        "begin_line": 719,
        "end_line": 732,
        "comment": " we finish.",
        "child_ranges": [
            "(line 720,col 5)-(line 720,col 54)",
            "(line 722,col 5)-(line 722,col 60)",
            "(line 723,col 5)-(line 727,col 31)",
            "(line 728,col 5)-(line 729,col 77)",
            "(line 731,col 5)-(line 731,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassPreservesJsDoc()",
        "snippet": "  public void testClosurePassPreservesJsDoc() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.closurePass = true;\n\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @constructor */ Foo = function() {};\" +\n         \"var x = new Foo();\",\n         \"var COMPILED=true;var goog={};goog.exportSymbol=function(){};\" +\n         \"var Foo=function(){};var x=new Foo\");\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n         TypeCheck.ENUM_NOT_CONSTANT);\n  }\n",
        "begin_line": 734,
        "end_line": 749,
        "comment": "",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 54)",
            "(line 736,col 5)-(line 736,col 30)",
            "(line 737,col 5)-(line 737,col 31)",
            "(line 739,col 5)-(line 744,col 47)",
            "(line 745,col 5)-(line 748,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst()",
        "snippet": "  public void testProvidedNamespaceIsConst() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo'); \" +\n         \"function f() { foo = {};}\",\n         \"var foo = {}; function f() { foo = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 751,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 752,col 5)-(line 752,col 54)",
            "(line 753,col 5)-(line 753,col 31)",
            "(line 754,col 5)-(line 754,col 38)",
            "(line 755,col 5)-(line 755,col 38)",
            "(line 756,col 5)-(line 760,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst2()",
        "snippet": "  public void testProvidedNamespaceIsConst2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.bar'); \" +\n         \"function f() { foo.bar = {};}\",\n         \"var foo$bar = {};\" +\n         \"function f() { foo$bar = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 763,
        "end_line": 774,
        "comment": "",
        "child_ranges": [
            "(line 764,col 5)-(line 764,col 54)",
            "(line 765,col 5)-(line 765,col 31)",
            "(line 766,col 5)-(line 766,col 38)",
            "(line 767,col 5)-(line 767,col 38)",
            "(line 768,col 5)-(line 773,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst3()",
        "snippet": "  public void testProvidedNamespaceIsConst3() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; \" +\n         \"goog.provide('foo.bar'); goog.provide('foo.bar.baz'); \" +\n         \"/** @constructor */ foo.bar = function() {};\" +\n         \"/** @constructor */ foo.bar.baz = function() {};\",\n         \"var foo$bar = function(){};\" +\n         \"var foo$bar$baz = function(){};\");\n  }\n",
        "begin_line": 776,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 777,col 5)-(line 777,col 54)",
            "(line 778,col 5)-(line 778,col 31)",
            "(line 779,col 5)-(line 779,col 38)",
            "(line 780,col 5)-(line 780,col 38)",
            "(line 781,col 5)-(line 787,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst4()",
        "snippet": "  public void testProvidedNamespaceIsConst4() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"var foo = {}; foo.Bar = {};\",\n         \"var foo = {}; var foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 790,
        "end_line": 799,
        "comment": "",
        "child_ranges": [
            "(line 791,col 5)-(line 791,col 54)",
            "(line 792,col 5)-(line 792,col 31)",
            "(line 793,col 5)-(line 793,col 38)",
            "(line 794,col 5)-(line 794,col 38)",
            "(line 795,col 5)-(line 798,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst5()",
        "snippet": "  public void testProvidedNamespaceIsConst5() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"foo = {}; foo.Bar = {};\",\n         \"var foo = {}; foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 801,
        "end_line": 810,
        "comment": "",
        "child_ranges": [
            "(line 802,col 5)-(line 802,col 54)",
            "(line 803,col 5)-(line 803,col 31)",
            "(line 804,col 5)-(line 804,col 38)",
            "(line 805,col 5)-(line 805,col 38)",
            "(line 806,col 5)-(line 809,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAlwaysOn()",
        "snippet": "  public void testProcessDefinesAlwaysOn() {\n    test(createCompilerOptions(),\n         \"/** @define {boolean} */ var HI = true; HI = false;\",\n         \"var HI = false;false;\");\n  }\n",
        "begin_line": 812,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 813,col 5)-(line 815,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAdditionalReplacements()",
        "snippet": "  public void testProcessDefinesAdditionalReplacements() {\n    CompilerOptions options = createCompilerOptions();\n    options.setDefineToBooleanLiteral(\"HI\", false);\n    test(options,\n         \"/** @define {boolean} */ var HI = true;\",\n         \"var HI = false;\");\n  }\n",
        "begin_line": 818,
        "end_line": 824,
        "comment": "",
        "child_ranges": [
            "(line 819,col 5)-(line 819,col 54)",
            "(line 820,col 5)-(line 820,col 51)",
            "(line 821,col 5)-(line 823,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceMessages()",
        "snippet": "  public void testReplaceMessages() {\n    CompilerOptions options = createCompilerOptions();\n    String prefix = \"var goog = {}; goog.getMsg = function() {};\";\n    testSame(options, prefix + \"var MSG_HI = goog.getMsg('hi');\");\n\n    options.messageBundle = new EmptyMessageBundle();\n    test(options,\n        prefix + \"/** @desc xyz */ var MSG_HI = goog.getMsg('hi');\",\n        prefix + \"var MSG_HI = 'hi';\");\n  }\n",
        "begin_line": 826,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 827,col 5)-(line 827,col 54)",
            "(line 828,col 5)-(line 828,col 66)",
            "(line 829,col 5)-(line 829,col 66)",
            "(line 831,col 5)-(line 831,col 53)",
            "(line 832,col 5)-(line 834,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalNames()",
        "snippet": "  public void testCheckGlobalNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkGlobalNamesLevel = CheckLevel.ERROR;\n    test(options, \"var x = {}; var y = x.z;\",\n         CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 837,
        "end_line": 842,
        "comment": "",
        "child_ranges": [
            "(line 838,col 5)-(line 838,col 54)",
            "(line 839,col 5)-(line 839,col 53)",
            "(line 840,col 5)-(line 841,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGetters()",
        "snippet": "  public void testInlineGetters() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function Foo() {} Foo.prototype.bar = function() { return 3; };\" +\n        \"var x = new Foo(); x.bar();\";\n\n    testSame(options, code);\n    options.inlineGetters = true;\n\n    test(options, code,\n         \"function Foo() {} Foo.prototype.bar = function() { return 3 };\" +\n         \"var x = new Foo(); 3;\");\n  }\n",
        "begin_line": 844,
        "end_line": 856,
        "comment": "",
        "child_ranges": [
            "(line 845,col 5)-(line 845,col 54)",
            "(line 846,col 5)-(line 848,col 38)",
            "(line 850,col 5)-(line 850,col 28)",
            "(line 851,col 5)-(line 851,col 33)",
            "(line 853,col 5)-(line 855,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGettersWithAmbiguate()",
        "snippet": "  public void testInlineGettersWithAmbiguate() {\n    CompilerOptions options = createCompilerOptions();\n\n    String code =\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"/** @type {number} */ Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"/** @constructor */\" +\n        \"function Bar() {}\" +\n        \"/** @type {string} */ Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().getField();\" +\n        \"new Bar().getField();\";\n\n    testSame(options, code);\n\n    options.inlineGetters = true;\n\n    test(options, code,\n        \"function Foo() {}\" +\n        \"Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"function Bar() {}\" +\n        \"Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().field;\" +\n        \"new Bar().field;\");\n\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n\n    // Propagating the wrong type information may cause ambiguate properties\n    // to generate bad code.\n    testSame(options, code);\n  }\n",
        "begin_line": 858,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 859,col 5)-(line 859,col 54)",
            "(line 861,col 5)-(line 871,col 32)",
            "(line 873,col 5)-(line 873,col 28)",
            "(line 875,col 5)-(line 875,col 33)",
            "(line 877,col 5)-(line 885,col 28)",
            "(line 887,col 5)-(line 887,col 30)",
            "(line 888,col 5)-(line 888,col 39)",
            "(line 892,col 5)-(line 892,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineVariables()",
        "snippet": "  public void testInlineVariables() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x);\";\n    testSame(options, code);\n\n    options.inlineVariables = true;\n    test(options, code, \"(function foo() {})(3);\");\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);\n  }\n",
        "begin_line": 895,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 896,col 5)-(line 896,col 54)",
            "(line 897,col 5)-(line 897,col 57)",
            "(line 898,col 5)-(line 898,col 28)",
            "(line 900,col 5)-(line 900,col 35)",
            "(line 901,col 5)-(line 901,col 51)",
            "(line 903,col 5)-(line 903,col 64)",
            "(line 904,col 5)-(line 904,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineConstants()",
        "snippet": "  public void testInlineConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x); var YYY = 4; foo(YYY);\";\n    testSame(options, code);\n\n    options.inlineConstantVars = true;\n    test(options, code, \"function foo() {} var x = 3; foo(x); foo(4);\");\n  }\n",
        "begin_line": 907,
        "end_line": 914,
        "comment": "",
        "child_ranges": [
            "(line 908,col 5)-(line 908,col 54)",
            "(line 909,col 5)-(line 909,col 80)",
            "(line 910,col 5)-(line 910,col 28)",
            "(line 912,col 5)-(line 912,col 38)",
            "(line 913,col 5)-(line 913,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMinimizeExits()",
        "snippet": "  public void testMinimizeExits() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() {\" +\n        \"  if (window.foo) return; window.h(); \" +\n        \"}\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(\n        options, code,\n        \"function f() {\" +\n        \"  window.foo || window.h(); \" +\n        \"}\");\n  }\n",
        "begin_line": 916,
        "end_line": 930,
        "comment": "",
        "child_ranges": [
            "(line 917,col 5)-(line 917,col 54)",
            "(line 918,col 5)-(line 921,col 12)",
            "(line 922,col 5)-(line 922,col 28)",
            "(line 924,col 5)-(line 924,col 33)",
            "(line 925,col 5)-(line 929,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldConstants()",
        "snippet": "  public void testFoldConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"if (true) { window.foo(); }\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(options, code, \"window.foo();\");\n  }\n",
        "begin_line": 932,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 933,col 5)-(line 933,col 54)",
            "(line 934,col 5)-(line 934,col 48)",
            "(line 935,col 5)-(line 935,col 28)",
            "(line 937,col 5)-(line 937,col 33)",
            "(line 938,col 5)-(line 938,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnreachableCode()",
        "snippet": "  public void testRemoveUnreachableCode() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return; f(); }\";\n    testSame(options, code);\n\n    options.removeDeadCode = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 941,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 942,col 5)-(line 942,col 54)",
            "(line 943,col 5)-(line 943,col 50)",
            "(line 944,col 5)-(line 944,col 28)",
            "(line 946,col 5)-(line 946,col 34)",
            "(line 947,col 5)-(line 947,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties1()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    test(options, code, \"function Foo() {}\");\n  }\n",
        "begin_line": 950,
        "end_line": 958,
        "comment": "",
        "child_ranges": [
            "(line 951,col 5)-(line 951,col 54)",
            "(line 952,col 5)-(line 953,col 64)",
            "(line 954,col 5)-(line 954,col 28)",
            "(line 956,col 5)-(line 956,col 51)",
            "(line 957,col 5)-(line 957,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties2()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\" +\n        \"function f(x) { x.bar(); }\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 960,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 961,col 5)-(line 961,col 54)",
            "(line 962,col 5)-(line 964,col 37)",
            "(line 965,col 5)-(line 965,col 28)",
            "(line 967,col 5)-(line 967,col 51)",
            "(line 968,col 5)-(line 968,col 28)",
            "(line 970,col 5)-(line 970,col 36)",
            "(line 971,col 5)-(line 971,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSmartNamePass()",
        "snippet": "  public void testSmartNamePass() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() { this.bar(); } \" +\n        \"Foo.prototype.bar = function() { return Foo(); };\";\n    testSame(options, code);\n\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 974,
        "end_line": 982,
        "comment": "",
        "child_ranges": [
            "(line 975,col 5)-(line 975,col 54)",
            "(line 976,col 5)-(line 977,col 60)",
            "(line 978,col 5)-(line 978,col 28)",
            "(line 980,col 5)-(line 980,col 36)",
            "(line 981,col 5)-(line 981,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeadAssignmentsElimination()",
        "snippet": "  public void testDeadAssignmentsElimination() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; 4; x = 5; return x; } f(); \";\n    testSame(options, code);\n\n    options.deadAssignmentElimination = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() { var x = 3; 4; x = 5; return x; } f();\");\n  }\n",
        "begin_line": 984,
        "end_line": 994,
        "comment": "",
        "child_ranges": [
            "(line 985,col 5)-(line 985,col 54)",
            "(line 986,col 5)-(line 986,col 74)",
            "(line 987,col 5)-(line 987,col 28)",
            "(line 989,col 5)-(line 989,col 45)",
            "(line 990,col 5)-(line 990,col 28)",
            "(line 992,col 5)-(line 992,col 36)",
            "(line 993,col 5)-(line 993,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineFunctions()",
        "snippet": "  public void testInlineFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 3; } f(); \";\n    testSame(options, code);\n\n    options.inlineFunctions = true;\n    test(options, code, \"3;\");\n  }\n",
        "begin_line": 996,
        "end_line": 1003,
        "comment": "",
        "child_ranges": [
            "(line 997,col 5)-(line 997,col 54)",
            "(line 998,col 5)-(line 998,col 53)",
            "(line 999,col 5)-(line 999,col 28)",
            "(line 1001,col 5)-(line 1001,col 35)",
            "(line 1002,col 5)-(line 1002,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars1()",
        "snippet": "  public void testRemoveUnusedVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f(x) {} f();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() {} f();\");\n  }\n",
        "begin_line": 1005,
        "end_line": 1012,
        "comment": "",
        "child_ranges": [
            "(line 1006,col 5)-(line 1006,col 54)",
            "(line 1007,col 5)-(line 1007,col 42)",
            "(line 1008,col 5)-(line 1008,col 28)",
            "(line 1010,col 5)-(line 1010,col 36)",
            "(line 1011,col 5)-(line 1011,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars2()",
        "snippet": "  public void testRemoveUnusedVars2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"(function f(x) {})();var g = function() {}; g();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"(function() {})();var g = function() {}; g();\");\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"(function f() {})();var g = function $g$() {}; g();\");\n  }\n",
        "begin_line": 1014,
        "end_line": 1024,
        "comment": "",
        "child_ranges": [
            "(line 1015,col 5)-(line 1015,col 54)",
            "(line 1016,col 5)-(line 1016,col 69)",
            "(line 1017,col 5)-(line 1017,col 28)",
            "(line 1019,col 5)-(line 1019,col 36)",
            "(line 1020,col 5)-(line 1020,col 73)",
            "(line 1022,col 5)-(line 1022,col 77)",
            "(line 1023,col 5)-(line 1023,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleCodeMotion()",
        "snippet": "  public void testCrossModuleCodeMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var x = 1;\",\n      \"x;\",\n    };\n    testSame(options, code);\n\n    options.crossModuleCodeMotion = true;\n    test(options, code, new String[] {\n      \"\",\n      \"var x = 1; x;\",\n    });\n  }\n",
        "begin_line": 1026,
        "end_line": 1039,
        "comment": "",
        "child_ranges": [
            "(line 1027,col 5)-(line 1027,col 54)",
            "(line 1028,col 5)-(line 1031,col 6)",
            "(line 1032,col 5)-(line 1032,col 28)",
            "(line 1034,col 5)-(line 1034,col 41)",
            "(line 1035,col 5)-(line 1038,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleMethodMotion()",
        "snippet": "  public void testCrossModuleMethodMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var Foo = function() {}; Foo.prototype.bar = function() {};\" +\n      \"var x = new Foo();\",\n      \"x.bar();\",\n    };\n    testSame(options, code);\n\n    options.crossModuleMethodMotion = true;\n    test(options, code, new String[] {\n      CrossModuleMethodMotion.STUB_DECLARATIONS +\n      \"var Foo = function() {};\" +\n      \"Foo.prototype.bar=JSCompiler_stubMethod(0); var x=new Foo;\",\n      \"Foo.prototype.bar=JSCompiler_unstubMethod(0,function(){}); x.bar()\",\n    });\n  }\n",
        "begin_line": 1041,
        "end_line": 1057,
        "comment": "",
        "child_ranges": [
            "(line 1042,col 5)-(line 1042,col 54)",
            "(line 1043,col 5)-(line 1047,col 6)",
            "(line 1048,col 5)-(line 1048,col 28)",
            "(line 1050,col 5)-(line 1050,col 43)",
            "(line 1051,col 5)-(line 1056,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables1()",
        "snippet": "  public void testFlowSensitiveInlineVariables1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; x = 5; return x; }\";\n    testSame(options, code);\n\n    options.flowSensitiveInlineVariables = true;\n    test(options, code, \"function f() { var x = 3; return 5; }\");\n\n    String unusedVar = \"function f() { var x; x = 5; return x; } f()\";\n    test(options, unusedVar, \"function f() { var x; return 5; } f()\");\n\n    options.removeUnusedVars = true;\n    test(options, unusedVar, \"function f() { return 5; } f()\");\n  }\n",
        "begin_line": 1059,
        "end_line": 1072,
        "comment": "",
        "child_ranges": [
            "(line 1060,col 5)-(line 1060,col 54)",
            "(line 1061,col 5)-(line 1061,col 65)",
            "(line 1062,col 5)-(line 1062,col 28)",
            "(line 1064,col 5)-(line 1064,col 48)",
            "(line 1065,col 5)-(line 1065,col 65)",
            "(line 1067,col 5)-(line 1067,col 70)",
            "(line 1068,col 5)-(line 1068,col 70)",
            "(line 1070,col 5)-(line 1070,col 36)",
            "(line 1071,col 5)-(line 1071,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables2()",
        "snippet": "  public void testFlowSensitiveInlineVariables2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function f () {\\n\" +\n        \"    var ab = 0;\\n\" +\n        \"    ab += '-';\\n\" +\n        \"    alert(ab);\\n\" +\n        \"}\",\n        \"function f () {\\n\" +\n        \"    alert('0-');\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 1074,
        "end_line": 1087,
        "comment": "",
        "child_ranges": [
            "(line 1075,col 5)-(line 1075,col 54)",
            "(line 1076,col 5)-(line 1077,col 48)",
            "(line 1078,col 5)-(line 1086,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseAnonymousFunctions()",
        "snippet": "  public void testCollapseAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.collapseAnonymousFunctions = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 1089,
        "end_line": 1096,
        "comment": "",
        "child_ranges": [
            "(line 1090,col 5)-(line 1090,col 54)",
            "(line 1091,col 5)-(line 1091,col 43)",
            "(line 1092,col 5)-(line 1092,col 28)",
            "(line 1094,col 5)-(line 1094,col 46)",
            "(line 1095,col 5)-(line 1095,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMoveFunctionDeclarations()",
        "snippet": "  public void testMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f(); function f() { return 3; }\";\n    testSame(options, code);\n\n    options.moveFunctionDeclarations = true;\n    test(options, code, \"function f() { return 3; } var x = f();\");\n  }\n",
        "begin_line": 1098,
        "end_line": 1105,
        "comment": "",
        "child_ranges": [
            "(line 1099,col 5)-(line 1099,col 54)",
            "(line 1100,col 5)-(line 1100,col 60)",
            "(line 1101,col 5)-(line 1101,col 28)",
            "(line 1103,col 5)-(line 1103,col 44)",
            "(line 1104,col 5)-(line 1104,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNameAnonymousFunctions()",
        "snippet": "  public void testNameAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED;\n    test(options, code, \"var f = function $() {}\");\n    assertNotNull(lastCompiler.getResult().namedAnonFunctionMap);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"var f = function $f$() {}\");\n    assertNull(lastCompiler.getResult().namedAnonFunctionMap);\n  }\n",
        "begin_line": 1107,
        "end_line": 1119,
        "comment": "",
        "child_ranges": [
            "(line 1108,col 5)-(line 1108,col 54)",
            "(line 1109,col 5)-(line 1109,col 43)",
            "(line 1110,col 5)-(line 1110,col 28)",
            "(line 1112,col 5)-(line 1112,col 75)",
            "(line 1113,col 5)-(line 1113,col 51)",
            "(line 1114,col 5)-(line 1114,col 65)",
            "(line 1116,col 5)-(line 1116,col 77)",
            "(line 1117,col 5)-(line 1117,col 53)",
            "(line 1118,col 5)-(line 1118,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    String expected = \"var a; var b = function() {}; a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.a = \" + i + \";\";\n      expected += \"a.a = \" + i + \";\";\n    }\n    testSame(options, code);\n\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, expected);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    options.variableRenaming = VariableRenamingPolicy.OFF;\n    testSame(options, code);\n  }\n",
        "begin_line": 1121,
        "end_line": 1138,
        "comment": "",
        "child_ranges": [
            "(line 1122,col 5)-(line 1122,col 54)",
            "(line 1123,col 5)-(line 1123,col 43)",
            "(line 1124,col 5)-(line 1124,col 71)",
            "(line 1125,col 5)-(line 1128,col 5)",
            "(line 1129,col 5)-(line 1129,col 28)",
            "(line 1131,col 5)-(line 1131,col 54)",
            "(line 1132,col 5)-(line 1132,col 58)",
            "(line 1133,col 5)-(line 1133,col 34)",
            "(line 1135,col 5)-(line 1135,col 64)",
            "(line 1136,col 5)-(line 1136,col 58)",
            "(line 1137,col 5)-(line 1137,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizationAndExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testDevirtualizationAndExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    options.collapseAnonymousFunctions = true;\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    String code = \"var f = function() {};\";\n    String expected = \"var a; function b() {} a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.argz = function() {arguments};\";\n      code += \"f.prototype.devir\" + i + \" = function() {};\";\n\n      char letter = (char) ('d' + i);\n      expected += \"a.argz = function() {arguments};\";\n      expected += \"function \" + letter + \"(c){}\";\n    }\n\n    code += \"var F = new f(); F.argz();\";\n    expected += \"var n = new b(); n.argz();\";\n\n    for (int i = 0; i < 10; i++) {\n      code += \"F.devir\" + i + \"();\";\n\n      char letter = (char) ('d' + i);\n      expected += letter + \"(n);\";\n    }\n    test(options, code, expected);\n  }\n",
        "begin_line": 1140,
        "end_line": 1167,
        "comment": "",
        "child_ranges": [
            "(line 1141,col 5)-(line 1141,col 54)",
            "(line 1142,col 5)-(line 1142,col 48)",
            "(line 1143,col 5)-(line 1143,col 46)",
            "(line 1144,col 5)-(line 1144,col 54)",
            "(line 1145,col 5)-(line 1145,col 58)",
            "(line 1146,col 5)-(line 1146,col 43)",
            "(line 1147,col 5)-(line 1147,col 64)",
            "(line 1148,col 5)-(line 1155,col 5)",
            "(line 1157,col 5)-(line 1157,col 41)",
            "(line 1158,col 5)-(line 1158,col 45)",
            "(line 1160,col 5)-(line 1165,col 5)",
            "(line 1166,col 5)-(line 1166,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoalesceVariableNames()",
        "snippet": "  public void testCoalesceVariableNames() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() {var x = 3; var y = x; var z = y; return z;}\";\n    testSame(options, code);\n\n    options.coalesceVariableNames = true;\n    test(options, code,\n         \"function f() {var x = 3; x = x; x = x; return x;}\");\n  }\n",
        "begin_line": 1169,
        "end_line": 1177,
        "comment": "",
        "child_ranges": [
            "(line 1170,col 5)-(line 1170,col 54)",
            "(line 1171,col 5)-(line 1171,col 78)",
            "(line 1172,col 5)-(line 1172,col 28)",
            "(line 1174,col 5)-(line 1174,col 41)",
            "(line 1175,col 5)-(line 1176,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testPropertyRenaming()",
        "snippet": "  public void testPropertyRenaming() {\n    CompilerOptions options = createCompilerOptions();\n    options.propertyAffinity = true;\n    String code =\n        \"function f() { return this.foo + this['bar'] + this.Baz; }\" +\n        \"f.prototype.bar = 3; f.prototype.Baz = 3;\";\n    String heuristic =\n        \"function f() { return this.foo + this['bar'] + this.a; }\" +\n        \"f.prototype.bar = 3; f.prototype.a = 3;\";\n    String aggHeuristic =\n        \"function f() { return this.foo + this['b'] + this.a; } \" +\n        \"f.prototype.b = 3; f.prototype.a = 3;\";\n    String all =\n        \"function f() { return this.b + this['bar'] + this.a; }\" +\n        \"f.prototype.c = 3; f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, heuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n    test(options, code, aggHeuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, all);\n  }\n",
        "begin_line": 1179,
        "end_line": 1204,
        "comment": "",
        "child_ranges": [
            "(line 1180,col 5)-(line 1180,col 54)",
            "(line 1181,col 5)-(line 1181,col 36)",
            "(line 1182,col 5)-(line 1184,col 52)",
            "(line 1185,col 5)-(line 1187,col 50)",
            "(line 1188,col 5)-(line 1190,col 48)",
            "(line 1191,col 5)-(line 1193,col 48)",
            "(line 1194,col 5)-(line 1194,col 28)",
            "(line 1196,col 5)-(line 1196,col 64)",
            "(line 1197,col 5)-(line 1197,col 35)",
            "(line 1199,col 5)-(line 1199,col 75)",
            "(line 1200,col 5)-(line 1200,col 38)",
            "(line 1202,col 5)-(line 1202,col 67)",
            "(line 1203,col 5)-(line 1203,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConvertToDottedProperties()",
        "snippet": "  public void testConvertToDottedProperties() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return this['bar']; } f.prototype.bar = 3;\";\n    String expected =\n        \"function f() { return this.bar; } f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.convertToDottedProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1206,
        "end_line": 1217,
        "comment": "",
        "child_ranges": [
            "(line 1207,col 5)-(line 1207,col 54)",
            "(line 1208,col 5)-(line 1209,col 68)",
            "(line 1210,col 5)-(line 1211,col 63)",
            "(line 1212,col 5)-(line 1212,col 28)",
            "(line 1214,col 5)-(line 1214,col 45)",
            "(line 1215,col 5)-(line 1215,col 67)",
            "(line 1216,col 5)-(line 1216,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRewriteFunctionExpressions()",
        "snippet": "  public void testRewriteFunctionExpressions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a = function() {};\";\n    String expected = \"function JSCompiler_emptyFn(){return function(){}} \" +\n        \"var a = JSCompiler_emptyFn();\";\n    for (int i = 0; i < 10; i++) {\n      code += \"a = function() {};\";\n      expected += \"a = JSCompiler_emptyFn();\";\n    }\n    testSame(options, code);\n\n    options.rewriteFunctionExpressions = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1219,
        "end_line": 1232,
        "comment": "",
        "child_ranges": [
            "(line 1220,col 5)-(line 1220,col 54)",
            "(line 1221,col 5)-(line 1221,col 43)",
            "(line 1222,col 5)-(line 1223,col 40)",
            "(line 1224,col 5)-(line 1227,col 5)",
            "(line 1228,col 5)-(line 1228,col 28)",
            "(line 1230,col 5)-(line 1230,col 46)",
            "(line 1231,col 5)-(line 1231,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasAllStrings()",
        "snippet": "  public void testAliasAllStrings() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 'a'; }\";\n    String expected = \"var $$S_a = 'a'; function f() { return $$S_a; }\";\n    testSame(options, code);\n\n    options.aliasAllStrings = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1234,
        "end_line": 1242,
        "comment": "",
        "child_ranges": [
            "(line 1235,col 5)-(line 1235,col 54)",
            "(line 1236,col 5)-(line 1236,col 49)",
            "(line 1237,col 5)-(line 1237,col 72)",
            "(line 1238,col 5)-(line 1238,col 28)",
            "(line 1240,col 5)-(line 1240,col 35)",
            "(line 1241,col 5)-(line 1241,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasExterns()",
        "snippet": "  public void testAliasExterns() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return window + window + window + window; }\";\n    String expected = \"var GLOBAL_window = window;\" +\n        \"function f() { return GLOBAL_window + GLOBAL_window + \" +\n        \"               GLOBAL_window + GLOBAL_window; }\";\n    testSame(options, code);\n\n    options.aliasExternals = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1244,
        "end_line": 1254,
        "comment": "",
        "child_ranges": [
            "(line 1245,col 5)-(line 1245,col 54)",
            "(line 1246,col 5)-(line 1246,col 79)",
            "(line 1247,col 5)-(line 1249,col 58)",
            "(line 1250,col 5)-(line 1250,col 28)",
            "(line 1252,col 5)-(line 1252,col 34)",
            "(line 1253,col 5)-(line 1253,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasKeywords()",
        "snippet": "  public void testAliasKeywords() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return true + true + true + true + true + true; }\";\n    String expected = \"var JSCompiler_alias_TRUE = true;\" +\n        \"function f() { return JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE; }\";\n    testSame(options, code);\n\n    options.aliasKeywords = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1256,
        "end_line": 1269,
        "comment": "",
        "child_ranges": [
            "(line 1257,col 5)-(line 1257,col 54)",
            "(line 1258,col 5)-(line 1259,col 75)",
            "(line 1260,col 5)-(line 1264,col 39)",
            "(line 1265,col 5)-(line 1265,col 28)",
            "(line 1267,col 5)-(line 1267,col 33)",
            "(line 1268,col 5)-(line 1268,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars1()",
        "snippet": "  public void testRenameVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"var abc = 3; function f() { var xyz = 5; return abc + xyz; }\";\n    String local = \"var abc = 3; function f() { var a = 5; return abc + a; }\";\n    String all = \"var a = 3; function c() { var b = 5; return a + b; }\";\n    testSame(options, code);\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    test(options, code, local);\n\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, all);\n\n    options.reserveRawExports = true;\n  }\n",
        "begin_line": 1271,
        "end_line": 1286,
        "comment": "",
        "child_ranges": [
            "(line 1272,col 5)-(line 1272,col 54)",
            "(line 1273,col 5)-(line 1274,col 71)",
            "(line 1275,col 5)-(line 1275,col 78)",
            "(line 1276,col 5)-(line 1276,col 72)",
            "(line 1277,col 5)-(line 1277,col 28)",
            "(line 1279,col 5)-(line 1279,col 60)",
            "(line 1280,col 5)-(line 1280,col 31)",
            "(line 1282,col 5)-(line 1282,col 58)",
            "(line 1283,col 5)-(line 1283,col 29)",
            "(line 1285,col 5)-(line 1285,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars2()",
        "snippet": "  public void testRenameVars2() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n\n    String code =     \"var abc = 3; function f() { window['a'] = 5; }\";\n    String noexport = \"var a = 3;   function b() { window['a'] = 5; }\";\n    String export =   \"var b = 3;   function c() { window['a'] = 5; }\";\n\n    options.reserveRawExports = false;\n    test(options, code, noexport);\n\n    options.reserveRawExports = true;\n    test(options, code, export);\n  }\n",
        "begin_line": 1288,
        "end_line": 1301,
        "comment": "",
        "child_ranges": [
            "(line 1289,col 5)-(line 1289,col 54)",
            "(line 1290,col 5)-(line 1290,col 58)",
            "(line 1292,col 5)-(line 1292,col 71)",
            "(line 1293,col 5)-(line 1293,col 71)",
            "(line 1294,col 5)-(line 1294,col 71)",
            "(line 1296,col 5)-(line 1296,col 38)",
            "(line 1297,col 5)-(line 1297,col 34)",
            "(line 1299,col 5)-(line 1299,col 37)",
            "(line 1300,col 5)-(line 1300,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testShadowVaribles()",
        "snippet": "  public void testShadowVaribles() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    options.shadowVariables = true;\n    String code =     \"var f = function(x) { return function(y) {}}\";\n    String expected = \"var f = function(a) { return function(a) {}}\";\n    test(options, code, expected);\n  }\n",
        "begin_line": 1303,
        "end_line": 1310,
        "comment": "",
        "child_ranges": [
            "(line 1304,col 5)-(line 1304,col 54)",
            "(line 1305,col 5)-(line 1305,col 60)",
            "(line 1306,col 5)-(line 1306,col 35)",
            "(line 1307,col 5)-(line 1307,col 69)",
            "(line 1308,col 5)-(line 1308,col 69)",
            "(line 1309,col 5)-(line 1309,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameLabels()",
        "snippet": "  public void testRenameLabels() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"longLabel: while (true) { break longLabel; }\";\n    String expected = \"a: while (true) { break a; }\";\n    testSame(options, code);\n\n    options.labelRenaming = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1312,
        "end_line": 1320,
        "comment": "",
        "child_ranges": [
            "(line 1313,col 5)-(line 1313,col 54)",
            "(line 1314,col 5)-(line 1314,col 65)",
            "(line 1315,col 5)-(line 1315,col 53)",
            "(line 1316,col 5)-(line 1316,col 28)",
            "(line 1318,col 5)-(line 1318,col 33)",
            "(line 1319,col 5)-(line 1319,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBadBreakStatementInIdeMode()",
        "snippet": "  public void testBadBreakStatementInIdeMode() {\n    // Ensure that type-checking doesn't crash, even if the CFG is malformed.\n    // This can happen in IDE mode.\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    options.checkTypes = true;\n    test(options,\n         \"function f() { try { } catch(e) { break; } }\",\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1322,
        "end_line": 1331,
        "comment": "",
        "child_ranges": [
            "(line 1325,col 5)-(line 1325,col 54)",
            "(line 1326,col 5)-(line 1326,col 27)",
            "(line 1327,col 5)-(line 1327,col 30)",
            "(line 1328,col 5)-(line 1330,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue63SourceMap()",
        "snippet": "  public void testIssue63SourceMap() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a;\";\n\n    options.skipAllPasses = true;\n    options.sourceMapOutputPath = \"./src.map\";\n\n    Compiler compiler = compile(options, code);\n    compiler.toSource();\n  }\n",
        "begin_line": 1333,
        "end_line": 1342,
        "comment": "",
        "child_ranges": [
            "(line 1334,col 5)-(line 1334,col 54)",
            "(line 1335,col 5)-(line 1335,col 27)",
            "(line 1337,col 5)-(line 1337,col 33)",
            "(line 1338,col 5)-(line 1338,col 46)",
            "(line 1340,col 5)-(line 1340,col 47)",
            "(line 1341,col 5)-(line 1341,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp1()",
        "snippet": "  public void testRegExp1() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String expected = \"\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1344,
        "end_line": 1357,
        "comment": "",
        "child_ranges": [
            "(line 1345,col 5)-(line 1345,col 54)",
            "(line 1346,col 5)-(line 1346,col 33)",
            "(line 1348,col 5)-(line 1348,col 39)",
            "(line 1350,col 5)-(line 1350,col 28)",
            "(line 1352,col 5)-(line 1352,col 46)",
            "(line 1354,col 5)-(line 1354,col 25)",
            "(line 1356,col 5)-(line 1356,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp2()",
        "snippet": "  public void testRegExp2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");var a = RegExp.$1\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, CheckRegExp.REGEXP_REFERENCE);\n\n    options.setWarningLevel(DiagnosticGroups.CHECK_REGEXP, CheckLevel.OFF);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1359,
        "end_line": 1375,
        "comment": "",
        "child_ranges": [
            "(line 1360,col 5)-(line 1360,col 54)",
            "(line 1362,col 5)-(line 1362,col 33)",
            "(line 1364,col 5)-(line 1364,col 56)",
            "(line 1366,col 5)-(line 1366,col 28)",
            "(line 1368,col 5)-(line 1368,col 46)",
            "(line 1370,col 5)-(line 1370,col 54)",
            "(line 1372,col 5)-(line 1372,col 75)",
            "(line 1374,col 5)-(line 1374,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals1()",
        "snippet": "  public void testFoldLocals1() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // An external object, whose constructor has no side-effects,\n    // and whose method \"go\" only modifies the object.\n    String code = \"new Widget().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1377,
        "end_line": 1391,
        "comment": "",
        "child_ranges": [
            "(line 1378,col 5)-(line 1378,col 54)",
            "(line 1380,col 5)-(line 1380,col 33)",
            "(line 1384,col 5)-(line 1384,col 39)",
            "(line 1386,col 5)-(line 1386,col 28)",
            "(line 1388,col 5)-(line 1388,col 46)",
            "(line 1390,col 5)-(line 1390,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals2()",
        "snippet": "  public void testFoldLocals2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n    options.checkTypes = true;\n\n    // An external function that returns a local object that the\n    // method \"go\" that only modifies the object.\n    String code = \"widgetToken().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"widgetToken()\");\n  }\n",
        "begin_line": 1393,
        "end_line": 1408,
        "comment": "",
        "child_ranges": [
            "(line 1394,col 5)-(line 1394,col 54)",
            "(line 1396,col 5)-(line 1396,col 33)",
            "(line 1397,col 5)-(line 1397,col 30)",
            "(line 1401,col 5)-(line 1401,col 40)",
            "(line 1403,col 5)-(line 1403,col 28)",
            "(line 1405,col 5)-(line 1405,col 46)",
            "(line 1407,col 5)-(line 1407,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals3()",
        "snippet": "  public void testFoldLocals3() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // A function \"f\" who returns a known local object, and a method that\n    // modifies only modifies that.\n    String definition = \"function f(){return new Widget()}\";\n    String call = \"f().go();\";\n    String code = definition + call;\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    // BROKEN\n    //test(options, code, definition);\n    testSame(options, code);\n  }\n",
        "begin_line": 1411,
        "end_line": 1429,
        "comment": "",
        "child_ranges": [
            "(line 1412,col 5)-(line 1412,col 54)",
            "(line 1414,col 5)-(line 1414,col 33)",
            "(line 1418,col 5)-(line 1418,col 60)",
            "(line 1419,col 5)-(line 1419,col 30)",
            "(line 1420,col 5)-(line 1420,col 36)",
            "(line 1422,col 5)-(line 1422,col 28)",
            "(line 1424,col 5)-(line 1424,col 46)",
            "(line 1428,col 5)-(line 1428,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals4()",
        "snippet": "  public void testFoldLocals4() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/** @constructor */\\n\"\n        + \"function InternalWidget(){this.x = 1;}\"\n        + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\"\n        + \"new InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){this.x = 1;}\"\n      + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1431,
        "end_line": 1450,
        "comment": "",
        "child_ranges": [
            "(line 1432,col 5)-(line 1432,col 54)",
            "(line 1434,col 5)-(line 1434,col 33)",
            "(line 1436,col 5)-(line 1439,col 47)",
            "(line 1441,col 5)-(line 1441,col 28)",
            "(line 1443,col 5)-(line 1443,col 46)",
            "(line 1445,col 5)-(line 1447,col 73)",
            "(line 1449,col 5)-(line 1449,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals5()",
        "snippet": "  public void testFoldLocals5() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){var a={};a.x={};return a}\"\n        + \"fn().x.y = 1;\";\n\n    // \"fn\" returns a unescaped local object, we should be able to fold it,\n    // but we don't currently.\n    String result = \"\"\n        + \"function fn(){var a={x:{}};return a}\"\n        + \"fn().x.y = 1;\";\n\n    test(options, code, result);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, result);\n  }\n",
        "begin_line": 1452,
        "end_line": 1472,
        "comment": "",
        "child_ranges": [
            "(line 1453,col 5)-(line 1453,col 54)",
            "(line 1455,col 5)-(line 1455,col 33)",
            "(line 1457,col 5)-(line 1459,col 26)",
            "(line 1463,col 5)-(line 1465,col 26)",
            "(line 1467,col 5)-(line 1467,col 32)",
            "(line 1469,col 5)-(line 1469,col 46)",
            "(line 1471,col 5)-(line 1471,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals6()",
        "snippet": "  public void testFoldLocals6() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){return {}}\"\n        + \"fn().x.y = 1;\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1474,
        "end_line": 1488,
        "comment": "",
        "child_ranges": [
            "(line 1475,col 5)-(line 1475,col 54)",
            "(line 1477,col 5)-(line 1477,col 33)",
            "(line 1479,col 5)-(line 1481,col 26)",
            "(line 1483,col 5)-(line 1483,col 28)",
            "(line 1485,col 5)-(line 1485,col 46)",
            "(line 1487,col 5)-(line 1487,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals7()",
        "snippet": "  public void testFoldLocals7() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function InternalWidget(){return [];}\"\n        + \"Array.prototype.internalGo = function (){this.x = 2};\"\n        + \"InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){return [];}\"\n      + \"Array.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1490,
        "end_line": 1509,
        "comment": "",
        "child_ranges": [
            "(line 1491,col 5)-(line 1491,col 54)",
            "(line 1493,col 5)-(line 1493,col 33)",
            "(line 1495,col 5)-(line 1498,col 43)",
            "(line 1500,col 5)-(line 1500,col 28)",
            "(line 1502,col 5)-(line 1502,col 46)",
            "(line 1504,col 5)-(line 1506,col 64)",
            "(line 1508,col 5)-(line 1508,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVarDeclarationsIntoFor()",
        "snippet": "  public void testVarDeclarationsIntoFor() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"var a = 1; for (var b = 2; ;) {}\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = false;\n\n    test(options, code, \"for (var a = 1, b = 2; ;) {}\");\n  }\n",
        "begin_line": 1511,
        "end_line": 1523,
        "comment": "",
        "child_ranges": [
            "(line 1512,col 5)-(line 1512,col 54)",
            "(line 1514,col 5)-(line 1514,col 49)",
            "(line 1516,col 5)-(line 1516,col 53)",
            "(line 1518,col 5)-(line 1518,col 28)",
            "(line 1520,col 5)-(line 1520,col 49)",
            "(line 1522,col 5)-(line 1522,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExploitAssigns()",
        "snippet": "  public void testExploitAssigns() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"a = 1; b = a; c = b\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = true;\n\n    test(options, code, \"c=b=a=1\");\n  }\n",
        "begin_line": 1525,
        "end_line": 1537,
        "comment": "",
        "child_ranges": [
            "(line 1526,col 5)-(line 1526,col 54)",
            "(line 1528,col 5)-(line 1528,col 49)",
            "(line 1530,col 5)-(line 1530,col 40)",
            "(line 1532,col 5)-(line 1532,col 28)",
            "(line 1534,col 5)-(line 1534,col 48)",
            "(line 1536,col 5)-(line 1536,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRecoverOnBadExterns()",
        "snippet": "  public void testRecoverOnBadExterns() throws Exception {\n    // This test is for a bug in a very narrow set of circumstances:\n    // 1) externs validation has to be off.\n    // 2) aliasExternals has to be on.\n    // 3) The user has to reference a \"normal\" variable in externs.\n    // This case is handled at checking time by injecting a\n    // synthetic extern variable, and adding a \"@suppress {duplicate}\" to\n    // the normal code at compile time. But optimizations may remove that\n    // annotation, so we need to make sure that the variable declarations\n    // are de-duped before that happens.\n    CompilerOptions options = createCompilerOptions();\n\n    options.aliasExternals = true;\n    externs = new JSSourceFile[] {\n      JSSourceFile.fromCode(\"externs\", \"extern.foo\")\n    };\n\n    test(options,\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n  }\n",
        "begin_line": 1539,
        "end_line": 1562,
        "comment": "",
        "child_ranges": [
            "(line 1549,col 5)-(line 1549,col 54)",
            "(line 1551,col 5)-(line 1551,col 34)",
            "(line 1552,col 5)-(line 1554,col 6)",
            "(line 1556,col 5)-(line 1561,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDuplicateVariablesInExterns()",
        "snippet": "  public void testDuplicateVariablesInExterns() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    externs = new JSSourceFile[] {\n      JSSourceFile.fromCode(\"externs\",\n          \"var externs = {}; /** @suppress {duplicate} */ var externs = {};\")\n    };\n    testSame(options, \"\");\n  }\n",
        "begin_line": 1564,
        "end_line": 1572,
        "comment": "",
        "child_ranges": [
            "(line 1565,col 5)-(line 1565,col 54)",
            "(line 1566,col 5)-(line 1566,col 32)",
            "(line 1567,col 5)-(line 1570,col 6)",
            "(line 1571,col 5)-(line 1571,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode()",
        "snippet": "  public void testLanguageMode() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n\n    String code = \"var a = {get f(){}}\";\n\n    Compiler compiler = compile(options, code);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\n        \"JSC_PARSE_ERROR. Parse error. \" +\n        \"getters are not supported in Internet Explorer \" +\n        \"at i0 line 1 : 0\",\n        compiler.getErrors()[0].toString());\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1574,
        "end_line": 1595,
        "comment": "",
        "child_ranges": [
            "(line 1575,col 5)-(line 1575,col 54)",
            "(line 1576,col 5)-(line 1576,col 52)",
            "(line 1578,col 5)-(line 1578,col 40)",
            "(line 1580,col 5)-(line 1580,col 47)",
            "(line 1581,col 5)-(line 1581,col 49)",
            "(line 1582,col 5)-(line 1586,col 44)",
            "(line 1588,col 5)-(line 1588,col 52)",
            "(line 1590,col 5)-(line 1590,col 28)",
            "(line 1592,col 5)-(line 1592,col 59)",
            "(line 1594,col 5)-(line 1594,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode2()",
        "snippet": "  public void testLanguageMode2() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.OFF);\n\n    String code = \"var a  = 2; delete a;\";\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    test(options,\n        code,\n        code,\n        StrictModeCheck.DELETE_VARIABLE);\n  }\n",
        "begin_line": 1597,
        "end_line": 1616,
        "comment": "",
        "child_ranges": [
            "(line 1598,col 5)-(line 1598,col 54)",
            "(line 1599,col 5)-(line 1599,col 52)",
            "(line 1600,col 5)-(line 1600,col 73)",
            "(line 1602,col 5)-(line 1602,col 42)",
            "(line 1604,col 5)-(line 1604,col 28)",
            "(line 1606,col 5)-(line 1606,col 52)",
            "(line 1608,col 5)-(line 1608,col 28)",
            "(line 1610,col 5)-(line 1610,col 59)",
            "(line 1612,col 5)-(line 1615,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue598()",
        "snippet": "  public void testIssue598() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    String code =\n        \"'use strict';\\n\" +\n        \"function App() {}\\n\" +\n        \"App.prototype = {\\n\" +\n        \"  get appData() { return this.appData_; },\\n\" +\n        \"  set appData(data) { this.appData_ = data; }\\n\" +\n        \"};\";\n\n    Compiler compiler = compile(options, code);\n    testSame(options, code);\n  }\n",
        "begin_line": 1618,
        "end_line": 1635,
        "comment": "",
        "child_ranges": [
            "(line 1619,col 5)-(line 1619,col 54)",
            "(line 1620,col 5)-(line 1620,col 59)",
            "(line 1621,col 5)-(line 1621,col 60)",
            "(line 1623,col 5)-(line 1623,col 52)",
            "(line 1625,col 5)-(line 1631,col 13)",
            "(line 1633,col 5)-(line 1633,col 47)",
            "(line 1634,col 5)-(line 1634,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoaleseVariables()",
        "snippet": "  public void testCoaleseVariables() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = false;\n    options.coalesceVariableNames = true;\n\n    String code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    String expected =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    a = a;\" +\n        \"    return a;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = false;\n\n    code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    expected =\n        \"function f(a) {\" +\n        \"  if (!a) {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = true;\n\n    expected =\n      \"function f(a) {\" +\n      \"  return a;\" +\n      \"}\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1637,
        "end_line": 1699,
        "comment": "",
        "child_ranges": [
            "(line 1638,col 5)-(line 1638,col 54)",
            "(line 1640,col 5)-(line 1640,col 34)",
            "(line 1641,col 5)-(line 1641,col 41)",
            "(line 1643,col 5)-(line 1652,col 12)",
            "(line 1653,col 5)-(line 1662,col 12)",
            "(line 1664,col 5)-(line 1664,col 34)",
            "(line 1666,col 5)-(line 1666,col 33)",
            "(line 1667,col 5)-(line 1667,col 42)",
            "(line 1669,col 5)-(line 1678,col 12)",
            "(line 1679,col 5)-(line 1686,col 12)",
            "(line 1688,col 5)-(line 1688,col 34)",
            "(line 1690,col 5)-(line 1690,col 33)",
            "(line 1691,col 5)-(line 1691,col 41)",
            "(line 1693,col 5)-(line 1696,col 10)",
            "(line 1698,col 5)-(line 1698,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateStatementFusion()",
        "snippet": "  public void testLateStatementFusion() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"while(a){a();if(b){b();b()}}\",\n        \"for(;a;)a(),b&&(b(),b())\");\n  }\n",
        "begin_line": 1701,
        "end_line": 1707,
        "comment": "",
        "child_ranges": [
            "(line 1702,col 5)-(line 1702,col 54)",
            "(line 1703,col 5)-(line 1703,col 33)",
            "(line 1704,col 5)-(line 1706,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateConstantReordering()",
        "snippet": "  public void testLateConstantReordering() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"if (x < 1 || x > 1 || 1 < x || 1 > x) { alert(x) }\",\n        \"   (1 > x || 1 < x || 1 < x || 1 > x) && alert(x) \");\n  }\n",
        "begin_line": 1709,
        "end_line": 1715,
        "comment": "",
        "child_ranges": [
            "(line 1710,col 5)-(line 1710,col 54)",
            "(line 1711,col 5)-(line 1711,col 33)",
            "(line 1712,col 5)-(line 1714,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testsyntheticBlockOnDeadAssignments()",
        "snippet": "  public void testsyntheticBlockOnDeadAssignments() {\n    CompilerOptions options = createCompilerOptions();\n    options.deadAssignmentElimination = true;\n    options.removeUnusedVars = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"var x; x = 1; START(); x = 1;END();x()\",\n                  \"var x; x = 1;{START();{x = 1}END()}x()\");\n  }\n",
        "begin_line": 1717,
        "end_line": 1725,
        "comment": "",
        "child_ranges": [
            "(line 1718,col 5)-(line 1718,col 54)",
            "(line 1719,col 5)-(line 1719,col 45)",
            "(line 1720,col 5)-(line 1720,col 36)",
            "(line 1721,col 5)-(line 1721,col 48)",
            "(line 1722,col 5)-(line 1722,col 44)",
            "(line 1723,col 5)-(line 1724,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug4152835()",
        "snippet": "  public void testBug4152835() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"START();END()\", \"{START();{}END()}\");\n  }\n",
        "begin_line": 1727,
        "end_line": 1733,
        "comment": "",
        "child_ranges": [
            "(line 1728,col 5)-(line 1728,col 54)",
            "(line 1729,col 5)-(line 1729,col 33)",
            "(line 1730,col 5)-(line 1730,col 48)",
            "(line 1731,col 5)-(line 1731,col 44)",
            "(line 1732,col 5)-(line 1732,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug5786871()",
        "snippet": "  public void testBug5786871() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    test(options, \"function () {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1735,
        "end_line": 1739,
        "comment": "",
        "child_ranges": [
            "(line 1736,col 5)-(line 1736,col 54)",
            "(line 1737,col 5)-(line 1737,col 27)",
            "(line 1738,col 5)-(line 1738,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue378()",
        "snippet": "  public void testIssue378() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    testSame(options, \"function f(c) {var f = c; arguments[0] = this;\" +\n                      \"    f.apply(this, arguments); return this;}\");\n  }\n",
        "begin_line": 1741,
        "end_line": 1747,
        "comment": "",
        "child_ranges": [
            "(line 1742,col 5)-(line 1742,col 54)",
            "(line 1743,col 5)-(line 1743,col 35)",
            "(line 1744,col 5)-(line 1744,col 48)",
            "(line 1745,col 5)-(line 1746,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue550()",
        "snippet": "  public void testIssue550() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    test(options,\n        \"function f(h) {\\n\" +\n        \"  var a = h;\\n\" +\n        \"  a = a + 'x';\\n\" +\n        \"  a = a + 'y';\\n\" +\n        \"  return a;\\n\" +\n        \"}\",\n        \"function f(a) {return a + 'xy'}\");\n  }\n",
        "begin_line": 1749,
        "end_line": 1764,
        "comment": "",
        "child_ranges": [
            "(line 1750,col 5)-(line 1750,col 54)",
            "(line 1751,col 5)-(line 1752,col 48)",
            "(line 1753,col 5)-(line 1753,col 33)",
            "(line 1754,col 5)-(line 1754,col 35)",
            "(line 1755,col 5)-(line 1755,col 48)",
            "(line 1756,col 5)-(line 1763,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue284()",
        "snippet": "  public void testIssue284() {\n    CompilerOptions options = createCompilerOptions();\n    options.smartNameRemoval = true;\n    test(options,\n        \"var goog = {};\" +\n        \"goog.inherits = function(x, y) {};\" +\n        \"var ns = {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.FooEvent = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.SelectEvent = function() {};\" +\n        \"goog.inherits(ns.PageSelectionModel.ChangeEvent,\" +\n        \"    ns.PageSelectionModel.FooEvent);\",\n        \"\");\n  }\n",
        "begin_line": 1766,
        "end_line": 1782,
        "comment": "",
        "child_ranges": [
            "(line 1767,col 5)-(line 1767,col 54)",
            "(line 1768,col 5)-(line 1768,col 36)",
            "(line 1769,col 5)-(line 1781,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCodingConvention()",
        "snippet": "  public void testCodingConvention() {\n    Compiler compiler = new Compiler();\n    compiler.initOptions(new CompilerOptions());\n    assertEquals(\n      compiler.getCodingConvention().getClass().toString(),\n      ClosureCodingConvention.class.toString());\n  }\n",
        "begin_line": 1784,
        "end_line": 1790,
        "comment": "",
        "child_ranges": [
            "(line 1785,col 5)-(line 1785,col 39)",
            "(line 1786,col 5)-(line 1786,col 48)",
            "(line 1787,col 5)-(line 1789,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testJQueryStringSplitLoops()",
        "snippet": "  public void testJQueryStringSplitLoops() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"var x='1,2,3,4,5,6,7'.split(',')\");\n\n    options = createCompilerOptions();\n    options.foldConstants = true;\n    options.computeFunctionSideEffects = false;\n    options.removeUnusedVars = true;\n\n    // If we do splits too early, it would add a sideeffect to x.\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"\");\n\n  }\n",
        "begin_line": 1792,
        "end_line": 1809,
        "comment": "",
        "child_ranges": [
            "(line 1793,col 5)-(line 1793,col 54)",
            "(line 1794,col 5)-(line 1794,col 33)",
            "(line 1795,col 5)-(line 1797,col 42)",
            "(line 1799,col 5)-(line 1799,col 38)",
            "(line 1800,col 5)-(line 1800,col 33)",
            "(line 1801,col 5)-(line 1801,col 47)",
            "(line 1802,col 5)-(line 1802,col 36)",
            "(line 1805,col 5)-(line 1807,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAlwaysRunSafetyCheck()",
        "snippet": "  public void testAlwaysRunSafetyCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = false;\n    options.customPasses = ArrayListMultimap.create();\n    options.customPasses.put(\n        CustomPassExecutionTime.BEFORE_OPTIMIZATIONS,\n        new CompilerPass() {\n          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n        });\n    try {\n      test(options,\n           \"var x = 3; function f() { return x + z; }\",\n           \"function f() { return x + z; }\");\n      fail(\"Expected runtime exception\");\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().indexOf(\"Unexpected variable x\") != -1);\n    }\n  }\n",
        "begin_line": 1811,
        "end_line": 1832,
        "comment": "",
        "child_ranges": [
            "(line 1812,col 5)-(line 1812,col 54)",
            "(line 1813,col 5)-(line 1813,col 33)",
            "(line 1814,col 5)-(line 1814,col 54)",
            "(line 1815,col 5)-(line 1823,col 11)",
            "(line 1824,col 5)-(line 1831,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.Anonymous-aacea4cf-3d6d-4bbb-b2a9-09a113cc48cf.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n",
        "begin_line": 1818,
        "end_line": 1822,
        "comment": "",
        "child_ranges": [
            "(line 1819,col 13)-(line 1819,col 59)",
            "(line 1820,col 13)-(line 1820,col 51)",
            "(line 1821,col 13)-(line 1821,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressEs5StrictWarning()",
        "snippet": "  public void testSuppressEs5StrictWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.WARNING);\n    testSame(options,\n        \"/** @suppress{es5Strict} */\\n\" +\n        \"function f() { var arguments; }\");\n  }\n",
        "begin_line": 1834,
        "end_line": 1840,
        "comment": "",
        "child_ranges": [
            "(line 1835,col 5)-(line 1835,col 54)",
            "(line 1836,col 5)-(line 1836,col 77)",
            "(line 1837,col 5)-(line 1839,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesWarning()",
        "snippet": "  public void testCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    test(options,\n        \"/** @constructor */\\n\" +\n        \"function f() { var arguments; }\",\n        DiagnosticType.warning(\"JSC_MISSING_PROVIDE\", \"missing goog.provide(''{0}'')\"));\n  }\n",
        "begin_line": 1842,
        "end_line": 1850,
        "comment": "",
        "child_ranges": [
            "(line 1843,col 5)-(line 1843,col 54)",
            "(line 1844,col 5)-(line 1844,col 81)",
            "(line 1845,col 5)-(line 1845,col 49)",
            "(line 1846,col 5)-(line 1849,col 88)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressCheckProvidesWarning()",
        "snippet": "  public void testSuppressCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    testSame(options,\n        \"/** @constructor\\n\" +\n        \" *  @suppress{checkProvides} */\\n\" +\n        \"function f() { var arguments; }\");\n  }\n",
        "begin_line": 1852,
        "end_line": 1860,
        "comment": "",
        "child_ranges": [
            "(line 1853,col 5)-(line 1853,col 54)",
            "(line 1854,col 5)-(line 1854,col 81)",
            "(line 1855,col 5)-(line 1855,col 49)",
            "(line 1856,col 5)-(line 1859,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespace()",
        "snippet": "  public void testRenamePrefixNamespace() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.x$FOO = 5; _.x$bar = 3;\");\n  }\n",
        "begin_line": 1862,
        "end_line": 1872,
        "comment": "",
        "child_ranges": [
            "(line 1863,col 5)-(line 1864,col 44)",
            "(line 1866,col 5)-(line 1866,col 54)",
            "(line 1867,col 5)-(line 1867,col 28)",
            "(line 1869,col 5)-(line 1869,col 38)",
            "(line 1870,col 5)-(line 1870,col 40)",
            "(line 1871,col 5)-(line 1871,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespaceActivatesMoveFunctionDeclarations()",
        "snippet": "  public void testRenamePrefixNamespaceActivatesMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f; function f() { return 3; }\";\n    testSame(options, code);\n    assertFalse(options.moveFunctionDeclarations);\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.f = function() { return 3; }; _.x = _.f;\");\n  }\n",
        "begin_line": 1874,
        "end_line": 1881,
        "comment": "",
        "child_ranges": [
            "(line 1875,col 5)-(line 1875,col 54)",
            "(line 1876,col 5)-(line 1876,col 58)",
            "(line 1877,col 5)-(line 1877,col 28)",
            "(line 1878,col 5)-(line 1878,col 50)",
            "(line 1879,col 5)-(line 1879,col 40)",
            "(line 1880,col 5)-(line 1880,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBrokenNameSpace()",
        "snippet": "  public void testBrokenNameSpace() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var goog; goog.provide('i.am.on.a.Horse');\" +\n                  \"i.am.on.a.Horse = function() {};\" +\n                  \"i.am.on.a.Horse.prototype.x = function() {};\" +\n                  \"i.am.on.a.Boat.prototype.y = function() {}\";\n    options.closurePass = true;\n    options.collapseProperties = true;\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1883,
        "end_line": 1893,
        "comment": "",
        "child_ranges": [
            "(line 1884,col 5)-(line 1884,col 54)",
            "(line 1885,col 5)-(line 1888,col 63)",
            "(line 1889,col 5)-(line 1889,col 31)",
            "(line 1890,col 5)-(line 1890,col 38)",
            "(line 1891,col 5)-(line 1891,col 36)",
            "(line 1892,col 5)-(line 1892,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNamelessParameter()",
        "snippet": "  public void testNamelessParameter() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    String code =\n        \"var impl_0;\" +\n        \"$load($init());\" +\n        \"function $load(){\" +\n        \"  window['f'] = impl_0;\" +\n        \"}\" +\n        \"function $init() {\" +\n        \"  impl_0 = {};\" +\n        \"}\";\n    String result =\n        \"window.f = {};\";\n    test(options, code, result);\n  }\n",
        "begin_line": 1895,
        "end_line": 1911,
        "comment": "",
        "child_ranges": [
            "(line 1896,col 5)-(line 1896,col 54)",
            "(line 1897,col 5)-(line 1898,col 48)",
            "(line 1899,col 5)-(line 1907,col 12)",
            "(line 1908,col 5)-(line 1909,col 25)",
            "(line 1910,col 5)-(line 1910,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testHiddenSideEffect()",
        "snippet": "  public void testHiddenSideEffect() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.setAliasExternals(true);\n    String code =\n        \"window.offsetWidth;\";\n    String result =\n        \"window.offsetWidth;\";\n    test(options, code, result);\n  }\n",
        "begin_line": 1913,
        "end_line": 1923,
        "comment": "",
        "child_ranges": [
            "(line 1914,col 5)-(line 1914,col 54)",
            "(line 1915,col 5)-(line 1916,col 48)",
            "(line 1917,col 5)-(line 1917,col 36)",
            "(line 1918,col 5)-(line 1919,col 30)",
            "(line 1920,col 5)-(line 1921,col 30)",
            "(line 1922,col 5)-(line 1922,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNegativeZero()",
        "snippet": "  public void testNegativeZero() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function bar(x) { return x; }\\n\" +\n        \"function foo(x) { print(x / bar(0));\\n\" +\n        \"                 print(x / bar(-0)); }\\n\" +\n        \"foo(3);\",\n        \"print(3/0);print(3/-0);\");\n  }\n",
        "begin_line": 1925,
        "end_line": 1935,
        "comment": "",
        "child_ranges": [
            "(line 1926,col 5)-(line 1926,col 54)",
            "(line 1927,col 5)-(line 1928,col 48)",
            "(line 1929,col 5)-(line 1934,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  private void testSame(CompilerOptions options, String original) {\n    testSame(options, new String[] { original });\n  }\n",
        "begin_line": 1937,
        "end_line": 1939,
        "comment": "",
        "child_ranges": [
            "(line 1938,col 5)-(line 1938,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  private void testSame(CompilerOptions options, String[] original) {\n    test(options, original, original);\n  }\n",
        "begin_line": 1941,
        "end_line": 1943,
        "comment": "",
        "child_ranges": [
            "(line 1942,col 5)-(line 1942,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String)",
        "snippet": "  private void test(CompilerOptions options,\n      String original, String compiled) {\n    test(options, new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 1949,
        "end_line": 1952,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 1951,col 5)-(line 1951,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, String[] compiled) {\n    Compiler compiler = compile(options, original);\n    assertEquals(\"Expected no warnings or errors\\n\" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        0, compiler.getErrors().length + compiler.getWarnings().length);\n\n    Node root = compiler.getRoot().getLastChild();\n    Node expectedRoot = parse(compiled, options);\n    String explanation = expectedRoot.checkTreeEquals(root);\n    assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n        \"\\nResult: \" + compiler.toSource(root) +\n        \"\\n\" + explanation, explanation);\n  }\n",
        "begin_line": 1958,
        "end_line": 1972,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 1960,col 5)-(line 1960,col 51)",
            "(line 1961,col 5)-(line 1964,col 72)",
            "(line 1966,col 5)-(line 1966,col 50)",
            "(line 1967,col 5)-(line 1967,col 49)",
            "(line 1968,col 5)-(line 1968,col 60)",
            "(line 1969,col 5)-(line 1971,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String original, DiagnosticType warning) {\n    test(options, new String[] { original }, warning);\n  }\n",
        "begin_line": 1978,
        "end_line": 1981,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 1980,col 5)-(line 1980,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String original, String compiled, DiagnosticType warning) {\n    test(options, new String[] { original }, new String[] { compiled },\n         warning);\n  }\n",
        "begin_line": 1983,
        "end_line": 1987,
        "comment": "",
        "child_ranges": [
            "(line 1985,col 5)-(line 1986,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, DiagnosticType warning) {\n    test(options, original, null, warning);\n  }\n",
        "begin_line": 1989,
        "end_line": 1992,
        "comment": "",
        "child_ranges": [
            "(line 1991,col 5)-(line 1991,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType warning) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\"Expected exactly one warning or error\",\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n    if (compiler.getErrors().length > 0) {\n      assertEquals(warning, compiler.getErrors()[0].getType());\n    } else {\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 1998,
        "end_line": 2018,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 2000,col 5)-(line 2000,col 51)",
            "(line 2001,col 5)-(line 2001,col 49)",
            "(line 2002,col 5)-(line 2003,col 72)",
            "(line 2004,col 5)-(line 2008,col 5)",
            "(line 2010,col 5)-(line 2017,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.checkUnexpectedErrorsOrWarnings(com.google.javascript.jscomp.Compiler, int)",
        "snippet": "  private void checkUnexpectedErrorsOrWarnings(\n      Compiler compiler, int expected) {\n    int actual = compiler.getErrors().length + compiler.getWarnings().length;\n    if (actual != expected) {\n      String msg = \"\";\n      for (JSError err : compiler.getErrors()) {\n        msg += \"Error:\" + err.toString() + \"\\n\";\n      }\n      for (JSError err : compiler.getWarnings()) {\n        msg += \"Warning:\" + err.toString() + \"\\n\";\n      }\n      assertEquals(\"Unexpected warnings or errors.\\n \"+ msg,\n        expected, actual);\n    }\n  }\n",
        "begin_line": 2020,
        "end_line": 2034,
        "comment": "",
        "child_ranges": [
            "(line 2022,col 5)-(line 2022,col 77)",
            "(line 2023,col 5)-(line 2033,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  private Compiler compile(CompilerOptions options, String original) {\n    return compile(options, new String[] { original });\n  }\n",
        "begin_line": 2036,
        "end_line": 2038,
        "comment": "",
        "child_ranges": [
            "(line 2037,col 5)-(line 2037,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  private Compiler compile(CompilerOptions options, String[] original) {\n    Compiler compiler = lastCompiler = new Compiler();\n    JSSourceFile[] inputs = new JSSourceFile[original.length];\n    for (int i = 0; i < original.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, original[i]);\n    }\n    compiler.compile(\n        externs, CompilerTestCase.createModuleChain(original), options);\n    return compiler;\n  }\n",
        "begin_line": 2040,
        "end_line": 2049,
        "comment": "",
        "child_ranges": [
            "(line 2041,col 5)-(line 2041,col 54)",
            "(line 2042,col 5)-(line 2042,col 62)",
            "(line 2043,col 5)-(line 2045,col 5)",
            "(line 2046,col 5)-(line 2047,col 72)",
            "(line 2048,col 5)-(line 2048,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.parse(java.lang.String[], com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  private Node parse(String[] original, CompilerOptions options) {\n    Compiler compiler = new Compiler();\n    JSSourceFile[] inputs = new JSSourceFile[original.length];\n    for (int i = 0; i < inputs.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, original[i]);\n    }\n    compiler.init(externs, inputs, options);\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node all = compiler.parseInputs();\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node n = all.getLastChild();\n    Node externs = all.getFirstChild();\n\n    (new CreateSyntheticBlocks(\n        compiler, \"synStart\", \"synEnd\")).process(externs, n);\n    (new Normalize(compiler, false)).process(externs, n);\n    (MakeDeclaredNamesUnique.getContextualRenameInverter(compiler)).process(\n        externs, n);\n    (new Denormalize(compiler)).process(externs, n);\n    return n;\n  }\n",
        "begin_line": 2051,
        "end_line": 2071,
        "comment": "",
        "child_ranges": [
            "(line 2052,col 5)-(line 2052,col 39)",
            "(line 2053,col 5)-(line 2053,col 62)",
            "(line 2054,col 5)-(line 2056,col 5)",
            "(line 2057,col 5)-(line 2057,col 44)",
            "(line 2058,col 5)-(line 2058,col 49)",
            "(line 2059,col 5)-(line 2059,col 38)",
            "(line 2060,col 5)-(line 2060,col 49)",
            "(line 2061,col 5)-(line 2061,col 32)",
            "(line 2062,col 5)-(line 2062,col 39)",
            "(line 2064,col 5)-(line 2065,col 61)",
            "(line 2066,col 5)-(line 2066,col 57)",
            "(line 2067,col 5)-(line 2068,col 20)",
            "(line 2069,col 5)-(line 2069,col 52)",
            "(line 2070,col 5)-(line 2070,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.createCompilerOptions()",
        "snippet": "  private CompilerOptions createCompilerOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new GoogleCodingConvention());\n    return options;\n  }\n",
        "begin_line": 2074,
        "end_line": 2078,
        "comment": " Creates a CompilerOptions object with google coding conventions. ",
        "child_ranges": [
            "(line 2075,col 5)-(line 2075,col 52)",
            "(line 2076,col 5)-(line 2076,col 62)",
            "(line 2077,col 5)-(line 2077,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.NameAnalyzerTest()",
        "snippet": "  public NameAnalyzerTest() {\n    super(kExterns);\n  }\n",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 5)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() {\n    super.enableNormalize();\n    super.enableLineNumberCheck(true);\n  }\n",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 28)",
            "(line 41,col 5)-(line 41,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // pass reaches steady state after 1 iteration.\n    return 1;\n  }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclartion1()",
        "snippet": "  public void testRemoveVarDeclartion1() {\n    test(\"var foo = 3;\", \"\");\n  }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclartion2()",
        "snippet": "  public void testRemoveVarDeclartion2() {\n    test(\"var foo = 3, bar = 4; externfoo = foo;\",\n         \"var foo = 3; externfoo = foo;\");\n  }\n",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 56,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclartion3()",
        "snippet": "  public void testRemoveVarDeclartion3() {\n    test(\"var a = f(), b = 1, c = 2; b; c\", \"f();var b = 1, c = 2; b; c\");\n  }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclartion4()",
        "snippet": "  public void testRemoveVarDeclartion4() {\n    test(\"var a = 0, b = f(), c = 2; a; c\", \"var a = 0;f();var c = 2; a; c\");\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclartion5()",
        "snippet": "  public void testRemoveVarDeclartion5() {\n    test(\"var a = 0, b = 1, c = f(); a; b\", \"var a = 0, b = 1; f(); a; b\");\n  }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclartion6()",
        "snippet": "  public void testRemoveVarDeclartion6() {\n    test(\"var a = 0, b = a = 1; a\", \"var a = 0; a = 1; a\");\n  }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclartion7()",
        "snippet": "  public void testRemoveVarDeclartion7() {\n    test(\"var a = 0, b = a = 1\", \"\");\n  }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclartion8()",
        "snippet": "  public void testRemoveVarDeclartion8() {\n    test(\"var a;var b = 0, c = a = b = 1\", \"\");\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveFunction()",
        "snippet": "  public void testRemoveFunction() {\n    test(\"var foo = {}; foo.bar = function() {};\", \"\");\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testReferredToByWindow()",
        "snippet": "  public void testReferredToByWindow() {\n    testSame(\"var foo = {}; foo.bar = function() {}; window['fooz'] = foo.bar\");\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExtern()",
        "snippet": "  public void testExtern() {\n    testSame(\"externfoo = 5\");\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveNamedFunction()",
        "snippet": "  public void testRemoveNamedFunction() {\n    test(\"function foo(){}\", \"\");\n  }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 96,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction1()",
        "snippet": "  public void testRemoveRecursiveFunction1() {\n    test(\"function f(){f()}\", \"\");\n  }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 100,col 5)-(line 100,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction2()",
        "snippet": "  public void testRemoveRecursiveFunction2() {\n    test(\"var f = function (){f()}\", \"\");\n  }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 5)-(line 104,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction3()",
        "snippet": "  public void testRemoveRecursiveFunction3() {\n    test(\"var f;f = function (){f()}\", \"\");\n  }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction4()",
        "snippet": "  public void testRemoveRecursiveFunction4() {\n    // TODO(user) bug?  not removed if name definition doesn't exist.\n    testSame(\"f = function (){f()}\");\n  }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 113,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction5()",
        "snippet": "  public void testRemoveRecursiveFunction5() {\n    test(\"function g(){f()}function f(){g()}\", \"\");\n  }\n",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 117,col 5)-(line 117,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction6()",
        "snippet": "  public void testRemoveRecursiveFunction6() {\n    test(\"var f=function(){g()};function g(){f()}\", \"\");\n  }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction7()",
        "snippet": "  public void testRemoveRecursiveFunction7() {\n    test(\"var g = function(){f()};var f = function(){g()}\", \"\");\n  }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 125,col 5)-(line 125,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction8()",
        "snippet": "  public void testRemoveRecursiveFunction8() {\n    test(\"var o = {};o.f = function(){o.f()}\", \"\");\n  }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 129,col 5)-(line 129,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction9()",
        "snippet": "  public void testRemoveRecursiveFunction9() {\n    testSame(\"var o = {};o.f = function(){o.f()};o.f()\");\n  }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 133,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification1()",
        "snippet": "  public void testSideEffectClassification1() {\n    test(\"foo();\", \"foo();\");\n  }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 137,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification2()",
        "snippet": "  public void testSideEffectClassification2() {\n    test(\"var a = foo();\", \"foo();\");\n  }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 141,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification3()",
        "snippet": "  public void testSideEffectClassification3() {\n    testSame(\"var a = foo();window['b']=a;\");\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification4()",
        "snippet": "  public void testSideEffectClassification4() {\n    testSame(\"function sef(){} sef();\");\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification5()",
        "snippet": "  public void testSideEffectClassification5() {\n    testSame(\"function nsef(){} var a = nsef();window['b']=a;\");\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification6()",
        "snippet": "  public void testSideEffectClassification6() {\n    test(\"function sef(){} sef();\", \"function sef(){} sef();\");\n  }\n",
        "begin_line": 156,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification7()",
        "snippet": "  public void testSideEffectClassification7() {\n    testSame(\"function sef(){} var a = sef();window['b']=a;\");\n  }\n",
        "begin_line": 160,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 161,col 5)-(line 161,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation1()",
        "snippet": "  public void testNoSideEffectAnnotation1() {\n    test(\"function f(){} var a = f();\",\n         \"function f(){} f()\");\n  }\n",
        "begin_line": 164,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 166,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation2()",
        "snippet": "  public void testNoSideEffectAnnotation2() {\n    test(\"/**@nosideeffects*/function f(){}\", \"var a = f();\",\n         \"\", null, null);\n  }\n",
        "begin_line": 169,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 170,col 5)-(line 171,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation3()",
        "snippet": "  public void testNoSideEffectAnnotation3() {\n    test(\"var f = function(){}; var a = f();\",\n         \"var f = function(){}; f();\");\n  }\n",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 176,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation4()",
        "snippet": "  public void testNoSideEffectAnnotation4() {\n    test(\"var f = /**@nosideeffects*/function(){};\", \"var a = f();\",\n         \"\", null, null);\n  }\n",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 181,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation5()",
        "snippet": "  public void testNoSideEffectAnnotation5() {\n    test(\"var f; f = function(){}; var a = f();\",\n         \"var f; f = function(){}; f();\");\n  }\n",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 186,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation6()",
        "snippet": "  public void testNoSideEffectAnnotation6() {\n    test(\"var f; f = /**@nosideeffects*/function(){};\", \"var a = f();\",\n         \"\", null, null);\n  }\n",
        "begin_line": 189,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 191,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation7()",
        "snippet": "  public void testNoSideEffectAnnotation7() {\n    test(\"var f;\" +\n         \"f = /**@nosideeffects*/function(){};\",\n         \"f = function(){};\" +\n         \"var a = f();\",\n         \"f = function(){}; f();\", null, null);\n  }\n",
        "begin_line": 194,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 199,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation8()",
        "snippet": "  public void testNoSideEffectAnnotation8() {\n    test(\"var f;\" +\n         \"f = function(){};\" +\n         \"f = /**@nosideeffects*/function(){};\",\n         \"var a = f();\",\n         \"f();\", null, null);\n  }\n",
        "begin_line": 202,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 207,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation9()",
        "snippet": "  public void testNoSideEffectAnnotation9() {\n    test(\"var f;\" +\n         \"f = /**@nosideeffects*/function(){};\" +\n         \"f = /**@nosideeffects*/function(){};\",\n         \"var a = f();\",\n         \"\", null, null);\n\n    test(\"var f; f = /**@nosideeffects*/function(){};\", \"var a = f();\",\n         \"\", null, null);\n  }\n",
        "begin_line": 210,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 215,col 25)",
            "(line 217,col 5)-(line 218,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation10()",
        "snippet": "  public void testNoSideEffectAnnotation10() {\n    test(\"var o = {}; o.f = function(){}; var a = o.f();\",\n         \"var o = {}; o.f = function(){}; o.f();\");\n  }\n",
        "begin_line": 221,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 223,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation11()",
        "snippet": "  public void testNoSideEffectAnnotation11() {\n    test(\"var o = {}; o.f = /**@nosideeffects*/function(){};\",\n         \"var a = o.f();\", \"\", null, null);\n  }\n",
        "begin_line": 226,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 227,col 5)-(line 228,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation12()",
        "snippet": "  public void testNoSideEffectAnnotation12() {\n    test(\"function c(){} var a = new c\",\n         \"function c(){} new c\");\n  }\n",
        "begin_line": 231,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 232,col 5)-(line 233,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation13()",
        "snippet": "  public void testNoSideEffectAnnotation13() {\n    test(\"/**@nosideeffects*/function c(){}\", \"var a = new c\",\n         \"\", null, null);\n  }\n",
        "begin_line": 236,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 237,col 5)-(line 238,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation14()",
        "snippet": "  public void testNoSideEffectAnnotation14() {\n    String common = \"function c(){};\" +\n        \"c.prototype.f = /**@nosideeffects*/function(){};\";\n    test(common, \"var o = new c; var a = o.f()\", \"new c\", null, null);\n  }\n",
        "begin_line": 241,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 242,col 5)-(line 243,col 59)",
            "(line 244,col 5)-(line 244,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation15()",
        "snippet": "  public void testNoSideEffectAnnotation15() {\n    test(\"function c(){}; c.prototype.f = function(){}; var a = (new c).f()\",\n         \"function c(){}; c.prototype.f = function(){}; (new c).f()\");\n  }\n",
        "begin_line": 247,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 249,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation16()",
        "snippet": "  public void testNoSideEffectAnnotation16() {\n    test(\"/**@nosideeffects*/function c(){}\" +\n         \"c.prototype.f = /**@nosideeffects*/function(){};\",\n         \"var a = (new c).f()\",\n         \"\",\n         null, null);\n  }\n",
        "begin_line": 252,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 253,col 5)-(line 257,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testFunctionPrototype()",
        "snippet": "  public void testFunctionPrototype() {\n    testSame(\"var a = 5; Function.prototype.foo = function() {return a;}\");\n  }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass1()",
        "snippet": "  public void testTopLevelClass1() {\n    test(\"var Point = function() {}; Point.prototype.foo = function() {}\", \"\");\n  }\n",
        "begin_line": 264,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 265,col 5)-(line 265,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass2()",
        "snippet": "  public void testTopLevelClass2() {\n    testSame(\"var Point = {}; Point.prototype.foo = function() {};\" +\n             \"externfoo = new Point()\");\n  }\n",
        "begin_line": 268,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 270,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass3()",
        "snippet": "  public void testTopLevelClass3() {\n    test(\"function Point() {this.me_ = Point}\", \"\");\n  }\n",
        "begin_line": 273,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 274,col 5)-(line 274,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass4()",
        "snippet": "  public void testTopLevelClass4() {\n    test(\"function f(){} function A(){} A.prototype = {x: function() {}}; f();\",\n         \"function f(){} f();\");\n  }\n",
        "begin_line": 277,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 279,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass5()",
        "snippet": "  public void testTopLevelClass5() {\n    testSame(\"function f(){} function A(){}\" +\n             \"A.prototype = {x: function() { f(); }}; new A();\");\n  }\n",
        "begin_line": 282,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 283,col 5)-(line 284,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass6()",
        "snippet": "  public void testTopLevelClass6() {\n    testSame(\"function f(){} function A(){}\" +\n             \"A.prototype = {x: function() { f(); }}; new A().x();\");\n  }\n",
        "begin_line": 287,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 288,col 5)-(line 289,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass7()",
        "snippet": "  public void testTopLevelClass7() {\n    test(\"A.prototype.foo = function(){}; function A() {}\", \"\");\n  }\n",
        "begin_line": 292,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 293,col 5)-(line 293,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNamespacedClass1()",
        "snippet": "  public void testNamespacedClass1() {\n    test(\"var foo = {};foo.bar = {};foo.bar.prototype.baz = {}\", \"\");\n  }\n",
        "begin_line": 296,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 297,col 5)-(line 297,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNamespacedClass2()",
        "snippet": "  public void testNamespacedClass2() {\n    testSame(\"var foo = {};foo.bar = {};foo.bar.prototype.baz = {};\" +\n             \"window.z = new foo.bar()\");\n  }\n",
        "begin_line": 300,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 301,col 5)-(line 302,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNamespacedClass3()",
        "snippet": "  public void testNamespacedClass3() {\n    test(\"var a = {}; a.b = function() {}; a.b.prototype = {x: function() {}};\",\n         \"\");\n  }\n",
        "begin_line": 305,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 306,col 5)-(line 307,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNamespacedClass4()",
        "snippet": "  public void testNamespacedClass4() {\n    testSame(\"function f(){} var a = {}; a.b = function() {};\" +\n             \"a.b.prototype = {x: function() { f(); }}; new a.b();\");\n  }\n",
        "begin_line": 310,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 311,col 5)-(line 312,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNamespacedClass5()",
        "snippet": "  public void testNamespacedClass5() {\n    testSame(\"function f(){} var a = {}; a.b = function() {};\" +\n             \"a.b.prototype = {x: function() { f(); }}; new a.b().x();\");\n  }\n",
        "begin_line": 315,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 316,col 5)-(line 317,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentToThisPrototype()",
        "snippet": "  public void testAssignmentToThisPrototype() {\n    testSame(\"Function.prototype.inherits = function(parentCtor) {\" +\n             \"  function tempCtor() {};\" +\n             \"  tempCtor.prototype = parentCtor.prototype;\" +\n             \"  this.superClass_ = parentCtor.prototype;\" +\n             \"  this.prototype = new tempCtor();\" +\n             \"  this.prototype.constructor = this;\" +\n             \"};\");\n  }\n",
        "begin_line": 320,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 321,col 5)-(line 327,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentToCallResultPrototype()",
        "snippet": "  public void testAssignmentToCallResultPrototype() {\n    testSame(\"function f() { return function(){}; } f().prototype = {};\");\n  }\n",
        "begin_line": 330,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 331,col 5)-(line 331,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentToExternPrototype()",
        "snippet": "  public void testAssignmentToExternPrototype() {\n    testSame(\"externfoo.prototype = {};\");\n  }\n",
        "begin_line": 334,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentToUnknownPrototype()",
        "snippet": "  public void testAssignmentToUnknownPrototype() {\n    testSame(\n        \"/** @suppress {duplicate} */ var window;\" +\n        \"window['a'].prototype = {};\");\n  }\n",
        "begin_line": 338,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 339,col 5)-(line 341,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testBug2099540()",
        "snippet": "  public void testBug2099540() {\n    testSame(\n        \"/** @suppress {duplicate} */ var document;\\n\" +\n        \"/** @suppress {duplicate} */ var window;\\n\" +\n        \"var klass;\\n\" +\n        \"window[klass].prototype = \" +\n            \"document.createElement(tagName)['__proto__'];\");\n  }\n",
        "begin_line": 344,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 345,col 5)-(line 350,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testOtherGlobal()",
        "snippet": "  public void testOtherGlobal() {\n    testSame(\"goog.global.foo = bar(); function bar(){}\");\n  }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 354,col 5)-(line 354,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExternName1()",
        "snippet": "  public void testExternName1() {\n    testSame(\"top.z = bar(); function bar(){}\");\n  }\n",
        "begin_line": 357,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExternName2()",
        "snippet": "  public void testExternName2() {\n    testSame(\"top['z'] = bar(); function bar(){}\");\n  }\n",
        "begin_line": 361,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 362,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits1()",
        "snippet": "  public void testInherits1() {\n    test(\"var a = {}; var b = {}; b.inherits(a)\", \"\");\n  }\n",
        "begin_line": 365,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 366,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits2()",
        "snippet": "  public void testInherits2() {\n    test(\"var a = {}; var b = {}; var goog = {}; goog.inherits(b, a)\", \"\");\n  }\n",
        "begin_line": 369,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 370,col 5)-(line 370,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits3()",
        "snippet": "  public void testInherits3() {\n    testSame(\"var a = {}; this.b = {}; b.inherits(a);\");\n  }\n",
        "begin_line": 373,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 374,col 5)-(line 374,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits4()",
        "snippet": "  public void testInherits4() {\n    testSame(\"var a = {}; this.b = {}; var goog = {}; goog.inherits(b, a);\");\n  }\n",
        "begin_line": 377,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 378,col 5)-(line 378,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits5()",
        "snippet": "  public void testInherits5() {\n    test(\"this.a = {}; var b = {}; b.inherits(a);\",\n         \"this.a = {}\");\n  }\n",
        "begin_line": 381,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 382,col 5)-(line 383,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits6()",
        "snippet": "  public void testInherits6() {\n    test(\"this.a = {}; var b = {}; var goog = {}; goog.inherits(b, a);\",\n         \"this.a = {}\");\n  }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 387,col 5)-(line 388,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits7()",
        "snippet": "  public void testInherits7() {\n    testSame(\"var a = {}; this.b = {}; var goog = {};\" +\n        \" goog.inherits = function() {}; goog.inherits(b, a);\");\n  }\n",
        "begin_line": 391,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 392,col 5)-(line 393,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits8()",
        "snippet": "  public void testInherits8() {\n    // Make sure that exceptions aren't thrown if inherits() is used as\n    // an R-value\n    test(\"this.a = {}; var b = {}; var c = b.inherits(a);\", \"this.a = {};\");\n  }\n",
        "begin_line": 396,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 399,col 5)-(line 399,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin1()",
        "snippet": "  public void testMixin1() {\n    testSame(\"var goog = {}; goog.mixin = function() {};\" +\n             \"Function.prototype.mixin = function(base) {\" +\n             \"  goog.mixin(this.prototype, base); \" +\n             \"};\");\n  }\n",
        "begin_line": 402,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 403,col 5)-(line 406,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin2()",
        "snippet": "  public void testMixin2() {\n    testSame(\"var a = {}; this.b = {}; var goog = {};\" +\n        \" goog.mixin = function() {}; goog.mixin(b.prototype, a.prototype);\");\n  }\n",
        "begin_line": 409,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 410,col 5)-(line 411,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin3()",
        "snippet": "  public void testMixin3() {\n    test(\"this.a = {}; var b = {}; var goog = {};\" +\n         \" goog.mixin = function() {}; goog.mixin(b.prototype, a.prototype);\",\n         \"this.a = {};\");\n  }\n",
        "begin_line": 414,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 415,col 5)-(line 417,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin4()",
        "snippet": "  public void testMixin4() {\n    testSame(\"this.a = {}; var b = {}; var goog = {};\" +\n             \"goog.mixin = function() {};\" +\n             \"goog.mixin(b.prototype, a.prototype);\" +\n             \"new b()\");\n  }\n",
        "begin_line": 420,
        "end_line": 425,
        "comment": "",
        "child_ranges": [
            "(line 421,col 5)-(line 424,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin5()",
        "snippet": "  public void testMixin5() {\n    test(\"this.a = {}; var b = {}; var c = {}; var goog = {};\" +\n         \"goog.mixin = function() {};\" +\n         \"goog.mixin(b.prototype, a.prototype);\" +\n         \"goog.mixin(c.prototype, a.prototype);\" +\n         \"new b()\",\n         \"this.a = {}; var b = {}; var goog = {};\" +\n         \"goog.mixin = function() {};\" +\n         \"goog.mixin(b.prototype, a.prototype);\" +\n         \"new b()\");\n  }\n",
        "begin_line": 427,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 428,col 5)-(line 436,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin6()",
        "snippet": "  public void testMixin6() {\n    testSame(\"this.a = {}; var b = {}; var c = {}; var goog = {};\" +\n             \"goog.mixin = function() {};\" +\n             \"goog.mixin(c.prototype, a.prototype) + \" +\n             \"goog.mixin(b.prototype, a.prototype);\" +\n             \"new b()\");\n  }\n",
        "begin_line": 439,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 440,col 5)-(line 444,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin7()",
        "snippet": "  public void testMixin7() {\n    test(\"this.a = {}; var b = {}; var c = {}; var goog = {};\" +\n         \"goog.mixin = function() {};\" +\n         \"var d = goog.mixin(c.prototype, a.prototype) + \" +\n         \"goog.mixin(b.prototype, a.prototype);\" +\n         \"new b()\",\n         \"this.a = {}; var b = {}; var goog = {};\" +\n         \"goog.mixin = function() {};\" +\n         \"goog.mixin(b.prototype, a.prototype);\" +\n         \"new b()\");\n  }\n",
        "begin_line": 447,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 448,col 5)-(line 456,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testConstants1()",
        "snippet": "  public void testConstants1() {\n    testSame(\"var bar = function(){}; var EXP_FOO = true; if (EXP_FOO) bar();\");\n  }\n",
        "begin_line": 459,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 460,col 5)-(line 460,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testConstants2()",
        "snippet": "  public void testConstants2() {\n    test(\"var bar = function(){}; var EXP_FOO = true; var EXP_BAR = true;\" +\n         \"if (EXP_FOO) bar();\",\n         \"var bar = function(){}; var EXP_FOO = true; if (EXP_FOO) bar();\");\n  }\n",
        "begin_line": 463,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 464,col 5)-(line 466,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExpressions1()",
        "snippet": "  public void testExpressions1() {\n    test(\"var foo={}; foo.A='A'; foo.AB=foo.A+'B'; foo.ABC=foo.AB+'C'\",\n         \"\");\n  }\n",
        "begin_line": 469,
        "end_line": 472,
        "comment": "",
        "child_ranges": [
            "(line 470,col 5)-(line 471,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExpressions2()",
        "snippet": "  public void testExpressions2() {\n    testSame(\"var foo={}; foo.A='A'; foo.AB=foo.A+'B'; this.ABC=foo.AB+'C'\");\n  }\n",
        "begin_line": 474,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 475,col 5)-(line 475,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExpressions3()",
        "snippet": "  public void testExpressions3() {\n    testSame(\"var foo = 2; window.bar(foo + 3)\");\n  }\n",
        "begin_line": 478,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 479,col 5)-(line 479,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetCreatingReference()",
        "snippet": "  public void testSetCreatingReference() {\n    testSame(\"var foo; var bar = function(){foo=6;}; bar();\");\n  }\n",
        "begin_line": 482,
        "end_line": 484,
        "comment": "",
        "child_ranges": [
            "(line 483,col 5)-(line 483,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous1()",
        "snippet": "  public void testAnonymous1() {\n    testSame(\"function foo() {}; function bar() {}; foo(function() {bar()})\");\n  }\n",
        "begin_line": 486,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 487,col 5)-(line 487,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous2()",
        "snippet": "  public void testAnonymous2() {\n    test(\"var foo;(function(){foo=6;})()\", \"(function(){})()\");\n  }\n",
        "begin_line": 490,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 491,col 5)-(line 491,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous3()",
        "snippet": "  public void testAnonymous3() {\n    testSame(\"var foo; (function(){ if(!foo)foo=6; })()\");\n  }\n",
        "begin_line": 494,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 495,col 5)-(line 495,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous4()",
        "snippet": "  public void testAnonymous4() {\n    testSame(\"var foo; (function(){ foo=6; })(); externfoo=foo;\");\n  }\n",
        "begin_line": 498,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 499,col 5)-(line 499,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous5()",
        "snippet": "  public void testAnonymous5() {\n    testSame(\"var foo;\" +\n             \"(function(){ foo=function(){ bar() }; function bar(){} })();\" +\n             \"foo();\");\n  }\n",
        "begin_line": 502,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 503,col 5)-(line 505,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous6()",
        "snippet": "  public void testAnonymous6() {\n    testSame(\"function foo(){}\" +\n             \"function bar(){}\" +\n             \"foo(function(){externfoo = bar});\");\n  }\n",
        "begin_line": 508,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 511,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous7()",
        "snippet": "  public void testAnonymous7() {\n    testSame(\"var foo;\" +\n             \"(function (){ function bar(){ externfoo = foo; } bar(); })();\");\n  }\n",
        "begin_line": 514,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 516,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous8()",
        "snippet": "  public void testAnonymous8() {\n    testSame(\"var foo;\" +\n             \"(function (){ var g=function(){ externfoo = foo; }; g(); })();\");\n  }\n",
        "begin_line": 519,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 520,col 5)-(line 521,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous9()",
        "snippet": "  public void testAnonymous9() {\n    testSame(\"function foo(){}\" +\n             \"function bar(){}\" +\n             \"foo(function(){ function baz(){ externfoo = bar; } baz(); });\");\n  }\n",
        "begin_line": 524,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 525,col 5)-(line 527,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testFunctions1()",
        "snippet": "  public void testFunctions1() {\n    testSame(\"var foo = null; function baz() {}\" +\n             \"function bar() {foo=baz();} bar();\");\n  }\n",
        "begin_line": 530,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 531,col 5)-(line 532,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testFunctions2()",
        "snippet": "  public void testFunctions2() {\n    testSame(\"var foo; foo = function() {var a = bar()};\" +\n             \"var bar = function(){}; foo();\");\n  }\n",
        "begin_line": 535,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 536,col 5)-(line 537,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testGetElem1()",
        "snippet": "  public void testGetElem1() {\n    testSame(\"var foo = {}; foo.bar = {}; foo.bar.baz = {a: 5, b: 10};\" +\n             \"var fn = function() {window[foo.bar.baz.a] = 5;}; fn()\");\n  }\n",
        "begin_line": 540,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 541,col 5)-(line 542,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testGetElem2()",
        "snippet": "  public void testGetElem2() {\n    testSame(\"var foo = {}; foo.bar = {}; foo.bar.baz = {a: 5, b: 10};\" +\n             \"var fn = function() {this[foo.bar.baz.a] = 5;}; fn()\");\n  }\n",
        "begin_line": 545,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 546,col 5)-(line 547,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testGetElem3()",
        "snippet": "  public void testGetElem3() {\n    testSame(\"var foo = {'i': 0, 'j': 1}; foo['k'] = 2; top.foo = foo;\");\n  }\n",
        "begin_line": 550,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 551,col 5)-(line 551,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf1()",
        "snippet": "  public void testIf1() {\n    test(\"var foo = {};if(e)foo.bar=function(){};\", \"if(e);\");\n  }\n",
        "begin_line": 554,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 555,col 5)-(line 555,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf2()",
        "snippet": "  public void testIf2() {\n    test(\"var e = false;var foo = {};if(e)foo.bar=function(){};\",\n         \"var e = false;if(e);\");\n  }\n",
        "begin_line": 558,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 559,col 5)-(line 560,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf3()",
        "snippet": "  public void testIf3() {\n    test(\"var e = false;var foo = {};if(e + 1)foo.bar=function(){};\",\n         \"var e = false;if(e + 1);\");\n  }\n",
        "begin_line": 563,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 564,col 5)-(line 565,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf4()",
        "snippet": "  public void testIf4() {\n    test(\"var e = false, f;var foo = {};if(f=e)foo.bar=function(){};\",\n         \"var e = false;if(e);\");\n  }\n",
        "begin_line": 568,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 569,col 5)-(line 570,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf5()",
        "snippet": "  public void testIf5() {\n    test(\"var e = false, f;var foo = {};if(f = e + 1)foo.bar=function(){};\",\n         \"var e = false;if(e + 1);\");\n  }\n",
        "begin_line": 573,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 574,col 5)-(line 575,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIfElse()",
        "snippet": "  public void testIfElse() {\n    test(\"var foo = {};if(e)foo.bar=function(){};else foo.bar=function(){};\",\n         \"if(e);else;\");\n  }\n",
        "begin_line": 578,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 579,col 5)-(line 580,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testWhile()",
        "snippet": "  public void testWhile() {\n    test(\"var foo = {};while(e)foo.bar=function(){};\", \"while(e);\");\n  }\n",
        "begin_line": 583,
        "end_line": 585,
        "comment": "",
        "child_ranges": [
            "(line 584,col 5)-(line 584,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testFor()",
        "snippet": "  public void testFor() {\n    test(\"var foo = {};for(e in x)foo.bar=function(){};\", \"for(e in x);\");\n  }\n",
        "begin_line": 587,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 588,col 5)-(line 588,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDo()",
        "snippet": "  public void testDo() {\n    test(\"var cond = false;do {var a = 1} while (cond)\",\n         \"var cond = false;do {} while (cond)\");\n  }\n",
        "begin_line": 591,
        "end_line": 594,
        "comment": "",
        "child_ranges": [
            "(line 592,col 5)-(line 593,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct1()",
        "snippet": "  public void testSetterInForStruct1() {\n    test(\"var j = 0; for (var i = 1; i = 0; j++);\",\n         \"var j = 0; for (; 0; j++);\");\n  }\n",
        "begin_line": 596,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 597,col 5)-(line 598,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct2()",
        "snippet": "  public void testSetterInForStruct2() {\n    test(\"var Class = function() {}; \" +\n         \"for (var i = 1; Class.prototype.property_ = 0; i++);\",\n         \"for (var i = 1; 0; i++);\");\n  }\n",
        "begin_line": 601,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 602,col 5)-(line 604,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct3()",
        "snippet": "  public void testSetterInForStruct3() {\n    test(\"var j = 0; for (var i = 1 + f() + g() + h(); i = 0; j++);\",\n         \"var j = 0; f(); g(); h(); for (; 0; j++);\");\n  }\n",
        "begin_line": 607,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 608,col 5)-(line 609,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct4()",
        "snippet": "  public void testSetterInForStruct4() {\n    test(\"var i = 0;var j = 0; for (i = 1 + f() + g() + h(); i = 0; j++);\",\n         \"var j = 0; f(); g(); h(); for (; 0; j++);\");\n  }\n",
        "begin_line": 612,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 613,col 5)-(line 614,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct5()",
        "snippet": "  public void testSetterInForStruct5() {\n    test(\"var i = 0, j = 0; for (i = f(), j = g(); 0;);\",\n         \"for (f(), g(); 0;);\");\n  }\n",
        "begin_line": 617,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 618,col 5)-(line 619,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct6()",
        "snippet": "  public void testSetterInForStruct6() {\n    test(\"var i = 0, j = 0, k = 0; for (i = f(), j = g(), k = h(); i = 0;);\",\n         \"for (f(), g(), h(); 0;);\");\n  }\n",
        "begin_line": 622,
        "end_line": 625,
        "comment": "",
        "child_ranges": [
            "(line 623,col 5)-(line 624,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct7()",
        "snippet": "  public void testSetterInForStruct7() {\n    test(\"var i = 0, j = 0, k = 0; for (i = 1, j = 2, k = 3; i = 0;);\",\n         \"for (1, 2, 3; 0;);\");\n  }\n",
        "begin_line": 627,
        "end_line": 630,
        "comment": "",
        "child_ranges": [
            "(line 628,col 5)-(line 629,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct8()",
        "snippet": "  public void testSetterInForStruct8() {\n    test(\"var i = 0, j = 0, k = 0; for (i = 1, j = i, k = 2; i = 0;);\",\n         \"var i = 0; for(i = 1, i , 2; i = 0;);\");\n  }\n",
        "begin_line": 632,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 633,col 5)-(line 634,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct9()",
        "snippet": "  public void testSetterInForStruct9() {\n    test(\"var Class = function() {}; \" +\n         \"for (var i = 1; Class.property_ = 0; i++);\",\n         \"for (var i = 1; 0; i++);\");\n  }\n",
        "begin_line": 637,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 638,col 5)-(line 640,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct10()",
        "snippet": "  public void testSetterInForStruct10() {\n    test(\"var Class = function() {}; \" +\n         \"for (var i = 1; Class.property_ = 0; i = 2);\",\n         \"for (; 0;);\");\n  }\n",
        "begin_line": 643,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 644,col 5)-(line 646,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct11()",
        "snippet": "  public void testSetterInForStruct11() {\n    test(\"var Class = function() {}; \" +\n         \"for (;Class.property_ = 0;);\",\n         \"for (;0;);\");\n  }\n",
        "begin_line": 649,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 650,col 5)-(line 652,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct12()",
        "snippet": "  public void testSetterInForStruct12() {\n    test(\"var a = 1; var Class = function() {}; \" +\n         \"for (;Class.property_ = a;);\",\n         \"var a = 1; for (; a;);\");\n  }\n",
        "begin_line": 655,
        "end_line": 659,
        "comment": "",
        "child_ranges": [
            "(line 656,col 5)-(line 658,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct13()",
        "snippet": "  public void testSetterInForStruct13() {\n    test(\"var a = 1; var Class = function() {}; \" +\n         \"for (Class.property_ = a; 0 ;);\",\n         \"for (; 0;);\");\n  }\n",
        "begin_line": 661,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 662,col 5)-(line 664,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct14()",
        "snippet": "  public void testSetterInForStruct14() {\n    test(\"var a = 1; var Class = function() {}; \" +\n         \"for (; 0; Class.property_ = a);\",\n         \"for (; 0;);\");\n  }\n",
        "begin_line": 667,
        "end_line": 671,
        "comment": "",
        "child_ranges": [
            "(line 668,col 5)-(line 670,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct15()",
        "snippet": "  public void testSetterInForStruct15() {\n    test(\"var Class = function() {}; \" +\n         \"for (var i = 1; 0; Class.prototype.property_ = 0);\",\n         \"for (; 0; 0);\");\n  }\n",
        "begin_line": 673,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 674,col 5)-(line 676,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct16()",
        "snippet": "  public void testSetterInForStruct16() {\n    test(\"var Class = function() {}; \" +\n         \"for (var i = 1; i = 0; Class.prototype.property_ = 0);\",\n         \"for (; 0; 0);\");\n  }\n",
        "begin_line": 679,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 680,col 5)-(line 682,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn1()",
        "snippet": "  public void testSetterInForIn1() {\n    test(\"var foo = {}; var bar; for(e in bar = foo.a);\",\n         \"var foo = {}; for(e in foo.a);\");\n  }\n",
        "begin_line": 685,
        "end_line": 688,
        "comment": "",
        "child_ranges": [
            "(line 686,col 5)-(line 687,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn2()",
        "snippet": "  public void testSetterInForIn2() {\n    testSame(\"var foo = {}; var bar; for(e in bar = foo.a); bar\");\n  }\n",
        "begin_line": 690,
        "end_line": 692,
        "comment": "",
        "child_ranges": [
            "(line 691,col 5)-(line 691,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn3()",
        "snippet": "  public void testSetterInForIn3() {\n    // TODO(user) Fix issue similar to b/2316773: bar should be preserved\n    // but isn't due to missing references between e and foo.a\n    test(\"var foo = {}; var bar; for(e in bar = foo.a); bar.b = 3\",\n         \"var foo = {}; for(e in foo.a);\");\n  }\n",
        "begin_line": 694,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 697,col 5)-(line 698,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn4()",
        "snippet": "  public void testSetterInForIn4() {\n    // TODO(user) Fix issue similar to b/2316773: bar should be preserved\n    // but isn't due to missing references between e and foo.a\n    test(\"var foo = {}; var bar; for (e in bar = foo.a); bar.b = 3; foo.a\",\n         \"var foo = {}; for (e in foo.a); foo.a\");\n  }\n",
        "begin_line": 701,
        "end_line": 706,
        "comment": "",
        "child_ranges": [
            "(line 704,col 5)-(line 705,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn5()",
        "snippet": "  public void testSetterInForIn5() {\n    // TODO(user) Fix issue similar to b/2316773: bar should be preserved\n    // but isn't due to missing references between e and foo.a\n    test(\"var foo = {}; var bar; for (e in foo.a) { bar = e } bar.b = 3; foo.a\",\n         \"var foo={};for(e in foo.a);foo.a\");\n  }\n",
        "begin_line": 708,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 711,col 5)-(line 712,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn6()",
        "snippet": "  public void testSetterInForIn6() {\n    testSame(\"var foo = {};for(e in foo);\");\n  }\n",
        "begin_line": 715,
        "end_line": 717,
        "comment": "",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInIfPredicate()",
        "snippet": "  public void testSetterInIfPredicate() {\n    // TODO(user) Make NameAnalyzer smarter so it can remove \"Class\".\n    testSame(\"var a = 1;\" +\n             \"var Class = function() {}; \" +\n             \"if (Class.property_ = a);\");\n  }\n",
        "begin_line": 719,
        "end_line": 724,
        "comment": "",
        "child_ranges": [
            "(line 721,col 5)-(line 723,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInWhilePredicate()",
        "snippet": "  public void testSetterInWhilePredicate() {\n    test(\"var a = 1;\" +\n         \"var Class = function() {}; \" +\n         \"while (Class.property_ = a);\",\n         \"var a = 1; for (;a;) {}\");\n  }\n",
        "begin_line": 726,
        "end_line": 731,
        "comment": "",
        "child_ranges": [
            "(line 727,col 5)-(line 730,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInDoWhilePredicate()",
        "snippet": "  public void testSetterInDoWhilePredicate() {\n    // TODO(user) Make NameAnalyzer smarter so it can remove \"Class\".\n    testSame(\"var a = 1;\" +\n             \"var Class = function() {}; \" +\n             \"do {} while(Class.property_ = a);\");\n  }\n",
        "begin_line": 733,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 735,col 5)-(line 737,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInSwitchInput()",
        "snippet": "  public void testSetterInSwitchInput() {\n    // TODO(user) Make NameAnalyzer smarter so it can remove \"Class\".\n    testSame(\"var a = 1;\" +\n             \"var Class = function() {}; \" +\n             \"switch (Class.property_ = a) {\" +\n             \"  default:\" +\n             \"}\");\n  }\n",
        "begin_line": 740,
        "end_line": 747,
        "comment": "",
        "child_ranges": [
            "(line 742,col 5)-(line 746,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testComplexAssigns()",
        "snippet": "  public void testComplexAssigns() {\n    // Complex assigns are not removed by the current pass.\n    testSame(\"var x = 0; x += 3; x *= 5;\");\n  }\n",
        "begin_line": 749,
        "end_line": 752,
        "comment": "",
        "child_ranges": [
            "(line 751,col 5)-(line 751,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssigns()",
        "snippet": "  public void testNestedAssigns() {\n    test(\"var x = 0; var y = x = 3; window.alert(y);\",\n         \"var y = 3; window.alert(y);\");\n  }\n",
        "begin_line": 754,
        "end_line": 757,
        "comment": "",
        "child_ranges": [
            "(line 755,col 5)-(line 756,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testComplexNestedAssigns1()",
        "snippet": "  public void testComplexNestedAssigns1() {\n    // TODO(nicksantos): Make NameAnalyzer smarter, so that we can eliminate y.\n    testSame(\"var x = 0; var y = 2; y += x = 3; window.alert(x);\");\n  }\n",
        "begin_line": 759,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 761,col 5)-(line 761,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testComplexNestedAssigns2()",
        "snippet": "  public void testComplexNestedAssigns2() {\n    test(\"var x = 0; var y = 2; y += x = 3; window.alert(y);\",\n         \"var y = 2; y += 3; window.alert(y);\");\n  }\n",
        "begin_line": 764,
        "end_line": 767,
        "comment": "",
        "child_ranges": [
            "(line 765,col 5)-(line 766,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testComplexNestedAssigns3()",
        "snippet": "  public void testComplexNestedAssigns3() {\n    test(\"var x = 0; var y = x += 3; window.alert(x);\",\n         \"var x = 0; x += 3; window.alert(x);\");\n  }\n",
        "begin_line": 769,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 770,col 5)-(line 771,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testComplexNestedAssigns4()",
        "snippet": "  public void testComplexNestedAssigns4() {\n    testSame(\"var x = 0; var y = x += 3; window.alert(y);\");\n  }\n",
        "begin_line": 774,
        "end_line": 776,
        "comment": "",
        "child_ranges": [
            "(line 775,col 5)-(line 775,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testUnintendedUseOfInheritsInLocalScope1()",
        "snippet": "  public void testUnintendedUseOfInheritsInLocalScope1() {\n    testSame(\"goog.mixin = function() {}; \" +\n             \"(function() { var x = {}; var y = {}; goog.mixin(x, y); })();\");\n  }\n",
        "begin_line": 778,
        "end_line": 781,
        "comment": "",
        "child_ranges": [
            "(line 779,col 5)-(line 780,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testUnintendedUseOfInheritsInLocalScope2()",
        "snippet": "  public void testUnintendedUseOfInheritsInLocalScope2() {\n    testSame(\"goog.mixin = function() {}; \" +\n             \"var x = {}; var y = {}; (function() { goog.mixin(x, y); })();\");\n  }\n",
        "begin_line": 783,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 784,col 5)-(line 785,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testUnintendedUseOfInheritsInLocalScope3()",
        "snippet": "  public void testUnintendedUseOfInheritsInLocalScope3() {\n    testSame(\"goog.mixin = function() {}; \" +\n             \"var x = {}; var y = {}; (function() { goog.mixin(x, y); })(); \" +\n             \"window.alert(x);\");\n  }\n",
        "begin_line": 788,
        "end_line": 792,
        "comment": "",
        "child_ranges": [
            "(line 789,col 5)-(line 791,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testUnintendedUseOfInheritsInLocalScope4()",
        "snippet": "  public void testUnintendedUseOfInheritsInLocalScope4() {\n    // Ensures that the \"goog$mixin\" variable doesn't get stripped out,\n    // even when it's only used in a local scope.\n    testSame(\"var goog$mixin = function() {}; \" +\n             \"(function() { var x = {}; var y = {}; goog$mixin(x, y); })();\");\n  }\n",
        "begin_line": 794,
        "end_line": 799,
        "comment": "",
        "child_ranges": [
            "(line 797,col 5)-(line 798,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope1()",
        "snippet": "  public void testPrototypePropertySetInLocalScope1() {\n    testSame(\"(function() { var x = function(){}; x.prototype.bar = 3; })();\");\n  }\n",
        "begin_line": 801,
        "end_line": 803,
        "comment": "",
        "child_ranges": [
            "(line 802,col 5)-(line 802,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope2()",
        "snippet": "  public void testPrototypePropertySetInLocalScope2() {\n    testSame(\"var x = function(){}; (function() { x.prototype.bar = 3; })();\");\n  }\n",
        "begin_line": 805,
        "end_line": 807,
        "comment": "",
        "child_ranges": [
            "(line 806,col 5)-(line 806,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope3()",
        "snippet": "  public void testPrototypePropertySetInLocalScope3() {\n    test(\"var x = function(){ x.prototype.bar = 3; };\", \"\");\n  }\n",
        "begin_line": 809,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 810,col 5)-(line 810,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope4()",
        "snippet": "  public void testPrototypePropertySetInLocalScope4() {\n    test(\"var x = {}; x.foo = function(){ x.foo.prototype.bar = 3; };\", \"\");\n  }\n",
        "begin_line": 813,
        "end_line": 815,
        "comment": "",
        "child_ranges": [
            "(line 814,col 5)-(line 814,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope5()",
        "snippet": "  public void testPrototypePropertySetInLocalScope5() {\n    test(\"var x = {}; x.prototype.foo = 3;\", \"\");\n  }\n",
        "begin_line": 817,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 818,col 5)-(line 818,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope6()",
        "snippet": "  public void testPrototypePropertySetInLocalScope6() {\n    testSame(\"var x = {}; x.prototype.foo = 3; bar(x.prototype.foo)\");\n  }\n",
        "begin_line": 821,
        "end_line": 823,
        "comment": "",
        "child_ranges": [
            "(line 822,col 5)-(line 822,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope7()",
        "snippet": "  public void testPrototypePropertySetInLocalScope7() {\n    testSame(\"var x = {}; x.foo = 3; bar(x.foo)\");\n  }\n",
        "begin_line": 825,
        "end_line": 827,
        "comment": "",
        "child_ranges": [
            "(line 826,col 5)-(line 826,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference1()",
        "snippet": "  public void testRValueReference1() {\n    testSame(\"var a = 1; a\");\n  }\n",
        "begin_line": 829,
        "end_line": 831,
        "comment": "",
        "child_ranges": [
            "(line 830,col 5)-(line 830,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference2()",
        "snippet": "  public void testRValueReference2() {\n    testSame(\"var a = 1; 1+a\");\n  }\n",
        "begin_line": 833,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 834,col 5)-(line 834,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference3()",
        "snippet": "  public void testRValueReference3() {\n    testSame(\"var x = {}; x.prototype.foo = 3; var a = x.prototype.foo; 1+a\");\n  }\n",
        "begin_line": 837,
        "end_line": 839,
        "comment": "",
        "child_ranges": [
            "(line 838,col 5)-(line 838,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference4()",
        "snippet": "  public void testRValueReference4() {\n    testSame(\"var x = {}; x.prototype.foo = 3; x.prototype.foo\");\n  }\n",
        "begin_line": 841,
        "end_line": 843,
        "comment": "",
        "child_ranges": [
            "(line 842,col 5)-(line 842,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference5()",
        "snippet": "  public void testRValueReference5() {\n    testSame(\"var x = {}; x.prototype.foo = 3; 1+x.prototype.foo\");\n  }\n",
        "begin_line": 845,
        "end_line": 847,
        "comment": "",
        "child_ranges": [
            "(line 846,col 5)-(line 846,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference6()",
        "snippet": "  public void testRValueReference6() {\n    testSame(\"var x = {}; var idx = 2; x[idx]\");\n  }\n",
        "begin_line": 849,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 850,col 5)-(line 850,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testUnhandledTopNode()",
        "snippet": "  public void testUnhandledTopNode() {\n    testSame(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n             \"function Bar() {}; Bar.prototype.isFoo = function() {};\" +\n             \"var foo = new Foo(); var bar = new Bar();\" +\n             // The boolean AND here is currently unhandled by this pass, but\n             // it should not cause it to blow up.\n             \"var cond = foo.isBar() && bar.isFoo();\" +\n             \"if (cond) {window.alert('hello');}\");\n  }\n",
        "begin_line": 853,
        "end_line": 861,
        "comment": "",
        "child_ranges": [
            "(line 854,col 5)-(line 860,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPropertyDefinedInGlobalScope()",
        "snippet": "  public void testPropertyDefinedInGlobalScope() {\n    testSame(\"function Foo() {}; var x = new Foo(); x.cssClass = 'bar';\" +\n             \"window.alert(x);\");\n  }\n",
        "begin_line": 863,
        "end_line": 866,
        "comment": "",
        "child_ranges": [
            "(line 864,col 5)-(line 865,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testConditionallyDefinedFunction1()",
        "snippet": "  public void testConditionallyDefinedFunction1() {\n    testSame(\"var g; externfoo.x || (externfoo.x = function() { g; })\");\n  }\n",
        "begin_line": 868,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 869,col 5)-(line 869,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testConditionallyDefinedFunction2()",
        "snippet": "  public void testConditionallyDefinedFunction2() {\n    testSame(\"var g; 1 || (externfoo.x = function() { g; })\");\n  }\n",
        "begin_line": 872,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 873,col 5)-(line 873,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testGetElemOnThis()",
        "snippet": "  public void testGetElemOnThis() {\n    testSame(\"var a = 3; this['foo'] = a;\");\n    testSame(\"this['foo'] = 3;\");\n  }\n",
        "begin_line": 876,
        "end_line": 879,
        "comment": "",
        "child_ranges": [
            "(line 877,col 5)-(line 877,col 44)",
            "(line 878,col 5)-(line 878,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveInstanceOfOnly()",
        "snippet": "  public void testRemoveInstanceOfOnly() {\n    test(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n         \"var x; if (x instanceof Foo) { window.alert(x); }\",\n         \";var x; if (false) { window.alert(x); }\");\n  }\n",
        "begin_line": 881,
        "end_line": 885,
        "comment": "",
        "child_ranges": [
            "(line 882,col 5)-(line 884,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveLocalScopedInstanceOfOnly()",
        "snippet": "  public void testRemoveLocalScopedInstanceOfOnly() {\n    test(\"function Foo() {}; function Bar(x) { this.z = x instanceof Foo; };\" +\n        \"externfoo.x = new Bar({});\",\n        \";function Bar(x) { this.z = false }; externfoo.x = new Bar({});\");\n  }\n",
        "begin_line": 887,
        "end_line": 891,
        "comment": "",
        "child_ranges": [
            "(line 888,col 5)-(line 890,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveInstanceOfWithReferencedMethod()",
        "snippet": "  public void testRemoveInstanceOfWithReferencedMethod() {\n    test(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n        \"var x; if (x instanceof Foo) { window.alert(x.isBar()); }\",\n        \";var x; if (false) { window.alert(x.isBar()); }\");\n  }\n",
        "begin_line": 893,
        "end_line": 897,
        "comment": "",
        "child_ranges": [
            "(line 894,col 5)-(line 896,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeReferencedInstanceOf()",
        "snippet": "  public void testDoNotChangeReferencedInstanceOf() {\n    testSame(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n             \"var x = new Foo(); if (x instanceof Foo) { window.alert(x); }\");\n  }\n",
        "begin_line": 899,
        "end_line": 902,
        "comment": "",
        "child_ranges": [
            "(line 900,col 5)-(line 901,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeReferencedLocalScopedInstanceOf()",
        "snippet": "  public void testDoNotChangeReferencedLocalScopedInstanceOf() {\n    testSame(\"function Foo() {}; externfoo.x = new Foo();\" +\n        \"function Bar() { if (x instanceof Foo) { window.alert(x); } };\" +\n        \"externfoo.y = new Bar();\");\n  }\n",
        "begin_line": 904,
        "end_line": 908,
        "comment": "",
        "child_ranges": [
            "(line 905,col 5)-(line 907,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeLocalScopeReferencedInstanceOf()",
        "snippet": "  public void testDoNotChangeLocalScopeReferencedInstanceOf() {\n    testSame(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n        \"function Bar() { this.z = new Foo(); }; externfoo.x = new Bar();\" +\n        \"if (x instanceof Foo) { window.alert(x); }\");\n  }\n",
        "begin_line": 910,
        "end_line": 914,
        "comment": "",
        "child_ranges": [
            "(line 911,col 5)-(line 913,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeLocalScopeReferencedLocalScopedInstanceOf()",
        "snippet": "  public void testDoNotChangeLocalScopeReferencedLocalScopedInstanceOf() {\n    testSame(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n        \"function Bar() { this.z = new Foo(); };\" +\n        \"Bar.prototype.func = function(x) {\" +\n          \"if (x instanceof Foo) { window.alert(x); }\" +\n        \"}; new Bar().func();\");\n  }\n",
        "begin_line": 916,
        "end_line": 922,
        "comment": "",
        "child_ranges": [
            "(line 917,col 5)-(line 921,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeInstanceOfGetElem()",
        "snippet": "  public void testDoNotChangeInstanceOfGetElem() {\n    testSame(\"var goog = {};\" +\n        \"function f(obj, name) {\" +\n        \"  if (obj instanceof goog[name]) {\" +\n        \"    return name;\" +\n        \"  }\" +\n        \"}\" +\n        \"window['f'] = f;\");\n  }\n",
        "begin_line": 924,
        "end_line": 932,
        "comment": "",
        "child_ranges": [
            "(line 925,col 5)-(line 931,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testWeirdnessOnLeftSideOfPrototype()",
        "snippet": "  public void testWeirdnessOnLeftSideOfPrototype() {\n    // This checks a bug where 'x' was removed, but the function referencing\n    // it was not, causing problems.\n    testSame(\"var x = 3; \" +\n        \"(function() { this.bar = 3; }).z = function() {\" +\n        \"  return x;\" +\n        \"};\");\n  }\n",
        "begin_line": 934,
        "end_line": 941,
        "comment": "",
        "child_ranges": [
            "(line 937,col 5)-(line 940,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit1()",
        "snippet": "  public void testShortCircuit1() {\n    test(\"var a = b() || 1\", \"b()\");\n  }\n",
        "begin_line": 943,
        "end_line": 945,
        "comment": "",
        "child_ranges": [
            "(line 944,col 5)-(line 944,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit2()",
        "snippet": "  public void testShortCircuit2() {\n    test(\"var a = 1 || c()\", \"1 || c()\");\n  }\n",
        "begin_line": 947,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 948,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit3()",
        "snippet": "  public void testShortCircuit3() {\n    test(\"var a = b() || c()\", \"b() || c()\");\n  }\n",
        "begin_line": 951,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 952,col 5)-(line 952,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit4()",
        "snippet": "  public void testShortCircuit4() {\n    test(\"var a = b() || 3 || c()\", \"b() || 3 || c()\");\n  }\n",
        "begin_line": 955,
        "end_line": 957,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit5()",
        "snippet": "  public void testShortCircuit5() {\n    test(\"var a = b() && 1\", \"b()\");\n  }\n",
        "begin_line": 959,
        "end_line": 961,
        "comment": "",
        "child_ranges": [
            "(line 960,col 5)-(line 960,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit6()",
        "snippet": "  public void testShortCircuit6() {\n    test(\"var a = 1 && c()\", \"1 && c()\");\n  }\n",
        "begin_line": 963,
        "end_line": 965,
        "comment": "",
        "child_ranges": [
            "(line 964,col 5)-(line 964,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit7()",
        "snippet": "  public void testShortCircuit7() {\n    test(\"var a = b() && c()\", \"b() && c()\");\n  }\n",
        "begin_line": 967,
        "end_line": 969,
        "comment": "",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit8()",
        "snippet": "  public void testShortCircuit8() {\n    test(\"var a = b() && 3 && c()\", \"b() && 3 && c()\");\n  }\n",
        "begin_line": 971,
        "end_line": 973,
        "comment": "",
        "child_ranges": [
            "(line 972,col 5)-(line 972,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsReference1()",
        "snippet": "  public void testRhsReference1() {\n    testSame(\"var a = 1; a\");\n  }\n",
        "begin_line": 975,
        "end_line": 977,
        "comment": "",
        "child_ranges": [
            "(line 976,col 5)-(line 976,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsReference2()",
        "snippet": "  public void testRhsReference2() {\n    testSame(\"var a = 1; a || b()\");\n  }\n",
        "begin_line": 979,
        "end_line": 981,
        "comment": "",
        "child_ranges": [
            "(line 980,col 5)-(line 980,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsReference3()",
        "snippet": "  public void testRhsReference3() {\n    testSame(\"var a = 1; 1 || a\");\n  }\n",
        "begin_line": 983,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 984,col 5)-(line 984,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsReference4()",
        "snippet": "  public void testRhsReference4() {\n    test(\"var a = 1; var b = a || foo()\", \"var a = 1; a || foo()\");\n  }\n",
        "begin_line": 987,
        "end_line": 989,
        "comment": "",
        "child_ranges": [
            "(line 988,col 5)-(line 988,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsReference5()",
        "snippet": "  public void testRhsReference5() {\n    test(\"var a = 1, b = 5; a; foo(b)\", \"var a = 1, b = 5; a; foo(b)\");\n  }\n",
        "begin_line": 991,
        "end_line": 993,
        "comment": "",
        "child_ranges": [
            "(line 992,col 5)-(line 992,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign1()",
        "snippet": "  public void testRhsAssign1() {\n    test(\"var foo, bar; foo || (bar = 1)\",\n         \"var foo; foo || 1\");\n  }\n",
        "begin_line": 995,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 996,col 5)-(line 997,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign2()",
        "snippet": "  public void testRhsAssign2() {\n    test(\"var foo, bar, baz; foo || (baz = bar = 1)\",\n         \"var foo; foo || 1\");\n  }\n",
        "begin_line": 1000,
        "end_line": 1003,
        "comment": "",
        "child_ranges": [
            "(line 1001,col 5)-(line 1002,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign3()",
        "snippet": "  public void testRhsAssign3() {\n    testSame(\"var foo = null; foo || (foo = 1)\");\n  }\n",
        "begin_line": 1005,
        "end_line": 1007,
        "comment": "",
        "child_ranges": [
            "(line 1006,col 5)-(line 1006,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign4()",
        "snippet": "  public void testRhsAssign4() {\n    test(\"var foo = null; foo = (foo || 1)\", \"\");\n  }\n",
        "begin_line": 1009,
        "end_line": 1011,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 5)-(line 1010,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign5()",
        "snippet": "  public void testRhsAssign5() {\n    test(\"var a = 3, foo, bar; foo || (bar = a)\", \"var a = 3, foo; foo || a\");\n  }\n",
        "begin_line": 1013,
        "end_line": 1015,
        "comment": "",
        "child_ranges": [
            "(line 1014,col 5)-(line 1014,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign6()",
        "snippet": "  public void testRhsAssign6() {\n    test(\"function Foo(){} var foo = null;\" +\n         \"var f = function () {foo || (foo = new Foo()); return foo}\",\n         \"\");\n  }\n",
        "begin_line": 1017,
        "end_line": 1021,
        "comment": "",
        "child_ranges": [
            "(line 1018,col 5)-(line 1020,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign7()",
        "snippet": "  public void testRhsAssign7() {\n    testSame(\"function Foo(){} var foo = null;\" +\n             \"var f = function () {foo || (foo = new Foo())}; f()\");\n  }\n",
        "begin_line": 1023,
        "end_line": 1026,
        "comment": "",
        "child_ranges": [
            "(line 1024,col 5)-(line 1025,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign8()",
        "snippet": "  public void testRhsAssign8() {\n    testSame(\"function Foo(){} var foo = null;\" +\n             \"var f = function () {(foo = new Foo()) || g()}; f()\");\n  }\n",
        "begin_line": 1028,
        "end_line": 1031,
        "comment": "",
        "child_ranges": [
            "(line 1029,col 5)-(line 1030,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign9()",
        "snippet": "  public void testRhsAssign9() {\n    test(\"function Foo(){} var foo = null;\" +\n         \"var f = function () {1 + (foo = new Foo()); return foo}\",\n         \"\");\n  }\n",
        "begin_line": 1033,
        "end_line": 1037,
        "comment": "",
        "child_ranges": [
            "(line 1034,col 5)-(line 1036,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithOr1()",
        "snippet": "  public void testAssignWithOr1() {\n    testSame(\"var foo = null;\" +\n        \"var f = window.a || function () {return foo}; f()\");\n  }\n",
        "begin_line": 1039,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1040,col 5)-(line 1041,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithOr2()",
        "snippet": "  public void testAssignWithOr2() {\n    test(\"var foo = null;\" +\n        \"var f = window.a || function () {return foo};\",\n        \"var foo = null\"); // why is this left?\n  }\n",
        "begin_line": 1044,
        "end_line": 1048,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1047,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithAnd1()",
        "snippet": "  public void testAssignWithAnd1() {\n    testSame(\"var foo = null;\" +\n        \"var f = window.a && function () {return foo}; f()\");\n  }\n",
        "begin_line": 1050,
        "end_line": 1053,
        "comment": "",
        "child_ranges": [
            "(line 1051,col 5)-(line 1052,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithAnd2()",
        "snippet": "  public void testAssignWithAnd2() {\n    test(\"var foo = null;\" +\n        \"var f = window.a && function () {return foo};\",\n        \"var foo = null;\");  // why is this left?\n  }\n",
        "begin_line": 1055,
        "end_line": 1059,
        "comment": "",
        "child_ranges": [
            "(line 1056,col 5)-(line 1058,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook1()",
        "snippet": "  public void testAssignWithHook1() {\n    testSame(\"function Foo(){} var foo = null;\" +\n        \"var f = window.a ? \" +\n        \"    function () {return new Foo()} : function () {return foo}; f()\");\n  }\n",
        "begin_line": 1061,
        "end_line": 1065,
        "comment": "",
        "child_ranges": [
            "(line 1062,col 5)-(line 1064,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook2()",
        "snippet": "  public void testAssignWithHook2() {\n    test(\"function Foo(){} var foo = null;\" +\n        \"var f = window.a ? \" +\n        \"    function () {return new Foo()} : function () {return foo};\",\n        \"\");\n  }\n",
        "begin_line": 1067,
        "end_line": 1072,
        "comment": "",
        "child_ranges": [
            "(line 1068,col 5)-(line 1071,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook3()",
        "snippet": "  public void testAssignWithHook3() {\n    testSame(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window.a ? \" +\n        \"    function () {return new Foo()} : function () {return foo}; f.b()\");\n  }\n",
        "begin_line": 1074,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1075,col 5)-(line 1077,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook4()",
        "snippet": "  public void testAssignWithHook4() {\n    test(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window.a ? \" +\n        \"    function () {return new Foo()} : function () {return foo};\",\n        \"\");\n  }\n",
        "begin_line": 1080,
        "end_line": 1085,
        "comment": "",
        "child_ranges": [
            "(line 1081,col 5)-(line 1084,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook5()",
        "snippet": "  public void testAssignWithHook5() {\n    testSame(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window.a ? function () {return new Foo()} :\" +\n        \"    window.b ? function () {return foo} :\" +\n        \"    function() { return Foo }; f.b()\");\n  }\n",
        "begin_line": 1087,
        "end_line": 1092,
        "comment": "",
        "child_ranges": [
            "(line 1088,col 5)-(line 1091,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook6()",
        "snippet": "  public void testAssignWithHook6() {\n    test(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window.a ? function () {return new Foo()} :\" +\n        \"    window.b ? function () {return foo} :\" +\n        \"    function() { return Foo };\",\n        \"\");\n  }\n",
        "begin_line": 1094,
        "end_line": 1100,
        "comment": "",
        "child_ranges": [
            "(line 1095,col 5)-(line 1099,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign1()",
        "snippet": "  public void testNestedAssign1() {\n    test(\"var a, b = a = 1, c = 2\", \"\");\n  }\n",
        "begin_line": 1102,
        "end_line": 1104,
        "comment": "",
        "child_ranges": [
            "(line 1103,col 5)-(line 1103,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign2()",
        "snippet": "  public void testNestedAssign2() {\n    test(\"var a, b = a = 1; foo(b)\",\n         \"var b = 1; foo(b)\");\n  }\n",
        "begin_line": 1106,
        "end_line": 1109,
        "comment": "",
        "child_ranges": [
            "(line 1107,col 5)-(line 1108,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign3()",
        "snippet": "  public void testNestedAssign3() {\n    test(\"var a, b = a = 1; a = b = 2; foo(b)\",\n         \"var b = 1; b = 2; foo(b)\");\n  }\n",
        "begin_line": 1111,
        "end_line": 1114,
        "comment": "",
        "child_ranges": [
            "(line 1112,col 5)-(line 1113,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign4()",
        "snippet": "  public void testNestedAssign4() {\n    test(\"var a, b = a = 1; b = a = 2; foo(b)\",\n         \"var b = 1; b = 2; foo(b)\");\n  }\n",
        "begin_line": 1116,
        "end_line": 1119,
        "comment": "",
        "child_ranges": [
            "(line 1117,col 5)-(line 1118,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign5()",
        "snippet": "  public void testNestedAssign5() {\n    test(\"var a, b = a = 1; b = a = 2\", \"\");\n  }\n",
        "begin_line": 1121,
        "end_line": 1123,
        "comment": "",
        "child_ranges": [
            "(line 1122,col 5)-(line 1122,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign15()",
        "snippet": "  public void testNestedAssign15() {\n    test(\"var a, b, c; c = b = a = 2\", \"\");\n  }\n",
        "begin_line": 1125,
        "end_line": 1127,
        "comment": "",
        "child_ranges": [
            "(line 1126,col 5)-(line 1126,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign6()",
        "snippet": "  public void testNestedAssign6() {\n    testSame(\"var a, b, c; a = b = c = 1; foo(a, b, c)\");\n  }\n",
        "begin_line": 1129,
        "end_line": 1131,
        "comment": "",
        "child_ranges": [
            "(line 1130,col 5)-(line 1130,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign7()",
        "snippet": "  public void testNestedAssign7() {\n    testSame(\"var a = 0; a = i[j] = 1; b(a, i[j])\");\n  }\n",
        "begin_line": 1133,
        "end_line": 1135,
        "comment": "",
        "child_ranges": [
            "(line 1134,col 5)-(line 1134,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign8()",
        "snippet": "  public void testNestedAssign8() {\n    testSame(\"function f(){\" +\n             \"this.lockedToken_ = this.lastToken_ = \" +\n             \"SETPROP_value(this.hiddenInput_, a)}f()\");\n  }\n",
        "begin_line": 1137,
        "end_line": 1141,
        "comment": "",
        "child_ranges": [
            "(line 1138,col 5)-(line 1140,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain1()",
        "snippet": "  public void testRefChain1() {\n    test(\"var a = 1; var b = a; var c = b; var d = c\", \"\");\n  }\n",
        "begin_line": 1143,
        "end_line": 1145,
        "comment": "",
        "child_ranges": [
            "(line 1144,col 5)-(line 1144,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain2()",
        "snippet": "  public void testRefChain2() {\n    test(\"var a = 1; var b = a; var c = b; var d = c || f()\",\n         \"var a = 1; var b = a; var c = b; c || f()\");\n  }\n",
        "begin_line": 1147,
        "end_line": 1150,
        "comment": "",
        "child_ranges": [
            "(line 1148,col 5)-(line 1149,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain3()",
        "snippet": "  public void testRefChain3() {\n    test(\"var a = 1; var b = a; var c = b; var d = c + f()\", \"f()\");\n  }\n",
        "begin_line": 1152,
        "end_line": 1154,
        "comment": "",
        "child_ranges": [
            "(line 1153,col 5)-(line 1153,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain4()",
        "snippet": "  public void testRefChain4() {\n    test(\"var a = 1; var b = a; var c = b; var d = f() || c\",\n         \"f()\");\n  }\n",
        "begin_line": 1156,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1157,col 5)-(line 1158,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain5()",
        "snippet": "  public void testRefChain5() {\n    test(\"var a = 1; var b = a; var c = b; var d = f() ? g() : c\",\n         \"f() && g()\");\n  }\n",
        "begin_line": 1161,
        "end_line": 1164,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 5)-(line 1163,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain6()",
        "snippet": "  public void testRefChain6() {\n    test(\"var a = 1; var b = a; var c = b; var d = c ? f() : g()\",\n         \"var a = 1; var b = a; var c = b; c ? f() : g()\");\n  }\n",
        "begin_line": 1166,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1167,col 5)-(line 1168,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain7()",
        "snippet": "  public void testRefChain7() {\n    test(\"var a = 1; var b = a; var c = b; var d = (b + f()) ? g() : c\",\n         \"var a = 1; var b = a; (b+f()) && g()\");\n  }\n",
        "begin_line": 1171,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1172,col 5)-(line 1173,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain8()",
        "snippet": "  public void testRefChain8() {\n    test(\"var a = 1; var b = a; var c = b; var d = f()[b] ? g() : 0\",\n         \"var a = 1; var b = a; f()[b] && g()\");\n  }\n",
        "begin_line": 1176,
        "end_line": 1179,
        "comment": "",
        "child_ranges": [
            "(line 1177,col 5)-(line 1178,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain9()",
        "snippet": "  public void testRefChain9() {\n    test(\"var a = 1; var b = a; var c = 5; var d = f()[b+c] ? g() : 0\",\n         \"var a = 1; var b = a; var c = 5; f()[b+c] && g()\");\n  }\n",
        "begin_line": 1181,
        "end_line": 1184,
        "comment": "",
        "child_ranges": [
            "(line 1182,col 5)-(line 1183,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain10()",
        "snippet": "  public void testRefChain10() {\n    test(\"var a = 1; var b = a; var c = b; var d = f()[b] ? g() : 0\",\n         \"var a = 1; var b = a; f()[b] && g()\");\n  }\n",
        "begin_line": 1186,
        "end_line": 1189,
        "comment": "",
        "child_ranges": [
            "(line 1187,col 5)-(line 1188,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain11()",
        "snippet": "  public void testRefChain11() {\n    test(\"var a = 1; var b = a; var d = f()[b] ? g() : 0\",\n         \"var a = 1; var b = a; f()[b] && g()\");\n  }\n",
        "begin_line": 1191,
        "end_line": 1194,
        "comment": "",
        "child_ranges": [
            "(line 1192,col 5)-(line 1193,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain12()",
        "snippet": "  public void testRefChain12() {\n    testSame(\"var a = 1; var b = a; f()[b] ? g() : 0\");\n  }\n",
        "begin_line": 1196,
        "end_line": 1198,
        "comment": "",
        "child_ranges": [
            "(line 1197,col 5)-(line 1197,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain13()",
        "snippet": "  public void testRefChain13() {\n    test(\"function f(){}var a = 1; var b = a; var d = f()[b] ? g() : 0\",\n         \"function f(){}var a = 1; var b = a; f()[b] && g()\");\n  }\n",
        "begin_line": 1201,
        "end_line": 1204,
        "comment": "",
        "child_ranges": [
            "(line 1202,col 5)-(line 1203,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain14()",
        "snippet": "  public void testRefChain14() {\n    testSame(\"function f(){}var a = 1; var b = a; f()[b] ? g() : 0\");\n  }\n",
        "begin_line": 1206,
        "end_line": 1208,
        "comment": "",
        "child_ranges": [
            "(line 1207,col 5)-(line 1207,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain15()",
        "snippet": "  public void testRefChain15() {\n    test(\"function f(){}var a = 1, b = a; var c = f(); var d = c[b] ? g() : 0\",\n         \"function f(){}var a = 1, b = a; var c = f(); c[b] && g()\");\n  }\n",
        "begin_line": 1210,
        "end_line": 1213,
        "comment": "",
        "child_ranges": [
            "(line 1211,col 5)-(line 1212,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain16()",
        "snippet": "  public void testRefChain16() {\n    testSame(\"function f(){}var a = 1; var b = a; var c = f(); c[b] ? g() : 0\");\n  }\n",
        "begin_line": 1215,
        "end_line": 1217,
        "comment": "",
        "child_ranges": [
            "(line 1216,col 5)-(line 1216,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain17()",
        "snippet": "  public void testRefChain17() {\n    test(\"function f(){}var a = 1; var b = a; var c = f(); var d = c[b]\",\n         \"function f(){} f()\");\n  }\n",
        "begin_line": 1219,
        "end_line": 1222,
        "comment": "",
        "child_ranges": [
            "(line 1220,col 5)-(line 1221,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain18()",
        "snippet": "  public void testRefChain18() {\n    testSame(\"var a = 1; f()[a] && g()\");\n  }\n",
        "begin_line": 1224,
        "end_line": 1226,
        "comment": "",
        "child_ranges": [
            "(line 1225,col 5)-(line 1225,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain19()",
        "snippet": "  public void testRefChain19() {\n    test(\"var a = 1; var b = [a]; var c = b; b[f()] ? g() : 0\",\n         \"var a=1; var b=[a]; b[f()] ? g() : 0\");\n  }\n",
        "begin_line": 1229,
        "end_line": 1232,
        "comment": "",
        "child_ranges": [
            "(line 1230,col 5)-(line 1231,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain20()",
        "snippet": "  public void testRefChain20() {\n    test(\"var a = 1; var b = [a]; var c = b; var d = b[f()] ? g() : 0\",\n         \"var a=1; var b=[a]; b[f()]&&g()\");\n  }\n",
        "begin_line": 1234,
        "end_line": 1237,
        "comment": "",
        "child_ranges": [
            "(line 1235,col 5)-(line 1236,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain21()",
        "snippet": "  public void testRefChain21() {\n    testSame(\"var a = 1; var b = 2; var c = a + b; f(c)\");\n  }\n",
        "begin_line": 1239,
        "end_line": 1241,
        "comment": "",
        "child_ranges": [
            "(line 1240,col 5)-(line 1240,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain22()",
        "snippet": "  public void testRefChain22() {\n    test(\"var a = 2; var b = a = 4; f(a)\", \"var a = 2; a = 4; f(a)\");\n  }\n",
        "begin_line": 1243,
        "end_line": 1245,
        "comment": "",
        "child_ranges": [
            "(line 1244,col 5)-(line 1244,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain23()",
        "snippet": "  public void testRefChain23() {\n    test(\"var a = {}; var b = a[1] || f()\", \"var a = {}; a[1] || f()\");\n  }\n",
        "begin_line": 1247,
        "end_line": 1249,
        "comment": "",
        "child_ranges": [
            "(line 1248,col 5)-(line 1248,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentWithComplexLhs()",
        "snippet": "  public void testAssignmentWithComplexLhs() {\n    testSame(\"function f() { return this; }\" +\n             \"var o = {'key': 'val'};\" +\n             \"f().x_ = o['key'];\");\n  }\n",
        "begin_line": 1256,
        "end_line": 1260,
        "comment": "\n   * Expressions that cannot be attributed to any enclosing dependency\n   * scope should be treated as global references.\n   * @bug 1739062\n   ",
        "child_ranges": [
            "(line 1257,col 5)-(line 1259,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentWithComplexLhs2()",
        "snippet": "  public void testAssignmentWithComplexLhs2() {\n    testSame(\"function f() { return this; }\" +\n             \"var o = {'key': 'val'};\" +\n             \"f().foo = function() {\" +\n             \"  o\" +\n             \"};\");\n  }\n",
        "begin_line": 1262,
        "end_line": 1268,
        "comment": "",
        "child_ranges": [
            "(line 1263,col 5)-(line 1267,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentWithComplexLhs3()",
        "snippet": "  public void testAssignmentWithComplexLhs3() {\n    String source =\n        \"var o = {'key': 'val'};\" +\n        \"function init_() {\" +\n        \"  this.x = o['key']\" +\n        \"}\";\n\n    test(source, \"\");\n    testSame(source + \";init_()\");\n  }\n",
        "begin_line": 1270,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1271,col 5)-(line 1275,col 12)",
            "(line 1277,col 5)-(line 1277,col 21)",
            "(line 1278,col 5)-(line 1278,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentWithComplexLhs4()",
        "snippet": "  public void testAssignmentWithComplexLhs4() {\n    testSame(\"function f() { return this; }\" +\n             \"var o = {'key': 'val'};\" +\n             \"f().foo = function() {\" +\n             \"  this.x = o['key']\" +\n             \"};\");\n  }\n",
        "begin_line": 1281,
        "end_line": 1287,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 5)-(line 1286,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemovePrototypeDefinitionsOutsideGlobalScope1()",
        "snippet": "  public void testNoRemovePrototypeDefinitionsOutsideGlobalScope1() {\n    testSame(\"function f(arg){}\" +\n             \"\" +\n             \"(function(){\" +\n             \"  var O = {};\" +\n             \"  O.prototype = 'foo';\" +\n             \"  f(O);\" +\n             \"})()\");\n  }\n",
        "begin_line": 1294,
        "end_line": 1302,
        "comment": "\n   * Do not \"prototype\" property of variables that are not being\n   * tracked (because they are local).\n   * @bug 1809442\n   ",
        "child_ranges": [
            "(line 1295,col 5)-(line 1301,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemovePrototypeDefinitionsOutsideGlobalScope2()",
        "snippet": "  public void testNoRemovePrototypeDefinitionsOutsideGlobalScope2() {\n    testSame(\"function f(arg){}\" +\n             \"(function h(){\" +\n             \"  var L = {};\" +\n             \"  L.prototype = 'foo';\" +\n             \"  f(L);\" +\n             \"})()\");\n  }\n",
        "begin_line": 1304,
        "end_line": 1311,
        "comment": "",
        "child_ranges": [
            "(line 1305,col 5)-(line 1310,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemovePrototypeDefinitionsOutsideGlobalScope4()",
        "snippet": "  public void testNoRemovePrototypeDefinitionsOutsideGlobalScope4() {\n    testSame(\"function f(arg){}\" +\n             \"function g(){\" +\n             \"  var N = {};\" +\n             \"  N.prototype = 'foo';\" +\n             \"  f(N);\" +\n             \"}\" +\n             \"g()\");\n  }\n",
        "begin_line": 1313,
        "end_line": 1321,
        "comment": "",
        "child_ranges": [
            "(line 1314,col 5)-(line 1320,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemovePrototypeDefinitionsOutsideGlobalScope5()",
        "snippet": "  public void testNoRemovePrototypeDefinitionsOutsideGlobalScope5() {\n    // function body not removed due to @bug 1898561\n    testSame(\"function g(){ var R = {}; R.prototype = 'foo' } g()\");\n  }\n",
        "begin_line": 1323,
        "end_line": 1326,
        "comment": "",
        "child_ranges": [
            "(line 1325,col 5)-(line 1325,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemovePrototypeDefinitionsInGlobalScope1()",
        "snippet": "  public void testRemovePrototypeDefinitionsInGlobalScope1() {\n    testSame(\"function f(arg){}\" +\n             \"var M = {};\" +\n             \"M.prototype = 'foo';\" +\n             \"f(M);\");\n  }\n",
        "begin_line": 1328,
        "end_line": 1333,
        "comment": "",
        "child_ranges": [
            "(line 1329,col 5)-(line 1332,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemovePrototypeDefinitionsInGlobalScope2()",
        "snippet": "  public void testRemovePrototypeDefinitionsInGlobalScope2() {\n    test(\"var Q = {}; Q.prototype = 'foo'\", \"\");\n  }\n",
        "begin_line": 1335,
        "end_line": 1337,
        "comment": "",
        "child_ranges": [
            "(line 1336,col 5)-(line 1336,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveLabeledStatment()",
        "snippet": "  public void testRemoveLabeledStatment() {\n    test(\"LBL: var x = 1;\", \"LBL: {}\");\n  }\n",
        "begin_line": 1339,
        "end_line": 1341,
        "comment": "",
        "child_ranges": [
            "(line 1340,col 5)-(line 1340,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveLabeledStatment2()",
        "snippet": "  public void testRemoveLabeledStatment2() {\n    test(\"var x; LBL: x = f() + g()\", \"LBL: { f() ; g()}\");\n  }\n",
        "begin_line": 1343,
        "end_line": 1345,
        "comment": "",
        "child_ranges": [
            "(line 1344,col 5)-(line 1344,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveLabeledStatment3()",
        "snippet": "  public void testRemoveLabeledStatment3() {\n    test(\"var x; LBL: x = 1;\", \"LBL: {}\");\n  }\n",
        "begin_line": 1347,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1348,col 5)-(line 1348,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveLabeledStatment4()",
        "snippet": "  public void testRemoveLabeledStatment4() {\n    test(\"var a; LBL: a = f()\", \"LBL: f()\");\n  }\n",
        "begin_line": 1351,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 5)-(line 1352,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias1()",
        "snippet": "  public void testPreservePropertyMutationsToAlias1() {\n    // Test for issue b/2316773 - property get case\n    // Since a is referenced, property mutations via a's alias b must\n    // be preserved.\n    testSame(\"var a = {}; var b = a; b.x = 1; a\");\n  }\n",
        "begin_line": 1355,
        "end_line": 1360,
        "comment": "",
        "child_ranges": [
            "(line 1359,col 5)-(line 1359,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias2()",
        "snippet": "  public void testPreservePropertyMutationsToAlias2() {\n    // Test for issue b/2316773 - property get case, don't keep 'c'\n    test(\"var a = {}; var b = a; var c = a; b.x = 1; a\",\n         \"var a = {}; var b = a; b.x = 1; a\");\n  }\n",
        "begin_line": 1362,
        "end_line": 1366,
        "comment": "",
        "child_ranges": [
            "(line 1364,col 5)-(line 1365,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias3()",
        "snippet": "  public void testPreservePropertyMutationsToAlias3() {\n    // Test for issue b/2316773 - property get case, chain\n    testSame(\"var a = {}; var b = a; var c = b; c.x = 1; a\");\n  }\n",
        "begin_line": 1368,
        "end_line": 1371,
        "comment": "",
        "child_ranges": [
            "(line 1370,col 5)-(line 1370,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias4()",
        "snippet": " public void testPreservePropertyMutationsToAlias4() {\n    // Test for issue b/2316773 - element get case\n    testSame(\"var a = {}; var b = a; b['x'] = 1; a\");\n  }\n",
        "begin_line": 1373,
        "end_line": 1376,
        "comment": "",
        "child_ranges": [
            "(line 1375,col 5)-(line 1375,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias5()",
        "snippet": "  public void testPreservePropertyMutationsToAlias5() {\n    // From issue b/2316773 description\n    testSame(\"function testCall(o){}\" +\n             \"var DATA = {'prop': 'foo','attr': {}};\" +\n             \"var SUBDATA = DATA['attr'];\" +\n             \"SUBDATA['subprop'] = 'bar';\" +\n             \"testCall(DATA);\");\n  }\n",
        "begin_line": 1378,
        "end_line": 1385,
        "comment": "",
        "child_ranges": [
            "(line 1380,col 5)-(line 1384,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias6()",
        "snippet": "  public void testPreservePropertyMutationsToAlias6() {\n    // Longer GETELEM chain\n    testSame(\"function testCall(o){}\" +\n             \"var DATA = {'prop': 'foo','attr': {}};\" +\n             \"var SUBDATA = DATA['attr'];\" +\n             \"var SUBSUBDATA = SUBDATA['subprop'];\" +\n             \"SUBSUBDATA['subsubprop'] = 'bar';\" +\n             \"testCall(DATA);\");\n  }\n",
        "begin_line": 1387,
        "end_line": 1395,
        "comment": "",
        "child_ranges": [
            "(line 1389,col 5)-(line 1394,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias7()",
        "snippet": "  public void testPreservePropertyMutationsToAlias7() {\n    // Make sure that the base class does not depend on the derived class.\n    test(\"var a = {}; var b = {}; b.x = 0;\" +\n         \"var goog = {}; goog.inherits(b, a); a\",\n         \"var a = {}; a\");\n  }\n",
        "begin_line": 1397,
        "end_line": 1402,
        "comment": "",
        "child_ranges": [
            "(line 1399,col 5)-(line 1401,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias8()",
        "snippet": "  public void testPreservePropertyMutationsToAlias8() {\n    // Make sure that the derived classes don't end up depending on each other.\n    test(\"var a = {};\" +\n         \"var b = {}; b.x = 0;\" +\n         \"var c = {}; c.y = 0;\" +\n         \"var goog = {}; goog.inherits(b, a); goog.inherits(c, a); c\",\n         \"var a = {}; var c = {}; c.y = 0;\" +\n         \"var goog = {}; goog.inherits(c, a); c\");\n  }\n",
        "begin_line": 1404,
        "end_line": 1412,
        "comment": "",
        "child_ranges": [
            "(line 1406,col 5)-(line 1411,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias9()",
        "snippet": "  public void testPreservePropertyMutationsToAlias9() {\n    testSame(\"var a = {b: {}};\" +\n         \"var c = a.b; c.d = 3;\" +\n         \"a.d = 3; a.d;\");\n  }\n",
        "begin_line": 1414,
        "end_line": 1418,
        "comment": "",
        "child_ranges": [
            "(line 1415,col 5)-(line 1417,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveAlias()",
        "snippet": "  public void testRemoveAlias() {\n    test(\"var a = {b: {}};\" +\n         \"var c = a.b;\" +\n         \"a.d = 3; a.d;\",\n         \"var a = {b: {}}; a.d = 3; a.d;\");\n  }\n",
        "begin_line": 1420,
        "end_line": 1425,
        "comment": "",
        "child_ranges": [
            "(line 1421,col 5)-(line 1424,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSingletonGetter1()",
        "snippet": "  public void testSingletonGetter1() {\n    test(\"function Foo() {} goog.addSingletonGetter(Foo);\", \"\");\n  }\n",
        "begin_line": 1427,
        "end_line": 1429,
        "comment": "",
        "child_ranges": [
            "(line 1428,col 5)-(line 1428,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSingletonGetter2()",
        "snippet": "  public void testSingletonGetter2() {\n    test(\"function Foo() {} goog$addSingletonGetter(Foo);\", \"\");\n  }\n",
        "begin_line": 1431,
        "end_line": 1433,
        "comment": "",
        "child_ranges": [
            "(line 1432,col 5)-(line 1432,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSingletonGetter3()",
        "snippet": "  public void testSingletonGetter3() {\n    // addSingletonGetter adds a getInstance method to a class.\n    testSame(\"function Foo() {} goog$addSingletonGetter(Foo);\" +\n        \"this.x = Foo.getInstance();\");\n  }\n",
        "begin_line": 1435,
        "end_line": 1439,
        "comment": "",
        "child_ranges": [
            "(line 1437,col 5)-(line 1438,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias1()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias1() {\n     testSame(\n         \"var self_ = window.gbar;\\n\" +\n         \"self_.qs = function() {};\");\n  }\n",
        "begin_line": 1449,
        "end_line": 1453,
        "comment": "",
        "child_ranges": [
            "(line 1450,col 6)-(line 1452,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias2()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias2() {\n    testSame(\n        \"var self_ = window;\\n\" +\n        \"self_.qs = function() {};\");\n  }\n",
        "begin_line": 1455,
        "end_line": 1459,
        "comment": "",
        "child_ranges": [
            "(line 1456,col 5)-(line 1458,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias3()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias3() {\n    testSame(\n        \"var self_ = window;\\n\" +\n        \"self_['qs'] = function() {};\");\n  }\n",
        "begin_line": 1461,
        "end_line": 1465,
        "comment": "",
        "child_ranges": [
            "(line 1462,col 5)-(line 1464,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAlias0()",
        "snippet": "  public void testNoRemoveAlias0() {\n    testSame(\n        \"var x = {}; function f() { return x; }; \" +\n        \"f().style.display = 'block';\" +\n        \"alert(x.style)\");\n  }\n",
        "begin_line": 1467,
        "end_line": 1472,
        "comment": "",
        "child_ranges": [
            "(line 1468,col 5)-(line 1471,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAlias1()",
        "snippet": "  public void testNoRemoveAlias1() {\n    testSame(\n        \"var x = {}; function f() { return x; };\" +\n        \"var map = f();\\n\" +\n        \"map.style.display = 'block';\" +\n        \"alert(x.style)\");\n  }\n",
        "begin_line": 1474,
        "end_line": 1480,
        "comment": "",
        "child_ranges": [
            "(line 1475,col 5)-(line 1479,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAlias2()",
        "snippet": "  public void testNoRemoveAlias2() {\n    testSame(\n        \"var x = {};\" +\n        \"var map = (function () { return x; })();\\n\" +\n        \"map.style = 'block';\" +\n        \"alert(x.style)\");\n  }\n",
        "begin_line": 1482,
        "end_line": 1488,
        "comment": "",
        "child_ranges": [
            "(line 1483,col 5)-(line 1487,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAlias3()",
        "snippet": "  public void testNoRemoveAlias3() {\n    testSame(\n        \"var x = {}; function f() { return x; };\" +\n        \"var map = {}\\n\" +\n        \"map[1] = f();\\n\" +\n        \"map[1].style.display = 'block';\");\n  }\n",
        "begin_line": 1490,
        "end_line": 1496,
        "comment": "",
        "child_ranges": [
            "(line 1491,col 5)-(line 1495,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAliasOfExternal0()",
        "snippet": "  public void testNoRemoveAliasOfExternal0() {\n    testSame(\n        \"document.getElementById('foo').style.display = 'block';\");\n  }\n",
        "begin_line": 1498,
        "end_line": 1501,
        "comment": "",
        "child_ranges": [
            "(line 1499,col 5)-(line 1500,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAliasOfExternal1()",
        "snippet": "  public void testNoRemoveAliasOfExternal1() {\n    testSame(\n        \"var map = document.getElementById('foo');\\n\" +\n        \"map.style.display = 'block';\");\n  }\n",
        "begin_line": 1503,
        "end_line": 1507,
        "comment": "",
        "child_ranges": [
            "(line 1504,col 5)-(line 1506,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAliasOfExternal2()",
        "snippet": "  public void testNoRemoveAliasOfExternal2() {\n    testSame(\n        \"var map = {}\\n\" +\n        \"map[1] = document.getElementById('foo');\\n\" +\n        \"map[1].style.display = 'block';\");\n  }\n",
        "begin_line": 1509,
        "end_line": 1514,
        "comment": "",
        "child_ranges": [
            "(line 1510,col 5)-(line 1513,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveThrowReference1()",
        "snippet": "  public void testNoRemoveThrowReference1() {\n    testSame(\n      \"var e = {}\\n\" +\n      \"throw e;\");\n  }\n",
        "begin_line": 1516,
        "end_line": 1520,
        "comment": "",
        "child_ranges": [
            "(line 1517,col 5)-(line 1519,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveThrowReference2()",
        "snippet": "  public void testNoRemoveThrowReference2() {\n    testSame(\n      \"function e() {}\\n\" +\n      \"throw new e();\");\n  }\n",
        "begin_line": 1522,
        "end_line": 1526,
        "comment": "",
        "child_ranges": [
            "(line 1523,col 5)-(line 1525,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testClassDefinedInObjectLit1()",
        "snippet": "  public void testClassDefinedInObjectLit1() {\n    test(\n      \"var data = {Foo: function() {}};\" +\n      \"data.Foo.prototype.toString = function() {};\",\n      \"\");\n  }\n",
        "begin_line": 1528,
        "end_line": 1533,
        "comment": "",
        "child_ranges": [
            "(line 1529,col 5)-(line 1532,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testClassDefinedInObjectLit2()",
        "snippet": "  public void testClassDefinedInObjectLit2() {\n    test(\n      \"var data = {}; data.bar = {Foo: function() {}};\" +\n      \"data.bar.Foo.prototype.toString = function() {};\",\n      \"\");\n  }\n",
        "begin_line": 1535,
        "end_line": 1540,
        "comment": "",
        "child_ranges": [
            "(line 1536,col 5)-(line 1539,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testClassDefinedInObjectLit3()",
        "snippet": "  public void testClassDefinedInObjectLit3() {\n    test(\n      \"var data = {bar: {Foo: function() {}}};\" +\n      \"data.bar.Foo.prototype.toString = function() {};\",\n      \"\");\n  }\n",
        "begin_line": 1542,
        "end_line": 1547,
        "comment": "",
        "child_ranges": [
            "(line 1543,col 5)-(line 1546,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testClassDefinedInObjectLit4()",
        "snippet": "  public void testClassDefinedInObjectLit4() {\n    test(\n      \"var data = {};\" +\n      \"data.baz = {bar: {Foo: function() {}}};\" +\n      \"data.baz.bar.Foo.prototype.toString = function() {};\",\n      \"\");\n  }\n",
        "begin_line": 1549,
        "end_line": 1555,
        "comment": "",
        "child_ranges": [
            "(line 1550,col 5)-(line 1554,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testVarReferencedInClassDefinedInObjectLit1()",
        "snippet": "  public void testVarReferencedInClassDefinedInObjectLit1() {\n    testSame(\n      \"var ref = 3;\" +\n      \"var data = {Foo: function() { this.x = ref; }};\" +\n      \"window.Foo = data.Foo;\");\n  }\n",
        "begin_line": 1557,
        "end_line": 1562,
        "comment": "",
        "child_ranges": [
            "(line 1558,col 5)-(line 1561,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testVarReferencedInClassDefinedInObjectLit2()",
        "snippet": "  public void testVarReferencedInClassDefinedInObjectLit2() {\n    testSame(\n      \"var ref = 3;\" +\n      \"var data = {Foo: function() { this.x = ref; },\" +\n      \"            Bar: function() {}};\" +\n      \"window.Bar = data.Bar;\");\n  }\n",
        "begin_line": 1564,
        "end_line": 1570,
        "comment": "",
        "child_ranges": [
            "(line 1565,col 5)-(line 1569,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testArrayExt()",
        "snippet": "  public void testArrayExt() {\n    testSame(\n      \"Array.prototype.foo = function() { return 1 };\" +\n      \"var y = [];\" +\n      \"switch (y.foo()) {\" +\n      \"}\");\n  }\n",
        "begin_line": 1572,
        "end_line": 1578,
        "comment": "",
        "child_ranges": [
            "(line 1573,col 5)-(line 1577,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testArrayAliasExt()",
        "snippet": "  public void testArrayAliasExt() {\n    testSame(\n      \"Array$X = Array;\" +\n      \"Array$X.prototype.foo = function() { return 1 };\" +\n      \"function Array$X() {}\" +\n      \"var y = [];\" +\n      \"switch (y.foo()) {\" +\n      \"}\");\n  }\n",
        "begin_line": 1580,
        "end_line": 1588,
        "comment": "",
        "child_ranges": [
            "(line 1581,col 5)-(line 1587,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExternalAliasInstanceof1()",
        "snippet": "  public void testExternalAliasInstanceof1() {\n    test(\n      \"Array$X = Array;\" +\n      \"function Array$X() {}\" +\n      \"var y = [];\" +\n      \"if (y instanceof Array) {}\",\n      \"var y = [];\" +\n      \"if (y instanceof Array) {}\"\n      );\n  }\n",
        "begin_line": 1590,
        "end_line": 1599,
        "comment": "",
        "child_ranges": [
            "(line 1591,col 5)-(line 1598,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExternalAliasInstanceof2()",
        "snippet": "  public void testExternalAliasInstanceof2() {\n    testSame(\n      \"Array$X = Array;\" +\n      \"function Array$X() {}\" +\n      \"var y = [];\" +\n      \"if (y instanceof Array$X) {}\");\n  }\n",
        "begin_line": 1601,
        "end_line": 1607,
        "comment": "",
        "child_ranges": [
            "(line 1602,col 5)-(line 1606,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExternalAliasInstanceof3()",
        "snippet": "  public void testExternalAliasInstanceof3() {\n    testSame(\n      \"var b = Array;\" +\n      \"var y = [];\" +\n      \"if (y instanceof b) {}\");\n  }\n",
        "begin_line": 1609,
        "end_line": 1614,
        "comment": "",
        "child_ranges": [
            "(line 1610,col 5)-(line 1613,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAliasInstanceof4()",
        "snippet": "  public void testAliasInstanceof4() {\n    testSame(\n      \"function Foo() {};\" +\n      \"var b = Foo;\" +\n      \"var y = new Foo();\" +\n      \"if (y instanceof b) {}\");\n  }\n",
        "begin_line": 1616,
        "end_line": 1622,
        "comment": "",
        "child_ranges": [
            "(line 1617,col 5)-(line 1621,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAliasInstanceof5()",
        "snippet": "  public void testAliasInstanceof5() {\n    // TODO(johnlenz): fix this. \"b\" should remain.\n    test(\n      \"function Foo() {}\" +\n      \"function Bar() {}\" +\n      \"var b = x ? Foo : Bar;\" +\n      \"var y = new Foo();\" +\n      \"if (y instanceof b) {}\",\n      \"function Foo() {}\" +\n      \"var y = new Foo;\" +\n      \"if (false){}\");\n  }\n",
        "begin_line": 1624,
        "end_line": 1635,
        "comment": "",
        "child_ranges": [
            "(line 1626,col 5)-(line 1634,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testBrokenNamespaceWithPrototypeAssignment()",
        "snippet": "  public void testBrokenNamespaceWithPrototypeAssignment() {\n    test(\"var x = {}; x.a.prototype = 1\", \"\");\n  }\n",
        "begin_line": 1639,
        "end_line": 1641,
        "comment": " fail sanity var check.",
        "child_ranges": [
            "(line 1640,col 5)-(line 1640,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIssue284()",
        "snippet": "  public void testIssue284() {\n    test(\n        \"var goog = {};\" +\n        \"goog.inherits = function(x, y) {};\" +\n        \"var ns = {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.FooEvent = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.SelectEvent = function() {};\" +\n        \"goog.inherits(ns.PageSelectionModel.ChangeEvent,\" +\n        \"    ns.PageSelectionModel.FooEvent);\",\n        \"\");\n  }\n",
        "begin_line": 1643,
        "end_line": 1657,
        "comment": "",
        "child_ranges": [
            "(line 1644,col 5)-(line 1656,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(Compiler compiler) {\n    return new MarkNoSideEffectCallsAndNameAnalyzerRunner(compiler);\n  }\n",
        "begin_line": 1660,
        "end_line": 1663,
        "comment": "",
        "child_ranges": [
            "(line 1662,col 5)-(line 1662,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.MarkNoSideEffectCallsAndNameAnalyzerRunner.MarkNoSideEffectCallsAndNameAnalyzerRunner(com.google.javascript.jscomp.Compiler)",
        "snippet": "    MarkNoSideEffectCallsAndNameAnalyzerRunner(Compiler compiler) {\n      this.markNoSideEffectCalls = new MarkNoSideEffectCalls(compiler);\n      this.analyzer = new NameAnalyzer(compiler, true);\n    }\n",
        "begin_line": 1669,
        "end_line": 1672,
        "comment": "",
        "child_ranges": [
            "(line 1670,col 7)-(line 1670,col 71)",
            "(line 1671,col 7)-(line 1671,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.MarkNoSideEffectCallsAndNameAnalyzerRunner.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      markNoSideEffectCalls.process(externs, root);\n      analyzer.process(externs, root);\n    }\n",
        "begin_line": 1674,
        "end_line": 1678,
        "comment": "",
        "child_ranges": [
            "(line 1676,col 7)-(line 1676,col 51)",
            "(line 1677,col 7)-(line 1677,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 120,
        "end_line": 126,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 121,col 5)-(line 123,col 6)",
            "(line 124,col 5)-(line 124,col 39)",
            "(line 125,col 5)-(line 125,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 133,col 5)-(line 133,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 139,
        "end_line": 141,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 149,
        "end_line": 149,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 156,
        "end_line": 158,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 164,
        "end_line": 177,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 165,col 5)-(line 167,col 5)",
            "(line 171,col 5)-(line 171,col 32)",
            "(line 173,col 5)-(line 174,col 65)",
            "(line 175,col 5)-(line 175,col 55)",
            "(line 176,col 5)-(line 176,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 191,
        "end_line": 195,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 198,
        "end_line": 200,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 210,
        "end_line": 212,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 211,col 5)-(line 211,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 218,col 5)-(line 218,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 229,
        "end_line": 232,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 230,col 5)-(line 230,col 29)",
            "(line 231,col 5)-(line 231,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 238,col 5)-(line 238,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 256,
        "end_line": 258,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 257,col 5)-(line 257,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 268,
        "end_line": 271,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 269,col 5)-(line 269,col 28)",
            "(line 270,col 5)-(line 270,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 286,
        "end_line": 288,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 287,col 5)-(line 287,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 293,
        "end_line": 295,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 294,col 5)-(line 294,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 298,
        "end_line": 306,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 300,col 5)-(line 302,col 40)",
            "(line 304,col 5)-(line 305,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 314,
        "end_line": 316,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 327,col 5)-(line 327,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 341,
        "end_line": 344,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 343,col 5)-(line 343,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 356,
        "end_line": 359,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 372,
        "end_line": 375,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 374,col 5)-(line 374,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 391,
        "end_line": 398,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 394,col 5)-(line 396,col 6)",
            "(line 397,col 5)-(line 397,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(filename, js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 414,
        "end_line": 434,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 417,col 5)-(line 417,col 41)",
            "(line 418,col 5)-(line 418,col 28)",
            "(line 420,col 5)-(line 420,col 43)",
            "(line 422,col 5)-(line 424,col 5)",
            "(line 427,col 5)-(line 427,col 39)",
            "(line 428,col 5)-(line 429,col 56)",
            "(line 431,col 5)-(line 431,col 71)",
            "(line 433,col 5)-(line 433,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 442,
        "end_line": 444,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 443,col 5)-(line 443,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 454,
        "end_line": 456,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 455,col 5)-(line 455,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 468,
        "end_line": 471,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 470,col 5)-(line 470,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 486,
        "end_line": 497,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 488,col 5)-(line 488,col 41)",
            "(line 489,col 5)-(line 489,col 28)",
            "(line 491,col 5)-(line 491,col 56)",
            "(line 492,col 5)-(line 494,col 5)",
            "(line 495,col 5)-(line 495,col 55)",
            "(line 496,col 5)-(line 496,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 505,
        "end_line": 507,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 506,col 5)-(line 506,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 517,
        "end_line": 520,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 519,col 5)-(line 519,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 532,
        "end_line": 539,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 534,col 5)-(line 534,col 41)",
            "(line 535,col 5)-(line 535,col 28)",
            "(line 537,col 5)-(line 537,col 56)",
            "(line 538,col 5)-(line 538,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 546,
        "end_line": 548,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 547,col 5)-(line 547,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 557,
        "end_line": 559,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 558,col 5)-(line 558,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 569,
        "end_line": 575,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 570,col 5)-(line 574,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 585,
        "end_line": 587,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 586,col 5)-(line 586,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 598,
        "end_line": 605,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 600,col 5)-(line 604,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 618,
        "end_line": 624,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 620,col 5)-(line 622,col 6)",
            "(line 623,col 5)-(line 623,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 631,
        "end_line": 633,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 632,col 5)-(line 632,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 642,
        "end_line": 644,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 643,col 5)-(line 643,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 654,
        "end_line": 657,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 656,col 5)-(line 656,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 664,
        "end_line": 666,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 665,col 5)-(line 665,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 674,
        "end_line": 687,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 675,col 5)-(line 686,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 700,
        "end_line": 703,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 702,col 5)-(line 702,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 720,
        "end_line": 926,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 723,col 5)-(line 723,col 51)",
            "(line 724,col 5)-(line 724,col 44)",
            "(line 726,col 5)-(line 726,col 39)",
            "(line 727,col 5)-(line 728,col 66)",
            "(line 730,col 5)-(line 732,col 5)",
            "(line 733,col 5)-(line 733,col 44)",
            "(line 734,col 5)-(line 734,col 40)",
            "(line 737,col 5)-(line 737,col 38)",
            "(line 738,col 5)-(line 738,col 54)",
            "(line 739,col 5)-(line 739,col 50)",
            "(line 741,col 5)-(line 741,col 45)",
            "(line 742,col 5)-(line 742,col 68)",
            "(line 743,col 5)-(line 743,col 34)",
            "(line 744,col 5)-(line 744,col 59)",
            "(line 745,col 5)-(line 745,col 35)",
            "(line 747,col 5)-(line 748,col 39)",
            "(line 750,col 5)-(line 793,col 5)",
            "(line 795,col 5)-(line 925,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 928,
        "end_line": 932,
        "comment": "",
        "child_ranges": [
            "(line 930,col 5)-(line 930,col 57)",
            "(line 931,col 5)-(line 931,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 937,
        "end_line": 955,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 938,col 5)-(line 938,col 41)",
            "(line 939,col 5)-(line 939,col 62)",
            "(line 940,col 5)-(line 942,col 5)",
            "(line 943,col 5)-(line 943,col 55)",
            "(line 944,col 5)-(line 944,col 39)",
            "(line 945,col 5)-(line 946,col 66)",
            "(line 947,col 5)-(line 947,col 44)",
            "(line 948,col 5)-(line 948,col 42)",
            "(line 950,col 5)-(line 953,col 5)",
            "(line 954,col 5)-(line 954,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 957,
        "end_line": 959,
        "comment": "",
        "child_ranges": [
            "(line 958,col 5)-(line 958,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 965,
        "end_line": 971,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 966,col 5)-(line 966,col 47)",
            "(line 967,col 5)-(line 969,col 5)",
            "(line 970,col 5)-(line 970,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 977,
        "end_line": 983,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 978,col 5)-(line 978,col 47)",
            "(line 979,col 5)-(line 981,col 5)",
            "(line 982,col 5)-(line 982,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 990,
        "end_line": 997,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 991,col 5)-(line 991,col 48)",
            "(line 992,col 5)-(line 992,col 47)",
            "(line 993,col 5)-(line 995,col 5)",
            "(line 996,col 5)-(line 996,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1004,
        "end_line": 1010,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1005,col 5)-(line 1005,col 47)",
            "(line 1006,col 5)-(line 1008,col 5)",
            "(line 1009,col 5)-(line 1009,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1016,
        "end_line": 1023,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1017,col 5)-(line 1017,col 53)",
            "(line 1018,col 5)-(line 1021,col 5)",
            "(line 1022,col 5)-(line 1022,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1026,
        "end_line": 1028,
        "comment": "",
        "child_ranges": [
            "(line 1027,col 7)-(line 1027,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1030,
        "end_line": 1031,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1033,
        "end_line": 1034,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1037,
        "end_line": 1040,
        "comment": "",
        "child_ranges": [
            "(line 1038,col 5)-(line 1038,col 39)",
            "(line 1039,col 5)-(line 1039,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1042,
        "end_line": 1044,
        "comment": "",
        "child_ranges": [
            "(line 1043,col 5)-(line 1043,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1047,
        "end_line": 1059,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1048,col 5)-(line 1048,col 52)",
            "(line 1049,col 5)-(line 1057,col 39)",
            "(line 1058,col 5)-(line 1058,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-73d633fa-5a6a-48b7-933c-02da547d1edc.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1051,
        "end_line": 1055,
        "comment": "",
        "child_ranges": [
            "(line 1052,col 13)-(line 1054,col 13)"
        ]
    }
]