[
    {
        "name": "Node.toString#926",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(boolean, boolean, boolean)",
        "snippet": "  public String toString(\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    StringBuilder sb = new StringBuilder();\n    toString(sb, printSource, printAnnotations, printType);\n    return sb.toString();\n  }\n",
        "begin_line": 926,
        "end_line": 933,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.toString#935",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(java.lang.StringBuilder, boolean, boolean, boolean)",
        "snippet": "  private void toString(\n      StringBuilder sb,\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    sb.append(Token.name(type));\n    if (this instanceof StringNode) {\n      sb.append(' ');\n      sb.append(getString());\n    } else if (type == Token.FUNCTION) {\n      sb.append(' ');\n      // In the case of JsDoc trees, the first child is often not a string\n      // which causes exceptions to be thrown when calling toString or\n      // toStringTree.\n      if (first == null || first.getType() != Token.NAME) {\n        sb.append(\"<invalid>\");\n      } else {\n        sb.append(first.getString());\n      }\n    } else if (type == Token.NUMBER) {\n      sb.append(' ');\n      sb.append(getDouble());\n    }\n    if (printSource) {\n      int lineno = getLineno();\n      if (lineno != -1) {\n        sb.append(' ');\n        sb.append(lineno);\n      }\n    }\n\n    if (printAnnotations) {\n      int[] keys = getSortedPropTypes();\n      for (int i = 0; i < keys.length; i++) {\n        int type = keys[i];\n        PropListItem x = lookupProperty(type);\n        sb.append(\" [\");\n        sb.append(propToString(type));\n        sb.append(\": \");\n        String value;\n        switch (type) {\n          default:\n            value = x.toString();\n            break;\n        }\n        sb.append(value);\n        sb.append(']');\n      }\n    }\n\n    if (printType) {\n      if (jsType != null) {\n        String jsTypeString = jsType.toString();\n        if (jsTypeString != null) {\n          sb.append(\" : \");\n          sb.append(jsTypeString);\n        }\n      }\n    }\n  }\n",
        "begin_line": 935,
        "end_line": 994,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "Token.name#179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "class_name": "com.google.javascript.rhino.Token",
        "signature": "com.google.javascript.rhino.Token.name(int)",
        "snippet": "  public static String name(int token) {\n        switch (token) {\n          case ERROR:           return \"ERROR\";\n          case RETURN:          return \"RETURN\";\n          case BITOR:           return \"BITOR\";\n          case BITXOR:          return \"BITXOR\";\n          case BITAND:          return \"BITAND\";\n          case EQ:              return \"EQ\";\n          case NE:              return \"NE\";\n          case LT:              return \"LT\";\n          case LE:              return \"LE\";\n          case GT:              return \"GT\";\n          case GE:              return \"GE\";\n          case LSH:             return \"LSH\";\n          case RSH:             return \"RSH\";\n          case URSH:            return \"URSH\";\n          case ADD:             return \"ADD\";\n          case SUB:             return \"SUB\";\n          case MUL:             return \"MUL\";\n          case DIV:             return \"DIV\";\n          case MOD:             return \"MOD\";\n          case NOT:             return \"NOT\";\n          case BITNOT:          return \"BITNOT\";\n          case POS:             return \"POS\";\n          case NEG:             return \"NEG\";\n          case NEW:             return \"NEW\";\n          case DELPROP:         return \"DELPROP\";\n          case TYPEOF:          return \"TYPEOF\";\n          case GETPROP:         return \"GETPROP\";\n          case GETELEM:         return \"GETELEM\";\n          case CALL:            return \"CALL\";\n          case NAME:            return \"NAME\";\n          case LABEL_NAME:      return \"LABEL_NAME\";\n          case NUMBER:          return \"NUMBER\";\n          case STRING:          return \"STRING\";\n          case NULL:            return \"NULL\";\n          case THIS:            return \"THIS\";\n          case FALSE:           return \"FALSE\";\n          case TRUE:            return \"TRUE\";\n          case SHEQ:            return \"SHEQ\";\n          case SHNE:            return \"SHNE\";\n          case REGEXP:          return \"REGEXP\";\n          case THROW:           return \"THROW\";\n          case IN:              return \"IN\";\n          case INSTANCEOF:      return \"INSTANCEOF\";\n          case ARRAYLIT:        return \"ARRAYLIT\";\n          case OBJECTLIT:       return \"OBJECTLIT\";\n          case TRY:             return \"TRY\";\n          case PARAM_LIST:      return \"PARAM_LIST\";\n          case COMMA:           return \"COMMA\";\n          case ASSIGN:          return \"ASSIGN\";\n          case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n          case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n          case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n          case ASSIGN_LSH:      return \"ASSIGN_LSH\";\n          case ASSIGN_RSH:      return \"ASSIGN_RSH\";\n          case ASSIGN_URSH:     return \"ASSIGN_URSH\";\n          case ASSIGN_ADD:      return \"ASSIGN_ADD\";\n          case ASSIGN_SUB:      return \"ASSIGN_SUB\";\n          case ASSIGN_MUL:      return \"ASSIGN_MUL\";\n          case ASSIGN_DIV:      return \"ASSIGN_DIV\";\n          case ASSIGN_MOD:      return \"ASSIGN_MOD\";\n          case HOOK:            return \"HOOK\";\n          case COLON:           return \"COLON\";\n          case OR:              return \"OR\";\n          case AND:             return \"AND\";\n          case INC:             return \"INC\";\n          case DEC:             return \"DEC\";\n          case FUNCTION:        return \"FUNCTION\";\n          case IF:              return \"IF\";\n          case SWITCH:          return \"SWITCH\";\n          case CASE:            return \"CASE\";\n          case DEFAULT_CASE:    return \"DEFAULT_CASE\";\n          case WHILE:           return \"WHILE\";\n          case DO:              return \"DO\";\n          case FOR:             return \"FOR\";\n          case BREAK:           return \"BREAK\";\n          case CONTINUE:        return \"CONTINUE\";\n          case VAR:             return \"VAR\";\n          case WITH:            return \"WITH\";\n          case CATCH:           return \"CATCH\";\n          case EMPTY:           return \"EMPTY\";\n          case BLOCK:           return \"BLOCK\";\n          case LABEL:           return \"LABEL\";\n          case EXPR_RESULT:     return \"EXPR_RESULT\";\n          case SCRIPT:          return \"SCRIPT\";\n          case GETTER_DEF:      return \"GETTER_DEF\";\n          case SETTER_DEF:      return \"SETTER_DEF\";\n          case CONST:           return \"CONST\";\n          case DEBUGGER:        return \"DEBUGGER\";\n          case ANNOTATION:      return \"ANNOTATION\";\n          case PIPE:            return \"PIPE\";\n          case STAR:            return \"STAR\";\n          case EOC:             return \"EOC\";\n          case QMARK:           return \"QMARK\";\n          case ELLIPSIS:        return \"ELLIPSIS\";\n          case BANG:            return \"BANG\";\n          case VOID:            return \"VOID\";\n          case EQUALS:          return \"EQUALS\";\n        }\n\n        // Token without name\n        throw new IllegalStateException(String.valueOf(token));\n    }\n",
        "begin_line": 179,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.toString#317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return objectValue == null ? \"null\" : objectValue.toString();\n    }\n",
        "begin_line": 317,
        "end_line": 320,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.NodeMismatch#2125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NodeMismatch.NodeMismatch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    NodeMismatch(Node nodeA, Node nodeB) {\n      this.nodeA = nodeA;\n      this.nodeB = nodeB;\n    }\n",
        "begin_line": 2125,
        "end_line": 2128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#349",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return String.valueOf(intValue);\n    }\n",
        "begin_line": 349,
        "end_line": 352,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.propToString#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.propToString(int)",
        "snippet": "  private static final String propToString(int propType) {\n      switch (propType) {\n        case BRACELESS_TYPE:     return \"braceless_type\";\n        case VAR_ARGS_NAME:      return \"var_args_name\";\n        case SOURCENAME_PROP:    return \"sourcename\";\n\n        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n\n        case INCRDECR_PROP:      return \"incrdecr\";\n        case PARENTHESIZED_PROP: return \"parenthesized\";\n        case QUOTED_PROP:        return \"quoted\";\n        case OPT_ARG_NAME:       return \"opt_arg\";\n\n        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n        case EMPTY_BLOCK:        return \"empty_block\";\n        case ORIGINALNAME_PROP:  return \"originalname\";\n        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n        case IS_OPTIONAL_PARAM:  return \"is_optional_param\";\n        case IS_VAR_ARGS_PARAM:  return \"is_var_args_param\";\n        case IS_NAMESPACE:       return \"is_namespace\";\n        case IS_DISPATCHER:      return \"is_dispatcher\";\n        case DIRECTIVES:         return \"directives\";\n        case DIRECT_EVAL:        return \"direct_eval\";\n        case FREE_CALL:          return \"free_call\";\n        case STATIC_SOURCE_FILE:    return \"source_file\";\n        case INPUT_ID:  return \"input_id\";\n        case LENGTH:    return \"length\";\n        default:\n          throw new IllegalStateException(\"unexpect prop id \" + propType);\n      }\n  }\n",
        "begin_line": 116,
        "end_line": 148,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getSortedPropTypes#865",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSortedPropTypes()",
        "snippet": "  private int[] getSortedPropTypes() {\n    int count = 0;\n    for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n      count++;\n    }\n\n    int[] keys = new int[count];\n    for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n      count--;\n      keys[count] = x.getType();\n    }\n\n    Arrays.sort(keys);\n    return keys;\n  }\n",
        "begin_line": 865,
        "end_line": 879,
        "comment": " Gets all the property types, in sorted order.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#921",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toString(true, true, true);\n  }\n",
        "begin_line": 921,
        "end_line": 924,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTree#997",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTree()",
        "snippet": "  public String toStringTree() {\n    return toStringTreeImpl();\n  }\n",
        "begin_line": 997,
        "end_line": 999,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTreeImpl#1001",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeImpl()",
        "snippet": "  private String toStringTreeImpl() {\n    try {\n      StringBuilder s = new StringBuilder();\n      appendStringTree(s);\n      return s.toString();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Should not happen\\n\" + e);\n    }\n  }\n",
        "begin_line": 1001,
        "end_line": 1009,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.appendStringTree#1011",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.appendStringTree(java.lang.Appendable)",
        "snippet": "  public void appendStringTree(Appendable appendable) throws IOException {\n    toStringTreeHelper(this, 0, appendable);\n  }\n",
        "begin_line": 1011,
        "end_line": 1013,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTreeHelper#1015",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeHelper(com.google.javascript.rhino.Node, int, java.lang.Appendable)",
        "snippet": "  private static void toStringTreeHelper(Node n, int level, Appendable sb)\n      throws IOException {\n    for (int i = 0; i != level; ++i) {\n      sb.append(\"    \");\n    }\n    sb.append(n.toString());\n    sb.append('\\n');\n    for (Node cursor = n.getFirstChild();\n         cursor != null;\n         cursor = cursor.getNext()) {\n      toStringTreeHelper(cursor, level + 1, sb);\n    }\n  }\n",
        "begin_line": 1015,
        "end_line": 1027,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.checkTreeEquals#1409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEquals(com.google.javascript.rhino.Node)",
        "snippet": "  public String checkTreeEquals(Node node2) {\n      NodeMismatch diff = checkTreeEqualsImpl(node2);\n      if (diff != null) {\n        return \"Node tree inequality:\" +\n            \"\\nTree1:\\n\" + toStringTree() +\n            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n      }\n      return null;\n  }\n",
        "begin_line": 1409,
        "end_line": 1419,
        "comment": "\n   * Checks if the subtree under this node is the same as another subtree.\n   * Returns null if it's equal, or a message describing the differences.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.checkTreeEqualsImpl#1426",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEqualsImpl(com.google.javascript.rhino.Node)",
        "snippet": "  NodeMismatch checkTreeEqualsImpl(Node node2) {\n    if (!isEquivalentTo(node2, false, false)) {\n      return new NodeMismatch(this, node2);\n    }\n\n    NodeMismatch res = null;\n    Node n, n2;\n    for (n = first, n2 = node2.first;\n         res == null && n != null;\n         n = n.next, n2 = n2.next) {\n      if (node2 == null) {\n        throw new IllegalStateException();\n      }\n      res = n.checkTreeEqualsImpl(n2);\n      if (res != null) {\n        return res;\n      }\n    }\n    return res;\n  }\n",
        "begin_line": 1426,
        "end_line": 1445,
        "comment": "\n   * Compare this node to node2 recursively and return the first pair of nodes\n   * that differs doing a preorder depth-first traversal. Package private for\n   * testing. Returns null if the nodes are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.toString#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"InputId: \" + getIdName();\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.toString#303",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return fileName;\n  }\n",
        "begin_line": 303,
        "end_line": 306,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isUnscopedQualifiedName#1584",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isUnscopedQualifiedName()",
        "snippet": "  public boolean isUnscopedQualifiedName() {\n    switch (getType()) {\n      case Token.NAME:\n        return true;\n      case Token.GETPROP:\n        return getFirstChild().isUnscopedQualifiedName();\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1584,
        "end_line": 1593,
        "comment": "\n   * Returns whether a node corresponds to a simple or a qualified name without\n   * a \"this\" reference, such as <code>a.b.c</code>, but not <code>this.a</code>\n   * .\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "VarCheck.visit#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (!n.isName()) {\n      return;\n    }\n\n    String varName = n.getString();\n\n    // Only a function can have an empty name.\n    if (varName.isEmpty()) {\n      Preconditions.checkState(parent.isFunction());\n      Preconditions.checkState(NodeUtil.isFunctionExpression(parent));\n      return;\n    }\n\n    // Check if this is a declaration for a var that has been declared\n    // elsewhere. If so, mark it as a duplicate.\n    if ((parent.isVar() ||\n         NodeUtil.isFunctionDeclaration(parent)) &&\n        varsToDeclareInExterns.contains(varName)) {\n      createSynthesizedExternVar(varName);\n\n      n.addSuppression(\"duplicate\");\n    }\n\n    // Check that the var has been declared.\n    Scope scope = t.getScope();\n    Scope.Var var = scope.getVar(varName);\n    if (var == null) {\n      if (NodeUtil.isFunctionExpression(parent)) {\n        // e.g. [ function foo() {} ], it's okay if \"foo\" isn't defined in the\n        // current scope.\n      } else {\n        // The extern checks are stricter, don't report a second error.\n        if (!strictExternCheck || !t.getInput().isExtern()) {\n          t.report(n, UNDEFINED_VAR_ERROR, varName);\n        }\n\n        if (sanityCheck) {\n          throw new IllegalStateException(\"Unexpected variable \" + varName);\n        } else {\n          createSynthesizedExternVar(varName);\n          scope.getGlobalScope().declare(varName, n,\n              null, getSynthesizedExternsInput());\n        }\n      }\n      return;\n    }\n\n    CompilerInput currInput = t.getInput();\n    CompilerInput varInput = var.input;\n    if (currInput == varInput || currInput == null || varInput == null) {\n      // The variable was defined in the same file. This is fine.\n      return;\n    }\n\n    // Check module dependencies.\n    JSModule currModule = currInput.getModule();\n    JSModule varModule = varInput.getModule();\n    JSModuleGraph moduleGraph = compiler.getModuleGraph();\n    if (!sanityCheck &&\n        varModule != currModule && varModule != null && currModule != null) {\n      if (moduleGraph.dependsOn(currModule, varModule)) {\n        // The module dependency was properly declared.\n      } else {\n        if (scope.isGlobal()) {\n          if (moduleGraph.dependsOn(varModule, currModule)) {\n            // The variable reference violates a declared module dependency.\n            t.report(n, VIOLATED_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);\n          } else {\n            // The variable reference is between two modules that have no\n            // dependency relationship. This should probably be considered an\n            // error, but just issue a warning for now.\n            t.report(n, MISSING_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);\n          }\n        } else {\n          t.report(n, STRICT_MODULE_DEP_ERROR,\n                   currModule.getName(), varModule.getName(), varName);\n        }\n      }\n    }\n  }\n",
        "begin_line": 120,
        "end_line": 203,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.throwUnexpectedException#241",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.throwUnexpectedException(java.lang.Exception)",
        "snippet": "  private void throwUnexpectedException(Exception unexpectedException) {\n    // If there's an unexpected exception, try to get the\n    // line number of the code that caused it.\n    String message = unexpectedException.getMessage();\n\n    // TODO(user): It is possible to get more information if curNode or\n    // its parent is missing. We still have the scope stack in which it is still\n    // very useful to find out at least which function caused the exception.\n    if (inputId != null) {\n      message =\n          unexpectedException.getMessage() + \"\\n\" +\n          formatNodeContext(\"Node\", curNode) +\n          (curNode == null ?\n              \"\" :\n              formatNodeContext(\"Parent\", curNode.getParent()));\n    }\n    compiler.throwInternalError(message, unexpectedException);\n  }\n",
        "begin_line": 241,
        "end_line": 258,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.formatNodeContext#260",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.formatNodeContext(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  private String formatNodeContext(String label, Node n) {\n    if (n == null) {\n      return \"  \" + label + \": NULL\";\n    }\n    return \"  \" + label + \"(\" + n.toString(false, false, false) + \"): \"\n        + formatNodePosition(n);\n  }\n",
        "begin_line": 260,
        "end_line": 266,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseRoots#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(java.util.List<com.google.javascript.rhino.Node>)",
        "snippet": "  public void traverseRoots(List<Node> roots) {\n    if (roots.isEmpty()) {\n      return;\n    }\n\n    try {\n      Node scopeRoot = roots.get(0).getParent();\n      Preconditions.checkState(scopeRoot != null);\n\n      inputId = NodeUtil.getInputId(scopeRoot);\n      sourceName = \"\";\n      curNode = scopeRoot;\n      pushScope(scopeRoot);\n\n      for (Node root : roots) {\n        Preconditions.checkState(root.getParent() == scopeRoot);\n        traverseBranch(root, scopeRoot);\n      }\n\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 288,
        "end_line": 311,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.formatNodePosition#315",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.formatNodePosition(com.google.javascript.rhino.Node)",
        "snippet": "  private String formatNodePosition(Node n) {\n    if (n == null) {\n      return MISSING_SOURCE + \"\\n\";\n    }\n\n    int lineNumber = n.getLineno();\n    int columnNumber = n.getCharno();\n    String src = compiler.getSourceLine(sourceName, lineNumber);\n    if (src == null) {\n      src = MISSING_SOURCE;\n    }\n    return sourceName + \":\" + lineNumber + \":\" + columnNumber + \"\\n\"\n        + src + \"\\n\";\n  }\n",
        "begin_line": 315,
        "end_line": 328,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.setIsClassOrEnum#1108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.setIsClassOrEnum()",
        "snippet": "    void setIsClassOrEnum() {\n      isClassOrEnum = true;\n      for (Name ancestor = parent; ancestor != null;\n           ancestor = ancestor.parent) {\n        ancestor.hasClassOrEnumDescendant = true;\n      }\n    }\n",
        "begin_line": 1108,
        "end_line": 1114,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.run#605",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Anonymous-28757cf2-a330-45b3-b4a1-58d398136197.run()",
        "snippet": "      @Override\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n",
        "begin_line": 605,
        "end_line": 619,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.runCallable#591",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.runCallable(java.util.concurrent.Callable<T>, boolean, boolean)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  static <T> T runCallable(\n      final Callable<T> callable, boolean useLargeStackThread, boolean trace) {\n\n    // Under JRE 1.6, the jscompiler overflows the stack when running on some\n    // large or complex js code. Here we start a new thread with a larger\n    // stack in order to let the compiler do its thing, without having to\n    // increase the stack size for *every* thread (which is what -Xss does).\n    // Might want to add thread pool support for clients that compile a lot.\n\n    final boolean dumpTraceReport = trace;\n    final Object[] result = new Object[1];\n    final Throwable[] exception = new Throwable[1];\n    Runnable runnable = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };\n\n    if (useLargeStackThread) {\n      Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);\n      th.start();\n      while (true) {\n        try {\n          th.join();\n          break;\n        } catch (InterruptedException ignore) {\n          // ignore\n        }\n      }\n    } else {\n      runnable.run();\n    }\n\n    // Pass on any exception caught by the runnable object.\n    if (exception[0] != null) {\n      throw new RuntimeException(exception[0]);\n    }\n\n    return (T) result[0];\n  }\n",
        "begin_line": 591,
        "end_line": 643,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.throwInternalError#1961",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.throwInternalError(java.lang.String, java.lang.Exception)",
        "snippet": "  @Override\n  void throwInternalError(String message, Exception cause) {\n    String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;\n\n    RuntimeException e = new RuntimeException(finalMessage, cause);\n    if (cause != null) {\n      e.setStackTrace(cause.getStackTrace());\n    }\n    throw e;\n  }\n",
        "begin_line": 1961,
        "end_line": 1972,
        "comment": "\n   * Report an internal error.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureCodingConvention.typeofClassDefiningName#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.typeofClassDefiningName(com.google.javascript.rhino.Node)",
        "snippet": "  private SubclassType typeofClassDefiningName(Node callName) {\n    // Check if the method name matches one of the class-defining methods.\n    String methodName = null;\n    if (callName.isGetProp()) {\n      methodName = callName.getLastChild().getString();\n    } else if (callName.isName()) {\n      String name = callName.getString();\n      int dollarIndex = name.lastIndexOf('$');\n      if (dollarIndex != -1) {\n        methodName = name.substring(dollarIndex + 1);\n      }\n    }\n\n    if (methodName != null) {\n      if (methodName.equals(\"inherits\")) {\n        return SubclassType.INHERITS;\n      } else if (methodName.equals(\"mixin\")) {\n        return SubclassType.MIXIN;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 136,
        "end_line": 157,
        "comment": "\n   * Determines whether the given node is a class-defining name, like\n   * \"inherits\" or \"mixin.\"\n   * @return The type of class-defining name, or null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "GatherSideEffectSubexpressionsCallback.processFunctionCall#312",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "class_name": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
        "signature": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.processFunctionCall(com.google.javascript.rhino.Node)",
        "snippet": "  boolean processFunctionCall(Node node) {\n    Preconditions.checkArgument(node.isCall(),\n        \"Expected: CALL, Got: %s\", Token.name(node.getType()));\n\n    // Calls to functions that are known to be \"pure\" have no side\n    // effects.\n    Node functionName = node.getFirstChild();\n    if (functionName.isName() || functionName.isGetProp()) {\n      if (!accumulator.classDefiningCallsHaveSideEffects() &&\n          isClassDefiningCall(node)) {\n        return true;\n      }\n    }\n\n    if (!NodeUtil.functionCallHasSideEffects(node)) {\n      return true;\n    }\n\n    accumulator.keepSubTree(node);\n    return false;\n  }\n",
        "begin_line": 312,
        "end_line": 332,
        "comment": "\n   * Processes a CALL expression.\n   *\n   * @return true to continue traversal, false otherwise\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.343
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.visit#817",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindReferences.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (!(n.isName() ||\n            NodeUtil.isGet(n) && !parent.isGetProp())) {\n        // This is not a simple or qualified name.\n        return;\n      }\n\n      NameInformation nameInfo = createNameInformation(t, n, parent);\n      if (nameInfo == null) {\n        // The name is not a global name\n        return;\n      }\n\n      if (nameInfo.onlyAffectsClassDef) {\n        if (nameInfo.superclass != null) {\n          recordReference(\n              nameInfo.name, nameInfo.superclass, RefType.INHERITANCE);\n        }\n\n        // Make sure that we record a reference to the function that does\n        // the inheritance, so that the inherits() function itself does\n        // not get stripped.\n        String nodeName = n.getQualifiedName();\n        if (nodeName != null) {\n          recordReference(\n              nameInfo.name, nodeName, RefType.REGULAR);\n        }\n\n        return;\n      }\n\n      if (parent.isInstanceOf() &&\n          parent.getLastChild() == n &&\n          // Don't cover GETELEMs with a global root node.\n          n.isQualifiedName()) {\n        JsName checkedClass = getName(nameInfo.name, true);\n        refNodes.add(\n            new InstanceOfCheckNode(\n                checkedClass, n, parent, parent.getParent()));\n        checkedClass.hasInstanceOfReference = true;\n        return;\n      }\n\n      // Determine which name might be potentially referring to this one by\n      // looking up the nearest enclosing dependency scope. It's unnecessary to\n      // determine all enclosing dependency scopes because this callback should\n      // create a chain of references between them.\n      NameInformation referring = getDependencyScope(n);\n      String referringName = \"\";\n      if (referring != null) {\n        referringName = referring.isPrototype\n                      ? referring.prototypeClass\n                      : referring.name;\n      }\n\n      String name = nameInfo.name;\n\n      // A value whose result is the return value of a function call\n      // can be an alias to global object.\n      // Here we add a alias to the general \"global\" object\n      // to act as a placeholder for the actual (unnamed) value.\n      if (maybeHiddenAlias(name, n)) {\n        recordAlias(name, WINDOW);\n      }\n\n      // An externally referenceable name must always be defined, so we add a\n      // reference to it from the global scope (a.k.a. window).\n      if (nameInfo.isExternallyReferenceable) {\n        recordReference(WINDOW, name, RefType.REGULAR);\n        maybeRecordAlias(name, parent, referring, referringName);\n        return;\n      }\n\n      // An assignment implies a reference from the enclosing dependency scope.\n      // For example, foo references bar in: function foo() {bar=5}.\n      if (NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {\n        if (referring != null) {\n          recordReference(referringName, name, RefType.REGULAR);\n        }\n        return;\n      }\n\n      if (nodesToKeep.contains(n)) {\n        NameInformation functionScope = getEnclosingFunctionDependencyScope(t);\n        if (functionScope != null) {\n          recordReference(functionScope.name, name, RefType.REGULAR);\n        } else {\n          recordReference(WINDOW, name, RefType.REGULAR);\n        }\n      } else if (referring != null) {\n        if (!maybeRecordAlias(name, parent, referring, referringName)) {\n          RefType depType = referring.onlyAffectsClassDef ?\n              RefType.INHERITANCE : RefType.REGULAR;\n          recordReference(referringName, name, depType);\n        }\n      } else {\n        // No named dependency scope found.  Unfortunately that might\n        // mean that the expression is a child of an function expression\n        // or assignment with a complex lhs.  In those cases,\n        // protect this node by creating a reference to WINDOW.\n        for (Node ancestor : n.getAncestors()) {\n          if (NodeUtil.isAssignmentOp(ancestor) ||\n              ancestor.isFunction()) {\n            recordReference(WINDOW, name, RefType.REGULAR);\n            break;\n          }\n        }\n      }\n    }\n",
        "begin_line": 817,
        "end_line": 926,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.visit#508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindDependencyScopes.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (!t.inGlobalScope()) {\n        return;\n      }\n\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n            // Patch for assignments that appear in the init,\n            // condition or iteration part of a FOR loop.  Without\n            // this change, all 3 of those parts try to claim the for\n            // loop as their dependency scope.  The last assignment in\n            // those three fields wins, which can result in incorrect\n            // reference edges between referenced and assigned variables.\n            //\n            // TODO(user) revisit the dependency scope calculation\n            // logic.\n            if (parent.getFirstChild().getNext() != n) {\n              recordDepScope(n, ns);\n            } else {\n              recordDepScope(nameNode, ns);\n            }\n          } else {\n            recordDepScope(n, ns);\n          }\n        }\n      } else if (NodeUtil.isVarDeclaration(n)) {\n        NameInformation ns = createNameInformation(t, n, parent);\n        recordDepScope(n, ns);\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        NameInformation ns = createNameInformation(t, n.getFirstChild(), n);\n        recordDepScope(n, ns);\n      } else if (NodeUtil.isExprCall(n)) {\n        Node callNode = n.getFirstChild();\n        Node nameNode = callNode.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, callNode);\n        if (ns != null && ns.onlyAffectsClassDef) {\n          recordDepScope(n, ns);\n        }\n      }\n    }\n",
        "begin_line": 508,
        "end_line": 551,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.createNameInformation#1320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.createNameInformation(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private NameInformation createNameInformation(NodeTraversal t, Node n,\n      Node parent) {\n    // Build the full name and find its root node by iterating down through all\n    // GETPROP/GETELEM nodes.\n    String name = \"\";\n    Node rootNameNode = n;\n    boolean bNameWasShortened = false;\n    while (true) {\n      if (NodeUtil.isGet(rootNameNode)) {\n        Node prop = rootNameNode.getLastChild();\n        if (rootNameNode.isGetProp()) {\n          name = \".\" + prop.getString() + name;\n        } else {\n          // We consider the name to be \"a.b\" in a.b['c'] or a.b[x].d.\n          bNameWasShortened = true;\n          name = \"\";\n        }\n        rootNameNode = rootNameNode.getFirstChild();\n      } else if (NodeUtil.isObjectLitKey(\n          rootNameNode, rootNameNode.getParent())) {\n        name = \".\" + rootNameNode.getString() + name;\n\n        // Check if this is an object literal assigned to something.\n        Node objLit = rootNameNode.getParent();\n        Node objLitParent = objLit.getParent();\n        if (objLitParent.isAssign()) {\n          // This must be the right side of the assign.\n          rootNameNode = objLitParent.getFirstChild();\n        } else if (objLitParent.isName()) {\n          // This must be a VAR initialization.\n          rootNameNode = objLitParent;\n        } else if (objLitParent.isString()) {\n          // This must be a object literal key initialization.\n          rootNameNode = objLitParent;\n        } else {\n          return null;\n        }\n      } else {\n        break;\n      }\n    }\n\n    // Check whether this is a class-defining call. Classes may only be defined\n    // in the global scope.\n    if (parent.isCall() && t.inGlobalScope()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);\n      if (classes != null) {\n        NameInformation nameInfo = new NameInformation();\n        nameInfo.name = classes.subclassName;\n        nameInfo.onlyAffectsClassDef = true;\n        nameInfo.superclass = classes.superclassName;\n        return nameInfo;\n      }\n\n      String singletonGetterClass =\n          convention.getSingletonGetterClassName(parent);\n      if (singletonGetterClass != null) {\n        NameInformation nameInfo = new NameInformation();\n        nameInfo.name = singletonGetterClass;\n        nameInfo.onlyAffectsClassDef = true;\n        return nameInfo;\n      }\n    }\n\n    switch (rootNameNode.getType()) {\n      case Token.NAME:\n        // Check whether this is an assignment to a prototype property\n        // of an object defined in the global scope.\n        if (!bNameWasShortened &&\n            n.isGetProp() &&\n            parent.isAssign() &&\n            \"prototype\".equals(n.getLastChild().getString())) {\n          if (createNameInformation(t, n.getFirstChild(), n) != null) {\n            name = rootNameNode.getString() + name;\n            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);\n            NameInformation nameInfo = new NameInformation();\n            nameInfo.name = name;\n            return nameInfo;\n          } else {\n            return null;\n          }\n        }\n        return createNameInformation(\n            rootNameNode.getString() + name, t.getScope(), rootNameNode);\n      case Token.THIS:\n        if (t.inGlobalScope()) {\n          NameInformation nameInfo = new NameInformation();\n          if (name.indexOf('.') == 0) {\n            nameInfo.name = name.substring(1);  // strip leading \".\"\n          } else {\n            nameInfo.name = name;\n          }\n          nameInfo.isExternallyReferenceable = true;\n          return nameInfo;\n        }\n        return null;\n      default:\n        return null;\n    }\n  }\n",
        "begin_line": 1320,
        "end_line": 1420,
        "comment": "\n   * Creates name information for the current node during a traversal.\n   *\n   * @param t The node traversal\n   * @param n The current node\n   * @param parent The parent of n\n   * @return The name information, or null if the name is irrelevant to this\n   *     pass\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.recordWriteOnProperties#684",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindDeclarationsAndSetters.recordWriteOnProperties(java.lang.String)",
        "snippet": "    private void recordWriteOnProperties(String parentName) {\n      do {\n        JsName parent = getName(parentName, true);\n        if (parent.hasWrittenDescendants) {\n          // If we already recorded this name, then all its parents must\n          // also be recorded. short-circuit this loop.\n          return;\n        } else {\n          parent.hasWrittenDescendants = true;\n        }\n\n        if (parentName.indexOf('.') == -1) {\n          return;\n        }\n        parentName = parentName.substring(0, parentName.lastIndexOf('.'));\n      } while(true);\n    }\n",
        "begin_line": 684,
        "end_line": 700,
        "comment": "\n     * Record that the properties of this name have been written to.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConvention.SubclassRelationship#287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "class_name": "com.google.javascript.jscomp.CodingConvention",
        "signature": "com.google.javascript.jscomp.CodingConvention.SubclassRelationship.SubclassRelationship(com.google.javascript.jscomp.CodingConvention.SubclassType, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public SubclassRelationship(SubclassType type,\n        Node subclassNode, Node superclassNode) {\n      this.type = type;\n      this.subclassName = subclassNode.getQualifiedName();\n      this.superclassName = superclassNode.getQualifiedName();\n    }\n",
        "begin_line": 287,
        "end_line": 292,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureCodingConvention.getClassesDefinedByCall#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.getClassesDefinedByCall(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public SubclassRelationship getClassesDefinedByCall(Node callNode) {\n    Node callName = callNode.getFirstChild();\n    SubclassType type = typeofClassDefiningName(callName);\n    if (type != null) {\n      Node subclass = null;\n      Node superclass = callNode.getLastChild();\n\n      // There are six possible syntaxes for a class-defining method:\n      // SubClass.inherits(SuperClass)\n      // goog.inherits(SubClass, SuperClass)\n      // goog$inherits(SubClass, SuperClass)\n      // SubClass.mixin(SuperClass.prototype)\n      // goog.mixin(SubClass.prototype, SuperClass.prototype)\n      // goog$mixin(SubClass.prototype, SuperClass.prototype)\n      boolean isDeprecatedCall = callNode.getChildCount() == 2 &&\n          callName.isGetProp();\n      if (isDeprecatedCall) {\n        // SubClass.inherits(SuperClass)\n        subclass = callName.getFirstChild();\n      } else if (callNode.getChildCount() == 3) {\n        // goog.inherits(SubClass, SuperClass)\n        subclass = callName.getNext();\n      } else {\n        return null;\n      }\n\n      if (type == SubclassType.MIXIN) {\n        // Only consider mixins that mix two prototypes as related to\n        // inheritance.\n        if (!endsWithPrototype(superclass)) {\n          return null;\n        }\n        if (!isDeprecatedCall) {\n          if (!endsWithPrototype(subclass)) {\n            return null;\n          }\n          // Strip off the prototype from the name.\n          subclass = subclass.getFirstChild();\n        }\n        superclass = superclass.getFirstChild();\n      }\n\n      // bail out if either of the side of the \"inherits\"\n      // isn't a real class name. This prevents us from\n      // doing something weird in cases like:\n      // goog.inherits(MySubClass, cond ? SuperClass1 : BaseClass2)\n      if (subclass != null &&\n          subclass.isUnscopedQualifiedName() &&\n          superclass.isUnscopedQualifiedName()) {\n        return new SubclassRelationship(type, subclass, superclass);\n      }\n    }\n\n    return null;\n  }\n",
        "begin_line": 74,
        "end_line": 129,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>Understands several different inheritance patterns that occur in\n   * Google code (various uses of {@code inherits} and {@code mixin}).\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.CodingConventions.Proxy": null
        },
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.visit#595",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindDeclarationsAndSetters.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            JsName nameInfo = getName(nameNode.getString(), true);\n            recordSet(nameInfo.name, nameNode);\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n          refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));\n          }\n        }\n      }\n    }\n",
        "begin_line": 595,
        "end_line": 642,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3086
        },
        "num_failing_tests": 2
    },
    {
        "name": "GoogleCodingConvention.isOptionalParameter#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isOptionalParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isOptionalParameter(Node parameter) {\n    return parameter.getString().startsWith(OPTIONAL_ARG_PREFIX);\n  }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>In Google code, parameter names beginning with {@code opt_} are\n   * treated as optional arguments.\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.CodingConventions.Proxy": null
        },
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 2
    },
    {
        "name": "GoogleCodingConvention.isVarArgsParameter#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isVarArgsParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isVarArgsParameter(Node parameter) {\n    return VAR_ARGS_NAME.equals(parameter.getString());\n  }\n",
        "begin_line": 128,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.remove#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.JsNameRefNode.remove()",
        "snippet": "    @Override\n    public void remove() {\n      // Setters have VAR, FUNCTION, or ASSIGN parent nodes. CALL parent\n      // nodes are global refs, and are handled later in this function.\n      Node containingNode = parent.getParent();\n      switch (parent.getType()) {\n        case Token.VAR:\n          Preconditions.checkState(parent.hasOneChild());\n          replaceWithRhs(containingNode, parent);\n          break;\n        case Token.FUNCTION:\n          replaceWithRhs(containingNode, parent);\n          break;\n        case Token.ASSIGN:\n          if (containingNode.isExprResult()) {\n            replaceWithRhs(containingNode.getParent(), containingNode);\n          } else {\n            replaceWithRhs(containingNode, parent);\n          }\n          break;\n        case Token.OBJECTLIT:\n          // TODO(nicksantos): Come up with a way to remove this.\n          // If we remove object lit keys, then we will need to also\n          // create dependency scopes for them.\n          break;\n      }\n    }\n",
        "begin_line": 310,
        "end_line": 336,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2209
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.getRhsSubexpressions#1766",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.getRhsSubexpressions(com.google.javascript.rhino.Node)",
        "snippet": "  private List<Node> getRhsSubexpressions(Node n) {\n    switch (n.getType()) {\n      case Token.EXPR_RESULT:\n        // process body\n        return getRhsSubexpressions(n.getFirstChild());\n      case Token.FUNCTION:\n        // function nodes have no rhs\n        return Collections.emptyList();\n      case Token.NAME:\n        {\n          // parent is a var node.  rhs is first child\n          Node rhs = n.getFirstChild();\n          if (rhs != null) {\n            return Lists.newArrayList(rhs);\n          } else {\n            return Collections.emptyList();\n          }\n        }\n      case Token.ASSIGN:\n        {\n          // add lhs and rhs expressions - lhs may be a complex expression\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          return Lists.newArrayList(lhs, rhs);\n        }\n      case Token.VAR:\n        {\n          // recurse on all children\n          List<Node> nodes = Lists.newArrayList();\n          for (Node child : n.children()) {\n            nodes.addAll(getRhsSubexpressions(child));\n          }\n          return nodes;\n        }\n      default:\n        throw new IllegalArgumentException(\"AstChangeProxy::getRhs \" + n);\n    }\n  }\n",
        "begin_line": 1766,
        "end_line": 1803,
        "comment": "\n   * Extract a list of subexpressions that act as right hand sides.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2209
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.handleSetFromGlobal#544",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.handleSetFromGlobal(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, boolean, com.google.javascript.jscomp.GlobalNamespace.Name.Type)",
        "snippet": "    void handleSetFromGlobal(NodeTraversal t, Node n, Node parent, String name,\n                             boolean isPropAssign, Name.Type type) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      nameObj.type = type;\n\n      Ref set = new Ref(t, n, nameObj, Ref.Type.SET_FROM_GLOBAL,\n          currentPreOrderIndex++);\n      nameObj.addRef(set);\n\n      if (isNestedAssign(parent)) {\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj, Ref.Type.ALIASING_GET,\n            currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      } else if (isConstructorOrEnumDeclaration(n, parent)) {\n        // Names with a @constructor or @enum annotation are always collapsed\n        nameObj.setIsClassOrEnum();\n      }\n    }\n",
        "begin_line": 544,
        "end_line": 565,
        "comment": "\n     * Updates our respresentation of the global namespace to reflect an\n     * assignment to a global name in global scope.\n     *\n     * @param t The traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     * @param isPropAssign Whether this set corresponds to a property\n     *     assignment of the form <code>a.b.c = ...;</code>\n     * @param type The type of the value that the name is being assigned\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.FunctionArgumentDefinition#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.FunctionArgumentDefinition.FunctionArgumentDefinition(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, boolean)",
        "snippet": "    FunctionArgumentDefinition(Node function,\n        Node argumentName,\n        boolean inExterns) {\n      super(argumentName, inExterns);\n      Preconditions.checkArgument(function.isFunction());\n      Preconditions.checkArgument(argumentName.isName());\n    }\n",
        "begin_line": 212,
        "end_line": 218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.getDefinition#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.getDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  static Definition getDefinition(Node n, boolean isExtern) {\n    // TODO(user): Since we have parent pointers handy. A lot of constructors\n    // can be simplified.\n\n    // This logic must match #isDefinitionNode\n    Node parent = n.getParent();\n    if (parent == null) {\n      return null;\n    }\n\n    if (NodeUtil.isVarDeclaration(n) && n.hasChildren()) {\n      return new VarDefinition(n, isExtern);\n    } else if (parent.isFunction() && parent.getFirstChild() == n) {\n      if (!NodeUtil.isFunctionExpression(parent)) {\n        return new NamedFunctionDefinition(parent, isExtern);\n      } else if (!n.getString().equals(\"\")) {\n        return new FunctionExpressionDefinition(parent, isExtern);\n      }\n    } else if (parent.isAssign() && parent.getFirstChild() == n) {\n      return new AssignmentDefinition(parent, isExtern);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(),\n          isExtern);\n    } else if (parent.isParamList()) {\n      Node function = parent.getParent();\n      return new FunctionArgumentDefinition(function, n, isExtern);\n    }\n    return null;\n  }\n",
        "begin_line": 37,
        "end_line": 65,
        "comment": "\n   * @return an {@link Definition} object if the node contains a definition or\n   *     {@code null} otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#1679",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-d3bc1e3f-df30-4954-b389-1581c5cad043.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n          na.removeUnreferenced();\n        }\n      };\n    }\n",
        "begin_line": 1679,
        "end_line": 1689,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#1682",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-5787bb99-3f50-41cc-935e-81b1cdc12920.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n          na.removeUnreferenced();\n        }\n",
        "begin_line": 1682,
        "end_line": 1687,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#1647",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-2cfa7dae-9fa6-41e9-bb18-cc174b135e18.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n\n          String reportPath = options.reportPath;\n          if (reportPath != null) {\n            try {\n              Files.write(na.getHtmlReport(), new File(reportPath),\n                  Charsets.UTF_8);\n            } catch (IOException e) {\n              compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n            }\n          }\n\n          if (options.smartNameRemoval) {\n            na.removeUnreferenced();\n          }\n        }\n      };\n    }\n",
        "begin_line": 1647,
        "end_line": 1670,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#1650",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-ffaa1546-2aba-4d9b-a699-14e8854b4a3c.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n\n          String reportPath = options.reportPath;\n          if (reportPath != null) {\n            try {\n              Files.write(na.getHtmlReport(), new File(reportPath),\n                  Charsets.UTF_8);\n            } catch (IOException e) {\n              compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n            }\n          }\n\n          if (options.smartNameRemoval) {\n            na.removeUnreferenced();\n          }\n        }\n",
        "begin_line": 1650,
        "end_line": 1668,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.getOptimizations#340",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getOptimizations()",
        "snippet": "  @Override\n  protected List<PassFactory> getOptimizations() {\n    List<PassFactory> passes = Lists.newArrayList();\n    passes.add(garbageCollectChecks);\n\n    // TODO(nicksantos): The order of these passes makes no sense, and needs\n    // to be re-arranged.\n\n    if (options.runtimeTypeCheck) {\n      passes.add(runtimeTypeCheck);\n    }\n\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n\n    if (options.replaceIdGenerators) {\n      passes.add(replaceIdGenerators);\n    }\n\n    // Optimizes references to the arguments variable.\n    if (options.optimizeArgumentsArray) {\n      passes.add(optimizeArgumentsArray);\n    }\n\n    // Abstract method removal works best on minimally modified code, and also\n    // only needs to run once.\n    if (options.closurePass &&\n        (options.removeAbstractMethods || options.removeClosureAsserts)) {\n      passes.add(closureCodeRemoval);\n    }\n\n    // Collapsing properties can undo constant inlining, so we do this before\n    // the main optimization loop.\n    if (options.collapseProperties) {\n      passes.add(collapseProperties);\n    }\n\n    // ReplaceStrings runs after CollapseProperties in order to simplify\n    // pulling in values of constants defined in enums structures.\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n      passes.add(replaceStrings);\n    }\n\n    // Tighten types based on actual usage.\n    if (options.tightenTypes) {\n      passes.add(tightenTypesBuilder);\n    }\n\n    // Property disambiguation should only run once and needs to be done\n    // soon after type checking, both so that it can make use of type\n    // information and so that other passes can take advantage of the renamed\n    // properties.\n    if (options.disambiguateProperties) {\n      passes.add(disambiguateProperties);\n    }\n\n    if (options.computeFunctionSideEffects) {\n      passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n      // TODO(user) The properties that this pass adds to CALL and NEW\n      // AST nodes increase the AST's in-memory size.  Given that we are\n      // already running close to our memory limits, we could run into\n      // trouble if we end up using the @nosideeffects annotation a lot\n      // or compute @nosideeffects annotations by looking at function\n      // bodies.  It should be easy to propagate @nosideeffects\n      // annotations as part of passes that depend on this property and\n      // store the result outside the AST (which would allow garbage\n      // collection once the pass is done).\n      passes.add(markNoSideEffectCalls);\n    }\n\n    if (options.chainCalls) {\n      passes.add(chainCalls);\n    }\n\n    // Constant checking must be done after property collapsing because\n    // property collapsing can introduce new constants (e.g. enum values).\n    if (options.inlineConstantVars) {\n      passes.add(checkConsts);\n    }\n\n    // The Caja library adds properties to Object.prototype, which breaks\n    // most for-in loops.  This adds a check to each loop that skips\n    // any property matching /___$/.\n    if (options.ignoreCajaProperties) {\n      passes.add(ignoreCajaProperties);\n    }\n\n    assertAllOneTimePasses(passes);\n\n    if (options.smartNameRemoval || options.reportPath != null) {\n      passes.addAll(getCodeRemovingPasses());\n      passes.add(smartNamePass);\n    }\n\n    // This needs to come after the inline constants pass, which is run within\n    // the code removing passes.\n    if (options.closurePass) {\n      passes.add(closureOptimizePrimitives);\n    }\n\n    // TODO(user): This forces a first crack at crossModuleCodeMotion\n    // before devirtualization. Once certain functions are devirtualized,\n    // it confuses crossModuleCodeMotion ability to recognized that\n    // it is recursive.\n\n    // TODO(user): This is meant for a temporary quick win.\n    // In the future, we might want to improve our analysis in\n    // CrossModuleCodeMotion so we don't need to do this.\n    if (options.crossModuleCodeMotion) {\n      passes.add(crossModuleCodeMotion);\n    }\n\n    // Method devirtualization benefits from property disambiguiation so\n    // it should run after that pass but before passes that do\n    // optimizations based on global names (like cross module code motion\n    // and inline functions).  Smart Name Removal does better if run before\n    // this pass.\n    if (options.devirtualizePrototypeMethods) {\n      passes.add(devirtualizePrototypeMethods);\n    }\n\n    if (options.customPasses != null) {\n      passes.add(getCustomPasses(\n          CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n\n    if (options.specializeInitialModule) {\n      // When specializing the initial module, we want our fixups to be\n      // as lean as possible, so we run the entire optimization loop to a\n      // fixed point before specializing, then specialize, and then run the\n      // main optimization loop again.\n\n      passes.addAll(getMainOptimizationLoop());\n\n      if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n      }\n\n      if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n      }\n\n      passes.add(specializeInitialModule.makeOneTimePass());\n    }\n\n    passes.addAll(getMainOptimizationLoop());\n\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n\n    if (options.crossModuleCodeMotion) {\n      passes.add(crossModuleCodeMotion);\n    }\n\n    if (options.crossModuleMethodMotion) {\n      passes.add(crossModuleMethodMotion);\n    }\n\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n\n    // Some optimizations belong outside the loop because running them more\n    // than once would either have no benefit or be incorrect.\n    if (options.customPasses != null) {\n      passes.add(getCustomPasses(\n          CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n\n    if (options.flowSensitiveInlineVariables) {\n      passes.add(flowSensitiveInlineVariables);\n\n      // After inlining some of the variable uses, some variables are unused.\n      // Re-run remove unused vars to clean it up.\n      if (options.removeUnusedVars || options.removeUnusedLocalVars) {\n        passes.add(removeUnusedVars);\n      }\n    }\n\n    // Running this pass again is required to have goog.events compile down to\n    // nothing when compiled on its own.\n    if (options.smartNameRemoval) {\n      passes.add(smartNamePass2);\n    }\n\n    if (options.collapseAnonymousFunctions) {\n      passes.add(collapseAnonymousFunctions);\n    }\n\n    // Move functions before extracting prototype member declarations.\n    if (options.moveFunctionDeclarations ||\n        // renamePrefixNamescape relies on moveFunctionDeclarations\n        // to preserve semantics.\n        options.renamePrefixNamespace != null) {\n      passes.add(moveFunctionDeclarations);\n    }\n\n    if (options.anonymousFunctionNaming ==\n        AnonymousFunctionNamingPolicy.MAPPED) {\n      passes.add(nameMappedAnonymousFunctions);\n    }\n\n    // The mapped name anonymous function pass makes use of information that\n    // the extract prototype member declarations pass removes so the former\n    // happens before the latter.\n    //\n    // Extracting prototype properties screws up the heuristic renaming\n    // policies, so never run it when those policies are requested.\n    if (options.extractPrototypeMemberDeclarations &&\n        (options.propertyRenaming != PropertyRenamingPolicy.HEURISTIC &&\n         options.propertyRenaming !=\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n      passes.add(extractPrototypeMemberDeclarations);\n    }\n\n    if (options.ambiguateProperties &&\n        (options.propertyRenaming == PropertyRenamingPolicy.ALL_UNQUOTED)) {\n      passes.add(ambiguateProperties);\n    }\n\n    if (options.propertyRenaming != PropertyRenamingPolicy.OFF) {\n      passes.add(renameProperties);\n    }\n\n    // Reserve global names added to the \"windows\" object.\n    if (options.reserveRawExports) {\n      passes.add(gatherRawExports);\n    }\n\n    // This comes after property renaming because quoted property names must\n    // not be renamed.\n    if (options.convertToDottedProperties) {\n      passes.add(convertToDottedProperties);\n    }\n\n    // Property renaming must happen before this pass runs since this\n    // pass may convert dotted properties into quoted properties.  It\n    // is beneficial to run before alias strings, alias keywords and\n    // variable renaming.\n    if (options.rewriteFunctionExpressions) {\n      passes.add(rewriteFunctionExpressions);\n    }\n\n    // This comes after converting quoted property accesses to dotted property\n    // accesses in order to avoid aliasing property names.\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n      passes.add(aliasStrings);\n    }\n\n    if (options.aliasExternals) {\n      passes.add(aliasExternals);\n    }\n\n    if (options.aliasKeywords) {\n      passes.add(aliasKeywords);\n    }\n\n    // Passes after this point can no longer depend on normalized AST\n    // assumptions.\n    passes.add(markUnnormalized);\n\n    if (options.coalesceVariableNames) {\n      passes.add(coalesceVariableNames);\n\n      // coalesceVariables creates identity assignments and more redundant code\n      // that can be removed, rerun the peephole optimizations to clean them\n      // up.\n      if (options.foldConstants) {\n        passes.add(peepholeOptimizations);\n      }\n    }\n\n    if (options.collapseVariableDeclarations) {\n      passes.add(exploitAssign);\n      passes.add(collapseVariableDeclarations);\n    }\n\n    // This pass works best after collapseVariableDeclarations.\n    passes.add(denormalize);\n\n    if (options.instrumentationTemplate != null) {\n      passes.add(instrumentFunctions);\n    }\n\n    if (options.variableRenaming != VariableRenamingPolicy.ALL) {\n      // If we're leaving some (or all) variables with their old names,\n      // then we need to undo any of the markers we added for distinguishing\n      // local variables (\"$$1\").\n      passes.add(invertContextualRenaming);\n    }\n\n    if (options.variableRenaming != VariableRenamingPolicy.OFF) {\n      passes.add(renameVars);\n    }\n\n    if (options.groupVariableDeclarations) {\n      passes.add(groupVariableDeclarations);\n    }\n\n    // This pass should run after names stop changing.\n    if (options.processObjectPropertyString) {\n      passes.add(objectPropertyStringPostprocess);\n    }\n\n    if (options.labelRenaming) {\n      passes.add(renameLabels);\n    }\n\n    if (options.foldConstants) {\n      passes.add(latePeepholeOptimizations);\n    }\n\n    if (options.anonymousFunctionNaming ==\n        AnonymousFunctionNamingPolicy.UNMAPPED) {\n      passes.add(nameUnmappedAnonymousFunctions);\n    }\n\n    if (options.renamePrefixNamespace != null) {\n      if (!GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(\n          options.renamePrefixNamespace).matches()) {\n        throw new IllegalArgumentException(\n            \"Illegal character in renamePrefixNamespace name: \"\n            + options.renamePrefixNamespace);\n      }\n      passes.add(rescopeGlobalSymbols);\n    }\n\n    passes.add(stripSideEffectProtection);\n\n    // Safety checks\n    passes.add(sanityCheckAst);\n    passes.add(sanityCheckVars);\n\n    return passes;\n  }\n",
        "begin_line": 340,
        "end_line": 673,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "NameAnalyzer.visit#470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.ProcessExternals.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      NameInformation ns = null;\n      if (NodeUtil.isVarDeclaration(n)) {\n        ns = createNameInformation(t, n, parent);\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        ns = createNameInformation(t, n.getFirstChild(), n);\n      }\n      if (ns != null) {\n        JsName jsName = getName(ns.name, true);\n        jsName.externallyDefined = true;\n        externalNames.add(ns.name);\n      }\n    }\n",
        "begin_line": 470,
        "end_line": 483,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.recordSet#651",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindDeclarationsAndSetters.recordSet(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "    private void recordSet(String name, Node node) {\n      JsName jsn = getName(name, true);\n      JsNameRefNode nameRefNode = new JsNameRefNode(jsn, node);\n      refNodes.add(nameRefNode);\n\n      // Now, look at all parent names and record that their properties have\n      // been written to.\n      if (node.isGetElem()) {\n        recordWriteOnProperties(name);\n      } else if (name.indexOf('.') != -1) {\n        recordWriteOnProperties(name.substring(0, name.lastIndexOf('.')));\n      }\n    }\n",
        "begin_line": 651,
        "end_line": 663,
        "comment": "\n     * Records the assignment of a value to a global name.\n     *\n     * @param name Fully qualified name\n     * @param node The top node representing the name (GETPROP, NAME, or STRING\n     * [objlit key])\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1516
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.functionCallHasSideEffects#987",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (!callNode.isCall()) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.isName()) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.isGetProp()) {\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Math.floor has no sideeffects.\n      // TODO(nicksantos): This is a terrible terrible hack, until\n      // I create a definitionprovider that understands namespacing.\n      if (nameNode.getFirstChild().isName()) {\n        if (\"Math.floor\".equals(nameNode.getQualifiedName())) {\n          return false;\n        }\n      }\n\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().isRegExp()\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().isString()\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          if (param != null &&\n              (param.isString() || param.isRegExp()))\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 987,
        "end_line": 1043,
        "comment": "\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1499
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.checkForStateChangeHelper#784",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler) {\n    // Rather than id which ops may have side effects, id the ones\n    // that we know to be safe\n    switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.PARAM_LIST:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (assignTarget.isName()) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (checkForStateChangeHelper(c, checkForNewObjects, compiler)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 784,
        "end_line": 927,
        "comment": "\n   * Returns true if some node in n's subtree changes application state.\n   * If {@code checkForNewObjects} is true, we assume that newly created\n   * mutable objects (like object literals) change state. Otherwise, we assume\n   * that they have no side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1474
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.shouldTraverse#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.PARAM_LIST: {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // Add the function parameters\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n          }\n\n          // Add the function body declarations\n          Node functionBody = n.getNext();\n          findDeclaredNames(functionBody, null, renamer);\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n",
        "begin_line": 105,
        "end_line": 156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1367
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.scanRoot#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  private void scanRoot(Node n, Scope parent) {\n    if (n.isFunction()) {\n      if (inputId == null) {\n        inputId = NodeUtil.getInputId(n);\n        // TODO(johnlenz): inputId maybe null if the FUNCTION node is detached\n        // from the AST.\n        // Is it meaningful to build a scope for detached FUNCTION node?\n      }\n\n      final Node fnNameNode = n.getFirstChild();\n      final Node args = fnNameNode.getNext();\n      final Node body = args.getNext();\n\n      // Bleed the function name into the scope, if it hasn't\n      // been declared in the outer scope.\n      String fnName = fnNameNode.getString();\n      if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n        declareVar(fnNameNode);\n      }\n\n      // Args: Declare function variables\n      Preconditions.checkState(args.isParamList());\n      for (Node a = args.getFirstChild(); a != null;\n           a = a.getNext()) {\n        Preconditions.checkState(a.isName());\n        declareVar(a);\n      }\n\n      // Body\n      scanVars(body, n);\n    } else {\n      // It's the global block\n      Preconditions.checkState(scope.getParent() == null);\n      scanVars(n, null);\n    }\n  }\n",
        "begin_line": 84,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "GatherSideEffectSubexpressionsCallback.shouldTraverse#221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "class_name": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
        "signature": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(\n      NodeTraversal traversal, Node node, Node parent) {\n    if (FORBIDDEN_TYPES.contains(node.getType()) ||\n        NodeUtil.isControlStructure(node)) {\n      throw new IllegalArgumentException(\n          Token.name(node.getType()) + \" nodes are not supported.\");\n    }\n\n    // Do not recurse into nested functions.\n    if (node.isFunction()) {\n      return false;\n    }\n\n    // simplify and maybe keep hook expression.\n    if (node.isHook()) {\n      return processHook(node);\n    }\n\n    // simplify and maybe keep AND/OR expression.\n    if ((node.isAnd()) || (node.isOr())) {\n      return processShortCircuitExpression(node);\n    }\n\n    if (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {\n      return true;\n    } else {\n\n      // Node type suggests that the expression has side effects.\n\n      if (node.isCall()) {\n        return processFunctionCall(node);\n      } else if (node.isNew()) {\n        return processConstructorCall(node);\n      } else {\n        accumulator.keepSubTree(node);\n        return false;\n      }\n    }\n  }\n",
        "begin_line": 221,
        "end_line": 260,
        "comment": "\n   * Computes the list of subtrees whose root nodes have side effects.\n   *\n   * <p>If the current subtree's root has side effects this method should\n   * call accumulator.keepSubTree and return 'false' to add the\n   * subtree to the result list and avoid avoid traversing the nodes children.\n   *\n   * <p>Branching nodes whose then or else branch contain side effects\n   * must be simplified by doing a recursive traversal; this method\n   * should call the appropriate accumulator 'keepSimplified' method\n   * and return 'false' to stop the regular traversal.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1342
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.isConnectedInDirection#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, com.google.common.base.Predicate<E>, N)",
        "snippet": "  private boolean isConnectedInDirection(N n1, Predicate<E> edgeMatcher, N n2) {\n    // Verify the nodes.\n    DiGraphNode<N, E> dNode1 = getNodeOrFail(n1);\n    DiGraphNode<N, E> dNode2 = getNodeOrFail(n2);\n    for (DiGraphEdge<N, E> outEdge : dNode1.getOutEdges()) {\n      if (outEdge.getDestination() == dNode2 &&\n          edgeMatcher.apply(outEdge.getValue())) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 203,
        "end_line": 215,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1336
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.addSimplifiedExpression#747",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindReferences.addSimplifiedExpression(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void addSimplifiedExpression(Node n, Node parent) {\n      if (parent.isVar()) {\n        Node value = n.getFirstChild();\n        if (value != null) {\n          addSimplifiedChildren(value);\n        }\n      } else if (n.isAssign() &&\n          (parent.isExprResult() ||\n           parent.isFor() ||\n           parent.isReturn())) {\n        for (Node child : n.children()) {\n          addSimplifiedChildren(child);\n        }\n      } else if (n.isCall() &&\n                 parent.isExprResult()) {\n        addSimplifiedChildren(n);\n      } else {\n        addAllChildren(n);\n      }\n    }\n",
        "begin_line": 747,
        "end_line": 766,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1336
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.collect#302",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.collect(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public void collect(NodeTraversal t, Node n, Node parent) {\n      if (nodeFilter != null && !nodeFilter.apply(n)) {\n        return;\n      }\n\n      // If we are traversing the externs, then we save a pointer to the scope\n      // generated by them, so that we can do lookups in it later.\n      if (externsRoot != null && n == externsRoot) {\n        externsScope = t.getScope();\n      }\n\n      String name;\n      boolean isSet = false;\n      Name.Type type = Name.Type.OTHER;\n      boolean isPropAssign = false;\n\n      switch (n.getType()) {\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n        case Token.STRING:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.isObjectLit()) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) return;\n          isSet = true;\n          switch (n.getType()) {\n            case Token.STRING:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionExpression(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) return;\n          break;\n        default:\n          return;\n      }\n\n      // We are only interested in global names.\n      Scope scope = t.getScope();\n      if (!isGlobalNameReference(name, scope)) {\n        return;\n      }\n\n      if (isSet) {\n        if (isGlobalScope(scope)) {\n          handleSetFromGlobal(t, n, parent, name, isPropAssign, type);\n        } else {\n          handleSetFromLocal(t, n, parent, name);\n        }\n      } else {\n        handleGet(t, n, parent, name);\n      }\n    }\n",
        "begin_line": 302,
        "end_line": 430,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1336
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.addRef#943",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.addRef(com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "    void addRef(Ref ref) {\n      addRefInternal(ref);\n      switch (ref.type) {\n        case SET_FROM_GLOBAL:\n          if (declaration == null) {\n            declaration = ref;\n            docInfo = getDocInfoForDeclaration(ref);\n          }\n          globalSets++;\n          break;\n        case SET_FROM_LOCAL:\n          localSets++;\n          break;\n        case PROTOTYPE_GET:\n        case DIRECT_GET:\n          totalGets++;\n          break;\n        case ALIASING_GET:\n          aliasingGets++;\n          totalGets++;\n          break;\n        case CALL_GET:\n          callGets++;\n          totalGets++;\n          break;\n        case DELETE_PROP:\n          deleteProps++;\n          break;\n        default:\n          throw new IllegalStateException();\n      }\n    }\n",
        "begin_line": 943,
        "end_line": 974,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isOnlyModifiesThisCall#2075",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isOnlyModifiesThisCall()",
        "snippet": "  public boolean isOnlyModifiesThisCall() {\n    return areBitFlagsSet(\n        getSideEffectFlags() & Node.NO_SIDE_EFFECTS,\n        Node.FLAG_GLOBAL_STATE_UNMODIFIED\n            | Node.FLAG_ARGUMENTS_UNMODIFIED\n            | Node.FLAG_NO_THROWS);\n  }\n",
        "begin_line": 2075,
        "end_line": 2081,
        "comment": "\n   * @return Whether the only side-effect is \"modifies this\"\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1302
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processFunctionNode#609",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode)",
        "snippet": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        int functionType = functionNode.getFunctionType();\n        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n\n          // Return the bare minimum to put the AST in a valid state.\n          return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n        }\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n        maybeSetLengthFrom(newName, name);\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.PARAM_LIST);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
        "begin_line": 609,
        "end_line": 670,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.annotateFunctions#223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateFunctions(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateFunctions(Node n, Node parent) {\n      JSDocInfo fnInfo = NodeUtil.getFunctionJSDocInfo(n);\n\n      // Compute which function parameters are optional and\n      // which are var_args.\n      Node args = n.getFirstChild().getNext();\n      for (Node arg = args.getFirstChild();\n           arg != null;\n           arg = arg.getNext()) {\n        String argName = arg.getString();\n        JSTypeExpression typeExpr = fnInfo == null ?\n            null : fnInfo.getParameterType(argName);\n\n        if (convention.isOptionalParameter(arg) ||\n            typeExpr != null && typeExpr.isOptionalArg()) {\n          arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);\n        }\n        if (convention.isVarArgsParameter(arg) ||\n            typeExpr != null && typeExpr.isVarArgs()) {\n          arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);\n        }\n      }\n    }\n",
        "begin_line": 223,
        "end_line": 245,
        "comment": "\n     * Annotate optional and var_arg function parameters.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefinitionsRemover.getRValue#171",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.IncompleteDefinition.getRValue()",
        "snippet": "    @Override\n    public Node getRValue() {\n      return null;\n    }\n",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.addDeclaredName#461",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.addDeclaredName(java.lang.String)",
        "snippet": "    @Override\n    public void addDeclaredName(String name) {\n      if (!name.equals(ARGUMENTS)) {\n        if (global) {\n          reserveName(name);\n        } else {\n          // It hasn't been declared locally yet, so increment the count.\n          if (!declarations.containsKey(name)) {\n            int id = incrementNameCount(name);\n            String newName = null;\n            if (id != 0) {\n              newName = getUniqueName(name, id);\n            }\n            declarations.put(name, newName);\n          }\n        }\n      }\n    }\n",
        "begin_line": 461,
        "end_line": 478,
        "comment": "\n     * Adds a name to the map of names declared in this scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.126
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.incrementNameCount#496",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.incrementNameCount(java.lang.String)",
        "snippet": "    private int incrementNameCount(String name) {\n      return nameUsage.add(name, 1);\n    }\n",
        "begin_line": 496,
        "end_line": 498,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.126
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.referenceParentNames#1287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.referenceParentNames()",
        "snippet": "  private void referenceParentNames() {\n    // Duplicate set of nodes to process so we don't modify set we are\n    // currently iterating over\n    Set<JsName> allNamesCopy = Sets.newHashSet(allNames.values());\n\n    for (JsName name : allNamesCopy) {\n      String curName = name.name;\n      JsName curJsName = name;\n      while (curName.indexOf('.') != -1) {\n        String parentName = curName.substring(0, curName.lastIndexOf('.'));\n        if (!globalNames.contains(parentName)) {\n\n          JsName parentJsName = getName(parentName, true);\n\n          recordReference(curJsName.name, parentJsName.name, RefType.REGULAR);\n          recordReference(parentJsName.name, curJsName.name, RefType.REGULAR);\n\n          curJsName = parentJsName;\n        }\n        curName = parentName;\n      }\n    }\n  }\n",
        "begin_line": 1287,
        "end_line": 1309,
        "comment": "\n   * Adds mutual references between all known global names and their parent\n   * names. (e.g. between <code>a.b.c</code> and <code>a.b</code>).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.124
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.getBestJSDocInfo#3003",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(com.google.javascript.rhino.Node)",
        "snippet": "  static JSDocInfo getBestJSDocInfo(Node n) {\n    JSDocInfo info = n.getJSDocInfo();\n    if (info == null) {\n      Node parent = n.getParent();\n      if (parent == null) {\n        return null;\n      }\n\n      if (parent.isName()) {\n        return getBestJSDocInfo(parent);\n      } else if (parent.isAssign()) {\n        return parent.getJSDocInfo();\n      } else if (isObjectLitKey(parent, parent.getParent())) {\n        return parent.getJSDocInfo();\n      } else if (parent.isFunction()) {\n        return parent.getJSDocInfo();\n      } else if (parent.isVar() && parent.hasOneChild()) {\n        return parent.getJSDocInfo();\n      } else if ((parent.isHook() && parent.getFirstChild() != n) ||\n                 parent.isOr() ||\n                 parent.isAnd() ||\n                 (parent.isComma() && parent.getFirstChild() != n)) {\n        return getBestJSDocInfo(parent);\n      }\n    }\n    return info;\n  }\n",
        "begin_line": 3003,
        "end_line": 3029,
        "comment": " Find the best JSDoc for the given node. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1236
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processFunctionCall#595",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall)",
        "snippet": "    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));\n      for (AstNode child : callNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n\n      node.setLineno(node.getFirstChild().getLineno());\n      node.setCharno(node.getFirstChild().getCharno());\n      maybeSetLengthFrom(node, callNode);\n      return node;\n    }\n",
        "begin_line": 595,
        "end_line": 607,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1204
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.replaceTopLevelExpressionWithRhs#1652",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.replaceTopLevelExpressionWithRhs(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void replaceTopLevelExpressionWithRhs(Node parent, Node n) {\n    // validate inputs\n    switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.FOR:\n      case Token.LABEL:\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Unsupported parent node type in replaceWithRhs \" +\n            Token.name(parent.getType()));\n    }\n\n    switch (n.getType()) {\n      case Token.EXPR_RESULT:\n      case Token.FUNCTION:\n      case Token.VAR:\n        break;\n      case Token.ASSIGN:\n        Preconditions.checkArgument(parent.isFor(),\n            \"Unsupported assignment in replaceWithRhs. parent: %s\", Token.name(parent.getType()));\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Unsupported node type in replaceWithRhs \" +\n            Token.name(n.getType()));\n    }\n\n    // gather replacements\n    List<Node> replacements = Lists.newArrayList();\n    for (Node rhs : getRhsSubexpressions(n)) {\n      replacements.addAll(getSideEffectNodes(rhs));\n    }\n\n    if (parent.isFor()) {\n      // tweak replacements array s.t. it is a single expression node.\n      if (replacements.isEmpty()) {\n        replacements.add(IR.empty());\n      } else {\n        Node expr = collapseReplacements(replacements);\n        replacements.clear();\n        replacements.add(expr);\n      }\n    }\n\n    changeProxy.replaceWith(parent, n, replacements);\n  }\n",
        "begin_line": 1652,
        "end_line": 1699,
        "comment": "\n   * Simplify a toplevel expression, while preserving program\n   * behavior.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1187
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.getSideEffectNodes#1597",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.getSideEffectNodes(com.google.javascript.rhino.Node)",
        "snippet": "  private List<Node> getSideEffectNodes(Node n) {\n    List<Node> subexpressions = Lists.newArrayList();\n    NodeTraversal.traverse(\n        compiler, n,\n        new GatherSideEffectSubexpressionsCallback(\n            compiler,\n            new CopySideEffectSubexpressions(compiler, subexpressions)));\n\n    List<Node> replacements =\n        Lists.newArrayListWithExpectedSize(subexpressions.size());\n    for (Node subexpression : subexpressions) {\n      replacements.add(NodeUtil.newExpr(subexpression));\n    }\n    return replacements;\n  }\n",
        "begin_line": 1597,
        "end_line": 1611,
        "comment": "\n   * Extract a list of replacement nodes to use.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.117
        },
        "num_failing_tests": 2
    },
    {
        "name": "GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "class_name": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
        "signature": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions.CopySideEffectSubexpressions(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.rhino.Node>)",
        "snippet": "    CopySideEffectSubexpressions(AbstractCompiler compiler,\n                                 List<Node> replacements) {\n      this.compiler = compiler;\n      this.replacements = replacements;\n    }\n",
        "begin_line": 97,
        "end_line": 101,
        "comment": "\n     * Creates the accumulator.\n     *\n     * @param compiler - the AbstractCompiler\n     * @param replacements - list to accumulate into\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.117
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.isConstructorOrEnumDeclaration#577",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.isConstructorOrEnumDeclaration(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isConstructorOrEnumDeclaration(Node n, Node parent) {\n      JSDocInfo info;\n      int valueNodeType;\n      switch (parent.getType()) {\n        case Token.ASSIGN:\n          info = parent.getJSDocInfo();\n          valueNodeType = n.getNext().getType();\n          break;\n        case Token.VAR:\n          info = n.getJSDocInfo();\n          if (info == null) {\n            info = parent.getJSDocInfo();\n          }\n          Node valueNode = n.getFirstChild();\n          valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;\n          break;\n        default:\n          if (NodeUtil.isFunctionDeclaration(parent)) {\n            info = parent.getJSDocInfo();\n            valueNodeType = Token.FUNCTION;\n            break;\n          }\n          return false;\n      }\n      // Heed the annotations only if they're sensibly used.\n      return info != null &&\n             (info.isConstructor() && valueNodeType == Token.FUNCTION ||\n              info.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT);\n    }\n",
        "begin_line": 577,
        "end_line": 605,
        "comment": "\n     * Determines whether a set operation is a constructor or enumeration\n     * declaration. The set operation may either be an assignment to a name,\n     * a variable declaration, or an object literal key mapping.\n     *\n     * @param n The node that represents the name being set\n     * @param parent Parent node of {@code n} (an ASSIGN, VAR, or OBJLIT node)\n     * @return Whether the set operation is either a constructor or enum\n     *     declaration\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1132
        },
        "num_failing_tests": 1
    },
    {
        "name": "NameAnalyzer.nodeRemoved#1005",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.RemoveListener.nodeRemoved(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void nodeRemoved(Node n) {\n      compiler.reportCodeChange();\n    }\n",
        "begin_line": 1005,
        "end_line": 1008,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1122
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.removeUnreferenced#1113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.removeUnreferenced()",
        "snippet": "  void removeUnreferenced() {\n    RemoveListener listener = new RemoveListener();\n    changeProxy.registerListener(listener);\n\n    for (RefNode refNode : refNodes) {\n      JsName name = refNode.name();\n      if (!name.referenced && !name.externallyDefined) {\n        refNode.remove();\n      }\n    }\n\n    changeProxy.unregisterListener(listener);\n  }\n",
        "begin_line": 1113,
        "end_line": 1125,
        "comment": "\n   * Removes all unreferenced variables.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1122
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.replaceWithRhs#1620",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.replaceWithRhs(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void replaceWithRhs(Node parent, Node n) {\n    if (valueConsumedByParent(n, parent)) {\n      // parent reads from n directly; replace it with n's rhs + lhs\n      // subexpressions with side effects.\n      List<Node> replacements = getRhsSubexpressions(n);\n      List<Node> newReplacements = Lists.newArrayList();\n      for (int i = 0; i < replacements.size() - 1; i++) {\n        newReplacements.addAll(getSideEffectNodes(replacements.get(i)));\n      }\n      Node valueExpr = replacements.get(replacements.size() - 1);\n      valueExpr.detachFromParent();\n      newReplacements.add(valueExpr);\n      changeProxy.replaceWith(\n          parent, n, collapseReplacements(newReplacements));\n    } else if (n.isAssign() && !parent.isFor()) {\n      // assignment appears in a RHS expression.  we have already\n      // considered names in the assignment's RHS as being referenced;\n      // replace the assignment with its RHS.\n      // TODO(user) make the pass smarter about these cases and/or run\n      // this pass and RemoveConstantExpressions together in a loop.\n      Node replacement = n.getLastChild();\n      replacement.detachFromParent();\n      changeProxy.replaceWith(parent, n, replacement);\n    } else {\n      replaceTopLevelExpressionWithRhs(parent, n);\n    }\n  }\n",
        "begin_line": 1620,
        "end_line": 1646,
        "comment": "\n   * Replace n with a simpler expression, while preserving program\n   * behavior.\n   *\n   * If the n's value is used, replace it with its rhs; otherwise\n   * replace it with the subexpressions that have side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1122
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.valueConsumedByParent#1716",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.valueConsumedByParent(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private boolean valueConsumedByParent(Node n, Node parent) {\n    if (NodeUtil.isAssignmentOp(parent)) {\n      return parent.getLastChild() == n;\n    }\n\n    switch (parent.getType()) {\n      case Token.NAME:\n      case Token.RETURN:\n        return true;\n      case Token.AND:\n      case Token.OR:\n      case Token.HOOK:\n        return parent.getFirstChild() == n;\n      case Token.FOR:\n        return parent.getFirstChild().getNext() == n;\n      case Token.IF:\n      case Token.WHILE:\n        return parent.getFirstChild() == n;\n      case Token.DO:\n        return parent.getLastChild() == n;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1716,
        "end_line": 1739,
        "comment": "\n   * Determine if the parent reads the value of a child expression\n   * directly.  This is true children used in predicates, RETURN\n   * statements and, rhs of variable declarations and assignments.\n   *\n   * In the case of:\n   * if (a) b else c\n   *\n   * This method returns true for \"a\", and false for \"b\" and \"c\": the\n   * IF expression does something special based on \"a\"'s value.  \"b\"\n   * and \"c\" are effectivelly outputs.  Same logic applies to FOR,\n   * WHILE and DO loop predicates.  AND/OR/HOOK expressions are\n   * syntactic sugar for IF statements; therefore this method returns\n   * true for the predicate and false otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1122
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstChangeProxy.notifyOfRemoval#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "class_name": "com.google.javascript.jscomp.AstChangeProxy",
        "signature": "com.google.javascript.jscomp.AstChangeProxy.notifyOfRemoval(com.google.javascript.rhino.Node)",
        "snippet": "  private void notifyOfRemoval(Node node) {\n    for (ChangeListener listener : listeners) {\n      listener.nodeRemoved(node);\n    }\n  }\n",
        "begin_line": 69,
        "end_line": 73,
        "comment": "\n   * Notifies listeners about a removal.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1122
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstChangeProxy.replaceWith#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "class_name": "com.google.javascript.jscomp.AstChangeProxy",
        "signature": "com.google.javascript.jscomp.AstChangeProxy.replaceWith(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.util.List<com.google.javascript.rhino.Node>)",
        "snippet": "  final void replaceWith(Node parent, Node node, List<Node> replacements) {\n    Preconditions.checkNotNull(replacements, \"\\\"replacements\\\" is null.\");\n\n    int size = replacements.size();\n\n    if ((size == 1) && node.isEquivalentTo(replacements.get(0))) {\n      // trees are equal... don't replace\n      return;\n    }\n\n    int parentType = parent.getType();\n\n    Preconditions.checkState(size == 1 ||\n        parentType == Token.BLOCK ||\n        parentType == Token.SCRIPT ||\n        parentType == Token.LABEL);\n\n    if (parentType == Token.LABEL && size != 1) {\n      Node block = IR.block();\n      for (Node newChild : replacements) {\n        newChild.copyInformationFrom(node);\n        Node oldParent = newChild.getParent();\n        block.addChildToBack(newChild);\n      }\n\n      parent.replaceChild(node, block);\n\n    } else {\n      for (Node newChild : replacements) {\n        newChild.copyInformationFrom(node);\n        Node oldParent = newChild.getParent();\n        parent.addChildBefore(newChild, node);\n      }\n      parent.removeChild(node);\n\n    }\n    notifyOfRemoval(node);\n  }\n",
        "begin_line": 94,
        "end_line": 131,
        "comment": "\n   * Replaces a node with the provided list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1122
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.classDefiningCallsHaveSideEffects#968",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindReferences.NodeAccumulator.classDefiningCallsHaveSideEffects()",
        "snippet": "      @Override\n      public boolean classDefiningCallsHaveSideEffects() {\n        return false;\n      }\n",
        "begin_line": 968,
        "end_line": 971,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 2
    },
    {
        "name": "GatherSideEffectSubexpressionsCallback.isClassDefiningCall#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "class_name": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
        "signature": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.isClassDefiningCall(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isClassDefiningCall(Node callNode) {\n    SubclassRelationship classes =\n        compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n    return classes != null;\n  }\n",
        "begin_line": 203,
        "end_line": 207,
        "comment": "\n   * Determines if a call defines a class inheritance or mixing\n   * relation, according to the current coding convention.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.shouldTraverse#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.isObjectLit()) {\n        normalizeObjectLiteralAnnotations(n);\n      }\n      return true;\n    }\n",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.normalizeObjectLiteralAnnotations#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.normalizeObjectLiteralAnnotations(com.google.javascript.rhino.Node)",
        "snippet": "    private void normalizeObjectLiteralAnnotations(Node objlit) {\n      Preconditions.checkState(objlit.isObjectLit());\n      for (Node key = objlit.getFirstChild();\n           key != null; key = key.getNext()) {\n        Node value = key.getFirstChild();\n        normalizeObjectLiteralKeyAnnotations(objlit, key, value);\n      }\n    }\n",
        "begin_line": 151,
        "end_line": 158,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.getValueType#508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.getValueType(com.google.javascript.rhino.Node)",
        "snippet": "    Name.Type getValueType(Node n) {\n      switch (n.getType()) {\n        case Token.OBJECTLIT:\n          return Name.Type.OBJECTLIT;\n        case Token.FUNCTION:\n          return Name.Type.FUNCTION;\n        case Token.OR:\n          // Recurse on the second value. If the first value were an object\n          // literal or function, then the OR would be meaningless and the\n          // second value would be dead code. Assume that if the second value\n          // is an object literal or function, then the first value will also\n          // evaluate to one when it doesn't evaluate to false.\n          return getValueType(n.getLastChild());\n        case Token.HOOK:\n          // The same line of reasoning used for the OR case applies here.\n          Node second = n.getFirstChild().getNext();\n          Name.Type t = getValueType(second);\n          if (t != Name.Type.OTHER) return t;\n          Node third = second.getNext();\n          return getValueType(third);\n      }\n      return Name.Type.OTHER;\n    }\n",
        "begin_line": 508,
        "end_line": 530,
        "comment": "\n     * Gets the type of a value or simple expression.\n     *\n     * @param n An rvalue in an assignment or variable declaration (not null)\n     * @return A {@link Name.Type}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeSafeDispatcher.process#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
        "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.process(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  public T process(AstNode node) {\n    switch (node.getType()) {\n      case Token.ADD:\n      case Token.AND:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.OR:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return processInfixExpression((InfixExpression) node);\n      case Token.ARRAYLIT:\n        return processArrayLiteral((ArrayLiteral) node);\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return processAssignment((Assignment) node);\n      case Token.BITNOT:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.INC:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.TYPEOF:\n      case Token.VOID:\n        return processUnaryExpression((UnaryExpression) node);\n      case Token.BLOCK:\n        if (node instanceof Block) {\n          return processBlock((Block) node);\n        } else  if (node instanceof Scope) {\n          return processScope((Scope) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n      case Token.CALL:\n        return processFunctionCall((FunctionCall) node);\n      case Token.CASE:\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n      case Token.CATCH:\n        return processCatchClause((CatchClause) node);\n      case Token.COLON:\n        return processObjectProperty((ObjectProperty) node);\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n      case Token.EMPTY:\n        return processEmptyExpression((EmptyExpression) node);\n      case Token.EXPR_RESULT:\n      case Token.EXPR_VOID:\n        if (node instanceof ExpressionStatement) {\n          return processExpressionStatement((ExpressionStatement) node);\n        } else  if (node instanceof LabeledStatement) {\n          return processLabeledStatement((LabeledStatement) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.DEBUGGER:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        return processKeywordLiteral((KeywordLiteral) node);\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else  if (node instanceof ForLoop) {\n          return processForLoop((ForLoop) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.FUNCTION:\n        return processFunctionNode((FunctionNode) node);\n      case Token.GETELEM:\n        return processElementGet((ElementGet) node);\n      case Token.GETPROP:\n        return processPropertyGet((PropertyGet) node);\n      case Token.HOOK:\n        return processConditionalExpression((ConditionalExpression) node);\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n      case Token.LABEL:\n        return processLabel((Label) node);\n      case Token.LP:\n        return processParenthesizedExpression((ParenthesizedExpression) node);\n      case Token.NAME:\n        return processName((Name) node);\n      case Token.NEW:\n        return processNewExpression((NewExpression) node);\n      case Token.NUMBER:\n        return processNumberLiteral((NumberLiteral) node);\n      case Token.OBJECTLIT:\n        return processObjectLiteral((ObjectLiteral) node);\n      case Token.REGEXP:\n        return processRegExpLiteral((RegExpLiteral) node);\n      case Token.RETURN:\n        return processReturnStatement((ReturnStatement) node);\n      case Token.SCRIPT:\n        return processAstRoot((AstRoot) node);\n      case Token.STRING:\n        return processStringLiteral((StringLiteral) node);\n      case Token.SWITCH:\n        return processSwitchStatement((SwitchStatement) node);\n      case Token.THROW:\n        return processThrowStatement((ThrowStatement) node);\n      case Token.TRY:\n        return processTryStatement((TryStatement) node);\n      case Token.CONST:\n      case Token.VAR:\n        if (node instanceof VariableDeclaration) {\n          return processVariableDeclaration((VariableDeclaration) node);\n        } else  if (node instanceof VariableInitializer) {\n          return processVariableInitializer((VariableInitializer) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.WHILE:\n        return processWhileLoop((WhileLoop) node);\n      case Token.WITH:\n        return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n  }\n",
        "begin_line": 118,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processObjectLiteral#766",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral)",
        "snippet": "    @Override\n    Node processObjectLiteral(ObjectLiteral literalNode) {\n      if (literalNode.isDestructuring()) {\n        reportDestructuringAssign(literalNode);\n      }\n\n      Node node = newNode(Token.OBJECTLIT);\n      for (ObjectProperty el : literalNode.getElements()) {\n        if (config.languageMode == LanguageMode.ECMASCRIPT3) {\n          if (el.isGetter()) {\n            reportGetter(el);\n            continue;\n          } else if (el.isSetter()) {\n            reportSetter(el);\n            continue;\n          }\n        }\n\n        Node key = transformAsString(el.getLeft());\n        Node value = transform(el.getRight());\n        if (el.isGetter()) {\n          key.setType(Token.GETTER_DEF);\n          Preconditions.checkState(value.isFunction());\n          if (getFnParamNode(value).hasChildren()) {\n            reportGetterParam(el.getLeft());\n          }\n        } else if (el.isSetter()) {\n          key.setType(Token.SETTER_DEF);\n          Preconditions.checkState(value.isFunction());\n          if (!getFnParamNode(value).hasOneChild()) {\n            reportSetterParam(el.getLeft());\n          }\n        }\n        key.addChildToFront(value);\n        node.addChildToBack(key);\n      }\n      return node;\n    }\n",
        "begin_line": 766,
        "end_line": 803,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.evaluatesToLocalValue#2893",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(com.google.javascript.rhino.Node, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n",
        "begin_line": 2893,
        "end_line": 2957,
        "comment": "\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1094
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isConsistentIdGenerator#428",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isConsistentIdGenerator()",
        "snippet": "  public boolean isConsistentIdGenerator() {\n    return getFlag(MASK_CONSISTIDGEN);\n  }\n",
        "begin_line": 428,
        "end_line": 430,
        "comment": "\n   * @return whether the {@code @consistentIdGenerator} is present on\n   * this {@link JSDocInfo}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1078
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isIdGenerator#533",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isIdGenerator()",
        "snippet": "  public boolean isIdGenerator() {\n    return getFlag(MASK_IDGEN);\n  }\n",
        "begin_line": 533,
        "end_line": 535,
        "comment": "\n   * @return whether the {@code @idGenerator} is present on\n   * this {@link JSDocInfo}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1078
        },
        "num_failing_tests": 1
    },
    {
        "name": "ReplaceIdGenerators.visit#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.GatherGenerators.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      JSDocInfo doc = n.getJSDocInfo();\n      if (doc == null) {\n        return;\n      }\n\n      if (!doc.isConsistentIdGenerator() &&\n          !doc.isIdGenerator()) {\n        return;\n      }\n\n      if (doc.isConsistentIdGenerator() && doc.isIdGenerator()) {\n        compiler.report(t.makeError(n, CONFLICTING_GENERATOR_TYPE));\n      }\n\n      String name = null;\n      if (n.isAssign()) {\n        name = n.getFirstChild().getQualifiedName();\n      } else if (n.isVar()) {\n        name = n.getFirstChild().getString();\n      } else if (n.isFunction()){\n        name = n.getFirstChild().getString();\n        if (name.isEmpty()) {\n          return;\n        }\n      }\n\n      // TODO(user): Error on function that has both. Or redeclartion\n      // on the same function.\n      if (doc.isConsistentIdGenerator()) {\n        consistNameGenerators.put(name,\n            new NameGenerator(Collections.<String>emptySet(), \"\", null));\n        consistNameMap.put(name, Maps.<String, String>newLinkedHashMap());\n      } else {\n        nameGenerators.put(name,\n          new NameGenerator(Collections.<String>emptySet(), \"\", null));\n      }\n      idGeneratorMaps.put(name, Lists.<Replacement>newArrayList());\n    }\n",
        "begin_line": 77,
        "end_line": 116,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1078
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addList#891",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext) {\n    for (Node n = firstInList; n != null; n = n.getNext()) {\n      boolean isFirst = n == firstInList;\n      if (isFirst) {\n        addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);\n      } else {\n        cc.listSeparator();\n        addExpr(n, isArrayOrFunctionArgument ? 1 : 0);\n      }\n    }\n  }\n",
        "begin_line": 891,
        "end_line": 902,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1078
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.addProperty#906",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.addProperty(java.lang.String, boolean)",
        "snippet": "    Name addProperty(String name, boolean inExterns) {\n      if (props == null) {\n        props = new ArrayList<Name>();\n      }\n      Name node = new Name(name, this, inExterns);\n      props.add(node);\n      return node;\n    }\n",
        "begin_line": 906,
        "end_line": 913,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1043
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.getOrCreateName#841",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.getOrCreateName(java.lang.String)",
        "snippet": "    Name getOrCreateName(String name) {\n      Name node = nameMap.get(name);\n      if (node == null) {\n        int i = name.lastIndexOf('.');\n        if (i >= 0) {\n          String parentName = name.substring(0, i);\n          Name parent = getOrCreateName(parentName);\n          node = parent.addProperty(name.substring(i + 1), inExterns);\n        } else {\n          node = new Name(name, null, inExterns);\n          globalNames.add(node);\n        }\n        nameMap.put(name, node);\n      }\n      return node;\n    }\n",
        "begin_line": 841,
        "end_line": 856,
        "comment": "\n     * Gets a {@link Name} instance for a global name. Creates it if necessary,\n     * as well as instances for any of its prefixes that are not yet defined.\n     *\n     * @param name A global name (e.g. \"a\", \"a.b.c.d\")\n     * @return The {@link Name} instance for {@code name}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1043
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.getClassesDefinedByCall#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.getClassesDefinedByCall(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public SubclassRelationship getClassesDefinedByCall(Node callNode) {\n      return nextConvention.getClassesDefinedByCall(callNode);\n    }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.listSeparator#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.listSeparator()",
        "snippet": "  void listSeparator() {\n    add(\",\");\n    maybeLineBreak();\n  }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "NameAnalyzer.createNameInformation#1432",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.createNameInformation(java.lang.String, com.google.javascript.jscomp.Scope, com.google.javascript.rhino.Node)",
        "snippet": "  private NameInformation createNameInformation(\n      String name, Scope scope, Node rootNameNode) {\n    // Check the scope. Currently we're only looking at globally scoped vars.\n    String rootName = rootNameNode.getString();\n    Var v = scope.getVar(rootName);\n    boolean isExtern = (v == null && externalNames.contains(rootName));\n    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||\n        rootName.equals(WINDOW);\n    if (!isGlobalRef) {\n      return null;\n    }\n\n    NameInformation nameInfo = new NameInformation();\n\n    // If a prototype property or method, fill in prototype information.\n    int idx = name.indexOf(PROTOTYPE_SUBSTRING);\n    if (idx != -1) {\n      nameInfo.isPrototype = true;\n      nameInfo.prototypeClass = name.substring(0, idx);\n      nameInfo.prototypeProperty = name.substring(\n          idx + PROTOTYPE_SUBSTRING_LEN);\n    }\n\n    nameInfo.name = name;\n    nameInfo.isExternallyReferenceable =\n        isExtern || isExternallyReferenceable(scope, name);\n    return nameInfo;\n  }\n",
        "begin_line": 1432,
        "end_line": 1459,
        "comment": "\n   * Creates name information for a particular qualified name that occurs in a\n   * particular scope.\n   *\n   * @param name A qualified name (e.g. \"x\" or \"a.b.c\")\n   * @param scope The scope in which {@code name} occurs\n   * @param rootNameNode The NAME node for the first token of {@code name}\n   * @return The name information, or null if the name is irrelevant to this\n   *     pass\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0998
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.traverseEdge#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.ReferencePropagationCallback.traverseEdge(com.google.javascript.jscomp.NameAnalyzer.JsName, com.google.javascript.jscomp.NameAnalyzer.RefType, com.google.javascript.jscomp.NameAnalyzer.JsName)",
        "snippet": "    @Override\n    public boolean traverseEdge(JsName from,\n                                RefType callSite,\n                                JsName to) {\n      if (from.referenced && !to.referenced) {\n        to.referenced = true;\n        return true;\n      } else {\n        return false;\n      }\n    }\n",
        "begin_line": 169,
        "end_line": 179,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.report#647",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.report(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public void report(Node n, DiagnosticType diagnosticType,\n      String... arguments) {\n    JSError error = JSError.make(getSourceName(), n, diagnosticType, arguments);\n    compiler.report(error);\n  }\n",
        "begin_line": 647,
        "end_line": 651,
        "comment": " Reports a diagnostic (error or warning) ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.handleGet#643",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.handleGet(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "    void handleGet(NodeTraversal t, Node n, Node parent, String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Ref.Type type = Ref.Type.DIRECT_GET;\n      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.IF:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            break;\n          case Token.CALL:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.NEW:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.OR:\n          case Token.AND:\n            // This node is x or y in (x||y) or (x&&y). We only know that an\n            // alias is not getting created for this name if the result is used\n            // in a boolean context or assigned to the same name\n            // (e.g. var a = a || {}).\n            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            break;\n          case Token.HOOK:\n            if (n != parent.getFirstChild()) {\n              // This node is y or z in (x?y:z). We only know that an alias is\n              // not getting created for this name if the result is assigned to\n              // the same name (e.g. var a = a ? a : {}).\n              type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            }\n            break;\n          case Token.DELPROP:\n            type = Ref.Type.DELETE_PROP;\n            break;\n          default:\n            type = Ref.Type.ALIASING_GET;\n            break;\n        }\n      }\n\n      handleGet(t, n, parent, name, type);\n    }\n",
        "begin_line": 643,
        "end_line": 693,
        "comment": "\n     * Updates our respresentation of the global namespace to reflect a read\n     * of a global name.\n     *\n     * @param t The traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.nodeTypeMayHaveSideEffects#1072",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler) {\n    if (isAssignmentOp(n)) {\n      return true;\n    }\n\n    switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1072,
        "end_line": 1093,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0983
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.maybeRecordAlias#948",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindReferences.maybeRecordAlias(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NameAnalyzer.NameInformation, java.lang.String)",
        "snippet": "    private boolean maybeRecordAlias(\n        String name, Node parent,\n        NameInformation referring, String referringName) {\n      if ((parent.isName() ||\n          parent.isAssign()) &&\n          referring != null &&\n          scopes.get(parent) == referring) {\n        recordAlias(referringName, name);\n        return true;\n      }\n      return false;\n    }\n",
        "begin_line": 948,
        "end_line": 959,
        "comment": "\n     * @return Whether the alias was recorded.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0969
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.recordReference#1094",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.recordReference(java.lang.String, java.lang.String, com.google.javascript.jscomp.NameAnalyzer.RefType)",
        "snippet": "  private void recordReference(String fromName, String toName,\n                               RefType depType) {\n    if (fromName.equals(toName)) {\n      // Don't bother recording self-references.\n      return;\n    }\n\n    JsName from = getName(fromName, true);\n    JsName to = getName(toName, true);\n    referenceGraph.createNode(from);\n    referenceGraph.createNode(to);\n    if (!referenceGraph.isConnectedInDirection(from, depType, to)) {\n      referenceGraph.connect(from, depType, to);\n    }\n  }\n",
        "begin_line": 1094,
        "end_line": 1108,
        "comment": "\n   * Records a reference from one name to another name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0947
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.recordConstructor#701",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordConstructor()",
        "snippet": "  public boolean recordConstructor() {\n    if (!hasAnySingletonTypeTags() &&\n        !currentInfo.isConstructor() && !currentInfo.isInterface()) {\n      currentInfo.setConstructor(true);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 701,
        "end_line": 710,
        "comment": "\n   * Records that the {@link JSDocInfo} being built should have its\n   * {@link JSDocInfo#isConstructor()} flag set to {@code true}.\n   *\n   * @return {@code true} if the constructor was recorded and {@code false}\n   *     if it was already defined or it was incompatible with the existing\n   *     flags\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0939
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.hasAnySingletonTypeTags#965",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnySingletonTypeTags()",
        "snippet": "  private boolean hasAnySingletonTypeTags() {\n    return currentInfo.hasType() ||\n        currentInfo.hasTypedefType() ||\n        currentInfo.hasEnumParameterType();\n  }\n",
        "begin_line": 965,
        "end_line": 969,
        "comment": "\n   * Whether the current doc info has any of the singleton type\n   * tags that may not appear with other type tags, like\n   * {@code @type} or {@code @typedef}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0939
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setConstructor#347",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setConstructor(boolean)",
        "snippet": "  void setConstructor(boolean value) {\n    setFlag(value, MASK_CONSTRUCTOR);\n  }\n",
        "begin_line": 347,
        "end_line": 349,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0939
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isJavaDispatch#565",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isJavaDispatch()",
        "snippet": "  public boolean isJavaDispatch() {\n    return getFlag(MASK_JAVADISPATCH);\n  }\n",
        "begin_line": 565,
        "end_line": 567,
        "comment": "\n   * Returns whether the {@code @javadispath} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0939
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.parse#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parse()",
        "snippet": "  boolean parse() {\n    int lineno;\n    int charno;\n\n    // JSTypes are represented as Rhino AST nodes, and then resolved later.\n    JSTypeExpression type;\n\n    state = State.SEARCHING_ANNOTATION;\n    skipEOLs();\n\n    JsDocToken token = next();\n\n    List<ExtendedTypeInfo> extendedTypes = Lists.newArrayList();\n\n    // Always record that we have a comment.\n    if (jsdocBuilder.shouldParseDocumentation()) {\n      ExtractionInfo blockInfo = extractBlockComment(token);\n      token = blockInfo.token;\n      if (!blockInfo.string.isEmpty()) {\n        jsdocBuilder.recordBlockDescription(blockInfo.string);\n      }\n    } else {\n      if (token != JsDocToken.ANNOTATION &&\n          token != JsDocToken.EOC) {\n        // Mark that there was a description, but don't bother marking\n        // what it was.\n        jsdocBuilder.recordBlockDescription(\"\");\n      }\n    }\n\n    // Parse the actual JsDoc.\n    retry: for (;;) {\n      switch (token) {\n        case ANNOTATION:\n          if (state == State.SEARCHING_ANNOTATION) {\n            state = State.SEARCHING_NEWLINE;\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n\n            String annotationName = stream.getString();\n            Annotation annotation = annotationNames.get(annotationName);\n            if (annotation == null) {\n              parser.addParserWarning(\"msg.bad.jsdoc.tag\", annotationName,\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              // Mark the beginning of the annotation.\n              jsdocBuilder.markAnnotation(annotationName, lineno, charno);\n\n              switch (annotation) {\n                case AUTHOR:\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo authorInfo = extractSingleLineBlock();\n                    String author = authorInfo.string;\n\n                    if (author.length() == 0) {\n                      parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      jsdocBuilder.addAuthor(author);\n                    }\n                    token = authorInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case CONSISTENTIDGENERATOR:\n                  if (!jsdocBuilder.recordConsistentIdGenerator()) {\n                    parser.addParserWarning(\"msg.jsdoc.consistidgen\",\n                      stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case CONSTANT:\n                  if (!jsdocBuilder.recordConstancy()) {\n                    parser.addParserWarning(\"msg.jsdoc.const\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case CONSTRUCTOR:\n                  if (!jsdocBuilder.recordConstructor()) {\n                    if (jsdocBuilder.isInterfaceRecorded()) {\n                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DEPRECATED:\n                  if (!jsdocBuilder.recordDeprecated()) {\n                    parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  // Find the reason/description, if any.\n                  ExtractionInfo reasonInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String reason = reasonInfo.string;\n\n                  if (reason.length() > 0) {\n                    jsdocBuilder.recordDeprecationReason(reason);\n                  }\n\n                  token = reasonInfo.token;\n                  continue retry;\n\n                case INTERFACE:\n                  if (!jsdocBuilder.recordInterface()) {\n                    if (jsdocBuilder.isConstructorRecorded()) {\n                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DESC:\n                  if (jsdocBuilder.isDescriptionRecorded()) {\n                    parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                        stream.getLineno(), stream.getCharno());\n                    token = eatTokensUntilEOL();\n                    continue retry;\n                  } else {\n                    ExtractionInfo descriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String description = descriptionInfo.string;\n\n                    jsdocBuilder.recordDescription(description);\n                    token = descriptionInfo.token;\n                    continue retry;\n                  }\n\n                case FILE_OVERVIEW:\n                  String fileOverview = \"\";\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo fileOverviewInfo =\n                        extractMultilineTextualBlock(token,\n                            WhitespaceOption.TRIM);\n\n                    fileOverview = fileOverviewInfo.string;\n\n                    token = fileOverviewInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n\n                  if (!jsdocBuilder.recordFileOverview(fileOverview) ||\n                      fileOverviewJSDocInfo != null) {\n                    parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  continue retry;\n\n                case LICENSE:\n                case PRESERVE:\n                  ExtractionInfo preserveInfo =\n                      extractMultilineTextualBlock(token,\n                                                   WhitespaceOption.PRESERVE);\n\n                  String preserve = preserveInfo.string;\n\n                  if (preserve.length() > 0) {\n                    if (fileLevelJsDocBuilder != null) {\n                      fileLevelJsDocBuilder.append(preserve);\n                    }\n                  }\n\n                  token = preserveInfo.token;\n                  continue retry;\n\n                case ENUM:\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  type = null;\n                  if (token != JsDocToken.EOL && token != JsDocToken.EOC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n                  }\n\n                  if (type == null) {\n                    type = createJSTypeExpression(newStringNode(\"number\"));\n                  }\n                  if (!jsdocBuilder.recordEnumParameterType(type)) {\n                    parser.addTypeWarning(\n                        \"msg.jsdoc.incompat.type\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case EXPORT:\n                  if (!jsdocBuilder.recordExport()) {\n                    parser.addParserWarning(\"msg.jsdoc.export\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTERNS:\n                  if (!jsdocBuilder.recordExterns()) {\n                    parser.addParserWarning(\"msg.jsdoc.externs\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case JAVA_DISPATCH:\n                  if (!jsdocBuilder.recordJavaDispatch()) {\n                    parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTENDS:\n                case IMPLEMENTS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  boolean matchingRc = false;\n\n                  if (token == JsDocToken.LC) {\n                    token = next();\n                    matchingRc = true;\n                  }\n\n                  if (token == JsDocToken.STRING) {\n                    Node typeNode = parseAndRecordTypeNameNode(\n                        token, lineno, charno, matchingRc);\n\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && !matchingRc) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                    type = createJSTypeExpression(typeNode);\n\n                    if (annotation == Annotation.EXTENDS) {\n                      // record the extended type, check later\n                      extendedTypes.add(new ExtendedTypeInfo(\n                          type, stream.getLineno(), stream.getCharno()));\n                    } else {\n                      Preconditions.checkState(\n                          annotation == Annotation.IMPLEMENTS);\n                      if (!jsdocBuilder.recordImplementedInterface(type)) {\n                        parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                            lineno, charno);\n                      }\n                    }\n                    token = next();\n                    if (matchingRc) {\n                      if (token != JsDocToken.RC) {\n                        parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                            stream.getLineno(), stream.getCharno());\n                      }\n                    } else if (token != JsDocToken.EOL &&\n                        token != JsDocToken.EOF && token != JsDocToken.EOC) {\n                      parser.addTypeWarning(\"msg.end.annotation.expected\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case HIDDEN:\n                  if (!jsdocBuilder.recordHiddenness()) {\n                    parser.addParserWarning(\"msg.jsdoc.hidden\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case LENDS:\n                  skipEOLs();\n\n                  matchingRc = false;\n                  if (match(JsDocToken.LC)) {\n                    token = next();\n                    matchingRc = true;\n                  }\n\n                  if (match(JsDocToken.STRING)) {\n                    token = next();\n                    if (!jsdocBuilder.recordLends(stream.getString())) {\n                      parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  if (matchingRc && !match(JsDocToken.RC)) {\n                    parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case MEANING:\n                  ExtractionInfo meaningInfo =\n                      extractMultilineTextualBlock(token);\n                  String meaning = meaningInfo.string;\n                  token = meaningInfo.token;\n                  if (!jsdocBuilder.recordMeaning(meaning)) {\n                    parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  continue retry;\n\n                case NO_ALIAS:\n                  if (!jsdocBuilder.recordNoAlias()) {\n                    parser.addParserWarning(\"msg.jsdoc.noalias\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_COMPILE:\n                  if (!jsdocBuilder.recordNoCompile()) {\n                    parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_TYPE_CHECK:\n                  if (!jsdocBuilder.recordNoTypeCheck()) {\n                    parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NOT_IMPLEMENTED:\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case INHERIT_DOC:\n                case OVERRIDE:\n                  if (!jsdocBuilder.recordOverride()) {\n                    parser.addTypeWarning(\"msg.jsdoc.override\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case THROWS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                  }\n\n                  // *Update* the token to that after the type annotation.\n                  token = current();\n\n                  // Save the throw type.\n                  jsdocBuilder.recordThrowType(type);\n\n                  // Find the throw's description (if applicable).\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo descriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String description = descriptionInfo.string;\n\n                    if (description.length() > 0) {\n                      jsdocBuilder.recordThrowDescription(type, description);\n                    }\n\n                    token = descriptionInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case PARAM:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordParamTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                    skipEOLs();\n                    token = next();\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n                  }\n\n                  String name = null;\n                  boolean isBracketedParam = JsDocToken.LB == token;\n                  if (isBracketedParam) {\n                    token = next();\n                  }\n\n                  if (JsDocToken.STRING != token) {\n                    parser.addTypeWarning(\"msg.missing.variable.name\",\n                        lineno, charno);\n                  } else {\n                    name = stream.getString();\n\n                    if (isBracketedParam) {\n                      token = next();\n\n                      // Throw out JsDocToolkit's \"default\" parameter\n                      // annotation.  It makes no sense under our type\n                      // system.\n                      if (JsDocToken.EQUALS == token) {\n                        token = next();\n                        if (JsDocToken.STRING == token) {\n                          token = next();\n                        }\n                      }\n\n                      if (JsDocToken.RB != token) {\n                        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n                      } else if (type != null) {\n                        // Make the type expression optional, if it isn't\n                        // already.\n                        type = JSTypeExpression.makeOptionalArg(type);\n                      }\n                    }\n\n                    // If the param name has a DOT in it, just throw it out\n                    // quietly. We do not handle the JsDocToolkit method\n                    // for handling properties of params.\n                    if (name.indexOf('.') > -1) {\n                      name = null;\n                    } else if (!jsdocBuilder.recordParameter(name, type)) {\n                      if (jsdocBuilder.hasParameter(name)) {\n                        parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                            lineno, charno);\n                      } else {\n                        parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                            lineno, charno);\n                      }\n                    }\n                  }\n\n                  if (name == null) {\n                    token = eatTokensUntilEOL(token);\n                    continue retry;\n                  }\n\n                  jsdocBuilder.markName(name, sourceFile, lineno, charno);\n\n                  // Find the parameter's description (if applicable).\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo paramDescriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String paramDescription = paramDescriptionInfo.string;\n\n                    if (paramDescription.length() > 0) {\n                      jsdocBuilder.recordParameterDescription(name,\n                          paramDescription);\n                    }\n\n                    token = paramDescriptionInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case PRESERVE_TRY:\n                  if (!jsdocBuilder.recordPreserveTry()) {\n                    parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PRIVATE:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.private\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PROTECTED:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.protected\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PUBLIC:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.public\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SHADOW:\n                  if (!jsdocBuilder.recordNoShadow()) {\n                    parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SIDE_EFFECTS:\n                  if (!jsdocBuilder.recordNoSideEffects()) {\n                    parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case MODIFIES:\n                  token = parseModifiesTag(next());\n                  continue retry;\n\n                case IMPLICIT_CAST:\n                  if (!jsdocBuilder.recordImplicitCast()) {\n                    parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case SEE:\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo referenceInfo = extractSingleLineBlock();\n                    String reference = referenceInfo.string;\n\n                    if (reference.length() == 0) {\n                      parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      jsdocBuilder.addReference(reference);\n                    }\n\n                    token = referenceInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case SUPPRESS:\n                  token = parseSuppressTag(next());\n                  continue retry;\n\n                case TEMPLATE:\n                  ExtractionInfo templateInfo = extractSingleLineBlock();\n                  String templateTypeName = templateInfo.string;\n\n                  if (templateTypeName.length() == 0) {\n                    parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else if (!jsdocBuilder.recordTemplateTypeName(\n                      templateTypeName)) {\n                    parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  token = templateInfo.token;\n                  continue retry;\n\n                case IDGENERATOR:\n                  if (!jsdocBuilder.recordIdGenerator()) {\n                    parser.addParserWarning(\"msg.jsdoc.idgen\",\n                      stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case VERSION:\n                  ExtractionInfo versionInfo = extractSingleLineBlock();\n                  String version = versionInfo.string;\n\n                  if (version.length() == 0) {\n                    parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    if (!jsdocBuilder.recordVersion(version)) {\n                       parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n\n                  token = versionInfo.token;\n                  continue retry;\n\n                case DEFINE:\n                case RETURN:\n                case THIS:\n                case TYPE:\n                case TYPEDEF:\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  Node typeNode = null;\n                  if (!lookAheadForTypeAnnotation() &&\n                      annotation == Annotation.RETURN) {\n                    // If RETURN doesn't have a type annotation, record\n                    // it as the unknown type.\n                    typeNode = newNode(Token.QMARK);\n                  } else {\n                    skipEOLs();\n                    token = next();\n                    typeNode = parseAndRecordTypeNode(token);\n                  }\n\n                  if (annotation == Annotation.THIS) {\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && token != JsDocToken.LC) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                  }\n                  type = createJSTypeExpression(typeNode);\n\n                  if (type == null) {\n                    // error reported during recursive descent\n                    // recovering parsing\n                  } else {\n                    switch (annotation) {\n                      case DEFINE:\n                        if (!jsdocBuilder.recordDefineType(type)) {\n                          parser.addParserWarning(\"msg.jsdoc.define\",\n                              lineno, charno);\n                        }\n                        break;\n\n                      case RETURN:\n                        if (!jsdocBuilder.recordReturnType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                          break;\n                        }\n\n                        // Find the return's description (if applicable).\n                        if (jsdocBuilder.shouldParseDocumentation()) {\n                          ExtractionInfo returnDescriptionInfo =\n                              extractMultilineTextualBlock(token);\n\n                          String returnDescription =\n                              returnDescriptionInfo.string;\n\n                          if (returnDescription.length() > 0) {\n                            jsdocBuilder.recordReturnDescription(\n                                returnDescription);\n                          }\n\n                          token = returnDescriptionInfo.token;\n                        } else {\n                          token = eatTokensUntilEOL(token);\n                        }\n                        continue retry;\n\n                      case THIS:\n                        if (!jsdocBuilder.recordThisType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPE:\n                        if (!jsdocBuilder.recordType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPEDEF:\n                        if (!jsdocBuilder.recordTypedef(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n                    }\n                  }\n\n                  token = eatTokensUntilEOL();\n                  continue retry;\n              }\n            }\n          }\n          break;\n\n        case EOC:\n          if (hasParsedFileOverviewDocInfo()) {\n            fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();\n          }\n          checkExtendedTypes(extendedTypes);\n          return true;\n\n        case EOF:\n          // discard any accumulated information\n          jsdocBuilder.build(null);\n          parser.addParserWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());\n          checkExtendedTypes(extendedTypes);\n          return false;\n\n        case EOL:\n          if (state == State.SEARCHING_NEWLINE) {\n            state = State.SEARCHING_ANNOTATION;\n          }\n          token = next();\n          continue retry;\n\n        default:\n          if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {\n            token = next();\n            continue retry;\n          } else {\n            state = State.SEARCHING_NEWLINE;\n            token = eatTokensUntilEOL();\n            continue retry;\n          }\n      }\n\n      // next token\n      token = next();\n    }\n  }\n",
        "begin_line": 181,
        "end_line": 941,
        "comment": "\n   * Parses a {@link JSDocInfo} object. This parsing method reads all tokens\n   * returned by the {@link JsDocTokenStream#getJsDocToken()} method until the\n   * {@link JsDocToken#EOC} is returned.\n   *\n   * @return {@code true} if JSDoc information was correctly parsed,\n   *     {@code false} otherwise\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0939
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isInterface#509",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isInterface()",
        "snippet": "  public boolean isInterface() {\n    return getFlag(MASK_INTERFACE);\n  }\n",
        "begin_line": 509,
        "end_line": 511,
        "comment": "\n   * Returns whether the {@code @interface} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasType#1028",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasType()",
        "snippet": "  public boolean hasType() {\n    return hasType(TYPEFIELD_TYPE);\n  }\n",
        "begin_line": 1028,
        "end_line": 1030,
        "comment": "\n   * Returns whether a type, specified using the {@code @type} annotation, is\n   * present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasTypedefType#1044",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasTypedefType()",
        "snippet": "  public boolean hasTypedefType() {\n    return hasType(TYPEFIELD_TYPEDEF);\n  }\n",
        "begin_line": 1044,
        "end_line": 1046,
        "comment": "\n   * Returns whether a typedef parameter type, specified using the\n   * {@code @typedef} annotation, is present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.hasRegExpGlobalReferences#2206",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasRegExpGlobalReferences()",
        "snippet": "  @Override\n  boolean hasRegExpGlobalReferences() {\n    return hasRegExpGlobalReferences;\n  }\n",
        "begin_line": 2206,
        "end_line": 2209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isConstructor#444",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isConstructor()",
        "snippet": "  public boolean isConstructor() {\n    return getFlag(MASK_CONSTRUCTOR);\n  }\n",
        "begin_line": 444,
        "end_line": 446,
        "comment": "\n   * Returns whether the {@code @constructor} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0935
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasEnumParameterType#1036",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasEnumParameterType()",
        "snippet": "  public boolean hasEnumParameterType() {\n    return hasType(TYPEFIELD_ENUM);\n  }\n",
        "begin_line": 1036,
        "end_line": 1038,
        "comment": "\n   * Returns whether an enum parameter type, specified using the {@code @enum}\n   * annotation, is present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0935
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasType#1056",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasType(int)",
        "snippet": "  private boolean hasType(int mask) {\n    return (bitset & MASK_TYPEFIELD) == mask;\n  }\n",
        "begin_line": 1056,
        "end_line": 1058,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0935
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setFlag#416",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setFlag(boolean, int)",
        "snippet": "  private void setFlag(boolean value, int mask) {\n    if (value) {\n      bitset |= mask;\n    } else {\n      bitset &= ~mask;\n    }\n  }\n",
        "begin_line": 416,
        "end_line": 422,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0919
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.lazyInitDocumentation#618",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitDocumentation()",
        "snippet": "  private boolean lazyInitDocumentation() {\n    if (!includeDocumentation) {\n      return false;\n    }\n\n    if (documentation == null) {\n      documentation = new LazilyInitializedDocumentation();\n    }\n\n    return true;\n  }\n",
        "begin_line": 618,
        "end_line": 628,
        "comment": "\n   * Lazily initializes the documentation information object, but only\n   * if the JSDocInfo was told to keep such information around.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0917
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.addMarker#634",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.addMarker()",
        "snippet": "  Marker addMarker() {\n    if (!lazyInitDocumentation()) {\n      return null;\n    }\n\n    if (documentation.markers == null) {\n      documentation.markers = Lists.newArrayList();\n    }\n\n    Marker marker = new Marker();\n    documentation.markers.add(marker);\n    return marker;\n  }\n",
        "begin_line": 634,
        "end_line": 646,
        "comment": "\n   * Adds a marker to the documentation (if it exists) and\n   * returns the marker. Returns null otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0917
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isNoSideEffects#549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isNoSideEffects()",
        "snippet": "  public boolean isNoSideEffects() {\n    return getFlag(MASK_NOSIDEEFFECTS);\n  }\n",
        "begin_line": 549,
        "end_line": 551,
        "comment": "\n   * Returns whether the {@code @nosideeffects} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0915
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.JSDocInfoBuilder#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.JSDocInfoBuilder(boolean)",
        "snippet": "  public JSDocInfoBuilder(boolean parseDocumentation) {\n    this.currentInfo = new JSDocInfo(parseDocumentation);\n    this.parseDocumentation = parseDocumentation;\n  }\n",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.recordOriginalCommentString#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordOriginalCommentString(java.lang.String)",
        "snippet": "  public void recordOriginalCommentString(String sourceComment) {\n    if (parseDocumentation) {\n      currentInfo.setOriginalCommentString(sourceComment);\n    }\n  }\n",
        "begin_line": 78,
        "end_line": 82,
        "comment": "\n   * Sets the original JSDoc comment string. This is a no-op if the builder\n   * isn't configured to record documentation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.shouldParseDocumentation#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.shouldParseDocumentation()",
        "snippet": "  public boolean shouldParseDocumentation() {\n    return parseDocumentation;\n  }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.isPopulated#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulated()",
        "snippet": "  public boolean isPopulated() {\n    return populated;\n  }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n   * Returns whether this builder is populated with information that can be\n   * used to {@link #build} a {@link JSDocInfo} object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.isPopulatedWithFileOverview#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulatedWithFileOverview()",
        "snippet": "  public boolean isPopulatedWithFileOverview() {\n    return isPopulated() &&\n        (currentInfo.hasFileOverview() || currentInfo.isExterns() ||\n         currentInfo.isNoCompile());\n  }\n",
        "begin_line": 101,
        "end_line": 105,
        "comment": "\n   * Returns whether this builder is populated with information that can be\n   * used to {@link #build} a {@link JSDocInfo} object that has a\n   * fileoverview tag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.build#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.build(com.google.javascript.rhino.Node)",
        "snippet": "  public JSDocInfo build(Node associatedNode) {\n    if (populated) {\n      JSDocInfo built = currentInfo;\n      built.setAssociatedNode(associatedNode);\n      populateDefaults(built);\n      populated = false;\n      currentInfo = new JSDocInfo(this.parseDocumentation);\n      return built;\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 124,
        "end_line": 135,
        "comment": "\n   * Builds a {@link JSDocInfo} object based on the populated information and\n   * returns it. Once this method is called, the builder can be reused to build\n   * another {@link JSDocInfo} object.\n   *\n   * @param associatedNode The source node containing the JSDoc.\n   * @return a {@link JSDocInfo} object populated with the values given to this\n   *     builder. If no value was populated, this method simply returns\n   *     {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.populateDefaults#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  private static void populateDefaults(JSDocInfo info) {\n    if (info.getVisibility() == null) {\n      info.setVisibility(Visibility.INHERITED);\n    }\n  }\n",
        "begin_line": 138,
        "end_line": 142,
        "comment": " Generate defaults when certain parameters are not specified. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.markAnnotation#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markAnnotation(java.lang.String, int, int)",
        "snippet": "  public void markAnnotation(String annotation, int lineno, int charno) {\n    JSDocInfo.Marker marker = currentInfo.addMarker();\n\n    if (marker != null) {\n      JSDocInfo.TrimmedStringPosition position =\n          new JSDocInfo.TrimmedStringPosition();\n      position.setItem(annotation);\n      position.setPositionInformation(lineno, charno, lineno,\n          charno + annotation.length());\n      marker.setAnnotation(position);\n      populated = true;\n    }\n\n    currentMarker = marker;\n  }\n",
        "begin_line": 148,
        "end_line": 162,
        "comment": "\n   * Adds a marker to the current JSDocInfo and populates the marker with the\n   * annotation information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isExterns#557",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isExterns()",
        "snippet": "  public boolean isExterns() {\n    return getFlag(MASK_EXTERNS);\n  }\n",
        "begin_line": 557,
        "end_line": 559,
        "comment": "\n   * Returns whether the {@code @externs} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isNoCompile#573",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isNoCompile()",
        "snippet": "  public boolean isNoCompile() {\n    return getFlag(MASK_NOCOMPILE);\n  }\n",
        "begin_line": 573,
        "end_line": 575,
        "comment": "\n   * Returns whether the {@code @nocompile} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setVisibility#604",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility)",
        "snippet": "  public void setVisibility(Visibility visibility) {\n    this.visibility = visibility;\n  }\n",
        "begin_line": 604,
        "end_line": 606,
        "comment": " Visible for testing.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasFileOverview#1376",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasFileOverview()",
        "snippet": "  public boolean hasFileOverview() {\n    return getFlag(MASK_FILEOVERVIEW);\n  }\n",
        "begin_line": 1376,
        "end_line": 1378,
        "comment": "\n   * Returns whether this has a fileoverview flag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setAssociatedNode#1398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setAssociatedNode(com.google.javascript.rhino.Node)",
        "snippet": "  public void setAssociatedNode(Node node) {\n    this.associatedNode = node;\n  }\n",
        "begin_line": 1398,
        "end_line": 1400,
        "comment": "\n   * Sets the node associated with this JSDoc.\n   * Notice that many nodes may have pointer to the same JSDocInfo\n   * object (because we propagate it across the type graph). But there\n   * is only one canonical \"owner\" node of the JSDocInfo, which corresponds\n   * to its original place in the syntax tree.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.JsDocTokenStream#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.JsDocTokenStream(java.lang.String, int, int)",
        "snippet": "  JsDocTokenStream(String sourceString, int lineno, int initCharno) {\n    Preconditions.checkNotNull(sourceString);\n    this.lineno = lineno;\n    this.sourceString = sourceString;\n    this.sourceEnd = sourceString.length();\n    this.sourceCursor = this.cursor = 0;\n    this.initLineno = lineno;\n    this.initCharno = initCharno;\n  }\n",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getJsDocToken#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getJsDocToken()",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  final JsDocToken getJsDocToken() {\n    int c;\n    stringBufferTop = 0;\n    for (;;) {\n      // eat white spaces\n      for (;;) {\n        charno = -1;\n        c = getChar();\n        if (c == EOF_CHAR) {\n          return JsDocToken.EOF;\n        } else if (c == '\\n') {\n          return JsDocToken.EOL;\n        } else if (!isJSSpace(c)) {\n          break;\n        }\n      }\n\n      switch (c) {\n        // annotation, e.g. @type or @constructor\n        case '@':\n          do {\n            c = getChar();\n            if (isAlpha(c)) {\n              addToString(c);\n            } else {\n              ungetChar(c);\n              this.string = getStringFromBuffer();\n              stringBufferTop = 0;\n              return JsDocToken.ANNOTATION;\n            }\n          } while (true);\n\n        case '*':\n          if (matchChar('/')) {\n            return JsDocToken.EOC;\n          } else {\n            return JsDocToken.STAR;\n          }\n\n        case ',':\n          return JsDocToken.COMMA;\n\n        case '>':\n          return JsDocToken.GT;\n\n        case '(':\n          return JsDocToken.LP;\n\n        case ')':\n          return JsDocToken.RP;\n\n        case '{':\n          return JsDocToken.LC;\n\n        case '}':\n          return JsDocToken.RC;\n\n        case '[':\n          return JsDocToken.LB;\n\n        case ']':\n          return JsDocToken.RB;\n\n        case '?':\n          return JsDocToken.QMARK;\n\n        case '!':\n          return JsDocToken.BANG;\n\n        case ':':\n          return JsDocToken.COLON;\n\n        case '=':\n          return JsDocToken.EQUALS;\n\n        case '|':\n          matchChar('|');\n          return JsDocToken.PIPE;\n\n        case '.':\n          c = getChar();\n          if (c == '<') {\n            return JsDocToken.LT;\n          } else {\n            if (c == '.') {\n              c = getChar();\n              if (c == '.') {\n                return JsDocToken.ELLIPSIS;\n              } else {\n                addToString('.');\n              }\n            }\n            // we may backtrack across line boundary\n            ungetBuffer[ungetCursor++] = c;\n            c = '.';\n          }\n          // fall through\n\n        default: {\n          // recognize a jsdoc string but discard last . if it is followed by\n          // a non-jsdoc comment char, e.g. Array.<\n          int c1 = c;\n          addToString(c);\n          int c2 = getChar();\n          if (!isJSDocString(c2)) {\n            ungetChar(c2);\n            this.string = getStringFromBuffer();\n            stringBufferTop = 0;\n            return JsDocToken.STRING;\n          } else {\n            do {\n              c1 = c2;\n              c2 = getChar();\n              if (c1 == '.' && c2 == '<') {\n                ungetChar(c2);\n                ungetChar(c1);\n                this.string = getStringFromBuffer();\n                stringBufferTop = 0;\n                return JsDocToken.STRING;\n              } else {\n                if (isJSDocString(c2)) {\n                  addToString(c1);\n                } else {\n                  ungetChar(c2);\n                  addToString(c1);\n                  this.string = getStringFromBuffer();\n                  stringBufferTop = 0;\n                  return JsDocToken.STRING;\n                }\n              }\n            } while (true);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 58,
        "end_line": 194,
        "comment": "\n   * Tokenizes JSDoc comments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getLineno#226",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getLineno()",
        "snippet": "  final int getLineno() { return lineno; }\n",
        "begin_line": 226,
        "end_line": 226,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getCharno#228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharno()",
        "snippet": "  final int getCharno() {\n    return lineno == initLineno? initCharno + charno : charno;\n  }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getString#232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getString()",
        "snippet": "  final String getString() { return string; }\n",
        "begin_line": 232,
        "end_line": 232,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getStringFromBuffer#236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getStringFromBuffer()",
        "snippet": "  private String getStringFromBuffer() {\n    tokenEnd = cursor;\n    return new String(stringBuffer, 0, stringBufferTop);\n  }\n",
        "begin_line": 236,
        "end_line": 239,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.addToString#241",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.addToString(int)",
        "snippet": "  private void addToString(int c) {\n    int N = stringBufferTop;\n    if (N == stringBuffer.length) {\n        char[] tmp = new char[stringBuffer.length * 2];\n        System.arraycopy(stringBuffer, 0, tmp, 0, N);\n        stringBuffer = tmp;\n    }\n    stringBuffer[N] = (char)c;\n    stringBufferTop = N + 1;\n  }\n",
        "begin_line": 241,
        "end_line": 250,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.ungetChar#252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetChar(int)",
        "snippet": "  void ungetChar(int c) {\n    // can not unread past across line boundary\n    assert(!(ungetCursor != 0 && ungetBuffer[ungetCursor - 1] == '\\n'));\n    ungetBuffer[ungetCursor++] = c;\n    cursor--;\n  }\n",
        "begin_line": 252,
        "end_line": 257,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.matchChar#259",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.matchChar(int)",
        "snippet": "  private boolean matchChar(int test) {\n    int c = getCharIgnoreLineEnd();\n    if (c == test) {\n      tokenEnd = cursor;\n      return true;\n    } else {\n      ungetCharIgnoreLineEnd(c);\n      return false;\n    }\n  }\n",
        "begin_line": 259,
        "end_line": 268,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.isAlpha#270",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isAlpha(int)",
        "snippet": "  private static boolean isAlpha(int c) {\n    // Use 'Z' < 'a'\n    if (c <= 'Z') {\n      return 'A' <= c;\n    } else {\n      return 'a' <= c && c <= 'z';\n    }\n  }\n",
        "begin_line": 270,
        "end_line": 277,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.isJSSpace#309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSSpace(int)",
        "snippet": "  static boolean isJSSpace(int c) {\n    if (c <= 127) {\n      return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB;\n    } else {\n      return c == 0xA0\n          || Character.getType((char)c) == Character.SPACE_SEPARATOR;\n    }\n  }\n",
        "begin_line": 309,
        "end_line": 316,
        "comment": " As defined in ECMA.  jsscan.c uses C isspace() (which allows\n   * \\v, I think.)  note that code in getChar() implicitly accepts\n   * '\\r' == \\u000D as well.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getChar#336",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getChar()",
        "snippet": "  protected int getChar() {\n    if (ungetCursor != 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno == -1) {\n        charno = getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for(;;) {\n      int c;\n      if (sourceCursor == sourceEnd) {\n        hitEOF = true;\n        if (charno == -1) {\n          charno = getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c = sourceString.charAt(sourceCursor++);\n\n\n      if (lineEndChar >= 0) {\n        if (lineEndChar == '\\r' && c == '\\n') {\n          lineEndChar = '\\n';\n          continue;\n        }\n        lineEndChar = -1;\n        lineStart = sourceCursor - 1;\n        lineno++;\n      }\n\n      if (c <= 127) {\n        if (c == '\\n' || c == '\\r') {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      }\n\n      if (charno == -1) {\n        charno = getOffset();\n      }\n\n      return c;\n    }\n  }\n",
        "begin_line": 336,
        "end_line": 390,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getCharIgnoreLineEnd#392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharIgnoreLineEnd()",
        "snippet": "  private int getCharIgnoreLineEnd() {\n    if (ungetCursor != 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno == -1) {\n        charno = getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for(;;) {\n      int c;\n      if (sourceCursor == sourceEnd) {\n        hitEOF = true;\n        if (charno == -1) {\n          charno = getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c = sourceString.charAt(sourceCursor++);\n\n\n      if (c <= 127) {\n        if (c == '\\n' || c == '\\r') {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      }\n\n      if (charno == -1) {\n        charno = getOffset();\n      }\n\n      return c;\n    }\n  }\n",
        "begin_line": 392,
        "end_line": 436,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getOffset#446",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getOffset()",
        "snippet": "  final int getOffset() {\n    return sourceCursor - lineStart - ungetCursor - 1;\n  }\n",
        "begin_line": 446,
        "end_line": 448,
        "comment": "\n   * Returns the offset into the current line.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.setFileLevelJsDocBuilder#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileLevelJsDocBuilder(com.google.javascript.rhino.Node.FileLevelJsDocBuilder)",
        "snippet": "  void setFileLevelJsDocBuilder(\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder) {\n    this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "\n   * Sets the JsDocBuilder for the file-level (root) node of this parse. The\n   * parser uses the builder to append any preserve annotations it encounters\n   * in jsdoc comments.\n   *\n   * @param fileLevelJsDocBuilder\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.setFileOverviewJSDocInfo#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileOverviewJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo) {\n    this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;\n  }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n   * Sets the file overview JSDocInfo, in order to warn about multiple uses of\n   * the @fileoverview tag in a file.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.JsDocInfoParser#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.JsDocInfoParser(com.google.javascript.jscomp.parsing.JsDocTokenStream, com.google.javascript.rhino.head.ast.Comment, com.google.javascript.rhino.Node, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  JsDocInfoParser(JsDocTokenStream stream,\n                  Comment commentNode,\n                  Node associatedNode,\n                  Config config,\n                  ErrorReporter errorReporter) {\n    this.stream = stream;\n    this.associatedNode = associatedNode;\n\n    // Sometimes this will be null in tests.\n    this.sourceFile = associatedNode == null\n        ? null : associatedNode.getStaticSourceFile();\n\n    this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);\n    if (commentNode != null) {\n      this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());\n    }\n    this.annotationNames = config.annotationNames;\n    this.suppressionNames = config.suppressionNames;\n\n    this.errorReporter = errorReporter;\n    this.templateNode = this.createTemplateNode();\n  }\n",
        "begin_line": 125,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.checkExtendedTypes#943",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.checkExtendedTypes(java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo>)",
        "snippet": "  private void checkExtendedTypes(List<ExtendedTypeInfo> extendedTypes) {\n    for (ExtendedTypeInfo typeInfo : extendedTypes) {\n      // If interface, record the multiple extended interfaces\n      if (jsdocBuilder.isInterfaceRecorded()) {\n        if (!jsdocBuilder.recordExtendedInterface(typeInfo.type)) {\n          parser.addParserWarning(\"msg.jsdoc.extends.duplicate\",\n              typeInfo.lineno, typeInfo.charno);\n        }\n      } else {\n        if (!jsdocBuilder.recordBaseType(typeInfo.type)) {\n          parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n              typeInfo.lineno, typeInfo.charno);\n        }\n      }\n    }\n  }\n",
        "begin_line": 943,
        "end_line": 958,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.createTemplateNode#2178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.createTemplateNode()",
        "snippet": "  private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode = IR.script();\n    templateNode.setStaticSourceFile(\n      this.associatedNode != null ?\n      this.associatedNode.getStaticSourceFile() :\n      null);\n    return templateNode;\n  }\n",
        "begin_line": 2178,
        "end_line": 2186,
        "comment": " e.g., source-name, between all nodes.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.eatTokensUntilEOL#2201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL()",
        "snippet": "  private JsDocToken eatTokensUntilEOL() {\n    return eatTokensUntilEOL(next());\n  }\n",
        "begin_line": 2201,
        "end_line": 2203,
        "comment": "\n   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n   * state to {@link State#SEARCHING_ANNOTATION}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.eatTokensUntilEOL#2209",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private JsDocToken eatTokensUntilEOL(JsDocToken token) {\n    do {\n      if (token == JsDocToken.EOL || token == JsDocToken.EOC ||\n          token == JsDocToken.EOF) {\n        state = State.SEARCHING_ANNOTATION;\n        return token;\n      }\n      token = next();\n    } while (true);\n  }\n",
        "begin_line": 2209,
        "end_line": 2218,
        "comment": "\n   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n   * state to {@link State#SEARCHING_ANNOTATION}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.match#2239",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.match(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private boolean match(JsDocToken token) {\n    unreadToken = next();\n    return unreadToken == token;\n  }\n",
        "begin_line": 2239,
        "end_line": 2242,
        "comment": "\n   * Tests whether the next symbol of the token stream matches the specific\n   * token.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.next#2257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.next()",
        "snippet": "  private JsDocToken next() {\n    if (unreadToken == NO_UNREAD_TOKEN) {\n      return stream.getJsDocToken();\n    } else {\n      return current();\n    }\n  }\n",
        "begin_line": 2257,
        "end_line": 2263,
        "comment": "\n   * Gets the next token of the token stream or the buffered token if a matching\n   * was previously made.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.current#2268",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.current()",
        "snippet": "  private JsDocToken current() {\n    JsDocToken t = unreadToken;\n    unreadToken = NO_UNREAD_TOKEN;\n    return t;\n  }\n",
        "begin_line": 2268,
        "end_line": 2272,
        "comment": "\n   * Gets the current token, invalidating it in the process.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.skipEOLs#2278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.skipEOLs()",
        "snippet": "  private void skipEOLs() {\n    while (match(JsDocToken.EOL)) {\n      next();\n      if (match(JsDocToken.STAR)) {\n        next();\n      }\n    }\n  }\n",
        "begin_line": 2278,
        "end_line": 2285,
        "comment": "\n   * Skips all EOLs and all empty lines in the JSDoc. Call this method if you\n   * want the JSDoc entry to span multiple lines.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.hasParsedFileOverviewDocInfo#2291",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.hasParsedFileOverviewDocInfo()",
        "snippet": "  private boolean hasParsedFileOverviewDocInfo() {\n    return jsdocBuilder.isPopulatedWithFileOverview();\n  }\n",
        "begin_line": 2291,
        "end_line": 2293,
        "comment": "\n   * Determines whether the parser has been populated with docinfo with a\n   * fileoverview tag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.retrieveAndResetParsedJSDocInfo#2299",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.retrieveAndResetParsedJSDocInfo()",
        "snippet": "  JSDocInfo retrieveAndResetParsedJSDocInfo() {\n    return jsdocBuilder.build(associatedNode);\n  }\n",
        "begin_line": 2299,
        "end_line": 2301,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.getFileOverviewJSDocInfo#2306",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.getFileOverviewJSDocInfo()",
        "snippet": "  JSDocInfo getFileOverviewJSDocInfo() {\n    return fileOverviewJSDocInfo;\n  }\n",
        "begin_line": 2306,
        "end_line": 2308,
        "comment": "\n   * Gets the fileoverview JSDocInfo, if any.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.transformTree#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTree(com.google.javascript.rhino.head.ast.AstRoot, com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter) {\n    IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);\n    Node irNode = irFactory.transform(node);\n\n    if (node.getComments() != null) {\n      for (Comment comment : node.getComments()) {\n        if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment)) {\n          irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);\n        } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {\n          irFactory.handleBlockComment(comment);\n        }\n      }\n    }\n\n    irFactory.setFileOverviewJsDoc(irNode);\n\n    return irNode;\n  }\n",
        "begin_line": 165,
        "end_line": 188,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.handlePossibleFileOverviewJsDoc#244",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser)",
        "snippet": "  private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser) {\n    if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {\n      fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();\n      return true;\n    }\n    return false;\n  }\n",
        "begin_line": 244,
        "end_line": 251,
        "comment": "\n   * @return true if the jsDocParser represents a fileoverview.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.handleJsDoc#259",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.handleJsDoc(com.google.javascript.rhino.head.ast.AstNode, com.google.javascript.rhino.Node)",
        "snippet": "  private JSDocInfo handleJsDoc(AstNode node, Node irNode) {\n    Comment comment = node.getJsDocNode();\n    if (comment != null) {\n      JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);\n      parsedComments.add(comment);\n      if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n        return jsDocParser.retrieveAndResetParsedJSDocInfo();\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 259,
        "end_line": 269,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.transform#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transform(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node transform(AstNode node) {\n    Node irNode = justTransform(node);\n    JSDocInfo jsDocInfo = handleJsDoc(node, irNode);\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 271,
        "end_line": 279,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.createJsDocInfoParser#336",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment, com.google.javascript.rhino.Node)",
        "snippet": "  private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode) {\n    String comment = node.getValue();\n    int lineno = node.getLineno();\n    int position = node.getAbsolutePosition();\n\n    // The JsDocInfoParser expects the comment without the initial '/**'.\n    int numOpeningChars = 3;\n    JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n  }\n",
        "begin_line": 336,
        "end_line": 356,
        "comment": "\n   * Creates a JsDocInfoParser and parses the JsDoc string.\n   *\n   * Used both for handling individual JSDoc comments and for handling\n   * file-level JSDoc comments (@fileoverview and @license).\n   *\n   * @param node The JsDoc Comment node to parse.\n   * @param irNode\n   * @return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n   *     normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 2
    },
    {
        "name": "InputId.equals#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    return id.equals(((InputId) obj).id);\n  }\n",
        "begin_line": 64,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.getLine#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getLine(int)",
        "snippet": "  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        return null;\n      }\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    if (js.indexOf('\\n', pos) == -1) {\n      // If next new line cannot be found, there are two cases\n      // 1. pos already reaches the end of file, then null should be returned\n      // 2. otherwise, return the contents between pos and the end of file.\n      if (pos >= js.length()) {\n        return null;\n      } else {\n        return js.substring(pos, js.length());\n      }\n    } else {\n      return js.substring(pos, js.indexOf('\\n', pos));\n    }\n  }\n",
        "begin_line": 205,
        "end_line": 250,
        "comment": "\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.report#1937",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.report(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public void report(JSError error) {\n    CheckLevel level = error.level;\n    if (warningsGuard != null) {\n      CheckLevel newLevel = warningsGuard.level(error);\n      if (newLevel != null) {\n        level = newLevel;\n      }\n    }\n\n    if (level.isOn()) {\n      errorManager.report(level, error);\n    }\n  }\n",
        "begin_line": 1937,
        "end_line": 1950,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getSourceFileByName#2015",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getSourceFileByName(java.lang.String)",
        "snippet": "  private SourceFile getSourceFileByName(String sourceName) {\n    // Here we assume that the source name is the input name, this\n    // is try of javascript parsed from source.\n    if (sourceName != null) {\n      CompilerInput input = inputsById.get(new InputId(sourceName));\n      if (input != null) {\n        return input.getSourceFile();\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 2015,
        "end_line": 2025,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getSourceLine#2027",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getSourceLine(java.lang.String, int)",
        "snippet": "  @Override\n  public String getSourceLine(String sourceName, int lineNumber) {\n    if (lineNumber < 1) {\n      return null;\n    }\n    SourceFile input = getSourceFileByName(sourceName);\n    if (input != null) {\n      return input.getLine(lineNumber);\n    }\n    return null;\n  }\n",
        "begin_line": 2027,
        "end_line": 2037,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getVisibility#927",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getVisibility()",
        "snippet": "  public Visibility getVisibility() {\n    return visibility;\n  }\n",
        "begin_line": 927,
        "end_line": 929,
        "comment": "\n   * Gets the visibility specified by {@code @private}, {@code @protected} or\n   * {@code @public} annotation. If no visibility is specified, visibility\n   * is inherited from the base class.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0911
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setJSDocInfo#1857",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  public void setJSDocInfo(JSDocInfo info) {\n      putProp(JSDOC_INFO_PROP, info);\n  }\n",
        "begin_line": 1857,
        "end_line": 1859,
        "comment": "\n   * Sets the {@link JSDocInfo} attached to this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0909
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.JSDocInfo#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.JSDocInfo(boolean)",
        "snippet": "  JSDocInfo(boolean includeDocumentation) {\n    this.includeDocumentation = includeDocumentation;\n  }\n",
        "begin_line": 332,
        "end_line": 334,
        "comment": "\n   * Creates a {@link JSDocInfo} object. This object should be created using\n   * a {@link JSDocInfoBuilder}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0909
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getFlag#599",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getFlag(int)",
        "snippet": "  private boolean getFlag(int mask) {\n    return (bitset & mask) != 0x00;\n  }\n",
        "begin_line": 599,
        "end_line": 601,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0909
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.script#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.script(com.google.javascript.rhino.Node...)",
        "snippet": "  public static Node script(Node ... stmts) {\n    // TODO(johnlenz): finish setting up the SCRIPT node\n    Node block = new Node(Token.SCRIPT);\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatement(stmt));\n      block.addChildToBack(stmt);\n    }\n    return block;\n  }\n",
        "begin_line": 111,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0909
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.level#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    for (WarningsGuard guard : guards) {\n      CheckLevel newLevel = guard.level(error);\n      if (newLevel != null) {\n        return newLevel;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 104,
        "end_line": 113,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0898
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateExpression#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateExpression(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateExpression(Node n) {\n    switch (n.getType()) {\n      // Childless expressions\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        validateChildless(n);\n        return;\n\n      // General uniary ops\n      case Token.DELPROP:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.INC:\n      case Token.DEC:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.BITNOT:\n        validateUnaryOp(n);\n        return;\n\n      // General binary ops\n      case Token.COMMA:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n        validateBinaryOp(n);\n        return;\n\n      // Assignments\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        validateAssignmentExpression(n);\n        return;\n\n      case Token.HOOK:\n        validateTrinaryOp(n);\n        return;\n\n      // Node types that require special handling\n      case Token.STRING:\n        validateString(n);\n        return;\n\n      case Token.NUMBER:\n        validateNumber(n);\n        return;\n\n      case Token.NAME:\n        validateName(n);\n        return;\n\n      case Token.GETELEM:\n        validateBinaryOp(n);\n        return;\n\n      case Token.GETPROP:\n        validateGetProp(n);\n        return;\n\n      case Token.ARRAYLIT:\n        validateArrayLit(n);\n        return;\n\n      case Token.OBJECTLIT:\n        validateObjectLit(n);\n        return;\n\n      case Token.REGEXP:\n        validateRegExpLit(n);\n        return;\n\n      case Token.CALL:\n        validateCall(n);\n        return;\n\n      case Token.NEW:\n        validateNew(n);\n        return;\n\n      case Token.FUNCTION:\n        validateFunctionExpression(n);\n        return;\n\n      default:\n        violation(\"Expected expression but was \"\n            + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 155,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateCall#373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateCall(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateCall(Node n) {\n    validateNodeType(Token.CALL, n);\n    validateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateExpression(c);\n    }\n  }\n",
        "begin_line": 373,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.getDependencyScope#1487",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.getDependencyScope(com.google.javascript.rhino.Node)",
        "snippet": "  private NameInformation getDependencyScope(Node n) {\n    for (Node node : n.getAncestors()) {\n      NameInformation ref = scopes.get(node);\n      if (ref != null) {\n        return ref;\n      }\n    }\n\n    return null;\n  }\n",
        "begin_line": 1487,
        "end_line": 1496,
        "comment": "\n   * Gets the nearest enclosing dependency scope, or null if there isn't one.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0886
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.visit#570",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.HoistVariableAndFunctionDeclarations.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (NodeUtil.isVarDeclaration(n)) {\n        NameInformation ns = createNameInformation(t, n, parent);\n        Preconditions.checkNotNull(ns, \"NameInformation is null\");\n        createName(ns.name);\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        Preconditions.checkNotNull(ns, \"NameInformation is null\");\n        createName(nameNode.getString());\n      }\n    }\n",
        "begin_line": 570,
        "end_line": 582,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.088
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessDefines.visit#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public  void visit(NodeTraversal t, Node n, Node parent) {\n      RefInfo refInfo = allRefInfo.get(n);\n      if (refInfo != null) {\n        Ref ref = refInfo.ref;\n        Name name = refInfo.name;\n        String fullName = name.getFullName();\n        switch (ref.type) {\n          case SET_FROM_GLOBAL:\n          case SET_FROM_LOCAL:\n            Node valParent = getValueParent(ref);\n            Node val = valParent.getLastChild();\n            if (valParent.isAssign() && name.isSimpleName() &&\n                name.getDeclaration() == ref) {\n              // For defines, it's an error if a simple name is assigned\n              // before it's declared\n              compiler.report(\n                  t.makeError(val, INVALID_DEFINE_INIT_ERROR, fullName));\n            } else if (processDefineAssignment(t, fullName, val, valParent)) {\n              // remove the assignment so that the variable is still declared,\n              // but no longer assigned to a value, e.g.,\n              // DEF_FOO = 5; // becomes \"5;\"\n\n              // We can't remove the ASSIGN/VAR when we're still visiting its\n              // children, so we'll have to come back later to remove it.\n              refInfo.name.removeRef(ref);\n              lvalueToRemoveLater = valParent;\n            }\n            break;\n          default:\n            if (t.inGlobalScope()) {\n              // Treat this as a reference to a define in the global scope.\n              // After this point, the define must not be reassigned,\n              // or it's an error.\n              DefineInfo info = assignableDefines.get(fullName);\n              if (info != null) {\n                setDefineInfoNotAssignable(info, t);\n                assignableDefines.remove(fullName);\n              }\n            }\n            break;\n        }\n      }\n\n      if (!t.inGlobalScope() &&\n          n.getJSDocInfo() != null && n.getJSDocInfo().isDefine()) {\n        // warn about @define annotations in local scopes\n        compiler.report(\n            t.makeError(n, NON_GLOBAL_DEFINE_INIT_ERROR, \"\"));\n      }\n\n      if (lvalueToRemoveLater == n) {\n        lvalueToRemoveLater = null;\n        if (n.isAssign()) {\n          Node last = n.getLastChild();\n          n.removeChild(last);\n          parent.replaceChild(n, last);\n        } else {\n          Preconditions.checkState(n.isName());\n          n.removeChild(n.getFirstChild());\n        }\n        compiler.reportCodeChange();\n      }\n\n      if (n.isCall()) {\n        if (t.inGlobalScope()) {\n          // If there's a function call in the global scope,\n          // we just say it's unsafe and freeze all the defines.\n          //\n          // NOTE(nicksantos): We could be a lot smarter here. For example,\n          // ReplaceOverriddenVars keeps a call graph of all functions and\n          // which functions/variables that they reference, and tries\n          // to statically determine which functions are \"safe\" and which\n          // are not. But this would be overkill, expecially because\n          // the intended use of defines is with config_files, where\n          // all the defines are at the top of the bundle.\n          for (DefineInfo info : assignableDefines.values()) {\n            setDefineInfoNotAssignable(info, t);\n          }\n\n          assignableDefines.clear();\n        }\n      }\n\n      updateAssignAllowedStack(n, false);\n    }\n",
        "begin_line": 286,
        "end_line": 371,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getVar#539",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVar(java.lang.String)",
        "snippet": "  public Var getVar(String name) {\n    Var var = vars.get(name);\n    if (var != null) {\n      return var;\n    } else if (parent != null) { // Recurse up the parent Scope\n      return parent.getVar(name);\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 539,
        "end_line": 548,
        "comment": "\n   * Returns the variable, may be null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0859
        },
        "num_failing_tests": 2
    },
    {
        "name": "MarkNoSideEffectCalls.visit#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.GatherNoSideEffectFunctions.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n      if (!inExterns && hasNoSideEffectsAnnotation(node)) {\n        traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n      }\n\n      if (node.isGetProp()) {\n        if (parent.isExprResult() &&\n            hasNoSideEffectsAnnotation(node)) {\n          noSideEffectFunctionNames.add(node);\n        }\n      } else if (node.isFunction()) {\n\n        // The annotation may attached to the function node, the\n        // variable declaration or assignment expression.\n        boolean hasAnnotation = hasNoSideEffectsAnnotation(node);\n        List<Node> nameNodes = Lists.newArrayList();\n        nameNodes.add(node.getFirstChild());\n\n        Node nameNode = null;\n\n        if (parent.isName()) {\n          Node gramp = parent.getParent();\n          if (gramp.isVar() &&\n              gramp.hasOneChild() &&\n              hasNoSideEffectsAnnotation(gramp)) {\n            hasAnnotation = true;\n          }\n\n          nameNodes.add(parent);\n        } else if (parent.isAssign()) {\n          if (hasNoSideEffectsAnnotation(parent)) {\n            hasAnnotation = true;\n          }\n\n          nameNodes.add(parent.getFirstChild());\n        }\n\n        if (hasAnnotation) {\n          noSideEffectFunctionNames.addAll(nameNodes);\n        }\n      }\n    }\n",
        "begin_line": 119,
        "end_line": 161,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0857
        },
        "num_failing_tests": 1
    },
    {
        "name": "GatherSideEffectSubexpressionsCallback.visit#353",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "class_name": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
        "signature": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal traversal, Node node, Node parent) {}\n",
        "begin_line": 353,
        "end_line": 354,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0856
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isNoSideEffectsCall#2087",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isNoSideEffectsCall()",
        "snippet": "  public boolean isNoSideEffectsCall() {\n    return areBitFlagsSet(getSideEffectFlags(), NO_SIDE_EFFECTS);\n  }\n",
        "begin_line": 2087,
        "end_line": 2089,
        "comment": "\n   * Returns true if this node is a function or constructor call that\n   * has no side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0851
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.maybeHiddenAlias#934",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindReferences.maybeHiddenAlias(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "    private boolean maybeHiddenAlias(String name, Node n) {\n      Node parent = n.getParent();\n      if (NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {\n        Node rhs = (parent.isVar())\n            ? n.getFirstChild() : parent.getLastChild();\n        return (rhs != null && !NodeUtil.evaluatesToLocalValue(\n            rhs, NON_LOCAL_RESULT_PREDICATE));\n      }\n      return false;\n    }\n",
        "begin_line": 934,
        "end_line": 943,
        "comment": "\n     * A value whose result is the return value of a function call\n     * can be an alias to global object. The dependency on the call target will\n     * prevent the removal of the function and its dependent values, but won't\n     * prevent the alias' removal.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.085
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.areBitFlagsSet#2103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.areBitFlagsSet(int, int)",
        "snippet": "  private boolean areBitFlagsSet(int value, int flags) {\n    return (value & flags) == flags;\n  }\n",
        "begin_line": 2103,
        "end_line": 2105,
        "comment": "\n   * returns true if all the flags are set in value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0848
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getSideEffectFlags#2000",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSideEffectFlags()",
        "snippet": "  public int getSideEffectFlags() {\n    return getIntProp(SIDE_EFFECT_FLAGS);\n  }\n",
        "begin_line": 2000,
        "end_line": 2002,
        "comment": "\n   * Returns the side effects flags for this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0845
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSError.make#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.make(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public static JSError make(String sourceName, Node n,\n                             DiagnosticType type, String... arguments) {\n    return new JSError(sourceName, n, type, arguments);\n  }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "\n   * Creates a JSError from a file and Node position.\n   *\n   * @param sourceName The source file name\n   * @param n Determines the line and char position within the source file name\n   * @param type The DiagnosticType\n   * @param arguments Arguments to be incorporated into the message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0845
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.JSError#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.JSError(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  private JSError(String sourceName, @Nullable Node node,\n                  DiagnosticType type, String... arguments) {\n    this(sourceName,\n         node,\n         (node != null) ? node.getLineno() : -1,\n         (node != null) ? node.getCharno() : -1,\n         type, null, arguments);\n  }\n",
        "begin_line": 155,
        "end_line": 162,
        "comment": "\n   * Creates a JSError for a source file location.  Private to avoid\n   * any entanglement with code outside of the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0845
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformTokenType#1108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(int)",
        "snippet": "  private static int transformTokenType(int token) {\n    switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }\n\n    // Token without name\n    throw new IllegalStateException(String.valueOf(token));\n  }\n",
        "begin_line": 1108,
        "end_line": 1288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0844
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.visit#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.CALL:\n          annotateCalls(n);\n          break;\n\n        case Token.FUNCTION:\n          annotateFunctions(n, parent);\n          annotateDispatchers(n, parent);\n          break;\n      }\n    }\n",
        "begin_line": 137,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0844
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.annotateCalls#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateCalls(com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }\n",
        "begin_line": 164,
        "end_line": 180,
        "comment": "\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0844
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.getFunctionJSDocInfo#2812",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(com.google.javascript.rhino.Node)",
        "snippet": "  public static JSDocInfo getFunctionJSDocInfo(Node n) {\n    Preconditions.checkState(n.isFunction());\n    JSDocInfo fnInfo = n.getJSDocInfo();\n    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {\n      // Look for the info on other nodes.\n      Node parent = n.getParent();\n      if (parent.isAssign()) {\n        // on ASSIGNs\n        fnInfo = parent.getJSDocInfo();\n      } else if (parent.isName()) {\n        // on var NAME = function() { ... };\n        fnInfo = parent.getParent().getJSDocInfo();\n      }\n    }\n    return fnInfo;\n  }\n",
        "begin_line": 2812,
        "end_line": 2827,
        "comment": "\n   * Get the JSDocInfo for a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0833
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getSourceFile#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getSourceFile()",
        "snippet": "  @Override\n  public SourceFile getSourceFile() {\n    return ast.getSourceFile();\n  }\n",
        "begin_line": 133,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0833
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedPointGraphTraversal.computeFixedPoint#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.computeFixedPoint(com.google.javascript.jscomp.graph.DiGraph<N, E>)",
        "snippet": "  public void computeFixedPoint(DiGraph<N, E> graph) {\n    Set<N> nodes = Sets.newHashSet();\n    for (DiGraphNode<N, E> node : graph.getDirectedGraphNodes()) {\n      nodes.add(node.getValue());\n    }\n    computeFixedPoint(graph, nodes);\n  }\n",
        "begin_line": 69,
        "end_line": 75,
        "comment": "\n   * Compute a fixed point for the given graph.\n   * @param graph The graph to traverse.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0825
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.JsNameRefNode#299",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.JsNameRefNode.JsNameRefNode(com.google.javascript.jscomp.NameAnalyzer.JsName, com.google.javascript.rhino.Node)",
        "snippet": "    JsNameRefNode(JsName name, Node node) {\n      this.name = name;\n      this.node = node;\n      this.parent = node.getParent();\n    }\n",
        "begin_line": 299,
        "end_line": 303,
        "comment": "\n     * Create a node that refers to a name\n     *\n     * @param name The name\n     * @param node The top node representing the name (GETPROP, NAME, STRING)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0822
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.name#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.JsNameRefNode.name()",
        "snippet": "    @Override\n    public JsName name() {\n      return name;\n    }\n",
        "begin_line": 305,
        "end_line": 308,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0822
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.recordDepScope#556",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindDependencyScopes.recordDepScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.NameAnalyzer.NameInformation)",
        "snippet": "    private void recordDepScope(Node node, NameInformation name) {\n      scopes.put(node, name);\n    }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "\n     * Defines a dependency scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0822
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.isExternallyReferenceable#1469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.isExternallyReferenceable(com.google.javascript.jscomp.Scope, java.lang.String)",
        "snippet": "  private boolean isExternallyReferenceable(Scope scope, String name) {\n    if (compiler.getCodingConvention().isExported(name)) {\n      return true;\n    }\n    if (scope.isLocal()) {\n      return false;\n    }\n    for (String s : globalNames) {\n      if (name.startsWith(s)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 1469,
        "end_line": 1482,
        "comment": "\n   * Checks whether a name can be referenced outside of the compiled code.\n   * These names will be the root of dependency trees.\n   *\n   * @param scope The current variable scope\n   * @param name The name\n   * @return True if can be referenced outside\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0821
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.addSimplifiedChildren#740",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindReferences.addSimplifiedChildren(com.google.javascript.rhino.Node)",
        "snippet": "    private void addSimplifiedChildren(Node n) {\n      NodeTraversal.traverse(\n          compiler, n,\n          new GatherSideEffectSubexpressionsCallback(\n              compiler, new NodeAccumulator()));\n    }\n",
        "begin_line": 740,
        "end_line": 745,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0816
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.evaluatesToLocalValue#2884",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean evaluatesToLocalValue(Node value) {\n    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());\n  }\n",
        "begin_line": 2884,
        "end_line": 2886,
        "comment": "\n   * @return Whether the node is known to be a value that is not referenced\n   * elsewhere.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0816
        },
        "num_failing_tests": 1
    },
    {
        "name": "GatherSideEffectSubexpressionsCallback.GatherSideEffectSubexpressionsCallback#193",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "class_name": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
        "signature": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.GatherSideEffectSubexpressionsCallback(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator)",
        "snippet": "  GatherSideEffectSubexpressionsCallback(AbstractCompiler compiler,\n                                         SideEffectAccumulator accumulator) {\n    this.compiler = compiler;\n    this.accumulator = accumulator;\n  }\n",
        "begin_line": 193,
        "end_line": 197,
        "comment": "\n   * @param compiler - AbstractCompiler object\n   * @param accumulator - object that will accumulate roots of\n   *                      subtrees that have side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0815
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isInstanceOf#2264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isInstanceOf()",
        "snippet": "  public boolean isInstanceOf() {\n    return this.getType() == Token.INSTANCEOF;\n  }\n",
        "begin_line": 2264,
        "end_line": 2266,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0814
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.shouldTraverse#768",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindReferences.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (parent == null) {\n        return true;\n      }\n\n      // Gather the list of nodes that either have side effects, are\n      // arguments to function calls with side effects or are used in\n      // control structure predicates.  These names are always\n      // referenced when the enclosing function is called.\n      if (n.isFor()) {\n        if (!NodeUtil.isForIn(n)) {\n          Node decl = n.getFirstChild();\n          Node pred = decl.getNext();\n          Node step = pred.getNext();\n          addSimplifiedExpression(decl, n);\n          addSimplifiedExpression(pred, n);\n          addSimplifiedExpression(step, n);\n        } else { // n.getChildCount() == 3\n          Node decl = n.getFirstChild();\n          Node iter = decl.getNext();\n          addAllChildren(decl);\n          addAllChildren(iter);\n        }\n      }\n\n      if (parent.isVar() ||\n          parent.isExprResult() ||\n          parent.isReturn() ||\n          parent.isThrow()) {\n        addSimplifiedExpression(n, parent);\n      }\n\n      if ((parent.isIf() ||\n           parent.isWhile() ||\n           parent.isWith() ||\n           parent.isSwitch() ||\n           parent.isCase()) &&\n          parent.getFirstChild() == n) {\n        addAllChildren(n);\n      }\n\n      if (parent.isDo() && parent.getLastChild() == n) {\n        addAllChildren(n);\n      }\n\n      return true;\n    }\n",
        "begin_line": 768,
        "end_line": 815,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.081
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isVarOrSimpleAssignLhs#2003",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isVarOrSimpleAssignLhs(Node n, Node parent) {\n    return (parent.isAssign() && parent.getFirstChild() == n) ||\n           parent.isVar();\n  }\n",
        "begin_line": 2003,
        "end_line": 2006,
        "comment": "\n   * Determines whether this node is strictly on the left hand side of an assign\n   * or var initialization. Notably, this does not include all L-values, only\n   * statements where the node is used only as an L-value.\n   *\n   * @param n The node\n   * @param parent Parent of the node\n   * @return True if n is the left hand of an assign\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0808
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isSwitch#2332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isSwitch()",
        "snippet": "  public boolean isSwitch() {\n    return this.getType() == Token.SWITCH;\n  }\n",
        "begin_line": 2332,
        "end_line": 2334,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isWhile#2364",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isWhile()",
        "snippet": "  public boolean isWhile() {\n    return this.getType() == Token.WHILE;\n  }\n",
        "begin_line": 2364,
        "end_line": 2366,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isWith#2368",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isWith()",
        "snippet": "  public boolean isWith() {\n    return this.getType() == Token.WITH;\n  }\n",
        "begin_line": 2368,
        "end_line": 2370,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.FindReferences#727",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FindReferences.FindReferences()",
        "snippet": "    FindReferences() {\n      nodesToKeep = Sets.newHashSet();\n    }\n",
        "begin_line": 727,
        "end_line": 729,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.NameAnalyzer#1023",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.NameAnalyzer(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  NameAnalyzer(AbstractCompiler compiler, boolean removeUnreferenced) {\n    this.compiler = compiler;\n    this.removeUnreferenced = removeUnreferenced;\n    this.globalNames = DEFAULT_GLOBAL_NAMES;\n    this.changeProxy = new AstChangeProxy();\n  }\n",
        "begin_line": 1023,
        "end_line": 1028,
        "comment": "\n   * Creates a name analyzer, with option to remove unreferenced variables when\n   * calling process().\n   *\n   * The analyzer make a best guess at whether functions affect global scope\n   * based on usage (no assignment of return value means that a function has\n   * side effects).\n   *\n   * @param compiler The AbstractCompiler\n   * @param removeUnreferenced If true, remove unreferenced variables during\n   *        process()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.process#1030",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, externs, new ProcessExternals());\n    NodeTraversal.traverse(compiler, root, new FindDependencyScopes());\n    NodeTraversal.traverse(\n        compiler, root, new HoistVariableAndFunctionDeclarations());\n    NodeTraversal.traverse(compiler, root, new FindDeclarationsAndSetters());\n    NodeTraversal.traverse(compiler, root, new FindReferences());\n\n    // Create bi-directional references between parent names and their\n    // descendents. This may create new names.\n    referenceParentNames();\n\n    // If we modify the property of an alias, make sure that modification\n    // gets reflected in the original object.\n    referenceAliases();\n\n    calculateReferences();\n\n    if (removeUnreferenced) {\n      removeUnreferenced();\n    }\n  }\n",
        "begin_line": 1030,
        "end_line": 1052,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.getName#1225",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.getName(java.lang.String, boolean)",
        "snippet": "  private JsName getName(String name, boolean canCreate) {\n    if (canCreate) {\n      createName(name);\n    }\n    return allNames.get(name);\n  }\n",
        "begin_line": 1225,
        "end_line": 1230,
        "comment": "\n   * Looks up a {@link JsName} by name, optionally creating one if it doesn't\n   * already exist.\n   *\n   * @param name A fully qualified name\n   * @param canCreate Whether to create the object if necessary\n   * @return The {@code JsName} object, or null if one can't be found and\n   *   can't be created.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.createName#1238",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.createName(java.lang.String)",
        "snippet": "  private void createName(String name) {\n    JsName jsn = allNames.get(name);\n    if (jsn == null) {\n      jsn = new JsName();\n      jsn.name = name;\n      allNames.put(name, jsn);\n    }\n  }\n",
        "begin_line": 1238,
        "end_line": 1245,
        "comment": "\n   * Creates a {@link JsName} for the given name if it doesn't already\n   * exist.\n   *\n   * @param name A fully qualified name\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.referenceAliases#1272",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.referenceAliases()",
        "snippet": "  private void referenceAliases() {\n    for (Map.Entry<String, AliasSet> entry : aliases.entrySet()) {\n      JsName name = getName(entry.getKey(), false);\n      if (name.hasWrittenDescendants || name.hasInstanceOfReference) {\n        for (String alias : entry.getValue().names) {\n          recordReference(alias, entry.getKey(), RefType.REGULAR);\n        }\n      }\n    }\n  }\n",
        "begin_line": 1272,
        "end_line": 1281,
        "comment": "\n   * The NameAnalyzer algorithm works best when all objects have a canonical\n   * name in the global scope. When multiple names in the global scope\n   * point to the same object, things start to break down.\n   *\n   * For example, if we have\n   * <code>\n   * var a = {};\n   * var b = a;\n   * a.foo = 3;\n   * alert(b.foo);\n   * </code>\n   * then a.foo and b.foo are the same name, even though NameAnalyzer doesn't\n   * represent them as such.\n   *\n   * To handle this case, we look at all the aliases in the program.\n   * If descendant properties of that alias are assigned, then we create a\n   * directional reference from the original name to the alias. For example,\n   * in this case, the assign to {@code a.foo} triggers a reference from\n   * {@code b} to {@code a}, but NOT from a to b.\n   *\n   * Similarly, \"instanceof\" checks do not prevent the removal\n   * of a unaliased name but an instanceof check on an alias can only be removed\n   * if the other aliases are also removed, so we add a connection here.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameAnalyzer.calculateReferences#1540",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.calculateReferences()",
        "snippet": "  private void calculateReferences() {\n    JsName window = getName(WINDOW, true);\n    window.referenced = true;\n    JsName function = getName(FUNCTION, true);\n    function.referenced = true;\n\n    // Propagate \"referenced\" property to a fixed point.\n    FixedPointGraphTraversal.newTraversal(new ReferencePropagationCallback())\n        .computeFixedPoint(referenceGraph);\n  }\n",
        "begin_line": 1540,
        "end_line": 1549,
        "comment": "\n   * Propagate \"referenced\" property down the graph.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstChangeProxy.AstChangeProxy#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "class_name": "com.google.javascript.jscomp.AstChangeProxy",
        "signature": "com.google.javascript.jscomp.AstChangeProxy.AstChangeProxy()",
        "snippet": "  AstChangeProxy() {\n    listeners = Lists.newArrayList();\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstChangeProxy.registerListener#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "class_name": "com.google.javascript.jscomp.AstChangeProxy",
        "signature": "com.google.javascript.jscomp.AstChangeProxy.registerListener(com.google.javascript.jscomp.AstChangeProxy.ChangeListener)",
        "snippet": "  final void registerListener(ChangeListener listener) {\n    listeners.add(listener);\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "\n   * Registers a change listener.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstChangeProxy.unregisterListener#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "class_name": "com.google.javascript.jscomp.AstChangeProxy",
        "signature": "com.google.javascript.jscomp.AstChangeProxy.unregisterListener(com.google.javascript.jscomp.AstChangeProxy.ChangeListener)",
        "snippet": "  final void unregisterListener(ChangeListener listener) {\n    listeners.remove(listener);\n  }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\n   * Unregisters a change listener.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.SiblingNodeIterable#1253",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.SiblingNodeIterable(com.google.javascript.rhino.Node)",
        "snippet": "    SiblingNodeIterable(Node start) {\n      this.start = start;\n      this.current = start;\n      this.used = false;\n    }\n",
        "begin_line": 1253,
        "end_line": 1257,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0802
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.iterator#1259",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.iterator()",
        "snippet": "    @Override\n    public Iterator<Node> iterator() {\n      if (!used) {\n        used = true;\n        return this;\n      } else {\n        // We have already used the current object as an iterator;\n        // we must create a new SiblingNodeIterable based on this\n        // iterable's start node.\n        //\n        // Since the primary use case for Node.children is in for\n        // loops, this branch is extremely unlikely.\n        return (new SiblingNodeIterable(start)).iterator();\n      }\n    }\n",
        "begin_line": 1259,
        "end_line": 1273,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0802
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.hasNext#1275",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.hasNext()",
        "snippet": "    @Override\n    public boolean hasNext() {\n      return current != null;\n    }\n",
        "begin_line": 1275,
        "end_line": 1278,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0802
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.next#1280",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.next()",
        "snippet": "    @Override\n    public Node next() {\n      if (current == null) {\n        throw new NoSuchElementException();\n      }\n      try {\n        return current;\n      } finally {\n        current = current.getNext();\n      }\n    }\n",
        "begin_line": 1280,
        "end_line": 1290,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0802
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.children#1223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.children()",
        "snippet": "  public Iterable<Node> children() {\n    if (first == null) {\n      return Collections.emptySet();\n    } else {\n      return new SiblingNodeIterable(first);\n    }\n  }\n",
        "begin_line": 1223,
        "end_line": 1229,
        "comment": "\n   * <p>Return an iterable object that iterates over this nodes's children.\n   * The iterator does not support the optional operation\n   * {@link Iterator#remove()}.</p>\n   *\n   * <p>To iterate over a node's siblings, one can write</p>\n   * <pre>Node n = ...;\n   * for (Node child : n.children()) { ...</pre>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0802
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.iterator#1343",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AncestorIterable.iterator()",
        "snippet": "    @Override\n    public Iterator<Node> iterator() {\n      return new Iterator<Node>() {\n        @Override\n        public boolean hasNext() {\n          return cur != null;\n        }\n\n        @Override\n        public Node next() {\n          if (!hasNext()) throw new NoSuchElementException();\n          Node n = cur;\n          cur = cur.getParent();\n          return n;\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n",
        "begin_line": 1343,
        "end_line": 1364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.hasNext#1346",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AncestorIterable.Anonymous-20aa5011-5be6-4b7d-a569-68d303bb648a.hasNext()",
        "snippet": "        @Override\n        public boolean hasNext() {\n          return cur != null;\n        }\n",
        "begin_line": 1346,
        "end_line": 1349,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.next#1351",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AncestorIterable.Anonymous-4e038a12-45cf-4c05-820e-ef06802c4aa2.next()",
        "snippet": "        @Override\n        public Node next() {\n          if (!hasNext()) throw new NoSuchElementException();\n          Node n = cur;\n          cur = cur.getParent();\n          return n;\n        }\n",
        "begin_line": 1351,
        "end_line": 1357,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.AncestorIterable#1339",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AncestorIterable.AncestorIterable(com.google.javascript.rhino.Node)",
        "snippet": "    AncestorIterable(Node cur) {\n      this.cur = cur;\n    }\n",
        "begin_line": 1339,
        "end_line": 1341,
        "comment": "\n     * @param cur The node to start.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getAncestors#1326",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getAncestors()",
        "snippet": "  public AncestorIterable getAncestors() {\n    return new AncestorIterable(this.getParent());\n  }\n",
        "begin_line": 1326,
        "end_line": 1328,
        "comment": "\n   * Iterates all of the node's ancestors excluding itself.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isDo#2212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isDo()",
        "snippet": "  public boolean isDo() {\n    return this.getType() == Token.DO;\n  }\n",
        "begin_line": 2212,
        "end_line": 2214,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0798
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.newNode#1295",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1) {\n    return new Node(type, child1).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1295,
        "end_line": 1297,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0794
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isThrow#2340",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isThrow()",
        "snippet": "  public boolean isThrow() {\n    return this.getType() == Token.THROW;\n  }\n",
        "begin_line": 2340,
        "end_line": 2342,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0792
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.createWithoutAnnotations#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations()",
        "snippet": "  public static <N, E> LinkedDirectedGraph<N, E> createWithoutAnnotations() {\n    return new LinkedDirectedGraph<N, E>(false, false);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0791
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateOptionalName#344",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateOptionalName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateOptionalName(Node n) {\n    validateNodeType(Token.NAME, n);\n    validateNonNullString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 344,
        "end_line": 348,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0788
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateFunctionExpression#358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateFunctionExpression(Node n) {\n    validateNodeType(Token.FUNCTION, n);\n    validateChildCount(n, 3);\n    validateOptionalName(n.getFirstChild());\n    validateParameters(n.getChildAtIndex(1));\n    validateBlock(n.getLastChild());\n  }\n",
        "begin_line": 358,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0788
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckSideEffects.visit#217",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.StripProtection.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall()) {\n        Node target = n.getFirstChild();\n        // TODO(johnlenz): add this to the coding convention\n        // so we can remove goog.reflect.sinkValue as well.\n        if (target.isName() && target.getString().equals(PROTECTOR_FN)) {\n          Node expr = n.getLastChild();\n          n.detachChildren();\n          parent.replaceChild(n, expr);\n        }\n      }\n    }\n",
        "begin_line": 217,
        "end_line": 229,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0786
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.visit#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Note: Constant properties annotations are not propagated.\n      if (n.isName()) {\n        if (n.getString().isEmpty()) {\n          return;\n        }\n\n        JSDocInfo info = null;\n        // Find the JSDocInfo for a top level variable.\n        Var var = t.getScope().getVar(n.getString());\n        if (var != null) {\n          info = var.getJSDocInfo();\n        }\n\n        boolean shouldBeConstant =\n            (info != null && info.isConstant()) ||\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent);\n        boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (shouldBeConstant && !isMarkedConstant) {\n          if (assertOnChange) {\n            String name = n.getString();\n            throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());\n          }\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n      }\n    }\n",
        "begin_line": 172,
        "end_line": 203,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0784
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isExprCall#1553",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExprCall(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExprCall(Node n) {\n    return n.isExprResult()\n        && n.getFirstChild().isCall();\n  }\n",
        "begin_line": 1553,
        "end_line": 1556,
        "comment": "\n   * Is this node a call expression statement?\n   *\n   * @param n The node\n   * @return True if {@code n} is EXPR_RESULT and {@code n}'s\n   *     first child is CALL\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0782
        },
        "num_failing_tests": 2
    },
    {
        "name": "GoogleCodingConvention.isExported#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isExported(java.lang.String, boolean)",
        "snippet": "  @Override\n  public boolean isExported(String name, boolean local) {\n    return super.isExported(name, local) ||\n        (!local && name.startsWith(\"_\"));\n  }\n",
        "begin_line": 139,
        "end_line": 143,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>In Google code, any global name starting with an underscore is\n   * considered exported.\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.CodingConventions.Proxy": null
        },
        "susp": {
            "ochiai_susp": 0.078
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isLiteralValue#585",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLiteralValue(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }\n  }\n",
        "begin_line": 585,
        "end_line": 622,
        "comment": "\n   * Returns true if this is a literal value. We define a literal value\n   * as any node that evaluates to the same thing regardless of when or\n   * where it is evaluated. So /xyz/ and [3, 5] are literals, but\n   * the name a is not.\n   *\n   * Function literals do not meet this definition, because they\n   * lexically capture variables. For example, if you have\n   * <code>\n   * function() { return a; }\n   * </code>\n   * If it is evaluated in a different scope, then it\n   * captures a different variable. Even if the function did not read\n   * any captured vairables directly, it would still fail this definition,\n   * because it affects the lifecycle of variables in the enclosing scope.\n   *\n   * However, a function literal with respect to a particular scope is\n   * a literal.\n   *\n   * @param includeFunctions If true, all function expressions will be\n   *     treated as literals.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.handleGet#762",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.handleGet(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Ref.Type)",
        "snippet": "    void handleGet(NodeTraversal t, Node n, Node parent,\n        String name, Ref.Type type) {\n      Name nameObj = getOrCreateName(name);\n\n      // No need to look up additional ancestors, since they won't be used.\n      nameObj.addRef(new Ref(t, n, nameObj, type, currentPreOrderIndex++));\n    }\n",
        "begin_line": 762,
        "end_line": 768,
        "comment": "\n     * Updates our respresentation of the global namespace to reflect a read\n     * of a global name.\n     *\n     * @param t The current node traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     * @param type The reference type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 1
    },
    {
        "name": "SuppressDocWarningsGuard.level#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    Node node = error.node;\n    if (node != null) {\n      for (Node current = node;\n           current != null;\n           current = current.getParent()) {\n        int type = current.getType();\n        JSDocInfo info = null;\n\n        // We only care about function annotations at the FUNCTION and SCRIPT\n        // level. Otherwise, the @suppress annotation has an implicit\n        // dependency on the exact structure of our AST, and that seems like\n        // a bad idea.\n        if (type == Token.FUNCTION) {\n          info = NodeUtil.getFunctionJSDocInfo(current);\n        } else if (type == Token.SCRIPT) {\n          info = current.getJSDocInfo();\n        } else if (type == Token.ASSIGN) {\n          Node rhs = current.getLastChild();\n          if (rhs.isFunction()) {\n            info = NodeUtil.getFunctionJSDocInfo(rhs);\n          }\n        }\n\n        if (info != null) {\n          for (String suppressor : info.getSuppressions()) {\n            WarningsGuard guard = suppressors.get(suppressor);\n\n            // Some @suppress tags are for other tools, and\n            // may not have a warnings guard.\n            if (guard != null) {\n              CheckLevel newLevel = guard.level(error);\n              if (newLevel != null) {\n                return newLevel;\n              }\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 51,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.nodeTypeMayHaveSideEffects#1068",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean nodeTypeMayHaveSideEffects(Node n) {\n    return nodeTypeMayHaveSideEffects(n, null);\n  }\n",
        "begin_line": 1068,
        "end_line": 1070,
        "comment": "\n   * Returns true if the current node's type implies side effects.\n   *\n   * This is a non-recursive version of the may have side effects\n   * check; used to check wherever the current node's type is one of\n   * the reason's why a subtree has side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0758
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.shouldTraverse#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      // We do want to traverse the name of a named function, but we don't\n      // want to traverse the arguments or body.\n      return parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild();\n    }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0757
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.isExported#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isExported(java.lang.String)",
        "snippet": "    @Override\n    public final boolean isExported(String name) {\n      return isExported(name, false) || isExported(name, true);\n    }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0757
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.mergeLineCharNo#1177",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.mergeLineCharNo(int, int)",
        "snippet": "  protected static int mergeLineCharNo(int lineno, int charno) {\n    if (lineno < 0 || charno < 0) {\n      return -1;\n    } else if ((charno & ~COLUMN_MASK) != 0) {\n      return lineno << COLUMN_BITS | COLUMN_MASK;\n    } else {\n      return lineno << COLUMN_BITS | (charno & COLUMN_MASK);\n    }\n  }\n",
        "begin_line": 1177,
        "end_line": 1185,
        "comment": "\n   * Merges the line number and character number in one integer. The Character\n   * number takes the first 12 bits and the line number takes the rest. If\n   * the character number is greater than <code>2<sup>12</sup>-1</code> it is\n   * adjusted to <code>2<sup>12</sup>-1</code>.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isReturn#2316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isReturn()",
        "snippet": "  public boolean isReturn() {\n    return this.getType() == Token.RETURN;\n  }\n",
        "begin_line": 2316,
        "end_line": 2318,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0755
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseFunction#510",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.isFunction());\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.isBlock());\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
        "begin_line": 510,
        "end_line": 545,
        "comment": "\n   * Traverses a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0755
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isStatementParent#1706",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementParent(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementParent(Node parent) {\n    // It is not possible to determine definitely if a node is a statement\n    // or not if it is not part of the AST.  A FUNCTION node can be\n    // either part of an expression or a statement.\n    Preconditions.checkState(parent != null);\n    switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1706,
        "end_line": 1719,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0754
        },
        "num_failing_tests": 2
    },
    {
        "name": "FixedPointGraphTraversal.computeFixedPoint#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.computeFixedPoint(com.google.javascript.jscomp.graph.DiGraph<N, E>, java.util.Set<N>)",
        "snippet": "  public void computeFixedPoint(DiGraph<N, E> graph, Set<N> entrySet) {\n    int cycleCount = 0;\n    long nodeCount = graph.getNodes().size();\n\n    // Choose a bail-out heuristically in case the computation\n    // doesn't converge.\n    long maxIterations = Math.max(nodeCount * nodeCount * nodeCount, 100);\n\n    // Use a LinkedHashSet, so that the traversal is deterministic.\n    LinkedHashSet<DiGraphNode<N, E>> workSet =\n        Sets.newLinkedHashSet();\n    for (N n : entrySet) {\n      workSet.add(graph.getDirectedGraphNode(n));\n    }\n    for (; !workSet.isEmpty() && cycleCount < maxIterations; cycleCount++) {\n      // For every out edge in the workSet, traverse that edge. If that\n      // edge updates the state of the graph, then add the destination\n      // node to the resultSet, so that we can update all of its out edges\n      // on the next iteration.\n      DiGraphNode<N, E> source = workSet.iterator().next();\n      N sourceValue = source.getValue();\n\n      workSet.remove(source);\n\n      List<DiGraphEdge<N, E>> outEdges = source.getOutEdges();\n      for (DiGraphEdge<N, E> edge : outEdges) {\n        N destNode = edge.getDestination().getValue();\n        if (callback.traverseEdge(sourceValue, edge.getValue(), destNode)) {\n          workSet.add(edge.getDestination());\n        }\n      }\n    }\n\n    Preconditions.checkState(cycleCount != maxIterations,\n        NON_HALTING_ERROR_MSG);\n  }\n",
        "begin_line": 93,
        "end_line": 128,
        "comment": "\n   * Compute a fixed point for the given graph, entering from the given nodes.\n   * @param graph The graph to traverse.\n   * @param entrySet The nodes to begin traversing from.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0746
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateParameters#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateParameters(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateParameters(Node n) {\n    validateNodeType(Token.PARAM_LIST, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateName(c);\n    }\n  }\n",
        "begin_line": 366,
        "end_line": 371,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0738
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessDefines.collectDefines#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.collectDefines(com.google.javascript.rhino.Node, com.google.javascript.jscomp.GlobalNamespace)",
        "snippet": "  private Map<String, DefineInfo> collectDefines(Node root,\n      GlobalNamespace namespace) {\n    // Find all the global names with a @define annotation\n    List<Name> allDefines = Lists.newArrayList();\n    for (Name name : namespace.getNameIndex().values()) {\n      Ref decl = name.getDeclaration();\n      if (name.docInfo != null && name.docInfo.isDefine()) {\n        // Process defines should not depend on check types being enabled,\n        // so we look for the JSDoc instead of the inferred type.\n        if (isValidDefineType(name.docInfo.getType())) {\n          allDefines.add(name);\n        } else {\n          JSError error = JSError.make(\n              decl.getSourceName(),\n              decl.node, INVALID_DEFINE_TYPE_ERROR);\n          compiler.report(error);\n        }\n      } else {\n        for (Ref ref : name.getRefs()) {\n          if (ref == decl) {\n            // Declarations were handled above.\n            continue;\n          }\n\n          Node n = ref.node;\n          Node parent = ref.node.getParent();\n          JSDocInfo info = n.getJSDocInfo();\n          if (info == null &&\n              parent.isVar() && parent.hasOneChild()) {\n            info = parent.getJSDocInfo();\n          }\n\n          if (info != null && info.isDefine()) {\n            allDefines.add(name);\n            break;\n          }\n        }\n      }\n    }\n\n    CollectDefines pass = new CollectDefines(compiler, allDefines);\n    NodeTraversal.traverse(compiler, root, pass);\n    return pass.getAllDefines();\n  }\n",
        "begin_line": 172,
        "end_line": 215,
        "comment": "\n   * Finds all defines, and creates a {@link DefineInfo} data structure for\n   * each one.\n   * @return A map of {@link DefineInfo} structures, keyed by name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0737
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.visit#317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.WHILE:\n          if (CONVERT_WHILE_TO_FOR) {\n            Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            Node empty = IR.empty();\n            empty.copyInformationFrom(n);\n            n.addChildBefore(empty, expr);\n            n.addChildAfter(empty.cloneNode(), expr);\n            reportCodeChange(\"WHILE node\");\n          }\n          break;\n\n        case Token.FUNCTION:\n          normalizeFunctionDeclaration(n);\n          break;\n\n        case Token.NAME:\n        case Token.STRING:\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n          if (!compiler.getLifeCycleStage().isNormalizedObfuscated()) {\n            annotateConstantsByConvention(n, parent);\n          }\n          break;\n      }\n    }\n",
        "begin_line": 317,
        "end_line": 345,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.normalizeFunctionDeclaration#389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.normalizeFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "    private void normalizeFunctionDeclaration(Node n) {\n      Preconditions.checkState(n.isFunction());\n      if (!NodeUtil.isFunctionExpression(n)\n          && !NodeUtil.isHoistedFunctionDeclaration(n)) {\n        rewriteFunctionDeclaration(n);\n      }\n    }\n",
        "begin_line": 389,
        "end_line": 395,
        "comment": "\n     * Rewrite named unhoisted functions declarations to a known\n     * consistent behavior so we don't to different logic paths for the same\n     * code. From:\n     *    function f() {}\n     * to:\n     *    var f = function () {};\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.doStatementNormalizations#433",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.doStatementNormalizations(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void doStatementNormalizations(\n        NodeTraversal t, Node n, Node parent) {\n      if (n.isLabel()) {\n        normalizeLabels(n);\n      }\n\n      // Only inspect the children of SCRIPTs, BLOCKs and LABELs, as all these\n      // are the only legal place for VARs and FOR statements.\n      if (NodeUtil.isStatementBlock(n) || n.isLabel()) {\n        extractForInitializer(n, null, null);\n      }\n\n      // Only inspect the children of SCRIPTs, BLOCKs, as all these\n      // are the only legal place for VARs.\n      if (NodeUtil.isStatementBlock(n)) {\n        splitVarDeclarations(n);\n      }\n\n      if (n.isFunction()) {\n        moveNamedFunctions(n.getLastChild());\n      }\n    }\n",
        "begin_line": 433,
        "end_line": 454,
        "comment": "\n     * Do normalizations that introduce new siblings or parents.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.moveNamedFunctions#575",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.moveNamedFunctions(com.google.javascript.rhino.Node)",
        "snippet": "    private void moveNamedFunctions(Node functionBody) {\n      Preconditions.checkState(\n          functionBody.getParent().isFunction());\n      Node previous = null;\n      Node current = functionBody.getFirstChild();\n      // Skip any declarations at the beginning of the function body, they\n      // are already in the right place.\n      while (current != null && NodeUtil.isFunctionDeclaration(current)) {\n        previous = current;\n        current = current.getNext();\n      }\n\n      // Find any remaining declarations and move them.\n      Node insertAfter = previous;\n      while (current != null) {\n        // Save off the next node as the current node maybe removed.\n        Node next = current.getNext();\n        if (NodeUtil.isFunctionDeclaration(current)) {\n          // Remove the declaration from the body.\n          Preconditions.checkNotNull(previous);\n          functionBody.removeChildAfter(previous);\n\n          // Readd the function at the top of the function body (after any\n          // previous declarations).\n          insertAfter = addToFront(functionBody, current, insertAfter);\n          reportCodeChange(\"Move function declaration not at top of function\");\n        } else {\n          // Update the previous only if the current node hasn't been moved.\n          previous = current;\n        }\n        current = next;\n      }\n    }\n",
        "begin_line": 575,
        "end_line": 607,
        "comment": "\n     * Move all the functions that are valid at the execution of the first\n     * statement of the function to the beginning of the function definition.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenamer#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.ContextualRenamer(com.google.common.collect.Multiset<java.lang.String>)",
        "snippet": "    private ContextualRenamer(Multiset<String> nameUsage) {\n      this.global = false;\n      this.nameUsage = nameUsage;\n    }\n",
        "begin_line": 445,
        "end_line": 448,
        "comment": "\n     * Constructor for child scopes.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.forChildScope#453",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.forChildScope()",
        "snippet": "    @Override\n    public Renamer forChildScope() {\n      return new ContextualRenamer(nameUsage);\n    }\n",
        "begin_line": 453,
        "end_line": 456,
        "comment": "\n     * Create a ContextualRenamer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.enterScope#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          !declarationRoot.isFunction() ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (!declarationRoot.isFunction()) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n",
        "begin_line": 75,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.exitScope#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    if (!t.inGlobalScope()) {\n      nameStack.pop();\n    }\n  }\n",
        "begin_line": 98,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.visit#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        nameStack.pop();\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n      case Token.PARAM_LIST:\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n        break;\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n",
        "begin_line": 158,
        "end_line": 192,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.createScope#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  @Override\n  public Scope createScope(Node n, Scope parent) {\n    inputId = null;\n    if (parent == null) {\n      scope = new Scope(n, compiler);\n    } else {\n      scope = new Scope(parent, n);\n    }\n\n    scanRoot(n, parent);\n\n    inputId = null;\n    Scope returnedScope = scope;\n    scope = null;\n    return returnedScope;\n  }\n",
        "begin_line": 67,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0729
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.Scope#390",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.Node)",
        "snippet": "  Scope(Scope parent, Node rootNode) {\n    Preconditions.checkNotNull(parent);\n    Preconditions.checkArgument(rootNode != parent.rootNode);\n\n    this.parent = parent;\n    this.rootNode = rootNode;\n    JSType nodeType = rootNode.getJSType();\n    if (nodeType != null && nodeType.isFunctionType()) {\n      thisType = nodeType.toMaybeFunctionType().getTypeOfThis();\n    } else {\n      thisType = parent.thisType;\n    }\n    this.isBottom = false;\n    this.depth = parent.depth + 1;\n  }\n",
        "begin_line": 390,
        "end_line": 404,
        "comment": "\n   * Creates a Scope given the parent Scope and the root node of the scope.\n   * @param parent  The parent Scope. Cannot be null.\n   * @param rootNode  Typically the FUNCTION node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0729
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isSimpleOperatorType#705",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(int)",
        "snippet": "  static boolean isSimpleOperatorType(int type) {\n    switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 705,
        "end_line": 741,
        "comment": "\n   * A \"simple\" operator is one whose children are expressions,\n   * has no direct side-effects (unlike '+='), and has no\n   * conditional aspects (unlike '||').\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0729
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getJSType#1808",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSType()",
        "snippet": "  public JSType getJSType() {\n      return jsType;\n  }\n",
        "begin_line": 1808,
        "end_line": 1810,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0728
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.isConnectedInDirection#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, E, N)",
        "snippet": "  @Override\n  public boolean isConnectedInDirection(N n1, E edgeValue, N n2) {\n    return isConnectedInDirection(n1, Predicates.equalTo(edgeValue), n2);\n  }\n",
        "begin_line": 198,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0728
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getValue#498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getValue()",
        "snippet": "    @Override\n    public E getValue() {\n      return value;\n    }\n",
        "begin_line": 498,
        "end_line": 501,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getChildAtIndex#565",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildAtIndex(int)",
        "snippet": "  public Node getChildAtIndex(int i) {\n    Node n = first;\n    while (i > 0) {\n      n = n.next;\n      i--;\n    }\n    return n;\n  }\n",
        "begin_line": 565,
        "end_line": 572,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0725
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getInEdges#387",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getInEdges()",
        "snippet": "    @Override\n    public List<DiGraphEdge<N, E>> getInEdges() {\n      return inEdgeList;\n    }\n",
        "begin_line": 387,
        "end_line": 390,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0725
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraphEdge#471",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.LinkedDirectedGraphEdge(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>, E, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "    LinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode,\n        E edgeValue, DiGraphNode<N, E> destNode) {\n      this.value = edgeValue;\n      this.sourceNode = sourceNode;\n      this.destNode = destNode;\n    }\n",
        "begin_line": 471,
        "end_line": 476,
        "comment": "\n     * Constructor.\n     *\n     * @param edgeValue Edge Value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0725
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getDestination#483",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getDestination()",
        "snippet": "    @Override\n    public DiGraphNode<N, E> getDestination() {\n      return destNode;\n    }\n",
        "begin_line": 483,
        "end_line": 486,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0725
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.connect#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.connect(N, E, N)",
        "snippet": "  @Override\n  public void connect(N srcValue, E edgeValue, N destValue) {\n    LinkedDirectedGraphNode<N, E> src = getNodeOrFail(srcValue);\n    LinkedDirectedGraphNode<N, E> dest = getNodeOrFail(destValue);\n    LinkedDirectedGraphEdge<N, E> edge =\n        useEdgeAnnotations ?\n        new AnnotatedLinkedDirectedGraphEdge<N, E>(src, edgeValue, dest) :\n        new LinkedDirectedGraphEdge<N, E>(src, edgeValue, dest);\n    src.getOutEdges().add(edge);\n    dest.getInEdges().add(edge);\n  }\n",
        "begin_line": 77,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0725
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getNode#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNode(N)",
        "snippet": "  @Override\n  public GraphNode<N, E> getNode(N nodeValue) {\n    return getDirectedGraphNode(nodeValue);\n  }\n",
        "begin_line": 116,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0725
        },
        "num_failing_tests": 2
    },
    {
        "name": "Graph.getNodeOrFail#218",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.getNodeOrFail(N)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  <T extends GraphNode<N, E>> T getNodeOrFail(N val) {\n    T node = (T) getNode(val);\n    if (node == null) {\n      throw new IllegalArgumentException(val + \" does not exist in graph\");\n    }\n    return node;\n  }\n",
        "begin_line": 218,
        "end_line": 225,
        "comment": "\n   * Gets the node of the specified type, or throws an\n   * IllegalArgumentException.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0724
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.removeChild#686",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeChild(com.google.javascript.rhino.Node)",
        "snippet": "  public void removeChild(Node child) {\n    Node prev = getChildBefore(child);\n    if (prev == null)\n        first = first.next;\n    else\n        prev.next = child.next;\n    if (child == last) last = prev;\n    child.next = null;\n    child.parent = null;\n  }\n",
        "begin_line": 686,
        "end_line": 695,
        "comment": "\n   * Detach a child from its parent and siblings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0721
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isComma#2188",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isComma()",
        "snippet": "  public boolean isComma() {\n    return this.getType() == Token.COMMA;\n  }\n",
        "begin_line": 2188,
        "end_line": 2190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0721
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateBlock#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateBlock(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateBlock(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateStatement(c);\n    }\n  }\n",
        "begin_line": 277,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.072
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isCase#2180",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isCase()",
        "snippet": "  public boolean isCase() {\n    return this.getType() == Token.CASE;\n  }\n",
        "begin_line": 2180,
        "end_line": 2182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0718
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraphNode#346",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.LinkedDirectedGraphNode(N)",
        "snippet": "    LinkedDirectedGraphNode(N nodeValue) {\n      this.value = nodeValue;\n    }\n",
        "begin_line": 346,
        "end_line": 348,
        "comment": "\n     * Constructor\n     *\n     * @param nodeValue Node's value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0718
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getValue#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getValue()",
        "snippet": "    @Override\n    public N getValue() {\n      return value;\n    }\n",
        "begin_line": 350,
        "end_line": 353,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0718
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getOutEdges#392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getOutEdges()",
        "snippet": "    @Override\n    public List<DiGraphEdge<N, E>> getOutEdges() {\n      return outEdgeList;\n    }\n",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0718
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphNode#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNode(N)",
        "snippet": "  @Override\n  public DiGraphNode<N, E> getDirectedGraphNode(N nodeValue) {\n    return nodes.get(nodeValue);\n  }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0718
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.createDirectedGraphNode#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createDirectedGraphNode(N)",
        "snippet": "  @Override\n  public DiGraphNode<N, E> createDirectedGraphNode(N nodeValue) {\n    LinkedDirectedGraphNode<N, E> node = nodes.get(nodeValue);\n    if (node == null) {\n      node = useNodeAnnotations ?\n          new AnnotatedLinkedDirectedGraphNode<N, E>(nodeValue) :\n          new LinkedDirectedGraphNode<N, E>(nodeValue);\n      nodes.put(nodeValue, node);\n    }\n    return node;\n  }\n",
        "begin_line": 133,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0718
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.createNode#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createNode(N)",
        "snippet": "  @Override\n  public GraphNode<N, E> createNode(N value) {\n    return createDirectedGraphNode(value);\n  }\n",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0718
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isIf#2252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isIf()",
        "snippet": "  public boolean isIf() {\n    return this.getType() == Token.IF;\n  }\n",
        "begin_line": 2252,
        "end_line": 2254,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0717
        },
        "num_failing_tests": 2
    },
    {
        "name": "GoogleCodingConvention.isConstant#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isConstant(java.lang.String)",
        "snippet": "  @Override\n  public boolean isConstant(String name) {\n    if (name.length() <= 1) {\n      return false;\n    }\n\n    // In compiled code, '$' is often a namespace delimiter. To allow inlining\n    // of namespaced constants, we strip off any namespaces here.\n    int pos = name.lastIndexOf('$');\n    if (pos >= 0) {\n      name = name.substring(pos + 1);\n      if (name.length() == 0) {\n        return false;\n      }\n    }\n\n    return isConstantKey(name);\n  }\n",
        "begin_line": 70,
        "end_line": 87,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>This enforces the Google const name convention, that the first character\n   * after the last $ must be an upper-case letter and all subsequent letters\n   * must be upper case. The name must be at least 2 characters long.\n   *\n   * <p>Examples:\n   * <pre>\n   *      aaa          Not constant - lower-case letters in the name\n   *      A            Not constant - too short\n   *      goog$A       Constant - letters after the $ are upper-case.\n   *      AA17         Constant - digits can appear after the first letter\n   *      goog$7A      Not constant - first character after the $ must be\n   *                   upper case.\n   *      $A           Constant - doesn't have to be anything in front of the $\n   * </pre>\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.CodingConventions.Proxy": null
        },
        "susp": {
            "ochiai_susp": 0.0717
        },
        "num_failing_tests": 2
    },
    {
        "name": "FixedPointGraphTraversal.FixedPointGraphTraversal#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.FixedPointGraphTraversal(com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<N, E>)",
        "snippet": "  public FixedPointGraphTraversal(EdgeCallback<N, E> callback) {\n    this.callback = callback;\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a new traversal.\n   * @param callback A callback for updating the state of the graph each\n   *     time an edge is traversed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0716
        },
        "num_failing_tests": 2
    },
    {
        "name": "FixedPointGraphTraversal.newTraversal#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.newTraversal(com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<NODE, EDGE>)",
        "snippet": "  public static <NODE, EDGE> FixedPointGraphTraversal<NODE, EDGE> newTraversal(\n      EdgeCallback<NODE, EDGE> callback) {\n    return new FixedPointGraphTraversal<NODE, EDGE>(callback);\n  }\n",
        "begin_line": 60,
        "end_line": 63,
        "comment": "\n   * Helper method for creating new traversals.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0716
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getNodes#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNodes()",
        "snippet": "  @Override\n  public Collection<GraphNode<N, E>> getNodes() {\n    return Collections.<GraphNode<N, E>>unmodifiableCollection(nodes.values());\n  }\n",
        "begin_line": 284,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0715
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isGlobal#204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.isGlobal()",
        "snippet": "    public boolean isGlobal() {\n      return scope.isGlobal();\n    }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n     * Returns whether this is a global variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0712
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isImmutableValue#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isImmutableValue(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isImmutableValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }\n\n    return false;\n  }\n",
        "begin_line": 489,
        "end_line": 512,
        "comment": "\n   * Returns true if this is an immutable value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0712
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processBlock#485",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processBlock(com.google.javascript.rhino.head.ast.Block)",
        "snippet": "    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n",
        "begin_line": 485,
        "end_line": 488,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.annotateDispatchers#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateDispatchers(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateDispatchers(Node n, Node parent) {\n      Preconditions.checkState(n.isFunction());\n      if (parent.getJSDocInfo() != null\n          && parent.getJSDocInfo().isJavaDispatch()) {\n        if (parent.isAssign()) {\n          Preconditions.checkState(parent.getLastChild() == n);\n          n.putBooleanProp(Node.IS_DISPATCHER, true);\n        }\n      }\n    }\n",
        "begin_line": 185,
        "end_line": 194,
        "comment": "\n     * Translate dispatcher info into the property expected node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isFunctionExpression#1902",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionExpression(Node n) {\n    return n.isFunction() && !isStatement(n);\n  }\n",
        "begin_line": 1902,
        "end_line": 1904,
        "comment": "\n   * Is a FUNCTION node an function expression? An function expression is one\n   * that has either no name or a name that is not added to the current scope.\n   *\n   * <p>Some examples of function expressions:\n   * <pre>\n   * (function () {})\n   * (function f() {})()\n   * [ function f() {} ]\n   * var f = function f() {};\n   * for (function f() {};;) {}\n   * </pre>\n   *\n   * <p>Some examples of functions that are <em>not</em> expressions:\n   * <pre>\n   * function f() {}\n   * if (x); else function f() {}\n   * for (;;) { function f() {} }\n   * </pre>\n   *\n   * @param n A node\n   * @return Whether n is an function used within an expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseBranch#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseBranch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      inputId = n.getInputId();\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }\n",
        "begin_line": 476,
        "end_line": 505,
        "comment": "\n   * Traverses a branch.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isStatement#1702",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatement(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatement(Node n) {\n    return isStatementParent(n.getParent());\n  }\n",
        "begin_line": 1702,
        "end_line": 1704,
        "comment": "\n   * @return Whether the node is used as a statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.071
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateVar#389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateVar(Node n) {\n    validateNodeType(Token.VAR, n);\n    this.validateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      // Don't use the validateName here as the NAME is allowed to have\n      // a child.\n      validateNodeType(Token.NAME, c);\n      validateNonEmptyString(c);\n      validateMaximumChildCount(c, 1);\n      if (c.hasChildren()) {\n        validateExpression(c.getFirstChild());\n      }\n    }\n  }\n",
        "begin_line": 389,
        "end_line": 402,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0709
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getChildBefore#551",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildBefore(com.google.javascript.rhino.Node)",
        "snippet": "  public Node getChildBefore(Node child) {\n    if (child == first) {\n      return null;\n    }\n    Node n = first;\n    while (n.next != child) {\n      n = n.next;\n      if (n == null) {\n        throw new RuntimeException(\"node is not a child\");\n      }\n    }\n    return n;\n  }\n",
        "begin_line": 551,
        "end_line": 563,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0708
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processGeneric#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processGeneric(com.google.javascript.rhino.head.Node)",
        "snippet": "    private Node processGeneric(\n        com.google.javascript.rhino.head.Node n) {\n      Node node = newNode(transformTokenType(n.getType()));\n      for (com.google.javascript.rhino.head.Node child : n) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      return node;\n    }\n",
        "begin_line": 380,
        "end_line": 387,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0705
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.isExported#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isExported(java.lang.String, boolean)",
        "snippet": "    @Override\n    public boolean isExported(String name, boolean local) {\n      return nextConvention.isExported(name, local);\n    }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0705
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.isExported#264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.DefaultCodingConvention.isExported(java.lang.String, boolean)",
        "snippet": "    @Override\n    public boolean isExported(String name, boolean local) {\n      return local && name.startsWith(\"$super\");\n    }\n",
        "begin_line": 264,
        "end_line": 267,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0705
        },
        "num_failing_tests": 2
    },
    {
        "name": "MarkNoSideEffectCalls.definitionTypeContainsFunctionType#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.definitionTypeContainsFunctionType(com.google.javascript.jscomp.DefinitionsRemover.Definition)",
        "snippet": "  private static boolean definitionTypeContainsFunctionType(Definition def) {\n    Node rhs = def.getRValue();\n    if (rhs == null) {\n      return true;\n    }\n\n    switch (rhs.getType()) {\n      case Token.ASSIGN:\n      case Token.AND:\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.FUNCTION:\n      case Token.HOOK:\n      case Token.NAME:\n      case Token.NEW:\n      case Token.OR:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 77,
        "end_line": 98,
        "comment": "\n   * Determines if the type of the value of the rhs expression can\n   * be a function node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0704
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getQualifiedName#1547",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getQualifiedName()",
        "snippet": "  public String getQualifiedName() {\n    if (type == Token.NAME) {\n      return getString();\n    } else if (type == Token.GETPROP) {\n      String left = getFirstChild().getQualifiedName();\n      if (left == null) {\n        return null;\n      }\n      return left + \".\" + getLastChild().getString();\n    } else if (type == Token.THIS) {\n      return \"this\";\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 1547,
        "end_line": 1561,
        "comment": "\n   * This function takes a set of GETPROP nodes and produces a string that is\n   * each property separated by dots. If the node ultimately under the left\n   * sub-tree is not a simple name, this is not a valid qualified name.\n   *\n   * @return a null if this is not a qualified name, or a dot-separated string\n   *         of the name and properties.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0701
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateAssignmentExpression#600",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateAssignmentExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateAssignmentExpression(Node n) {\n    validateChildCount(n, 2);\n    validateAssignmentTarget(n.getFirstChild());\n    validateExpression(n.getLastChild());\n  }\n",
        "begin_line": 600,
        "end_line": 604,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0701
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isAnd#2152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isAnd()",
        "snippet": "  public boolean isAnd() {\n    return this.getType() == Token.AND;\n  }\n",
        "begin_line": 2152,
        "end_line": 2154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.07
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphNodes#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNodes()",
        "snippet": "  @Override\n  public Iterable<DiGraphNode<N, E>> getDirectedGraphNodes() {\n    return Collections.<DiGraphNode<N, E>>unmodifiableCollection(\n        nodes.values());\n  }\n",
        "begin_line": 105,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.07
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateAssignmentTarget#606",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateAssignmentTarget(Node n) {\n    switch (n.getType()) {\n      case Token.NAME:\n      case Token.GETELEM:\n      case Token.GETPROP:\n        validateExpression(n);\n        return;\n      default:\n        violation(\"Expected assignment target expression but was \"\n            + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 606,
        "end_line": 617,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.07
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isOr#2304",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isOr()",
        "snippet": "  public boolean isOr() {\n    return this.getType() == Token.OR;\n  }\n",
        "begin_line": 2304,
        "end_line": 2306,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0699
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isHook#2248",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isHook()",
        "snippet": "  public boolean isHook() {\n    return this.getType() == Token.HOOK;\n  }\n",
        "begin_line": 2248,
        "end_line": 2250,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0698
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraph#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraph(boolean, boolean)",
        "snippet": "  protected LinkedDirectedGraph(\n      boolean useNodeAnnotations, boolean useEdgeAnnotations) {\n    this.useNodeAnnotations = useNodeAnnotations;\n    this.useEdgeAnnotations = useEdgeAnnotations;\n  }\n",
        "begin_line": 71,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0698
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.getDocInfoForDeclaration#1150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.getDocInfoForDeclaration(com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "    private static JSDocInfo getDocInfoForDeclaration(Ref ref) {\n      if (ref.node != null) {\n        Node refParent = ref.node.getParent();\n        switch (refParent.getType()) {\n          case Token.FUNCTION:\n          case Token.ASSIGN:\n            return refParent.getJSDocInfo();\n          case Token.VAR:\n            return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();\n        }\n      }\n\n      return null;\n    }\n",
        "begin_line": 1150,
        "end_line": 1164,
        "comment": "\n     * Tries to get the doc info for a given declaration ref.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0693
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processVariableInitializer#1035",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer)",
        "snippet": "    @Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n      Node node = transform(initializerNode.getTarget());\n      if (initializerNode.getInitializer() != null) {\n        Node initalizer = transform(initializerNode.getInitializer());\n        node.addChildToBack(initalizer);\n      }\n      return node;\n    }\n",
        "begin_line": 1035,
        "end_line": 1043,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0693
        },
        "num_failing_tests": 2
    },
    {
        "name": "GoogleCodingConvention.isConstantKey#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isConstantKey(java.lang.String)",
        "snippet": "  @Override\n  public boolean isConstantKey(String name) {\n    if (name.isEmpty() || !Character.isUpperCase(name.charAt(0))) {\n      return false;\n    }\n\n    // hack way of checking that there aren't any lower-case letters\n    return name.toUpperCase().equals(name);\n  }\n",
        "begin_line": 89,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0692
        },
        "num_failing_tests": 2
    },
    {
        "name": "MarkNoSideEffectCalls.visit#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.SetNoSideEffectCallProperty.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n      if (!node.isCall() && !node.isNew()) {\n        return;\n      }\n\n      Collection<Definition> definitions =\n          defFinder.getDefinitionsReferencedAt(node.getFirstChild());\n      if (definitions == null) {\n        return;\n      }\n\n      for (Definition def : definitions) {\n        Node lValue = def.getLValue();\n        Preconditions.checkNotNull(lValue);\n        if (!noSideEffectFunctionNames.contains(lValue) &&\n            definitionTypeContainsFunctionType(def)) {\n          return;\n        }\n      }\n\n      node.setSideEffectFlags(Node.NO_SIDE_EFFECTS);\n    }\n",
        "begin_line": 175,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.069
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isFor#2228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isFor()",
        "snippet": "  public boolean isFor() {\n    return this.getType() == Token.FOR;\n  }\n",
        "begin_line": 2228,
        "end_line": 2230,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0689
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getSourceName#425",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName()",
        "snippet": "  public String getSourceName() {\n    return sourceName;\n  }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "\n   * Gets the current input source name.\n   *\n   * @return A string that may be empty, but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0687
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isGetElem#2240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isGetElem()",
        "snippet": "  public boolean isGetElem() {\n    return this.getType() == Token.GETELEM;\n  }\n",
        "begin_line": 2240,
        "end_line": 2242,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0685
        },
        "num_failing_tests": 2
    },
    {
        "name": "GoogleCodingConvention.GoogleCodingConvention#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention()",
        "snippet": "  public GoogleCodingConvention() {\n    this(new ClosureCodingConvention());\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": " By default, decorate the ClosureCodingConvention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0681
        },
        "num_failing_tests": 2
    },
    {
        "name": "GoogleCodingConvention.GoogleCodingConvention#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public GoogleCodingConvention(CodingConvention convention) {\n    super(convention);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": " Decorates a wrapped CodingConvention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0681
        },
        "num_failing_tests": 2
    },
    {
        "name": "LoggerErrorManager.LoggerErrorManager#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.LoggerErrorManager(com.google.javascript.jscomp.MessageFormatter, java.util.logging.Logger)",
        "snippet": "  public LoggerErrorManager(MessageFormatter formatter, Logger logger) {\n    this.formatter = formatter;\n    this.logger = logger;\n  }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n   * Creates an instance.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.068
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.Compiler#184",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler()",
        "snippet": "  public Compiler() {\n    this((PrintStream) null);\n  }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "\n   * Creates a Compiler that reports errors and warnings to its logger.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.068
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.initOptions#229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = composedGuards;\n  }\n",
        "begin_line": 229,
        "end_line": 292,
        "comment": "\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.068
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processAssignment#427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAssignment(com.google.javascript.rhino.head.ast.Assignment)",
        "snippet": "    @Override\n    Node processAssignment(Assignment assignmentNode) {\n      Node assign = processInfixExpression(assignmentNode);\n      Node target = assign.getFirstChild();\n      if (!validAssignmentTarget(target)) {\n        errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);\n      }\n      return assign;\n    }\n",
        "begin_line": 427,
        "end_line": 438,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0678
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.validAssignmentTarget#1011",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.validAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean validAssignmentTarget(Node target) {\n      switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }\n      return false;\n    }\n",
        "begin_line": 1011,
        "end_line": 1019,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0678
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isGet#1502",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isGet(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isGet(Node n) {\n    return n.isGetProp() || n.isGetElem();\n  }\n",
        "begin_line": 1502,
        "end_line": 1504,
        "comment": "\n   * Is this a GETPROP or GETELEM node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0672
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.addExpr#867",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int)",
        "snippet": "  void addExpr(Node n, int minPrecedence) {\n    addExpr(n, minPrecedence, Context.OTHER);\n  }\n",
        "begin_line": 867,
        "end_line": 869,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0668
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processInfixExpression#683",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression)",
        "snippet": "    @Override\n    Node processInfixExpression(InfixExpression exprNode) {\n      Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));\n      n.setLineno(exprNode.getLineno());\n      n.setCharno(position2charno(exprNode.getAbsolutePosition()));\n      maybeSetLengthFrom(n, exprNode);\n      return n;\n    }\n",
        "begin_line": 683,
        "end_line": 693,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0652
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.reportCodeChange#1854",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.reportCodeChange()",
        "snippet": "  @Override\n  public void reportCodeChange() {\n    for (CodeChangeHandler handler : codeChangeHandlers) {\n      handler.reportChange();\n    }\n  }\n",
        "begin_line": 1854,
        "end_line": 1859,
        "comment": "\n   * All passes should call reportCodeChange() when they alter\n   * the JS tree structure. This is verified by CompilerTestCase.\n   * This allows us to optimize to a fixed point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0649
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeChangeHandler.reportChange#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reportChange()",
        "snippet": "    @Override\n    public void reportChange() {\n      hasChanged = true;\n    }\n",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0649
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.Node#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node child) {\n    Preconditions.checkArgument(child.parent == null,\n        \"new child has existing parent\");\n    Preconditions.checkArgument(child.next == null,\n        \"new child has existing sibling\");\n\n    type = nodeType;\n    parent = null;\n    first = last = child;\n    child.next = null;\n    child.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 366,
        "end_line": 378,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0646
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateGetProp#619",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateGetProp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateGetProp(Node n) {\n    validateNodeType(Token.GETPROP, n);\n    validateChildCount(n, 2);\n    validateExpression(n.getFirstChild());\n    Node prop = n.getLastChild();\n    validateNodeType(Token.STRING, prop);\n    validateNonEmptyString(prop);\n  }\n",
        "begin_line": 619,
        "end_line": 626,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0644
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.getCodeRemovingPasses#708",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getCodeRemovingPasses()",
        "snippet": "  private List<PassFactory> getCodeRemovingPasses() {\n    List<PassFactory> passes = Lists.newArrayList();\n    if (options.collapseObjectLiterals && !isInliningForbidden()) {\n      passes.add(collapseObjectLiterals);\n    }\n\n    if (options.inlineVariables || options.inlineLocalVariables) {\n      passes.add(inlineVariables);\n    } else if (options.inlineConstantVars) {\n      passes.add(inlineConstants);\n    }\n\n    if (options.foldConstants) {\n      // These used to be one pass.\n      passes.add(minimizeExitPoints);\n      passes.add(peepholeOptimizations);\n    }\n\n    if (options.removeDeadCode) {\n      passes.add(removeUnreachableCode);\n    }\n\n    if (options.removeUnusedPrototypeProperties) {\n      passes.add(removeUnusedPrototypeProperties);\n      passes.add(removeUnusedClassProperties);\n    }\n\n    assertAllLoopablePasses(passes);\n    return passes;\n  }\n",
        "begin_line": 708,
        "end_line": 737,
        "comment": " Creates several passes aimed at removing code. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0643
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateStatement#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateStatement(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateStatement(Node n) {\n    switch (n.getType()) {\n      case Token.LABEL:\n        validateLabel(n);\n        return;\n      case Token.BLOCK:\n        validateBlock(n);\n        return;\n      case Token.FUNCTION:\n        validateFunctionStatement(n);\n        return;\n      case Token.WITH:\n        validateWith(n);\n        return;\n      case Token.FOR:\n        validateFor(n);\n        return;\n      case Token.WHILE:\n        validateWhile(n);\n        return;\n      case Token.DO:\n        validateDo(n);\n        return;\n      case Token.SWITCH:\n        validateSwitch(n);\n        return;\n      case Token.IF:\n        validateIf(n);\n        return;\n      case Token.VAR:\n        validateVar(n);\n        return;\n      case Token.EXPR_RESULT:\n        validateExprStmt(n);\n        return;\n      case Token.RETURN:\n        validateReturn(n);\n        return;\n      case Token.THROW:\n        validateThrow(n);\n        return;\n      case Token.TRY:\n        validateTry(n);\n        return;\n      case Token.BREAK:\n        validateBreak(n);\n        return;\n      case Token.CONTINUE:\n        validateContinue(n);\n        return;\n      case Token.EMPTY:\n        validateChildless(n);\n        return;\n      case Token.DEBUGGER:\n        validateChildless(n);\n        return;\n      default:\n        violation(\"Expected statement but was \"\n            + Token.name(n.getType()) + \".\", n);\n    }\n  }\n",
        "begin_line": 93,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0641
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateExprStmt#473",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateExprStmt(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateExprStmt(Node n) {\n    validateNodeType(Token.EXPR_RESULT, n);\n    validateChildCount(n, 1);\n    validateExpression(n.getFirstChild());\n  }\n",
        "begin_line": 473,
        "end_line": 477,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0641
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateChildCount#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 0) {\n      valid = !n.hasChildren();\n    } else if (i == 1) {\n      valid = n.hasOneChild();\n    } else {\n      valid = (n.getChildCount() == i);\n    }\n    if (!valid) {\n      violation(\n          \"Expected \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 774,
        "end_line": 788,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0641
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getModule#321",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getModule()",
        "snippet": "  public JSModule getModule() {\n    return module;\n  }\n",
        "begin_line": 321,
        "end_line": 323,
        "comment": " Returns the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.AstValidator#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.AstValidator()",
        "snippet": "  public AstValidator() {\n    this.violationHandler = new ViolationHandler() {\n      @Override\n      public void handleViolation(String message, Node n) {\n        throw new IllegalStateException(\n            message + \" Reference node \" + n.toString());\n      }\n    };\n  }\n",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateCodeRoot#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateCodeRoot(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateCodeRoot(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    validateIsSynthetic(n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateScript(c);\n    }\n  }\n",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateScript#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateScript(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateScript(Node n) {\n    validateNodeType(Token.SCRIPT, n);\n    validateIsSynthetic(n);\n    validateHasSourceName(n);\n    validateHasInputId(n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateStatement(c);\n    }\n  }\n",
        "begin_line": 83,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateIsSynthetic#292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateIsSynthetic(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateIsSynthetic(Node n) {\n    if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n      violation(\"Missing 'synthetic block' annotation.\", n);\n    }\n  }\n",
        "begin_line": 292,
        "end_line": 296,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateHasSourceName#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateHasSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateHasSourceName(Node n) {\n    String sourceName = n.getSourceFileName();\n    if (sourceName == null || sourceName.isEmpty()) {\n      violation(\"Missing 'source name' annotation.\", n);\n    }\n  }\n",
        "begin_line": 298,
        "end_line": 303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateHasInputId#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateHasInputId(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateHasInputId(Node n) {\n    InputId inputId = n.getInputId();\n    if (inputId == null) {\n      violation(\"Missing 'input id' annotation.\", n);\n    }\n  }\n",
        "begin_line": 305,
        "end_line": 310,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateNonEmptyString#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNonEmptyString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNonEmptyString(Node n) {\n    validateNonNullString(n);\n    if (n.getString().isEmpty()) {\n      violation(\"Expected non-empty string.\", n);\n    }\n  }\n",
        "begin_line": 325,
        "end_line": 330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateNonNullString#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNonNullString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNonNullString(Node n) {\n    if (n.getString() == null) {\n      violation(\"Expected non-null string.\", n);\n    }\n  }\n",
        "begin_line": 332,
        "end_line": 336,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateName#338",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateName(Node n) {\n    validateNodeType(Token.NAME, n);\n    validateNonEmptyString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 338,
        "end_line": 342,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateNodeType#766",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNodeType(int, com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNodeType(int type, Node n) {\n    if (n.getType() != type) {\n      violation(\n          \"Expected \" + Token.name(type) + \" but was \"\n              + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 766,
        "end_line": 772,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateMinimumChildCount#790",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateMinimumChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateMinimumChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 1) {\n      valid = n.hasChildren();\n    } else if (i == 2) {\n      valid = n.hasMoreThanOneChild();\n    } else {\n      valid = n.getChildCount() >= i;\n    }\n\n    if (!valid) {\n      violation(\n          \"Expected at least \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 790,
        "end_line": 805,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateMaximumChildCount#807",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateMaximumChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateMaximumChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 1) {\n      valid = !n.hasMoreThanOneChild();\n    } else {\n      valid = n.getChildCount() <= i;\n    }\n    if (!valid) {\n      violation(\n          \"Expected no more than \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 807,
        "end_line": 819,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.hasMoreThanOneChild#1383",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasMoreThanOneChild()",
        "snippet": "  public boolean hasMoreThanOneChild() {\n    return first != null && first != last;\n  }\n",
        "begin_line": 1383,
        "end_line": 1385,
        "comment": "\n   * Check for more than one child more efficiently than by iterating over all\n   * the children as is done with Node.getChildCount().\n   *\n   * @return Whether the node more than one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0638
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isConstantByConvention#2796",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isConstantByConvention(com.google.javascript.jscomp.CodingConvention, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent) {\n    String name = node.getString();\n    if (parent.isGetProp() &&\n        node == parent.getLastChild()) {\n      return convention.isConstantKey(name);\n    } else if (isObjectLitKey(node, parent)) {\n      return convention.isConstantKey(name);\n    } else {\n      return convention.isConstant(name);\n    }\n  }\n",
        "begin_line": 2796,
        "end_line": 2807,
        "comment": " Whether the given name is constant by coding convention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0637
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isLabel#2268",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isLabel()",
        "snippet": "  public boolean isLabel() {\n    return this.getType() == Token.LABEL;\n  }\n",
        "begin_line": 2268,
        "end_line": 2270,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.SyntacticScopeCreator.RedeclarationHandler)",
        "snippet": "  SyntacticScopeCreator(\n      AbstractCompiler compiler, RedeclarationHandler redeclarationHandler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = redeclarationHandler;\n  }\n",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.getJSDocInfo#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getJSDocInfo()",
        "snippet": "    @Override\n    public JSDocInfo getJSDocInfo() {\n      return info;\n    }\n",
        "begin_line": 271,
        "end_line": 274,
        "comment": "\n     * Gets the JSDocInfo for the variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.enterScope#755",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      // Cause the scope to be created, which will cause duplicate\n      // to be found.\n      t.getScope();\n    }\n",
        "begin_line": 755,
        "end_line": 760,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.exitScope#762",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {\n      // Nothing to do.\n    }\n",
        "begin_line": 762,
        "end_line": 765,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.shouldTraverse#767",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent) {\n      return true;\n    }\n",
        "begin_line": 767,
        "end_line": 771,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.visit#773",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Nothing to do.\n    }\n",
        "begin_line": 773,
        "end_line": 776,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.PropagateConstantAnnotationsOverVars#161",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.PropagateConstantAnnotationsOverVars(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    PropagateConstantAnnotationsOverVars(\n        AbstractCompiler compiler, boolean forbidChanges) {\n      this.compiler = compiler;\n      this.assertOnChange = forbidChanges;\n    }\n",
        "begin_line": 161,
        "end_line": 165,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.process#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      new NodeTraversal(compiler, this).traverseRoots(externs, root);\n    }\n",
        "begin_line": 167,
        "end_line": 170,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.NormalizeStatements#297",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.NormalizeStatements(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange) {\n      this.compiler = compiler;\n      this.assertOnChange = assertOnChange;\n    }\n",
        "begin_line": 297,
        "end_line": 300,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.shouldTraverse#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      doStatementNormalizations(t, n, parent);\n\n      return true;\n    }\n",
        "begin_line": 310,
        "end_line": 315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.annotateConstantsByConvention#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.annotateConstantsByConvention(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateConstantsByConvention(Node n, Node parent) {\n      Preconditions.checkState(\n          n.isName()\n          || n.isString()\n          || n.isGetterDef()\n          || n.isSetterDef());\n\n      // There are only two cases where a string token\n      // may be a variable reference: The right side of a GETPROP\n      // or an OBJECTLIT key.\n      boolean isObjLitKey = NodeUtil.isObjectLitKey(n, parent);\n      boolean isProperty = isObjLitKey ||\n          (parent.isGetProp() &&\n           parent.getLastChild() == n);\n      if (n.isName() || isProperty) {\n        boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant &&\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent)) {\n          if (assertOnChange) {\n            String name = n.getString();\n            throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());\n          }\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n      }\n    }\n",
        "begin_line": 350,
        "end_line": 379,
        "comment": "\n     * Mark names and properties that are constants by convention.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.extractForInitializer#495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.extractForInitializer(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void extractForInitializer(\n        Node n, Node before, Node beforeParent) {\n\n      for (Node next, c = n.getFirstChild(); c != null; c = next) {\n        next = c.getNext();\n        Node insertBefore = (before == null) ? c : before;\n        Node insertBeforeParent = (before == null) ? n : beforeParent;\n        switch (c.getType()) {\n          case Token.LABEL:\n            extractForInitializer(c, insertBefore, insertBeforeParent);\n            break;\n          case Token.FOR:\n            if (NodeUtil.isForIn(c)) {\n              Node first = c.getFirstChild();\n              if (first.isVar()) {\n                // Transform:\n                //    for (var a = 1 in b) {}\n                // to:\n                //    var a = 1; for (a in b) {};\n                Node newStatement = first;\n                // Clone just the node, to remove any initialization.\n                Node name = newStatement.getFirstChild().cloneNode();\n                first.getParent().replaceChild(first, name);\n                insertBeforeParent.addChildBefore(newStatement, insertBefore);\n                reportCodeChange(\"FOR-IN var declaration\");\n              }\n            } else if (!c.getFirstChild().isEmpty()) {\n              Node init = c.getFirstChild();\n              Node empty = IR.empty();\n              empty.copyInformationFrom(c);\n              c.replaceChild(init, empty);\n\n              Node newStatement;\n              // Only VAR statements, and expressions are allowed,\n              // but are handled differently.\n              if (init.isVar()) {\n                newStatement = init;\n              } else {\n                newStatement = NodeUtil.newExpr(init);\n              }\n\n              insertBeforeParent.addChildBefore(newStatement, insertBefore);\n              reportCodeChange(\"FOR initializer\");\n            }\n            break;\n        }\n      }\n    }\n",
        "begin_line": 495,
        "end_line": 542,
        "comment": "\n     * Bring the initializers out of FOR loops.  These need to be placed\n     * before any associated LABEL nodes. This needs to be done from the top\n     * level label first so this is called as a pre-order callback (from\n     * shouldTraverse).\n     *\n     * @param n The node to inspect.\n     * @param before The node to insert the initializer before.\n     * @param beforeParent The parent of the node before which the initializer\n     *     will be inserted.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.splitVarDeclarations#552",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.splitVarDeclarations(com.google.javascript.rhino.Node)",
        "snippet": "    private void splitVarDeclarations(Node n) {\n      for (Node next, c = n.getFirstChild(); c != null; c = next) {\n        next = c.getNext();\n        if (c.isVar()) {\n          if (assertOnChange && !c.hasChildren()) {\n            throw new IllegalStateException(\"Empty VAR node.\");\n          }\n\n          while (c.getFirstChild() != c.getLastChild()) {\n            Node name = c.getFirstChild();\n            c.removeChild(name);\n            Node newVar = IR.var(name).srcref(n);\n            n.addChildBefore(newVar, c);\n            reportCodeChange(\"VAR with multiple children\");\n          }\n        }\n      }\n    }\n",
        "begin_line": 552,
        "end_line": 569,
        "comment": "\n     * Split a var node such as:\n     *   var a, b;\n     * into individual statements:\n     *   var a;\n     *   var b;\n     * @param n The whose children we should inspect.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.Normalize#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.Normalize(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  Normalize(AbstractCompiler compiler, boolean assertOnChange) {\n    this.compiler = compiler;\n    this.assertOnChange = assertOnChange;\n\n    // TODO(nicksantos): assertOnChange should only be true if the tree\n    // is normalized.\n  }\n",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.process#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    new NodeTraversal(\n        compiler, new NormalizeStatements(compiler, assertOnChange))\n        .traverseRoots(externs, root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    // It is important that removeDuplicateDeclarations runs after\n    // MakeDeclaredNamesUnique in order for catch block exception names to be\n    // handled properly. Specifically, catch block exception names are\n    // only valid within the catch block, but our currect Scope logic\n    // has no concept of this and includes it in the containing function\n    // (or global scope). MakeDeclaredNamesUnique makes the catch exception\n    // names unique so that removeDuplicateDeclarations() will properly handle\n    // cases where a function scope variable conflict with a exception name:\n    //   function f() {\n    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}\n    //      var e = 1; // f scope 'e'\n    //   }\n    // otherwise 'var e = 1' would be rewritten as 'e = 1'.\n    // TODO(johnlenz): Introduce a seperate scope for catch nodes.\n    removeDuplicateDeclarations(externs, root);\n    new PropagateConstantAnnotationsOverVars(compiler, assertOnChange)\n        .process(externs, root);\n\n    if (!compiler.getLifeCycleStage().isNormalized()) {\n      compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);\n    }\n  }\n",
        "begin_line": 119,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.removeDuplicateDeclarations#627",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.removeDuplicateDeclarations(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void removeDuplicateDeclarations(Node externs, Node root) {\n    Callback tickler = new ScopeTicklingCallback();\n    ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());\n    NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);\n    t.traverseRoots(externs, root);\n  }\n",
        "begin_line": 627,
        "end_line": 633,
        "comment": "\n   * Remove duplicate VAR declarations.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isVarDeclaration#1512",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isVarDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isVarDeclaration(Node n) {\n    // There is no need to verify that parent != null because a NAME node\n    // always has a parent in a valid parse tree.\n    return n.isName() && n.getParent().isVar();\n  }\n",
        "begin_line": 1512,
        "end_line": 1516,
        "comment": "\n   * Is this node the name of a variable being declared?\n   *\n   * @param n The node\n   * @return True if {@code n} is NAME and {@code parent} is VAR\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenamer#437",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.ContextualRenamer()",
        "snippet": "    ContextualRenamer() {\n      this.global = true;\n      nameUsage = HashMultiset.create();\n    }\n",
        "begin_line": 437,
        "end_line": 440,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.getReplacementName#480",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.getReplacementName(java.lang.String)",
        "snippet": "    @Override\n    public String getReplacementName(String oldName) {\n      return declarations.get(oldName);\n    }\n",
        "begin_line": 480,
        "end_line": 483,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.reserveName#492",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.reserveName(java.lang.String)",
        "snippet": "    private void reserveName(String name) {\n      nameUsage.setCount(name, 0, 1);\n    }\n",
        "begin_line": 492,
        "end_line": 494,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.MakeDeclaredNamesUnique#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.MakeDeclaredNamesUnique()",
        "snippet": "  MakeDeclaredNamesUnique() {\n    this(new ContextualRenamer());\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.MakeDeclaredNamesUnique#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.MakeDeclaredNamesUnique(com.google.javascript.jscomp.MakeDeclaredNamesUnique.Renamer)",
        "snippet": "  MakeDeclaredNamesUnique(Renamer renamer) {\n    this.rootRenamer = renamer;\n  }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.getReplacementName#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.getReplacementName(java.lang.String)",
        "snippet": "  private String getReplacementName(String oldName) {\n    for (Renamer names : nameStack) {\n      String newName = names.getReplacementName(oldName);\n      if (newName != null) {\n        return newName;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 198,
        "end_line": 206,
        "comment": "\n   * Walks the stack of name maps and finds the replacement name for the\n   * current scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.findDeclaredNames#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.findDeclaredNames(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.MakeDeclaredNamesUnique.Renamer)",
        "snippet": "  private void findDeclaredNames(Node n, Node parent, Renamer renamer) {\n    // Do a shallow traversal, so don't traverse into function declarations,\n    // except for the name of the function itself.\n    if (parent == null\n        || !parent.isFunction()\n        || n == parent.getFirstChild()) {\n      if (NodeUtil.isVarDeclaration(n)) {\n        renamer.addDeclaredName(n.getString());\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        Node nameNode = n.getFirstChild();\n        renamer.addDeclaredName(nameNode.getString());\n      }\n\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        findDeclaredNames(c, n, renamer);\n      }\n    }\n  }\n",
        "begin_line": 212,
        "end_line": 229,
        "comment": "\n   * Traverses the current scope and collects declared names.  Does not\n   * decent into functions or add CATCH exceptions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCompiler.isNormalized#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.isNormalized()",
        "snippet": "    boolean isNormalized() {\n      return this == NORMALIZED || this == NORMALIZED_OBFUSCATED;\n    }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCompiler.isNormalizedObfuscated#287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.isNormalizedObfuscated()",
        "snippet": "    boolean isNormalizedObfuscated() {\n      return this == NORMALIZED_OBFUSCATED;\n    }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCompiler.getLifeCycleStage#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.getLifeCycleStage()",
        "snippet": "  LifeCycleStage getLifeCycleStage() {\n    return stage;\n  }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\n   * @return The current life-cycle stage of the AST we're working on.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCompiler.setLifeCycleStage#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage)",
        "snippet": "  void setLifeCycleStage(LifeCycleStage stage) {\n    this.stage = stage;\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\n   * Set the current life-cycle state.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseRoots#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.rhino.Node...)",
        "snippet": "  public void traverseRoots(Node ... roots) {\n    traverseRoots(Lists.newArrayList(roots));\n  }\n",
        "begin_line": 284,
        "end_line": 286,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isObjectLitKey#2042",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isObjectLitKey(Node node, Node parent) {\n    switch (node.getType()) {\n      case Token.STRING:\n        return parent.isObjectLit();\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 2042,
        "end_line": 2051,
        "comment": "\n   * Determines whether a node represents an object literal key\n   * (e.g. key1 in {key1: value1, key2: value2}).\n   *\n   * @param node A node\n   * @param parent The node's parent\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0635
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getScopeRoot#623",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeRoot()",
        "snippet": "  public Node getScopeRoot() {\n    if (scopeRoots.isEmpty()) {\n      return scopes.peek().getRootNode();\n    } else {\n      return scopeRoots.peek();\n    }\n  }\n",
        "begin_line": 623,
        "end_line": 629,
        "comment": " Returns the current scope's root. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0635
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getIntValue#339",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.getIntValue()",
        "snippet": "    @Override\n    public int getIntValue() {\n      return intValue;\n    }\n",
        "begin_line": 339,
        "end_line": 342,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0634
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.hasChildren#535",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChildren()",
        "snippet": "  public boolean hasChildren() {\n    return first != null;\n  }\n",
        "begin_line": 535,
        "end_line": 537,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0634
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getIntProp#816",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getIntProp(int)",
        "snippet": "  public int getIntProp(int propType) {\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return 0;\n    }\n    return item.getIntValue();\n  }\n",
        "begin_line": 816,
        "end_line": 822,
        "comment": "\n   * Returns the integer value for the property, or 0 if the property\n   * is not defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0634
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isParamList#2308",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isParamList()",
        "snippet": "  public boolean isParamList() {\n    return this.getType() == Token.PARAM_LIST;\n  }\n",
        "begin_line": 2308,
        "end_line": 2310,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0634
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isExprResult#2220",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isExprResult()",
        "snippet": "  public boolean isExprResult() {\n    return this.getType() == Token.EXPR_RESULT;\n  }\n",
        "begin_line": 2220,
        "end_line": 2222,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0632
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getBooleanProp#808",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getBooleanProp(int)",
        "snippet": "  public boolean getBooleanProp(int propType) {\n    return getIntProp(propType) != 0;\n  }\n",
        "begin_line": 808,
        "end_line": 810,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0632
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isFunctionDeclaration#1864",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionDeclaration(Node n) {\n    return n.isFunction() && isStatement(n);\n  }\n",
        "begin_line": 1864,
        "end_line": 1866,
        "comment": "\n   * Is this node a function declaration? A function declaration is a function\n   * that has a name that is added to the current scope (i.e. a function that\n   * is not part of a expression; see {@link #isFunctionExpression}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseRoots#461",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.rhino.Node>, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverseRoots(\n      AbstractCompiler compiler, List<Node> roots, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverseRoots(roots);\n  }\n",
        "begin_line": 461,
        "end_line": 465,
        "comment": "\n   * Traverses a list of node trees.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getScope#595",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScope()",
        "snippet": "  public Scope getScope() {\n    Scope scope = scopes.isEmpty() ? null : scopes.peek();\n    if (scopeRoots.isEmpty()) {\n      return scope;\n    }\n\n    Iterator<Node> it = scopeRoots.descendingIterator();\n    while (it.hasNext()) {\n      scope = scopeCreator.createScope(it.next(), scope);\n      scopes.push(scope);\n    }\n    scopeRoots.clear();\n\n    return scope;\n  }\n",
        "begin_line": 595,
        "end_line": 609,
        "comment": " Gets the current scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.scanVars#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void scanVars(Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.VAR:\n        // Declare all variables. e.g. var x = 1, y, z;\n        for (Node child = n.getFirstChild();\n             child != null;) {\n          Node next = child.getNext();\n          declareVar(child);\n          child = next;\n        }\n        return;\n\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n)) {\n          return;\n        }\n\n        String fnName = n.getFirstChild().getString();\n        if (fnName.isEmpty()) {\n          // This is invalid, but allow it so the checks can catch it.\n          return;\n        }\n        declareVar(n.getFirstChild());\n        return;   // should not examine function's children\n\n      case Token.CATCH:\n        Preconditions.checkState(n.getChildCount() == 2);\n        Preconditions.checkState(n.getFirstChild().isName());\n        // the first child is the catch var and the third child\n        // is the code block\n\n        final Node var = n.getFirstChild();\n        final Node block = var.getNext();\n\n        declareVar(var);\n        scanVars(block, n);\n        return;  // only one child to scan\n\n      case Token.SCRIPT:\n        inputId = n.getInputId();\n        Preconditions.checkNotNull(inputId);\n        break;\n    }\n\n    // Variables can only occur in statement-level nodes, so\n    // we only need to traverse children in a couple special cases.\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n      for (Node child = n.getFirstChild();\n           child != null;) {\n        Node next = child.getNext();\n        scanVars(child, n);\n        child = next;\n      }\n    }\n  }\n",
        "begin_line": 124,
        "end_line": 178,
        "comment": "\n   * Scans and gather variables declarations under a Node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.declareVar#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void declareVar(Node n) {\n    Preconditions.checkState(n.isName());\n\n    CompilerInput input = compiler.getInput(inputId);\n    String name = n.getString();\n    if (scope.isDeclared(name, false)\n        || (scope.isLocal() && name.equals(ARGUMENTS))) {\n      redeclarationHandler.onRedeclaration(\n          scope, name, n, input);\n    } else {\n      scope.declare(name, n, null, input);\n    }\n  }\n",
        "begin_line": 233,
        "end_line": 245,
        "comment": "\n   * Declares a variable.\n   *\n   * @param n The node corresponding to the variable name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.Var#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.Var(boolean, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.Scope, int, com.google.javascript.jscomp.CompilerInput, boolean, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    private Var(boolean inferred, String name, Node nameNode, JSType type,\n                Scope scope, int index, CompilerInput input, boolean isDefine,\n                JSDocInfo info) {\n      this.name = name;\n      this.nameNode = nameNode;\n      this.type = type;\n      this.scope = scope;\n      this.index = index;\n      this.input = input;\n      this.isDefine = isDefine;\n      this.info = info;\n      this.typeInferred = inferred;\n    }\n",
        "begin_line": 130,
        "end_line": 142,
        "comment": "\n     * Creates a variable.\n     *\n     * @param inferred whether its type is inferred (as opposed to declared)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.Scope#411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  Scope(Node rootNode, AbstractCompiler compiler) {\n    this.parent = null;\n    this.rootNode = rootNode;\n    thisType = compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);\n    this.isBottom = false;\n    this.depth = 0;\n  }\n",
        "begin_line": 411,
        "end_line": 417,
        "comment": "\n   * Creates a global Scope.\n   * @param rootNode  Typically the global BLOCK node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.getParent#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getParent()",
        "snippet": "  public Scope getParent() {\n    return parent;\n  }\n",
        "begin_line": 451,
        "end_line": 453,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.declare#484",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  Var declare(String name, Node nameNode, JSType type, CompilerInput input) {\n    return declare(name, nameNode, type, input, true);\n  }\n",
        "begin_line": 484,
        "end_line": 486,
        "comment": "\n   * Declares a variable whose type is inferred.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.declare#498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput, boolean)",
        "snippet": "  Var declare(String name, Node nameNode,\n      JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name != null && name.length() > 0);\n\n    // Make sure that it's declared only once\n    Preconditions.checkState(vars.get(name) == null);\n\n    // native variables do not have a name node.\n    JSDocInfo info = nameNode == null\n        ? null : NodeUtil.getBestJSDocInfo(nameNode);\n\n    Var var = new Var(inferred, name, nameNode, type, this, vars.size(), input,\n        info != null && info.isDefine(), info);\n\n    vars.put(name, var);\n    return var;\n  }\n",
        "begin_line": 498,
        "end_line": 514,
        "comment": "\n   * Declares a variable.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   * @param inferred Whether this variable's type is inferred (as opposed\n   *     to declared).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isDeclared#563",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isDeclared(java.lang.String, boolean)",
        "snippet": "  public boolean isDeclared(String name, boolean recurse) {\n    Scope scope = this;\n    if (scope.vars.containsKey(name))\n      return true;\n\n    if (scope.parent != null && recurse) {\n      return scope.parent.isDeclared(name, recurse);\n    }\n    return false;\n  }\n",
        "begin_line": 563,
        "end_line": 572,
        "comment": "\n   * Returns true if a variable is declared.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isGlobal#613",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isGlobal()",
        "snippet": "  public boolean isGlobal() {\n    return parent == null;\n  }\n",
        "begin_line": 613,
        "end_line": 615,
        "comment": "\n   * Returns whether this is the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isLocal#620",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isLocal()",
        "snippet": "  public boolean isLocal() {\n    return !isGlobal();\n  }\n",
        "begin_line": 620,
        "end_line": 622,
        "comment": "\n   * Returns whether this is a local scope (i.e. not the global scope).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isControlStructure#1617",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructure(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isControlStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1617,
        "end_line": 1634,
        "comment": "\n   * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isStatementBlock#1695",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementBlock(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementBlock(Node n) {\n    return n.isScript() || n.isBlock();\n  }\n",
        "begin_line": 1695,
        "end_line": 1697,
        "comment": "\n   * @return Whether the node is of a type that contain other statements.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.popScope#582",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.popScope()",
        "snippet": "  private void popScope() {\n    if (scopeCallback != null) {\n      scopeCallback.exitScope(this);\n    }\n    if (scopeRoots.isEmpty()) {\n      scopes.pop();\n    } else {\n      scopeRoots.pop();\n    }\n    cfgs.pop();\n  }\n",
        "begin_line": 582,
        "end_line": 592,
        "comment": " Pops back to the previous scope (e.g. when leaving a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.inGlobalScope#634",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.inGlobalScope()",
        "snippet": "  boolean inGlobalScope() {\n    return getScopeDepth() <= 1;\n  }\n",
        "begin_line": 634,
        "end_line": 636,
        "comment": "\n   * Determines whether the traversal is currently in the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getScopeDepth#638",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeDepth()",
        "snippet": "  int getScopeDepth() {\n    return scopes.size() + scopeRoots.size();\n  }\n",
        "begin_line": 638,
        "end_line": 640,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0631
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.hasOneChild#1373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasOneChild()",
        "snippet": "  public boolean hasOneChild() {\n    return first != null && first == last;\n  }\n",
        "begin_line": 1373,
        "end_line": 1375,
        "comment": "\n   * Check for one child more efficiently than by iterating over all the\n   * children as is done with Node.getChildCount().\n   *\n   * @return Whether the node has exactly one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.063
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isCall#2176",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isCall()",
        "snippet": "  public boolean isCall() {\n    return this.getType() == Token.CALL;\n  }\n",
        "begin_line": 2176,
        "end_line": 2178,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.063
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isGetProp#2244",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isGetProp()",
        "snippet": "  public boolean isGetProp() {\n    return this.getType() == Token.GETPROP;\n  }\n",
        "begin_line": 2244,
        "end_line": 2246,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.063
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getInput#432",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getInput()",
        "snippet": "  public CompilerInput getInput() {\n    return compiler.getInput(inputId);\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "\n   * Gets the current input source.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.063
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getInput#975",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getInput(com.google.javascript.rhino.InputId)",
        "snippet": "  @Override\n  public CompilerInput getInput(InputId id) {\n    return inputsById.get(id);\n  }\n",
        "begin_line": 975,
        "end_line": 978,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.063
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.NodeTraversal#229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb,\n      ScopeCreator scopeCreator) {\n    this.callback = cb;\n    if (cb instanceof ScopedCallback) {\n      this.scopeCallback = (ScopedCallback) cb;\n    }\n    this.compiler = compiler;\n    this.inputId = null;\n    this.sourceName = \"\";\n    this.scopeCreator = scopeCreator;\n  }\n",
        "begin_line": 229,
        "end_line": 239,
        "comment": "\n   * Creates a node traversal using the specified callback interface\n   * and the scope creator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0629
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.pushScope#562",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.rhino.Node)",
        "snippet": "  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 562,
        "end_line": 569,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0629
        },
        "num_failing_tests": 2
    },
    {
        "name": "VoidType.VoidType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "VoidType.toStringHelper#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "VoidType.getDisplayName#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"undefined\";\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueType.ValueType#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnknownType.UnknownType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked = isChecked;\n  }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry) {\n    this(registry, DEFAULT_MAX_UNION_SIZE);\n  }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry, int)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry, int maxUnionSize) {\n    this.registry = registry;\n    this.maxUnionSize = maxUnionSize;\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.addAlternate#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType = isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown = alternate instanceof UnknownType;\n    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked = areAllUnknownsChecked &&\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType && !isNativeUnknownType) {\n      if (alternate.isUnionType()) {\n        UnionType union = alternate.toMaybeUnionType();\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (alternates.size() > maxUnionSize) {\n          return this;\n        }\n\n        // Function types are special, because they have their\n        // own bizarro sub-lattice. See the commants on\n        // FunctionType#supAndInf helper and above at functionTypePosition.\n        if (alternate.isFunctionType() && functionTypePosition != -1) {\n          // See the comments on functionTypePosition above.\n          FunctionType other =\n              alternates.get(functionTypePosition).toMaybeFunctionType();\n          FunctionType supremum =\n              alternate.toMaybeFunctionType().supAndInfHelper(other, true);\n          alternates.set(functionTypePosition, supremum);\n          result = null;\n          return this;\n        }\n\n        // Look through the alternates we've got so far,\n        // and check if any of them are duplicates of\n        // one another.\n        int currentIndex = 0;\n        Iterator<JSType> it = alternates.iterator();\n        while (it.hasNext()) {\n          JSType current = it.next();\n\n          // Unknown and NoResolved types may just be names that haven't\n          // been resolved yet. So keep these in the union, and just use\n          // equality checking for simple de-duping.\n          if (alternate.isUnknownType() ||\n              current.isUnknownType() ||\n              alternate.isNoResolvedType() ||\n              current.isNoResolvedType()) {\n            if (alternate.isEquivalentTo(current)) {\n              // Alternate is unnecessary.\n              return this;\n            }\n          } else {\n            if (alternate.isSubtype(current)) {\n              // Alternate is unnecessary.\n              return this;\n            } else if (current.isSubtype(alternate)) {\n              // Alternate makes current obsolete\n              it.remove();\n\n              if (currentIndex == functionTypePosition) {\n                functionTypePosition = -1;\n              } else if (currentIndex < functionTypePosition) {\n                functionTypePosition--;\n                currentIndex--;\n              }\n            }\n          }\n          currentIndex++;\n        }\n\n        if (alternate.isFunctionType()) {\n          // See the comments on functionTypePosition above.\n          Preconditions.checkState(functionTypePosition == -1);\n          functionTypePosition = alternates.size();\n        }\n\n        alternates.add(alternate);\n        result = null; // invalidate the memoized result\n      }\n    } else {\n      result = null;\n    }\n    return this;\n  }\n",
        "begin_line": 121,
        "end_line": 212,
        "comment": "\n   * Adds an alternate to the union type under construction. Returns this\n   * for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.reduceAlternatesWithoutUnion#219",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.reduceAlternatesWithoutUnion()",
        "snippet": "  private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n      return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n      if (areAllUnknownsChecked) {\n        return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n      } else {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      int size = alternates.size();\n      if (size > maxUnionSize) {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      } else if (size > 1) {\n        return null;\n      } else if (size == 1) {\n        return alternates.iterator().next();\n      } else {\n        return registry.getNativeType(NO_TYPE);\n      }\n    }\n  }\n",
        "begin_line": 219,
        "end_line": 240,
        "comment": "\n   * Reduce the alternates into a non-union type.\n   * If the alternates can't be accurately represented with a non-union\n   * type, return null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.build#247",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
        "snippet": "  JSType build() {\n    if (result == null) {\n      result = reduceAlternatesWithoutUnion();\n      if (result == null) {\n        result = new UnionType(registry, getAlternateListCopy());\n      }\n    }\n    return result;\n  }\n",
        "begin_line": 247,
        "end_line": 255,
        "comment": "\n   * Creates a union.\n   * @return A UnionType if it has two or more alternates, the\n   *    only alternate if it has one and otherwise {@code NO_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.getAlternateListCopy#257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.getAlternateListCopy()",
        "snippet": "  private Collection<JSType> getAlternateListCopy() {\n    return ImmutableList.copyOf(alternates);\n  }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionType.UnionType#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Collection<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  UnionType(JSTypeRegistry registry, Collection<JSType> alternates) {\n    super(registry);\n    this.alternates = alternates;\n    this.hashcode = this.alternates.hashCode();\n  }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "\n   * Creates a union type.\n   *\n   * @param alternates the alternates of the union\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "StringType.StringType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  StringType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "StringType.toStringHelper#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "StringType.getDisplayName#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"string\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n    this(registry, className, implicitPrototype, false);\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "\n   * Creates an object type.\n   *\n   * @param className the name of the class.  May be {@code null} to\n   *        denote an anonymous class.\n   *\n   * @param implicitPrototype the implicit prototype\n   *        (a.k.a. {@code [[Prototype]]}) as defined by ECMA-262. If the\n   *        implicit prototype is {@code null} the implicit prototype will be\n   *        set to the {@link JSTypeNative#OBJECT_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType) {\n    super(registry);\n    this.properties = Maps.newTreeMap();\n    this.className = className;\n    this.nativeType = nativeType;\n    if (nativeType || implicitPrototype != null) {\n      setImplicitPrototype(implicitPrototype);\n    } else {\n      setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n    }\n  }\n",
        "begin_line": 113,
        "end_line": 125,
        "comment": "\n   * Creates an object type, allowing specification of the implicit prototype\n   * when creating native objects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.setPrettyPrint#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setPrettyPrint(boolean)",
        "snippet": "  void setPrettyPrint(boolean prettyPrint) {\n    this.prettyPrint = prettyPrint;\n  }\n",
        "begin_line": 398,
        "end_line": 400,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getImplicitPrototype#411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototypeFallback;\n  }\n",
        "begin_line": 411,
        "end_line": 414,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.setImplicitPrototype#422",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototypeFallback = implicitPrototype;\n  }\n",
        "begin_line": 422,
        "end_line": 425,
        "comment": "\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getReferenceName#427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (className != null) {\n      return className;\n    } else if (ownerFunction != null) {\n      return ownerFunction.getReferenceName() + \".prototype\";\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 427,
        "end_line": 436,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.hasReferenceName#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return className != null || ownerFunction != null;\n  }\n",
        "begin_line": 438,
        "end_line": 441,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.isSubtype#443",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    }\n\n    // Union types\n    if (that.isUnionType()) {\n      // The static {@code JSType.isSubtype} check already decomposed\n      // union types, so we don't need to check those again.\n      return false;\n    }\n\n    // record types\n    if (that.isRecordType()) {\n      return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n\n    // Interfaces\n    // Find all the interfaces implemented by this class and compare each one\n    // to the interface instance.\n    ObjectType thatObj = that.toObjectType();\n    ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();\n    if (thatCtor != null && thatCtor.isInterface()) {\n      Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();\n      for (ObjectType thisInterface : thisInterfaces) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    if (getConstructor() != null && getConstructor().isInterface()) {\n      for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    // other prototype based objects\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n      // If unsure, say 'yes', to avoid spurious warnings.\n      // TODO(user): resolve the prototype chain completely in all cases,\n      // to avoid guessing.\n      return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n  }\n",
        "begin_line": 443,
        "end_line": 491,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.implicitPrototypeChainIsUnknown#493",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeChainIsUnknown()",
        "snippet": "  private boolean implicitPrototypeChainIsUnknown() {\n    ObjectType p = getImplicitPrototype();\n    while (p != null) {\n      if (p.isUnknownType()) {\n        return true;\n      }\n      p = p.getImplicitPrototype();\n    }\n    return false;\n  }\n",
        "begin_line": 493,
        "end_line": 502,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.hasCachedValues#504",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }\n",
        "begin_line": 504,
        "end_line": 507,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.isNativeObjectType#510",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
        "snippet": "  @Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }\n",
        "begin_line": 510,
        "end_line": 513,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.setOwnerFunction#515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  void setOwnerFunction(FunctionType type) {\n    Preconditions.checkState(ownerFunction == null || type == null);\n    ownerFunction = type;\n  }\n",
        "begin_line": 515,
        "end_line": 518,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getOwnerFunction#520",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getOwnerFunction()",
        "snippet": "  @Override\n  public FunctionType getOwnerFunction() {\n    return ownerFunction;\n  }\n",
        "begin_line": 520,
        "end_line": 523,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getCtorExtendedInterfaces#532",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();\n  }\n",
        "begin_line": 532,
        "end_line": 537,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.Property#599",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.Property.Property(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "    Property(String name, JSType type, boolean inferred,\n        Node propertyNode) {\n      this.name = name;\n      this.type = type;\n      this.inferred = inferred;\n      this.propertyNode = propertyNode;\n    }\n",
        "begin_line": 599,
        "end_line": 605,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.getType#632",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.Property.getType()",
        "snippet": "    @Override\n    public JSType getType() {\n      return type;\n    }\n",
        "begin_line": 632,
        "end_line": 635,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.ObjectType#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.isImplicitPrototype#469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final boolean isImplicitPrototype(ObjectType prototype) {\n    for (ObjectType current = this;\n         current != null;\n         current = current.getImplicitPrototype()) {\n      if (current.isEquivalentTo(prototype)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 469,
        "end_line": 478,
        "comment": "\n   * Checks that the prototype is an implicit prototype of this object. Since\n   * each object has an implicit prototype, an implicit prototype's\n   * implicit prototype is also this implicit prototype's.\n   *\n   * @param prototype any prototype based object\n   *\n   * @return {@code true} if {@code prototype} is {@code equal} to any\n   *         object in this object's implicit prototype chain.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.isUnknownType#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto = getImplicitPrototype();\n      if (implicitProto == null ||\n          implicitProto.isNativeObjectType()) {\n        unknown = false;\n        for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n          if (interfaceType.isUnknownType()) {\n            unknown = true;\n            break;\n          }\n        }\n      } else {\n        unknown = implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }\n",
        "begin_line": 489,
        "end_line": 509,
        "comment": "\n   * We treat this as the unknown type if any of its implicit prototype\n   * properties is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.hasCachedValues#521",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
        "snippet": "  public boolean hasCachedValues() {\n    return !unknown;\n  }\n",
        "begin_line": 521,
        "end_line": 523,
        "comment": "\n   * Returns true if any cached values have been set for this type.  If true,\n   * then the prototype chain should not be changed, as it might invalidate the\n   * cached values.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.cast#541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.cast(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public static ObjectType cast(JSType type) {\n    return type == null ? null : type.toObjectType();\n  }\n",
        "begin_line": 541,
        "end_line": 543,
        "comment": "\n   * A null-safe version of JSType#toObjectType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.isFunctionPrototypeType#545",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isFunctionPrototypeType()",
        "snippet": "  @Override\n  public final boolean isFunctionPrototypeType() {\n    return getOwnerFunction() != null;\n  }\n",
        "begin_line": 545,
        "end_line": 548,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberType.NumberType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberType.getDisplayName#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"number\";\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NullType.NullType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NullType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NullType.toStringHelper#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NullType.getDisplayName#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"null\";\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NoType.NoType#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NoType.isNoType#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
        "snippet": "  @Override\n  public boolean isNoType() {\n    return true;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NoResolvedType.NoResolvedType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.NoResolvedType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoResolvedType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NoObjectType.NoObjectType#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null,\n          registry.createArrowType(null, null),\n          null, null, true, true);\n    getInternalArrowType().returnType = this;\n    this.setInstanceType(this);\n  }\n",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.initializeBuiltInTypes#246",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
        "snippet": "  private void initializeBuiltInTypes() {\n    // These locals shouldn't be all caps.\n    BooleanType BOOLEAN_TYPE = new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE = new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE = new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE = new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n\n    VoidType VOID_TYPE = new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE = new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other's results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    PrototypeObjectType TOP_LEVEL_PROTOTYPE =\n        new PrototypeObjectType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Object\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n\n    OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE =\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE = new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    NoObjectType NO_RESOLVED_TYPE = new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE =\n      new FunctionType(this, \"Array\", null,\n          createArrowType(createParametersWithVarArgs(ALL_TYPE), null),\n          null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType =\n        ARRAY_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Boolean\", null,\n            createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE),\n            null, null, true, true);\n    ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,\n        BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE =\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE =\n      new FunctionType(this, \"Date\", null,\n          createArrowType(\n              createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n                  UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n              STRING_TYPE),\n          null, null, true, true);\n    ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE,\n        REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE =\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Number\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE =\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE =\n      new FunctionType(this, \"RegExp\", null,\n          createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)),\n          null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType =\n        REGEXP_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"String\", null,\n            createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE),\n            null, null, true, true);\n    ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE =\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN =\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE =\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE =\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -> ?\n    FunctionType U2U_FUNCTION_TYPE =\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -> ? with the NoObject type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE =\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(UNKNOWN_TYPE),\n                UNKNOWN_TYPE),\n            NO_OBJECT_TYPE, null, true, true) {\n          private static final long serialVersionUID = 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it's the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -> NoType\n    FunctionType LEAST_FUNCTION_TYPE =\n        createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the 'this' object in the global scope\n    FunctionType GLOBAL_THIS_CTOR =\n        new FunctionType(this, \"global this\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -> All\n    FunctionType GREATEST_FUNCTION_TYPE =\n      createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n\n    // Register the prototype property. See the comments below in\n    // registerPropertyOnType about the bootstrapping process.\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n  }\n",
        "begin_line": 246,
        "end_line": 559,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)",
        "snippet": "  public JSTypeRegistry(\n      ErrorReporter reporter, boolean tolerateUndefinedValues) {\n    this.reporter = reporter;\n    nativeTypes = new JSType[JSTypeNative.values().length];\n    namesToTypes = new HashMap<String, JSType>();\n    resetForTypeCheck();\n    this.tolerateUndefinedValues = tolerateUndefinedValues;\n  }\n",
        "begin_line": 205,
        "end_line": 212,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.resetForTypeCheck#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
        "snippet": "  public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    eachRefTypeIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }\n",
        "begin_line": 237,
        "end_line": 244,
        "comment": "\n   * Reset to run the TypeCheck pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.initializeRegistry#561",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
        "snippet": "  private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }\n",
        "begin_line": 561,
        "end_line": 585,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.register#587",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void register(JSType type) {\n    register(type, type.toString());\n  }\n",
        "begin_line": 587,
        "end_line": 589,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.register#591",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  private void register(JSType type, String name) {\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf('.') > 0) {\n      name = name.substring(0, name.lastIndexOf('.'));\n      namespaces.add(name);\n    }\n  }\n",
        "begin_line": 591,
        "end_line": 599,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.registerNativeType#601",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] = type;\n  }\n",
        "begin_line": 601,
        "end_line": 603,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.registerPropertyOnType#617",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);\n    if (typeSet == null) {\n      typeSet = new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n      typesIndexedByProperty.put(propertyName, typeSet);\n    }\n\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n\n    // Clear cached values that depend on typesIndexedByProperty.\n    greatestSubtypeByProperty.remove(propertyName);\n  }\n",
        "begin_line": 617,
        "end_line": 629,
        "comment": "\n   * Tells the type system that {@code owner} may have a property named\n   * {@code propertyName}. This allows the registry to keep track of what\n   * types a property is defined upon.\n   *\n   * This is NOT the same as saying that {@code owner} must have a property\n   * named type. ObjectType#hasProperty attempts to minimize false positives\n   * (\"if we're not sure, then don't type check this property\"). The type\n   * registry, on the other hand, should attempt to minimize false negatives\n   * (\"if this property is assigned anywhere in the program, it must\n   * show up in the type registry\").\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.addReferenceTypeIndexedByProperty#631",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.addReferenceTypeIndexedByProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void addReferenceTypeIndexedByProperty(\n      String propertyName, JSType type) {\n    if (type instanceof ObjectType && ((ObjectType) type).hasReferenceName()) {\n      Map<String, ObjectType> typeSet =\n          eachRefTypeIndexedByProperty.get(propertyName);\n      if (typeSet == null) {\n        typeSet = Maps.newHashMap();\n        eachRefTypeIndexedByProperty.put(propertyName, typeSet);\n      }\n      ObjectType objType = (ObjectType) type;\n      typeSet.put(objType.getReferenceName(), objType);\n    } else if (type instanceof NamedType) {\n      addReferenceTypeIndexedByProperty(\n          propertyName, ((NamedType) type).getReferencedType());\n    } else if (type.isUnionType()) {\n      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n        addReferenceTypeIndexedByProperty(propertyName, alternate);\n      }\n    }\n  }\n",
        "begin_line": 631,
        "end_line": 650,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.getNativeType#874",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }\n",
        "begin_line": 874,
        "end_line": 876,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.getNativeObjectType#878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }\n",
        "begin_line": 878,
        "end_line": 880,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.getNativeFunctionType#882",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }\n",
        "begin_line": 882,
        "end_line": 884,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createOptionalType#955",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }\n",
        "begin_line": 955,
        "end_line": 961,
        "comment": "\n   * Creates a type representing optional values of the given type.\n   * @return the union of the type and the void type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createUnionType#993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }\n",
        "begin_line": 993,
        "end_line": 999,
        "comment": "\n   * Creates a union type whose variants are the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createArrowType#1029",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType createArrowType(Node parametersNode, JSType returnType) {\n    return new ArrowType(this, parametersNode, returnType);\n  }\n",
        "begin_line": 1029,
        "end_line": 1031,
        "comment": "\n   * Creates an arrow type, an abstract representation of the parameters\n   * and return value of a function.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   * @param returnType the function's return type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createArrowType#1039",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node)",
        "snippet": "  ArrowType createArrowType(Node parametersNode) {\n    return new ArrowType(this, parametersNode, null);\n  }\n",
        "begin_line": 1039,
        "end_line": 1041,
        "comment": "\n   * Creates an arrow type with an unknown return type.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1085",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }\n",
        "begin_line": 1085,
        "end_line": 1089,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createParametersWithVarArgs#1192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }\n",
        "begin_line": 1192,
        "end_line": 1194,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list. The last\n   * parameter type is considered a variable length argument.\n   *\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument.\n   * @return a tree hierarchy representing a typed argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createOptionalParameters#1200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }\n",
        "begin_line": 1200,
        "end_line": 1204,
        "comment": "\n   * Creates a tree hierarchy representing a typed parameter list in which\n   * every parameter is optional.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createParameters#1216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    int max = parameterTypes.length - 1;\n    for (int i = 0; i <= max; i++) {\n      if (lastVarArgs && i == max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 1216,
        "end_line": 1227,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list.\n   *\n   * @param lastVarArgs whether the last type should considered as a variable\n   *     length argument.\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument is {@code lastVarArgs} is\n   *     {@code true}.\n   * @return a tree hierarchy representing a typed argument list\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }\n",
        "begin_line": 1236,
        "end_line": 1243,
        "comment": "\n   * Creates a function type.\n   * @param returnType the function's return type\n   * @param lastVarArgs whether the last parameter type should be considered as\n   * an extensible var_args parameter\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionType createFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .build();\n  }\n",
        "begin_line": 1279,
        "end_line": 1285,
        "comment": "\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.JSType#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  JSType(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.getNativeType#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n   * Utility method for less verbose code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isNoType#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
        "snippet": "  public boolean isNoType() {\n    return false;\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isNoResolvedType#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoResolvedType()",
        "snippet": "  public boolean isNoResolvedType() {\n    return false;\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isNoObjectType#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
        "snippet": "  public boolean isNoObjectType() {\n    return false;\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isEmptyType#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
        "snippet": "  public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n  }\n",
        "begin_line": 156,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isAllType#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
        "snippet": "  public boolean isAllType() {\n    return false;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isUnknownType#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
        "snippet": "  public boolean isUnknownType() {\n    return false;\n  }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isUnionType#245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnionType()",
        "snippet": "  public final boolean isUnionType() {\n    return toMaybeUnionType() != null;\n  }\n",
        "begin_line": 245,
        "end_line": 247,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.toMaybeUnionType#254",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeUnionType()",
        "snippet": "  public UnionType toMaybeUnionType() {\n    return null;\n  }\n",
        "begin_line": 254,
        "end_line": 256,
        "comment": "\n   * Downcasts this to a UnionType, or returns null if this is not a UnionType.\n   *\n   * Named in honor of Haskell's Maybe type constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isFunctionType#264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isFunctionType()",
        "snippet": "  public final boolean isFunctionType() {\n    return toMaybeFunctionType() != null;\n  }\n",
        "begin_line": 264,
        "end_line": 266,
        "comment": " Returns true if toMaybeFunctionType returns a non-null FunctionType. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.toMaybeFunctionType#280",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType()",
        "snippet": "  public FunctionType toMaybeFunctionType() {\n    return null;\n  }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "\n   * Downcasts this to a FunctionType, or returns null if this is not\n   * a function.\n   *\n   * For the purposes of this function, we define a MaybeFunctionType as any\n   * type in the sub-lattice\n   * { x | LEAST_FUNCTION_TYPE <= x <= GREATEST_FUNCTION_TYPE }\n   * This definition excludes bottom types like NoType and NoObjectType.\n   *\n   * This definition is somewhat arbitrary and axiomatic, but this is the\n   * definition that makes the most sense for the most callers.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isRecordType#317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isRecordType()",
        "snippet": "  public boolean isRecordType() {\n    return toMaybeRecordType() != null;\n  }\n",
        "begin_line": 317,
        "end_line": 319,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.toMaybeRecordType#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeRecordType()",
        "snippet": "  RecordType toMaybeRecordType() {\n    return null;\n  }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "\n   * Downcasts this to a RecordType, or returns null if this is not\n   * a RecordType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isEquivalentTo#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isEquivalentTo(JSType jsType) {\n    if (jsType instanceof ProxyObjectType) {\n      return jsType.isEquivalentTo(this);\n    }\n    // Relies on the fact that for the base {@link JSType}, only one\n    // instance of each sub-type will ever be created in a given registry, so\n    // there is no need to verify members. If the object pointers are not\n    // identical, then the type member must be different.\n    return this == jsType;\n  }\n",
        "begin_line": 408,
        "end_line": 417,
        "comment": "\n   * Checks if two types are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.hashCode#430",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 430,
        "end_line": 433,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.toObjectType#554",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toObjectType()",
        "snippet": "  public ObjectType toObjectType() {\n    return this instanceof ObjectType ? (ObjectType) this : null;\n  }\n",
        "begin_line": 554,
        "end_line": 556,
        "comment": "\n   * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n   *\n   * Does not change the underlying JS type. If you want to simulate JS\n   * autoboxing or dereferencing, you should use autoboxesTo() or dereference().\n   * Those methods may change the underlying JS type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isSubtype#989",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n  }\n",
        "begin_line": 989,
        "end_line": 991,
        "comment": "\n   * Checks whether {@code this} is a subtype of {@code that}.<p>\n   *\n   * Subtyping rules:\n   * <ul>\n   * <li>(unknown) &mdash; every type is a subtype of the Unknown type.</li>\n   * <li>(no) &mdash; the No type is a subtype of every type.</li>\n   * <li>(no-object) &mdash; the NoObject type is a subtype of every object\n   * type (i.e. subtypes of the Object type).</li>\n   * <li>(ref) &mdash; a type is a subtype of itself.</li>\n   * <li>(union-l) &mdash; A union type is a subtype of a type U if all the\n   * union type's constituents are a subtype of U. Formally<br>\n   * {@code (T<sub>1</sub>, &hellip;, T<sub>n</sub>) &lt;: U} if and only\n   * {@code T<sub>k</sub> &lt;: U} for all {@code k &isin; 1..n}.</li>\n   * <li>(union-r) &mdash; A type U is a subtype of a union type if it is a\n   * subtype of one of the union type's constituents. Formally<br>\n   * {@code U &lt;: (T<sub>1</sub>, &hellip;, T<sub>n</sub>)} if and only\n   * if {@code U &lt;: T<sub>k</sub>} for some index {@code k}.</li>\n   * <li>(objects) &mdash; an Object {@code O<sub>1</sub>} is a subtype\n   * of an object {@code O<sub>2</sub>} if it has more properties\n   * than {@code O<sub>2</sub>} and all common properties are\n   * pairwise subtypes.</li>\n   * </ul>\n   *\n   * @return {@code this &lt;: that}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isSubtypeHelper#1014",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // equality\n    if (thisType.isEquivalentTo(thatType)) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // unions\n    if (thatType.isUnionType()) {\n      UnionType union = thatType.toMaybeUnionType();\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n    }\n    // proxy types\n    if (thatType instanceof ProxyObjectType) {\n      return thisType.isSubtype(\n          ((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n  }\n",
        "begin_line": 1014,
        "end_line": 1042,
        "comment": "\n   * A generic implementation meant to be used as a helper for common subtyping\n   * cases.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.toString#1147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toStringHelper(false);\n  }\n",
        "begin_line": 1147,
        "end_line": 1150,
        "comment": "\n   * A string representation of this type, suitable for printing\n   * in warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.InstanceObjectType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean)",
        "snippet": "  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType) {\n    super(registry, null, null, isNativeType);\n    Preconditions.checkNotNull(constructor);\n    this.constructor = constructor;\n  }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.getReferenceName#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    return getConstructor().getReferenceName();\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.hasReferenceName#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return getConstructor().hasReferenceName();\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.getImplicitPrototype#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.getConstructor#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (constructor.hasReferenceName()) {\n      return constructor.getReferenceName();\n    } else {\n      return super.toStringHelper(forAnnotations);\n    }\n  }\n",
        "begin_line": 95,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.isNominalType#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
        "snippet": "  @Override\n  public boolean isNominalType() {\n    return hasReferenceName();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.isEquivalentTo#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isEquivalentTo(JSType that) {\n    if (this == that) {\n      return true;\n    } else if (this.isNominalType()) {\n      ObjectType thatObj = ObjectType.cast(that);\n      if (thatObj != null && thatObj.isNominalType()) {\n        return getReferenceName().equals(thatObj.getReferenceName());\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 156,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.hashCode#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    if (hasReferenceName()) {\n      return getReferenceName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }\n",
        "begin_line": 173,
        "end_line": 180,
        "comment": "\n   * If this is equal to a NamedType object, its hashCode must be equal\n   * to the hashCode of the NamedType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.getCtorExtendedInterfaces#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return getConstructor().getExtendedInterfaces();\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.FunctionType#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.ObjectType, java.lang.String, boolean, boolean)",
        "snippet": "  FunctionType(JSTypeRegistry registry, String name, Node source,\n      ArrowType arrowType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);\n    setPrettyPrint(true);\n\n    Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());\n    Preconditions.checkNotNull(arrowType);\n    this.source = source;\n    this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;\n    if (isConstructor) {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n    } else {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    this.call = arrowType;\n    this.templateTypeName = templateTypeName;\n  }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": " Creates an instance for a function that might be a constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.isConstructor#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
        "snippet": "  @Override\n  public boolean isConstructor() {\n    return kind == Kind.CONSTRUCTOR;\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.isInterface#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
        "snippet": "  @Override\n  public boolean isInterface() {\n    return kind == Kind.INTERFACE;\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.toMaybeFunctionType#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.toMaybeFunctionType()",
        "snippet": "  @Override\n  public FunctionType toMaybeFunctionType() {\n    return this;\n  }\n",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.getInternalArrowType#274",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInternalArrowType()",
        "snippet": "  ArrowType getInternalArrowType() {\n    return call;\n  }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": " Gets the internal arrow type. For use by subclasses only. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.getPrototype#308",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
        "snippet": "  public ObjectType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototypeSlot == null) {\n      setPrototype(\n          new PrototypeObjectType(\n              registry,\n              this.getReferenceName() + \".prototype\",\n              registry.getNativeObjectType(OBJECT_TYPE),\n              isNativeObjectType()),\n          null);\n    }\n    return (ObjectType) prototypeSlot.getType();\n  }\n",
        "begin_line": 308,
        "end_line": 320,
        "comment": "\n   * Gets the {@code prototype} property of this function type. This is\n   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#327",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    setPrototypeBasedOn(baseType, null);\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#331",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    // This is a bit weird. We need to successfully handle these\n    // two cases:\n    // Foo.prototype = new Bar();\n    // and\n    // Foo.prototype = {baz: 3};\n    // In the first case, we do not want new properties to get\n    // added to Bar. In the second case, we do want new properties\n    // to get added to the type of the anonymous object.\n    //\n    // We handle this by breaking it into two cases:\n    //\n    // In the first case, we create a new PrototypeObjectType and set\n    // its implicit prototype to the type being assigned. This ensures\n    // that Bar will not get any properties of Foo.prototype, but properties\n    // later assigned to Bar will get inherited properly.\n    //\n    // In the second case, we just use the anonymous object as the prototype.\n    if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType() ||\n        !(baseType instanceof PrototypeObjectType)) {\n\n      baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType, propertyNode);\n  }\n",
        "begin_line": 331,
        "end_line": 358,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.setPrototype#365",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.PrototypeObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n\n    PrototypeObjectType oldPrototype = prototypeSlot == null\n        ? null : (PrototypeObjectType) prototypeSlot.getType();\n    boolean replacedPrototype = oldPrototype != null;\n\n    this.prototypeSlot = new Property(\"prototype\", prototype, true,\n        propertyNode == null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n\n    if (oldPrototype != null) {\n      // Disassociating the old prototype makes this easier to debug--\n      // we don't have to worry about two prototypes running around.\n      oldPrototype.setOwnerFunction(null);\n    }\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n\n      if (isInterface()) {\n        for (ObjectType interfaceType : getExtendedInterfaces()) {\n          if (interfaceType.getConstructor() != null) {\n            interfaceType.getConstructor().addSubType(this);\n          }\n        }\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }\n",
        "begin_line": 365,
        "end_line": 408,
        "comment": "\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.getExtendedInterfaces#495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getExtendedInterfaces()",
        "snippet": "  public Iterable<ObjectType> getExtendedInterfaces() {\n    return extendedInterfaces;\n  }\n",
        "begin_line": 495,
        "end_line": 497,
        "comment": " Returns interfaces directly extended by an interface ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.getSuperClassConstructor#755",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
        "snippet": "  public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType == null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }\n",
        "begin_line": 755,
        "end_line": 762,
        "comment": "\n   * Given a constructor or an interface type, get its superclass constructor\n   * or {@code null} if none exists.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.getInstanceType#987",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
        "snippet": "  public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis;\n  }\n",
        "begin_line": 987,
        "end_line": 990,
        "comment": "\n   * Gets the type of instance of this function.\n   * @throws IllegalStateException if this function is not a constructor\n   *         (see {@link #isConstructor()}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.setInstanceType#996",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setInstanceType(ObjectType instanceType) {\n    typeOfThis = instanceType;\n  }\n",
        "begin_line": 996,
        "end_line": 998,
        "comment": "\n   * Sets the instance type. This should only be used for special\n   * native types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.hasInstanceType#1003",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
        "snippet": "  public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }\n",
        "begin_line": 1003,
        "end_line": 1005,
        "comment": "\n   * Returns whether this function type has an instance type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.addSubType#1042",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void addSubType(FunctionType subType) {\n    if (subTypes == null) {\n      subTypes = Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }\n",
        "begin_line": 1042,
        "end_line": 1047,
        "comment": " Adds a type to the list of subtypes for this type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.hasCachedValues#1079",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return prototypeSlot != null || super.hasCachedValues();\n  }\n",
        "begin_line": 1079,
        "end_line": 1082,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.FunctionParamBuilder#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.addRequiredParams#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }\n",
        "begin_line": 62,
        "end_line": 71,
        "comment": "\n   * Add parameters of the given type to the end of the param list.\n   * @return False if this is called after optional params are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.addOptionalParams#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n   * Add optional parameters of the given type to the end of the param list.\n   * @param types Types for each optional parameter. The builder will make them\n   *     undefineable.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.addVarArgs#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type = registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n   * Add variable arguments to the end of the parameter list.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.newParameter#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node newParameter(JSType type) {\n    Node paramNode = Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }\n",
        "begin_line": 122,
        "end_line": 127,
        "comment": " Add a parameter to the list with the given type.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.build#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
        "snippet": "  public Node build() {\n    return root;\n  }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.hasOptionalOrVarArgs#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
        "snippet": "  private boolean hasOptionalOrVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null &&\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }\n",
        "begin_line": 133,
        "end_line": 137,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.hasVarArgs#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
        "snippet": "  public boolean hasVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null && lastChild.isVarArgs();\n  }\n",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionBuilder.FunctionBuilder#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.FunctionBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionBuilder.withParamsNode#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withParamsNode(com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionBuilder withParamsNode(Node parametersNode) {\n    this.parametersNode = parametersNode;\n    return this;\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n   * Set the parameters of the function type with a specially-formatted node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionBuilder.withReturnType#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withReturnType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public FunctionBuilder withReturnType(JSType returnType) {\n    this.returnType = returnType;\n    return this;\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": " Set the return type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionBuilder.build#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.build()",
        "snippet": "  public FunctionType build() {\n    return new FunctionType(registry, name, sourceNode,\n        new ArrowType(registry, parametersNode, returnType, inferredReturnType),\n        typeOfThis, templateTypeName, isConstructor, isNativeType);\n  }\n",
        "begin_line": 158,
        "end_line": 162,
        "comment": " Construct a new function type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ErrorFunctionType.ErrorFunctionType#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(\n        registry, name, null,\n        registry.createArrowType(\n            registry.createOptionalParameters(\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE)),\n            null),\n        null, null, true, true);\n\n    // NOTE(nicksantos): Errors have the weird behavior in that they can\n    // be called as functions, and they will return instances of themselves.\n    // Error('x') instanceof Error => true\n    //\n    // In user-defined types, we would deal with this case by creating\n    // a NamedType with the name \"Error\" and then resolve it later.\n    //\n    // For native types, we don't really want the native types to\n    // depend on type-resolution. So we just set the return type manually\n    // at the end of construction.\n    //\n    // There's similar logic in JSTypeRegistry for Array and RegExp.\n    getInternalArrowType().returnType = getInstanceType();\n  }\n",
        "begin_line": 50,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "BooleanType.BooleanType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "BooleanType.toStringHelper#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "BooleanType.getDisplayName#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"boolean\";\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ArrowType.ArrowType#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "ArrowType.ArrowType#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n\n    this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred = returnTypeInferred;\n  }\n",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "AllType.AllType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "AllType.isAllType#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
        "snippet": "  @Override\n  public boolean isAllType() {\n    return true;\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setJSType#1812",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void setJSType(JSType jsType) {\n      this.jsType = jsType;\n  }\n",
        "begin_line": 1812,
        "end_line": 1814,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setVarArgs#1866",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
        "snippet": "  public void setVarArgs(boolean varArgs) {\n    putBooleanProp(VAR_ARGS_NAME, varArgs);\n  }\n",
        "begin_line": 1866,
        "end_line": 1868,
        "comment": "\n   * Sets whether this node is a variable length argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setOptionalArg#1884",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
        "snippet": "  public void setOptionalArg(boolean optionalArg) {\n    putBooleanProp(OPT_ARG_NAME, optionalArg);\n  }\n",
        "begin_line": 1884,
        "end_line": 1886,
        "comment": "\n   * Sets whether this node is an optional argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isVar#2356",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isVar()",
        "snippet": "  public boolean isVar() {\n    return this.getType() == Token.VAR;\n  }\n",
        "begin_line": 2356,
        "end_line": 2358,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getTypeRegistry#1102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getTypeRegistry()",
        "snippet": "  @Override\n  public JSTypeRegistry getTypeRegistry() {\n    if (typeRegistry == null) {\n      typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);\n    }\n    return typeRegistry;\n  }\n",
        "begin_line": 1102,
        "end_line": 1108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isAssignmentOp#1436",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isAssignmentOp(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isAssignmentOp(Node n) {\n    switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 1436,
        "end_line": 1453,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0626
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.getInputId#2859",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getInputId(com.google.javascript.rhino.Node)",
        "snippet": "  public static InputId getInputId(Node n) {\n    while (n != null && !n.isScript()) {\n      n = n.getParent();\n    }\n\n    return (n != null && n.isScript()) ? n.getInputId() : null;\n  }\n",
        "begin_line": 2859,
        "end_line": 2865,
        "comment": "\n   * @param n The node.\n   * @return The InputId property on the node or its ancestors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0626
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isName#2276",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isName()",
        "snippet": "  public boolean isName() {\n    return this.getType() == Token.NAME;\n  }\n",
        "begin_line": 2276,
        "end_line": 2278,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0626
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.shouldTraverse#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }\n",
        "begin_line": 130,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0626
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroupWarningsGuard.enables#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup otherGroup) {\n    if (level.isOn()) {\n      for (DiagnosticType type : otherGroup.getTypes()) {\n        if (group.matches(type)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0626
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setWarningLevel#1027",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n  }\n",
        "begin_line": 1027,
        "end_line": 1029,
        "comment": "\n   * Configure the given type of warning to the given level.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0625
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.addWarningsGuard#1053",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.addWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  public void addWarningsGuard(WarningsGuard guard) {\n    warningsGuard.addGuard(guard);\n  }\n",
        "begin_line": 1053,
        "end_line": 1055,
        "comment": "\n   * Add a guard to the set of warnings guards.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0625
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.parseInputs#1200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseInputs()",
        "snippet": "  Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main js sources.\n    jsRoot = IR.block();\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot = IR.block();\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot = IR.block(externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n      // Parse externs sources.\n      for (CompilerInput input : externs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      // Modules inferred in ProcessCommonJS pass.\n      if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n        processAMDAndCommonJSModules();\n      }\n\n      // Check if the sources need to be re-ordered.\n      if (options.dependencyOptions.needsManagement()) {\n        for (CompilerInput input : inputs) {\n          input.setCompiler(this);\n\n          // Forward-declare all the provided types, so that they\n          // are not flagged even if they are dropped from the process.\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n        try {\n          inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n\n          // If in IDE mode, we ignore the error and keep going.\n          if (hasErrors()) {\n            return null;\n          }\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n\n          // If in IDE mode, we ignore the error and keep going.\n          if (hasErrors()) {\n            return null;\n          }\n        }\n      }\n\n      // Check if inputs need to be rebuilt from modules.\n      boolean staleInputs = false;\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n\n        // Inputs can have a null AST during initial parse.\n        if (n == null) {\n          continue;\n        }\n\n        if (n.getJSDocInfo() != null) {\n          JSDocInfo info = n.getJSDocInfo();\n          if (info.isExterns()) {\n            // If the input file is explicitly marked as an externs file, then\n            // assume the programmer made a mistake and throw it into\n            // the externs pile anyways.\n            externsRoot.addChildToBack(n);\n            input.setIsExtern(true);\n\n            input.getModule().remove(input);\n\n            externs.add(input);\n            staleInputs = true;\n          } else if (info.isNoCompile()) {\n            input.getModule().remove(input);\n            staleInputs = true;\n          }\n        }\n      }\n\n      if (staleInputs) {\n        fillEmptyModules(modules);\n        rebuildInputsFromModules();\n      }\n\n      // Build the AST.\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      if (hasErrors()) {\n        return null;\n      }\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }\n",
        "begin_line": 1200,
        "end_line": 1350,
        "comment": "\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0625
        },
        "num_failing_tests": 2
    },
    {
        "name": "SimpleDefinitionFinder.getSimplifiedName#135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSimplifiedName(Node node) {\n    if (node.isName()) {\n      String name = node.getString();\n      if (name != null && !name.isEmpty()) {\n        return name;\n      } else {\n        return null;\n      }\n    } else if (node.isGetProp()) {\n      return \"this.\" + node.getLastChild().getString();\n    }\n    return null;\n  }\n",
        "begin_line": 135,
        "end_line": 147,
        "comment": "\n   * Extract a name from a node.  In the case of GETPROP nodes,\n   * replace the namespace or object expression with \"this\" for\n   * simplicity and correctness at the expense of inefficiencies due\n   * to higher chances of name collisions.\n   *\n   * TODO(user) revisit.  it would be helpful to at least use fully\n   * qualified names in the case of namespaces.  Might not matter as\n   * much if this pass runs after \"collapsing properties\".\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0625
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getLastChild#543",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastChild()",
        "snippet": "  public Node getLastChild() {\n    return last;\n  }\n",
        "begin_line": 543,
        "end_line": 545,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0624
        },
        "num_failing_tests": 2
    },
    {
        "name": "SimpleDefinitionFinder.getDefinitionsReferencedAt#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.getDefinitionsReferencedAt(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public Collection<Definition> getDefinitionsReferencedAt(Node useSite) {\n    if (definitionSiteMap.containsKey(useSite)) {\n      return null;\n    }\n\n    if (useSite.isGetProp()) {\n      String propName = useSite.getLastChild().getString();\n      if (propName.equals(\"apply\") || propName.equals(\"call\")) {\n        useSite = useSite.getFirstChild();\n      }\n    }\n\n    String name = getSimplifiedName(useSite);\n    if (name != null) {\n      Collection<Definition> defs = nameDefinitionMultimap.get(name);\n      if (!defs.isEmpty()) {\n        return defs;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 76,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0623
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initModules#330",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initModules(java.util.List<com.google.javascript.jscomp.JSSourceFile>, java.util.List<com.google.javascript.jscomp.JSModule>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options) {\n    initOptions(options);\n\n    checkFirstModule(modules);\n    fillEmptyModules(modules);\n\n    this.externs = makeCompilerInput(externs, true);\n\n    // Generate the module graph, and report any errors in the module\n    // specification as errors.\n    this.modules = modules;\n    if (modules.size() > 1) {\n      try {\n        this.moduleGraph = new JSModuleGraph(modules);\n      } catch (JSModuleGraph.ModuleDependenceException e) {\n        // problems with the module format.  Report as an error.  The\n        // message gives all details.\n        report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));\n        return;\n      }\n    } else {\n      this.moduleGraph = null;\n    }\n\n    this.inputs = getAllInputsFromModules(modules);\n    initBasedOnOptions();\n\n    initInputsByIdMap();\n  }\n",
        "begin_line": 330,
        "end_line": 361,
        "comment": "\n   * Initializes the instance state needed for a compile job if the sources\n   * are in modules.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0622
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getErrorCount#1978",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorManager.getErrorCount();\n  }\n",
        "begin_line": 1978,
        "end_line": 1980,
        "comment": "\n   * Gets the number of errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0622
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.extractCharno#1203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractCharno(int)",
        "snippet": "  protected static int extractCharno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo & COLUMN_MASK;\n    }\n  }\n",
        "begin_line": 1203,
        "end_line": 1209,
        "comment": "\n   * Extracts the character number and character number from a merged line\n   * char number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isString#2328",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isString()",
        "snippet": "  public boolean isString() {\n    return this.getType() == Token.STRING;\n  }\n",
        "begin_line": 2328,
        "end_line": 2330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "ParserRunner.createConfig#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean, java.util.Set<java.lang.String>)",
        "snippet": "  public static Config createConfig(boolean isIdeMode,\n                                    LanguageMode languageMode,\n                                    boolean acceptConstKeyword,\n                                    Set<String> extraAnnotationNames) {\n    initResourceConfig();\n    Set<String> effectiveAnnotationNames;\n    if (extraAnnotationNames == null) {\n      effectiveAnnotationNames = annotationNames;\n    } else {\n      effectiveAnnotationNames = new HashSet<String>(annotationNames);\n      effectiveAnnotationNames.addAll(extraAnnotationNames);\n    }\n    return new Config(effectiveAnnotationNames, suppressionNames,\n        isIdeMode, languageMode, acceptConstKeyword);\n  }\n",
        "begin_line": 60,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.transformAsString#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.transformAsString(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "    private Node transformAsString(AstNode n) {\n      Node ret;\n      if (n instanceof Name) {\n        ret = transformNameAsString((Name)n);\n      } else if (n instanceof NumberLiteral) {\n        ret = transformNumberAsString((NumberLiteral)n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      } else {\n        ret = transform(n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      }\n      Preconditions.checkState(ret.isString());\n      return ret;\n    }\n",
        "begin_line": 398,
        "end_line": 411,
        "comment": "\n     * Transforms the given node and then sets its type to Token.STRING if it\n     * was Token.NAME. If its type was already Token.STRING, then quotes it.\n     * Used for properties, as the old AST uses String tokens, while the new one\n     * uses Name tokens for unquoted strings. For example, in\n     * var o = {'a' : 1, b: 2};\n     * the string 'a' is quoted, while the name b is turned into a string, but\n     * unquoted.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processExpressionStatement#559",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement)",
        "snippet": "    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n",
        "begin_line": 559,
        "end_line": 564,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processName#735",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.rhino.head.ast.Name, boolean)",
        "snippet": "    Node processName(Name nameNode, boolean asString) {\n      if (asString) {\n        return newStringNode(Token.STRING, nameNode.getIdentifier());\n      } else {\n        if (isReservedKeyword(nameNode.getIdentifier())) {\n          errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);\n        }\n        return newStringNode(Token.NAME, nameNode.getIdentifier());\n      }\n    }\n",
        "begin_line": 735,
        "end_line": 747,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processPropertyGet#827",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet)",
        "snippet": "    @Override\n    Node processPropertyGet(PropertyGet getNode) {\n      Node leftChild = transform(getNode.getTarget());\n      Node newNode = newNode(\n          Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));\n      newNode.setLineno(leftChild.getLineno());\n      newNode.setCharno(leftChild.getCharno());\n      maybeSetLengthFrom(newNode, getNode);\n      return newNode;\n    }\n",
        "begin_line": 827,
        "end_line": 836,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.transformNameAsString#281",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformNameAsString(com.google.javascript.rhino.head.ast.Name)",
        "snippet": "  private Node transformNameAsString(Name node) {\n    Node irNode = transformDispatcher.processName(node, true);\n    JSDocInfo jsDocInfo = handleJsDoc(node, irNode);\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 281,
        "end_line": 289,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.newNode#1299",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1, Node child2) {\n    return new Node(type, child1, child2).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1299,
        "end_line": 1301,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.StringNode#195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String)",
        "snippet": "    StringNode(int type, String str) {\n      super(type);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 195,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getString#215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.getString()",
        "snippet": "    @Override\n    public String getString() {\n      return this.str;\n    }\n",
        "begin_line": 215,
        "end_line": 218,
        "comment": "\n     * returns the string content.\n     * @return non null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.ObjectPropListItem#302",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.ObjectPropListItem(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    ObjectPropListItem(int propType, Object objectValue, PropListItem next) {\n      super(propType, next);\n      this.objectValue = objectValue;\n    }\n",
        "begin_line": 302,
        "end_line": 305,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getObjectValue#312",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.getObjectValue()",
        "snippet": "    @Override\n    public Object getObjectValue() {\n      return objectValue;\n    }\n",
        "begin_line": 312,
        "end_line": 315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.IntPropListItem#334",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.IntPropListItem(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    IntPropListItem(int propType, int intValue, PropListItem next) {\n      super(propType, next);\n      this.intValue = intValue;\n    }\n",
        "begin_line": 334,
        "end_line": 337,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.chain#354",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.chain(com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    @Override\n    public PropListItem chain(PropListItem next) {\n      return new IntPropListItem(getType(), intValue, next);\n    }\n",
        "begin_line": 354,
        "end_line": 357,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.AbstractPropListItem#276",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.AbstractPropListItem(int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    AbstractPropListItem(int propType, PropListItem next) {\n      this.propType = propType;\n      this.next = next;\n    }\n",
        "begin_line": 276,
        "end_line": 279,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getType#281",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getType()",
        "snippet": "    @Override\n    public int getType() {\n      return propType;\n    }\n",
        "begin_line": 281,
        "end_line": 284,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getNext#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getNext()",
        "snippet": "    @Override\n    public PropListItem getNext() {\n      return next;\n    }\n",
        "begin_line": 286,
        "end_line": 289,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.Node#360",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int)",
        "snippet": "  public Node(int nodeType) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 360,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.Node#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node left, Node right) {\n    Preconditions.checkArgument(left.parent == null,\n        \"first new child has existing parent\");\n    Preconditions.checkArgument(left.next == null,\n        \"first new child has existing sibling\");\n    Preconditions.checkArgument(right.parent == null,\n        \"second new child has existing parent\");\n    Preconditions.checkArgument(right.next == null,\n        \"second new child has existing sibling\");\n    type = nodeType;\n    parent = null;\n    first = left;\n    last = right;\n    left.next = right;\n    left.parent = this;\n    right.next = null;\n    right.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 380,
        "end_line": 398,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.newString#515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
        "snippet": "  public static Node newString(int type, String str) {\n    return new StringNode(type, str);\n  }\n",
        "begin_line": 515,
        "end_line": 517,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getType#527",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getType()",
        "snippet": "  public int getType() {\n    return type;\n  }\n",
        "begin_line": 527,
        "end_line": 529,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getFirstChild#539",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getFirstChild()",
        "snippet": "  public Node getFirstChild() {\n    return first;\n  }\n",
        "begin_line": 539,
        "end_line": 541,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getNext#547",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNext()",
        "snippet": "  public Node getNext() {\n    return next;\n  }\n",
        "begin_line": 547,
        "end_line": 549,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.addChildToBack#607",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildToBack(Node child) {\n    Preconditions.checkArgument(child.parent == null);\n    Preconditions.checkArgument(child.next == null);\n    child.parent = this;\n    child.next = null;\n    if (last == null) {\n      first = last = child;\n      return;\n    }\n    last.next = child;\n    last = child;\n  }\n",
        "begin_line": 607,
        "end_line": 618,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.lookupProperty#745",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.lookupProperty(int)",
        "snippet": "  @VisibleForTesting\n  PropListItem lookupProperty(int propType) {\n    PropListItem x = propListHead;\n    while (x != null && propType != x.getType()) {\n      x = x.getNext();\n    }\n    return x;\n  }\n",
        "begin_line": 745,
        "end_line": 752,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.clonePropsFrom#761",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.clonePropsFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node clonePropsFrom(Node other) {\n    Preconditions.checkState(this.propListHead == null,\n        \"Node has existing properties.\");\n    this.propListHead = other.propListHead;\n    return this;\n  }\n",
        "begin_line": 761,
        "end_line": 766,
        "comment": "\n   * Clone the properties from the provided node without copying\n   * the property object.  The recieving node may not have any\n   * existing properties.\n   * @param other The node to clone properties from.\n   * @return this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.removeProp#768",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(int)",
        "snippet": "  public void removeProp(int propType) {\n    PropListItem result = removeProp(propListHead, propType);\n    if (result != propListHead) {\n      propListHead = result;\n    }\n  }\n",
        "begin_line": 768,
        "end_line": 773,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.removeProp#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(com.google.javascript.rhino.Node.PropListItem, int)",
        "snippet": "  private PropListItem removeProp(PropListItem item, int propType) {\n    if (item == null) {\n      return null;\n    } else if (item.getType() == propType) {\n      return item.getNext();\n    } else {\n      PropListItem result = removeProp(item.getNext(), propType);\n      if (result != item.getNext()) {\n        return item.chain(result);\n      } else {\n        return item;\n      }\n    }\n  }\n",
        "begin_line": 781,
        "end_line": 794,
        "comment": "\n   * @param item The item to inspect\n   * @param propType The property to look for\n   * @return The replacement list if the property was removed, or\n   *   'item' otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getProp#796",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getProp(int)",
        "snippet": "  public Object getProp(int propType) {\n    if (propType == SOURCENAME_PROP) {\n      return getSourceFileName();\n    }\n\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return null;\n    }\n    return item.getObjectValue();\n  }\n",
        "begin_line": 796,
        "end_line": 806,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.putProp#832",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putProp(int, java.lang.Object)",
        "snippet": "  public void putProp(int propType, Object value) {\n    if (propType == SOURCENAME_PROP) {\n      putProp(\n          STATIC_SOURCE_FILE, new SimpleSourceFile((String) value, false));\n      return;\n    }\n\n    removeProp(propType);\n    if (value != null) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 832,
        "end_line": 843,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.putBooleanProp#845",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
        "snippet": "  public void putBooleanProp(int propType, boolean value) {\n    putIntProp(propType, value ? 1 : 0);\n  }\n",
        "begin_line": 845,
        "end_line": 847,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.putIntProp#849",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
        "snippet": "  public void putIntProp(int propType, int value) {\n    removeProp(propType);\n    if (value != 0) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 849,
        "end_line": 854,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.createProp#856",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, Object value, PropListItem next) {\n    return new ObjectPropListItem(propType, value, next);\n  }\n",
        "begin_line": 856,
        "end_line": 858,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.createProp#860",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, int value, PropListItem next) {\n    return new IntPropListItem(propType, value, next);\n  }\n",
        "begin_line": 860,
        "end_line": 862,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setStaticSourceFile#1081",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile)",
        "snippet": "  public void setStaticSourceFile(StaticSourceFile file) {\n    this.putProp(STATIC_SOURCE_FILE, file);\n  }\n",
        "begin_line": 1081,
        "end_line": 1083,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getSourceFileName#1090",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSourceFileName()",
        "snippet": "  public String getSourceFileName() {\n    StaticSourceFile file = getStaticSourceFile();\n    return file == null ? null : file.getName();\n  }\n",
        "begin_line": 1090,
        "end_line": 1093,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getStaticSourceFile#1096",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getStaticSourceFile()",
        "snippet": "  public StaticSourceFile getStaticSourceFile() {\n    return ((StaticSourceFile) this.getProp(STATIC_SOURCE_FILE));\n  }\n",
        "begin_line": 1096,
        "end_line": 1098,
        "comment": " Returns the source file associated with this input. May be null ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setInputId#1103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setInputId(com.google.javascript.rhino.InputId)",
        "snippet": "  public void setInputId(InputId inputId) {\n    this.putProp(INPUT_ID, inputId);\n  }\n",
        "begin_line": 1103,
        "end_line": 1105,
        "comment": "\n   * @param inputId\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getInputId#1110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getInputId()",
        "snippet": "  public InputId getInputId() {\n    return ((InputId) this.getProp(INPUT_ID));\n  }\n",
        "begin_line": 1110,
        "end_line": 1112,
        "comment": "\n   * @return The Id of the CompilerInput associated with this Node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getLineno#1127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLineno()",
        "snippet": "  public int getLineno() {\n    return extractLineno(sourcePosition);\n  }\n",
        "begin_line": 1127,
        "end_line": 1129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getCharno#1131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getCharno()",
        "snippet": "  public int getCharno() {\n    return extractCharno(sourcePosition);\n  }\n",
        "begin_line": 1131,
        "end_line": 1133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setLineno#1146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLineno(int)",
        "snippet": "  public void setLineno(int lineno) {\n      int charno = getCharno();\n      if (charno == -1) {\n        charno = 0;\n      }\n      sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 1146,
        "end_line": 1152,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setCharno#1154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setCharno(int)",
        "snippet": "  public void setCharno(int charno) {\n      sourcePosition = mergeLineCharNo(getLineno(), charno);\n  }\n",
        "begin_line": 1154,
        "end_line": 1156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.extractLineno#1191",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractLineno(int)",
        "snippet": "  protected static int extractLineno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo >>> COLUMN_BITS;\n    }\n  }\n",
        "begin_line": 1191,
        "end_line": 1197,
        "comment": "\n   * Extracts the line number and character number from a merged line char\n   * number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getParent#1305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getParent()",
        "snippet": "  public Node getParent() {\n    return parent;\n  }\n",
        "begin_line": 1305,
        "end_line": 1307,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getChildCount#1387",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildCount()",
        "snippet": "  public int getChildCount() {\n    int c = 0;\n    for (Node n = first; n != null; n = n.next)\n      c++;\n\n    return c;\n  }\n",
        "begin_line": 1387,
        "end_line": 1393,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getJsDocBuilderForNode#1816",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJsDocBuilderForNode()",
        "snippet": "  public FileLevelJsDocBuilder getJsDocBuilderForNode() {\n    return new FileLevelJsDocBuilder();\n  }\n",
        "begin_line": 1816,
        "end_line": 1818,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getJSDocInfo#1850",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSDocInfo()",
        "snippet": "  public JSDocInfo getJSDocInfo() {\n    return (JSDocInfo) getProp(JSDOC_INFO_PROP);\n  }\n",
        "begin_line": 1850,
        "end_line": 1852,
        "comment": "\n   * Get the {@link JSDocInfo} attached to this node.\n   * @return the information or {@code null} if no JSDoc is attached to this\n   * node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setIsSyntheticBlock#1901",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setIsSyntheticBlock(boolean)",
        "snippet": "  public void setIsSyntheticBlock(boolean val) {\n    putBooleanProp(SYNTHETIC_BLOCK_PROP, val);\n  }\n",
        "begin_line": 1901,
        "end_line": 1903,
        "comment": "\n   * Sets whether this is a synthetic block that should not be considered\n   * a real source block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isAssign#2160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isAssign()",
        "snippet": "  public boolean isAssign() {\n    return this.getType() == Token.ASSIGN;\n  }\n",
        "begin_line": 2160,
        "end_line": 2162,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isBlock#2168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isBlock()",
        "snippet": "  public boolean isBlock() {\n    return this.getType() == Token.BLOCK;\n  }\n",
        "begin_line": 2168,
        "end_line": 2170,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isFunction#2232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isFunction()",
        "snippet": "  public boolean isFunction() {\n    return this.getType() == Token.FUNCTION;\n  }\n",
        "begin_line": 2232,
        "end_line": 2234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isObjectLit#2300",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isObjectLit()",
        "snippet": "  public boolean isObjectLit() {\n    return this.getType() == Token.OBJECTLIT;\n  }\n",
        "begin_line": 2300,
        "end_line": 2302,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isScript#2320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isScript()",
        "snippet": "  public boolean isScript() {\n    return this.getType() == Token.SCRIPT;\n  }\n",
        "begin_line": 2320,
        "end_line": 2322,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "InputId.InputId#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.InputId(java.lang.String)",
        "snippet": "  public InputId(String id) {\n    this.id = id;\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "InputId.getIdName#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.getIdName()",
        "snippet": "  public String getIdName() {\n    return id;\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "InputId.hashCode#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return id.hashCode();\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.block#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block()",
        "snippet": "  public static Node block() {\n    Node block = new Node(Token.BLOCK);\n    return block;\n  }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.block#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block(com.google.javascript.rhino.Node...)",
        "snippet": "  public static Node block(Node ... stmts) {\n    Node block = new Node(Token.BLOCK);\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatement(stmt));\n      block.addChildToBack(stmt);\n    }\n    return block;\n  }\n",
        "begin_line": 102,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.mayBeStatement#466",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.mayBeStatement(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean mayBeStatement(Node n) {\n    switch (n.getType()) {\n      case Token.EMPTY:\n      case Token.FUNCTION:\n        // EMPTY and FUNCTION are used both in expression and statement\n        // contexts\n        return true;\n\n      case Token.BLOCK:\n      case Token.BREAK:\n      case Token.CONST:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.DO:\n      case Token.EXPR_RESULT:\n      case Token.FOR:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.RETURN:\n      case Token.SWITCH:\n      case Token.THROW:\n      case Token.TRY:\n      case Token.VAR:\n      case Token.WHILE:\n      case Token.WITH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 466,
        "end_line": 496,
        "comment": "\n   * It isn't possible to always determine if a detached node is a expression,\n   * so make a best guess.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "ParserRunner.initResourceConfig#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.initResourceConfig()",
        "snippet": "  private static synchronized void initResourceConfig() {\n    if (annotationNames != null) {\n      return;\n    }\n\n    ResourceBundle config = ResourceBundle.getBundle(configResource);\n    annotationNames = extractList(config.getString(\"jsdoc.annotations\"));\n    suppressionNames = extractList(config.getString(\"jsdoc.suppressions\"));\n  }\n",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "ParserRunner.extractList#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.extractList(java.lang.String)",
        "snippet": "  private static Set<String> extractList(String configProp) {\n    String[] names = configProp.split(\",\");\n    Set<String> trimmedNames = Sets.newHashSet();\n    for (String name : names) {\n      trimmedNames.add(name.trim());\n    }\n    return ImmutableSet.copyOf(trimmedNames);\n  }\n",
        "begin_line": 86,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "ParserRunner.parse#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.parse(com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter, java.util.logging.Logger)",
        "snippet": "  public static Node parse(StaticSourceFile sourceFile,\n                           String sourceString,\n                           Config config,\n                           ErrorReporter errorReporter,\n                           Logger logger) throws IOException {\n    Context cx = Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv = new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n\n    // ES5 specifically allows trailing commas\n    compilerEnv.setWarnTrailingComma(\n        config.languageMode == LanguageMode.ECMASCRIPT3);\n\n    // Do our own identifier check for ECMASCRIPT 5\n    boolean acceptEs5 =\n        config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n    compilerEnv.setAllowKeywordAsObjectPropertyName(acceptEs5);\n\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n\n    Parser p = new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot = null;\n    try {\n      astRoot = p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n      logger.info(\n          \"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n      Context.exit();\n    }\n    Node root = null;\n    if (astRoot != null) {\n      root = IRFactory.transformTree(\n          astRoot, sourceFile, sourceString, config, errorReporter);\n      root.setIsSyntheticBlock(true);\n    }\n    return root;\n  }\n",
        "begin_line": 104,
        "end_line": 148,
        "comment": "\n   * Parses the JavaScript text given by a reader.\n   *\n   * @param sourceString Source code from the file.\n   * @param errorReporter An error.\n   * @param logger A logger.\n   * @return The AST of the given text.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processAstRoot#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAstRoot(com.google.javascript.rhino.head.ast.AstRoot)",
        "snippet": "    @Override\n    Node processAstRoot(AstRoot rootNode) {\n      Node node = newNode(Token.SCRIPT);\n      for (com.google.javascript.rhino.head.Node child : rootNode) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      parseDirectives(node);\n      return node;\n    }\n",
        "begin_line": 440,
        "end_line": 448,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.parseDirectives#459",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.parseDirectives(com.google.javascript.rhino.Node)",
        "snippet": "    private void parseDirectives(Node node) {\n      // Remove all the directives, and encode them in the AST.\n      Set<String> directives = null;\n      while (isDirective(node.getFirstChild())) {\n        String directive = node.removeFirstChild().getFirstChild().getString();\n        if (directives == null) {\n          directives = Sets.newHashSet(directive);\n        } else {\n          directives.add(directive);\n        }\n      }\n\n      if (directives != null) {\n        node.setDirectives(directives);\n      }\n    }\n",
        "begin_line": 459,
        "end_line": 474,
        "comment": "\n     * Parse the directives, encode them in the AST, and remove their nodes.\n     *\n     * For information on ES5 directives, see section 14.1 of\n     * Ecma-262, Edition 5.\n     *\n     * It would be nice if Rhino would eventually take care of this for\n     * us, but right now their directive-processing is a one-off.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.isDirective#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isDirective(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n",
        "begin_line": 476,
        "end_line": 483,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processName#730",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.rhino.head.ast.Name)",
        "snippet": "    @Override\n    Node processName(Name nameNode) {\n      return processName(nameNode, false);\n    }\n",
        "begin_line": 730,
        "end_line": 733,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.isReservedKeyword#752",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isReservedKeyword(java.lang.String)",
        "snippet": "    private boolean isReservedKeyword(String identifier) {\n      return reservedKeywords != null && reservedKeywords.contains(identifier);\n    }\n",
        "begin_line": 752,
        "end_line": 754,
        "comment": "\n     * @return Whether the\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processVariableDeclaration#1021",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration)",
        "snippet": "    @Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n      if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST) {\n        processIllegalToken(declarationNode);\n      }\n\n      Node node = newNode(Token.VAR);\n      for (VariableInitializer child : declarationNode.getVariables()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }\n",
        "begin_line": 1021,
        "end_line": 1033,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.IRFactory#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.IRFactory(java.lang.String, com.google.javascript.rhino.jstype.StaticSourceFile, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter) {\n    this.sourceString = sourceString;\n    this.sourceFile = sourceFile;\n\n    // Sometimes this will be null in tests.\n    this.sourceName = sourceFile == null ? null : sourceFile.getName();\n\n    this.config = config;\n    this.errorReporter = errorReporter;\n    this.transformDispatcher = new TransformDispatcher();\n    // The template node properties are applied to all nodes in this transform.\n    this.templateNode = createTemplateNode();\n\n    switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }\n  }\n",
        "begin_line": 123,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.createTemplateNode#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createTemplateNode()",
        "snippet": "  private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode = new Node(Token.SCRIPT);\n    templateNode.setStaticSourceFile(sourceFile);\n    return templateNode;\n  }\n",
        "begin_line": 158,
        "end_line": 163,
        "comment": " This reduces the cost of these properties to O(nodes) to O(files).",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.setFileOverviewJsDoc#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setFileOverviewJsDoc(com.google.javascript.rhino.Node)",
        "snippet": "  private void setFileOverviewJsDoc(Node irNode) {\n    // Only after we've seen all @fileoverview entries, attach the\n    // last one to the root node, and copy the found license strings\n    // to that node.\n    JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();\n    if (rootNodeJsDoc != null) {\n      irNode.setJSDocInfo(rootNodeJsDoc);\n      rootNodeJsDoc.setAssociatedNode(irNode);\n    }\n\n    if (fileOverviewInfo != null) {\n      if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null)) {\n        fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n      }\n      irNode.setJSDocInfo(fileOverviewInfo);\n      fileOverviewInfo.setAssociatedNode(irNode);\n    }\n  }\n",
        "begin_line": 190,
        "end_line": 208,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.setSourceInfo#312",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setSourceInfo(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void setSourceInfo(Node irNode, AstNode node) {\n    if (irNode.getLineno() == -1) {\n      // If we didn't already set the line, then set it now. This avoids\n      // cases like ParenthesizedExpression where we just return a previous\n      // node, but don't want the new node to get its parent's line number.\n      int lineno = node.getLineno();\n      irNode.setLineno(lineno);\n      int charno = position2charno(node.getAbsolutePosition());\n      irNode.setCharno(charno);\n      maybeSetLengthFrom(irNode, node);\n    }\n  }\n",
        "begin_line": 312,
        "end_line": 323,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.maybeSetLengthFrom#359",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.maybeSetLengthFrom(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void maybeSetLengthFrom(Node node, AstNode source) {\n    if (config.isIdeMode) {\n      node.setLength(source.getLength());\n    }\n  }\n",
        "begin_line": 359,
        "end_line": 363,
        "comment": " Set the length on the node if we're in IDE mode.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.position2charno#365",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.position2charno(int)",
        "snippet": "  private int position2charno(int position) {\n    int lineIndex = sourceString.lastIndexOf('\\n', position);\n    if (lineIndex == -1) {\n      return position;\n    } else {\n      // Subtract one for initial position being 0.\n      return position - lineIndex - 1;\n    }\n  }\n",
        "begin_line": 365,
        "end_line": 373,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.justTransform#375",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.justTransform(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node justTransform(AstNode node) {\n    return transformDispatcher.process(node);\n  }\n",
        "begin_line": 375,
        "end_line": 377,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.newNode#1291",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int)",
        "snippet": "  private Node newNode(int type) {\n    return new Node(type).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1291,
        "end_line": 1293,
        "comment": " Simple helper to create nodes and set the initial node properties.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.newStringNode#1311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(int, java.lang.String)",
        "snippet": "  private Node newStringNode(int type, String value) {\n    return Node.newString(type, value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1311,
        "end_line": 1313,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Config.Config#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.Config(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>, boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean)",
        "snippet": "  Config(Set<String> annotationWhitelist, Set<String> suppressionNames,\n      boolean isIdeMode, LanguageMode languageMode,\n      boolean acceptConstKeyword) {\n    this.annotationNames = buildAnnotationNames(annotationWhitelist);\n    this.parseJsDocDocumentation = isIdeMode;\n    this.suppressionNames = suppressionNames;\n    this.isIdeMode = isIdeMode;\n    this.languageMode = languageMode;\n    this.acceptConstKeyword = acceptConstKeyword;\n  }\n",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Config.buildAnnotationNames#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.buildAnnotationNames(java.util.Set<java.lang.String>)",
        "snippet": "  private static Map<String, Annotation> buildAnnotationNames(\n      Set<String> annotationWhitelist) {\n    ImmutableMap.Builder<String, Annotation> annotationBuilder =\n        ImmutableMap.builder();\n    annotationBuilder.putAll(Annotation.recognizedAnnotations);\n    for (String unrecognizedAnnotation : annotationWhitelist) {\n      if (!Annotation.recognizedAnnotations.containsKey(\n              unrecognizedAnnotation)) {\n        annotationBuilder.put(\n            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n      }\n    }\n    return annotationBuilder.build();\n  }\n",
        "begin_line": 88,
        "end_line": 101,
        "comment": "\n   * Create the annotation names from the user-specified\n   * annotation whitelist.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Tracer.isInitialized#745",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.ThreadTrace.isInitialized()",
        "snippet": "    boolean isInitialized() {\n      return isInitialized;\n    }\n",
        "begin_line": 745,
        "end_line": 747,
        "comment": " Is initialized? ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Tracer.currentTimeMillis#222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Anonymous-17805e3f-ca12-483f-8b3a-602105c5a64f.currentTimeMillis()",
        "snippet": "    @Override\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n",
        "begin_line": 222,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Tracer.Tracer#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Tracer(java.lang.String, java.lang.String)",
        "snippet": "  Tracer(@Nullable String type, @Nullable String comment) {\n    this.type = type;\n    this.comment = comment == null ? \"\" : comment;\n    startTimeMs = clock.currentTimeMillis();\n    startThread = Thread.currentThread();\n    if (!extraTracingStatistics.isEmpty()) {\n      int size = extraTracingStatistics.size();\n      extraTracingValues = new long[size];\n      int i = 0;\n      for (TracingStatistic tracingStatistic : extraTracingStatistics) {\n        extraTracingValues[i] = tracingStatistic.start(startThread);\n        i++;\n      }\n    }\n\n    ThreadTrace trace = getThreadTrace();\n\n    // Do nothing if the current thread trace wasn't initialized.\n    if (!trace.isInitialized()) {\n      return;\n    }\n\n    // Check if we are creating too many Tracers.\n    if (trace.events.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Giant thread trace. Too many Tracers created. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateEvents();\n    }\n\n    // Check if we forgot to close the Tracers.\n    if (trace.outstandingEvents.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Too many outstanding Tracers. Tracer.stop() is missing \"\n                    + \"or Tracer.stop() is not wrapped in a \"\n                    + \"try/finally block. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateOutstandingEvents();\n    }\n\n    trace.startEvent(this);\n  }\n",
        "begin_line": 235,
        "end_line": 278,
        "comment": "\n   * Create and start a tracer.\n   * Both type and comment may be null. See class comment for usage.\n   *\n   * @param type The type for totalling\n   * @param comment Comment about this tracer\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Tracer.stop#407",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop(int)",
        "snippet": "  long stop(int silence_threshold) {\n    Preconditions.checkState(Thread.currentThread() == startThread);\n\n    ThreadTrace trace = getThreadTrace();\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    stopTimeMs = clock.currentTimeMillis();\n    if (extraTracingValues != null) {\n      // We use extraTracingValues.length rather than\n      // extraTracingStatistics.size() because a new statistic may\n      // have been added\n      for (int i = 0; i < extraTracingValues.length; i++) {\n        long value = extraTracingStatistics.get(i).stop(startThread);\n        extraTracingValues[i] = value - extraTracingValues[i];\n      }\n    }\n\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    trace.endEvent(this, silence_threshold);\n    return stopTimeMs - startTimeMs;\n  }\n",
        "begin_line": 407,
        "end_line": 434,
        "comment": "\n   * Stop the trace.\n   * This may only be done once and must be done from the same thread\n   * that started it.\n   * @param silence_threshold Traces for time less than silence_threshold\n   * ms will be left out of the trace report. A value of -1 indicates\n   * that the current ThreadTrace silence_threshold should be used.\n   * @return The time that this trace actually ran\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Tracer.stop#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop()",
        "snippet": "  long stop() {\n    return stop(-1);\n  }\n",
        "begin_line": 440,
        "end_line": 442,
        "comment": " Stop the trace using the default silence_threshold\n   *\n   * @return  The time that this trace actually ran.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Tracer.getThreadTrace#958",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.getThreadTrace()",
        "snippet": "  static ThreadTrace getThreadTrace() {\n    ThreadTrace t = traces.get();\n    if (t == null) {\n      t = new ThreadTrace();\n      t.prettyPrint = defaultPrettyPrint;\n      traces.set(t);\n    }\n    return t;\n  }\n",
        "begin_line": 958,
        "end_line": 966,
        "comment": "\n   * Get the ThreadTrace for the current thread, creating one if necessary.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SyntacticScopeCreator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = new DefaultRedeclarationHandler();\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "\n   * Creates a ScopeCreator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.getCode#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return code;\n  }\n",
        "begin_line": 139,
        "end_line": 141,
        "comment": "\n   * Gets all the code in this source file.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.setIsExtern#193",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setIsExtern(boolean)",
        "snippet": "  void setIsExtern(boolean newVal) {\n    isExternFile = newVal;\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": " Sets that this is an extern. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.PrepareAnnotations#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.PrepareAnnotations(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    PrepareAnnotations(AbstractCompiler compiler) {\n      this.convention = compiler.getCodingConvention();\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.PrepareAst#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  PrepareAst(AbstractCompiler compiler) {\n    this(compiler, false);\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.PrepareAst#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  PrepareAst(AbstractCompiler compiler, boolean checkOnly) {\n    this.compiler = compiler;\n    this.checkOnly = checkOnly;\n  }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.process#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (checkOnly) {\n      normalizeNodeTypes(root);\n    } else {\n      // Don't perform \"PrepareAnnotations\" when doing checks as\n      // they currently aren't valid during sanity checks.  In particular,\n      // they DIRECT_EVAL shouldn't be applied after inlining has been\n      // performed.\n      if (externs != null) {\n        NodeTraversal.traverse(\n            compiler, externs, new PrepareAnnotations(compiler));\n      }\n      if (root != null) {\n        NodeTraversal.traverse(\n            compiler, root, new PrepareAnnotations(compiler));\n      }\n    }\n  }\n",
        "begin_line": 56,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.NodeTraversal#221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb) {\n    this(compiler, cb, new SyntacticScopeCreator(compiler));\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": "\n   * Creates a node traversal using the specified callback interface.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverse#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  public void traverse(Node root) {\n    try {\n      inputId = NodeUtil.getInputId(root);\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 271,
        "end_line": 282,
        "comment": "\n   * Traverses a parse tree recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverse#452",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }\n",
        "begin_line": 452,
        "end_line": 456,
        "comment": "\n   * Traverses a node recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getSourceName#653",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSourceName(Node n) {\n    String name = n.getSourceFileName();\n    return name == null ? \"\" : name;\n  }\n",
        "begin_line": 653,
        "end_line": 656,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsAst.JsAst#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.JsAst(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public JsAst(SourceFile sourceFile) {\n    this.inputId = new InputId(sourceFile.getName());\n    this.sourceFile = sourceFile;\n    this.fileName = sourceFile.getName();\n  }\n",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsAst.getAstRoot#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    if (root == null) {\n      parse(compiler);\n      root.setInputId(inputId);\n    }\n    return root;\n  }\n",
        "begin_line": 49,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsAst.getInputId#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return inputId;\n  }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsAst.getSourceFile#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getSourceFile()",
        "snippet": "  @Override\n  public SourceFile getSourceFile() {\n    return sourceFile;\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsAst.parse#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.parse(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private void parse(AbstractCompiler compiler) {\n    try {\n      logger_.fine(\"Parsing: \" + sourceFile.getName());\n      root = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n\n    if (root == null || compiler.hasHaltingErrors()) {\n      // There was a parse error or IOException, so use a dummy block.\n      root = IR.script();\n    } else {\n      compiler.prepareAst(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.setStaticSourceFile(sourceFile);\n  }\n",
        "begin_line": 83,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSSourceFile.getCode#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.getCode()",
        "snippet": "  @Override\n  public String getCode() throws IOException {\n    return referenced.getCode();\n  }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModule.JSModule#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.JSModule(java.lang.String)",
        "snippet": "  public JSModule(String name) {\n    this.name = name;\n    this.depth = -1;\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\n   * Creates an instance.\n   *\n   * @param name A unique name for the module\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModule.add#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.JSSourceFile)",
        "snippet": "  public void add(JSSourceFile file) {\n    add(new CompilerInput(file));\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": " Adds a source file input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModule.add#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  public void add(CompilerInput input) {\n    inputs.add(input);\n    input.setModule(this);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": " Adds a source code input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModule.getInputs#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getInputs()",
        "snippet": "  public List<CompilerInput> getInputs() {\n    return inputs;\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": "\n   * Gets this module's list of source code inputs.\n   *\n   * @return A list that may be empty but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "DependencyOptions.needsManagement#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.needsManagement()",
        "snippet": "  boolean needsManagement() {\n    return sortDependencies || pruneDependencies;\n  }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": " Returns whether re-ordering of files is needed. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.isOn#1905",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TracerMode.isOn()",
        "snippet": "    boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 1905,
        "end_line": 1907,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.CompilerInput#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, boolean isExtern) {\n    this(ast, ast.getInputId(), isExtern);\n  }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.CompilerInput#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, com.google.javascript.rhino.InputId, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, InputId inputId, boolean isExtern) {\n    this.ast = ast;\n    this.id = inputId;\n\n    // TODO(nicksantos): Add a precondition check here. People are passing\n    // in null, but they should not be.\n    if (ast != null && ast.getSourceFile() != null) {\n      ast.getSourceFile().setIsExtern(isExtern);\n    }\n  }\n",
        "begin_line": 75,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.CompilerInput#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.JSSourceFile)",
        "snippet": "  public CompilerInput(JSSourceFile file) {\n    this(file, false);\n  }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.CompilerInput#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.JSSourceFile, boolean)",
        "snippet": "  public CompilerInput(JSSourceFile file, boolean isExtern) {\n    this(new JsAst(file), isExtern);\n  }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getInputId#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return id;\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getName#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return id.getIdName();\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getAstRoot#117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    Node root = ast.getAstRoot(compiler);\n    // The root maybe null if the AST can not be created.\n    if (root != null) {\n      Preconditions.checkState(root.isScript());\n      Preconditions.checkNotNull(root.getInputId());\n    }\n    return root;\n  }\n",
        "begin_line": 117,
        "end_line": 126,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.setModule#326",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "  public void setModule(JSModule module) {\n    // An input may only belong to one module.\n    Preconditions.checkArgument(\n        module == null || this.module == null || this.module == module);\n    this.module = module;\n  }\n",
        "begin_line": 326,
        "end_line": 331,
        "comment": " Sets the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.acceptEcmaScript5#1873",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptEcmaScript5()",
        "snippet": "  @Override\n  public boolean acceptEcmaScript5() {\n    switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 1873,
        "end_line": 1881,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.initBasedOnOptions#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initBasedOnOptions()",
        "snippet": "  private void initBasedOnOptions() {\n    // Create the source map if necessary.\n    if (options.sourceMapOutputPath != null) {\n      sourceMap = options.sourceMapFormat.getInstance();\n      sourceMap.setPrefixMappings(options.sourceMapLocationMappings);\n    }\n  }\n",
        "begin_line": 366,
        "end_line": 372,
        "comment": "\n   * Do any initialization that is dependent on the compiler options.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.makeCompilerInput#374",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.makeCompilerInput(java.util.List<com.google.javascript.jscomp.JSSourceFile>, boolean)",
        "snippet": "  private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    for (JSSourceFile file : files) {\n      inputs.add(new CompilerInput(file, isExtern));\n    }\n    return inputs;\n  }\n",
        "begin_line": 374,
        "end_line": 381,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.checkFirstModule#395",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private void checkFirstModule(List<JSModule> modules) {\n    if (modules.isEmpty()) {\n      report(JSError.make(EMPTY_MODULE_LIST_ERROR));\n    } else if (modules.get(0).getInputs().isEmpty() && modules.size() > 1) {\n      // The root module may only be empty if there is exactly 1 module.\n      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));\n    }\n  }\n",
        "begin_line": 395,
        "end_line": 403,
        "comment": "\n   * Verifies that at least one module has been provided and that the first one\n   * has at least one source code input.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.fillEmptyModules#417",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (module.getInputs().isEmpty()) {\n        module.add(JSSourceFile.fromCode(\n            createFillFileName(module.getName()), \"\"));\n      }\n    }\n  }\n",
        "begin_line": 417,
        "end_line": 424,
        "comment": "\n   * Fill any empty modules with a place holder file. It makes any cross module\n   * motion easier.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getAllInputsFromModules#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    Map<String, JSModule> inputMap = Maps.newHashMap();\n    for (JSModule module : modules) {\n      for (CompilerInput input : module.getInputs()) {\n        String inputName = input.getName();\n\n        // NOTE(nicksantos): If an input is in more than one module,\n        // it will show up twice in the inputs list, and then we\n        // will get an error down the line.\n        inputs.add(input);\n        inputMap.put(inputName, module);\n      }\n    }\n    return inputs;\n  }\n",
        "begin_line": 440,
        "end_line": 456,
        "comment": "\n   * Builds a single list of all module inputs. Verifies that it contains no\n   * duplicates.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.initInputsByIdMap#468",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initInputsByIdMap()",
        "snippet": "  void initInputsByIdMap() {\n    inputsById = new HashMap<InputId, CompilerInput>();\n    for (CompilerInput input : externs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = inputsById.put(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n      }\n    }\n    for (CompilerInput input : inputs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = inputsById.put(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_INPUT, input.getName()));\n      }\n    }\n  }\n",
        "begin_line": 468,
        "end_line": 484,
        "comment": "\n   * Creates a map to make looking up an input by name fast. Also checks for\n   * duplicate inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.newTracer#877",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.newTracer(java.lang.String)",
        "snippet": "  Tracer newTracer(String passName) {\n    String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (options.tracer.isOn()) {\n      tracker.recordPassStart(passName);\n    }\n    return new Tracer(\"Compiler\", comment);\n  }\n",
        "begin_line": 877,
        "end_line": 884,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.stopTracer#886",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
        "snippet": "  void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (options.tracer.isOn()) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 886,
        "end_line": 891,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getDefaultErrorReporter#1460",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDefaultErrorReporter()",
        "snippet": "  @Override\n  ErrorReporter getDefaultErrorReporter() {\n    return defaultErrorReporter;\n  }\n",
        "begin_line": 1460,
        "end_line": 1463,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.prepareAst#1812",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.prepareAst(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void prepareAst(Node root) {\n    CompilerPass pass = new PrepareAst(this);\n    pass.process(null, root);\n  }\n",
        "begin_line": 1812,
        "end_line": 1816,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.isIdeMode#1868",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.isIdeMode()",
        "snippet": "  @Override\n  public boolean isIdeMode() {\n    return options.ideMode;\n  }\n",
        "begin_line": 1868,
        "end_line": 1871,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.acceptConstKeyword#1887",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptConstKeyword()",
        "snippet": "  @Override\n  public boolean acceptConstKeyword() {\n    return options.acceptConstKeyword;\n  }\n",
        "begin_line": 1887,
        "end_line": 1890,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getParserConfig#1892",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getParserConfig()",
        "snippet": "  @Override\n  Config getParserConfig() {\n    if (parserConfig == null) {\n      Config.LanguageMode mode;\n      switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }\n\n      parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);\n    }\n    return parserConfig;\n  }\n",
        "begin_line": 1892,
        "end_line": 1917,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.hasHaltingErrors#1989",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasHaltingErrors()",
        "snippet": "  @Override\n  boolean hasHaltingErrors() {\n    return !isIdeMode() && getErrorCount() > 0;\n  }\n",
        "begin_line": 1989,
        "end_line": 1992,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.hasErrors#2003",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasErrors()",
        "snippet": "  public boolean hasErrors() {\n    return hasHaltingErrors();\n  }\n",
        "begin_line": 2003,
        "end_line": 2005,
        "comment": "\n   * Consults the {@link ErrorManager} to see if we've encountered errors\n   * that should halt compilation. <p>\n   *\n   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n   * always returns {@code false} without consulting the error manager. The\n   * error manager will continue to be told about new errors and warnings, but\n   * the compiler will complete compilation of all inputs.<p>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeChangeHandler.hasCodeChanged#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.hasCodeChanged()",
        "snippet": "    boolean hasCodeChanged() {\n      return hasChanged;\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicErrorManager.getErrorCount#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrorCount()",
        "snippet": "  @Override\n  public int getErrorCount() {\n    return errorCount;\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicErrorManager.getWarningCount#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarningCount()",
        "snippet": "  @Override\n  public int getWarningCount() {\n    return warningCount;\n  }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 2
    },
    {
        "name": "SuppressDocWarningsGuard.SuppressDocWarningsGuard#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.SuppressDocWarningsGuard(java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup>)",
        "snippet": "  SuppressDocWarningsGuard(Map<String, DiagnosticGroup> suppressableGroups) {\n    for (Map.Entry<String, DiagnosticGroup> entry :\n             suppressableGroups.entrySet()) {\n      suppressors.put(\n          entry.getKey(),\n          new DiagnosticGroupWarningsGuard(\n              entry.getValue(),\n              CheckLevel.OFF));\n    }\n  }\n",
        "begin_line": 40,
        "end_line": 49,
        "comment": "\n   * The suppressable groups, indexed by name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "SuppressDocWarningsGuard.getPriority#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.getPriority()",
        "snippet": "  @Override\n  public int getPriority() {\n    // Happens after path-based filtering, but before other times\n    // of filtering.\n    return WarningsGuard.Priority.SUPPRESS_DOC.value;\n  }\n",
        "begin_line": 95,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider, com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    Preconditions.checkNotNull(source);\n    this.excerpt = excerpt;\n  }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ErrorFormat.toFormatter#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ErrorFormat.java",
        "class_name": "com.google.javascript.jscomp.ErrorFormat",
        "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
        "snippet": "    @Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter = new LightweightMessageFormatter(\n          source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }\n",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroups.getRegisteredGroups#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.getRegisteredGroups()",
        "snippet": "  protected Map<String, DiagnosticGroup> getRegisteredGroups() {\n    return ImmutableMap.copyOf(groupsByName);\n  }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": " Get the registered diagnostic groups, indexed by name. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.matches#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public boolean matches(DiagnosticType type) {\n    return types.contains(type);\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n   * Returns whether the given type matches a type in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.getTypes#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.getTypes()",
        "snippet": "  Collection<DiagnosticType> getTypes() {\n    return types;\n  }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n   * Returns an iterator over all the types in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.compare#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.compare(com.google.javascript.jscomp.WarningsGuard, com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "    @Override\n    public int compare(WarningsGuard a, WarningsGuard b) {\n      int priorityDiff = a.getPriority() - b.getPriority();\n      if (priorityDiff != 0) {\n        return priorityDiff;\n      }\n\n      // If the warnings guards have the same priority, the one that\n      // was added last wins.\n      return orderOfAddition.get(b).intValue() -\n          orderOfAddition.get(a).intValue();\n    }\n",
        "begin_line": 60,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.addGuard#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  void addGuard(WarningsGuard guard) {\n    if (guard instanceof ComposeWarningsGuard) {\n      // Reverse the guards, so that they have the same order in the result.\n      addGuards(((ComposeWarningsGuard) guard).guards.descendingSet());\n    } else {\n      numberOfAdds++;\n      orderOfAddition.put(guard, numberOfAdds);\n      guards.remove(guard);\n      guards.add(guard);\n    }\n  }\n",
        "begin_line": 86,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.addGuards#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuards(java.lang.Iterable<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  private void addGuards(Iterable<WarningsGuard> guards) {\n    for (WarningsGuard guard : guards) {\n      addGuard(guard);\n    }\n  }\n",
        "begin_line": 98,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.enables#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup group) {\n    for (WarningsGuard guard : guards) {\n      if (guard.enables(group)) {\n        return true;\n      } else if (guard.disables(group)) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 139,
        "end_line": 150,
        "comment": "\n   * Determines whether this guard will \"elevate\" the status of any disabled\n   * diagnostic type in the group to a warning or an error.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.enables#1012",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean enables(DiagnosticGroup type) {\n    return warningsGuard.enables(type);\n  }\n",
        "begin_line": 1012,
        "end_line": 1014,
        "comment": "\n   * Whether the warnings guard in this Options object enables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.getWarningsGuard#1031",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getWarningsGuard()",
        "snippet": "  WarningsGuard getWarningsGuard() {\n    return warningsGuard;\n  }\n",
        "begin_line": 1031,
        "end_line": 1033,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.shouldColorizeErrorOutput#1214",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shouldColorizeErrorOutput()",
        "snippet": "  public boolean shouldColorizeErrorOutput() {\n    return colorizeErrorOutput;\n  }\n",
        "begin_line": 1214,
        "end_line": 1216,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setCodingConvention#1251",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public void setCodingConvention(CodingConvention codingConvention) {\n    this.codingConvention = codingConvention;\n  }\n",
        "begin_line": 1251,
        "end_line": 1253,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.getCodingConvention#1255",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getCodingConvention()",
        "snippet": "  public CodingConvention getCodingConvention() {\n    return codingConvention;\n  }\n",
        "begin_line": 1255,
        "end_line": 1257,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.getLanguageIn#1346",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageIn()",
        "snippet": "  public LanguageMode getLanguageIn() {\n    return languageIn;\n  }\n",
        "begin_line": 1346,
        "end_line": 1348,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.setErrorManager#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setErrorManager(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public void setErrorManager(ErrorManager errorManager) {\n    Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 210,
        "end_line": 214,
        "comment": "\n   * Sets the error manager.\n   *\n   * @param errorManager the error manager, it cannot be {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.createMessageFormatter#220",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createMessageFormatter()",
        "snippet": "  private MessageFormatter createMessageFormatter() {\n    boolean colorize = options.shouldColorizeErrorOutput();\n    return options.errorFormat.toFormatter(this, colorize);\n  }\n",
        "begin_line": 220,
        "end_line": 223,
        "comment": "\n   * Creates a message formatter instance corresponding to the value of\n   * {@link CompilerOptions}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getCodingConvention#1861",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getCodingConvention()",
        "snippet": "  @Override\n  public CodingConvention getCodingConvention() {\n    CodingConvention convention = options.getCodingConvention();\n    convention = convention != null ? convention : defaultCodingConvention;\n    return convention;\n  }\n",
        "begin_line": 1861,
        "end_line": 1866,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckLevel.isOn#29",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckLevel.java",
        "class_name": "com.google.javascript.jscomp.CheckLevel",
        "signature": "com.google.javascript.jscomp.CheckLevel.isOn()",
        "snippet": "  boolean isOn() {\n    return this != OFF;\n  }\n",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractMessageFormatter.AbstractMessageFormatter#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.AbstractMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public AbstractMessageFormatter(SourceExcerptProvider source) {\n    this.source = source;\n  }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractMessageFormatter.setColorize#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.setColorize(boolean)",
        "snippet": "  public void setColorize(boolean colorize) {\n    this.colorize = colorize;\n  }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.createDelegateSuffix#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix(java.lang.String)",
        "snippet": "  public static String createDelegateSuffix(String suffix) {\n    return \"(\" + suffix + \")\";\n  }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n   * Creates a suffix for a proxy delegate.\n   * @see #getNormalizedReferenceName\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScriptRuntime.getMessage0#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage0(java.lang.String)",
        "snippet": "    public static String getMessage0(String messageId) {\n        return getMessage(messageId, null);\n    }\n",
        "begin_line": 366,
        "end_line": 368,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScriptRuntime.getMessage#379",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage(java.lang.String, java.lang.Object[])",
        "snippet": "    public static String getMessage(String messageId, Object[] arguments) {\n        final String defaultResource\n            = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n\n        Locale locale = Locale.getDefault();\n\n        // ResourceBundle does cacheing.\n        ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);\n\n        String formatString;\n        try {\n            formatString = rb.getString(messageId);\n        } catch (java.util.MissingResourceException mre) {\n            throw new RuntimeException\n                (\"no message resource found for message property \"+ messageId);\n        }\n\n        /*\n         * It's OK to format the string, even if 'arguments' is null;\n         * we need to format it anyway, to make double ''s collapse to\n         * single 's.\n         */\n        // TODO: MessageFormat is not available on pJava\n        MessageFormat formatter = new MessageFormat(formatString);\n        return formatter.format(arguments);\n    }\n",
        "begin_line": 379,
        "end_line": 404,
        "comment": " OPT there's a noticable delay for the first error!  Maybe it'd\n     * make sense to use a ListResourceBundle instead of a properties\n     * file to avoid (synchronized) text parsing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "WarningsGuard.Priority#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.Priority.Priority(int)",
        "snippet": "    Priority(int value) {\n      this.value = value;\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "WarningsGuard.getPriority#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.getPriority()",
        "snippet": "  protected int getPriority() {\n    return Priority.DEFAULT.value;\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n   * The priority in which warnings guards are applied. Lower means the\n   * guard will be applied sooner. Expressed on a scale of 1 to 100.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.OldRhinoErrorReporter#142",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.OldRhinoErrorReporter.OldRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private OldRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 142,
        "end_line": 144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.NewRhinoErrorReporter#150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.NewRhinoErrorReporter.NewRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private NewRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 150,
        "end_line": 152,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.replacePlaceHolders#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.replacePlaceHolders(java.lang.String)",
        "snippet": "  private Pattern replacePlaceHolders(String s) {\n    s = Pattern.quote(s);\n    return Pattern.compile(s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\"));\n  }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "\n   * For each message such as \"Not a good use of {0}\", replace the place\n   * holder {0} with a wild card that matches all possible strings.\n   * Also put the any non-place-holder in quotes for regex matching later.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.RhinoErrorReporter#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private RhinoErrorReporter(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    typeMap = ImmutableMap.of(\n\n        // Extra @fileoverview\n        replacePlaceHolders(\n            ScriptRuntime.getMessage0(\"msg.jsdoc.fileoverview.extra\")),\n        EXTRA_FILEOVERVIEW,\n\n        // Trailing comma\n        replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime\n              .getMessage0(\"msg.extra.trailing.comma\")),\n        TRAILING_COMMA,\n\n        // Duplicate parameter\n        replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime\n              .getMessage0(\"msg.dup.parms\")),\n        DUPLICATE_PARAM,\n\n        // Unknown @annotations.\n        replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n        BAD_JSDOC_ANNOTATION,\n\n        // Type annotation errors.\n        Pattern.compile(\"^Bad type annotation.*\"),\n        TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 72,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.forNewRhino#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static com.google.javascript.rhino.head.ErrorReporter\n      forNewRhino(AbstractCompiler compiler) {\n    return new NewRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "RhinoErrorReporter.forOldRhino#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n    return new OldRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.TweakFunction#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String)",
        "snippet": "    TweakFunction(String name) {\n      this(name, null, Token.ERROR, Token.ERROR, null);\n    }\n",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.TweakFunction#127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA) {\n      this(name, expectedTypeName, validNodeTypeA, Token.ERROR, null);\n    }\n",
        "begin_line": 127,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.TweakFunction#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB) {\n      this(name, expectedTypeName, validNodeTypeA, validNodeTypeB, null);\n    }\n",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.TweakFunction#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, TweakFunction registerFunction) {\n      this(name, null, Token.ERROR, Token.ERROR, registerFunction);\n    }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.TweakFunction#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB,\n        TweakFunction registerFunction) {\n      this.name = name;\n      this.expectedTypeName = expectedTypeName;\n      this.validNodeTypeA = validNodeTypeA;\n      this.validNodeTypeB = validNodeTypeB;\n      this.registerFunction = registerFunction;\n    }\n",
        "begin_line": 141,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessTweaks.getName#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.getName()",
        "snippet": "    String getName() {\n      return name;\n    }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "PassFactory.PassFactory#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.PassFactory(java.lang.String, boolean)",
        "snippet": "  protected PassFactory(String name, boolean isOneTimePass) {\n    this.name = name;\n    this.isOneTimePass = isOneTimePass;\n  }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n   * @param name The name of the pass that this factory creates.\n   * @param isOneTimePass If true, the pass produced by this factory can\n   *     only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.error#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.error(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType error(String name, String descriptionFormat) {\n    return make(name, CheckLevel.ERROR, descriptionFormat);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.ERROR\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.warning#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.warning(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType warning(String name, String descriptionFormat) {\n    return make(name, CheckLevel.WARNING, descriptionFormat);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.WARNING\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.disabled#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.disabled(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType disabled(String name,\n      String descriptionFormat) {\n    return make(name, CheckLevel.OFF, descriptionFormat);\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.OFF\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.make#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.make(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
        "snippet": "  public static DiagnosticType make(String name, CheckLevel level,\n                                    String descriptionFormat) {\n    return\n        new DiagnosticType(name, level, new MessageFormat(descriptionFormat));\n  }\n",
        "begin_line": 88,
        "end_line": 92,
        "comment": "\n   * Create a DiagnosticType at a given CheckLevel.\n   *\n   * @param name An identifier\n   * @param level Either CheckLevel.ERROR or CheckLevel.WARNING\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.DiagnosticType#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.DiagnosticType(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.text.MessageFormat)",
        "snippet": "  private DiagnosticType(String key, CheckLevel level, MessageFormat format) {\n    this.key = key;\n    this.defaultLevel = level;\n    this.format = format;\n\n    this.level = this.defaultLevel;\n  }\n",
        "begin_line": 97,
        "end_line": 103,
        "comment": "\n   * Create a DiagnosticType. Private to force use of static factory methods.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.equals#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object type) {\n    return type instanceof DiagnosticType &&\n        ((DiagnosticType) type).key.equals(key);\n  }\n",
        "begin_line": 113,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.hashCode#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return key.hashCode();\n  }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroups.DiagnosticGroups#31",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DiagnosticGroups()",
        "snippet": "  public DiagnosticGroups() {}\n",
        "begin_line": 31,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroups.registerGroup#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticType ... types) {\n    DiagnosticGroup group = new DiagnosticGroup(name, types);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroups.registerGroup#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup ... groups) {\n    DiagnosticGroup group = new DiagnosticGroup(name, groups);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public DiagnosticGroupWarningsGuard(\n      DiagnosticGroup group, CheckLevel level) {\n    this.group = group;\n    this.level = level;\n  }\n",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  DiagnosticGroup(String name, DiagnosticType ...types) {\n    this.name = name;\n    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n  }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  public DiagnosticGroup(DiagnosticType ...types) {\n    this(null, types);\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  public DiagnosticGroup(String name, DiagnosticGroup ...groups) {\n    Set<DiagnosticType> set = Sets.newHashSet();\n\n    for (DiagnosticGroup group : groups) {\n      set.addAll(group.types);\n    }\n\n    this.name = name;\n    this.types = ImmutableSet.copyOf(set);\n  }\n",
        "begin_line": 88,
        "end_line": 97,
        "comment": "\n   * Create a composite group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.GuardComparator#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.GuardComparator(java.util.Map<com.google.javascript.jscomp.WarningsGuard, java.lang.Integer>)",
        "snippet": "    private GuardComparator(Map<WarningsGuard, Integer> orderOfAddition) {\n      this.orderOfAddition = orderOfAddition;\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(java.util.List<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  public ComposeWarningsGuard(List<WarningsGuard> guards) {\n    addGuards(guards);\n  }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(com.google.javascript.jscomp.WarningsGuard...)",
        "snippet": "  public ComposeWarningsGuard(WarningsGuard... guards) {\n    this(Lists.newArrayList(guards));\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.CompilerOptions#762",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.CompilerOptions()",
        "snippet": "  public CompilerOptions() {\n    // Accepted language\n    languageIn = LanguageMode.ECMASCRIPT3;\n\n    // Language variation\n    acceptConstKeyword = false;\n\n    // Checks\n    skipAllPasses = false;\n    nameAnonymousFunctionsOnly = false;\n    devMode = DevMode.OFF;\n    checkSymbols = false;\n    aggressiveVarCheck = CheckLevel.OFF;\n    checkSuspiciousCode = false;\n    checkControlStructures = false;\n    checkTypes = false;\n    tightenTypes = false;\n    reportMissingOverride = CheckLevel.OFF;\n    reportUnknownTypes = CheckLevel.OFF;\n    checkRequires = CheckLevel.OFF;\n    checkProvides = CheckLevel.OFF;\n    checkGlobalNamesLevel = CheckLevel.OFF;\n    brokenClosureRequiresLevel = CheckLevel.ERROR;\n    checkGlobalThisLevel = CheckLevel.OFF;\n    checkUnreachableCode = CheckLevel.OFF;\n    checkMissingReturn = CheckLevel.OFF;\n    checkMissingGetCssNameLevel = CheckLevel.OFF;\n    checkMissingGetCssNameBlacklist = null;\n    checkCaja = false;\n    computeFunctionSideEffects = false;\n    chainCalls = false;\n    extraAnnotationNames = null;\n\n    // Optimizations\n    foldConstants = false;\n    coalesceVariableNames = false;\n    deadAssignmentElimination = false;\n    inlineConstantVars = false;\n    inlineFunctions = false;\n    inlineLocalFunctions = false;\n    assumeStrictThis = false;\n    assumeClosuresOnlyCaptureReferences = false;\n    crossModuleCodeMotion = false;\n    crossModuleMethodMotion = false;\n    inlineGetters = false;\n    inlineVariables = false;\n    inlineLocalVariables = false;\n    smartNameRemoval = false;\n    removeDeadCode = false;\n    extractPrototypeMemberDeclarations = false;\n    removeUnusedPrototypeProperties = false;\n    removeUnusedPrototypePropertiesInExterns = false;\n    removeUnusedVars = false;\n    removeUnusedLocalVars = false;\n    aliasExternals = false;\n    collapseVariableDeclarations = false;\n    groupVariableDeclarations = false;\n    collapseAnonymousFunctions = false;\n    aliasableStrings = Collections.emptySet();\n    aliasStringsBlacklist = \"\";\n    aliasAllStrings = false;\n    outputJsStringUsage = false;\n    convertToDottedProperties = false;\n    rewriteFunctionExpressions = false;\n    optimizeParameters = false;\n    optimizeReturns = false;\n\n    // Renaming\n    variableRenaming = VariableRenamingPolicy.OFF;\n    propertyRenaming = PropertyRenamingPolicy.OFF;\n    propertyAffinity = false;\n    labelRenaming = false;\n    generatePseudoNames = false;\n    shadowVariables = false;\n    renamePrefix = null;\n    aliasKeywords = false;\n    collapseProperties = false;\n    collapsePropertiesOnExternTypes = false;\n    collapseObjectLiterals = false;\n    devirtualizePrototypeMethods = false;\n    disambiguateProperties = false;\n    ambiguateProperties = false;\n    anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;\n    exportTestFunctions = false;\n\n    // Alterations\n    runtimeTypeCheck = false;\n    runtimeTypeCheckLogFunction = null;\n    ignoreCajaProperties = false;\n    syntheticBlockStartMarker = null;\n    syntheticBlockEndMarker = null;\n    locale = null;\n    markAsCompiled = false;\n    removeTryCatchFinally = false;\n    closurePass = false;\n    jqueryPass = false;\n    rewriteNewDateGoogNow = true;\n    removeAbstractMethods = true;\n    removeClosureAsserts = false;\n    stripTypes = Collections.emptySet();\n    stripNameSuffixes = Collections.emptySet();\n    stripNamePrefixes = Collections.emptySet();\n    stripTypePrefixes = Collections.emptySet();\n    customPasses = null;\n    markNoSideEffectCalls = false;\n    defineReplacements = Maps.newHashMap();\n    tweakProcessing = TweakProcessing.OFF;\n    tweakReplacements = Maps.newHashMap();\n    moveFunctionDeclarations = false;\n    instrumentationTemplate = null;\n    appNameStr = \"\";\n    recordFunctionInformation = false;\n    generateExports = false;\n    cssRenamingMap = null;\n    processObjectPropertyString = false;\n    idGenerators = Collections.emptySet();\n    replaceStringsFunctionDescriptions = Collections.emptyList();\n    replaceStringsPlaceholderToken = \"\";\n    replaceStringsReservedStrings = Collections.emptySet();\n    propertyInvalidationErrors = Maps.newHashMap();\n\n    // Output\n    printInputDelimiter = false;\n    prettyPrint = false;\n    lineBreak = false;\n    reportPath = null;\n    tracer = TracerMode.OFF;\n    colorizeErrorOutput = false;\n    errorFormat = ErrorFormat.SINGLELINE;\n    debugFunctionSideEffectsPath = null;\n    externExports = false;\n    nameReferenceReportPath = null;\n    nameReferenceGraphPath = null;\n\n    // Debugging\n    aliasHandler = NULL_ALIAS_TRANSFORMATION_HANDLER;\n  }\n",
        "begin_line": 762,
        "end_line": 898,
        "comment": "\n   * Initializes compiler options. All options are disabled by default.\n   *\n   * Command-line frontends to the compiler should set these properties\n   * like a builder.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.Compiler#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler(java.io.PrintStream)",
        "snippet": "  public Compiler(PrintStream stream) {\n    addChangeHandler(recentChange);\n    outStream = stream;\n  }\n",
        "begin_line": 192,
        "end_line": 195,
        "comment": "\n   * Creates n Compiler that reports errors and warnings to an output\n   * stream.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.addChangeHandler#1839",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void addChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.add(handler);\n  }\n",
        "begin_line": 1839,
        "end_line": 1842,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getDiagnosticGroups#1933",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDiagnosticGroups()",
        "snippet": "  protected DiagnosticGroups getDiagnosticGroups() {\n    return new DiagnosticGroups();\n  }\n",
        "begin_line": 1933,
        "end_line": 1935,
        "comment": "\n   * The warning classes that are available from the command-line, and\n   * are suppressable by the {@code @suppress} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.Proxy#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.Proxy(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "    protected Proxy(CodingConvention convention) {\n      this.nextConvention = convention;\n    }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention()",
        "snippet": "  public ClosureCodingConvention() {\n    this(CodingConventions.getDefault());\n  }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public ClosureCodingConvention(CodingConvention wrapped) {\n    super(wrapped);\n  }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy(char[])",
        "snippet": "  AnonymousFunctionNamingPolicy(char[] reservedCharacters) {\n    this.reservedCharacters = reservedCharacters;\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.Preloaded#423",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String originalPath, String code) {\n      super(fileName);\n      super.setOriginalPath(originalPath);\n      super.setCode(code);\n    }\n",
        "begin_line": 423,
        "end_line": 427,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.Builder#370",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Builder.Builder()",
        "snippet": "    public Builder() {}\n",
        "begin_line": 370,
        "end_line": 370,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.buildFromCode#392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Builder.buildFromCode(java.lang.String, java.lang.String)",
        "snippet": "    public SourceFile buildFromCode(String fileName, String code) {\n      return new Preloaded(fileName, originalPath, code);\n    }\n",
        "begin_line": 392,
        "end_line": 394,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.SourceFile#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.SourceFile(java.lang.String)",
        "snippet": "  public SourceFile(String fileName) {\n    if (fileName == null || fileName.isEmpty()) {\n      throw new IllegalArgumentException(\"a source must have a name\");\n    }\n    this.fileName = fileName;\n    // Starting point: offset 0 is at line 1.\n    this.lastOffset = 0;\n    this.lastLine = 1;\n  }\n",
        "begin_line": 86,
        "end_line": 94,
        "comment": "\n   * Construct a new abstract source file.\n   *\n   * @param fileName The file name of the source file. It does not necessarily\n   *     need to correspond to a real path. But it should be unique. Will\n   *     appear in warning messages emitted by the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.setCode#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setCode(java.lang.String)",
        "snippet": "  private void setCode(String sourceCode) {\n    code = sourceCode;\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.setOriginalPath#163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setOriginalPath(java.lang.String)",
        "snippet": "  public void setOriginalPath(String originalPath) {\n    this.originalPath = originalPath;\n  }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.getName#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return fileName;\n  }\n",
        "begin_line": 181,
        "end_line": 184,
        "comment": " Returns a unique name for the source file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.fromCode#324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static SourceFile fromCode(String fileName, String code) {\n    return builder().buildFromCode(fileName, code);\n  }\n",
        "begin_line": 324,
        "end_line": 326,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.builder#356",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.builder()",
        "snippet": "  public static Builder builder() {\n    return new Builder();\n  }\n",
        "begin_line": 356,
        "end_line": 358,
        "comment": " Create a new builder for source files. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSSourceFile.fromCode#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static JSSourceFile fromCode(String fileName, String code) {\n    return new JSSourceFile(SourceFile.fromCode(fileName, code));\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSSourceFile.JSSourceFile#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.JSSourceFile(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  private JSSourceFile(SourceFile referenced) {\n    super(referenced.getName());\n    this.referenced = referenced;\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.getDefault#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.getDefault()",
        "snippet": "  public static CodingConvention getDefault() {\n    return new DefaultCodingConvention();\n  }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": " Gets the default coding convention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "LoggerErrorManager.printSummary#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.printSummary()",
        "snippet": "  @Override\n  protected void printSummary() {\n    Level level = (getErrorCount() + getWarningCount() == 0) ?\n        Level.INFO : Level.WARNING;\n    if (getTypedPercent() > 0.0) {\n      logger.log(level, \"{0} error(s), {1} warning(s), {2,number,#.#}% typed\",\n          new Object[] {getErrorCount(), getWarningCount(), getTypedPercent()});\n    } else {\n      if (getErrorCount() + getWarningCount() > 0) {\n        logger.log(level, \"{0} error(s), {1} warning(s)\",\n            new Object[] {getErrorCount(), getWarningCount()});\n      }\n    }\n  }\n",
        "begin_line": 61,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0618
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessDefines.updateAssignAllowedStack#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines.updateAssignAllowedStack(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    private void updateAssignAllowedStack(Node n, boolean entering) {\n      switch (n.getType()) {\n        case Token.CASE:\n        case Token.FOR:\n        case Token.FUNCTION:\n        case Token.HOOK:\n        case Token.IF:\n        case Token.SWITCH:\n        case Token.WHILE:\n          if (entering) {\n            assignAllowed.push(0);\n          } else {\n            assignAllowed.remove();\n          }\n          break;\n      }\n    }\n",
        "begin_line": 380,
        "end_line": 396,
        "comment": "\n     * Determines whether assignment to a define should be allowed\n     * in the subtree of the given node, and if not, records that fact.\n     *\n     * @param n The node whose subtree we're about to enter or exit.\n     * @param entering True if we're entering the subtree, false otherwise.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0613
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordModifies#418",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordModifies(java.util.Set<java.lang.String>)",
        "snippet": "  public boolean recordModifies(Set<String> modifies) {\n    if (!hasAnySingletonSideEffectTags()\n        && currentInfo.setModifies(modifies)) {\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 418,
        "end_line": 426,
        "comment": "\n   * Records the list of modifies warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setModifies#707",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setModifies(java.util.Set<java.lang.String>)",
        "snippet": "  boolean setModifies(Set<String> modifies) {\n    lazyInitInfo();\n\n    if (info.modifies != null) {\n      return false;\n    }\n\n    info.modifies = modifies;\n    return true;\n  }\n",
        "begin_line": 707,
        "end_line": 716,
        "comment": "\n   * Sets modifies values.\n   * @param modifies A list of modifies types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseModifiesTag#1012",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseModifiesTag(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private JsDocToken parseModifiesTag(JsDocToken token) {\n    if (token == JsDocToken.LC) {\n      Set<String> modifies = new HashSet<String>();\n      while (true) {\n        if (match(JsDocToken.STRING)) {\n          String name = stream.getString();\n          if (!modifiesAnnotationKeywords.contains(name)\n              && !jsdocBuilder.hasParameter(name)) {\n              parser.addParserWarning(\"msg.jsdoc.modifies.unknown\", name,\n                  stream.getLineno(), stream.getCharno());\n          }\n\n          modifies.add(stream.getString());\n          token = next();\n        } else {\n          parser.addParserWarning(\"msg.jsdoc.modifies\",\n              stream.getLineno(), stream.getCharno());\n          return token;\n        }\n\n        if (match(JsDocToken.PIPE)) {\n          token = next();\n        } else {\n          break;\n        }\n      }\n\n      if (!match(JsDocToken.RC)) {\n        parser.addParserWarning(\"msg.jsdoc.modifies\",\n            stream.getLineno(), stream.getCharno());\n      } else {\n        token = next();\n        if (!jsdocBuilder.recordModifies(modifies)) {\n          parser.addParserWarning(\"msg.jsdoc.modifies.duplicate\",\n              stream.getLineno(), stream.getCharno());\n        }\n      }\n    }\n    return token;\n  }\n",
        "begin_line": 1012,
        "end_line": 1051,
        "comment": "\n   * Parse a {@code @modifies} tag of the form\n   * {@code @modifies&#123;this|arguments|param&#125;}.\n   *\n   * @param token The current token.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "ReplaceIdGenerators.ReplaceIdGenerators#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.ReplaceIdGenerators(com.google.javascript.jscomp.AbstractCompiler, java.util.Set<java.lang.String>)",
        "snippet": "  public ReplaceIdGenerators(AbstractCompiler compiler, Set<String> idGens) {\n    this.compiler = compiler;\n    nameGenerators = Maps.newLinkedHashMap();\n    consistNameGenerators = Maps.newLinkedHashMap();\n    idGeneratorMaps = Maps.newLinkedHashMap();\n    consistNameMap = Maps.newLinkedHashMap();\n\n    if (idGens != null) {\n      for(String gen : idGens) {\n        nameGenerators.put(gen,\n            new NameGenerator(Collections.<String>emptySet(), \"\", null));\n        idGeneratorMaps.put(gen, Lists.<Replacement>newLinkedList());\n      }\n    }\n  }\n",
        "begin_line": 59,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "ReplaceIdGenerators.process#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, new GatherGenerators());\n    if (!nameGenerators.isEmpty() || !this.consistNameGenerators.isEmpty()) {\n      NodeTraversal.traverse(compiler, root, new ReplaceGenerators());\n    }\n  }\n",
        "begin_line": 119,
        "end_line": 125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "ReplaceIdGenerators.getIdGeneratorMap#193",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.getIdGeneratorMap()",
        "snippet": "  public String getIdGeneratorMap() {\n    StringBuilder sb = new StringBuilder();\n    for (Map.Entry<String, List<Replacement>> entry :\n        idGeneratorMaps.entrySet()) {\n      sb.append(\"[\");\n      sb.append(entry.getKey());\n      sb.append(\"]\\n\\n\");\n      for (Replacement replacement : entry.getValue()) {\n        sb.append(replacement.toString());\n        sb.append(\"\\n\");\n      }\n      sb.append(\"\\n\");\n    }\n    return sb.toString();\n  }\n",
        "begin_line": 193,
        "end_line": 207,
        "comment": "\n   * @return the id generator map.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#1358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-faef27aa-1b11-440e-b894-4115c87fef07.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          ReplaceIdGenerators pass =\n              new ReplaceIdGenerators(compiler, options.idGenerators);\n          pass.process(externs, root);\n          idGeneratorMap = pass.getIdGeneratorMap();\n        }\n      };\n    }\n",
        "begin_line": 1358,
        "end_line": 1368,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#1361",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-704171f8-6639-4793-a08f-3910c5c01a26.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override public void process(Node externs, Node root) {\n          ReplaceIdGenerators pass =\n              new ReplaceIdGenerators(compiler, options.idGenerators);\n          pass.process(externs, root);\n          idGeneratorMap = pass.getIdGeneratorMap();\n        }\n",
        "begin_line": 1361,
        "end_line": 1366,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.compile#536",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.compile(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options) {\n    return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);\n  }\n",
        "begin_line": 536,
        "end_line": 542,
        "comment": "\n   * Compiles a list of modules.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0595
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.compileModules#547",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.compileModules(java.util.List<com.google.javascript.jscomp.JSSourceFile>, java.util.List<com.google.javascript.jscomp.JSModule>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public Result compileModules(List<JSSourceFile> externs,\n      List<JSModule> modules, CompilerOptions options) {\n    // The compile method should only be called once.\n    Preconditions.checkState(jsRoot == null);\n\n    try {\n      initModules(externs, modules, options);\n      if (hasErrors()) {\n        return getResult();\n      }\n      return compile();\n    } finally {\n      Tracer t = newTracer(\"generateReport\");\n      errorManager.generateReport();\n      stopTracer(t, \"generateReport\");\n    }\n  }\n",
        "begin_line": 547,
        "end_line": 563,
        "comment": "\n   * Compiles a list of modules.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0585
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateObjectLit#667",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateObjectLit(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateObjectLit(Node n) {\n    validateNodeType(Token.OBJECTLIT, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateObjectLitKey(c);\n    }\n  }\n",
        "begin_line": 667,
        "end_line": 672,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#1490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "  boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n    if (type != node.getType()\n        || getChildCount() != node.getChildCount()\n        || this.getClass() != node.getClass()) {\n      return false;\n    }\n\n    if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n      return false;\n    }\n\n    if (type == Token.INC || type == Token.DEC) {\n      int post1 = this.getIntProp(INCRDECR_PROP);\n      int post2 = node.getIntProp(INCRDECR_PROP);\n      if (post1 != post2) {\n        return false;\n      }\n    } else if (type == Token.STRING) {\n      int quoted1 = this.getIntProp(QUOTED_PROP);\n      int quoted2 = node.getIntProp(QUOTED_PROP);\n      if (quoted1 != quoted2) {\n        return false;\n      }\n\n      int slashV1 = this.getIntProp(SLASH_V);\n      int slashV2 = node.getIntProp(SLASH_V);\n      if (slashV1 != slashV2) {\n        return false;\n      }\n    } else if (type == Token.CALL) {\n      if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n        return false;\n      }\n    }\n\n    if (recurse) {\n      Node n, n2;\n      for (n = first, n2 = node.first;\n           n != null;\n           n = n.next, n2 = n2.next) {\n        if (!n.isEquivalentTo(n2, compareJsType, true)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 1490,
        "end_line": 1537,
        "comment": "\n   * @param compareJsType Whether to compare the JSTypes of the nodes.\n   * @param recurse Whether to compare the children of the current node, if\n   *    not only the the count of the children are compared.\n   * @return Whether this node is equivalent semantically to the provided node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0568
        },
        "num_failing_tests": 1
    },
    {
        "name": "Denormalize.maybeCollapseIntoForStatements#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "signature": "com.google.javascript.jscomp.Denormalize.maybeCollapseIntoForStatements(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void maybeCollapseIntoForStatements(Node n, Node parent) {\n    // Only SCRIPT, BLOCK, and LABELs can have FORs that can be collapsed into.\n    // LABELs are not supported here.\n    if (parent == null || !NodeUtil.isStatementBlock(parent)) {\n      return;\n    }\n\n    // Is the current node something that can be in a for loop initializer?\n    if (!n.isExprResult() && !n.isVar()) {\n      return;\n    }\n\n    // Is the next statement a valid FOR?\n    Node nextSibling = n.getNext();\n    if (nextSibling == null) {\n      return;\n    } else if (NodeUtil.isForIn(nextSibling)) {\n      Node forNode = nextSibling;\n      Node forVar = forNode.getFirstChild();\n      if (forVar.isName()\n          && n.isVar() && n.hasOneChild()) {\n        Node name = n.getFirstChild();\n        if (!name.hasChildren()\n            && forVar.getString().equals(name.getString())) {\n          // Ok, the names match, and the var declaration does not have an\n          // initializer. Move it into the loop.\n          parent.removeChild(n);\n          forNode.replaceChild(forVar, n);\n          compiler.reportCodeChange();\n        }\n      }\n    } else if (nextSibling.isFor()\n        && nextSibling.getFirstChild().isEmpty()) {\n\n      // Does the current node contain an in operator?  If so, embedding\n      // the expression in a for loop can cause some Javascript parsers (such\n      // as the Playstation 3's browser based on Access's NetFront\n      // browser) to fail to parse the code.\n      // See bug 1778863 for details.\n      if (NodeUtil.containsType(n, Token.IN)) {\n        return;\n      }\n\n      // Move the current node into the FOR loop initializer.\n      Node forNode = nextSibling;\n      Node oldInitializer = forNode.getFirstChild();\n      parent.removeChild(n);\n\n      Node newInitializer;\n      if (n.isVar()) {\n        newInitializer = n;\n      } else {\n        // Extract the expression from EXPR_RESULT node.\n        Preconditions.checkState(n.hasOneChild());\n        newInitializer = n.getFirstChild();\n        n.removeChild(newInitializer);\n      }\n\n      forNode.replaceChild(oldInitializer, newInitializer);\n\n      compiler.reportCodeChange();\n    }\n  }\n",
        "begin_line": 65,
        "end_line": 127,
        "comment": "\n   * Collapse VARs and EXPR_RESULT node into FOR loop initializers where\n   * possible.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0556
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.getLValue#166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.IncompleteDefinition.getLValue()",
        "snippet": "    @Override\n    public Node getLValue() {\n      return lValue;\n    }\n",
        "begin_line": 166,
        "end_line": 169,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0549
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getTypedPercent#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getTypedPercent()",
        "snippet": "  @Override\n  public double getTypedPercent() {\n    return typedPercent;\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0538
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.Ref#1204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Ref.Ref(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.GlobalNamespace.Name, com.google.javascript.jscomp.GlobalNamespace.Ref.Type, int)",
        "snippet": "    Ref(NodeTraversal t, Node node, Name name, Type type, int index) {\n      this.node = node;\n      this.name = name;\n      this.module = t.getInput() == null ? null : t.getInput().getModule();\n      this.source = node.getStaticSourceFile();\n      this.type = type;\n      this.scope = t.getScope();\n      this.preOrderIndex = index;\n    }\n",
        "begin_line": 1204,
        "end_line": 1212,
        "comment": "\n     * Creates a reference at the current node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.Name#899",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.Name(java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name, boolean)",
        "snippet": "    Name(String name, Name parent, boolean inExterns) {\n      this.baseName = name;\n      this.parent = parent;\n      this.type = Type.OTHER;\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 899,
        "end_line": 904,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.getDeclaration#928",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.getDeclaration()",
        "snippet": "    @Override\n    public Ref getDeclaration() {\n      return declaration;\n    }\n",
        "begin_line": 928,
        "end_line": 931,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.getRefs#1018",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.getRefs()",
        "snippet": "    List<Ref> getRefs() {\n      return refs == null ? ImmutableList.<Ref>of() : refs;\n    }\n",
        "begin_line": 1018,
        "end_line": 1020,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.addRefInternal#1022",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.addRefInternal(com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "    void addRefInternal(Ref ref) {\n      if (refs == null) {\n        refs = Lists.newArrayList();\n      }\n      refs.add(ref);\n    }\n",
        "begin_line": 1022,
        "end_line": 1027,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.maybeHandlePrototypePrefix#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.maybeHandlePrototypePrefix(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "    boolean maybeHandlePrototypePrefix(NodeTraversal t, Node n, Node parent,\n        String name) {\n      // We use a string-based approach instead of inspecting the parse tree\n      // to avoid complexities with object literals, possibly nested, beneath\n      // assignments.\n\n      int numLevelsToRemove;\n      String prefix;\n      if (name.endsWith(\".prototype\")) {\n        numLevelsToRemove = 1;\n        prefix = name.substring(0, name.length() - 10);\n      } else {\n        int i = name.indexOf(\".prototype.\");\n        if (i == -1) {\n          return false;\n        }\n        prefix = name.substring(0, i);\n        numLevelsToRemove = 2;\n        i = name.indexOf('.', i + 11);\n        while (i >= 0) {\n          numLevelsToRemove++;\n          i = name.indexOf('.', i + 1);\n        }\n      }\n\n      if (parent != null && NodeUtil.isObjectLitKey(n, parent)) {\n        // Object literal keys have no prefix that's referenced directly per\n        // key, so we're done.\n        return true;\n      }\n\n      for (int i = 0; i < numLevelsToRemove; i++) {\n        parent = n;\n        n = n.getFirstChild();\n      }\n\n      handleGet(t, n, parent, prefix, Ref.Type.PROTOTYPE_GET);\n      return true;\n    }\n",
        "begin_line": 781,
        "end_line": 819,
        "comment": "\n     * Updates our respresentation of the global namespace to reflect a read\n     * of a global name's longest prefix before the \"prototype\" property if the\n     * name includes the \"prototype\" property. Does nothing otherwise.\n     *\n     * @param t The current node traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     * @return Whether the name was handled\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.isNestedAssign#829",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.isNestedAssign(com.google.javascript.rhino.Node)",
        "snippet": "    boolean isNestedAssign(Node parent) {\n      return parent.isAssign() &&\n             !parent.getParent().isExprResult();\n    }\n",
        "begin_line": 829,
        "end_line": 832,
        "comment": "\n     * Determines whether an assignment is nested (i.e. whether its return\n     * value is used).\n     *\n     * @param parent The parent of the current traversal node (not null)\n     * @return Whether it appears that the return value of the assignment is\n     *     used\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.isGlobalScope#267",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.isGlobalScope(com.google.javascript.jscomp.Scope)",
        "snippet": "  private boolean isGlobalScope(Scope s) {\n    return s.getParent() == null;\n  }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "\n   * Gets whether a scope is the global scope.\n   *\n   * @param s A scope\n   * @return Whether the scope is the global scope\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#1984",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-8a554215-c5e9-44fa-a216-3107b6f44359.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);\n    }\n",
        "begin_line": 1984,
        "end_line": 1987,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0521
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.add#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n      addLeftExpr(first, p, context);\n      cc.addOp(opstr, true);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(last, p, rhsContext);\n      } else {\n        addExpr(last, p + 1, rhsContext);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type));\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1);\n        cc.addOp(\":\", true);\n        addExpr(last, 1);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA));\n          add(\")\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        add(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        add(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().isObjectLit()) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isString());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n",
        "begin_line": 85,
        "end_line": 728,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0521
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenameInverter#274",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.ContextualRenameInverter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private ContextualRenameInverter(AbstractCompiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.process#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node js) {\n      NodeTraversal.traverse(compiler, js, this);\n    }\n",
        "begin_line": 278,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.enterScope#299",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      referenceStack.push(referencedNames);\n      referencedNames = Sets.newHashSet();\n    }\n",
        "begin_line": 299,
        "end_line": 307,
        "comment": "\n     * Prepare a set for the new scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.exitScope#313",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {\n        Var v = it.next();\n        handleScopeVar(v);\n      }\n\n      // Merge any names that were referenced but not declared in the current\n      // scope.\n      Set<String> current = referencedNames;\n      referencedNames = referenceStack.pop();\n      // If there isn't anything left in the stack we will be going into the\n      // global scope: don't try to build a set of referenced names for the\n      // global scope.\n      if (!referenceStack.isEmpty()) {\n        referencedNames.addAll(current);\n      }\n    }\n",
        "begin_line": 313,
        "end_line": 334,
        "comment": "\n     * Rename vars for the current scope, and merge any referenced\n     * names into the parent scope reference set.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.shouldTraverse#386",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return true;\n    }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.visit#391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node node, Node parent) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      if (NodeUtil.isReferenceName(node)) {\n        String name = node.getString();\n        // Add all referenced names to the set so it is possible to check for\n        // conflicts.\n        referencedNames.add(name);\n        // Store only references to candidate names in the node map.\n        if (containsSeparator(name)) {\n          addCandidateNameReference(name, node);\n        }\n      }\n    }\n",
        "begin_line": 391,
        "end_line": 407,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.getContextualRenameInverter#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static CompilerPass getContextualRenameInverter(AbstractCompiler compiler) {\n    return new ContextualRenameInverter(compiler);\n  }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessDefines.process#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (namespace == null) {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n    overrideDefines(collectDefines(root, namespace));\n  }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0509
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isLocal#211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.isLocal()",
        "snippet": "    public boolean isLocal() {\n      return scope.isLocal();\n    }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n     * Returns whether this is a local variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isNumber#2296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isNumber()",
        "snippet": "  public boolean isNumber() {\n    return this.getType() == Token.NUMBER;\n  }\n",
        "begin_line": 2296,
        "end_line": 2298,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.isGlobalNameReference#229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.isGlobalNameReference(java.lang.String, com.google.javascript.jscomp.Scope)",
        "snippet": "  private boolean isGlobalNameReference(String name, Scope s) {\n    String topVarName = getTopVarName(name);\n    return isGlobalVarReference(topVarName, s);\n  }\n",
        "begin_line": 229,
        "end_line": 232,
        "comment": "\n   * Determines whether a name reference in a particular scope is a global name\n   * reference.\n   *\n   * @param name A variable or property name (e.g. \"a\" or \"a.b.c.d\")\n   * @param s The scope in which the name is referenced\n   * @return Whether the name reference is a global name reference\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.getTopVarName#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.getTopVarName(java.lang.String)",
        "snippet": "  private String getTopVarName(String name) {\n    int firstDotIndex = name.indexOf('.');\n    return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);\n  }\n",
        "begin_line": 240,
        "end_line": 243,
        "comment": "\n   * Gets the top variable name from a possibly namespaced name.\n   *\n   * @param name A variable or qualified property name (e.g. \"a\" or \"a.b.c.d\")\n   * @return The top variable name (e.g. \"a\")\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.isGlobalVarReference#253",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.isGlobalVarReference(java.lang.String, com.google.javascript.jscomp.Scope)",
        "snippet": "  private boolean isGlobalVarReference(String name, Scope s) {\n    Scope.Var v = s.getVar(name);\n    if (v == null && externsScope != null) {\n      v = externsScope.getVar(name);\n    }\n    return v != null && !v.isLocal();\n  }\n",
        "begin_line": 253,
        "end_line": 259,
        "comment": "\n   * Determines whether a variable name reference in a particular scope is a\n   * global variable reference.\n   *\n   * @param name A variable name (e.g. \"a\")\n   * @param s The scope in which the name is referenced\n   * @return Whether the name reference is a global variable reference\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0504
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#2124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-cca1e02c-1c70-4f6a-8444-cc38a4f54ca5.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new VarCheck(compiler, true);\n    }\n",
        "begin_line": 2124,
        "end_line": 2127,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.05
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#2115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-4865c688-8cac-4ffd-870d-867d8afbb398.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AstValidator();\n    }\n",
        "begin_line": 2115,
        "end_line": 2118,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.05
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#1975",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-27470849-3805-440f-932b-ffe5629e280f.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new Denormalize(compiler);\n    }\n",
        "begin_line": 1975,
        "end_line": 1978,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.05
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#1962",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-6d51a319-2ce5-40e3-be0d-05188b07e5bf.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          compiler.setLifeCycleStage(LifeCycleStage.RAW);\n        }\n      };\n    }\n",
        "begin_line": 1962,
        "end_line": 1969,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.05
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#1965",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-18291434-89b1-4999-85a0-866534e2df5a.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override public void process(Node externs, Node root) {\n          compiler.setLifeCycleStage(LifeCycleStage.RAW);\n        }\n",
        "begin_line": 1965,
        "end_line": 1967,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.05
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#765",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-1ca0c0d6-51f9-4573-9107-c46f15aa4294.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler\n        compiler) {\n      return new CheckSideEffects.StripProtection(compiler);\n    }\n",
        "begin_line": 765,
        "end_line": 769,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.05
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSideEffects.StripProtection#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.StripProtection.StripProtection(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    StripProtection(AbstractCompiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.05
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSideEffects.process#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.StripProtection.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      NodeTraversal.traverse(compiler, root, this);\n    }\n",
        "begin_line": 212,
        "end_line": 215,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.05
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.process#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (externs != null) {\n      validateCodeRoot(externs);\n    }\n    if (root != null) {\n      validateCodeRoot(root);\n    }\n  }\n",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.05
        },
        "num_failing_tests": 1
    },
    {
        "name": "Denormalize.Denormalize#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "signature": "com.google.javascript.jscomp.Denormalize.Denormalize(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  Denormalize(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0498
        },
        "num_failing_tests": 1
    },
    {
        "name": "Denormalize.process#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "signature": "com.google.javascript.jscomp.Denormalize.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0498
        },
        "num_failing_tests": 1
    },
    {
        "name": "Denormalize.shouldTraverse#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "signature": "com.google.javascript.jscomp.Denormalize.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    return true;\n  }\n",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0498
        },
        "num_failing_tests": 1
    },
    {
        "name": "Denormalize.visit#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "signature": "com.google.javascript.jscomp.Denormalize.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    maybeCollapseIntoForStatements(n, parent);\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0498
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#1300",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-4741adf6-228e-42d5-abcf-b3be775b5662.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(final AbstractCompiler compiler) {\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          // Kill the global namespace so that it can be garbage collected\n          // after all passes are through with it.\n          namespaceForChecks = null;\n        }\n\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          process(null, null);\n        }\n      };\n    }\n",
        "begin_line": 1300,
        "end_line": 1315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#1303",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-cabc6792-8f4f-49e0-9802-777a9e520e11.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node jsRoot) {\n          // Kill the global namespace so that it can be garbage collected\n          // after all passes are through with it.\n          namespaceForChecks = null;\n        }\n",
        "begin_line": 1303,
        "end_line": 1308,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.getMainOptimizationLoop#676",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getMainOptimizationLoop()",
        "snippet": "  private List<PassFactory> getMainOptimizationLoop() {\n    List<PassFactory> passes = Lists.newArrayList();\n    if (options.inlineGetters) {\n      passes.add(inlineSimpleMethods);\n    }\n\n    passes.addAll(getCodeRemovingPasses());\n\n    if (options.inlineFunctions || options.inlineLocalFunctions) {\n      passes.add(inlineFunctions);\n    }\n\n    boolean runOptimizeCalls = options.optimizeCalls\n        || options.optimizeParameters\n        || options.optimizeReturns;\n\n    if (options.removeUnusedVars || options.removeUnusedLocalVars) {\n      if (options.deadAssignmentElimination) {\n        passes.add(deadAssignmentsElimination);\n      }\n      if (!runOptimizeCalls) {\n        passes.add(removeUnusedVars);\n      }\n    }\n    if (runOptimizeCalls) {\n      passes.add(optimizeCallsAndRemoveUnusedVars);\n    }\n    assertAllLoopablePasses(passes);\n    return passes;\n  }\n",
        "begin_line": 676,
        "end_line": 705,
        "comment": " Creates the passes for the main optimization loop. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.assertAllLoopablePasses#808",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory>)",
        "snippet": "  private void assertAllLoopablePasses(List<PassFactory> passes) {\n    for (PassFactory pass : passes) {\n      Preconditions.checkState(!pass.isOneTimePass());\n    }\n  }\n",
        "begin_line": 808,
        "end_line": 812,
        "comment": " Verify that all the passes are multi-run passes. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.compileInternal#645",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.compileInternal()",
        "snippet": "  private void compileInternal() {\n    parse();\n    if (hasErrors()) {\n      return;\n    }\n\n    if (!precheck()) {\n      return;\n    }\n\n    if (options.nameAnonymousFunctionsOnly) {\n      // TODO(nicksantos): Move this into an instrument() phase maybe?\n      check();\n      return;\n    }\n\n    if (!options.skipAllPasses) {\n      check();\n      if (hasErrors()) {\n        return;\n      }\n\n      if (options.isExternExportsEnabled()\n          || options.externExportsPath != null) {\n        externExports();\n      }\n\n      // IDE-mode is defined to stop here, before the heavy rewriting begins.\n      if (!options.ideMode) {\n        optimize();\n      }\n    }\n\n    if (options.recordFunctionInformation) {\n      recordFunctionInformation();\n    }\n\n    if (options.devMode == DevMode.START_AND_END) {\n      runSanityCheck();\n    }\n  }\n",
        "begin_line": 645,
        "end_line": 685,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.process#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.process(com.google.javascript.jscomp.CompilerPass)",
        "snippet": "  @Override\n  void process(CompilerPass p) {\n    p.process(externsRoot, jsRoot);\n  }\n",
        "begin_line": 781,
        "end_line": 784,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.maybeSanityCheck#794",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.maybeSanityCheck()",
        "snippet": "  private void maybeSanityCheck() {\n    if (options.devMode == DevMode.EVERY_PASS) {\n      runSanityCheck();\n    }\n  }\n",
        "begin_line": 794,
        "end_line": 798,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.startPass#854",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.startPass(java.lang.String)",
        "snippet": "  void startPass(String passName) {\n    Preconditions.checkState(currentTracer == null);\n    currentPassName = passName;\n    currentTracer = newTracer(passName);\n  }\n",
        "begin_line": 854,
        "end_line": 858,
        "comment": "\n   * Marks the beginning of a pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.endPass#863",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.endPass()",
        "snippet": "  void endPass() {\n    Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");\n    stopTracer(currentTracer, currentPassName);\n    String passToCheck = currentPassName;\n    currentPassName = null;\n    currentTracer = null;\n\n    maybeSanityCheck();\n  }\n",
        "begin_line": 863,
        "end_line": 872,
        "comment": "\n   * Marks the end of a pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.optimize#1748",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.optimize()",
        "snippet": "  public void optimize() {\n    // Ideally, this pass should be the first pass run, however:\n    // 1) VariableReferenceCheck reports unexpected warnings if Normalize\n    // is done first.\n    // 2) ReplaceMessages, stripCode, and potentially custom passes rely on\n    // unmodified local names.\n    normalize();\n\n    PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);\n    if (options.devMode == DevMode.EVERY_PASS) {\n      phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getOptimizations());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n      return;\n    }\n  }\n",
        "begin_line": 1748,
        "end_line": 1765,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.normalize#1805",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.normalize()",
        "snippet": "  public void normalize() {\n    logger.fine(\"Normalizing\");\n    startPass(\"normalize\");\n    process(new Normalize(this, false));\n    endPass();\n  }\n",
        "begin_line": 1805,
        "end_line": 1810,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessDefines.CollectDefines#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines.CollectDefines(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name>)",
        "snippet": "    CollectDefines(AbstractCompiler compiler, List<Name> listOfDefines) {\n      this.compiler = compiler;\n      this.allDefines = Maps.newHashMap();\n\n      assignableDefines = Maps.newHashMap();\n      assignAllowed = new ArrayDeque<Integer>();\n      assignAllowed.push(1);\n\n      // Create a map of references to defines keyed by node for easy lookup\n      allRefInfo = Maps.newHashMap();\n      for (Name name : listOfDefines) {\n        Ref decl = name.getDeclaration();\n        if (decl != null) {\n          allRefInfo.put(decl.node,\n                         new RefInfo(decl, name));\n        }\n        for (Ref ref : name.getRefs()) {\n          if (ref == decl) {\n            // Declarations were handled above.\n            continue;\n          }\n\n          // If there's a TWIN def, only put one of the twins in.\n          if (ref.getTwin() == null || !ref.getTwin().isSet()) {\n            allRefInfo.put(ref.node, new RefInfo(ref, name));\n          }\n        }\n      }\n    }\n",
        "begin_line": 237,
        "end_line": 265,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessDefines.getAllDefines#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines.getAllDefines()",
        "snippet": "    Map<String, DefineInfo> getAllDefines() {\n      return allDefines;\n    }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": "\n     * Get a map of {@link DefineInfo} structures, keyed by the name of\n     * the define.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessDefines.shouldTraverse#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      updateAssignAllowedStack(n, true);\n      return true;\n    }\n",
        "begin_line": 279,
        "end_line": 284,
        "comment": "\n     * Keeps track of whether the traversal is in a conditional branch.\n     * We traverse all nodes of the parse tree.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessDefines.ProcessDefines#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.ProcessDefines(com.google.javascript.jscomp.AbstractCompiler, java.util.Map<java.lang.String, com.google.javascript.rhino.Node>)",
        "snippet": "  ProcessDefines(AbstractCompiler compiler, Map<String, Node> replacements) {\n    this.compiler = compiler;\n    dominantReplacements = replacements;\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "\n   * Create a pass that overrides define constants.\n   *\n   * TODO(nicksantos): Write a builder to help JSCompiler induce\n   *    {@code replacements} from command-line flags\n   *\n   * @param replacements A hash table of names of defines to their replacements.\n   *   All replacements <b>must</b> be literals.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessDefines.injectNamespace#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.injectNamespace(com.google.javascript.jscomp.GlobalNamespace)",
        "snippet": "  ProcessDefines injectNamespace(GlobalNamespace namespace) {\n    this.namespace = namespace;\n    return this;\n  }\n",
        "begin_line": 110,
        "end_line": 113,
        "comment": "\n   * Injects a pre-computed global namespace, so that the same namespace\n   * can be re-used for multiple check passes. Returns {@code this} for\n   * easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessDefines.overrideDefines#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.overrideDefines(java.util.Map<java.lang.String, com.google.javascript.jscomp.ProcessDefines.DefineInfo>)",
        "snippet": "  private void overrideDefines(Map<String, DefineInfo> allDefines) {\n    boolean changed = false;\n    for (Map.Entry<String, DefineInfo> def : allDefines.entrySet()) {\n      String defineName = def.getKey();\n      DefineInfo info = def.getValue();\n      Node inputValue = dominantReplacements.get(defineName);\n      Node finalValue = inputValue != null ?\n          inputValue : info.getLastValue();\n      if (finalValue != info.initialValue) {\n        info.initialValueParent.replaceChild(\n            info.initialValue, finalValue.cloneTree());\n        compiler.addToDebugLog(\"Overriding @define variable \" + defineName);\n        changed = changed ||\n            finalValue.getType() != info.initialValue.getType() ||\n            !finalValue.isEquivalentTo(info.initialValue);\n      }\n    }\n\n    if (changed) {\n      compiler.reportCodeChange();\n    }\n\n    Set<String> unusedReplacements = dominantReplacements.keySet();\n    unusedReplacements.removeAll(allDefines.keySet());\n    unusedReplacements.removeAll(KNOWN_DEFINES);\n    for (String unknownDefine : unusedReplacements) {\n      compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));\n    }\n  }\n",
        "begin_line": 123,
        "end_line": 151,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.process#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    for (CompilerPass pass : passes) {\n      pass.process(externs, root);\n      if (hasHaltingErrors()) {\n        return;\n      }\n    }\n  }\n",
        "begin_line": 165,
        "end_line": 173,
        "comment": "\n   * Run all the passes in the optimizer.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.getNameIndex#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.getNameIndex()",
        "snippet": "  Map<String, Name> getNameIndex() {\n    ensureGenerated();\n    return nameMap;\n  }\n",
        "begin_line": 160,
        "end_line": 163,
        "comment": "\n   * Gets an index of all the global names, indexed by full qualified name\n   * (as in \"a\", \"a.b.c\", etc.).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.runInSerial#2196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runInSerial(java.util.Collection<com.google.javascript.jscomp.CompilerPass>)",
        "snippet": "  private static CompilerPass runInSerial(\n      final Collection<CompilerPass> passes) {\n    return new CompilerPass() {\n      @Override public void process(Node externs, Node root) {\n        for (CompilerPass pass : passes) {\n          pass.process(externs, root);\n        }\n      }\n    };\n  }\n",
        "begin_line": 2196,
        "end_line": 2205,
        "comment": " Create a compiler pass that runs the given passes in serial. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#2199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-83013763-2e65-4381-81d9-db71a79d80c7.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override public void process(Node externs, Node root) {\n        for (CompilerPass pass : passes) {\n          pass.process(externs, root);\n        }\n      }\n",
        "begin_line": 2199,
        "end_line": 2203,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#2160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-a58d2fe4-d257-4add-8b2c-9b7212ee2941.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "      @Override\n      protected CompilerPass createInternal(final AbstractCompiler compiler) {\n        return runInSerial();\n      }\n",
        "begin_line": 2160,
        "end_line": 2163,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#1282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-e8fdc932-39b2-431b-b593-f90c176e8a1a.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Node> replacements = getAdditionalReplacements(options);\n          replacements.putAll(options.getDefineReplacements());\n\n          new ProcessDefines(compiler, replacements)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n        }\n      };\n    }\n",
        "begin_line": 1282,
        "end_line": 1294,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#1285",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-19a0d44b-5ec9-416a-8fb2-c902715caa50.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Node> replacements = getAdditionalReplacements(options);\n          replacements.putAll(options.getDefineReplacements());\n\n          new ProcessDefines(compiler, replacements)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n        }\n",
        "begin_line": 1285,
        "end_line": 1292,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.runInSerial#2191",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.CompilerPass...)",
        "snippet": "  private static CompilerPass runInSerial(final CompilerPass ... passes) {\n    return runInSerial(Lists.newArrayList(passes));\n  }\n",
        "begin_line": 2191,
        "end_line": 2193,
        "comment": " Create a compiler pass that runs the given passes in serial. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.getAdditionalReplacements#2207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  @VisibleForTesting\n  static Map<String, Node> getAdditionalReplacements(\n      CompilerOptions options) {\n    Map<String, Node> additionalReplacements = Maps.newHashMap();\n\n    if (options.markAsCompiled || options.closurePass) {\n      additionalReplacements.put(COMPILED_CONSTANT_NAME, IR.trueNode());\n    }\n\n    if (options.closurePass && options.locale != null) {\n      additionalReplacements.put(CLOSURE_LOCALE_CONSTANT_NAME,\n          IR.string(options.locale));\n    }\n\n    return additionalReplacements;\n  }\n",
        "begin_line": 2207,
        "end_line": 2222,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.shouldStrip#1919",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TweakProcessing.shouldStrip()",
        "snippet": "    public boolean shouldStrip() {\n      return this == STRIP;\n    }\n",
        "begin_line": 1919,
        "end_line": 1921,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getDefineReplacements#903",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getDefineReplacements()",
        "snippet": "  public Map<String, Node> getDefineReplacements() {\n    return getReplacementsHelper(defineReplacements);\n  }\n",
        "begin_line": 903,
        "end_line": 905,
        "comment": "\n   * Returns the map of define replacements.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getReplacementsHelper#917",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getReplacementsHelper(java.util.Map<java.lang.String, java.lang.Object>)",
        "snippet": "  private static Map<String, Node> getReplacementsHelper(\n      Map<String, Object> source) {\n    Map<String, Node> map = Maps.newHashMap();\n    for (Map.Entry<String, Object> entry : source.entrySet()) {\n      String name = entry.getKey();\n      Object value = entry.getValue();\n      if (value instanceof Boolean) {\n        map.put(name, NodeUtil.booleanNode(((Boolean) value).booleanValue()));\n      } else if (value instanceof Integer) {\n        map.put(name, IR.number(((Integer) value).intValue()));\n      } else if (value instanceof Double) {\n        map.put(name, IR.number(((Double) value).doubleValue()));\n      } else {\n        Preconditions.checkState(value instanceof String);\n        map.put(name, IR.string((String) value));\n      }\n    }\n    return map;\n  }\n",
        "begin_line": 917,
        "end_line": 935,
        "comment": "\n   * Creates a map of String->Node from a map of String->Number/String/Boolean.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.isExternExportsEnabled#1316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.isExternExportsEnabled()",
        "snippet": "  public boolean isExternExportsEnabled() {\n    return externExports;\n  }\n",
        "begin_line": 1316,
        "end_line": 1318,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.check#735",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.check()",
        "snippet": "  public void check() {\n    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n\n    PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);\n    if (options.devMode == DevMode.EVERY_PASS) {\n      phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getChecks());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n      return;\n    }\n\n    // TODO(nicksantos): clean this up. The flow here is too hard to follow.\n    if (options.nameAnonymousFunctionsOnly) {\n      return;\n    }\n\n    if (options.removeTryCatchFinally) {\n      removeTryCatchFinally();\n    }\n\n    if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty()) {\n      stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);\n    }\n\n    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n  }\n",
        "begin_line": 735,
        "end_line": 767,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.BuildGlobalNamespace#280",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.BuildGlobalNamespace()",
        "snippet": "    BuildGlobalNamespace() {\n      this(null);\n    }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.BuildGlobalNamespace#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.BuildGlobalNamespace(com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "    BuildGlobalNamespace(Predicate<Node> nodeFilter) {\n      this.nodeFilter = nodeFilter;\n    }\n",
        "begin_line": 288,
        "end_line": 290,
        "comment": "\n     * Builds a global namepsace, but only visits nodes that match the\n     * given filter.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.visit#292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {}\n",
        "begin_line": 292,
        "end_line": 293,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.shouldTraverse#296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      collect(t, n, parent);\n      return true;\n    }\n",
        "begin_line": 296,
        "end_line": 300,
        "comment": " Collect the references in pre-order. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.GlobalNamespace#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node)",
        "snippet": "  GlobalNamespace(AbstractCompiler compiler, Node root) {\n    this(compiler, null, root);\n  }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n   * Creates an instance that may emit warnings when building the namespace.\n   *\n   * @param compiler The AbstractCompiler, for reporting code changes\n   * @param root The root of the rest of the code to build a namespace for.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.GlobalNamespace#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root) {\n    this.compiler = compiler;\n    this.externsRoot = externsRoot;\n    this.root = root;\n  }\n",
        "begin_line": 93,
        "end_line": 97,
        "comment": "\n   * Creates an instance that may emit warnings when building the namespace.\n   *\n   * @param compiler The AbstractCompiler, for reporting code changes\n   * @param externsRoot The root of the externs to build a namespace for. If\n   *     this is null, externs and properties defined on extern types will not\n   *     be included in the global namespace.  If non-null, it allows\n   *     user-defined function on extern types to be included in the global\n   *     namespace.  E.g. String.foo.\n   * @param root The root of the rest of the code to build a namespace for.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.ensureGenerated#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.ensureGenerated()",
        "snippet": "  private void ensureGenerated() {\n    if (!generated) {\n      process();\n    }\n  }\n",
        "begin_line": 141,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.process#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.process()",
        "snippet": "  private void process() {\n    if (externsRoot != null) {\n      inExterns = true;\n      NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace());\n    }\n    inExterns = false;\n\n    NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());\n    generated = true;\n  }\n",
        "begin_line": 210,
        "end_line": 219,
        "comment": "\n   * Builds the namespace lazily.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isConstant#436",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isConstant()",
        "snippet": "  public boolean isConstant() {\n    return getFlag(MASK_CONSTANT) || isDefine();\n  }\n",
        "begin_line": 436,
        "end_line": 438,
        "comment": "\n   * Returns whether the {@code @const} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.049
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.visit#232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.VerifyConstants.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName()) {\n        String name = n.getString();\n        if (n.getString().isEmpty()) {\n          return;\n        }\n\n        boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (checkUserDeclarations) {\n          boolean expectedConst = false;\n          CodingConvention convention = compiler.getCodingConvention();\n          if (NodeUtil.isConstantName(n)\n              || NodeUtil.isConstantByConvention(convention, n, parent)) {\n            expectedConst = true;\n          } else {\n            expectedConst = false;\n\n            JSDocInfo info = null;\n            Var var = t.getScope().getVar(n.getString());\n            if (var != null) {\n              info = var.getJSDocInfo();\n            }\n\n            if (info != null && info.isConstant()) {\n              expectedConst = true;\n            } else {\n              expectedConst = false;\n            }\n          }\n\n          if (expectedConst) {\n            Preconditions.checkState(expectedConst == isConst,\n                \"The name %s is not annotated as constant.\", name);\n          } else {\n            Preconditions.checkState(expectedConst == isConst,\n                \"The name %s should not be annotated as constant.\", name);\n          }\n        }\n\n        Boolean value = constantMap.get(name);\n        if (value == null) {\n          constantMap.put(name, isConst);\n        } else {\n          Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name %s is not consistently annotated as constant.\", name);\n        }\n      }\n    }\n",
        "begin_line": 232,
        "end_line": 280,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "VarCheck.visit#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.NameRefInExternsCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName()) {\n        switch (parent.getType()) {\n          case Token.VAR:\n          case Token.FUNCTION:\n          case Token.PARAM_LIST:\n            // These are okay.\n            break;\n          case Token.GETPROP:\n            if (n == parent.getFirstChild()) {\n              Scope scope = t.getScope();\n              Scope.Var var = scope.getVar(n.getString());\n              if (var == null) {\n                t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString());\n                varsToDeclareInExterns.add(n.getString());\n              }\n            }\n            break;\n          default:\n            t.report(n, NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString());\n\n            Scope scope = t.getScope();\n            Scope.Var var = scope.getVar(n.getString());\n            if (var == null) {\n              varsToDeclareInExterns.add(n.getString());\n            }\n            break;\n        }\n      }\n    }\n",
        "begin_line": 233,
        "end_line": 263,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0488
        },
        "num_failing_tests": 1
    },
    {
        "name": "VarCheck.VarCheck#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.VarCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  VarCheck(AbstractCompiler compiler) {\n    this(compiler, false);\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0486
        },
        "num_failing_tests": 1
    },
    {
        "name": "VarCheck.VarCheck#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.VarCheck(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  VarCheck(AbstractCompiler compiler, boolean sanityCheck) {\n    this.compiler = compiler;\n    this.strictExternCheck = compiler.getErrorLevel(\n        JSError.make(\"\", 0, 0, UNDEFINED_EXTERN_VAR_ERROR)) == CheckLevel.ERROR;\n    this.sanityCheck = sanityCheck;\n  }\n",
        "begin_line": 86,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0486
        },
        "num_failing_tests": 1
    },
    {
        "name": "VarCheck.process#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    // Don't run externs-checking in sanity check mode. Normalization will\n    // remove duplicate VAR declarations, which will make\n    // externs look like they have assigns.\n    if (!sanityCheck) {\n      NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());\n    }\n\n    NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), this);\n    for (String varName : varsToDeclareInExterns) {\n      createSynthesizedExternVar(varName);\n    }\n  }\n",
        "begin_line": 93,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0486
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#1055",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-90ce51c1-1878-42db-9f5a-d35073735075.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new VarCheck(compiler);\n    }\n",
        "begin_line": 1055,
        "end_line": 1058,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0486
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getErrorLevel#1952",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorLevel(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel getErrorLevel(JSError error) {\n    Preconditions.checkNotNull(options);\n    return warningsGuard.level(error);\n  }\n",
        "begin_line": 1952,
        "end_line": 1956,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0486
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.make#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.make(java.lang.String, int, int, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public static JSError make(String sourceName, int lineno, int charno,\n                             DiagnosticType type, String... arguments) {\n    return new JSError(sourceName, null, lineno, charno, type, null, arguments);\n  }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "\n   * Creates a JSError at a given source location\n   *\n   * @param sourceName The source file name\n   * @param lineno Line number with source file, or -1 if unknown\n   * @param charno Column number within line, or -1 for whole line.\n   * @param type The DiagnosticType\n   * @param arguments Arguments to be incorporated into the message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0485
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSideEffects.visit#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    int pt = parent.getType();\n    if (pt == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() &&\n          parent == gramps.getFirstChild()) {\n        // Semantically, a direct call to eval is different from an indirect\n        // call to an eval. See Ecma-262 S15.1.2.1. So it's ok for the first\n        // expression to a comma to be a no-op if it's used to indirect\n        // an eval.\n        if (n == parent.getFirstChild() &&\n            parent.getChildCount() == 2 &&\n            n.getNext().isName() &&\n            \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT &&\n              ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (pt != Token.EXPR_RESULT && pt != Token.BLOCK) {\n      if (pt == Token.FOR && parent.getChildCount() == 4 &&\n          (n == parent.getFirstChild() ||\n           n == parent.getFirstChild().getNext().getNext())) {\n        // Fall through and look for warnings for the 1st and 3rd child\n        // of a for.\n      } else {\n        return;  // it might be ok to not have a side-effect\n      }\n    }\n\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (isSimpleOp ||\n        !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        // This no-op statement was there so that JSDoc information could\n        // be attached to the name. This check should not complain about it.\n        return;\n      } else if (n.isExprResult()) {\n        // we already reported the problem when we visited the child.\n        return;\n      }\n\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "begin_line": 83,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0485
        },
        "num_failing_tests": 1
    },
    {
        "name": "WarningsGuard.disables#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  protected boolean disables(DiagnosticGroup group) {\n    return false;\n  }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n   * Returns whether all warnings in the given diagnostic group will be\n   * filtered out. Used to determine which passes to skip.\n   *\n   * @param group A group of DiagnosticTypes.\n   * @return Whether all warnings of these types are disabled by this guard.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.048
        },
        "num_failing_tests": 1
    },
    {
        "name": "WarningsGuard.enables#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  protected boolean enables(DiagnosticGroup group) {\n    return false;\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "\n   * Returns whether any of the warnings in the given diagnostic group will be\n   * upgraded to a warning or error.\n   *\n   * @param group A group of DiagnosticTypes.\n   * @return Whether any warnings of these types are enabled by this guard.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.048
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isDefine#453",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isDefine()",
        "snippet": "  public boolean isDefine() {\n    return getFlag(MASK_DEFINE);\n  }\n",
        "begin_line": 453,
        "end_line": 455,
        "comment": "\n   * Returns whether the {@code @define} annotation is present on this\n   * {@link JSDocInfo}. If this annotation is present, then the\n   * {@link #getType()} method will retrieve the define type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0479
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.PassFactoryDelegate#264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.PassFactoryDelegate.PassFactoryDelegate(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.PassFactory)",
        "snippet": "    private PassFactoryDelegate(\n        AbstractCompiler myCompiler, PassFactory factory) {\n      super(factory.getName());\n      this.myCompiler = myCompiler;\n      this.factory = factory;\n    }\n",
        "begin_line": 264,
        "end_line": 269,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.processInternal#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.PassFactoryDelegate.processInternal(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void processInternal(Node externs, Node root) {\n      factory.create(myCompiler).process(externs, root);\n    }\n",
        "begin_line": 271,
        "end_line": 274,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.NamedPass#242",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.NamedPass.NamedPass(java.lang.String)",
        "snippet": "    NamedPass(String name) {\n      this.name = name;\n    }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.process#246",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.NamedPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      logger.fine(name);\n      startPass(name);\n      processInternal(externs, root);\n      endPass(externs, root);\n    }\n",
        "begin_line": 246,
        "end_line": 252,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.PhaseOptimizer#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.PhaseOptimizer(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.PerformanceTracker)",
        "snippet": "  PhaseOptimizer(AbstractCompiler compiler, PerformanceTracker tracker) {\n    this.compiler = compiler;\n    this.tracker = tracker;\n    compiler.addChangeHandler(recentChange);\n  }\n",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.consume#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.consume(java.util.List<com.google.javascript.jscomp.PassFactory>)",
        "snippet": "  void consume(List<PassFactory> factories) {\n    Loop currentLoop = new LoopInternal();\n    boolean isCurrentLoopPopulated = false;\n    for (PassFactory factory : factories) {\n      if (factory.isOneTimePass()) {\n        if (isCurrentLoopPopulated) {\n          passes.add(currentLoop);\n\n          currentLoop = new LoopInternal();\n          isCurrentLoopPopulated = false;\n        }\n        addOneTimePass(factory);\n      } else {\n        currentLoop.addLoopedPass(factory);\n        isCurrentLoopPopulated = true;\n      }\n    }\n\n    if (isCurrentLoopPopulated) {\n      passes.add(currentLoop);\n    }\n  }\n",
        "begin_line": 113,
        "end_line": 134,
        "comment": "\n   * Add the passes generated by the given factories to the compile sequence.\n   *\n   * Automatically pulls multi-run passes into fixed point loops. If there\n   * are 2 or more multi-run passes in a row, they will run together in\n   * the same fixed point loop. If A and B are in the same fixed point loop,\n   * the loop will continue to run both A and B until both are finished\n   * making changes.\n   *\n   * Other than that, the PhaseOptimizer is free to tweak the order and\n   * frequency of multi-run passes in a fixed-point loop.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.addOneTimePass#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.addOneTimePass(com.google.javascript.jscomp.PassFactory)",
        "snippet": "  void addOneTimePass(PassFactory factory) {\n    passes.add(new PassFactoryDelegate(compiler, factory));\n  }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\n   * Add the pass generated by the given factory to the compile sequence.\n   * This pass will be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.startPass#178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.startPass(java.lang.String)",
        "snippet": "  private void startPass(String passName) {\n    Preconditions.checkState(currentTracer == null && currentPassName == null);\n    currentPassName = passName;\n    currentTracer = newTracer(passName);\n  }\n",
        "begin_line": 178,
        "end_line": 182,
        "comment": "\n   * Marks the beginning of a pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.endPass#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.endPass(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void endPass(Node externs, Node root) {\n    Preconditions.checkState(currentTracer != null && currentPassName != null);\n\n    String passToCheck = currentPassName;\n    try {\n      stopTracer(currentTracer, currentPassName);\n      currentPassName = null;\n      currentTracer = null;\n\n      maybeSanityCheck(externs, root);\n    } catch (Exception e) {\n      // TODO(johnlenz): Remove this once the normalization checks report\n      // errors instead of exceptions.\n      throw new RuntimeException(\"Sanity check failed for \" + passToCheck, e);\n    }\n  }\n",
        "begin_line": 187,
        "end_line": 202,
        "comment": "\n   * Marks the end of a pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.maybeSanityCheck#207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.maybeSanityCheck(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  void maybeSanityCheck(Node externs, Node root) {\n    if (sanityCheck != null) {\n      sanityCheck.create(compiler).process(externs, root);\n    }\n  }\n",
        "begin_line": 207,
        "end_line": 211,
        "comment": "\n   * Runs the sanity check if it is available.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.hasHaltingErrors#213",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.hasHaltingErrors()",
        "snippet": "  private boolean hasHaltingErrors() {\n    return compiler.hasHaltingErrors();\n  }\n",
        "begin_line": 213,
        "end_line": 215,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.newTracer#220",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.newTracer(java.lang.String)",
        "snippet": "  private Tracer newTracer(String passName) {\n    String comment = passName +\n        (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (tracker != null) {\n      tracker.recordPassStart(passName);\n    }\n    return new Tracer(\"JSCompiler\", comment);\n  }\n",
        "begin_line": 220,
        "end_line": 227,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.stopTracer#229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
        "snippet": "  private void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (tracker != null) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 229,
        "end_line": 234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PassFactory.getName#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.getName()",
        "snippet": "  String getName() {\n    return name;\n  }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "\n   * @return The name of this pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PassFactory.isOneTimePass#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass()",
        "snippet": "  boolean isOneTimePass() {\n    return isOneTimePass;\n  }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n   * @return Whether the pass produced by this factory can only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "PassFactory.create#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  final CompilerPass create(AbstractCompiler compiler) {\n    Preconditions.checkState(!isCreated || !isOneTimePass,\n        \"One-time passes cannot be run multiple times: %s\", name);\n    isCreated = true;\n    return createInternal(compiler);\n  }\n",
        "begin_line": 85,
        "end_line": 90,
        "comment": "\n   * Creates a new compiler pass to be run.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getCompiler#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getCompiler()",
        "snippet": "  public Compiler getCompiler() {\n    // TODO(nicksantos): Remove this type cast. This is just temporary\n    // while refactoring.\n    return (Compiler) compiler;\n  }\n",
        "begin_line": 398,
        "end_line": 402,
        "comment": "\n   * Gets the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.isSubGroup#117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.isSubGroup(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean isSubGroup(DiagnosticGroup group) {\n    for (DiagnosticType type : group.types) {\n      if (!matches(type)) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 117,
        "end_line": 124,
        "comment": "\n   * Returns whether all of the types in the given group are in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createEmptyPass#2158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(java.lang.String)",
        "snippet": "  static PassFactory createEmptyPass(String name) {\n    return new PassFactory(name, true) {\n      @Override\n      protected CompilerPass createInternal(final AbstractCompiler compiler) {\n        return runInSerial();\n      }\n    };\n  }\n",
        "begin_line": 2158,
        "end_line": 2165,
        "comment": "\n   * Create a no-op pass that can only run once. Used to break up loops.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createInternal#745",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-0c3e65ac-a836-41c5-8fdb-654c3d0b5763.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(final AbstractCompiler\n        compiler) {\n      // The current approach to protecting \"hidden\" side-effects is to\n      // wrap them in a function call that is stripped later, this shouldn't\n      // be done in IDE mode where AST changes may be unexpected.\n      boolean protectHiddenSideEffects =\n          options.protectHiddenSideEffects && !options.ideMode;\n      return new CheckSideEffects(compiler,\n          options.checkSuspiciousCode ? CheckLevel.WARNING : CheckLevel.OFF,\n              protectHiddenSideEffects);\n    }\n",
        "begin_line": 745,
        "end_line": 756,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.getChecks#189",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getChecks()",
        "snippet": "  @Override\n  protected List<PassFactory> getChecks() {\n    List<PassFactory> checks = Lists.newArrayList();\n\n    if (options.closurePass) {\n      checks.add(closureGoogScopeAliases);\n    }\n\n    if (options.nameAnonymousFunctionsOnly) {\n      if (options.anonymousFunctionNaming ==\n          AnonymousFunctionNamingPolicy.MAPPED) {\n        checks.add(nameMappedAnonymousFunctions);\n      } else if (options.anonymousFunctionNaming ==\n          AnonymousFunctionNamingPolicy.UNMAPPED) {\n        checks.add(nameUnmappedAnonymousFunctions);\n      }\n      return checks;\n    }\n\n    checks.add(checkSideEffects);\n\n    if (options.checkSuspiciousCode ||\n        options.enables(DiagnosticGroups.GLOBAL_THIS) ||\n        options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {\n      checks.add(suspiciousCode);\n    }\n\n    if (options.checkControlStructures\n        || options.enables(DiagnosticGroups.ES5_STRICT))  {\n      checks.add(checkControlStructures);\n    }\n\n    if (options.checkRequires.isOn()) {\n      checks.add(checkRequires);\n    }\n\n    if (options.checkProvides.isOn()) {\n      checks.add(checkProvides);\n    }\n\n    // The following passes are more like \"preprocessor\" passes.\n    // It's important that they run before most checking passes.\n    // Perhaps this method should be renamed?\n    if (options.generateExports) {\n      checks.add(generateExports);\n    }\n\n    if (options.exportTestFunctions) {\n      checks.add(exportTestFunctions);\n    }\n\n    if (options.closurePass) {\n      checks.add(closurePrimitives.makeOneTimePass());\n    }\n\n    if (options.jqueryPass) {\n      checks.add(jqueryAliases.makeOneTimePass());\n    }\n\n    if (options.closurePass && options.checkMissingGetCssNameLevel.isOn()) {\n      checks.add(closureCheckGetCssName);\n    }\n\n    if (options.syntheticBlockStartMarker != null) {\n      // This pass must run before the first fold constants pass.\n      checks.add(createSyntheticBlocks);\n    }\n\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n      checks.add(checkRegExp);\n    }\n\n    if (options.aggressiveVarCheck.isOn()) {\n      checks.add(checkVariableReferences);\n    }\n\n    // This pass should run before types are assigned.\n    if (options.processObjectPropertyString) {\n      checks.add(objectPropertyStringPreprocess);\n    }\n\n    if (options.checkTypes || options.inferTypes) {\n      checks.add(resolveTypes.makeOneTimePass());\n      checks.add(inferTypes.makeOneTimePass());\n      if (options.checkTypes) {\n        checks.add(checkTypes.makeOneTimePass());\n      } else {\n        checks.add(inferJsDocInfo.makeOneTimePass());\n      }\n    }\n\n    if (options.checkUnreachableCode.isOn() ||\n        (options.checkTypes && options.checkMissingReturn.isOn())) {\n      checks.add(checkControlFlow);\n    }\n\n    // CheckAccessControls only works if check types is on.\n    if (options.checkTypes &&\n        (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n         || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n      checks.add(checkAccessControls);\n    }\n\n    if (options.checkGlobalNamesLevel.isOn()) {\n      checks.add(checkGlobalNames);\n    }\n\n    if (options.enables(DiagnosticGroups.ES5_STRICT) || options.checkCaja) {\n      checks.add(checkStrictMode);\n    }\n\n    // Replace 'goog.getCssName' before processing defines but after the\n    // other checks have been done.\n    if (options.closurePass) {\n      checks.add(closureReplaceGetCssName);\n    }\n\n    // i18n\n    // If you want to customize the compiler to use a different i18n pass,\n    // you can create a PassConfig that calls replacePassFactory\n    // to replace this.\n    checks.add(options.messageBundle != null ?\n        replaceMessages : createEmptyPass(\"replaceMessages\"));\n\n    if (options.getTweakProcessing().isOn()) {\n      checks.add(processTweaks);\n    }\n\n    // Defines in code always need to be processed.\n    checks.add(processDefines);\n\n    if (options.instrumentationTemplate != null ||\n        options.recordFunctionInformation) {\n      checks.add(computeFunctionNames);\n    }\n\n    if (options.nameReferenceGraphPath != null &&\n        !options.nameReferenceGraphPath.isEmpty()) {\n      checks.add(printNameReferenceGraph);\n    }\n\n    if (options.nameReferenceReportPath != null &&\n        !options.nameReferenceReportPath.isEmpty()) {\n      checks.add(printNameReferenceReport);\n    }\n\n    assertAllOneTimePasses(checks);\n    return checks;\n  }\n",
        "begin_line": 189,
        "end_line": 338,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.assertAllOneTimePasses#801",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory>)",
        "snippet": "  private void assertAllOneTimePasses(List<PassFactory> passes) {\n    for (PassFactory pass : passes) {\n      Preconditions.checkState(pass.isOneTimePass());\n    }\n  }\n",
        "begin_line": 801,
        "end_line": 805,
        "comment": " Verify that all the passes are one-time passes. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.isOn#1915",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TweakProcessing.isOn()",
        "snippet": "    public boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 1915,
        "end_line": 1917,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getTweakProcessing#1334",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getTweakProcessing()",
        "snippet": "  public TweakProcessing getTweakProcessing() {\n    return tweakProcessing;\n  }\n",
        "begin_line": 1334,
        "end_line": 1336,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.runCustomPasses#835",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime)",
        "snippet": "  private void runCustomPasses(CustomPassExecutionTime executionTime) {\n    if (options.customPasses != null) {\n      Tracer t = newTracer(\"runCustomPasses\");\n      try {\n        for (CompilerPass p : options.customPasses.get(executionTime)) {\n          process(p);\n        }\n      } finally {\n        stopTracer(t, \"runCustomPasses\");\n      }\n    }\n  }\n",
        "begin_line": 835,
        "end_line": 846,
        "comment": "\n   * Runs custom passes that are designated to run at a particular time.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSideEffects.CheckSideEffects#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.CheckSideEffects(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel, boolean)",
        "snippet": "  CheckSideEffects(AbstractCompiler compiler, CheckLevel level,\n      boolean protectSideEffectFreeCode) {\n    this.compiler = compiler;\n    this.level = level;\n    this.protectSideEffectFreeCode = protectSideEffectFreeCode;\n  }\n",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSideEffects.process#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n\n    // Code with hidden side-effect code is common, for example\n    // accessing \"el.offsetWidth\" forces a reflow in browsers, to allow this\n    // will still allowing local dead code removal in general,\n    // protect the \"side-effect free\" code in the source.\n    //\n    if (protectSideEffectFreeCode) {\n      protectSideEffects();\n    }\n  }\n",
        "begin_line": 64,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.disables#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean disables(DiagnosticGroup otherGroup) {\n    return !level.isOn() && group.isSubGroup(otherGroup);\n  }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0476
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.precheck#731",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.precheck()",
        "snippet": "  boolean precheck() {\n    return true;\n  }\n",
        "begin_line": 731,
        "end_line": 733,
        "comment": "\n   * Carry out any special checks or procedures that need to be done before\n   * proceeding with rest of the compilation process.\n   *\n   * @return true, to continue with compilation\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0475
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.getType#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.getType()",
        "snippet": "  public DiagnosticType getType() {\n    return type;\n  }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0471
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.level#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    return group.matches(error) ? level : null;\n  }\n",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0471
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.matches#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.JSError)",
        "snippet": "  public boolean matches(JSError error) {\n    return matches(error.getType());\n  }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n   * Returns whether the given error's type matches a type\n   * in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0471
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.StringNode#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String, int, int)",
        "snippet": "    StringNode(int type, String str, int lineno, int charno) {\n      super(type, lineno, charno);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 203,
        "end_line": 209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#444",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, int, int)",
        "snippet": "  public Node(int nodeType, int lineno, int charno) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 444,
        "end_line": 448,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newString#519",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(java.lang.String, int, int)",
        "snippet": "  public static Node newString(String str, int lineno, int charno) {\n    return new StringNode(Token.STRING, str, lineno, charno);\n  }\n",
        "begin_line": 519,
        "end_line": 521,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setLength#1123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLength(int)",
        "snippet": "  public void setLength(int length) {\n    putIntProp(LENGTH, length);\n  }\n",
        "begin_line": 1123,
        "end_line": 1125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeExpression.JSTypeExpression#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "signature": "com.google.javascript.rhino.JSTypeExpression.JSTypeExpression(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  public JSTypeExpression(Node root, String sourceName) {\n    this.root = root;\n    this.sourceName = sourceName;\n  }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.markTypeNode#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markTypeNode(com.google.javascript.rhino.Node, int, int, int, int, boolean)",
        "snippet": "  public void markTypeNode(Node typeNode, int lineno, int startCharno,\n      int endLineno, int endCharno, boolean hasLC) {\n    if (currentMarker != null) {\n      JSDocInfo.TypePosition position = new JSDocInfo.TypePosition();\n      position.setItem(typeNode);\n      position.setHasBrackets(hasLC);\n      position.setPositionInformation(lineno, startCharno,\n          endLineno, endCharno);\n      currentMarker.setType(position);\n    }\n  }\n",
        "begin_line": 181,
        "end_line": 191,
        "comment": "\n   * Adds a type declaration to the current marker.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordType#434",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordType(JSTypeExpression type) {\n    if (type != null && !hasAnyTypeRelatedTags()) {\n      currentInfo.setType(type);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 434,
        "end_line": 442,
        "comment": "\n   * Records a type.\n   *\n   * @return {@code true} if the type was recorded and {@code false} if\n   *     it is invalid or was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordReturnType#481",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordReturnType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordReturnType(JSTypeExpression jsType) {\n    if (jsType != null && currentInfo.getReturnType() == null &&\n        !hasAnySingletonTypeTags()) {\n      currentInfo.setReturnType(jsType);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 481,
        "end_line": 490,
        "comment": "\n   * Records a return type.\n   *\n   * @return {@code true} if the return type was recorded and {@code false} if\n   *     it is invalid or was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.hasAnyTypeRelatedTags#948",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnyTypeRelatedTags()",
        "snippet": "  private boolean hasAnyTypeRelatedTags() {\n    return currentInfo.isConstructor() ||\n        currentInfo.isInterface() ||\n        currentInfo.getParameterCount() > 0 ||\n        currentInfo.hasReturnType() ||\n        currentInfo.hasBaseType() ||\n        currentInfo.getExtendedInterfacesCount() > 0 ||\n        currentInfo.getLendsName() != null ||\n        currentInfo.hasThisType() ||\n        hasAnySingletonTypeTags();\n  }\n",
        "begin_line": 948,
        "end_line": 958,
        "comment": "\n   * Whether the current doc info has other type tags, like\n   * {@code @param} or {@code @return} or {@code @type} or etc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setType#988",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  void setType(JSTypeExpression type) {\n    setType(type, TYPEFIELD_TYPE);\n  }\n",
        "begin_line": 988,
        "end_line": 990,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setReturnType#992",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setReturnType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  void setReturnType(JSTypeExpression type) {\n    setType(type, TYPEFIELD_RETURN);\n  }\n",
        "begin_line": 992,
        "end_line": 994,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setType#1004",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setType(com.google.javascript.rhino.JSTypeExpression, int)",
        "snippet": "  private void setType(JSTypeExpression type, int mask) {\n    if ((bitset & MASK_TYPEFIELD) != 0) {\n      throw new IllegalStateException(\n          \"API tried to add two incompatible type tags. \" +\n          \"This should have been blocked and emitted a warning.\");\n    }\n    this.bitset = (bitset & MASK_FLAGS) | mask;\n    this.type = type;\n  }\n",
        "begin_line": 1004,
        "end_line": 1012,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getReturnType#1070",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getReturnType()",
        "snippet": "  public JSTypeExpression getReturnType() {\n    return getType(TYPEFIELD_RETURN);\n  }\n",
        "begin_line": 1070,
        "end_line": 1072,
        "comment": "\n   * Gets the return type specified by the {@code @return} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getType#1088",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getType(int)",
        "snippet": "  private JSTypeExpression getType(int typefield) {\n    if ((MASK_TYPEFIELD & bitset) == typefield) {\n      return type;\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 1088,
        "end_line": 1094,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getBaseType#1126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getBaseType()",
        "snippet": "  public JSTypeExpression getBaseType() {\n    return (info == null) ? null : info.baseType;\n  }\n",
        "begin_line": 1126,
        "end_line": 1128,
        "comment": "\n   * Gets the base type specified by the {@code @extends} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getLendsName#1170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getLendsName()",
        "snippet": "  public String getLendsName() {\n    return (info == null) ? null : info.lendsName;\n  }\n",
        "begin_line": 1170,
        "end_line": 1172,
        "comment": "\n   * Gets the name we're lending to in a {@code @lends} annotation.\n   *\n   * In many reflection APIs, you pass an anonymous object to a function,\n   * and that function mixes the anonymous object into another object.\n   * The {@code @lends} annotation allows the type system to track\n   * those property assignments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasBaseType#1207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasBaseType()",
        "snippet": "  public boolean hasBaseType() {\n    return getBaseType() != null;\n  }\n",
        "begin_line": 1207,
        "end_line": 1209,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @extends}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getExtendedInterfacesCount#1284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getExtendedInterfacesCount()",
        "snippet": "  public int getExtendedInterfacesCount() {\n    if (info == null || info.extendedInterfaces == null) {\n      return 0;\n    }\n    return info.extendedInterfaces.size();\n  }\n",
        "begin_line": 1284,
        "end_line": 1289,
        "comment": "\n   * Gets the number of extended interfaces specified\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.ungetCharIgnoreLineEnd#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetCharIgnoreLineEnd(int)",
        "snippet": "  private void ungetCharIgnoreLineEnd(int c) {\n    ungetBuffer[ungetCursor++] = c;\n    cursor--;\n  }\n",
        "begin_line": 438,
        "end_line": 441,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.getSourceName#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.getSourceName()",
        "snippet": "  private String getSourceName() {\n    return sourceFile == null ? null : sourceFile.getName();\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseAndRecordTypeNode#1060",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseAndRecordTypeNode(JsDocToken token) {\n    return parseAndRecordTypeNode(token, token == JsDocToken.LC);\n  }\n",
        "begin_line": 1060,
        "end_line": 1062,
        "comment": "\n   * Looks for a type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * @param token The current token.\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseAndRecordTypeNode#1072",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken, boolean)",
        "snippet": "  private Node parseAndRecordTypeNode(JsDocToken token, boolean matchingLC) {\n    return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n        matchingLC, false);\n  }\n",
        "begin_line": 1072,
        "end_line": 1075,
        "comment": "\n   * Looks for a type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * @param token The current token.\n   * @param matchingLC Whether the type expression starts with a \"{\".\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseAndRecordTypeNode#1134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken, int, int, boolean, boolean)",
        "snippet": "  private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n                                      int startCharno,\n                                      boolean matchingLC,\n                                      boolean onlyParseSimpleNames) {\n    Node typeNode = null;\n\n    if (onlyParseSimpleNames) {\n      typeNode = parseTypeNameAnnotation(token);\n    } else {\n      typeNode = parseTypeExpressionAnnotation(token);\n    }\n\n    if (typeNode != null && !matchingLC) {\n      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n    }\n\n    if (typeNode != null) {\n      int endLineno = stream.getLineno();\n      int endCharno = stream.getCharno();\n\n      jsdocBuilder.markTypeNode(\n          typeNode, lineno, startCharno, endLineno, endCharno, matchingLC);\n    }\n\n    return typeNode;\n  }\n",
        "begin_line": 1134,
        "end_line": 1159,
        "comment": "\n   * Looks for a parameter type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * @param token The current token.\n   * @param lineno The line of the type expression.\n   * @param startCharno The starting character position of the type expression.\n   * @param matchingLC Whether the type expression starts with a \"{\".\n   * @param onlyParseSimpleNames If true, only simple type names are parsed\n   *     (via a call to parseTypeNameAnnotation instead of\n   *     parseTypeExpressionAnnotation).\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.createJSTypeExpression#1229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.createJSTypeExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private JSTypeExpression createJSTypeExpression(Node n) {\n    return n == null ? null :\n        new JSTypeExpression(n, getSourceName());\n  }\n",
        "begin_line": 1229,
        "end_line": 1232,
        "comment": "\n   * Constructs a new {@code JSTypeExpression}.\n   * @param n A node. May be null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTypeExpressionAnnotation#1517",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeExpressionAnnotation(JsDocToken token) {\n    if (token == JsDocToken.LC) {\n      skipEOLs();\n      Node typeNode = parseTopLevelTypeExpression(next());\n      if (typeNode != null) {\n        skipEOLs();\n        if (!match(JsDocToken.RC)) {\n          reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n        } else {\n          next();\n        }\n      }\n\n      return typeNode;\n    } else {\n      return parseTypeExpression(token);\n    }\n  }\n",
        "begin_line": 1517,
        "end_line": 1534,
        "comment": "\n   * TypeExpressionAnnotation := TypeExpression |\n   *     '{' TopLevelTypeExpression '}'\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTopLevelTypeExpression#1610",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTopLevelTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTopLevelTypeExpression(JsDocToken token) {\n    Node typeExpr = parseTypeExpression(token);\n    if (typeExpr != null) {\n      // top-level unions are allowed\n      if (match(JsDocToken.PIPE)) {\n        next();\n        if (match(JsDocToken.PIPE)) {\n          // We support double pipes for backwards-compatibility.\n          next();\n        }\n        skipEOLs();\n        token = next();\n        return parseUnionTypeWithAlternate(token, typeExpr);\n      }\n    }\n    return typeExpr;\n  }\n",
        "begin_line": 1610,
        "end_line": 1626,
        "comment": "\n   * TopLevelTypeExpression := TypeExpression\n   *     | TypeUnionList\n   *\n   * We made this rule up, for the sake of backwards compatibility.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTypeExpression#1659",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeExpression(JsDocToken token) {\n    if (token == JsDocToken.QMARK) {\n      // A QMARK could mean that a type is nullable, or that it's unknown.\n      // We use look-ahead 1 to determine whether it's unknown. Otherwise,\n      // we assume it means nullable. There are 5 cases:\n      // {?} - right curly\n      // {?=} - equals\n      // {function(?, number)} - comma\n      // {function(number, ?)} - right paren\n      // {function(): ?|number} - pipe\n      // I'm not a big fan of using look-ahead for this, but it makes\n      // the type language a lot nicer.\n      token = next();\n      if (token == JsDocToken.COMMA ||\n          token == JsDocToken.EQUALS ||\n          token == JsDocToken.RC ||\n          token == JsDocToken.RP ||\n          token == JsDocToken.PIPE) {\n        restoreLookAhead(token);\n        return newNode(Token.QMARK);\n      }\n\n      return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n    } else if (token == JsDocToken.BANG) {\n      return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n    } else {\n      Node basicTypeExpr = parseBasicTypeExpression(token);\n      if (basicTypeExpr != null) {\n        if (match(JsDocToken.QMARK)) {\n          next();\n          return wrapNode(Token.QMARK, basicTypeExpr);\n        } else if (match(JsDocToken.BANG)) {\n          next();\n          return wrapNode(Token.BANG, basicTypeExpr);\n        }\n      }\n\n      return basicTypeExpr;\n    }\n  }\n",
        "begin_line": 1659,
        "end_line": 1698,
        "comment": "\n   * TypeExpression := BasicTypeExpression\n   *     | '?' BasicTypeExpression\n   *     | '!' BasicTypeExpression\n   *     | BasicTypeExpression '?'\n   *     | BasicTypeExpression '!'\n   *     | '?'\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseBasicTypeExpression#1704",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseBasicTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseBasicTypeExpression(JsDocToken token) {\n    if (token == JsDocToken.STAR) {\n      return newNode(Token.STAR);\n    } else if (token == JsDocToken.LB) {\n      skipEOLs();\n      return parseArrayType(next());\n    } else if (token == JsDocToken.LC) {\n      skipEOLs();\n      return parseRecordType(next());\n    } else if (token == JsDocToken.LP) {\n      skipEOLs();\n      return parseUnionType(next());\n    } else if (token == JsDocToken.STRING) {\n      String string = stream.getString();\n      if (\"function\".equals(string)) {\n        skipEOLs();\n        return parseFunctionType(next());\n      } else if (\"null\".equals(string) || \"undefined\".equals(string)) {\n        return newStringNode(string);\n      } else {\n        return parseTypeName(token);\n      }\n    }\n\n    restoreLookAhead(token);\n    return reportGenericTypeSyntaxWarning();\n  }\n",
        "begin_line": 1704,
        "end_line": 1730,
        "comment": "\n   * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName\n   *     | FunctionType | UnionType | RecordType | ArrayType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTypeName#1737",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeName(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeName(JsDocToken token) {\n    if (token != JsDocToken.STRING) {\n      return reportGenericTypeSyntaxWarning();\n    }\n\n    String typeName = stream.getString();\n    int lineno = stream.getLineno();\n    int charno = stream.getCharno();\n    while (match(JsDocToken.EOL) &&\n        typeName.charAt(typeName.length() - 1) == '.') {\n      skipEOLs();\n      if (match(JsDocToken.STRING)) {\n        next();\n        typeName += stream.getString();\n      }\n    }\n\n    Node typeNameNode = newStringNode(typeName, lineno, charno);\n\n    if (match(JsDocToken.LT)) {\n      next();\n      skipEOLs();\n      Node memberType = parseTypeExpressionList(next());\n      if (memberType != null) {\n        typeNameNode.addChildToFront(memberType);\n\n        skipEOLs();\n        if (!match(JsDocToken.GT)) {\n          return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n        }\n\n        next();\n      }\n    }\n    return typeNameNode;\n  }\n",
        "begin_line": 1737,
        "end_line": 1772,
        "comment": "\n   * TypeName := NameExpression | NameExpression TypeApplication\n   * TypeApplication := '.<' TypeExpressionList '>'\n   * TypeExpressionList := TypeExpression // a white lie\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.newStringNode#2170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.newStringNode(java.lang.String, int, int)",
        "snippet": "  private Node newStringNode(String s, int lineno, int charno) {\n    Node n = Node.newString(s, lineno, charno).clonePropsFrom(templateNode);\n    n.setLength(s.length());\n    return n;\n  }\n",
        "begin_line": 2170,
        "end_line": 2174,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.lookAheadForTypeAnnotation#2318",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.lookAheadForTypeAnnotation()",
        "snippet": "  private boolean lookAheadForTypeAnnotation() {\n    boolean matchedLc = false;\n    int c;\n    while (true) {\n      c = stream.getChar();\n      if (c == ' ') {\n        continue;\n      } else if (c == '{') {\n        matchedLc = true;\n        break;\n      } else {\n        break;\n      }\n    }\n    stream.ungetChar(c);\n    return matchedLc;\n  }\n",
        "begin_line": 2318,
        "end_line": 2334,
        "comment": "\n   * Look ahead for a type annotation by advancing the character stream.\n   * Does not modify the token stream.\n   * This is kind of a hack, and is only necessary because we use the token\n   * stream to parse types, but need the underlying character stream to get\n   * JsDoc descriptions.\n   * @return Whether we found a type annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.getRValue#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.AssignmentDefinition.getRValue()",
        "snippet": "    @Override\n    public Node getRValue() {\n      return assignment.getLastChild();\n    }\n",
        "begin_line": 310,
        "end_line": 313,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getParameterCount#981",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getParameterCount()",
        "snippet": "  public int getParameterCount() {\n    if (info == null || info.parameters == null) {\n      return 0;\n    }\n    return info.parameters.size();\n  }\n",
        "begin_line": 981,
        "end_line": 986,
        "comment": "\n   * Gets the number of parameters defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0469
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasReturnType#1052",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasReturnType()",
        "snippet": "  public boolean hasReturnType() {\n    return hasType(TYPEFIELD_RETURN);\n  }\n",
        "begin_line": 1052,
        "end_line": 1054,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @return}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0469
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasThisType#1114",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasThisType()",
        "snippet": "  public boolean hasThisType() {\n    return thisType != null;\n  }\n",
        "begin_line": 1114,
        "end_line": 1116,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @this}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0469
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.JSError#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.JSError(java.lang.String, com.google.javascript.rhino.Node, int, int, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.CheckLevel, java.lang.String...)",
        "snippet": "  private JSError(\n      String sourceName, @Nullable Node node, int lineno, int charno,\n      DiagnosticType type, CheckLevel level, String... arguments) {\n    this.type = type;\n    this.node = node;\n    this.description = type.format.format(arguments);\n    this.lineNumber = lineno;\n    this.charno = charno;\n    this.sourceName = sourceName;\n    this.level = level == null ? type.level : level;\n  }\n",
        "begin_line": 139,
        "end_line": 149,
        "comment": "\n   * Creates a JSError at a CheckLevel for a source file location.\n   * Private to avoid any entanglement with code outside of the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0469
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.isIndirectEval#758",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.isIndirectEval(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isIndirectEval(Node n) {\n    return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);\n  }\n",
        "begin_line": 758,
        "end_line": 761,
        "comment": "\n   * @return Whether the name is an indirect eval.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.isJSDocString#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSDocString(int)",
        "snippet": "  private boolean isJSDocString(int c) {\n    switch (c) {\n      case '@':\n      case '*':\n      case ',':\n      case '>':\n      case ':':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '?':\n      case '!':\n      case '|':\n      case '=':\n      case EOF_CHAR:\n      case '\\n':\n        return false;\n\n      default:\n        return !isJSSpace(c);\n    }\n  }\n",
        "begin_line": 279,
        "end_line": 303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "PassConfig.PassConfig#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "signature": "com.google.javascript.jscomp.PassConfig.PassConfig(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public PassConfig(CompilerOptions options) {\n    this.options = options;\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.HotSwapPassFactory#2282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory.HotSwapPassFactory(java.lang.String, boolean)",
        "snippet": "    HotSwapPassFactory(String name, boolean isOneTimePass) {\n      super(name, isOneTimePass);\n    }\n",
        "begin_line": 2282,
        "end_line": 2284,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.DefaultPassConfig#142",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public DefaultPassConfig(CompilerOptions options) {\n    super(options);\n  }\n",
        "begin_line": 142,
        "end_line": 144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.disables#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean disables(DiagnosticGroup group) {\n    nextSingleton:\n    for (DiagnosticType type : group.getTypes()) {\n      DiagnosticGroup singleton = DiagnosticGroup.forType(type);\n\n      for (WarningsGuard guard : guards) {\n        if (guard.disables(singleton)) {\n          continue nextSingleton;\n        } else if (guard.enables(singleton)) {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n",
        "begin_line": 115,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.compile#565",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.compile()",
        "snippet": "  private Result compile() {\n    return runInCompilerThread(new Callable<Result>() {\n      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });\n  }\n",
        "begin_line": 565,
        "end_line": 573,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.call#567",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Anonymous-cbb1f90e-955e-4a38-840a-d30d7b416182.call()",
        "snippet": "      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n",
        "begin_line": 567,
        "end_line": 571,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.runInCompilerThread#583",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.runInCompilerThread(java.util.concurrent.Callable<T>)",
        "snippet": "  private <T> T runInCompilerThread(final Callable<T> callable) {\n    return runCallable(callable, useThreads, options.tracer.isOn());\n  }\n",
        "begin_line": 583,
        "end_line": 585,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.parse#687",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parse()",
        "snippet": "  public void parse() {\n    parseInputs();\n  }\n",
        "begin_line": 687,
        "end_line": 689,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getPassConfig#691",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getPassConfig()",
        "snippet": "  PassConfig getPassConfig() {\n    if (passes == null) {\n      passes = createPassConfigInternal();\n    }\n    return passes;\n  }\n",
        "begin_line": 691,
        "end_line": 696,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.createPassConfigInternal#702",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createPassConfigInternal()",
        "snippet": "  PassConfig createPassConfigInternal() {\n    return new DefaultPassConfig(options);\n  }\n",
        "begin_line": 702,
        "end_line": 704,
        "comment": "\n   * Create the passes object. Clients should use setPassConfig instead of\n   * overriding this.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.generateReport#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.generateReport()",
        "snippet": "  @Override\n  public void generateReport() {\n    for (ErrorWithLevel message : messages) {\n      println(message.level, message.error);\n    }\n    printSummary();\n  }\n",
        "begin_line": 55,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private DiagnosticGroup(DiagnosticType type) {\n    this.name = null;\n    this.types = ImmutableSet.of(type);\n  }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "\n   * Create a diagnostic group with no name that only matches the given type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0466
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.forType#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  static DiagnosticGroup forType(DiagnosticType type) {\n    if (!singletons.containsKey(type)) {\n      singletons.put(type, new DiagnosticGroup(type));\n    }\n    return singletons.get(type);\n  }\n",
        "begin_line": 71,
        "end_line": 76,
        "comment": " Create a diagnostic group that matches only the given type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0466
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.disables#1020",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean disables(DiagnosticGroup type) {\n    return warningsGuard.disables(type);\n  }\n",
        "begin_line": 1020,
        "end_line": 1022,
        "comment": "\n   * Whether the warnings guard in this Options object disables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0466
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.lazyInitInfo#608",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitInfo()",
        "snippet": "  private void lazyInitInfo() {\n    if (info == null) {\n      info = new LazilyInitializedInfo();\n    }\n  }\n",
        "begin_line": 608,
        "end_line": 612,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0465
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordNoSideEffects#867",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordNoSideEffects()",
        "snippet": "  public boolean recordNoSideEffects() {\n    if (!hasAnySingletonSideEffectTags()\n        && !currentInfo.isNoSideEffects()) {\n      currentInfo.setNoSideEffects(true);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 867,
        "end_line": 876,
        "comment": "\n   * Records that the {@link JSDocInfo} being built should have its\n   * {@link JSDocInfo#isNoSideEffects()} flag set to {@code true}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.046
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.hasAnySingletonSideEffectTags#976",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnySingletonSideEffectTags()",
        "snippet": "  private boolean hasAnySingletonSideEffectTags() {\n    return currentInfo.isNoSideEffects() ||\n        currentInfo.hasModifies();\n  }\n",
        "begin_line": 976,
        "end_line": 979,
        "comment": "\n   * Whether the current doc info has any of the singleton type\n   * tags that may not appear with other type tags, like\n   * {@code @type} or {@code @typedef}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.046
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setNoSideEffects#400",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setNoSideEffects(boolean)",
        "snippet": "  void setNoSideEffects(boolean value) {\n    setFlag(value, MASK_NOSIDEEFFECTS);\n  }\n",
        "begin_line": 400,
        "end_line": 402,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.046
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasModifies#1477",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasModifies()",
        "snippet": "  public boolean hasModifies() {\n    return info != null && info.modifies != null;\n  }\n",
        "begin_line": 1477,
        "end_line": 1479,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.046
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.visit#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n      // Arguments of external functions should not count as name\n      // definitions.  They are placeholder names for documentation\n      // purposes only which are not reachable from anywhere.\n      if (inExterns && node.isName() && parent.isParamList()) {\n        return;\n      }\n\n      Definition def =\n          DefinitionsRemover.getDefinition(node, inExterns);\n      if (def != null) {\n        String name = getSimplifiedName(def.getLValue());\n        if (name != null) {\n          Node rValue = def.getRValue();\n          if ((rValue != null) &&\n              !NodeUtil.isImmutableValue(rValue) &&\n              !rValue.isFunction()) {\n\n            // Unhandled complex expression\n            Definition unknownDef =\n                new UnknownDefinition(def.getLValue(), inExterns);\n            def = unknownDef;\n          }\n\n          // TODO(johnlenz) : remove this stub dropping code if it becomes\n          // illegal to have untyped stubs in the externs definitions.\n          if (inExterns) {\n            // We need special handling of untyped externs stubs here:\n            //    the stub should be dropped if the name is provided elsewhere.\n\n            List<Definition> stubsToRemove = Lists.newArrayList();\n            String qualifiedName = node.getQualifiedName();\n\n            // If there is no qualified name for this, then there will be\n            // no stubs to remove. This will happen if node is an object\n            // literal key.\n            if (qualifiedName != null) {\n              for (Definition prevDef : nameDefinitionMultimap.get(name)) {\n                if (prevDef instanceof ExternalNameOnlyDefinition\n                    && !jsdocContainsDeclarations(node)) {\n                  String prevName = prevDef.getLValue().getQualifiedName();\n                  if (qualifiedName.equals(prevName)) {\n                    // Drop this stub, there is a real definition.\n                    stubsToRemove.add(prevDef);\n                  }\n                }\n              }\n\n              for (Definition prevDef : stubsToRemove) {\n                nameDefinitionMultimap.remove(name, prevDef);\n              }\n            }\n          }\n\n          nameDefinitionMultimap.put(name, def);\n          definitionSiteMap.put(node,\n                                new DefinitionSite(node,\n                                                   def,\n                                                   traversal.getModule(),\n                                                   traversal.inGlobalScope(),\n                                                   inExterns));\n        }\n      }\n\n      if (inExterns && (parent != null) && parent.isExprResult()) {\n        String name = getSimplifiedName(node);\n        if (name != null) {\n\n          // TODO(johnlenz) : remove this code if it becomes illegal to have\n          // stubs in the externs definitions.\n\n          // We need special handling of untyped externs stubs here:\n          //    the stub should be dropped if the name is provided elsewhere.\n          // We can't just drop the stub now as it needs to be used as the\n          //    externs definition if no other definition is provided.\n\n          boolean dropStub = false;\n          if (!jsdocContainsDeclarations(node)) {\n            String qualifiedName = node.getQualifiedName();\n            if (qualifiedName != null) {\n              for (Definition prevDef : nameDefinitionMultimap.get(name)) {\n                String prevName = prevDef.getLValue().getQualifiedName();\n                if (qualifiedName.equals(prevName)) {\n                  dropStub = true;\n                  break;\n                }\n              }\n            }\n          }\n\n          if (!dropStub) {\n            // Incomplete definition\n            Definition definition = new ExternalNameOnlyDefinition(node);\n            nameDefinitionMultimap.put(name, definition);\n            definitionSiteMap.put(node,\n                                  new DefinitionSite(node,\n                                                     definition,\n                                                     traversal.getModule(),\n                                                     traversal.inGlobalScope(),\n                                                     inExterns));\n          }\n        }\n      }\n    }\n",
        "begin_line": 156,
        "end_line": 260,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.046
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.UnknownDefinition#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.UnknownDefinition.UnknownDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    UnknownDefinition(Node lValue, boolean inExterns) {\n      super(lValue, inExterns);\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.046
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.AssignmentDefinition#290",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.AssignmentDefinition.AssignmentDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    AssignmentDefinition(Node node, boolean inExterns) {\n      super(inExterns);\n      Preconditions.checkArgument(node.isAssign());\n      assignment = node;\n    }\n",
        "begin_line": 290,
        "end_line": 294,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.046
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.getLValue#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.AssignmentDefinition.getLValue()",
        "snippet": "    @Override\n    public Node getLValue() {\n      return assignment.getFirstChild();\n    }\n",
        "begin_line": 305,
        "end_line": 308,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.046
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.visit#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isScript()) {\n      requiresLineNumbers = false;\n    } else if (requiresLineNumbers) {\n      if (n.getLineno() == -1) {\n        // The tree version of the node is really the best diagnostic\n        // info we have to offer here.\n        compiler.report(\n            t.makeError(n, MISSING_LINE_INFO,\n                n.toStringTree()));\n      }\n    }\n  }\n",
        "begin_line": 67,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0455
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.mayHaveSideEffects#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler) {\n    return checkForStateChangeHelper(n, false, compiler);\n  }\n",
        "begin_line": 774,
        "end_line": 776,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.VarDefinition#372",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.VarDefinition.VarDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    VarDefinition(Node node, boolean inExterns) {\n      super(inExterns);\n      Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n      Preconditions.checkArgument(node.hasChildren(),\n          \"VAR Declaration of %sshould be assigned a value.\", node.getString());\n      name = node;\n    }\n",
        "begin_line": 372,
        "end_line": 378,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0436
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.getLValue#391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.VarDefinition.getLValue()",
        "snippet": "    @Override\n    public Node getLValue() {\n      return name;\n    }\n",
        "begin_line": 391,
        "end_line": 394,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0436
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.getRValue#396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.VarDefinition.getRValue()",
        "snippet": "    @Override\n    public Node getRValue() {\n      return name.getFirstChild();\n    }\n",
        "begin_line": 396,
        "end_line": 399,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0436
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateFunctionStatement#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateFunctionStatement(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateFunctionStatement(Node n) {\n    validateNodeType(Token.FUNCTION, n);\n    validateChildCount(n, 3);\n    validateName(n.getFirstChild());\n    validateParameters(n.getChildAtIndex(1));\n    validateBlock(n.getLastChild());\n  }\n",
        "begin_line": 350,
        "end_line": 356,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isHoistedFunctionDeclaration#1873",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isHoistedFunctionDeclaration(Node n) {\n    return isFunctionDeclaration(n)\n        && (n.getParent().isScript()\n            || n.getParent().getParent().isFunction());\n  }\n",
        "begin_line": 1873,
        "end_line": 1877,
        "comment": "\n   * Is this node a hoisted function declaration? A function declaration in the\n   * scope root is hoisted to the top of the scope.\n   * See {@link #isFunctionDeclaration}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0417
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.VerifyConstants#215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.VerifyConstants.VerifyConstants(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations) {\n      this.compiler = compiler;\n      this.checkUserDeclarations = checkUserDeclarations;\n    }\n",
        "begin_line": 215,
        "end_line": 218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.process#220",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.VerifyConstants.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      Node externsAndJs = root.getParent();\n      Preconditions.checkState(externsAndJs != null);\n      Preconditions.checkState(externsAndJs.hasChild(externs));\n\n      NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);\n    }\n",
        "begin_line": 220,
        "end_line": 228,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.LineNumberCheck#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.LineNumberCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  LineNumberCheck(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.process#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    requiresLineNumbers = false;\n\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineNumberCheck.shouldTraverse#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    // Each JavaScript file is rooted in a script node, so we'll only\n    // have line number information inside the script node.\n    if (n.isScript()) {\n      requiresLineNumbers = true;\n    }\n    return true;\n  }\n",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateRoot#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateRoot(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateRoot(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    validateIsSynthetic(n);\n    validateChildCount(n, 2);\n    validateCodeRoot(n.getFirstChild());\n    validateCodeRoot(n.getLastChild());\n  }\n",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.SetNoSideEffectCallProperty#171",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.SetNoSideEffectCallProperty.SetNoSideEffectCallProperty(com.google.javascript.jscomp.SimpleDefinitionFinder)",
        "snippet": "    SetNoSideEffectCallProperty(SimpleDefinitionFinder defFinder) {\n      this.defFinder = defFinder;\n    }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.GatherNoSideEffectFunctions#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.GatherNoSideEffectFunctions.GatherNoSideEffectFunctions(boolean)",
        "snippet": "    GatherNoSideEffectFunctions(boolean inExterns) {\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.MarkNoSideEffectCalls#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.MarkNoSideEffectCalls(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  MarkNoSideEffectCalls(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.noSideEffectFunctionNames = Sets.newHashSet();\n  }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.process#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);\n    defFinder.process(externs, root);\n\n    // Gather the list of function nodes that have @nosideeffect annotations.\n    // For use by SetNoSideEffectCallProperty.\n    NodeTraversal.traverse(\n        compiler, externs, new GatherNoSideEffectFunctions(true));\n    NodeTraversal.traverse(\n        compiler, root, new GatherNoSideEffectFunctions(false));\n\n    NodeTraversal.traverse(compiler, root,\n                           new SetNoSideEffectCallProperty(defFinder));\n  }\n",
        "begin_line": 57,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkNoSideEffectCalls.hasNoSideEffectsAnnotation#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.hasNoSideEffectsAnnotation(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean hasNoSideEffectsAnnotation(Node node) {\n    JSDocInfo docInfo = node.getJSDocInfo();\n    return docInfo != null && docInfo.isNoSideEffects();\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "\n   * Get the value of the @nosideeffects annotation stored in the\n   * doc info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNominalType#353",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
        "snippet": "  public boolean isNominalType() {\n    return false;\n  }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n   * Whether this type is a nominal type (a named instance object or\n   * a named enum).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0414
        },
        "num_failing_tests": 1
    },
    {
        "name": "UseSite.UseSite#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "class_name": "com.google.javascript.jscomp.UseSite",
        "signature": "com.google.javascript.jscomp.UseSite.UseSite(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.JSModule)",
        "snippet": "  UseSite(Node node, Scope scope, JSModule module) {\n    this.node = node;\n    this.scope = scope;\n    this.module = module;\n  }\n",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0414
        },
        "num_failing_tests": 1
    },
    {
        "name": "UseSite.hashCode#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "class_name": "com.google.javascript.jscomp.UseSite",
        "signature": "com.google.javascript.jscomp.UseSite.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return this.node.hashCode();\n  }\n",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0414
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.visit#272",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.UseSiteGatheringCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n\n      Collection<Definition> defs = getDefinitionsReferencedAt(node);\n      if (defs == null) {\n        return;\n      }\n\n      Definition first = defs.iterator().next();\n\n      String name = getSimplifiedName(first.getLValue());\n      Preconditions.checkNotNull(name);\n      nameUseSiteMultimap.put(\n          name,\n          new UseSite(node, traversal.getScope(), traversal.getModule()));\n    }\n",
        "begin_line": 272,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0414
        },
        "num_failing_tests": 1
    },
    {
        "name": "Normalize.reportCodeChange#302",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.reportCodeChange(java.lang.String)",
        "snippet": "    private void reportCodeChange(String changeDescription) {\n      if (assertOnChange) {\n        throw new IllegalStateException(\n            \"Normalize constraints violated:\\n\" + changeDescription);\n      }\n      compiler.reportCodeChange();\n    }\n",
        "begin_line": 302,
        "end_line": 308,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0412
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.cloneTree#1686",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneTree()",
        "snippet": "  public Node cloneTree() {\n    Node result = cloneNode();\n    for (Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {\n      Node n2clone = n2.cloneTree();\n      n2clone.parent = result;\n      if (result.last != null) {\n        result.last.next = n2clone;\n      }\n      if (result.first == null) {\n        result.first = n2clone;\n      }\n      result.last = n2clone;\n    }\n    return result;\n  }\n",
        "begin_line": 1686,
        "end_line": 1700,
        "comment": "\n   * @return A detached clone of the Node and all its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0407
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#1472",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node)",
        "snippet": "  public boolean isEquivalentTo(Node node) {\n    return isEquivalentTo(node, false, true);\n  }\n",
        "begin_line": 1472,
        "end_line": 1474,
        "comment": " Returns true if this node is equivalent semantically to another ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0406
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.jsdocContainsDeclarations#265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback.jsdocContainsDeclarations(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean jsdocContainsDeclarations(Node node) {\n      JSDocInfo info = node.getJSDocInfo();\n      return (info != null && info.containsDeclaration());\n    }\n",
        "begin_line": 265,
        "end_line": 268,
        "comment": "\n     * @return Whether the node has a JSDoc that actually declares something.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0402
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.ExternalNameOnlyDefinition#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition.ExternalNameOnlyDefinition(com.google.javascript.rhino.Node)",
        "snippet": "    ExternalNameOnlyDefinition(Node lValue) {\n      super(lValue, true);\n    }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0402
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addList#883",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node)",
        "snippet": "  void addList(Node firstInList) {\n    addList(firstInList, true, Context.OTHER);\n  }\n",
        "begin_line": 883,
        "end_line": 885,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.04
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.addChildBefore#650",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildBefore(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildBefore(Node newChild, Node node) {\n    Preconditions.checkArgument(node != null,\n        \"The existing child node of the parent should not be null.\");\n    Preconditions.checkArgument(newChild.next == null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent == null,\n        \"The new child node already has a parent.\");\n    if (first == node) {\n      newChild.parent = this;\n      newChild.next = first;\n      first = newChild;\n      return;\n    }\n    Node prev = getChildBefore(node);\n    addChildAfter(newChild, prev);\n  }\n",
        "begin_line": 650,
        "end_line": 665,
        "comment": "\n   * Add 'child' before 'node'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0397
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.defineDeclaredProperty#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public final boolean defineDeclaredProperty(String propertyName,\n      JSType type, Node propertyNode) {\n    boolean result = defineProperty(propertyName, type, false,\n        propertyNode);\n\n    // All property definitions go through this method\n    // or defineDeclaredProperty. Because the properties defined an an\n    // object can affect subtyping, it's slightly more efficient\n    // to register this after defining the property.\n    registry.registerPropertyOnType(propertyName, this);\n\n    return result;\n  }\n",
        "begin_line": 271,
        "end_line": 283,
        "comment": "\n   * Defines a property whose type is synthesized (i.e. not inferred).\n   * @param propertyName the property's name\n   * @param type the type\n   * @param propertyNode the node corresponding to the declaration of property\n   *        which might later be accessed using {@code getPropertyNode}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createNullableType#977",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));\n  }\n",
        "begin_line": 977,
        "end_line": 979,
        "comment": "\n   * Creates a type representing nullable values of the given type.\n   * @return the union of the type and the Null type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.hasOwnProperty#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasOwnProperty(java.lang.String)",
        "snippet": "  @Override\n  public boolean hasOwnProperty(String propertyName) {\n    return properties.get(propertyName) != null;\n  }\n",
        "begin_line": 172,
        "end_line": 175,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.defineProperty#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    if (hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    Property newProp = new Property(\n        name, type, inferred, propertyNode);\n    Property oldProp = properties.get(name);\n    if (oldProp != null) {\n      // This is to keep previously inferred jsdoc info, e.g., in a\n      // replaceScript scenario.\n      newProp.setJSDocInfo(oldProp.getJSDocInfo());\n    }\n    properties.put(name, newProp);\n    return true;\n  }\n",
        "begin_line": 233,
        "end_line": 249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getConstructor#406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return null;\n  }\n",
        "begin_line": 406,
        "end_line": 409,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.hasOwnDeclaredProperty#425",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnDeclaredProperty(java.lang.String)",
        "snippet": "  boolean hasOwnDeclaredProperty(String name) {\n    return hasOwnProperty(name) && isPropertyTypeDeclared(name);\n  }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "\n   * Whether the given property is declared on this object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.defineProperty#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    ObjectType proto = getImplicitPrototype();\n    if (proto != null && proto.hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    return super.defineProperty(name, type, inferred, propertyNode);\n  }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasChild#1396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChild(com.google.javascript.rhino.Node)",
        "snippet": "  public boolean hasChild(Node child) {\n    for (Node n = first; n != null; n = n.getNext()) {\n      if (child == n) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 1396,
        "end_line": 1403,
        "comment": " Intended for testing and verification only.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.DefinitionGatheringCallback#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback.DefinitionGatheringCallback(boolean)",
        "snippet": "    DefinitionGatheringCallback(boolean inExterns) {\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.SimpleDefinitionFinder#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.SimpleDefinitionFinder(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public SimpleDefinitionFinder(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.definitionSiteMap = Maps.newLinkedHashMap();\n    this.nameDefinitionMultimap = LinkedHashMultimap.create();\n    this.nameUseSiteMultimap = LinkedHashMultimap.create();\n  }\n",
        "begin_line": 51,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDefinitionFinder.process#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node source) {\n    NodeTraversal.traverse(\n        compiler, externs, new DefinitionGatheringCallback(true));\n    NodeTraversal.traverse(\n        compiler, source, new DefinitionGatheringCallback(false));\n    NodeTraversal.traverse(\n        compiler, source, new UseSiteGatheringCallback());\n  }\n",
        "begin_line": 102,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.IncompleteDefinition#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.IncompleteDefinition.IncompleteDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    IncompleteDefinition(Node lValue, boolean inExterns) {\n      super(inExterns);\n      Preconditions.checkNotNull(lValue);\n      Preconditions.checkArgument(ALLOWED_TYPES.contains(lValue.getType()),\n          \"Unexpected lValue type %s\", Token.name(lValue.getType()));\n      this.lValue = lValue;\n    }\n",
        "begin_line": 158,
        "end_line": 164,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionsRemover.Definition#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.Definition.Definition(boolean)",
        "snippet": "    Definition(boolean isExtern) {\n      this.isExtern = isExtern;\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefinitionSite.DefinitionSite#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "signature": "com.google.javascript.jscomp.DefinitionSite.DefinitionSite(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DefinitionsRemover.Definition, com.google.javascript.jscomp.JSModule, boolean, boolean)",
        "snippet": "  DefinitionSite(Node node,\n                 Definition definition,\n                 JSModule module,\n                 boolean inGlobalScope,\n                 boolean inExterns) {\n    this.node = node;\n    this.definition = definition;\n    this.module = module;\n    this.inGlobalScope = inGlobalScope;\n    this.inExterns = inExterns;\n  }\n",
        "begin_line": 36,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isConstantName#2791",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isConstantName(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isConstantName(Node node) {\n    return node.getBooleanProp(Node.IS_CONSTANT_NAME);\n  }\n",
        "begin_line": 2791,
        "end_line": 2793,
        "comment": "\n   * Returns true if a name node represents a constant variable.\n   *\n   * <p>Determining whether a variable is constant has three steps:\n   * <ol>\n   * <li>In CodingConventionAnnotator, any name that matches the\n   *     {@link CodingConvention#isConstant(String)} is annotated with an\n   *     IS_CONSTANT_NAME property.\n   * <li>The normalize pass renames any variable with the IS_CONSTANT_NAME\n   *     annotation and that is initialized to a constant value with\n   *     a variable name inlucding $$constant.\n   * <li>Return true here if the variable includes $$constant in its name.\n   * </ol>\n   *\n   * @param node A NAME or STRING node\n   * @return True if the variable is constant\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0393
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.cloneNode#1667",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneNode()",
        "snippet": "  public Node cloneNode() {\n    Node result;\n    try {\n      result = (Node) super.clone();\n      // PropListItem lists are immutable and can be shared so there is no\n      // need to clone them here.\n      result.next = null;\n      result.first = null;\n      result.last = null;\n      result.parent = null;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e.getMessage());\n    }\n    return result;\n  }\n",
        "begin_line": 1667,
        "end_line": 1681,
        "comment": "\n   * @return A detached clone of the Node, specifically excluding its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0391
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.useSourceInfoFrom#1745",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.useSourceInfoFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node useSourceInfoFrom(Node other) {\n    putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n    putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n    sourcePosition = other.sourcePosition;\n    return this;\n  }\n",
        "begin_line": 1745,
        "end_line": 1750,
        "comment": "\n   * Overwrite all the source information in this node with\n   * that of {@code other}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.srcref#1752",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.srcref(com.google.javascript.rhino.Node)",
        "snippet": "  public Node srcref(Node other) {\n    return useSourceInfoFrom(other);\n  }\n",
        "begin_line": 1752,
        "end_line": 1754,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isNew#2284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isNew()",
        "snippet": "  public boolean isNew() {\n    return this.getType() == Token.NEW;\n  }\n",
        "begin_line": 2284,
        "end_line": 2286,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0386
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.detachFromParent#1602",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.detachFromParent()",
        "snippet": "  public Node detachFromParent() {\n    Preconditions.checkState(parent != null);\n    parent.removeChild(this);\n    return this;\n  }\n",
        "begin_line": 1602,
        "end_line": 1606,
        "comment": "\n   * Removes this node from its parent. Equivalent to:\n   * node.getParent().removeChild();\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0382
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getModule#439",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getModule()",
        "snippet": "  public JSModule getModule() {\n    CompilerInput input = getInput();\n    return input == null ? null : input.getModule();\n  }\n",
        "begin_line": 439,
        "end_line": 442,
        "comment": "\n   * Gets the current input module.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.maybeLineBreak#433",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeLineBreak()",
        "snippet": "    @Override\n    void maybeLineBreak() {\n      if (lineBreak) {\n        if (sawFunction) {\n          startNewLine();\n          sawFunction = false;\n        }\n      }\n\n      // Since we are at a legal line break, can we upgrade the\n      // preferred break position?  We prefer to break after a\n      // semicolon rather than before it.\n      int len = code.length();\n      if (preferredBreakPosition == len - 1) {\n        char ch = code.charAt(len - 1);\n        if (ch == ';') {\n          preferredBreakPosition = len;\n        }\n      }\n      maybeCutLine();\n    }\n",
        "begin_line": 433,
        "end_line": 453,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.037
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.var#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.var(com.google.javascript.rhino.Node)",
        "snippet": "  public static Node var(Node name) {\n    Preconditions.checkState(name.isName());\n    return new Node(Token.VAR, name);\n  }\n",
        "begin_line": 128,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0368
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setLanguageIn#1341",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode)",
        "snippet": "  public void setLanguageIn(LanguageMode languageIn) {\n    this.languageIn = languageIn;\n    this.languageOut = languageIn;\n  }\n",
        "begin_line": 1341,
        "end_line": 1344,
        "comment": "\n   * Sets how goog.tweak calls are processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0362
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEmpty#2216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEmpty()",
        "snippet": "  public boolean isEmpty() {\n    return this.getType() == Token.EMPTY;\n  }\n",
        "begin_line": 2216,
        "end_line": 2218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addLeftExpr#863",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addLeftExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addLeftExpr(Node n, int minPrecedence, Context context) {\n    addExpr(n, minPrecedence, context);\n  }\n",
        "begin_line": 863,
        "end_line": 865,
        "comment": "\n   * Adds a node at the left-hand side of an expression. Unlike\n   * {@link #addExpr(Node,int)}, this preserves information about the context.\n   *\n   * The left side of an expression is special because in the JavaScript\n   * grammar, certain tokens may be parsed differently when they are at\n   * the beginning of a statement. For example, \"{}\" is parsed as a block,\n   * but \"{'x': 'y'}\" is parsed as an object literal.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0352
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.maybeCutLine#459",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeCutLine()",
        "snippet": "    @Override\n    void maybeCutLine() {\n      if (lineLength > lineLengthThreshold) {\n        // Use the preferred position provided it will break the line.\n        if (preferredBreakPosition > lineStartPosition &&\n            preferredBreakPosition < lineStartPosition + lineLength) {\n          int position = preferredBreakPosition;\n          code.insert(position, '\\n');\n          reportLineCut(lineIndex, position - lineStartPosition);\n          lineIndex++;\n          lineLength -= (position - lineStartPosition);\n          lineStartPosition = position + 1;\n        } else {\n          startNewLine();\n        }\n      }\n    }\n",
        "begin_line": 459,
        "end_line": 475,
        "comment": "\n     * This may start a new line if the current line is longer than the line\n     * length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.init#297",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options) {\n    init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);\n  }\n",
        "begin_line": 297,
        "end_line": 301,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0349
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endStatement#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement()",
        "snippet": "  void endStatement() {\n    endStatement(false);\n  }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\n   * Indicates the end of a statement and a ';' may need to be added.\n   * But we don't add it now, in case we're at the end of a block (in which\n   * case we don't have to add the ';').\n   * See maybeEndStatement()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0349
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endStatement#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement(boolean)",
        "snippet": "  void endStatement(boolean needSemiColon) {\n    if (needSemiColon) {\n      append(\";\");\n      maybeLineBreak();\n      statementNeedsEnded = false;\n    } else if (statementStarted) {\n      statementNeedsEnded = true;\n    }\n  }\n",
        "begin_line": 138,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0349
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeChangeHandler.reset#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reset()",
        "snippet": "    void reset() {\n      hasChanged = false;\n    }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0347
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.precedence#1161",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.precedence(int)",
        "snippet": "  static int precedence(int type) {\n    switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Token.name(type) +\n                               \" (type \" + type + \")\");\n    }\n  }\n",
        "begin_line": 1161,
        "end_line": 1233,
        "comment": "\n   *  0 comma ,\n   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=\n   *  2 conditional ?:\n   *  3 logical-or ||\n   *  4 logical-and &&\n   *  5 bitwise-or |\n   *  6 bitwise-xor ^\n   *  7 bitwise-and &\n   *  8 equality == !=\n   *  9 relational < <= > >=\n   * 10 bitwise shift << >> >>>\n   * 11 addition/subtraction + -\n   * 12 multiply/divide * / %\n   * 13 negation/increment ! ~ - ++ --\n   * 14 call, member () [] .\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0347
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addExpr#871",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private void addExpr(Node n, int minPrecedence, Context context) {\n    if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.isIn()))){\n      add(\"(\");\n      add(n, clearContextForNoInOperator(context));\n      add(\")\");\n    } else {\n      add(n, context);\n    }\n  }\n",
        "begin_line": 871,
        "end_line": 881,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0347
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addIdentifier#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addIdentifier(java.lang.String)",
        "snippet": "  void addIdentifier(String identifier) {\n    add(identifier);\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0344
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addIdentifier#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addIdentifier(java.lang.String)",
        "snippet": "  private void addIdentifier(String identifier) {\n    cc.addIdentifier(identifierEscape(identifier));\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0344
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.identifierEscape#1085",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.identifierEscape(java.lang.String)",
        "snippet": "  static String identifierEscape(String s) {\n    // First check if escaping is needed at all -- in most cases it isn't.\n    if (NodeUtil.isLatin(s)) {\n      return s;\n    }\n\n    // Now going through the string to escape non-latin characters if needed.\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // Identifiers should always go to Latin1/ ASCII characters because\n      // different browser's rules for valid identifier characters are\n      // crazy.\n      if (c > 0x1F && c < 0x7F) {\n        sb.append(c);\n      } else {\n        appendHexJavaScriptRepresentation(sb, c);\n      }\n    }\n    return sb.toString();\n  }\n",
        "begin_line": 1085,
        "end_line": 1105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0344
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isLatin#2399",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLatin(java.lang.String)",
        "snippet": "  static boolean isLatin(String s) {\n    char LARGEST_BASIC_LATIN = 0x7f;\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c > LARGEST_BASIC_LATIN) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 2399,
        "end_line": 2409,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0343
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.add#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(java.lang.String)",
        "snippet": "  void add(String str) {\n    cc.add(str);\n  }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0342
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.getLastChar#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getLastChar()",
        "snippet": "    @Override\n    char getLastChar() {\n      return (code.length() > 0) ? code.charAt(code.length() - 1) : '\\0';\n    }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0341
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.append#414",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.append(java.lang.String)",
        "snippet": "    @Override\n    void append(String str) {\n      code.append(str);\n      lineLength += str.length();\n    }\n",
        "begin_line": 414,
        "end_line": 418,
        "comment": "\n     * Appends a string to the code, keeping track of the current line length.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0341
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.notePreferredLineBreak#477",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.notePreferredLineBreak()",
        "snippet": "    @Override\n    void notePreferredLineBreak() {\n      preferredBreakPosition = code.length();\n    }\n",
        "begin_line": 477,
        "end_line": 480,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0341
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.maybeEndStatement#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.maybeEndStatement()",
        "snippet": "  void maybeEndStatement() {\n    // Add a ';' if we need to.\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n      endLine();\n      statementNeedsEnded = false;\n    }\n    statementStarted = true;\n  }\n",
        "begin_line": 152,
        "end_line": 161,
        "comment": "\n   * This is to be called when we're in a statement. If the prev statement\n   * needs to be ended, add a ';'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0341
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.add#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.add(java.lang.String)",
        "snippet": "  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    } else if (c == '/' && getLastChar() == '/') {\n      // Do not allow a forward slash to appear after a DIV.\n      // For example,\n      // REGEXP DIV REGEXP\n      // is valid and should print like\n      // / // / /\n      append(\" \");\n    }\n\n    append(newcode);\n  }\n",
        "begin_line": 181,
        "end_line": 204,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0341
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.isWordChar#272",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isWordChar(char)",
        "snippet": "  static boolean isWordChar(char ch) {\n    return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));\n  }\n",
        "begin_line": 272,
        "end_line": 276,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0341
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "    @Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      return (super.isEquivalentTo(node, compareJsType, recurse)\n          && this.str.equals(((StringNode) node).str));\n    }\n",
        "begin_line": 232,
        "end_line": 236,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0328
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initCompilerOptionsIfTesting#1434",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initCompilerOptionsIfTesting()",
        "snippet": "  void initCompilerOptionsIfTesting() {\n    if (options == null) {\n      // initialization for tests that don't initialize the compiler\n      // by the normal mechanisms.\n      initOptions(newCompilerOptions());\n    }\n  }\n",
        "begin_line": 1434,
        "end_line": 1440,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0325
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.toSource#1654",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  String toSource(Node n) {\n    initCompilerOptionsIfTesting();\n    return toSource(n, null, true);\n  }\n",
        "begin_line": 1654,
        "end_line": 1658,
        "comment": "\n   * Generates JavaScript source code for an AST, doesn't generate source\n   * map info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0325
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.opToStr#2123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.opToStr(int)",
        "snippet": "  static String opToStr(int operator) {\n    switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }\n  }\n",
        "begin_line": 2123,
        "end_line": 2168,
        "comment": "\n   * Converts an operator's token value (see {@link Token}) to a string\n   * representation.\n   *\n   * @param operator the operator's token value to convert\n   * @return the string representation or {@code null} if the token value is\n   * not an operator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getLanguageOut#1350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageOut()",
        "snippet": "  public LanguageMode getLanguageOut() {\n    return languageOut;\n  }\n",
        "begin_line": 1350,
        "end_line": 1352,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.toSource#1663",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.SourceMap, boolean)",
        "snippet": "  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n    builder.setLineLengthThreshold(options.lineLengthThreshold);\n\n    Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;\n    builder.setOutputCharset(charset);\n\n    return builder.build();\n  }\n",
        "begin_line": 1663,
        "end_line": 1678,
        "comment": "\n   * Generates JavaScript source code for an AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.MappedCodePrinter#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.MappedCodePrinter(int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    MappedCodePrinter(\n        int lineLengthThreshold,\n        boolean createSrcMap,\n        SourceMap.DetailLevel sourceMapDetailLevel) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      this.lineLengthThreshold = lineLengthThreshold <= 0 ? Integer.MAX_VALUE :\n        lineLengthThreshold;\n      this.createSrcMap = createSrcMap;\n      this.sourceMapDetailLevel = sourceMapDetailLevel;\n      this.mappings = createSrcMap ? new ArrayDeque<Mapping>() : null;\n      this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;\n    }\n",
        "begin_line": 57,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.startSourceMapping#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.startSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void startSourceMapping(Node node) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      Preconditions.checkState(node != null);\n      if (createSrcMap\n          && node.getSourceFileName() != null\n          && node.getLineno() > 0\n          && sourceMapDetailLevel.apply(node)) {\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        Mapping mapping = new Mapping();\n        mapping.node = node;\n        mapping.start = new FilePosition(line, index);\n        mappings.push(mapping);\n        allMappings.add(mapping);\n      }\n    }\n",
        "begin_line": 89,
        "end_line": 106,
        "comment": "\n     * Starts the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.endSourceMapping#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.endSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void endSourceMapping(Node node) {\n      if (createSrcMap && !mappings.isEmpty() && mappings.peek().node == node) {\n        Mapping mapping = mappings.pop();\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        mapping.end = new FilePosition(line, index);\n      }\n    }\n",
        "begin_line": 112,
        "end_line": 121,
        "comment": "\n     * Finishes the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.getCode#178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getCode()",
        "snippet": "    public String getCode() {\n      return code.toString();\n    }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.CompactCodePrinter#405",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.CompactCodePrinter(boolean, int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    private CompactCodePrinter(boolean lineBreak, int lineLengthThreshold,\n        boolean createSrcMap, SourceMap.DetailLevel sourceMapDetailLevel) {\n      super(lineLengthThreshold, createSrcMap, sourceMapDetailLevel);\n      this.lineBreak = lineBreak;\n    }\n",
        "begin_line": 405,
        "end_line": 409,
        "comment": "\n   * @param lineBreak break the lines a bit more aggressively\n   * @param lineLengthThreshold The length of a line after which we force\n   *                            a newline when possible.\n   * @param createSrcMap Whether to gather source position\n   *                            mapping information when printing.\n   * @param sourceMapDetailLevel A filter to control which nodes get mapped into\n   *     the source map.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.Builder#501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.Builder(com.google.javascript.rhino.Node)",
        "snippet": "    Builder(Node node) {\n      root = node;\n    }\n",
        "begin_line": 501,
        "end_line": 503,
        "comment": "\n     * Sets the root node from which to generate the source code.\n     * @param node The root node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setPrettyPrint#509",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setPrettyPrint(boolean)",
        "snippet": "    Builder setPrettyPrint(boolean prettyPrint) {\n      this.prettyPrint = prettyPrint;\n      return this;\n    }\n",
        "begin_line": 509,
        "end_line": 512,
        "comment": "\n     * Sets whether pretty printing should be used.\n     * @param prettyPrint If true, pretty printing will be used.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setLineBreak#518",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineBreak(boolean)",
        "snippet": "    Builder setLineBreak(boolean lineBreak) {\n      this.lineBreak = lineBreak;\n      return this;\n    }\n",
        "begin_line": 518,
        "end_line": 521,
        "comment": "\n     * Sets whether line breaking should be done automatically.\n     * @param lineBreak If true, line breaking is done automatically.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setLineLengthThreshold#538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineLengthThreshold(int)",
        "snippet": "    Builder setLineLengthThreshold(int threshold) {\n      this.lineLengthThreshold = threshold;\n      return this;\n    }\n",
        "begin_line": 538,
        "end_line": 541,
        "comment": "\n     * Sets the line length threshold that will be used to determine\n     * when to break lines, if line breaking is on.\n     *\n     * @param threshold The line length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setSourceMap#549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMap(com.google.javascript.jscomp.SourceMap)",
        "snippet": "    Builder setSourceMap(SourceMap sourceMap) {\n      this.sourceMap = sourceMap;\n      return this;\n    }\n",
        "begin_line": 549,
        "end_line": 552,
        "comment": "\n     * Sets the source map to which to write the metadata about\n     * the generated source code.\n     *\n     * @param sourceMap The source map.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setSourceMapDetailLevel#557",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    Builder setSourceMapDetailLevel(SourceMap.DetailLevel level) {\n      Preconditions.checkState(level != null);\n      this.sourceMapDetailLevel = level;\n      return this;\n    }\n",
        "begin_line": 557,
        "end_line": 561,
        "comment": "\n     * @param level The detail level to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setOutputCharset#567",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setOutputCharset(java.nio.charset.Charset)",
        "snippet": "    Builder setOutputCharset(Charset outCharset) {\n      this.outputCharset = outCharset;\n      return this;\n    }\n",
        "begin_line": 567,
        "end_line": 570,
        "comment": "\n     * Set the charset to use when determining what characters need to be\n     * escaped in the output.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setTagAsStrict#575",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setTagAsStrict(boolean)",
        "snippet": "    Builder setTagAsStrict(boolean tagAsStrict) {\n      this.tagAsStrict = tagAsStrict;\n      return this;\n    }\n",
        "begin_line": 575,
        "end_line": 578,
        "comment": "\n     * Set whether the output should be tags as ECMASCRIPT 5 Strict.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.build#583",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.build()",
        "snippet": "    String build() {\n      if (root == null) {\n        throw new IllegalStateException(\n            \"Cannot build without root node being specified\");\n      }\n\n      Format outputFormat = outputTypes\n          ? Format.TYPED\n          : prettyPrint\n              ? Format.PRETTY\n              : Format.COMPACT;\n\n      return toSource(root, outputFormat, lineBreak, lineLengthThreshold,\n          sourceMap, sourceMapDetailLevel, outputCharset, tagAsStrict);\n    }\n",
        "begin_line": 583,
        "end_line": 597,
        "comment": "\n     * Generates the source code and returns it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.toSource#609",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodePrinter.Format, boolean, int, com.google.javascript.jscomp.SourceMap, com.google.javascript.jscomp.SourceMap.DetailLevel, java.nio.charset.Charset, boolean)",
        "snippet": "  private static String toSource(Node root, Format outputFormat,\n                                 boolean lineBreak,  int lineLengthThreshold,\n                                 SourceMap sourceMap,\n                                 SourceMap.DetailLevel sourceMapDetailLevel,\n                                 Charset outputCharset,\n                                 boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel != null);\n\n    boolean createSourceMap = (sourceMap != null);\n    MappedCodePrinter mcp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, lineLengthThreshold,\n            createSourceMap, sourceMapDetailLevel)\n        : new PrettyCodePrinter(\n            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(mcp, outputCharset)\n        : new CodeGenerator(mcp, outputCharset);\n\n    if (tagAsStrict) {\n      cg.tagAsStrict();\n    }\n\n    cg.add(root);\n    mcp.endFile();\n\n    String code = mcp.getCode();\n\n    if (createSourceMap) {\n      mcp.generateSourceMap(sourceMap);\n    }\n\n    return code;\n  }\n",
        "begin_line": 609,
        "end_line": 644,
        "comment": "\n   * Converts a tree to js code\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.CodeGenerator#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer, java.nio.charset.Charset)",
        "snippet": "  CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset) {\n    cc = consumer;\n    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {\n      // If we want our default (pretending to be UTF-8, but escaping anything\n      // outside of straight ASCII), then don't use the encoder, but\n      // just special-case the code.  This keeps the normal path through\n      // the code identical to how it's been for years.\n      this.outputCharsetEncoder = null;\n    } else {\n      this.outputCharsetEncoder = outputCharset.newEncoder();\n    }\n  }\n",
        "begin_line": 48,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.add#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node)",
        "snippet": "  void add(Node n) {\n    add(n, Context.OTHER);\n  }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.continueProcessing#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.continueProcessing()",
        "snippet": "  boolean continueProcessing() {\n    return true;\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n   * Provides a means of interrupting the CodeGenerator. Derived classes should\n   * return false to stop further processing.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endFile#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFile()",
        "snippet": "  void endFile() {}\n",
        "begin_line": 298,
        "end_line": 298,
        "comment": " Called when we're at the end of a file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.032
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.init#306",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(java.util.List<com.google.javascript.jscomp.JSSourceFile>, java.util.List<com.google.javascript.jscomp.JSSourceFile>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options) {\n    JSModule module = new JSModule(SINGLETON_MODULE_NAME);\n    for (JSSourceFile input : inputs) {\n      module.add(input);\n    }\n\n    initModules(externs, Lists.newArrayList(module), options);\n  }\n",
        "begin_line": 306,
        "end_line": 314,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0317
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getErrors#914",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return errorManager.getErrors();\n  }\n",
        "begin_line": 914,
        "end_line": 916,
        "comment": "\n   * Returns the array of errors (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getWarnings#921",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return errorManager.getWarnings();\n  }\n",
        "begin_line": 921,
        "end_line": 923,
        "comment": "\n   * Returns the array of warnings (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getErrors#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrors()",
        "snippet": "  @Override\n  public JSError[] getErrors() {\n    return toArray(CheckLevel.ERROR);\n  }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getWarnings#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarnings()",
        "snippet": "  @Override\n  public JSError[] getWarnings() {\n    return toArray(CheckLevel.WARNING);\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.toArray#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.toArray(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private JSError[] toArray(CheckLevel level) {\n    List<JSError> errors = new ArrayList<JSError>(messages.size());\n    for (ErrorWithLevel p : messages) {\n      if (p.level == level) {\n        errors.add(p.error);\n      }\n    }\n    return errors.toArray(new JSError[errors.size()]);\n  }\n",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 1
    }
]