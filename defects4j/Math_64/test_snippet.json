[
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackTest(java.lang.String)",
        "snippet": "  public MinpackTest(String name) {\n    super(name);\n  }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 96,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackLinearFullRank()",
        "snippet": "  public void testMinpackLinearFullRank() {\n    minpackTest(new LinearFullRankFunction(10, 5, 1.0,\n                                           5.0, 2.23606797749979), false);\n    minpackTest(new LinearFullRankFunction(50, 5, 1.0,\n                                           8.06225774829855, 6.70820393249937), false);\n  }\n",
        "begin_line": 99,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 100,col 5)-(line 101,col 74)",
            "(line 102,col 5)-(line 103,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackLinearRank1()",
        "snippet": "  public void testMinpackLinearRank1() {\n    minpackTest(new LinearRank1Function(10, 5, 1.0,\n                                        291.521868819476, 1.4638501094228), false);\n    minpackTest(new LinearRank1Function(50, 5, 1.0,\n                                        3101.60039334535, 3.48263016573496), false);\n  }\n",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 108,col 83)",
            "(line 109,col 5)-(line 110,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackLinearRank1ZeroColsAndRows()",
        "snippet": "  public void testMinpackLinearRank1ZeroColsAndRows() {\n    minpackTest(new LinearRank1ZeroColsAndRowsFunction(10, 5, 1.0), false);\n    minpackTest(new LinearRank1ZeroColsAndRowsFunction(50, 5, 1.0), false);\n  }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 75)",
            "(line 115,col 5)-(line 115,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackRosenbrok()",
        "snippet": "  public void testMinpackRosenbrok() {\n    minpackTest(new RosenbrockFunction(new double[] { -1.2, 1.0 },\n                                       Math.sqrt(24.2)), false);\n    minpackTest(new RosenbrockFunction(new double[] { -12.0, 10.0 },\n                                       Math.sqrt(1795769.0)), false);\n    minpackTest(new RosenbrockFunction(new double[] { -120.0, 100.0 },\n                                       11.0 * Math.sqrt(169000121.0)), false);\n  }\n",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 120,col 64)",
            "(line 121,col 5)-(line 122,col 69)",
            "(line 123,col 5)-(line 124,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackHelicalValley()",
        "snippet": "  public void testMinpackHelicalValley() {\n    minpackTest(new HelicalValleyFunction(new double[] { -1.0, 0.0, 0.0 },\n                                          50.0), false);\n    minpackTest(new HelicalValleyFunction(new double[] { -10.0, 0.0, 0.0 },\n                                          102.95630140987), false);\n    minpackTest(new HelicalValleyFunction(new double[] { -100.0, 0.0, 0.0},\n                                          991.261822123701), false);\n  }\n",
        "begin_line": 127,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 128,col 5)-(line 129,col 56)",
            "(line 130,col 5)-(line 131,col 67)",
            "(line 132,col 5)-(line 133,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackPowellSingular()",
        "snippet": "  public void testMinpackPowellSingular() {\n    minpackTest(new PowellSingularFunction(new double[] { 3.0, -1.0, 0.0, 1.0 },\n                                           14.6628782986152), false);\n    minpackTest(new PowellSingularFunction(new double[] { 30.0, -10.0, 0.0, 10.0 },\n                                           1270.9838708654), false);\n    minpackTest(new PowellSingularFunction(new double[] { 300.0, -100.0, 0.0, 100.0 },\n                                           126887.903284750), false);\n  }\n",
        "begin_line": 136,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 138,col 69)",
            "(line 139,col 5)-(line 140,col 68)",
            "(line 141,col 5)-(line 142,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackFreudensteinRoth()",
        "snippet": "  public void testMinpackFreudensteinRoth() {\n    minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n                                             20.0124960961895, 6.99887517584575,\n                                             new double[] {\n                                               11.4124844654993,\n                                               -0.896827913731509\n                                             }), false);\n    minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },\n                                             12432.833948863, 6.9988751744895,\n                                             new double[] {\n                                                11.41300466147456,\n                                                -0.896796038685959\n                                             }), false);\n    minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },\n                                             11426454.595762, 6.99887517242903,\n                                             new double[] {\n                                                 11.412781785788564,\n                                                 -0.8968051074920405\n                                             }), false);\n  }\n",
        "begin_line": 145,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 151,col 56)",
            "(line 152,col 5)-(line 157,col 56)",
            "(line 158,col 5)-(line 163,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackBard()",
        "snippet": "  public void testMinpackBard() {\n    minpackTest(new BardFunction(1.0, 6.45613629515967, 0.0906359603390466,\n                                 new double[] {\n                                   0.0824105765758334,\n                                   1.1330366534715,\n                                   2.34369463894115\n                                 }), false);\n    minpackTest(new BardFunction(10.0, 36.1418531596785, 4.17476870138539,\n                                 new double[] {\n                                   0.840666673818329,\n                                   -158848033.259565,\n                                   -164378671.653535\n                                 }), false);\n    minpackTest(new BardFunction(100.0, 384.114678637399, 4.17476870135969,\n                                 new double[] {\n                                   0.840666673867645,\n                                   -158946167.205518,\n                                   -164464906.857771\n                                 }), false);\n  }\n",
        "begin_line": 166,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 172,col 44)",
            "(line 173,col 5)-(line 178,col 44)",
            "(line 179,col 5)-(line 184,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackKowalikOsborne()",
        "snippet": "  public void testMinpackKowalikOsborne() {\n    minpackTest(new KowalikOsborneFunction(new double[] { 0.25, 0.39, 0.415, 0.39 },\n                                           0.0728915102882945,\n                                           0.017535837721129,\n                                           new double[] {\n                                             0.192807810476249,\n                                             0.191262653354071,\n                                             0.123052801046931,\n                                             0.136053221150517\n                                           }), false);\n    minpackTest(new KowalikOsborneFunction(new double[] { 2.5, 3.9, 4.15, 3.9 },\n                                           2.97937007555202,\n                                           0.032052192917937,\n                                           new double[] {\n                                             728675.473768287,\n                                             -14.0758803129393,\n                                             -32977797.7841797,\n                                             -20571594.1977912\n                                           }), false);\n    minpackTest(new KowalikOsborneFunction(new double[] { 25.0, 39.0, 41.5, 39.0 },\n                                           29.9590617016037,\n                                           0.0175364017658228,\n                                           new double[] {\n                                             0.192948328597594,\n                                             0.188053165007911,\n                                             0.122430604321144,\n                                             0.134575665392506\n                                           }), false);\n  }\n",
        "begin_line": 187,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 196,col 54)",
            "(line 197,col 5)-(line 205,col 54)",
            "(line 206,col 5)-(line 214,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackMeyer()",
        "snippet": "  public void testMinpackMeyer() {\n    minpackTest(new MeyerFunction(new double[] { 0.02, 4000.0, 250.0 },\n                                  41153.4665543031, 9.37794514651874,\n                                  new double[] {\n                                    0.00560963647102661,\n                                    6181.34634628659,\n                                    345.223634624144\n                                  }), false);\n    minpackTest(new MeyerFunction(new double[] { 0.2, 40000.0, 2500.0 },\n                                  4168216.89130846, 792.917871779501,\n                                  new double[] {\n                                    1.42367074157994e-11,\n                                    33695.7133432541,\n                                    901.268527953801\n                                  }), true);\n  }\n",
        "begin_line": 217,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 218,col 5)-(line 224,col 45)",
            "(line 225,col 5)-(line 231,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackWatson()",
        "snippet": "  public void testMinpackWatson() {\n\n    minpackTest(new WatsonFunction(6, 0.0,\n                                   5.47722557505166, 0.0478295939097601,\n                                   new double[] {\n                                     -0.0157249615083782, 1.01243488232965,\n                                     -0.232991722387673,  1.26043101102818,\n                                     -1.51373031394421,   0.99299727291842\n                                   }), false);\n    minpackTest(new WatsonFunction(6, 10.0,\n                                   6433.12578950026, 0.0478295939096951,\n                                   new double[] {\n                                     -0.0157251901386677, 1.01243485860105,\n                                     -0.232991545843829,  1.26042932089163,\n                                     -1.51372776706575,   0.99299573426328\n                                   }), false);\n    minpackTest(new WatsonFunction(6, 100.0,\n                                   674256.040605213, 0.047829593911544,\n                                   new double[] {\n                                    -0.0157247019712586, 1.01243490925658,\n                                    -0.232991922761641,  1.26043292929555,\n                                    -1.51373320452707,   0.99299901922322\n                                   }), false);\n\n    minpackTest(new WatsonFunction(9, 0.0,\n                                   5.47722557505166, 0.00118311459212420,\n                                   new double[] {\n                                    -0.153070644166722e-4, 0.999789703934597,\n                                     0.0147639634910978,   0.146342330145992,\n                                     1.00082109454817,    -2.61773112070507,\n                                     4.10440313943354,    -3.14361226236241,\n                                     1.05262640378759\n                                   }), false);\n    minpackTest(new WatsonFunction(9, 10.0,\n                                   12088.127069307, 0.00118311459212513,\n                                   new double[] {\n                                   -0.153071334849279e-4, 0.999789703941234,\n                                    0.0147639629786217,   0.146342334818836,\n                                    1.00082107321386,    -2.61773107084722,\n                                    4.10440307655564,    -3.14361222178686,\n                                    1.05262639322589\n                                   }), false);\n    minpackTest(new WatsonFunction(9, 100.0,\n                                   1269109.29043834, 0.00118311459212384,\n                                   new double[] {\n                                    -0.153069523352176e-4, 0.999789703958371,\n                                     0.0147639625185392,   0.146342341096326,\n                                     1.00082104729164,    -2.61773101573645,\n                                     4.10440301427286,    -3.14361218602503,\n                                     1.05262638516774\n                                   }), false);\n\n    minpackTest(new WatsonFunction(12, 0.0,\n                                   5.47722557505166, 0.217310402535861e-4,\n                                   new double[] {\n                                    -0.660266001396382e-8, 1.00000164411833,\n                                    -0.000563932146980154, 0.347820540050756,\n                                    -0.156731500244233,    1.05281515825593,\n                                    -3.24727109519451,     7.2884347837505,\n                                   -10.271848098614,       9.07411353715783,\n                                    -4.54137541918194,     1.01201187975044\n                                   }), false);\n    minpackTest(new WatsonFunction(12, 10.0,\n                                   19220.7589790951, 0.217310402518509e-4,\n                                   new double[] {\n                                    -0.663710223017410e-8, 1.00000164411787,\n                                    -0.000563932208347327, 0.347820540486998,\n                                    -0.156731503955652,    1.05281517654573,\n                                    -3.2472711515214,      7.28843489430665,\n                                   -10.2718482369638,      9.07411364383733,\n                                    -4.54137546533666,     1.01201188830857\n                                   }), false);\n    minpackTest(new WatsonFunction(12, 100.0,\n                                   2018918.04462367, 0.217310402539845e-4,\n                                   new double[] {\n                                    -0.663806046485249e-8, 1.00000164411786,\n                                    -0.000563932210324959, 0.347820540503588,\n                                    -0.156731504091375,    1.05281517718031,\n                                    -3.24727115337025,     7.28843489775302,\n                                   -10.2718482410813,      9.07411364688464,\n                                    -4.54137546660822,     1.0120118885369\n                                   }), false);\n\n  }\n",
        "begin_line": 234,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 242,col 46)",
            "(line 243,col 5)-(line 249,col 46)",
            "(line 250,col 5)-(line 256,col 46)",
            "(line 258,col 5)-(line 266,col 46)",
            "(line 267,col 5)-(line 275,col 46)",
            "(line 276,col 5)-(line 284,col 46)",
            "(line 286,col 5)-(line 295,col 46)",
            "(line 296,col 5)-(line 305,col 46)",
            "(line 306,col 5)-(line 315,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackBox3Dimensional()",
        "snippet": "  public void testMinpackBox3Dimensional() {\n    minpackTest(new Box3DimensionalFunction(10, new double[] { 0.0, 10.0, 20.0 },\n                                            32.1115837449572), false);\n  }\n",
        "begin_line": 319,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 320,col 5)-(line 321,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackJennrichSampson()",
        "snippet": "  public void testMinpackJennrichSampson() {\n    minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },\n                                            64.5856498144943, 11.1517793413499,\n                                            new double[] {\n //                                            0.2578330049, 0.257829976764542\n                                               0.2578199266368004, 0.25782997676455244\n                                            }), false);\n  }\n",
        "begin_line": 324,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 325,col 5)-(line 330,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackBrownDennis()",
        "snippet": "  public void testMinpackBrownDennis() {\n    minpackTest(new BrownDennisFunction(20,\n                                        new double[] { 25.0, 5.0, -5.0, -1.0 },\n                                        2815.43839161816, 292.954288244866,\n                                        new double[] {\n                                         -11.59125141003, 13.2024883984741,\n                                         -0.403574643314272, 0.236736269844604\n                                        }), false);\n    minpackTest(new BrownDennisFunction(20,\n                                        new double[] { 250.0, 50.0, -50.0, -10.0 },\n                                        555073.354173069, 292.954270581415,\n                                        new double[] {\n                                         -11.5959274272203, 13.2041866926242,\n                                         -0.403417362841545, 0.236771143410386\n                                       }), false);\n    minpackTest(new BrownDennisFunction(20,\n                                        new double[] { 2500.0, 500.0, -500.0, -100.0 },\n                                        61211252.2338581, 292.954306151134,\n                                        new double[] {\n                                         -11.5902596937374, 13.2020628854665,\n                                         -0.403688070279258, 0.236665033746463\n                                        }), false);\n  }\n",
        "begin_line": 333,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 334,col 5)-(line 340,col 51)",
            "(line 341,col 5)-(line 347,col 50)",
            "(line 348,col 5)-(line 354,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackChebyquad()",
        "snippet": "  public void testMinpackChebyquad() {\n    minpackTest(new ChebyquadFunction(1, 8, 1.0,\n                                      1.88623796907732, 1.88623796907732,\n                                      new double[] { 0.5 }), false);\n    minpackTest(new ChebyquadFunction(1, 8, 10.0,\n                                      5383344372.34005, 1.88424820499951,\n                                      new double[] { 0.9817314924684 }), false);\n    minpackTest(new ChebyquadFunction(1, 8, 100.0,\n                                      0.118088726698392e19, 1.88424820499347,\n                                      new double[] { 0.9817314852934 }), false);\n    minpackTest(new ChebyquadFunction(8, 8, 1.0,\n                                      0.196513862833975, 0.0593032355046727,\n                                      new double[] {\n                                        0.0431536648587336, 0.193091637843267,\n                                        0.266328593812698,  0.499999334628884,\n                                        0.500000665371116,  0.733671406187302,\n                                        0.806908362156733,  0.956846335141266\n                                      }), false);\n    minpackTest(new ChebyquadFunction(9, 9, 1.0,\n                                      0.16994993465202, 0.0,\n                                      new double[] {\n                                        0.0442053461357828, 0.199490672309881,\n                                        0.23561910847106,   0.416046907892598,\n                                        0.5,                0.583953092107402,\n                                        0.764380891528940,  0.800509327690119,\n                                        0.955794653864217\n                                      }), false);\n    minpackTest(new ChebyquadFunction(10, 10, 1.0,\n                                      0.183747831178711, 0.0806471004038253,\n                                      new double[] {\n                                        0.0596202671753563, 0.166708783805937,\n                                        0.239171018813509,  0.398885290346268,\n                                        0.398883667870681,  0.601116332129320,\n                                        0.60111470965373,   0.760828981186491,\n                                        0.833291216194063,  0.940379732824644\n                                      }), false);\n  }\n",
        "begin_line": 357,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 360,col 68)",
            "(line 361,col 5)-(line 363,col 80)",
            "(line 364,col 5)-(line 366,col 80)",
            "(line 367,col 5)-(line 374,col 49)",
            "(line 375,col 5)-(line 383,col 49)",
            "(line 384,col 5)-(line 392,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackBrownAlmostLinear()",
        "snippet": "  public void testMinpackBrownAlmostLinear() {\n    minpackTest(new BrownAlmostLinearFunction(10, 0.5,\n                                              16.5302162063499, 0.0,\n                                              new double[] {\n                                                0.979430303349862, 0.979430303349862,\n                                                0.979430303349862, 0.979430303349862,\n                                                0.979430303349862, 0.979430303349862,\n                                                0.979430303349862, 0.979430303349862,\n                                                0.979430303349862, 1.20569696650138\n                                              }), false);\n    minpackTest(new BrownAlmostLinearFunction(10, 5.0,\n                                              9765624.00089211, 0.0,\n                                              new double[] {\n                                               0.979430303349865, 0.979430303349865,\n                                               0.979430303349865, 0.979430303349865,\n                                               0.979430303349865, 0.979430303349865,\n                                               0.979430303349865, 0.979430303349865,\n                                               0.979430303349865, 1.20569696650135\n                                              }), false);\n    minpackTest(new BrownAlmostLinearFunction(10, 50.0,\n                                              0.9765625e17, 0.0,\n                                              new double[] {\n                                                1.0, 1.0, 1.0, 1.0, 1.0,\n                                                1.0, 1.0, 1.0, 1.0, 1.0\n                                              }), false);\n    minpackTest(new BrownAlmostLinearFunction(30, 0.5,\n                                              83.476044467848, 0.0,\n                                              new double[] {\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 0.997754216442807,\n                                                0.997754216442807, 1.06737350671578\n                                              }), false);\n    minpackTest(new BrownAlmostLinearFunction(40, 0.5,\n                                              128.026364472323, 0.0,\n                                              new double[] {\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                1.00000000000002, 1.00000000000002,\n                                                0.999999999999121\n                                              }), false);\n    }\n",
        "begin_line": 395,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 396,col 5)-(line 404,col 57)",
            "(line 405,col 5)-(line 413,col 57)",
            "(line 414,col 5)-(line 419,col 57)",
            "(line 420,col 5)-(line 438,col 57)",
            "(line 439,col 5)-(line 460,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackOsborne1()",
        "snippet": "  public void testMinpackOsborne1() {\n      minpackTest(new Osborne1Function(new double[] { 0.5, 1.5, -1.0, 0.01, 0.02, },\n                                       0.937564021037838, 0.00739249260904843,\n                                       new double[] {\n                                         0.375410049244025, 1.93584654543108,\n                                        -1.46468676748716, 0.0128675339110439,\n                                         0.0221227011813076\n                                       }), false);\n    }\n",
        "begin_line": 463,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 464,col 7)-(line 470,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackOsborne2()",
        "snippet": "  public void testMinpackOsborne2() {\n\n    minpackTest(new Osborne2Function(new double[] {\n                                       1.3, 0.65, 0.65, 0.7, 0.6,\n                                       3.0, 5.0, 7.0, 2.0, 4.5, 5.5\n                                     },\n                                     1.44686540984712, 0.20034404483314,\n                                     new double[] {\n                                       1.30997663810096,  0.43155248076,\n                                       0.633661261602859, 0.599428560991695,\n                                       0.754179768272449, 0.904300082378518,\n                                       1.36579949521007, 4.82373199748107,\n                                       2.39868475104871, 4.56887554791452,\n                                       5.67534206273052\n                                     }), false);\n  }\n",
        "begin_line": 473,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 475,col 5)-(line 487,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.minpackTest(org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction, boolean)",
        "snippet": "  private void minpackTest(MinpackFunction function, boolean exceptionExpected) {\n      LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n      optimizer.setMaxIterations(100 * (function.getN() + 1));\n      optimizer.setCostRelativeTolerance(Math.sqrt(2.22044604926e-16));\n      optimizer.setParRelativeTolerance(Math.sqrt(2.22044604926e-16));\n      optimizer.setOrthoTolerance(2.22044604926e-16);\n//      assertTrue(function.checkTheoreticalStartCost(optimizer.getRMS()));\n      try {\n          VectorialPointValuePair optimum =\n              optimizer.optimize(function,\n                                 function.getTarget(), function.getWeight(),\n                                 function.getStartPoint());\n          assertFalse(exceptionExpected);\n          function.checkTheoreticalMinCost(optimizer.getRMS());\n          function.checkTheoreticalMinParams(optimum);\n      } catch (OptimizationException lsse) {\n          assertTrue(exceptionExpected);\n      } catch (FunctionEvaluationException fe) {\n          assertTrue(exceptionExpected);\n      }\n  }\n",
        "begin_line": 490,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 491,col 7)-(line 491,col 80)",
            "(line 492,col 7)-(line 492,col 62)",
            "(line 493,col 7)-(line 493,col 71)",
            "(line 494,col 7)-(line 494,col 70)",
            "(line 495,col 7)-(line 495,col 53)",
            "(line 497,col 7)-(line 509,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.MinpackFunction(int, double[], double, double[])",
        "snippet": "      protected MinpackFunction(int m, double[] startParams,\n                                double theoreticalMinCost, double[] theoreticalMinParams) {\n          this.m = m;\n          this.n = startParams.length;\n          this.startParams          = startParams.clone();\n          this.theoreticalMinCost   = theoreticalMinCost;\n          this.theoreticalMinParams = theoreticalMinParams;\n          this.costAccuracy         = 1.0e-8;\n          this.paramsAccuracy       = 1.0e-5;\n      }\n",
        "begin_line": 524,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 526,col 11)-(line 526,col 21)",
            "(line 527,col 11)-(line 527,col 38)",
            "(line 528,col 11)-(line 528,col 58)",
            "(line 529,col 11)-(line 529,col 57)",
            "(line 530,col 11)-(line 530,col 59)",
            "(line 531,col 11)-(line 531,col 45)",
            "(line 532,col 11)-(line 532,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.buildArray(int, double)",
        "snippet": "      protected static double[] buildArray(int n, double x) {\n          double[] array = new double[n];\n          Arrays.fill(array, x);\n          return array;\n      }\n",
        "begin_line": 535,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 536,col 11)-(line 536,col 41)",
            "(line 537,col 11)-(line 537,col 32)",
            "(line 538,col 11)-(line 538,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.getTarget()",
        "snippet": "      public double[] getTarget() {\n          return buildArray(m, 0.0);\n      }\n",
        "begin_line": 541,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 542,col 11)-(line 542,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.getWeight()",
        "snippet": "      public double[] getWeight() {\n          return buildArray(m, 1.0);\n      }\n",
        "begin_line": 545,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 546,col 11)-(line 546,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.getStartPoint()",
        "snippet": "      public double[] getStartPoint() {\n          return startParams.clone();\n      }\n",
        "begin_line": 549,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 550,col 11)-(line 550,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.setCostAccuracy(double)",
        "snippet": "      protected void setCostAccuracy(double costAccuracy) {\n          this.costAccuracy = costAccuracy;\n      }\n",
        "begin_line": 553,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 554,col 11)-(line 554,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.setParamsAccuracy(double)",
        "snippet": "      protected void setParamsAccuracy(double paramsAccuracy) {\n          this.paramsAccuracy = paramsAccuracy;\n      }\n",
        "begin_line": 557,
        "end_line": 559,
        "comment": "",
        "child_ranges": [
            "(line 558,col 11)-(line 558,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.getN()",
        "snippet": "      public int getN() {\n          return startParams.length;\n      }\n",
        "begin_line": 561,
        "end_line": 563,
        "comment": "",
        "child_ranges": [
            "(line 562,col 11)-(line 562,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.checkTheoreticalMinCost(double)",
        "snippet": "      public void checkTheoreticalMinCost(double rms) {\n          double threshold = costAccuracy * (1.0 + theoreticalMinCost);\n          assertEquals(theoreticalMinCost, Math.sqrt(m) * rms, threshold);\n      }\n",
        "begin_line": 565,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 566,col 11)-(line 566,col 71)",
            "(line 567,col 11)-(line 567,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.checkTheoreticalMinParams(org.apache.commons.math.optimization.VectorialPointValuePair)",
        "snippet": "      public void checkTheoreticalMinParams(VectorialPointValuePair optimum) {\n          double[] params = optimum.getPointRef();\n          if (theoreticalMinParams != null) {\n              for (int i = 0; i < theoreticalMinParams.length; ++i) {\n                  double mi = theoreticalMinParams[i];\n                  double vi = params[i];\n                  assertEquals(mi, vi, paramsAccuracy * (1.0 + Math.abs(mi)));\n              }\n          }\n      }\n",
        "begin_line": 570,
        "end_line": 579,
        "comment": "",
        "child_ranges": [
            "(line 571,col 11)-(line 571,col 50)",
            "(line 572,col 11)-(line 578,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.jacobian()",
        "snippet": "      public MultivariateMatrixFunction jacobian() {\n          return new MultivariateMatrixFunction() {\n            private static final long serialVersionUID = -2435076097232923678L;\n            public double[][] value(double[] point) {\n                  return jacobian(point);\n              }\n          };\n      }\n",
        "begin_line": 581,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 582,col 11)-(line 587,col 12)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.Anonymous-edbfb64a-5113-4202-b70b-3afc75f5caa0.value(double[])",
        "snippet": "            public double[][] value(double[] point) {\n                  return jacobian(point);\n              }\n",
        "begin_line": 584,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 585,col 19)-(line 585,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.jacobian(double[])",
        "snippet": "      public abstract double[][] jacobian(double[] variables);\n",
        "begin_line": 590,
        "end_line": 590,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MinpackFunction.value(double[])",
        "snippet": "      public abstract double[] value(double[] variables);\n",
        "begin_line": 592,
        "end_line": 592,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.LinearFullRankFunction.LinearFullRankFunction(int, int, double, double, double)",
        "snippet": "    public LinearFullRankFunction(int m, int n, double x0,\n                                  double theoreticalStartCost,\n                                  double theoreticalMinCost) {\n      super(m, buildArray(n, x0), theoreticalMinCost,\n            buildArray(n, -1.0));\n    }\n",
        "begin_line": 600,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 603,col 7)-(line 604,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.LinearFullRankFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double t = 2.0 / m;\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        jacobian[i] = new double[n];\n        for (int j = 0; j < n; ++j) {\n          jacobian[i][j] = (i == j) ? (1 - t) : -t;\n        }\n      }\n      return jacobian;\n    }\n",
        "begin_line": 607,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 609,col 7)-(line 609,col 25)",
            "(line 610,col 7)-(line 610,col 44)",
            "(line 611,col 7)-(line 616,col 7)",
            "(line 617,col 7)-(line 617,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.LinearFullRankFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double sum = 0;\n      for (int i = 0; i < n; ++i) {\n        sum += variables[i];\n      }\n      double t  = 1 + 2 * sum / m;\n      double[] f = new double[m];\n      for (int i = 0; i < n; ++i) {\n        f[i] = variables[i] - t;\n      }\n      Arrays.fill(f, n, m, -t);\n      return f;\n    }\n",
        "begin_line": 620,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 622,col 7)-(line 622,col 21)",
            "(line 623,col 7)-(line 625,col 7)",
            "(line 626,col 7)-(line 626,col 34)",
            "(line 627,col 7)-(line 627,col 33)",
            "(line 628,col 7)-(line 630,col 7)",
            "(line 631,col 7)-(line 631,col 31)",
            "(line 632,col 7)-(line 632,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.LinearRank1Function.LinearRank1Function(int, int, double, double, double)",
        "snippet": "    public LinearRank1Function(int m, int n, double x0,\n                                  double theoreticalStartCost,\n                                  double theoreticalMinCost) {\n      super(m, buildArray(n, x0), theoreticalMinCost, null);\n    }\n",
        "begin_line": 641,
        "end_line": 645,
        "comment": "",
        "child_ranges": [
            "(line 644,col 7)-(line 644,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.LinearRank1Function.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        jacobian[i] = new double[n];\n        for (int j = 0; j < n; ++j) {\n          jacobian[i][j] = (i + 1) * (j + 1);\n        }\n      }\n      return jacobian;\n    }\n",
        "begin_line": 647,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 649,col 7)-(line 649,col 44)",
            "(line 650,col 7)-(line 655,col 7)",
            "(line 656,col 7)-(line 656,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.LinearRank1Function.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double[] f = new double[m];\n      double sum = 0;\n      for (int i = 0; i < n; ++i) {\n        sum += (i + 1) * variables[i];\n      }\n      for (int i = 0; i < m; ++i) {\n        f[i] = (i + 1) * sum - 1;\n      }\n      return f;\n    }\n",
        "begin_line": 659,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 661,col 7)-(line 661,col 33)",
            "(line 662,col 7)-(line 662,col 21)",
            "(line 663,col 7)-(line 665,col 7)",
            "(line 666,col 7)-(line 668,col 7)",
            "(line 669,col 7)-(line 669,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.LinearRank1ZeroColsAndRowsFunction.LinearRank1ZeroColsAndRowsFunction(int, int, double)",
        "snippet": "    public LinearRank1ZeroColsAndRowsFunction(int m, int n, double x0) {\n      super(m, buildArray(n, x0),\n            Math.sqrt((m * (m + 3) - 6) / (2.0 * (2 * m - 3))),\n            null);\n    }\n",
        "begin_line": 678,
        "end_line": 682,
        "comment": "",
        "child_ranges": [
            "(line 679,col 7)-(line 681,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.LinearRank1ZeroColsAndRowsFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        jacobian[i] = new double[n];\n        jacobian[i][0] = 0;\n        for (int j = 1; j < (n - 1); ++j) {\n          if (i == 0) {\n            jacobian[i][j] = 0;\n          } else if (i != (m - 1)) {\n            jacobian[i][j] = i * (j + 1);\n          } else {\n            jacobian[i][j] = 0;\n          }\n        }\n        jacobian[i][n - 1] = 0;\n      }\n      return jacobian;\n    }\n",
        "begin_line": 684,
        "end_line": 702,
        "comment": "",
        "child_ranges": [
            "(line 686,col 7)-(line 686,col 44)",
            "(line 687,col 7)-(line 700,col 7)",
            "(line 701,col 7)-(line 701,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.LinearRank1ZeroColsAndRowsFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double[] f = new double[m];\n      double sum = 0;\n      for (int i = 1; i < (n - 1); ++i) {\n        sum += (i + 1) * variables[i];\n      }\n      for (int i = 0; i < (m - 1); ++i) {\n        f[i] = i * sum - 1;\n      }\n      f[m - 1] = -1;\n      return f;\n    }\n",
        "begin_line": 704,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 706,col 7)-(line 706,col 33)",
            "(line 707,col 7)-(line 707,col 21)",
            "(line 708,col 7)-(line 710,col 7)",
            "(line 711,col 7)-(line 713,col 7)",
            "(line 714,col 7)-(line 714,col 20)",
            "(line 715,col 7)-(line 715,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.RosenbrockFunction.RosenbrockFunction(double[], double)",
        "snippet": "    public RosenbrockFunction(double[] startParams, double theoreticalStartCost) {\n      super(2, startParams, 0.0, buildArray(2, 1.0));\n    }\n",
        "begin_line": 724,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 725,col 7)-(line 725,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.RosenbrockFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double x1 = variables[0];\n      return new double[][] { { -20 * x1, 10 }, { -1, 0 } };\n    }\n",
        "begin_line": 728,
        "end_line": 732,
        "comment": "",
        "child_ranges": [
            "(line 730,col 7)-(line 730,col 31)",
            "(line 731,col 7)-(line 731,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.RosenbrockFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      return new double[] { 10 * (x2 - x1 * x1), 1 - x1 };\n    }\n",
        "begin_line": 734,
        "end_line": 739,
        "comment": "",
        "child_ranges": [
            "(line 736,col 7)-(line 736,col 31)",
            "(line 737,col 7)-(line 737,col 31)",
            "(line 738,col 7)-(line 738,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.HelicalValleyFunction.HelicalValleyFunction(double[], double)",
        "snippet": "    public HelicalValleyFunction(double[] startParams,\n                                 double theoreticalStartCost) {\n      super(3, startParams, 0.0, new double[] { 1.0, 0.0, 0.0 });\n    }\n",
        "begin_line": 747,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 749,col 7)-(line 749,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.HelicalValleyFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      double tmpSquare = x1 * x1 + x2 * x2;\n      double tmp1 = twoPi * tmpSquare;\n      double tmp2 = Math.sqrt(tmpSquare);\n      return new double[][] {\n        {  100 * x2 / tmp1, -100 * x1 / tmp1, 10 },\n        { 10 * x1 / tmp2, 10 * x2 / tmp2, 0 },\n        { 0, 0, 1 }\n      };\n    }\n",
        "begin_line": 752,
        "end_line": 764,
        "comment": "",
        "child_ranges": [
            "(line 754,col 7)-(line 754,col 31)",
            "(line 755,col 7)-(line 755,col 31)",
            "(line 756,col 7)-(line 756,col 43)",
            "(line 757,col 7)-(line 757,col 38)",
            "(line 758,col 7)-(line 758,col 41)",
            "(line 759,col 7)-(line 763,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.HelicalValleyFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      double x3 = variables[2];\n      double tmp1;\n      if (x1 == 0) {\n        tmp1 = (x2 >= 0) ? 0.25 : -0.25;\n      } else {\n        tmp1 = Math.atan(x2 / x1) / twoPi;\n        if (x1 < 0) {\n          tmp1 += 0.5;\n        }\n      }\n      double tmp2 = Math.sqrt(x1 * x1 + x2 * x2);\n      return new double[] {\n        10.0 * (x3 - 10 * tmp1),\n        10.0 * (tmp2 - 1),\n        x3\n      };\n    }\n",
        "begin_line": 766,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 768,col 7)-(line 768,col 31)",
            "(line 769,col 7)-(line 769,col 31)",
            "(line 770,col 7)-(line 770,col 31)",
            "(line 771,col 7)-(line 771,col 18)",
            "(line 772,col 7)-(line 779,col 7)",
            "(line 780,col 7)-(line 780,col 49)",
            "(line 781,col 7)-(line 785,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.PowellSingularFunction.PowellSingularFunction(double[], double)",
        "snippet": "    public PowellSingularFunction(double[] startParams,\n                                  double theoreticalStartCost) {\n      super(4, startParams, 0.0, buildArray(4, 0.0));\n    }\n",
        "begin_line": 796,
        "end_line": 799,
        "comment": "",
        "child_ranges": [
            "(line 798,col 7)-(line 798,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.PowellSingularFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      double x3 = variables[2];\n      double x4 = variables[3];\n      return new double[][] {\n        { 1, 10, 0, 0 },\n        { 0, 0, sqrt5, -sqrt5 },\n        { 0, 2 * (x2 - 2 * x3), -4 * (x2 - 2 * x3), 0 },\n        { 2 * sqrt10 * (x1 - x4), 0, 0, -2 * sqrt10 * (x1 - x4) }\n      };\n    }\n",
        "begin_line": 801,
        "end_line": 813,
        "comment": "",
        "child_ranges": [
            "(line 803,col 7)-(line 803,col 31)",
            "(line 804,col 7)-(line 804,col 31)",
            "(line 805,col 7)-(line 805,col 31)",
            "(line 806,col 7)-(line 806,col 31)",
            "(line 807,col 7)-(line 812,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.PowellSingularFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      double x3 = variables[2];\n      double x4 = variables[3];\n      return new double[] {\n        x1 + 10 * x2,\n        sqrt5 * (x3 - x4),\n        (x2 - 2 * x3) * (x2 - 2 * x3),\n        sqrt10 * (x1 - x4) * (x1 - x4)\n      };\n    }\n",
        "begin_line": 815,
        "end_line": 827,
        "comment": "",
        "child_ranges": [
            "(line 817,col 7)-(line 817,col 31)",
            "(line 818,col 7)-(line 818,col 31)",
            "(line 819,col 7)-(line 819,col 31)",
            "(line 820,col 7)-(line 820,col 31)",
            "(line 821,col 7)-(line 826,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.FreudensteinRothFunction.FreudensteinRothFunction(double[], double, double, double[])",
        "snippet": "    public FreudensteinRothFunction(double[] startParams,\n                                    double theoreticalStartCost,\n                                    double theoreticalMinCost,\n                                    double[] theoreticalMinParams) {\n      super(2, startParams, theoreticalMinCost,\n            theoreticalMinParams);\n    }\n",
        "begin_line": 838,
        "end_line": 844,
        "comment": "",
        "child_ranges": [
            "(line 842,col 7)-(line 843,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.FreudensteinRothFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double x2 = variables[1];\n      return new double[][] {\n        { 1, x2 * (10 - 3 * x2) -  2 },\n        { 1, x2 * ( 2 + 3 * x2) - 14, }\n      };\n    }\n",
        "begin_line": 846,
        "end_line": 853,
        "comment": "",
        "child_ranges": [
            "(line 848,col 7)-(line 848,col 31)",
            "(line 849,col 7)-(line 852,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.FreudensteinRothFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      return new double[] {\n       -13.0 + x1 + ((5.0 - x2) * x2 -  2.0) * x2,\n       -29.0 + x1 + ((1.0 + x2) * x2 - 14.0) * x2\n      };\n    }\n",
        "begin_line": 855,
        "end_line": 863,
        "comment": "",
        "child_ranges": [
            "(line 857,col 7)-(line 857,col 31)",
            "(line 858,col 7)-(line 858,col 31)",
            "(line 859,col 7)-(line 862,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.BardFunction.BardFunction(double, double, double, double[])",
        "snippet": "    public BardFunction(double x0,\n                        double theoreticalStartCost,\n                        double theoreticalMinCost,\n                        double[] theoreticalMinParams) {\n      super(15, buildArray(3, x0), theoreticalMinCost,\n            theoreticalMinParams);\n    }\n",
        "begin_line": 871,
        "end_line": 877,
        "comment": "",
        "child_ranges": [
            "(line 875,col 7)-(line 876,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.BardFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double   x2 = variables[1];\n      double   x3 = variables[2];\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        double tmp1 = i  + 1;\n        double tmp2 = 15 - i;\n        double tmp3 = (i <= 7) ? tmp1 : tmp2;\n        double tmp4 = x2 * tmp2 + x3 * tmp3;\n        tmp4 *= tmp4;\n        jacobian[i] = new double[] { -1, tmp1 * tmp2 / tmp4, tmp1 * tmp3 / tmp4 };\n      }\n      return jacobian;\n    }\n",
        "begin_line": 879,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 881,col 7)-(line 881,col 33)",
            "(line 882,col 7)-(line 882,col 33)",
            "(line 883,col 7)-(line 883,col 44)",
            "(line 884,col 7)-(line 891,col 7)",
            "(line 892,col 7)-(line 892,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.BardFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double   x1 = variables[0];\n      double   x2 = variables[1];\n      double   x3 = variables[2];\n      double[] f = new double[m];\n      for (int i = 0; i < m; ++i) {\n        double tmp1 = i + 1;\n        double tmp2 = 15 - i;\n        double tmp3 = (i <= 7) ? tmp1 : tmp2;\n        f[i] = y[i] - (x1 + tmp1 / (x2 * tmp2 + x3 * tmp3));\n      }\n      return f;\n    }\n",
        "begin_line": 895,
        "end_line": 908,
        "comment": "",
        "child_ranges": [
            "(line 897,col 7)-(line 897,col 33)",
            "(line 898,col 7)-(line 898,col 33)",
            "(line 899,col 7)-(line 899,col 33)",
            "(line 900,col 7)-(line 900,col 33)",
            "(line 901,col 7)-(line 906,col 7)",
            "(line 907,col 7)-(line 907,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.KowalikOsborneFunction.KowalikOsborneFunction(double[], double, double, double[])",
        "snippet": "    public KowalikOsborneFunction(double[] startParams,\n                                  double theoreticalStartCost,\n                                  double theoreticalMinCost,\n                                  double[] theoreticalMinParams) {\n      super(11, startParams, theoreticalMinCost,\n            theoreticalMinParams);\n      if (theoreticalStartCost > 20.0) {\n        setCostAccuracy(2.0e-4);\n        setParamsAccuracy(5.0e-3);\n      }\n    }\n",
        "begin_line": 922,
        "end_line": 932,
        "comment": "",
        "child_ranges": [
            "(line 926,col 7)-(line 927,col 34)",
            "(line 928,col 7)-(line 931,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.KowalikOsborneFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double   x1 = variables[0];\n      double   x2 = variables[1];\n      double   x3 = variables[2];\n      double   x4 = variables[3];\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        double tmp = v[i] * (v[i] + x3) + x4;\n        double j1  = -v[i] * (v[i] + x2) / tmp;\n        double j2  = -v[i] * x1 / tmp;\n        double j3  = j1 * j2;\n        double j4  = j3 / v[i];\n        jacobian[i] = new double[] { j1, j2, j3, j4 };\n      }\n      return jacobian;\n    }\n",
        "begin_line": 934,
        "end_line": 950,
        "comment": "",
        "child_ranges": [
            "(line 936,col 7)-(line 936,col 33)",
            "(line 937,col 7)-(line 937,col 33)",
            "(line 938,col 7)-(line 938,col 33)",
            "(line 939,col 7)-(line 939,col 33)",
            "(line 940,col 7)-(line 940,col 44)",
            "(line 941,col 7)-(line 948,col 7)",
            "(line 949,col 7)-(line 949,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.KowalikOsborneFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      double x3 = variables[2];\n      double x4 = variables[3];\n      double[] f = new double[m];\n      for (int i = 0; i < m; ++i) {\n        f[i] = y[i] - x1 * (v[i] * (v[i] + x2)) / (v[i] * (v[i] + x3) + x4);\n      }\n      return f;\n    }\n",
        "begin_line": 952,
        "end_line": 963,
        "comment": "",
        "child_ranges": [
            "(line 954,col 7)-(line 954,col 31)",
            "(line 955,col 7)-(line 955,col 31)",
            "(line 956,col 7)-(line 956,col 31)",
            "(line 957,col 7)-(line 957,col 31)",
            "(line 958,col 7)-(line 958,col 33)",
            "(line 959,col 7)-(line 961,col 7)",
            "(line 962,col 7)-(line 962,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MeyerFunction.MeyerFunction(double[], double, double, double[])",
        "snippet": "    public MeyerFunction(double[] startParams,\n                         double theoreticalStartCost,\n                         double theoreticalMinCost,\n                         double[] theoreticalMinParams) {\n      super(16, startParams, theoreticalMinCost,\n            theoreticalMinParams);\n      if (theoreticalStartCost > 1.0e6) {\n        setCostAccuracy(7.0e-3);\n        setParamsAccuracy(2.0e-2);\n      }\n    }\n",
        "begin_line": 980,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 984,col 7)-(line 985,col 34)",
            "(line 986,col 7)-(line 989,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MeyerFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double   x1 = variables[0];\n      double   x2 = variables[1];\n      double   x3 = variables[2];\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        double temp = 5.0 * (i + 1) + 45.0 + x3;\n        double tmp1 = x2 / temp;\n        double tmp2 = Math.exp(tmp1);\n        double tmp3 = x1 * tmp2 / temp;\n        jacobian[i] = new double[] { tmp2, tmp3, -tmp1 * tmp3 };\n      }\n      return jacobian;\n    }\n",
        "begin_line": 992,
        "end_line": 1006,
        "comment": "",
        "child_ranges": [
            "(line 994,col 7)-(line 994,col 33)",
            "(line 995,col 7)-(line 995,col 33)",
            "(line 996,col 7)-(line 996,col 33)",
            "(line 997,col 7)-(line 997,col 44)",
            "(line 998,col 7)-(line 1004,col 7)",
            "(line 1005,col 7)-(line 1005,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.MeyerFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      double x3 = variables[2];\n      double[] f = new double[m];\n      for (int i = 0; i < m; ++i) {\n        f[i] = x1 * Math.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];\n      }\n     return f;\n    }\n",
        "begin_line": 1008,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 7)-(line 1010,col 31)",
            "(line 1011,col 7)-(line 1011,col 31)",
            "(line 1012,col 7)-(line 1012,col 31)",
            "(line 1013,col 7)-(line 1013,col 33)",
            "(line 1014,col 7)-(line 1016,col 7)",
            "(line 1017,col 6)-(line 1017,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.WatsonFunction.WatsonFunction(int, double, double, double, double[])",
        "snippet": "    public WatsonFunction(int n, double x0,\n                          double theoreticalStartCost,\n                          double theoreticalMinCost,\n                          double[] theoreticalMinParams) {\n      super(31, buildArray(n, x0), theoreticalMinCost,\n            theoreticalMinParams);\n    }\n",
        "begin_line": 1033,
        "end_line": 1039,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 7)-(line 1038,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.WatsonFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n\n      double[][] jacobian = new double[m][];\n\n      for (int i = 0; i < (m - 2); ++i) {\n        double div = (i + 1) / 29.0;\n        double s2  = 0.0;\n        double dx  = 1.0;\n        for (int j = 0; j < n; ++j) {\n          s2 += dx * variables[j];\n          dx *= div;\n        }\n        double temp= 2 * div * s2;\n        dx = 1.0 / div;\n        jacobian[i] = new double[n];\n        for (int j = 0; j < n; ++j) {\n          jacobian[i][j] = dx * (j - temp);\n          dx *= div;\n        }\n      }\n\n      jacobian[m - 2]    = new double[n];\n      jacobian[m - 2][0] = 1;\n\n      jacobian[m - 1]   = new double[n];\n      jacobian[m - 1][0]= -2 * variables[0];\n      jacobian[m - 1][1]= 1;\n\n      return jacobian;\n\n    }\n",
        "begin_line": 1041,
        "end_line": 1072,
        "comment": "",
        "child_ranges": [
            "(line 1044,col 7)-(line 1044,col 44)",
            "(line 1046,col 7)-(line 1061,col 7)",
            "(line 1063,col 7)-(line 1063,col 41)",
            "(line 1064,col 7)-(line 1064,col 29)",
            "(line 1066,col 7)-(line 1066,col 40)",
            "(line 1067,col 7)-(line 1067,col 44)",
            "(line 1068,col 7)-(line 1068,col 28)",
            "(line 1070,col 7)-(line 1070,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.WatsonFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n     double[] f = new double[m];\n     for (int i = 0; i < (m - 2); ++i) {\n       double div = (i + 1) / 29.0;\n       double s1 = 0;\n       double dx = 1;\n       for (int j = 1; j < n; ++j) {\n         s1 += j * dx * variables[j];\n         dx *= div;\n       }\n       double s2 =0;\n       dx =1;\n       for (int j = 0; j < n; ++j) {\n         s2 += dx * variables[j];\n         dx *= div;\n       }\n       f[i] = s1 - s2 * s2 - 1;\n     }\n\n     double x1 = variables[0];\n     double x2 = variables[1];\n     f[m - 2] = x1;\n     f[m - 1] = x2 - x1 * x1 - 1;\n\n     return f;\n\n    }\n",
        "begin_line": 1074,
        "end_line": 1101,
        "comment": "",
        "child_ranges": [
            "(line 1076,col 6)-(line 1076,col 32)",
            "(line 1077,col 6)-(line 1092,col 6)",
            "(line 1094,col 6)-(line 1094,col 30)",
            "(line 1095,col 6)-(line 1095,col 30)",
            "(line 1096,col 6)-(line 1096,col 19)",
            "(line 1097,col 6)-(line 1097,col 33)",
            "(line 1099,col 6)-(line 1099,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.Box3DimensionalFunction.Box3DimensionalFunction(int, double[], double)",
        "snippet": "    public Box3DimensionalFunction(int m, double[] startParams,\n                                   double theoreticalStartCost) {\n      super(m, startParams, 0.0,\n            new double[] { 1.0, 10.0, 1.0 });\n   }\n",
        "begin_line": 1109,
        "end_line": 1113,
        "comment": "",
        "child_ranges": [
            "(line 1111,col 7)-(line 1112,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.Box3DimensionalFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double   x1 = variables[0];\n      double   x2 = variables[1];\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        double tmp = (i + 1) / 10.0;\n        jacobian[i] = new double[] {\n          -tmp * Math.exp(-tmp * x1),\n           tmp * Math.exp(-tmp * x2),\n          Math.exp(-i - 1) - Math.exp(-tmp)\n        };\n      }\n      return jacobian;\n    }\n",
        "begin_line": 1115,
        "end_line": 1129,
        "comment": "",
        "child_ranges": [
            "(line 1117,col 7)-(line 1117,col 33)",
            "(line 1118,col 7)-(line 1118,col 33)",
            "(line 1119,col 7)-(line 1119,col 44)",
            "(line 1120,col 7)-(line 1127,col 7)",
            "(line 1128,col 7)-(line 1128,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.Box3DimensionalFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      double x3 = variables[2];\n      double[] f = new double[m];\n      for (int i = 0; i < m; ++i) {\n        double tmp = (i + 1) / 10.0;\n        f[i] = Math.exp(-tmp * x1) - Math.exp(-tmp * x2)\n             + (Math.exp(-i - 1) - Math.exp(-tmp)) * x3;\n      }\n      return f;\n    }\n",
        "begin_line": 1131,
        "end_line": 1143,
        "comment": "",
        "child_ranges": [
            "(line 1133,col 7)-(line 1133,col 31)",
            "(line 1134,col 7)-(line 1134,col 31)",
            "(line 1135,col 7)-(line 1135,col 31)",
            "(line 1136,col 7)-(line 1136,col 33)",
            "(line 1137,col 7)-(line 1141,col 7)",
            "(line 1142,col 7)-(line 1142,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.JennrichSampsonFunction.JennrichSampsonFunction(int, double[], double, double, double[])",
        "snippet": "    public JennrichSampsonFunction(int m, double[] startParams,\n                                   double theoreticalStartCost,\n                                   double theoreticalMinCost,\n                                   double[] theoreticalMinParams) {\n      super(m, startParams, theoreticalMinCost,\n            theoreticalMinParams);\n    }\n",
        "begin_line": 1151,
        "end_line": 1157,
        "comment": "",
        "child_ranges": [
            "(line 1155,col 7)-(line 1156,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.JennrichSampsonFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double   x1 = variables[0];\n      double   x2 = variables[1];\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        double t = i + 1;\n        jacobian[i] = new double[] { -t * Math.exp(t * x1), -t * Math.exp(t * x2) };\n      }\n      return jacobian;\n    }\n",
        "begin_line": 1159,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1161,col 7)-(line 1161,col 33)",
            "(line 1162,col 7)-(line 1162,col 33)",
            "(line 1163,col 7)-(line 1163,col 44)",
            "(line 1164,col 7)-(line 1167,col 7)",
            "(line 1168,col 7)-(line 1168,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.JennrichSampsonFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      double[] f = new double[m];\n      for (int i = 0; i < m; ++i) {\n        double temp = i + 1;\n        f[i] = 2 + 2 * temp - Math.exp(temp * x1) - Math.exp(temp * x2);\n      }\n      return f;\n    }\n",
        "begin_line": 1171,
        "end_line": 1181,
        "comment": "",
        "child_ranges": [
            "(line 1173,col 7)-(line 1173,col 31)",
            "(line 1174,col 7)-(line 1174,col 31)",
            "(line 1175,col 7)-(line 1175,col 33)",
            "(line 1176,col 7)-(line 1179,col 7)",
            "(line 1180,col 7)-(line 1180,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.BrownDennisFunction.BrownDennisFunction(int, double[], double, double, double[])",
        "snippet": "    public BrownDennisFunction(int m, double[] startParams,\n                               double theoreticalStartCost,\n                               double theoreticalMinCost,\n                               double[] theoreticalMinParams) {\n      super(m, startParams, theoreticalMinCost,\n            theoreticalMinParams);\n      setCostAccuracy(2.5e-8);\n    }\n",
        "begin_line": 1189,
        "end_line": 1196,
        "comment": "",
        "child_ranges": [
            "(line 1193,col 7)-(line 1194,col 34)",
            "(line 1195,col 7)-(line 1195,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.BrownDennisFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double   x1 = variables[0];\n      double   x2 = variables[1];\n      double   x3 = variables[2];\n      double   x4 = variables[3];\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        double temp = (i + 1) / 5.0;\n        double ti   = Math.sin(temp);\n        double tmp1 = x1 + temp * x2 - Math.exp(temp);\n        double tmp2 = x3 + ti   * x4 - Math.cos(temp);\n        jacobian[i] = new double[] {\n          2 * tmp1, 2 * temp * tmp1, 2 * tmp2, 2 * ti * tmp2\n        };\n      }\n      return jacobian;\n    }\n",
        "begin_line": 1198,
        "end_line": 1215,
        "comment": "",
        "child_ranges": [
            "(line 1200,col 7)-(line 1200,col 33)",
            "(line 1201,col 7)-(line 1201,col 33)",
            "(line 1202,col 7)-(line 1202,col 33)",
            "(line 1203,col 7)-(line 1203,col 33)",
            "(line 1204,col 7)-(line 1204,col 44)",
            "(line 1205,col 7)-(line 1213,col 7)",
            "(line 1214,col 7)-(line 1214,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.BrownDennisFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      double x3 = variables[2];\n      double x4 = variables[3];\n      double[] f = new double[m];\n      for (int i = 0; i < m; ++i) {\n        double temp = (i + 1) / 5.0;\n        double tmp1 = x1 + temp * x2 - Math.exp(temp);\n        double tmp2 = x3 + Math.sin(temp) * x4 - Math.cos(temp);\n        f[i] = tmp1 * tmp1 + tmp2 * tmp2;\n      }\n      return f;\n    }\n",
        "begin_line": 1217,
        "end_line": 1231,
        "comment": "",
        "child_ranges": [
            "(line 1219,col 7)-(line 1219,col 31)",
            "(line 1220,col 7)-(line 1220,col 31)",
            "(line 1221,col 7)-(line 1221,col 31)",
            "(line 1222,col 7)-(line 1222,col 31)",
            "(line 1223,col 7)-(line 1223,col 33)",
            "(line 1224,col 7)-(line 1229,col 7)",
            "(line 1230,col 7)-(line 1230,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.ChebyquadFunction.buildChebyquadArray(int, double)",
        "snippet": "    private static double[] buildChebyquadArray(int n, double factor) {\n      double[] array = new double[n];\n      double inv = factor / (n + 1);\n      for (int i = 0; i < n; ++i) {\n        array[i] = (i + 1) * inv;\n      }\n      return array;\n    }\n",
        "begin_line": 1239,
        "end_line": 1246,
        "comment": "",
        "child_ranges": [
            "(line 1240,col 7)-(line 1240,col 37)",
            "(line 1241,col 7)-(line 1241,col 36)",
            "(line 1242,col 7)-(line 1244,col 7)",
            "(line 1245,col 7)-(line 1245,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.ChebyquadFunction.ChebyquadFunction(int, int, double, double, double, double[])",
        "snippet": "    public ChebyquadFunction(int n, int m, double factor,\n                             double theoreticalStartCost,\n                             double theoreticalMinCost,\n                             double[] theoreticalMinParams) {\n      super(m, buildChebyquadArray(n, factor), theoreticalMinCost,\n            theoreticalMinParams);\n    }\n",
        "begin_line": 1248,
        "end_line": 1254,
        "comment": "",
        "child_ranges": [
            "(line 1252,col 7)-(line 1253,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.ChebyquadFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        jacobian[i] = new double[n];\n      }\n\n      double dx = 1.0 / n;\n      for (int j = 0; j < n; ++j) {\n        double tmp1 = 1;\n        double tmp2 = 2 * variables[j] - 1;\n        double temp = 2 * tmp2;\n        double tmp3 = 0;\n        double tmp4 = 2;\n        for (int i = 0; i < m; ++i) {\n          jacobian[i][j] = dx * tmp4;\n          double ti = 4 * tmp2 + temp * tmp4 - tmp3;\n          tmp3 = tmp4;\n          tmp4 = ti;\n          ti   = temp * tmp2 - tmp1;\n          tmp1 = tmp2;\n          tmp2 = ti;\n        }\n      }\n\n      return jacobian;\n\n    }\n",
        "begin_line": 1256,
        "end_line": 1284,
        "comment": "",
        "child_ranges": [
            "(line 1259,col 7)-(line 1259,col 44)",
            "(line 1260,col 7)-(line 1262,col 7)",
            "(line 1264,col 7)-(line 1264,col 26)",
            "(line 1265,col 7)-(line 1280,col 7)",
            "(line 1282,col 7)-(line 1282,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.ChebyquadFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n\n      double[] f = new double[m];\n\n      for (int j = 0; j < n; ++j) {\n        double tmp1 = 1;\n        double tmp2 = 2 * variables[j] - 1;\n        double temp = 2 * tmp2;\n        for (int i = 0; i < m; ++i) {\n          f[i] += tmp2;\n          double ti = temp * tmp2 - tmp1;\n          tmp1 = tmp2;\n          tmp2 = ti;\n        }\n      }\n\n      double dx = 1.0 / n;\n      boolean iev = false;\n      for (int i = 0; i < m; ++i) {\n        f[i] *= dx;\n        if (iev) {\n          f[i] += 1.0 / (i * (i + 2));\n        }\n        iev = ! iev;\n      }\n\n      return f;\n\n    }\n",
        "begin_line": 1286,
        "end_line": 1315,
        "comment": "",
        "child_ranges": [
            "(line 1289,col 7)-(line 1289,col 33)",
            "(line 1291,col 7)-(line 1301,col 7)",
            "(line 1303,col 7)-(line 1303,col 26)",
            "(line 1304,col 7)-(line 1304,col 26)",
            "(line 1305,col 7)-(line 1311,col 7)",
            "(line 1313,col 7)-(line 1313,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.BrownAlmostLinearFunction.BrownAlmostLinearFunction(int, double, double, double, double[])",
        "snippet": "    public BrownAlmostLinearFunction(int m, double factor,\n                                     double theoreticalStartCost,\n                                     double theoreticalMinCost,\n                                     double[] theoreticalMinParams) {\n      super(m, buildArray(m, factor), theoreticalMinCost,\n            theoreticalMinParams);\n    }\n",
        "begin_line": 1323,
        "end_line": 1329,
        "comment": "",
        "child_ranges": [
            "(line 1327,col 7)-(line 1328,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.BrownAlmostLinearFunction.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        jacobian[i] = new double[n];\n      }\n\n      double prod = 1;\n      for (int j = 0; j < n; ++j) {\n        prod *= variables[j];\n        for (int i = 0; i < n; ++i) {\n          jacobian[i][j] = 1;\n        }\n        jacobian[j][j] = 2;\n      }\n\n      for (int j = 0; j < n; ++j) {\n        double temp = variables[j];\n        if (temp == 0) {\n          temp = 1;\n          prod = 1;\n          for (int k = 0; k < n; ++k) {\n            if (k != j) {\n              prod *= variables[k];\n            }\n          }\n        }\n        jacobian[n - 1][j] = prod / temp;\n      }\n\n      return jacobian;\n\n    }\n",
        "begin_line": 1331,
        "end_line": 1363,
        "comment": "",
        "child_ranges": [
            "(line 1333,col 7)-(line 1333,col 44)",
            "(line 1334,col 7)-(line 1336,col 7)",
            "(line 1338,col 7)-(line 1338,col 22)",
            "(line 1339,col 7)-(line 1345,col 7)",
            "(line 1347,col 7)-(line 1359,col 7)",
            "(line 1361,col 7)-(line 1361,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.BrownAlmostLinearFunction.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double[] f = new double[m];\n      double sum  = -(n + 1);\n      double prod = 1;\n      for (int j = 0; j < n; ++j) {\n        sum  += variables[j];\n        prod *= variables[j];\n      }\n      for (int i = 0; i < n; ++i) {\n        f[i] = variables[i] + sum;\n      }\n      f[n - 1] = prod - 1;\n      return f;\n    }\n",
        "begin_line": 1365,
        "end_line": 1379,
        "comment": "",
        "child_ranges": [
            "(line 1367,col 7)-(line 1367,col 33)",
            "(line 1368,col 7)-(line 1368,col 29)",
            "(line 1369,col 7)-(line 1369,col 22)",
            "(line 1370,col 7)-(line 1373,col 7)",
            "(line 1374,col 7)-(line 1376,col 7)",
            "(line 1377,col 7)-(line 1377,col 26)",
            "(line 1378,col 7)-(line 1378,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.Osborne1Function.Osborne1Function(double[], double, double, double[])",
        "snippet": "    public Osborne1Function(double[] startParams,\n                            double theoreticalStartCost,\n                            double theoreticalMinCost,\n                            double[] theoreticalMinParams) {\n      super(33, startParams, theoreticalMinCost,\n            theoreticalMinParams);\n    }\n",
        "begin_line": 1387,
        "end_line": 1393,
        "comment": "",
        "child_ranges": [
            "(line 1391,col 7)-(line 1392,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.Osborne1Function.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double   x2 = variables[1];\n      double   x3 = variables[2];\n      double   x4 = variables[3];\n      double   x5 = variables[4];\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        double temp = 10.0 * i;\n        double tmp1 = Math.exp(-temp * x4);\n        double tmp2 = Math.exp(-temp * x5);\n        jacobian[i] = new double[] {\n          -1, -tmp1, -tmp2, temp * x2 * tmp1, temp * x3 * tmp2\n        };\n      }\n      return jacobian;\n    }\n",
        "begin_line": 1395,
        "end_line": 1411,
        "comment": "",
        "child_ranges": [
            "(line 1397,col 7)-(line 1397,col 33)",
            "(line 1398,col 7)-(line 1398,col 33)",
            "(line 1399,col 7)-(line 1399,col 33)",
            "(line 1400,col 7)-(line 1400,col 33)",
            "(line 1401,col 7)-(line 1401,col 44)",
            "(line 1402,col 7)-(line 1409,col 7)",
            "(line 1410,col 7)-(line 1410,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.Osborne1Function.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x1 = variables[0];\n      double x2 = variables[1];\n      double x3 = variables[2];\n      double x4 = variables[3];\n      double x5 = variables[4];\n      double[] f = new double[m];\n      for (int i = 0; i < m; ++i) {\n        double temp = 10.0 * i;\n        double tmp1 = Math.exp(-temp * x4);\n        double tmp2 = Math.exp(-temp * x5);\n        f[i] = y[i] - (x1 + x2 * tmp1 + x3 * tmp2);\n      }\n      return f;\n    }\n",
        "begin_line": 1413,
        "end_line": 1428,
        "comment": "",
        "child_ranges": [
            "(line 1415,col 7)-(line 1415,col 31)",
            "(line 1416,col 7)-(line 1416,col 31)",
            "(line 1417,col 7)-(line 1417,col 31)",
            "(line 1418,col 7)-(line 1418,col 31)",
            "(line 1419,col 7)-(line 1419,col 31)",
            "(line 1420,col 7)-(line 1420,col 33)",
            "(line 1421,col 7)-(line 1426,col 7)",
            "(line 1427,col 7)-(line 1427,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.Osborne2Function.Osborne2Function(double[], double, double, double[])",
        "snippet": "    public Osborne2Function(double[] startParams,\n                            double theoreticalStartCost,\n                            double theoreticalMinCost,\n                            double[] theoreticalMinParams) {\n      super(65, startParams, theoreticalMinCost,\n            theoreticalMinParams);\n    }\n",
        "begin_line": 1442,
        "end_line": 1448,
        "comment": "",
        "child_ranges": [
            "(line 1446,col 7)-(line 1447,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.Osborne2Function.jacobian(double[])",
        "snippet": "    @Override\n    public double[][] jacobian(double[] variables) {\n      double   x01 = variables[0];\n      double   x02 = variables[1];\n      double   x03 = variables[2];\n      double   x04 = variables[3];\n      double   x05 = variables[4];\n      double   x06 = variables[5];\n      double   x07 = variables[6];\n      double   x08 = variables[7];\n      double   x09 = variables[8];\n      double   x10 = variables[9];\n      double   x11 = variables[10];\n      double[][] jacobian = new double[m][];\n      for (int i = 0; i < m; ++i) {\n        double temp = i / 10.0;\n        double tmp1 = Math.exp(-x05 * temp);\n        double tmp2 = Math.exp(-x06 * (temp - x09) * (temp - x09));\n        double tmp3 = Math.exp(-x07 * (temp - x10) * (temp - x10));\n        double tmp4 = Math.exp(-x08 * (temp - x11) * (temp - x11));\n        jacobian[i] = new double[] {\n          -tmp1,\n          -tmp2,\n          -tmp3,\n          -tmp4,\n          temp * x01 * tmp1,\n          x02 * (temp - x09) * (temp - x09) * tmp2,\n          x03 * (temp - x10) * (temp - x10) * tmp3,\n          x04 * (temp - x11) * (temp - x11) * tmp4,\n          -2 * x02 * x06 * (temp - x09) * tmp2,\n          -2 * x03 * x07 * (temp - x10) * tmp3,\n          -2 * x04 * x08 * (temp - x11) * tmp4\n        };\n      }\n      return jacobian;\n    }\n",
        "begin_line": 1450,
        "end_line": 1485,
        "comment": "",
        "child_ranges": [
            "(line 1452,col 7)-(line 1452,col 34)",
            "(line 1453,col 7)-(line 1453,col 34)",
            "(line 1454,col 7)-(line 1454,col 34)",
            "(line 1455,col 7)-(line 1455,col 34)",
            "(line 1456,col 7)-(line 1456,col 34)",
            "(line 1457,col 7)-(line 1457,col 34)",
            "(line 1458,col 7)-(line 1458,col 34)",
            "(line 1459,col 7)-(line 1459,col 34)",
            "(line 1460,col 7)-(line 1460,col 34)",
            "(line 1461,col 7)-(line 1461,col 34)",
            "(line 1462,col 7)-(line 1462,col 35)",
            "(line 1463,col 7)-(line 1463,col 44)",
            "(line 1464,col 7)-(line 1483,col 7)",
            "(line 1484,col 7)-(line 1484,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.MinpackTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
        "signature": "org.apache.commons.math.optimization.general.MinpackTest.Osborne2Function.value(double[])",
        "snippet": "    @Override\n    public double[] value(double[] variables) {\n      double x01 = variables[0];\n      double x02 = variables[1];\n      double x03 = variables[2];\n      double x04 = variables[3];\n      double x05 = variables[4];\n      double x06 = variables[5];\n      double x07 = variables[6];\n      double x08 = variables[7];\n      double x09 = variables[8];\n      double x10 = variables[9];\n      double x11 = variables[10];\n      double[] f = new double[m];\n      for (int i = 0; i < m; ++i) {\n        double temp = i / 10.0;\n        double tmp1 = Math.exp(-x05 * temp);\n        double tmp2 = Math.exp(-x06 * (temp - x09) * (temp - x09));\n        double tmp3 = Math.exp(-x07 * (temp - x10) * (temp - x10));\n        double tmp4 = Math.exp(-x08 * (temp - x11) * (temp - x11));\n        f[i] = y[i] - (x01 * tmp1 + x02 * tmp2 + x03 * tmp3 + x04 * tmp4);\n      }\n      return f;\n    }\n",
        "begin_line": 1487,
        "end_line": 1510,
        "comment": "",
        "child_ranges": [
            "(line 1489,col 7)-(line 1489,col 32)",
            "(line 1490,col 7)-(line 1490,col 32)",
            "(line 1491,col 7)-(line 1491,col 32)",
            "(line 1492,col 7)-(line 1492,col 32)",
            "(line 1493,col 7)-(line 1493,col 32)",
            "(line 1494,col 7)-(line 1494,col 32)",
            "(line 1495,col 7)-(line 1495,col 32)",
            "(line 1496,col 7)-(line 1496,col 32)",
            "(line 1497,col 7)-(line 1497,col 32)",
            "(line 1498,col 7)-(line 1498,col 32)",
            "(line 1499,col 7)-(line 1499,col 33)",
            "(line 1500,col 7)-(line 1500,col 33)",
            "(line 1501,col 7)-(line 1508,col 7)",
            "(line 1509,col 7)-(line 1509,col 15)"
        ]
    }
]