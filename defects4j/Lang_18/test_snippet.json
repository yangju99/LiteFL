[
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.FastDateFormatTest(java.lang.String)",
        "snippet": "    public FastDateFormatTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance()",
        "snippet": "    public void test_getInstance() {\n        FastDateFormat format1 = FastDateFormat.getInstance();\n        FastDateFormat format2 = FastDateFormat.getInstance();\n        assertSame(format1, format2);\n        assertEquals(new SimpleDateFormat().toPattern(), format1.getPattern());\n    }\n",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 62)",
            "(line 44,col 9)-(line 44,col 62)",
            "(line 45,col 9)-(line 45,col 37)",
            "(line 46,col 9)-(line 46,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String()",
        "snippet": "    public void test_getInstance_String() {\n        FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n        FastDateFormat format2 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n        FastDateFormat format3 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n\n        assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n        assertSame(format2, format3);\n        assertEquals(\"MM/DD/yyyy\", format1.getPattern());\n        assertEquals(TimeZone.getDefault(), format1.getTimeZone());\n        assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n    }\n",
        "begin_line": 49,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 74)",
            "(line 51,col 9)-(line 51,col 74)",
            "(line 52,col 9)-(line 52,col 74)",
            "(line 54,col 9)-(line 54,col 39)",
            "(line 55,col 9)-(line 55,col 37)",
            "(line 56,col 9)-(line 56,col 57)",
            "(line 57,col 9)-(line 57,col 67)",
            "(line 58,col 9)-(line 58,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone()",
        "snippet": "    public void test_getInstance_String_TimeZone() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n            FastDateFormat format4 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n            FastDateFormat format5 = FastDateFormat.getInstance(\"MM-DD-yyyy\", TimeZone.getDefault());\n            FastDateFormat format6 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n            assertSame(format3, format4);\n            assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);\n            assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }\n",
        "begin_line": 61,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 55)",
            "(line 63,col 9)-(line 63,col 57)",
            "(line 64,col 9)-(line 86,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_Locale()",
        "snippet": "    public void test_getInstance_String_Locale() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertSame(format1, format3);\n            assertEquals(Locale.GERMANY, format1.getLocale());\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }\n",
        "begin_line": 89,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 55)",
            "(line 91,col 9)-(line 103,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance()",
        "snippet": "    public void test_changeDefault_Locale_DateInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }\n",
        "begin_line": 106,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 55)",
            "(line 108,col 9)-(line 123,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance()",
        "snippet": "    public void test_changeDefault_Locale_DateTimeInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }\n",
        "begin_line": 126,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 55)",
            "(line 128,col 9)-(line 143,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale()",
        "snippet": "    public void test_getInstance_String_TimeZone_Locale() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getDefault(), Locale.GERMANY);\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);\n            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format3.getTimeZone());\n            assertEquals(Locale.GERMANY, format1.getLocale());\n            assertEquals(Locale.GERMANY, format2.getLocale());\n            assertEquals(Locale.GERMANY, format3.getLocale());\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }\n",
        "begin_line": 146,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 55)",
            "(line 148,col 9)-(line 148,col 57)",
            "(line 149,col 9)-(line 170,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testFormat()",
        "snippet": "    public void testFormat() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            assertEquals(sdf.format(date1), fdf.format(date1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            assertEquals(\"-0500\", fdf.format(date1));\n            assertEquals(\"-0500\", fdf.format(cal1));\n            assertEquals(\"-0500\", fdf.format(millis1));\n\n            assertEquals(\"-0400\", fdf.format(date2));\n            assertEquals(\"-0400\", fdf.format(cal2));\n            assertEquals(\"-0400\", fdf.format(millis2));\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            assertEquals(\"-05:00\", fdf.format(date1));\n            assertEquals(\"-05:00\", fdf.format(cal1));\n            assertEquals(\"-05:00\", fdf.format(millis1));\n\n            assertEquals(\"-04:00\", fdf.format(date2));\n            assertEquals(\"-04:00\", fdf.format(cal2));\n            assertEquals(\"-04:00\", fdf.format(millis2));\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));\n            assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }\n",
        "begin_line": 173,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 55)",
            "(line 175,col 9)-(line 175,col 57)",
            "(line 176,col 9)-(line 225,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testShortDateStyleWithLocales()",
        "snippet": "    public void testShortDateStyleWithLocales() {\n        Locale usLocale = Locale.US;\n        Locale swedishLocale = new Locale(\"sv\", \"SE\");\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004, 1, 3);\n        FastDateFormat fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, usLocale);\n        assertEquals(\"2/3/04\", fdf.format(cal));\n\n        fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, swedishLocale);\n        assertEquals(\"2004-02-03\", fdf.format(cal));\n\n    }\n",
        "begin_line": 231,
        "end_line": 242,
        "comment": "\n     * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.\n     ",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 36)",
            "(line 233,col 9)-(line 233,col 54)",
            "(line 234,col 9)-(line 234,col 46)",
            "(line 235,col 9)-(line 235,col 28)",
            "(line 236,col 9)-(line 236,col 92)",
            "(line 237,col 9)-(line 237,col 48)",
            "(line 239,col 9)-(line 239,col 82)",
            "(line 240,col 9)-(line 240,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLowYearPadding()",
        "snippet": "    public void testLowYearPadding() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/DD\");\n\n        cal.set(1,0,1);\n        assertEquals(\"0001/01/01\", format.format(cal));\n        cal.set(10,0,1);\n        assertEquals(\"0010/01/01\", format.format(cal));\n        cal.set(100,0,1);\n        assertEquals(\"0100/01/01\", format.format(cal));\n        cal.set(999,0,1);\n        assertEquals(\"0999/01/01\", format.format(cal));\n    }\n",
        "begin_line": 247,
        "end_line": 259,
        "comment": "\n     * Tests that pre-1000AD years get padded with yyyy\n     ",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 46)",
            "(line 249,col 9)-(line 249,col 73)",
            "(line 251,col 9)-(line 251,col 23)",
            "(line 252,col 9)-(line 252,col 55)",
            "(line 253,col 9)-(line 253,col 24)",
            "(line 254,col 9)-(line 254,col 55)",
            "(line 255,col 9)-(line 255,col 25)",
            "(line 256,col 9)-(line 256,col 55)",
            "(line 257,col 9)-(line 257,col 25)",
            "(line 258,col 9)-(line 258,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testMilleniumBug()",
        "snippet": "    public void testMilleniumBug() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"dd.MM.yyyy\");\n\n        cal.set(1000,0,1);\n        assertEquals(\"01.01.1000\", format.format(cal));\n    }\n",
        "begin_line": 263,
        "end_line": 269,
        "comment": "\n     * Show Bug #39410 is solved\n     ",
        "child_ranges": [
            "(line 264,col 9)-(line 264,col 46)",
            "(line 265,col 9)-(line 265,col 73)",
            "(line 267,col 9)-(line 267,col 26)",
            "(line 268,col 9)-(line 268,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testSimpleDate()",
        "snippet": "    public void testSimpleDate() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n\n        cal.set(2004,11,31);\n        assertEquals(\"2004/12/31\", format.format(cal));\n        cal.set(999,11,31);\n        assertEquals(\"0999/12/31\", format.format(cal));\n        cal.set(1,2,2);\n        assertEquals(\"0001/03/02\", format.format(cal));\n    }\n",
        "begin_line": 275,
        "end_line": 285,
        "comment": "\n     * testLowYearPadding showed that the date was buggy\n     * This test confirms it, getting 366 back as a date\n     ",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 46)",
            "(line 277,col 9)-(line 277,col 73)",
            "(line 279,col 9)-(line 279,col 28)",
            "(line 280,col 9)-(line 280,col 55)",
            "(line 281,col 9)-(line 281,col 27)",
            "(line 282,col 9)-(line 282,col 55)",
            "(line 283,col 9)-(line 283,col 23)",
            "(line 284,col 9)-(line 284,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLang303()",
        "snippet": "    public void testLang303() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004,11,31);\n\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n        String output = format.format(cal);\n\n        format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );\n        assertEquals(output, format.format(cal));\n    }\n",
        "begin_line": 287,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 288,col 9)-(line 288,col 46)",
            "(line 289,col 9)-(line 289,col 28)",
            "(line 291,col 9)-(line 291,col 73)",
            "(line 292,col 9)-(line 292,col 43)",
            "(line 294,col 9)-(line 294,col 107)",
            "(line 295,col 9)-(line 295,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLang538()",
        "snippet": "    public void testLang538() {\n        // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)\n        // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone\n        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));\n        cal.clear();\n        cal.set(2009, 9, 16, 8, 42, 16);\n\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));\n        assertEquals(\"dateTime\", \"2009-10-16T16:42:16.000Z\", format.format(cal.getTime()));\n        assertEquals(\"dateTime\", \"2009-10-16T08:42:16.000Z\", format.format(cal));\n    }\n",
        "begin_line": 298,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 85)",
            "(line 302,col 9)-(line 302,col 20)",
            "(line 303,col 9)-(line 303,col 40)",
            "(line 305,col 9)-(line 305,col 120)",
            "(line 306,col 9)-(line 306,col 91)",
            "(line 307,col 9)-(line 307,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLang645()",
        "snippet": "    public void testLang645() {\n        Locale locale = new Locale(\"sv\", \"SE\");\n\n        Calendar cal = Calendar.getInstance();\n        cal.set(2010, 0, 1, 12, 0, 0);\n        Date d = cal.getTime();\n\n        FastDateFormat fdf = FastDateFormat.getInstance(\"EEEE', week 'ww\", locale);\n\n        assertEquals(\"fredag, week 53\", fdf.format(d));\n    }\n",
        "begin_line": 310,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 47)",
            "(line 313,col 9)-(line 313,col 46)",
            "(line 314,col 9)-(line 314,col 38)",
            "(line 315,col 9)-(line 315,col 31)",
            "(line 317,col 9)-(line 317,col 83)",
            "(line 319,col 9)-(line 319,col 55)"
        ]
    }
]