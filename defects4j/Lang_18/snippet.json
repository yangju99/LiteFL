[
    {
        "name": "FastDateFormat.appendTo#1404",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TimeZoneNameRule.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {\n                buffer.append(mDaylight);\n            } else {\n                buffer.append(mStandard);\n            }\n        }\n",
        "begin_line": 1404,
        "end_line": 1410,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.equals#1504",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TimeZoneDisplayKey.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj instanceof TimeZoneDisplayKey) {\n                TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;\n                return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);\n            }\n            return false;\n        }\n",
        "begin_line": 1504,
        "end_line": 1517,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.parsePattern#463",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.parsePattern()",
        "snippet": "    protected List<Rule> parsePattern() {\n        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n        List<Rule> rules = new ArrayList<Rule>();\n\n        String[] ERAs = symbols.getEras();\n        String[] months = symbols.getMonths();\n        String[] shortMonths = symbols.getShortMonths();\n        String[] weekdays = symbols.getWeekdays();\n        String[] shortWeekdays = symbols.getShortWeekdays();\n        String[] AmPmStrings = symbols.getAmPmStrings();\n\n        int length = mPattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i = 0; i < length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(mPattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n\n            Rule rule;\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }\n",
        "begin_line": 463,
        "end_line": 584,
        "comment": "\n     * <p>Returns a list of Rules given a pattern.</p>\n     *\n     * @return a {@code List} of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.format#695",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.format(long)",
        "snippet": "    public String format(long millis) {\n        return format(new Date(millis));\n    }\n",
        "begin_line": 695,
        "end_line": 697,
        "comment": "\n     * <p>Formats a millisecond {@code long} value.</p>\n     *\n     * @param millis  the millisecond value to format\n     * @return the formatted string\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1239",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitYearField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(Calendar.YEAR) % 100);\n        }\n",
        "begin_line": 1239,
        "end_line": 1241,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1246",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitYearField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            buffer.append((char)(value / 10 + '0'));\n            buffer.append((char)(value % 10 + '0'));\n        }\n",
        "begin_line": 1246,
        "end_line": 1249,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TimeZoneNameRule#1387",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TimeZoneNameRule.TimeZoneNameRule(java.util.TimeZone, java.util.Locale, int)",
        "snippet": "        TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n            mTimeZone = timeZone;\n\n            mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n            mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n        }\n",
        "begin_line": 1387,
        "end_line": 1392,
        "comment": "\n         * Constructs an instance of {@code TimeZoneNameRule} with the specified properties.\n         *\n         * @param timeZone the time zone\n         * @param locale the locale\n         * @param style the style\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1397",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TimeZoneNameRule.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return Math.max(mStandard.length(), mDaylight.length());\n        }\n",
        "begin_line": 1397,
        "end_line": 1399,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TimeZoneDisplayKey#1483",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TimeZoneDisplayKey.TimeZoneDisplayKey(java.util.TimeZone, boolean, int, java.util.Locale)",
        "snippet": "        TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale) {\n            mTimeZone = timeZone;\n            if (daylight) {\n                style |= 0x80000000;\n            }\n            mStyle = style;\n            mLocale = locale;\n        }\n",
        "begin_line": 1483,
        "end_line": 1491,
        "comment": "\n         * Constructs an instance of {@code TimeZoneDisplayKey} with the specified properties.\n         *\n         * @param timeZone the time zone\n         * @param daylight adjust the style for daylight saving time if {@code true}\n         * @param style the timezone style\n         * @param locale the timezone locale\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.hashCode#1496",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TimeZoneDisplayKey.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();\n        }\n",
        "begin_line": 1496,
        "end_line": 1499,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getTimeZoneDisplay#408",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.getTimeZoneDisplay(java.util.TimeZone, boolean, int, java.util.Locale)",
        "snippet": "    static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {\n        TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);\n        String value = cTimeZoneDisplayCache.get(key);\n        if (value == null) {\n            // This is a very slow call, so cache the results.\n            value = tz.getDisplayName(daylight, style, locale);\n            String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);\n            if (prior != null) {\n                value= prior;\n            }\n        }\n        return value;\n    }\n",
        "begin_line": 408,
        "end_line": 420,
        "comment": "\n     * <p>Gets the time zone display name, using a cache for performance.</p>\n     *\n     * @param tz  the zone to query\n     * @param daylight  true if daylight savings\n     * @param style  the style to use {@code TimeZone.LONG} or {@code TimeZone.SHORT}\n     * @param locale  the locale to use\n     * @return the textual name of the time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1059",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.UnpaddedNumberField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 10) {\n                buffer.append((char)(value + '0'));\n            } else if (value < 100) {\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            } else {\n                buffer.append(Integer.toString(value));\n            }\n        }\n",
        "begin_line": 1059,
        "end_line": 1068,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TwoDigitYearField#1225",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitYearField.TwoDigitYearField()",
        "snippet": "        TwoDigitYearField() {\n            super();\n        }\n",
        "begin_line": 1225,
        "end_line": 1227,
        "comment": "\n         * Constructs an instance of {@code TwoDigitYearField}.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1232",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitYearField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }\n",
        "begin_line": 1232,
        "end_line": 1234,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1022",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TextField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            buffer.append(mValues[calendar.get(mField)]);\n        }\n",
        "begin_line": 1022,
        "end_line": 1024,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1052",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.UnpaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(mField));\n        }\n",
        "begin_line": 1052,
        "end_line": 1054,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1095",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.UnpaddedMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);\n        }\n",
        "begin_line": 1095,
        "end_line": 1097,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1102",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.UnpaddedMonthField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 10) {\n                buffer.append((char)(value + '0'));\n            } else {\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            }\n        }\n",
        "begin_line": 1102,
        "end_line": 1109,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1151",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 100) {\n                for (int i = mSize; --i >= 2; ) {\n                    buffer.append('0');\n                }\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            } else {\n                int digits;\n                if (value < 1000) {\n                    digits = 3;\n                } else {\n                    Validate.isTrue(value > -1, \"Negative values should not be possible\", value);\n                    digits = Integer.toString(value).length();\n                }\n                for (int i = mSize; --i >= digits; ) {\n                    buffer.append('0');\n                }\n                buffer.append(Integer.toString(value));\n            }\n        }\n",
        "begin_line": 1151,
        "end_line": 1171,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.UnpaddedMonthField#1081",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.UnpaddedMonthField.UnpaddedMonthField()",
        "snippet": "        UnpaddedMonthField() {\n            super();\n        }\n",
        "begin_line": 1081,
        "end_line": 1083,
        "comment": "\n         * Constructs an instance of {@code UnpaddedMonthField}.\n         *\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1088",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.UnpaddedMonthField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }\n",
        "begin_line": 1088,
        "end_line": 1090,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.UnpaddedNumberField#1038",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.UnpaddedNumberField.UnpaddedNumberField(int)",
        "snippet": "        UnpaddedNumberField(int field) {\n            mField = field;\n        }\n",
        "begin_line": 1038,
        "end_line": 1040,
        "comment": "\n         * Constructs an instance of {@code UnpadedNumberField} with the specified field.\n         *\n         * @param field the field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1045",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.UnpaddedNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 4;\n        }\n",
        "begin_line": 1045,
        "end_line": 1047,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1442",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);\n\n            if (offset < 0) {\n                buffer.append('-');\n                offset = -offset;\n            } else {\n                buffer.append('+');\n            }\n\n            int hours = offset / (60 * 60 * 1000);\n            buffer.append((char)(hours / 10 + '0'));\n            buffer.append((char)(hours % 10 + '0'));\n\n            if (mColon) {\n                buffer.append(':');\n            }\n\n            int minutes = offset / (60 * 1000) - 60 * hours;\n            buffer.append((char)(minutes / 10 + '0'));\n            buffer.append((char)(minutes % 10 + '0'));\n        }\n",
        "begin_line": 1442,
        "end_line": 1463,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.selectNumberRule#652",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int)",
        "snippet": "    protected NumberRule selectNumberRule(int field, int padding) {\n        switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }\n    }\n",
        "begin_line": 652,
        "end_line": 661,
        "comment": "\n     * <p>Gets an appropriate rule for the padding required.</p>\n     *\n     * @param field  the field to get a rule for\n     * @param padding  the padding required\n     * @return a new rule with the correct padding\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1275",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);\n        }\n",
        "begin_line": 1275,
        "end_line": 1277,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1282",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            buffer.append((char)(value / 10 + '0'));\n            buffer.append((char)(value % 10 + '0'));\n        }\n",
        "begin_line": 1282,
        "end_line": 1285,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.format#705",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.format(java.util.Date)",
        "snippet": "    public String format(Date date) {\n        Calendar c = new GregorianCalendar(mTimeZone, mLocale);  // hard code GregorianCalendar\n        c.setTime(date);\n        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n    }\n",
        "begin_line": 705,
        "end_line": 709,
        "comment": "\n     * <p>Formats a {@code Date} object using a {@code GregorianCalendar}.</p>\n     *\n     * @param date  the date to format\n     * @return the formatted string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TimeZoneNumberRule#1428",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule.TimeZoneNumberRule(boolean)",
        "snippet": "        TimeZoneNumberRule(boolean colon) {\n            mColon = colon;\n        }\n",
        "begin_line": 1428,
        "end_line": 1430,
        "comment": "\n         * Constructs an instance of {@code TimeZoneNumberRule} with the specified properties.\n         *\n         * @param colon add colon between HH and MM in the output if {@code true}\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1435",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 5;\n        }\n",
        "begin_line": 1435,
        "end_line": 1437,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.format#717",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar)",
        "snippet": "    public String format(Calendar calendar) {\n        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n    }\n",
        "begin_line": 717,
        "end_line": 719,
        "comment": "\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.format#756",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer)",
        "snippet": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        return applyRules(calendar, buf);\n    }\n",
        "begin_line": 756,
        "end_line": 758,
        "comment": "\n     * <p>Formats a {@code Calendar} object into the\n     * supplied {@code StringBuffer}.</p>\n     *\n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "Validate.isTrue#105",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/Validate.java",
        "class_name": "org.apache.commons.lang3.Validate",
        "signature": "org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, long)",
        "snippet": "    public static void isTrue(boolean expression, String message, long value) {\n        if (expression == false) {\n            throw new IllegalArgumentException(String.format(message, Long.valueOf(value)));\n        }\n    }\n",
        "begin_line": 105,
        "end_line": 109,
        "comment": "\n     * <p>Validate that the argument condition is {@code true}; otherwise\n     * throwing an exception with the specified message. This method is useful when\n     * validating according to an arbitrary boolean expression, such as validating a\n     * primitive number or using your own custom validation expression.</p>\n     *\n     * <pre>Validate.isTrue(i > 0.0, \"The value must be greater than zero: %d\", i);</pre>\n     *\n     * <p>For performance reasons, the long value is passed as a separate parameter and\n     * appended to the exception message only in the case of an error.</p>\n     *\n     * @param expression  the boolean expression to check\n     * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n     * @param value  the value to append to the message when invalid\n     * @throws IllegalArgumentException if expression is {@code false}\n     * @see #isTrue(boolean)\n     * @see #isTrue(boolean, String, double)\n     * @see #isTrue(boolean, String, Object...)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1144",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(mField));\n        }\n",
        "begin_line": 1144,
        "end_line": 1146,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#950",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            buffer.append(mValue);\n        }\n",
        "begin_line": 950,
        "end_line": 952,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1199",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(mField));\n        }\n",
        "begin_line": 1199,
        "end_line": 1201,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1644
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1206",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 100) {\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            } else {\n                buffer.append(Integer.toString(value));\n            }\n        }\n",
        "begin_line": 1206,
        "end_line": 1213,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1644
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.parseToken#593",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.parseToken(java.lang.String, int[])",
        "snippet": "    protected String parseToken(String pattern, int[] indexRef) {\n        StringBuilder buf = new StringBuilder();\n\n        int i = indexRef[0];\n        int length = pattern.length();\n\n        char c = pattern.charAt(i);\n        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n            // Scan a run of the same character, which indicates a time\n            // pattern.\n            buf.append(c);\n\n            while (i + 1 < length) {\n                char peek = pattern.charAt(i + 1);\n                if (peek == c) {\n                    buf.append(c);\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } else {\n            // This will identify token as text.\n            buf.append('\\'');\n\n            boolean inLiteral = false;\n\n            for (; i < length; i++) {\n                c = pattern.charAt(i);\n\n                if (c == '\\'') {\n                    if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n                        // '' is treated as escaped '\n                        i++;\n                        buf.append(c);\n                    } else {\n                        inLiteral = !inLiteral;\n                    }\n                } else if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {\n                    i--;\n                    break;\n                } else {\n                    buf.append(c);\n                }\n            }\n        }\n\n        indexRef[0] = i;\n        return buf.toString();\n    }\n",
        "begin_line": 593,
        "end_line": 643,
        "comment": "\n     * <p>Performs the parsing of tokens.</p>\n     *\n     * @param pattern  the pattern\n     * @param indexRef  index references\n     * @return parsed token\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1644
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TextField#1000",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TextField.TextField(int, java.lang.String[])",
        "snippet": "        TextField(int field, String[] values) {\n            mField = field;\n            mValues = values;\n        }\n",
        "begin_line": 1000,
        "end_line": 1003,
        "comment": "\n         * Constructs an instance of {@code TextField}\n         * with the specified field and values.\n         *\n         * @param field the field\n         * @param values the field values\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1008",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TextField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            int max = 0;\n            for (int i=mValues.length; --i >= 0; ) {\n                int len = mValues[i].length();\n                if (len > max) {\n                    max = len;\n                }\n            }\n            return max;\n        }\n",
        "begin_line": 1008,
        "end_line": 1017,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.applyRules#768",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer)",
        "snippet": "    protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {\n        for (Rule rule : mRules) {\n            rule.appendTo(buf, calendar);\n        }\n        return buf;\n    }\n",
        "begin_line": 768,
        "end_line": 773,
        "comment": "\n     * <p>Performs the formatting by applying the rules to the\n     * specified calendar.</p>\n     *\n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1601
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getInstance#158",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String)",
        "snippet": "    public static FastDateFormat getInstance(String pattern) {\n        return cache.getInstance(pattern, null, null);\n    }\n",
        "begin_line": 158,
        "end_line": 160,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1562
        },
        "num_failing_tests": 1
    },
    {
        "name": "FormatCache.getInstance#69",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
        "class_name": "org.apache.commons.lang3.time.FormatCache",
        "signature": "org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public F getInstance(String pattern, TimeZone timeZone, Locale locale) {\n        if (pattern == null) {\n            throw new NullPointerException(\"pattern must not be null\");\n        }\n        if (timeZone == null) {\n            timeZone = TimeZone.getDefault();\n        }\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        MultipartKey key = new MultipartKey(pattern, timeZone, locale);\n        F format = cInstanceCache.get(key);\n        if (format == null) {           \n            format = createInstance(pattern, timeZone, locale);\n            F previousValue= cInstanceCache.putIfAbsent(key, format);\n            if (previousValue != null) {\n                // another thread snuck in and did the same work\n                // we should return the instance that is in ConcurrentMap\n                format= previousValue;              \n            }\n        }\n        return format;\n    }\n",
        "begin_line": 69,
        "end_line": 91,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  the non-null time zone\n     * @param locale  the non-null locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TwoDigitMonthField#1261",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField.TwoDigitMonthField()",
        "snippet": "        TwoDigitMonthField() {\n            super();\n        }\n",
        "begin_line": 1261,
        "end_line": 1263,
        "comment": "\n         * Constructs an instance of {@code TwoDigitMonthField}.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1268",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }\n",
        "begin_line": 1268,
        "end_line": 1270,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.PaddedNumberField#1125",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField.PaddedNumberField(int, int)",
        "snippet": "        PaddedNumberField(int field, int size) {\n            if (size < 3) {\n                // Should use UnpaddedNumberField or TwoDigitNumberField.\n                throw new IllegalArgumentException();\n            }\n            mField = field;\n            mSize = size;\n        }\n",
        "begin_line": 1125,
        "end_line": 1132,
        "comment": "\n         * Constructs an instance of {@code PaddedNumberField}.\n         *\n         * @param field the field\n         * @param size size of the output field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1474
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1137",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 4;\n        }\n",
        "begin_line": 1137,
        "end_line": 1139,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1474
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TwoDigitNumberField#1185",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField.TwoDigitNumberField(int)",
        "snippet": "        TwoDigitNumberField(int field) {\n            mField = field;\n        }\n",
        "begin_line": 1185,
        "end_line": 1187,
        "comment": "\n         * Constructs an instance of {@code TwoDigitNumberField} with the specified field.\n         *\n         * @param field the field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1459
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1192",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }\n",
        "begin_line": 1192,
        "end_line": 1194,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1459
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.CharacterLiteral#936",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral.CharacterLiteral(char)",
        "snippet": "        CharacterLiteral(char value) {\n            mValue = value;\n        }\n",
        "begin_line": 936,
        "end_line": 938,
        "comment": "\n         * Constructs a new instance of {@code CharacterLiteral}\n         * to hold the specified value.\n         *\n         * @param value the character literal\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1459
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#943",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 1;\n        }\n",
        "begin_line": 943,
        "end_line": 945,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.1459
        },
        "num_failing_tests": 1
    },
    {
        "name": "FormatCache.MultipartKey#166",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
        "class_name": "org.apache.commons.lang3.time.FormatCache",
        "signature": "org.apache.commons.lang3.time.FormatCache.MultipartKey.MultipartKey(java.lang.Object...)",
        "snippet": "        public MultipartKey(Object... keys) {\n            this.keys = keys;\n        }\n",
        "begin_line": 166,
        "end_line": 168,
        "comment": "\n         * Constructs an instance of <code>MultipartKey</code> to hold the specified objects.\n         * @param keys the set of objects that make up the key.  Each key may be null.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 1
    },
    {
        "name": "FormatCache.hashCode#187",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
        "class_name": "org.apache.commons.lang3.time.FormatCache",
        "signature": "org.apache.commons.lang3.time.FormatCache.MultipartKey.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            if(hashCode==0) {\n                int rc= 0;\n                for(Object key : keys) {\n                    if(key!=null) {\n                        rc= rc*7 + key.hashCode();\n                    }\n                }\n                hashCode= rc;\n            }\n            return hashCode;\n        }\n",
        "begin_line": 187,
        "end_line": 199,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.createInstance#108",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.Anonymous-23c0c2c3-d4dd-4a12-a156-46e081215927.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "        @Override\n        protected FastDateFormat createInstance(String pattern,    TimeZone timeZone, Locale locale) {\n            return new FastDateFormat(pattern, timeZone, locale);\n        }\n",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.FastDateFormat#432",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n        mPattern = pattern;\n        mTimeZone = timeZone;\n        mLocale = locale;\n\n        init();\n    }\n",
        "begin_line": 432,
        "end_line": 438,
        "comment": "\n     * <p>Constructs a new FastDateFormat.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n     * @param timeZone  non-null time zone to use\n     * @param locale  non-null locale to use\n     * @throws NullPointerException if pattern, timeZone, or locale is null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.init#443",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.init()",
        "snippet": "    private void init() {\n        List<Rule> rulesList = parsePattern();\n        mRules = rulesList.toArray(new Rule[rulesList.size()]);\n\n        int len = 0;\n        for (int i=mRules.length; --i >= 0; ) {\n            len += mRules[i].estimateLength();\n        }\n\n        mMaxLengthEstimate = len;\n    }\n",
        "begin_line": 443,
        "end_line": 453,
        "comment": "\n     * <p>Initializes the instance for first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 1
    }
]