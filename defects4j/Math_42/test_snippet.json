[
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath713NegativeVariable()",
        "snippet": "    @Test\n    public void testMath713NegativeVariable() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);\n    }\n",
        "begin_line": 32,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 95)",
            "(line 35,col 9)-(line 35,col 84)",
            "(line 36,col 9)-(line 36,col 87)",
            "(line 38,col 9)-(line 38,col 30)",
            "(line 39,col 9)-(line 39,col 51)",
            "(line 40,col 9)-(line 40,col 95)",
            "(line 42,col 9)-(line 42,col 91)",
            "(line 43,col 9)-(line 43,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath434NegativeVariable()",
        "snippet": "    @Test\n    public void testMath434NegativeVariable() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0, 0.0, 1.0}, 0.0d);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1, 1, 0}, Relationship.EQ, 5));\n        constraints.add(new LinearConstraint(new double[] {0, 0, 1}, Relationship.GEQ, -10));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);\n\n        Assert.assertEquals(5.0, solution.getPoint()[0] + solution.getPoint()[1], epsilon);\n        Assert.assertEquals(-10.0, solution.getPoint()[2], epsilon);\n        Assert.assertEquals(-10.0, solution.getValue(), epsilon);\n\n    }\n",
        "begin_line": 46,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 100)",
            "(line 49,col 9)-(line 49,col 84)",
            "(line 50,col 9)-(line 50,col 90)",
            "(line 51,col 9)-(line 51,col 93)",
            "(line 53,col 9)-(line 53,col 30)",
            "(line 54,col 9)-(line 54,col 51)",
            "(line 55,col 9)-(line 55,col 96)",
            "(line 57,col 9)-(line 57,col 91)",
            "(line 58,col 9)-(line 58,col 68)",
            "(line 59,col 9)-(line 59,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath434UnfeasibleSolution()",
        "snippet": "    @Test(expected = NoFeasibleSolutionException.class)\n    public void testMath434UnfeasibleSolution() {\n        double epsilon = 1e-6;\n\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 0.0}, 0.0);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {epsilon/2, 0.5}, Relationship.EQ, 0));\n        constraints.add(new LinearConstraint(new double[] {1e-3, 0.1}, Relationship.EQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        // allowing only non-negative values, no feasible solution shall be found\n        solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n    }\n",
        "begin_line": 63,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 30)",
            "(line 67,col 9)-(line 67,col 94)",
            "(line 68,col 9)-(line 68,col 84)",
            "(line 69,col 9)-(line 69,col 97)",
            "(line 70,col 9)-(line 70,col 93)",
            "(line 72,col 9)-(line 72,col 51)",
            "(line 74,col 9)-(line 74,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath434PivotRowSelection()",
        "snippet": "    @Test\n    public void testMath434PivotRowSelection() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0}, 0.0);\n\n        double epsilon = 1e-6;\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {200}, Relationship.GEQ, 1));\n        constraints.add(new LinearConstraint(new double[] {100}, Relationship.GEQ, 0.499900001));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);\n        \n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0] * 200.d, 1.d, epsilon) >= 0);\n        Assert.assertEquals(0.0050, solution.getValue(), epsilon);\n    }\n",
        "begin_line": 77,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 89)",
            "(line 81,col 9)-(line 81,col 30)",
            "(line 82,col 9)-(line 82,col 84)",
            "(line 83,col 9)-(line 83,col 87)",
            "(line 84,col 9)-(line 84,col 97)",
            "(line 86,col 9)-(line 86,col 51)",
            "(line 87,col 9)-(line 87,col 96)",
            "(line 89,col 9)-(line 89,col 98)",
            "(line 90,col 9)-(line 90,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath434PivotRowSelection2()",
        "snippet": "    @Test\n    public void testMath434PivotRowSelection2() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d}, 0.0d);\n\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1.0d, -0.1d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.EQ, -0.1d));\n        constraints.add(new LinearConstraint(new double[] {1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, -1e-18d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 0.0d, 1.0d, 0.0d, -0.0128588d, 1e-5d}, Relationship.EQ, 0.0d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 0.0d, 0.0d, 1.0d, 1e-5d, -0.0128586d}, Relationship.EQ, 1e-10d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, -1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 0.0d, -1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));\n        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 0.0d, 1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));\n\n        double epsilon = 1e-7;\n        SimplexSolver simplex = new SimplexSolver();\n        RealPointValuePair solution = simplex.optimize(f, constraints, GoalType.MINIMIZE, false);\n        \n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], -1e-18d, epsilon) >= 0);\n        Assert.assertEquals(1.0d, solution.getPoint()[1], epsilon);        \n        Assert.assertEquals(0.0d, solution.getPoint()[2], epsilon);\n        Assert.assertEquals(1.0d, solution.getValue(), epsilon);\n    }\n",
        "begin_line": 93,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 127)",
            "(line 97,col 9)-(line 97,col 84)",
            "(line 98,col 9)-(line 98,col 128)",
            "(line 99,col 9)-(line 99,col 130)",
            "(line 100,col 9)-(line 100,col 127)",
            "(line 101,col 9)-(line 101,col 134)",
            "(line 102,col 9)-(line 102,col 136)",
            "(line 103,col 9)-(line 103,col 128)",
            "(line 104,col 9)-(line 104,col 127)",
            "(line 105,col 9)-(line 105,col 128)",
            "(line 106,col 9)-(line 106,col 127)",
            "(line 108,col 9)-(line 108,col 30)",
            "(line 109,col 9)-(line 109,col 52)",
            "(line 110,col 9)-(line 110,col 97)",
            "(line 112,col 9)-(line 112,col 94)",
            "(line 113,col 9)-(line 113,col 67)",
            "(line 114,col 9)-(line 114,col 67)",
            "(line 115,col 9)-(line 115,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272()",
        "snippet": "    @Test\n    public void testMath272() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n\n        Assert.assertEquals(0.0, solution.getPoint()[0], .0000001);\n        Assert.assertEquals(1.0, solution.getPoint()[1], .0000001);\n        Assert.assertEquals(1.0, solution.getPoint()[2], .0000001);\n        Assert.assertEquals(3.0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 118,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 93)",
            "(line 121,col 9)-(line 121,col 85)",
            "(line 122,col 9)-(line 122,col 94)",
            "(line 123,col 9)-(line 123,col 94)",
            "(line 124,col 9)-(line 124,col 94)",
            "(line 126,col 9)-(line 126,col 51)",
            "(line 127,col 9)-(line 127,col 95)",
            "(line 129,col 9)-(line 129,col 67)",
            "(line 130,col 9)-(line 130,col 67)",
            "(line 131,col 9)-(line 131,col 67)",
            "(line 132,col 9)-(line 132,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286()",
        "snippet": "    @Test\n    public void testMath286() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 23.0));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0, 0, 0 }, Relationship.GEQ, 10.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 0, 1, 0, 0, 0 }, Relationship.GEQ, 8.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 0, 0, 0, 1, 0 }, Relationship.GEQ, 5.0));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n\n        Assert.assertEquals(25.8, solution.getValue(), .0000001);\n        Assert.assertEquals(23.0, solution.getPoint()[0] + solution.getPoint()[2] + solution.getPoint()[4], 0.0000001);\n        Assert.assertEquals(23.0, solution.getPoint()[1] + solution.getPoint()[3] + solution.getPoint()[5], 0.0000001);\n        Assert.assertTrue(solution.getPoint()[0] >= 10.0 - 0.0000001);\n        Assert.assertTrue(solution.getPoint()[2] >= 8.0 - 0.0000001);\n        Assert.assertTrue(solution.getPoint()[4] >= 5.0 - 0.0000001);\n    }\n",
        "begin_line": 135,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 115)",
            "(line 138,col 9)-(line 138,col 85)",
            "(line 139,col 9)-(line 139,col 104)",
            "(line 140,col 9)-(line 140,col 104)",
            "(line 141,col 9)-(line 141,col 105)",
            "(line 142,col 9)-(line 142,col 104)",
            "(line 143,col 9)-(line 143,col 104)",
            "(line 145,col 9)-(line 145,col 51)",
            "(line 146,col 9)-(line 146,col 95)",
            "(line 148,col 9)-(line 148,col 65)",
            "(line 149,col 9)-(line 149,col 119)",
            "(line 150,col 9)-(line 150,col 119)",
            "(line 151,col 9)-(line 151,col 70)",
            "(line 152,col 9)-(line 152,col 69)",
            "(line 153,col 9)-(line 153,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testDegeneracy()",
        "snippet": "    @Test\n    public void testDegeneracy() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.7 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 18.0));\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.GEQ, 10.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 8.0));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        Assert.assertEquals(13.6, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 156,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 95)",
            "(line 159,col 9)-(line 159,col 85)",
            "(line 160,col 9)-(line 160,col 93)",
            "(line 161,col 9)-(line 161,col 93)",
            "(line 162,col 9)-(line 162,col 92)",
            "(line 164,col 9)-(line 164,col 51)",
            "(line 165,col 9)-(line 165,col 95)",
            "(line 166,col 9)-(line 166,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath288()",
        "snippet": "    @Test\n    public void testMath288() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        Assert.assertEquals(10.0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 169,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 97)",
            "(line 172,col 9)-(line 172,col 85)",
            "(line 173,col 9)-(line 173,col 99)",
            "(line 174,col 9)-(line 174,col 99)",
            "(line 175,col 9)-(line 175,col 99)",
            "(line 176,col 9)-(line 176,col 98)",
            "(line 177,col 9)-(line 177,col 98)",
            "(line 179,col 9)-(line 179,col 51)",
            "(line 180,col 9)-(line 180,col 95)",
            "(line 181,col 9)-(line 181,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath290GEQ()",
        "snippet": "    @Test\n    public void testMath290GEQ() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.GEQ, -1.0));\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        Assert.assertEquals(0, solution.getValue(), .0000001);\n        Assert.assertEquals(0, solution.getPoint()[0], .0000001);\n        Assert.assertEquals(0, solution.getPoint()[1], .0000001);\n    }\n",
        "begin_line": 184,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 91)",
            "(line 187,col 9)-(line 187,col 85)",
            "(line 188,col 9)-(line 188,col 93)",
            "(line 189,col 9)-(line 189,col 51)",
            "(line 190,col 9)-(line 190,col 95)",
            "(line 191,col 9)-(line 191,col 62)",
            "(line 192,col 9)-(line 192,col 65)",
            "(line 193,col 9)-(line 193,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath290LEQ()",
        "snippet": "    @Test(expected=NoFeasibleSolutionException.class)\n    public void testMath290LEQ() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.LEQ, -1.0));\n        SimplexSolver solver = new SimplexSolver();\n        solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n    }\n",
        "begin_line": 196,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 91)",
            "(line 199,col 9)-(line 199,col 85)",
            "(line 200,col 9)-(line 200,col 93)",
            "(line 201,col 9)-(line 201,col 51)",
            "(line 202,col 9)-(line 202,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath293()",
        "snippet": "    @Test\n    public void testMath293() {\n      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );\n      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));\n      constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 30.0));\n      constraints.add(new LinearConstraint(new double[] { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }, Relationship.GEQ, 10.0));\n      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.7, 0.3, 0.0, 0.0 }, Relationship.GEQ, 10.0));\n      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.0, 0.0, 0.4, 0.6 }, Relationship.GEQ, 10.0));\n\n      SimplexSolver solver = new SimplexSolver();\n      RealPointValuePair solution1 = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n\n      Assert.assertEquals(15.7143, solution1.getPoint()[0], .0001);\n      Assert.assertEquals(0.0, solution1.getPoint()[1], .0001);\n      Assert.assertEquals(14.2857, solution1.getPoint()[2], .0001);\n      Assert.assertEquals(0.0, solution1.getPoint()[3], .0001);\n      Assert.assertEquals(0.0, solution1.getPoint()[4], .0001);\n      Assert.assertEquals(30.0, solution1.getPoint()[5], .0001);\n      Assert.assertEquals(40.57143, solution1.getValue(), .0001);\n\n      double valA = 0.8 * solution1.getPoint()[0] + 0.2 * solution1.getPoint()[1];\n      double valB = 0.7 * solution1.getPoint()[2] + 0.3 * solution1.getPoint()[3];\n      double valC = 0.4 * solution1.getPoint()[4] + 0.6 * solution1.getPoint()[5];\n\n      f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );\n      constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));\n      constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 30.0));\n      constraints.add(new LinearConstraint(new double[] { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }, Relationship.GEQ, valA));\n      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.7, 0.3, 0.0, 0.0 }, Relationship.GEQ, valB));\n      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.0, 0.0, 0.4, 0.6 }, Relationship.GEQ, valC));\n\n      RealPointValuePair solution2 = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n      Assert.assertEquals(40.57143, solution2.getValue(), .0001);\n    }\n",
        "begin_line": 205,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 207,col 7)-(line 207,col 112)",
            "(line 208,col 7)-(line 208,col 83)",
            "(line 209,col 7)-(line 209,col 102)",
            "(line 210,col 7)-(line 210,col 102)",
            "(line 211,col 7)-(line 211,col 115)",
            "(line 212,col 7)-(line 212,col 115)",
            "(line 213,col 7)-(line 213,col 115)",
            "(line 215,col 7)-(line 215,col 49)",
            "(line 216,col 7)-(line 216,col 94)",
            "(line 218,col 7)-(line 218,col 67)",
            "(line 219,col 7)-(line 219,col 63)",
            "(line 220,col 7)-(line 220,col 67)",
            "(line 221,col 7)-(line 221,col 63)",
            "(line 222,col 7)-(line 222,col 63)",
            "(line 223,col 7)-(line 223,col 64)",
            "(line 224,col 7)-(line 224,col 65)",
            "(line 226,col 7)-(line 226,col 82)",
            "(line 227,col 7)-(line 227,col 82)",
            "(line 228,col 7)-(line 228,col 82)",
            "(line 230,col 7)-(line 230,col 88)",
            "(line 231,col 7)-(line 231,col 54)",
            "(line 232,col 7)-(line 232,col 102)",
            "(line 233,col 7)-(line 233,col 102)",
            "(line 234,col 7)-(line 234,col 115)",
            "(line 235,col 7)-(line 235,col 115)",
            "(line 236,col 7)-(line 236,col 115)",
            "(line 238,col 7)-(line 238,col 94)",
            "(line 239,col 7)-(line 239,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testSimplexSolver()",
        "snippet": "    @Test\n    public void testSimplexSolver() {\n        LinearObjectiveFunction f =\n            new LinearObjectiveFunction(new double[] { 15, 10 }, 7);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 3));\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 4));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);\n        Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);\n        Assert.assertEquals(57.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 242,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 245,col 68)",
            "(line 246,col 9)-(line 246,col 85)",
            "(line 247,col 9)-(line 247,col 90)",
            "(line 248,col 9)-(line 248,col 90)",
            "(line 249,col 9)-(line 249,col 89)",
            "(line 251,col 9)-(line 251,col 51)",
            "(line 252,col 9)-(line 252,col 96)",
            "(line 253,col 9)-(line 253,col 62)",
            "(line 254,col 9)-(line 254,col 62)",
            "(line 255,col 9)-(line 255,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint()",
        "snippet": "    @Test\n    public void testSingleVariableAndConstraint() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        Assert.assertEquals(10.0, solution.getPoint()[0], 0.0);\n        Assert.assertEquals(30.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 258,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 87)",
            "(line 261,col 9)-(line 261,col 85)",
            "(line 262,col 9)-(line 262,col 88)",
            "(line 264,col 9)-(line 264,col 51)",
            "(line 265,col 9)-(line 265,col 96)",
            "(line 266,col 9)-(line 266,col 63)",
            "(line 267,col 9)-(line 267,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testModelWithNoArtificialVars()",
        "snippet": "    @Test\n    public void testModelWithNoArtificialVars() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 3));\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 4));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);\n        Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);\n        Assert.assertEquals(50.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 274,
        "end_line": 287,
        "comment": "\n     * With no artificial variables needed (no equals and no greater than\n     * constraints) we can go straight to Phase 2.\n     ",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 92)",
            "(line 277,col 9)-(line 277,col 85)",
            "(line 278,col 9)-(line 278,col 90)",
            "(line 279,col 9)-(line 279,col 90)",
            "(line 280,col 9)-(line 280,col 90)",
            "(line 282,col 9)-(line 282,col 51)",
            "(line 283,col 9)-(line 283,col 96)",
            "(line 284,col 9)-(line 284,col 62)",
            "(line 285,col 9)-(line 285,col 62)",
            "(line 286,col 9)-(line 286,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMinimization()",
        "snippet": "    @Test\n    public void testMinimization() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, -5);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 6));\n        constraints.add(new LinearConstraint(new double[] { 3, 2 }, Relationship.LEQ, 12));\n        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 0));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);\n        Assert.assertEquals(4.0, solution.getPoint()[0], 0.0);\n        Assert.assertEquals(0.0, solution.getPoint()[1], 0.0);\n        Assert.assertEquals(-13.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 289,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 92)",
            "(line 292,col 9)-(line 292,col 85)",
            "(line 293,col 9)-(line 293,col 90)",
            "(line 294,col 9)-(line 294,col 91)",
            "(line 295,col 9)-(line 295,col 90)",
            "(line 297,col 9)-(line 297,col 51)",
            "(line 298,col 9)-(line 298,col 96)",
            "(line 299,col 9)-(line 299,col 62)",
            "(line 300,col 9)-(line 300,col 62)",
            "(line 301,col 9)-(line 301,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testSolutionWithNegativeDecisionVariable()",
        "snippet": "    @Test\n    public void testSolutionWithNegativeDecisionVariable() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.GEQ, 6));\n        constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 14));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        Assert.assertEquals(-2.0, solution.getPoint()[0], 0.0);\n        Assert.assertEquals(8.0, solution.getPoint()[1], 0.0);\n        Assert.assertEquals(12.0, solution.getValue(), 0.0);\n    }\n",
        "begin_line": 304,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 306,col 9)-(line 306,col 91)",
            "(line 307,col 9)-(line 307,col 85)",
            "(line 308,col 9)-(line 308,col 90)",
            "(line 309,col 9)-(line 309,col 91)",
            "(line 311,col 9)-(line 311,col 51)",
            "(line 312,col 9)-(line 312,col 96)",
            "(line 313,col 9)-(line 313,col 63)",
            "(line 314,col 9)-(line 314,col 62)",
            "(line 315,col 9)-(line 315,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testInfeasibleSolution()",
        "snippet": "    @Test(expected = NoFeasibleSolutionException.class)\n    public void testInfeasibleSolution() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 1));\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.GEQ, 3));\n\n        SimplexSolver solver = new SimplexSolver();\n        solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n    }\n",
        "begin_line": 318,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 88)",
            "(line 321,col 9)-(line 321,col 85)",
            "(line 322,col 9)-(line 322,col 87)",
            "(line 323,col 9)-(line 323,col 87)",
            "(line 325,col 9)-(line 325,col 51)",
            "(line 326,col 9)-(line 326,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testUnboundedSolution()",
        "snippet": "    @Test(expected = UnboundedSolutionException.class)\n    public void testUnboundedSolution() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 2));\n\n        SimplexSolver solver = new SimplexSolver();\n        solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n    }\n",
        "begin_line": 329,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 92)",
            "(line 332,col 9)-(line 332,col 85)",
            "(line 333,col 9)-(line 333,col 89)",
            "(line 335,col 9)-(line 335,col 51)",
            "(line 336,col 9)-(line 336,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testRestrictVariablesToNonNegative()",
        "snippet": "    @Test\n    public void testRestrictVariablesToNonNegative() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 409, 523, 70, 204, 339 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {    43,   56, 345,  56,    5 }, Relationship.LEQ,  4567456));\n        constraints.add(new LinearConstraint(new double[] {    12,   45,   7,  56,   23 }, Relationship.LEQ,    56454));\n        constraints.add(new LinearConstraint(new double[] {     8,  768,   0,  34, 7456 }, Relationship.LEQ,  1923421));\n        constraints.add(new LinearConstraint(new double[] { 12342, 2342,  34, 678, 2342 }, Relationship.GEQ,     4356));\n        constraints.add(new LinearConstraint(new double[] {    45,  678,  76,  52,   23 }, Relationship.EQ,    456356));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        Assert.assertEquals(2902.92783505155, solution.getPoint()[0], .0000001);\n        Assert.assertEquals(480.419243986254, solution.getPoint()[1], .0000001);\n        Assert.assertEquals(0.0, solution.getPoint()[2], .0000001);\n        Assert.assertEquals(0.0, solution.getPoint()[3], .0000001);\n        Assert.assertEquals(0.0, solution.getPoint()[4], .0000001);\n        Assert.assertEquals(1438556.7491409, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 339,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 108)",
            "(line 342,col 9)-(line 342,col 85)",
            "(line 343,col 9)-(line 343,col 120)",
            "(line 344,col 9)-(line 344,col 120)",
            "(line 345,col 9)-(line 345,col 120)",
            "(line 346,col 9)-(line 346,col 120)",
            "(line 347,col 9)-(line 347,col 120)",
            "(line 349,col 9)-(line 349,col 51)",
            "(line 350,col 9)-(line 350,col 95)",
            "(line 351,col 9)-(line 351,col 80)",
            "(line 352,col 9)-(line 352,col 80)",
            "(line 353,col 9)-(line 353,col 67)",
            "(line 354,col 9)-(line 354,col 67)",
            "(line 355,col 9)-(line 355,col 67)",
            "(line 356,col 9)-(line 356,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testEpsilon()",
        "snippet": "    @Test\n    public void testEpsilon() {\n      LinearObjectiveFunction f =\n          new LinearObjectiveFunction(new double[] { 10, 5, 1 }, 0);\n      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] {  9, 8, 0 }, Relationship.EQ,  17));\n      constraints.add(new LinearConstraint(new double[] {  0, 7, 8 }, Relationship.LEQ,  7));\n      constraints.add(new LinearConstraint(new double[] { 10, 0, 2 }, Relationship.LEQ, 10));\n\n      SimplexSolver solver = new SimplexSolver();\n      RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n      Assert.assertEquals(1.0, solution.getPoint()[0], 0.0);\n      Assert.assertEquals(1.0, solution.getPoint()[1], 0.0);\n      Assert.assertEquals(0.0, solution.getPoint()[2], 0.0);\n      Assert.assertEquals(15.0, solution.getValue(), 0.0);\n  }\n",
        "begin_line": 359,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 361,col 7)-(line 362,col 68)",
            "(line 363,col 7)-(line 363,col 83)",
            "(line 364,col 7)-(line 364,col 93)",
            "(line 365,col 7)-(line 365,col 93)",
            "(line 366,col 7)-(line 366,col 93)",
            "(line 368,col 7)-(line 368,col 49)",
            "(line 369,col 7)-(line 369,col 94)",
            "(line 370,col 7)-(line 370,col 60)",
            "(line 371,col 7)-(line 371,col 60)",
            "(line 372,col 7)-(line 372,col 60)",
            "(line 373,col 7)-(line 373,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testTrivialModel()",
        "snippet": "    @Test\n    public void testTrivialModel() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ,  0));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        Assert.assertEquals(0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 376,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 378,col 9)-(line 378,col 90)",
            "(line 379,col 9)-(line 379,col 85)",
            "(line 380,col 9)-(line 380,col 90)",
            "(line 382,col 9)-(line 382,col 51)",
            "(line 383,col 9)-(line 383,col 95)",
            "(line 384,col 9)-(line 384,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testLargeModel()",
        "snippet": "    @Test\n    public void testLargeModel() {\n        double[] objective = new double[] {\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 12, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           12, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 12, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 12, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 12, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 12, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                           1, 1, 1, 1, 1, 1};\n\n        LinearObjectiveFunction f = new LinearObjectiveFunction(objective, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(equationFromString(objective.length, \"x0 + x1 + x2 + x3 - x12 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 - x13 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 >= 49\"));\n        constraints.add(equationFromString(objective.length, \"x0 + x1 + x2 + x3 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x14 + x15 + x16 + x17 - x26 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x27 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x14 + x15 + x16 + x17 - x12 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x13 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x28 + x29 + x30 + x31 - x40 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 - x41 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 >= 49\"));\n        constraints.add(equationFromString(objective.length, \"x28 + x29 + x30 + x31 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x42 + x43 + x44 + x45 - x54 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x55 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x42 + x43 + x44 + x45 - x40 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x41 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x56 + x57 + x58 + x59 - x68 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 - x69 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 >= 51\"));\n        constraints.add(equationFromString(objective.length, \"x56 + x57 + x58 + x59 >= 44\"));\n        constraints.add(equationFromString(objective.length, \"x70 + x71 + x72 + x73 - x82 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x83 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x70 + x71 + x72 + x73 - x68 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x69 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x84 + x85 + x86 + x87 - x96 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 - x97 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 >= 51\"));\n        constraints.add(equationFromString(objective.length, \"x84 + x85 + x86 + x87 >= 44\"));\n        constraints.add(equationFromString(objective.length, \"x98 + x99 + x100 + x101 - x110 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x111 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x98 + x99 + x100 + x101 - x96 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x97 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x112 + x113 + x114 + x115 - x124 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 - x125 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 >= 49\"));\n        constraints.add(equationFromString(objective.length, \"x112 + x113 + x114 + x115 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x126 + x127 + x128 + x129 - x138 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x139 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x126 + x127 + x128 + x129 - x124 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x125 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x140 + x141 + x142 + x143 - x152 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 - x153 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 >= 59\"));\n        constraints.add(equationFromString(objective.length, \"x140 + x141 + x142 + x143 >= 42\"));\n        constraints.add(equationFromString(objective.length, \"x154 + x155 + x156 + x157 - x166 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x167 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x154 + x155 + x156 + x157 - x152 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x153 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x83 + x82 - x168 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x111 + x110 - x169 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x170 - x182 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x171 - x183 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x172 - x184 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x173 - x185 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x174 - x186 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x175 + x176 - x187 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x177 - x188 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x178 - x189 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x179 - x190 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x180 - x191 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x181 - x192 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x170 - x26 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x171 - x27 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x172 - x54 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x173 - x55 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x174 - x168 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x177 - x169 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x178 - x138 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x179 - x139 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x180 - x166 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x181 - x167 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x193 - x205 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x194 - x206 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x195 - x207 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x196 - x208 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x197 - x209 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x198 + x199 - x210 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x200 - x211 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x201 - x212 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x202 - x213 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x203 - x214 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x204 - x215 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x193 - x182 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x194 - x183 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x195 - x184 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x196 - x185 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x197 - x186 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x198 + x199 - x187 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x200 - x188 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x201 - x189 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x202 - x190 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x203 - x191 = 0\"));\n        constraints.add(equationFromString(objective.length, \"x204 - x192 = 0\"));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        Assert.assertEquals(7518.0, solution.getValue(), .0000001);\n    }\n",
        "begin_line": 387,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 389,col 9)-(line 411,col 61)",
            "(line 413,col 9)-(line 413,col 78)",
            "(line 414,col 9)-(line 414,col 85)",
            "(line 415,col 9)-(line 415,col 93)",
            "(line 416,col 9)-(line 416,col 115)",
            "(line 417,col 9)-(line 417,col 111)",
            "(line 418,col 9)-(line 418,col 89)",
            "(line 419,col 9)-(line 419,col 97)",
            "(line 420,col 9)-(line 420,col 121)",
            "(line 421,col 9)-(line 421,col 97)",
            "(line 422,col 9)-(line 422,col 121)",
            "(line 423,col 9)-(line 423,col 97)",
            "(line 424,col 9)-(line 424,col 121)",
            "(line 425,col 9)-(line 425,col 117)",
            "(line 426,col 9)-(line 426,col 93)",
            "(line 427,col 9)-(line 427,col 97)",
            "(line 428,col 9)-(line 428,col 121)",
            "(line 429,col 9)-(line 429,col 97)",
            "(line 430,col 9)-(line 430,col 121)",
            "(line 431,col 9)-(line 431,col 97)",
            "(line 432,col 9)-(line 432,col 121)",
            "(line 433,col 9)-(line 433,col 117)",
            "(line 434,col 9)-(line 434,col 93)",
            "(line 435,col 9)-(line 435,col 97)",
            "(line 436,col 9)-(line 436,col 121)",
            "(line 437,col 9)-(line 437,col 97)",
            "(line 438,col 9)-(line 438,col 121)",
            "(line 439,col 9)-(line 439,col 97)",
            "(line 440,col 9)-(line 440,col 121)",
            "(line 441,col 9)-(line 441,col 117)",
            "(line 442,col 9)-(line 442,col 93)",
            "(line 443,col 9)-(line 443,col 100)",
            "(line 444,col 9)-(line 444,col 130)",
            "(line 445,col 9)-(line 445,col 99)",
            "(line 446,col 9)-(line 446,col 129)",
            "(line 447,col 9)-(line 447,col 102)",
            "(line 448,col 9)-(line 448,col 130)",
            "(line 449,col 9)-(line 449,col 125)",
            "(line 450,col 9)-(line 450,col 97)",
            "(line 451,col 9)-(line 451,col 102)",
            "(line 452,col 9)-(line 452,col 130)",
            "(line 453,col 9)-(line 453,col 102)",
            "(line 454,col 9)-(line 454,col 130)",
            "(line 455,col 9)-(line 455,col 102)",
            "(line 456,col 9)-(line 456,col 130)",
            "(line 457,col 9)-(line 457,col 125)",
            "(line 458,col 9)-(line 458,col 97)",
            "(line 459,col 9)-(line 459,col 102)",
            "(line 460,col 9)-(line 460,col 130)",
            "(line 461,col 9)-(line 461,col 102)",
            "(line 462,col 9)-(line 462,col 130)",
            "(line 463,col 9)-(line 463,col 86)",
            "(line 464,col 9)-(line 464,col 88)",
            "(line 465,col 9)-(line 465,col 81)",
            "(line 466,col 9)-(line 466,col 81)",
            "(line 467,col 9)-(line 467,col 81)",
            "(line 468,col 9)-(line 468,col 81)",
            "(line 469,col 9)-(line 469,col 81)",
            "(line 470,col 9)-(line 470,col 88)",
            "(line 471,col 9)-(line 471,col 81)",
            "(line 472,col 9)-(line 472,col 81)",
            "(line 473,col 9)-(line 473,col 81)",
            "(line 474,col 9)-(line 474,col 81)",
            "(line 475,col 9)-(line 475,col 81)",
            "(line 476,col 9)-(line 476,col 80)",
            "(line 477,col 9)-(line 477,col 80)",
            "(line 478,col 9)-(line 478,col 80)",
            "(line 479,col 9)-(line 479,col 80)",
            "(line 480,col 9)-(line 480,col 81)",
            "(line 481,col 9)-(line 481,col 81)",
            "(line 482,col 9)-(line 482,col 81)",
            "(line 483,col 9)-(line 483,col 81)",
            "(line 484,col 9)-(line 484,col 81)",
            "(line 485,col 9)-(line 485,col 81)",
            "(line 486,col 9)-(line 486,col 81)",
            "(line 487,col 9)-(line 487,col 81)",
            "(line 488,col 9)-(line 488,col 81)",
            "(line 489,col 9)-(line 489,col 81)",
            "(line 490,col 9)-(line 490,col 81)",
            "(line 491,col 9)-(line 491,col 88)",
            "(line 492,col 9)-(line 492,col 81)",
            "(line 493,col 9)-(line 493,col 81)",
            "(line 494,col 9)-(line 494,col 81)",
            "(line 495,col 9)-(line 495,col 81)",
            "(line 496,col 9)-(line 496,col 81)",
            "(line 497,col 9)-(line 497,col 81)",
            "(line 498,col 9)-(line 498,col 81)",
            "(line 499,col 9)-(line 499,col 81)",
            "(line 500,col 9)-(line 500,col 81)",
            "(line 501,col 9)-(line 501,col 81)",
            "(line 502,col 9)-(line 502,col 88)",
            "(line 503,col 9)-(line 503,col 81)",
            "(line 504,col 9)-(line 504,col 81)",
            "(line 505,col 9)-(line 505,col 81)",
            "(line 506,col 9)-(line 506,col 81)",
            "(line 507,col 9)-(line 507,col 81)",
            "(line 509,col 9)-(line 509,col 51)",
            "(line 510,col 9)-(line 510,col 95)",
            "(line 511,col 9)-(line 511,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolverTest.equationFromString(int, java.lang.String)",
        "snippet": "    private LinearConstraint equationFromString(int numCoefficients, String s) {\n        Relationship relationship;\n        if (s.contains(\">=\")) {\n            relationship = Relationship.GEQ;\n        } else if (s.contains(\"<=\")) {\n            relationship = Relationship.LEQ;\n        } else if (s.contains(\"=\")) {\n            relationship = Relationship.EQ;\n        } else {\n            throw new IllegalArgumentException();\n        }\n\n        String[] equationParts = s.split(\"[>|<]?=\");\n        double rhs = Double.parseDouble(equationParts[1].trim());\n\n        double[] lhs = new double[numCoefficients];\n        String left = equationParts[0].replaceAll(\" ?x\", \"\");\n        String[] coefficients = left.split(\" \");\n        for (String coefficient : coefficients) {\n            double value = coefficient.charAt(0) == '-' ? -1 : 1;\n            int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n            lhs[index] = value;\n        }\n        return new LinearConstraint(lhs, relationship, rhs);\n    }\n",
        "begin_line": 518,
        "end_line": 542,
        "comment": "\n     * Converts a test string to a {@link LinearConstraint}.\n     * Ex: x0 + x1 + x2 + x3 - x12 = 0\n     ",
        "child_ranges": [
            "(line 519,col 9)-(line 519,col 34)",
            "(line 520,col 9)-(line 528,col 9)",
            "(line 530,col 9)-(line 530,col 52)",
            "(line 531,col 9)-(line 531,col 65)",
            "(line 533,col 9)-(line 533,col 51)",
            "(line 534,col 9)-(line 534,col 61)",
            "(line 535,col 9)-(line 535,col 48)",
            "(line 536,col 9)-(line 540,col 9)",
            "(line 541,col 9)-(line 541,col 60)"
        ]
    }
]