[
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    extraAnnotations =\n        Sets.newHashSet(\n            ParserRunner.createConfig(true, LanguageMode.ECMASCRIPT3, false)\n                .annotationNames.keySet());\n    extraSuppressions =\n        Sets.newHashSet(\n            ParserRunner.createConfig(true, LanguageMode.ECMASCRIPT3, false)\n                .suppressionNames);\n\n    extraSuppressions.add(\"x\");\n    extraSuppressions.add(\"y\");\n    extraSuppressions.add(\"z\");\n  }\n",
        "begin_line": 55,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 57,col 18)",
            "(line 58,col 5)-(line 61,col 43)",
            "(line 62,col 5)-(line 65,col 35)",
            "(line 67,col 5)-(line 67,col 31)",
            "(line 68,col 5)-(line 68,col 31)",
            "(line 69,col 5)-(line 69,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic1()",
        "snippet": "  public void testParseTypeViaStatic1() throws Exception {\n    Node typeNode = parseType(\"null\");\n    assertTypeEquals(NULL_TYPE, typeNode);\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 38)",
            "(line 74,col 5)-(line 74,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic2()",
        "snippet": "  public void testParseTypeViaStatic2() throws Exception {\n    Node typeNode = parseType(\"string\");\n    assertTypeEquals(STRING_TYPE, typeNode);\n  }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 40)",
            "(line 79,col 5)-(line 79,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic3()",
        "snippet": "  public void testParseTypeViaStatic3() throws Exception {\n    Node typeNode = parseType(\"!Date\");\n    assertTypeEquals(DATE_TYPE, typeNode);\n  }\n",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 83,col 39)",
            "(line 84,col 5)-(line 84,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic4()",
        "snippet": "  public void testParseTypeViaStatic4() throws Exception {\n    Node typeNode = parseType(\"boolean|string\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, STRING_TYPE), typeNode);\n  }\n",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 48)",
            "(line 89,col 5)-(line 89,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInvalidTypeViaStatic()",
        "snippet": "  public void testParseInvalidTypeViaStatic() throws Exception {\n    Node typeNode = parseType(\"sometype.<anothertype\");\n    assertNull(typeNode);\n  }\n",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 93,col 55)",
            "(line 94,col 5)-(line 94,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInvalidTypeViaStatic2()",
        "snippet": "  public void testParseInvalidTypeViaStatic2() throws Exception {\n    Node typeNode = parseType(\"\");\n    assertNull(typeNode);\n  }\n",
        "begin_line": 97,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 98,col 34)",
            "(line 99,col 5)-(line 99,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType1()",
        "snippet": "  public void testParseNamedType1() throws Exception {\n    assertNull(parse(\"@type null\", \"Unexpected end of file\"));\n  }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 103,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType2()",
        "snippet": "  public void testParseNamedType2() throws Exception {\n    JSDocInfo info = parse(\"@type null*/\");\n    assertTypeEquals(NULL_TYPE, info.getType());\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 107,col 43)",
            "(line 108,col 5)-(line 108,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType3()",
        "snippet": "  public void testParseNamedType3() throws Exception {\n    JSDocInfo info = parse(\"@type {string}*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 47)",
            "(line 113,col 5)-(line 113,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType4()",
        "snippet": "  public void testParseNamedType4() throws Exception {\n    // Multi-line @type.\n    JSDocInfo info = parse(\"@type \\n {string}*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 116,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 50)",
            "(line 119,col 5)-(line 119,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType5()",
        "snippet": "  public void testParseNamedType5() throws Exception {\n    JSDocInfo info = parse(\"@type {!goog.\\nBar}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.Bar\", null, -1, -1),\n        info.getType());\n  }\n",
        "begin_line": 122,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 123,col 52)",
            "(line 124,col 5)-(line 126,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType6()",
        "snippet": "  public void testParseNamedType6() throws Exception {\n    JSDocInfo info = parse(\"@type {!goog.\\n * Bar.\\n * Baz}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.Bar.Baz\", null, -1, -1),\n        info.getType());\n  }\n",
        "begin_line": 129,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 130,col 64)",
            "(line 131,col 5)-(line 133,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedTypeError1()",
        "snippet": "  public void testParseNamedTypeError1() throws Exception {\n    // To avoid parsing ambiguities, type names must end in a '.' to\n    // get the continuation behavior.\n    parse(\"@type {!goog\\n * .Bar} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 136,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 139,col 5)-(line 140,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedTypeError2()",
        "snippet": "  public void testParseNamedTypeError2() throws Exception {\n    parse(\"@type {!goog.\\n * Bar\\n * .Baz} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 143,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 145,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamespaceType1()",
        "snippet": "  public void testParseNamespaceType1() throws Exception {\n    JSDocInfo info = parse(\"@type {goog.}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.\", null, -1, -1),\n        info.getType());\n  }\n",
        "begin_line": 148,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 46)",
            "(line 150,col 5)-(line 152,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType1()",
        "snippet": "  public void testTypedefType1() throws Exception {\n    JSDocInfo info = parse(\"@typedef string */\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(STRING_TYPE, info.getTypedefType());\n  }\n",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 49)",
            "(line 157,col 5)-(line 157,col 38)",
            "(line 158,col 5)-(line 158,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType2()",
        "snippet": "  public void testTypedefType2() throws Exception {\n    JSDocInfo info = parse(\"@typedef \\n {string}*/\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(STRING_TYPE, info.getTypedefType());\n  }\n",
        "begin_line": 161,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 53)",
            "(line 163,col 5)-(line 163,col 38)",
            "(line 164,col 5)-(line 164,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType3()",
        "snippet": "  public void testTypedefType3() throws Exception {\n    JSDocInfo info = parse(\"@typedef \\n {(string|number)}*/\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(\n        createUnionType(NUMBER_TYPE, STRING_TYPE),\n        info.getTypedefType());\n  }\n",
        "begin_line": 167,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 62)",
            "(line 169,col 5)-(line 169,col 38)",
            "(line 170,col 5)-(line 172,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseStringType1()",
        "snippet": "  public void testParseStringType1() throws Exception {\n    assertTypeEquals(STRING_TYPE, parse(\"@type {string}*/\").getType());\n  }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 176,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseStringType2()",
        "snippet": "  public void testParseStringType2() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE, parse(\"@type {!String}*/\").getType());\n  }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBooleanType1()",
        "snippet": "  public void testParseBooleanType1() throws Exception {\n    assertTypeEquals(BOOLEAN_TYPE, parse(\"@type {boolean}*/\").getType());\n  }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBooleanType2()",
        "snippet": "  public void testParseBooleanType2() throws Exception {\n    assertTypeEquals(\n        BOOLEAN_OBJECT_TYPE, parse(\"@type {!Boolean}*/\").getType());\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 189,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNumberType1()",
        "snippet": "  public void testParseNumberType1() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@type {number}*/\").getType());\n  }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 193,col 5)-(line 193,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNumberType2()",
        "snippet": "  public void testParseNumberType2() throws Exception {\n    assertTypeEquals(NUMBER_OBJECT_TYPE, parse(\"@type {!Number}*/\").getType());\n  }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullType1()",
        "snippet": "  public void testParseNullType1() throws Exception {\n    assertTypeEquals(NULL_TYPE, parse(\"@type {null}*/\").getType());\n  }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullType2()",
        "snippet": "  public void testParseNullType2() throws Exception {\n    assertTypeEquals(NULL_TYPE, parse(\"@type {Null}*/\").getType());\n  }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseAllType1()",
        "snippet": "  public void testParseAllType1() throws Exception {\n    testParseType(\"*\");\n  }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseAllType2()",
        "snippet": "  public void testParseAllType2() throws Exception {\n    testParseType(\"*?\", \"*\");\n  }\n",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 213,col 5)-(line 213,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseObjectType()",
        "snippet": "  public void testParseObjectType() throws Exception {\n    assertTypeEquals(OBJECT_TYPE, parse(\"@type {!Object}*/\").getType());\n  }\n",
        "begin_line": 216,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDateType()",
        "snippet": "  public void testParseDateType() throws Exception {\n    assertTypeEquals(DATE_TYPE, parse(\"@type {!Date}*/\").getType());\n  }\n",
        "begin_line": 220,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 221,col 5)-(line 221,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionType()",
        "snippet": "  public void testParseFunctionType() throws Exception {\n    assertTypeEquals(\n        createNullableType(U2U_CONSTRUCTOR_TYPE),\n        parse(\"@type {Function}*/\").getType());\n  }\n",
        "begin_line": 224,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 227,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRegExpType()",
        "snippet": "  public void testParseRegExpType() throws Exception {\n    assertTypeEquals(REGEXP_TYPE, parse(\"@type {!RegExp}*/\").getType());\n  }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 231,col 5)-(line 231,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseErrorTypes()",
        "snippet": "  public void testParseErrorTypes() throws Exception {\n    assertTypeEquals(ERROR_TYPE, parse(\"@type {!Error}*/\").getType());\n    assertTypeEquals(URI_ERROR_TYPE, parse(\"@type {!URIError}*/\").getType());\n    assertTypeEquals(EVAL_ERROR_TYPE, parse(\"@type {!EvalError}*/\").getType());\n    assertTypeEquals(REFERENCE_ERROR_TYPE,\n        parse(\"@type {!ReferenceError}*/\").getType());\n    assertTypeEquals(TYPE_ERROR_TYPE, parse(\"@type {!TypeError}*/\").getType());\n    assertTypeEquals(\n        RANGE_ERROR_TYPE, parse(\"@type {!RangeError}*/\").getType());\n    assertTypeEquals(\n        SYNTAX_ERROR_TYPE, parse(\"@type {!SyntaxError}*/\").getType());\n  }\n",
        "begin_line": 234,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 70)",
            "(line 236,col 5)-(line 236,col 77)",
            "(line 237,col 5)-(line 237,col 79)",
            "(line 238,col 5)-(line 239,col 54)",
            "(line 240,col 5)-(line 240,col 79)",
            "(line 241,col 5)-(line 242,col 68)",
            "(line 243,col 5)-(line 244,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType1()",
        "snippet": "  public void testParseUndefinedType1() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {undefined}*/\").getType());\n  }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType2()",
        "snippet": "  public void testParseUndefinedType2() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {Undefined}*/\").getType());\n  }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType3()",
        "snippet": "  public void testParseUndefinedType3() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {void}*/\").getType());\n  }\n",
        "begin_line": 255,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 256,col 5)-(line 256,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType1()",
        "snippet": "  public void testParseTemplatizedType1() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<number> */\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n  }\n",
        "begin_line": 259,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 260,col 5)-(line 260,col 55)",
            "(line 261,col 5)-(line 262,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType2()",
        "snippet": "  public void testParseTemplatizedType2() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<number>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n  }\n",
        "begin_line": 265,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 266,col 5)-(line 266,col 56)",
            "(line 267,col 5)-(line 268,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType3()",
        "snippet": "  public void testParseTemplatizedType3() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number,null)>*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createUnionType(NUMBER_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 271,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 272,col 61)",
            "(line 273,col 5)-(line 276,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType4()",
        "snippet": "  public void testParseTemplatizedType4() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<(number|null)>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createUnionType(NUMBER_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 279,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 280,col 5)-(line 280,col 63)",
            "(line 281,col 5)-(line 284,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType5()",
        "snippet": "  public void testParseTemplatizedType5() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Array.<(number|null)>>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createUnionType(NULL_TYPE,\n                createTemplatizedType(ARRAY_TYPE,\n                    createUnionType(NUMBER_TYPE, NULL_TYPE)))),\n        info.getType());\n  }\n",
        "begin_line": 287,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 71)",
            "(line 289,col 5)-(line 294,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType6()",
        "snippet": "  public void testParseTemplatizedType6() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<!Array.<(number|null)>>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createTemplatizedType(ARRAY_TYPE,\n                createUnionType(NUMBER_TYPE, NULL_TYPE))),\n        info.getType());\n  }\n",
        "begin_line": 297,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 298,col 72)",
            "(line 299,col 5)-(line 303,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType7()",
        "snippet": "  public void testParseTemplatizedType7() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<function():Date>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            registry.createFunctionType(\n                createUnionType(DATE_TYPE, NULL_TYPE))),\n        info.getType());\n  }\n",
        "begin_line": 306,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 307,col 5)-(line 307,col 65)",
            "(line 308,col 5)-(line 312,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType8()",
        "snippet": "  public void testParseTemplatizedType8() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<function():!Date>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            registry.createFunctionType(DATE_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 315,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 316,col 5)-(line 316,col 66)",
            "(line 317,col 5)-(line 320,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType9()",
        "snippet": "  public void testParseTemplatizedType9() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Date|number>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createUnionType(DATE_TYPE, NUMBER_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 323,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 324,col 5)-(line 324,col 61)",
            "(line 325,col 5)-(line 328,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType10()",
        "snippet": "  public void testParseTemplatizedType10() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Date|number|boolean>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            createUnionType(DATE_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 331,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 332,col 69)",
            "(line 333,col 5)-(line 336,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType11()",
        "snippet": "  public void testParseTemplatizedType11() throws Exception {\n    JSDocInfo info = parse(\"@type {!Object.<number>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(\n            OBJECT_TYPE, ImmutableList.of(UNKNOWN_TYPE, NUMBER_TYPE)),\n        info.getType());\n    assertTemplatizedTypeEquals(\n        registry.getObjectElementKey(), NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 339,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 57)",
            "(line 341,col 5)-(line 344,col 24)",
            "(line 345,col 5)-(line 346,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType12()",
        "snippet": "  public void testParseTemplatizedType12() throws Exception {\n    JSDocInfo info = parse(\"@type {!Object.<string,number>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(\n            OBJECT_TYPE, ImmutableList.of(STRING_TYPE, NUMBER_TYPE)),\n        info.getType());\n    assertTemplatizedTypeEquals(\n        registry.getObjectElementKey(), NUMBER_TYPE, info.getType());\n    assertTemplatizedTypeEquals(\n        registry.getObjectIndexKey(), STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 349,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 350,col 64)",
            "(line 351,col 5)-(line 354,col 24)",
            "(line 355,col 5)-(line 356,col 69)",
            "(line 357,col 5)-(line 358,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTemplatizedType13()",
        "snippet": "  public void testParseTemplatizedType13() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<?> */\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE, UNKNOWN_TYPE), info.getType());\n  }\n",
        "begin_line": 361,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 362,col 50)",
            "(line 363,col 5)-(line 364,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType1()",
        "snippet": "  public void testParseUnionType1() throws Exception {\n    JSDocInfo info = parse(\"@type {(boolean,null)}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 367,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 368,col 5)-(line 368,col 55)",
            "(line 369,col 5)-(line 369,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType2()",
        "snippet": "  public void testParseUnionType2() throws Exception {\n    JSDocInfo info = parse(\"@type {boolean|null}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 372,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 373,col 5)-(line 373,col 53)",
            "(line 374,col 5)-(line 374,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType3()",
        "snippet": "  public void testParseUnionType3() throws Exception {\n    JSDocInfo info = parse(\"@type {boolean||null}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 377,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 378,col 5)-(line 378,col 54)",
            "(line 379,col 5)-(line 379,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType4()",
        "snippet": "  public void testParseUnionType4() throws Exception {\n    JSDocInfo info = parse(\"@type {(Array.<boolean>,null)}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 382,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 383,col 5)-(line 383,col 63)",
            "(line 384,col 5)-(line 386,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType5()",
        "snippet": "  public void testParseUnionType5() throws Exception {\n    JSDocInfo info = parse(\"@type {(null, Array.<boolean>)}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 389,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 390,col 5)-(line 390,col 64)",
            "(line 391,col 5)-(line 393,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType6()",
        "snippet": "  public void testParseUnionType6() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>|null}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 396,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 397,col 5)-(line 397,col 61)",
            "(line 398,col 5)-(line 400,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType7()",
        "snippet": "  public void testParseUnionType7() throws Exception {\n    JSDocInfo info = parse(\"@type {null|Array.<boolean>}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 403,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 404,col 61)",
            "(line 405,col 5)-(line 407,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType8()",
        "snippet": "  public void testParseUnionType8() throws Exception {\n    JSDocInfo info = parse(\"@type {null||Array.<boolean>}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 410,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 411,col 5)-(line 411,col 62)",
            "(line 412,col 5)-(line 414,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType9()",
        "snippet": "  public void testParseUnionType9() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>||null}*/\");\n    assertTypeEquals(createUnionType(\n        createTemplatizedType(\n            ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 417,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 418,col 5)-(line 418,col 62)",
            "(line 419,col 5)-(line 421,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType10()",
        "snippet": "  public void testParseUnionType10() throws Exception {\n    parse(\"@type {string|}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 424,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 426,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType11()",
        "snippet": "  public void testParseUnionType11() throws Exception {\n    parse(\"@type {(string,)}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 429,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 430,col 5)-(line 431,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType12()",
        "snippet": "  public void testParseUnionType12() throws Exception {\n    parse(\"@type {()}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 434,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 435,col 5)-(line 436,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType13()",
        "snippet": "  public void testParseUnionType13() throws Exception {\n    testParseType(\n        \"(function(this:Date),function(this:String):number)\",\n        \"Function\");\n  }\n",
        "begin_line": 439,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 440,col 5)-(line 442,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType14()",
        "snippet": "  public void testParseUnionType14() throws Exception {\n    testParseType(\n        \"(function(...[function(number):boolean]):number)|\" +\n        \"function(this:String, string):number\",\n        \"Function\");\n  }\n",
        "begin_line": 445,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 446,col 5)-(line 449,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType15()",
        "snippet": "  public void testParseUnionType15() throws Exception {\n    testParseType(\"*|number\", \"*\");\n  }\n",
        "begin_line": 452,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 453,col 5)-(line 453,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType16()",
        "snippet": "  public void testParseUnionType16() throws Exception {\n    testParseType(\"number|*\", \"*\");\n  }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 457,col 5)-(line 457,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType17()",
        "snippet": "  public void testParseUnionType17() throws Exception {\n    testParseType(\"string|number|*\", \"*\");\n  }\n",
        "begin_line": 460,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 461,col 5)-(line 461,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType18()",
        "snippet": "  public void testParseUnionType18() throws Exception {\n    testParseType(\"(string,*,number)\", \"*\");\n  }\n",
        "begin_line": 464,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 465,col 5)-(line 465,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionTypeError1()",
        "snippet": "  public void testParseUnionTypeError1() throws Exception {\n    parse(\"@type {(string,|number)} */\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 468,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 469,col 5)-(line 470,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType1()",
        "snippet": "  public void testParseUnknownType1() throws Exception {\n    testParseType(\"?\");\n  }\n",
        "begin_line": 473,
        "end_line": 475,
        "comment": "",
        "child_ranges": [
            "(line 474,col 5)-(line 474,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType2()",
        "snippet": "  public void testParseUnknownType2() throws Exception {\n    testParseType(\"(?|number)\", \"?\");\n  }\n",
        "begin_line": 477,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 478,col 5)-(line 478,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType3()",
        "snippet": "  public void testParseUnknownType3() throws Exception {\n    testParseType(\"(number|?)\", \"?\");\n  }\n",
        "begin_line": 481,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 482,col 5)-(line 482,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType1()",
        "snippet": "  public void testParseFunctionalType1() throws Exception {\n    testParseType(\"function (): number\");\n  }\n",
        "begin_line": 485,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 486,col 5)-(line 486,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType2()",
        "snippet": "  public void testParseFunctionalType2() throws Exception {\n    testParseType(\"function (number, string): boolean\");\n  }\n",
        "begin_line": 489,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 490,col 5)-(line 490,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType3()",
        "snippet": "  public void testParseFunctionalType3() throws Exception {\n    testParseType(\n        \"function(this:Array)\", \"function (this:Array): ?\");\n  }\n",
        "begin_line": 493,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 494,col 5)-(line 495,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType4()",
        "snippet": "  public void testParseFunctionalType4() throws Exception {\n    testParseType(\"function (...[number]): boolean\");\n  }\n",
        "begin_line": 498,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 499,col 5)-(line 499,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType5()",
        "snippet": "  public void testParseFunctionalType5() throws Exception {\n    testParseType(\"function (number, ...[string]): boolean\");\n  }\n",
        "begin_line": 502,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 503,col 5)-(line 503,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType6()",
        "snippet": "  public void testParseFunctionalType6() throws Exception {\n    testParseType(\n        \"function (this:Date, number): (boolean|number|string)\");\n  }\n",
        "begin_line": 506,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 507,col 5)-(line 508,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType7()",
        "snippet": "  public void testParseFunctionalType7() throws Exception {\n    testParseType(\"function()\", \"function (): ?\");\n  }\n",
        "begin_line": 511,
        "end_line": 513,
        "comment": "",
        "child_ranges": [
            "(line 512,col 5)-(line 512,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType8()",
        "snippet": "  public void testParseFunctionalType8() throws Exception {\n    testParseType(\n        \"function(this:Array,...[boolean])\",\n        \"function (this:Array, ...[boolean]): ?\");\n  }\n",
        "begin_line": 515,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 516,col 5)-(line 518,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType9()",
        "snippet": "  public void testParseFunctionalType9() throws Exception {\n    testParseType(\n        \"function(this:Array,!Date,...[boolean?])\",\n        \"function (this:Array, Date, ...[(boolean|null)]): ?\");\n  }\n",
        "begin_line": 521,
        "end_line": 525,
        "comment": "",
        "child_ranges": [
            "(line 522,col 5)-(line 524,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType10()",
        "snippet": "  public void testParseFunctionalType10() throws Exception {\n    testParseType(\n        \"function(...[Object?]):boolean?\",\n        \"function (...[(Object|null)]): (boolean|null)\");\n  }\n",
        "begin_line": 527,
        "end_line": 531,
        "comment": "",
        "child_ranges": [
            "(line 528,col 5)-(line 530,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType11()",
        "snippet": "  public void testParseFunctionalType11() throws Exception {\n    testParseType(\n        \"function(...[[number]]):[number?]\",\n        \"function (...[Array]): Array\");\n  }\n",
        "begin_line": 533,
        "end_line": 537,
        "comment": "",
        "child_ranges": [
            "(line 534,col 5)-(line 536,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType12()",
        "snippet": "  public void testParseFunctionalType12() throws Exception {\n    testParseType(\n        \"function(...)\",\n        \"function (...[?]): ?\");\n  }\n",
        "begin_line": 539,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 540,col 5)-(line 542,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType13()",
        "snippet": "  public void testParseFunctionalType13() throws Exception {\n    testParseType(\n        \"function(...): void\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 545,
        "end_line": 549,
        "comment": "",
        "child_ranges": [
            "(line 546,col 5)-(line 548,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType14()",
        "snippet": "  public void testParseFunctionalType14() throws Exception {\n    testParseType(\"function (*, string, number): boolean\");\n  }\n",
        "begin_line": 551,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 552,col 5)-(line 552,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType15()",
        "snippet": "  public void testParseFunctionalType15() throws Exception {\n    testParseType(\"function (?, string): boolean\");\n  }\n",
        "begin_line": 555,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 556,col 5)-(line 556,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType16()",
        "snippet": "  public void testParseFunctionalType16() throws Exception {\n    testParseType(\"function (string, ?): ?\");\n  }\n",
        "begin_line": 559,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 560,col 5)-(line 560,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType17()",
        "snippet": "  public void testParseFunctionalType17() throws Exception {\n    testParseType(\"(function (?): ?|number)\");\n  }\n",
        "begin_line": 563,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 564,col 5)-(line 564,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType18()",
        "snippet": "  public void testParseFunctionalType18() throws Exception {\n    testParseType(\"function (?): (?|number)\", \"function (?): ?\");\n  }\n",
        "begin_line": 567,
        "end_line": 569,
        "comment": "",
        "child_ranges": [
            "(line 568,col 5)-(line 568,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType19()",
        "snippet": "  public void testParseFunctionalType19() throws Exception {\n    testParseType(\n        \"function(...[?]): void\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 571,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 572,col 5)-(line 574,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStructuralConstructor()",
        "snippet": "  public void testStructuralConstructor() throws Exception {\n    JSType type = testParseType(\n        \"function (new:Object)\", \"function (new:Object): ?\");\n    assertTrue(type.isConstructor());\n    assertFalse(type.isNominalConstructor());\n  }\n",
        "begin_line": 577,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 578,col 5)-(line 579,col 61)",
            "(line 580,col 5)-(line 580,col 37)",
            "(line 581,col 5)-(line 581,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStructuralConstructor2()",
        "snippet": "  public void testStructuralConstructor2() throws Exception {\n    JSType type = testParseType(\n        \"function (new:?)\",\n        // toString skips unknowns, but isConstructor reveals the truth.\n        \"function (): ?\");\n    assertTrue(type.isConstructor());\n    assertFalse(type.isNominalConstructor());\n  }\n",
        "begin_line": 584,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 585,col 5)-(line 588,col 26)",
            "(line 589,col 5)-(line 589,col 37)",
            "(line 590,col 5)-(line 590,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStructuralConstructor3()",
        "snippet": "  public void testStructuralConstructor3() throws Exception {\n    resolve(parse(\"@type {function (new:*)} */\").getType(),\n        \"constructed type must be an object type\");\n  }\n",
        "begin_line": 593,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 594,col 5)-(line 595,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testNominalConstructor()",
        "snippet": "  public void testNominalConstructor() throws Exception {\n    ObjectType type = testParseType(\"Array\", \"(Array|null)\").dereference();\n    assertTrue(type.getConstructor().isNominalConstructor());\n  }\n",
        "begin_line": 598,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 75)",
            "(line 600,col 5)-(line 600,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug1419535()",
        "snippet": "  public void testBug1419535() throws Exception {\n    parse(\"@type {function(Object, string, *)?} */\");\n    parse(\"@type {function(Object, string, *)|null} */\");\n  }\n",
        "begin_line": 603,
        "end_line": 606,
        "comment": "",
        "child_ranges": [
            "(line 604,col 5)-(line 604,col 53)",
            "(line 605,col 5)-(line 605,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIssue477()",
        "snippet": "  public void testIssue477() throws Exception {\n    parse(\"@type function */\",\n        \"Bad type annotation. missing opening (\");\n  }\n",
        "begin_line": 608,
        "end_line": 611,
        "comment": "",
        "child_ranges": [
            "(line 609,col 5)-(line 610,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testMalformedThisAnnotation()",
        "snippet": "  public void testMalformedThisAnnotation() throws Exception {\n    parse(\"@this */\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 613,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 614,col 5)-(line 615,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError1()",
        "snippet": "  public void testParseFunctionalTypeError1() throws Exception {\n    parse(\"@type {function number):string}*/\",\n        \"Bad type annotation. missing opening (\");\n  }\n",
        "begin_line": 618,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 619,col 5)-(line 620,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError2()",
        "snippet": "  public void testParseFunctionalTypeError2() throws Exception {\n    parse(\"@type {function( number}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 623,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 624,col 5)-(line 625,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError3()",
        "snippet": "  public void testParseFunctionalTypeError3() throws Exception {\n    parse(\"@type {function(...[number], string)}*/\",\n        \"Bad type annotation. variable length argument must be last\");\n  }\n",
        "begin_line": 628,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 629,col 5)-(line 630,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError4()",
        "snippet": "  public void testParseFunctionalTypeError4() throws Exception {\n    parse(\"@type {function(string, ...[number], boolean):string}*/\",\n        \"Bad type annotation. variable length argument must be last\");\n  }\n",
        "begin_line": 633,
        "end_line": 636,
        "comment": "",
        "child_ranges": [
            "(line 634,col 5)-(line 635,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError5()",
        "snippet": "  public void testParseFunctionalTypeError5() throws Exception {\n    parse(\"@type {function (thi:Array)}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 638,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 639,col 5)-(line 640,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError6()",
        "snippet": "  public void testParseFunctionalTypeError6() throws Exception {\n    resolve(parse(\"@type {function (this:number)}*/\").getType(),\n        \"this type must be an object type\");\n  }\n",
        "begin_line": 643,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 644,col 5)-(line 645,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError7()",
        "snippet": "  public void testParseFunctionalTypeError7() throws Exception {\n    parse(\"@type {function(...[number)}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 648,
        "end_line": 651,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 650,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError8()",
        "snippet": "  public void testParseFunctionalTypeError8() throws Exception {\n    parse(\"@type {function(...number])}*/\",\n        \"Bad type annotation. missing opening [\");\n  }\n",
        "begin_line": 653,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 654,col 5)-(line 655,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError9()",
        "snippet": "  public void testParseFunctionalTypeError9() throws Exception {\n    parse(\"@type {function (new:Array, this:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 658,
        "end_line": 661,
        "comment": "",
        "child_ranges": [
            "(line 659,col 5)-(line 660,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError10()",
        "snippet": "  public void testParseFunctionalTypeError10() throws Exception {\n    parse(\"@type {function (this:Array, new:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 663,
        "end_line": 666,
        "comment": "",
        "child_ranges": [
            "(line 664,col 5)-(line 665,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError11()",
        "snippet": "  public void testParseFunctionalTypeError11() throws Exception {\n    parse(\"@type {function (Array, new:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 668,
        "end_line": 671,
        "comment": "",
        "child_ranges": [
            "(line 669,col 5)-(line 670,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError12()",
        "snippet": "  public void testParseFunctionalTypeError12() throws Exception {\n    resolve(parse(\"@type {function (new:number)}*/\").getType(),\n        \"constructed type must be an object type\");\n  }\n",
        "begin_line": 673,
        "end_line": 676,
        "comment": "",
        "child_ranges": [
            "(line 674,col 5)-(line 675,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType1()",
        "snippet": "  public void testParseArrayType1() throws Exception {\n    testParseType(\"[number]\", \"Array\");\n  }\n",
        "begin_line": 678,
        "end_line": 680,
        "comment": "",
        "child_ranges": [
            "(line 679,col 5)-(line 679,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType2()",
        "snippet": "  public void testParseArrayType2() throws Exception {\n    testParseType(\"[(number,boolean,[Object?])]\", \"Array\");\n  }\n",
        "begin_line": 682,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType3()",
        "snippet": "  public void testParseArrayType3() throws Exception {\n    testParseType(\"[[number],[string]]?\", \"(Array|null)\");\n  }\n",
        "begin_line": 686,
        "end_line": 688,
        "comment": "",
        "child_ranges": [
            "(line 687,col 5)-(line 687,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError1()",
        "snippet": "  public void testParseArrayTypeError1() throws Exception {\n    parse(\"@type {[number}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 690,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 691,col 5)-(line 692,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError2()",
        "snippet": "  public void testParseArrayTypeError2() throws Exception {\n    parse(\"@type {number]}*/\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 695,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 696,col 5)-(line 697,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError3()",
        "snippet": "  public void testParseArrayTypeError3() throws Exception {\n    parse(\"@type {[(number,boolean,Object?])]}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 700,
        "end_line": 703,
        "comment": "",
        "child_ranges": [
            "(line 701,col 5)-(line 702,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError4()",
        "snippet": "  public void testParseArrayTypeError4() throws Exception {\n    parse(\"@type {(number,boolean,[Object?)]}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 705,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 706,col 5)-(line 707,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseType(java.lang.String)",
        "snippet": "  private JSType testParseType(String type) throws Exception {\n    return testParseType(type, type);\n  }\n",
        "begin_line": 710,
        "end_line": 712,
        "comment": "",
        "child_ranges": [
            "(line 711,col 5)-(line 711,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseType(java.lang.String, java.lang.String)",
        "snippet": "  private JSType testParseType(\n      String type, String typeExpected) throws Exception {\n    JSDocInfo info = parse(\"@type {\" + type + \"}*/\");\n\n    assertNotNull(info);\n    assertTrue(info.hasType());\n\n    JSType actual = resolve(info.getType());\n    assertEquals(typeExpected, actual.toString());\n    return actual;\n  }\n",
        "begin_line": 714,
        "end_line": 724,
        "comment": "",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 53)",
            "(line 718,col 5)-(line 718,col 24)",
            "(line 719,col 5)-(line 719,col 31)",
            "(line 721,col 5)-(line 721,col 44)",
            "(line 722,col 5)-(line 722,col 50)",
            "(line 723,col 5)-(line 723,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers1()",
        "snippet": "  public void testParseNullableModifiers1() throws Exception {\n    JSDocInfo info = parse(\"@type {string?}*/\");\n    assertTypeEquals(createNullableType(STRING_TYPE), info.getType());\n  }\n",
        "begin_line": 726,
        "end_line": 729,
        "comment": "",
        "child_ranges": [
            "(line 727,col 5)-(line 727,col 48)",
            "(line 728,col 5)-(line 728,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers2()",
        "snippet": "  public void testParseNullableModifiers2() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<string?>}*/\");\n    assertTypeEquals(\n        createTemplatizedType(\n            ARRAY_TYPE, createUnionType(STRING_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 731,
        "end_line": 737,
        "comment": "",
        "child_ranges": [
            "(line 732,col 5)-(line 732,col 57)",
            "(line 733,col 5)-(line 736,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers3()",
        "snippet": "  public void testParseNullableModifiers3() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>?}*/\");\n    assertTypeEquals(\n        createNullableType(createTemplatizedType(ARRAY_TYPE, BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 739,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 740,col 5)-(line 740,col 57)",
            "(line 741,col 5)-(line 743,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers4()",
        "snippet": "  public void testParseNullableModifiers4() throws Exception {\n    JSDocInfo info = parse(\"@type {(string,boolean)?}*/\");\n    assertTypeEquals(\n        createNullableType(createUnionType(STRING_TYPE, BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 746,
        "end_line": 751,
        "comment": "",
        "child_ranges": [
            "(line 747,col 5)-(line 747,col 58)",
            "(line 748,col 5)-(line 750,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers5()",
        "snippet": "  public void testParseNullableModifiers5() throws Exception {\n    JSDocInfo info = parse(\"@type {(string?,boolean)}*/\");\n    assertTypeEquals(\n        createUnionType(createNullableType(STRING_TYPE), BOOLEAN_TYPE),\n        info.getType());\n  }\n",
        "begin_line": 753,
        "end_line": 758,
        "comment": "",
        "child_ranges": [
            "(line 754,col 5)-(line 754,col 58)",
            "(line 755,col 5)-(line 757,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers6()",
        "snippet": "  public void testParseNullableModifiers6() throws Exception {\n    JSDocInfo info = parse(\"@type {(string,boolean?)}*/\");\n    assertTypeEquals(\n        createUnionType(STRING_TYPE, createNullableType(BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 760,
        "end_line": 765,
        "comment": "",
        "child_ranges": [
            "(line 761,col 5)-(line 761,col 58)",
            "(line 762,col 5)-(line 764,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers7()",
        "snippet": "  public void testParseNullableModifiers7() throws Exception {\n    JSDocInfo info = parse(\"@type {string?|boolean}*/\");\n    assertTypeEquals(\n        createUnionType(createNullableType(STRING_TYPE), BOOLEAN_TYPE),\n        info.getType());\n  }\n",
        "begin_line": 767,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 768,col 5)-(line 768,col 56)",
            "(line 769,col 5)-(line 771,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers8()",
        "snippet": "  public void testParseNullableModifiers8() throws Exception {\n    JSDocInfo info = parse(\"@type {string|boolean?}*/\");\n    assertTypeEquals(\n        createUnionType(STRING_TYPE, createNullableType(BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 774,
        "end_line": 779,
        "comment": "",
        "child_ranges": [
            "(line 775,col 5)-(line 775,col 56)",
            "(line 776,col 5)-(line 778,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers9()",
        "snippet": "  public void testParseNullableModifiers9() throws Exception {\n    JSDocInfo info = parse(\"@type {foo.Hello.World?}*/\");\n    assertTypeEquals(\n        createNullableType(\n            registry.createNamedType(\n                \"foo.Hello.World\", null, -1, -1)),\n        info.getType());\n  }\n",
        "begin_line": 781,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 782,col 5)-(line 782,col 57)",
            "(line 783,col 5)-(line 787,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOptionalModifier()",
        "snippet": "  public void testParseOptionalModifier() throws Exception {\n    JSDocInfo info = parse(\"@type {function(number=)}*/\");\n    assertTypeEquals(\n        registry.createFunctionType(\n            UNKNOWN_TYPE, registry.createOptionalParameters(NUMBER_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 790,
        "end_line": 796,
        "comment": "",
        "child_ranges": [
            "(line 791,col 5)-(line 791,col 58)",
            "(line 792,col 5)-(line 795,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline1()",
        "snippet": "  public void testParseNewline1() throws Exception {\n    JSDocInfo info = parse(\"@type {string\\n* }\\n*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 798,
        "end_line": 801,
        "comment": "",
        "child_ranges": [
            "(line 799,col 5)-(line 799,col 53)",
            "(line 800,col 5)-(line 800,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline2()",
        "snippet": "  public void testParseNewline2() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<\\n* number\\n* > */\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n  }\n",
        "begin_line": 803,
        "end_line": 807,
        "comment": "",
        "child_ranges": [
            "(line 804,col 5)-(line 804,col 63)",
            "(line 805,col 5)-(line 806,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline3()",
        "snippet": "  public void testParseNewline3() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number,\\n* null)>*/\");\n    assertTypeEquals(\n        createTemplatizedType(\n            ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 809,
        "end_line": 815,
        "comment": "",
        "child_ranges": [
            "(line 810,col 5)-(line 810,col 65)",
            "(line 811,col 5)-(line 814,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline4()",
        "snippet": "  public void testParseNewline4() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number|\\n* null)>*/\");\n    assertTypeEquals(\n        createTemplatizedType(\n            ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 817,
        "end_line": 823,
        "comment": "",
        "child_ranges": [
            "(line 818,col 5)-(line 818,col 65)",
            "(line 819,col 5)-(line 822,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline5()",
        "snippet": "  public void testParseNewline5() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<function(\\n* )\\n* :\\n* Date>*/\");\n    assertTypeEquals(\n        createTemplatizedType(ARRAY_TYPE,\n            registry.createFunctionType(\n                createUnionType(DATE_TYPE, NULL_TYPE))),\n        info.getType());\n  }\n",
        "begin_line": 825,
        "end_line": 832,
        "comment": "",
        "child_ranges": [
            "(line 826,col 5)-(line 826,col 75)",
            "(line 827,col 5)-(line 831,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType1()",
        "snippet": "  public void testParseReturnType1() throws Exception {\n    JSDocInfo info =\n        parse(\"@return {null|string|Array.<boolean>}*/\");\n    assertTypeEquals(\n        createUnionType(createTemplatizedType(ARRAY_TYPE, BOOLEAN_TYPE),\n            NULL_TYPE, STRING_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 834,
        "end_line": 841,
        "comment": "",
        "child_ranges": [
            "(line 835,col 5)-(line 836,col 57)",
            "(line 837,col 5)-(line 840,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType2()",
        "snippet": "  public void testParseReturnType2() throws Exception {\n    JSDocInfo info =\n        parse(\"@returns {null|(string,Array.<boolean>)}*/\");\n    assertTypeEquals(\n        createUnionType(createTemplatizedType(ARRAY_TYPE, BOOLEAN_TYPE),\n            NULL_TYPE, STRING_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 843,
        "end_line": 850,
        "comment": "",
        "child_ranges": [
            "(line 844,col 5)-(line 845,col 60)",
            "(line 846,col 5)-(line 849,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType3()",
        "snippet": "  public void testParseReturnType3() throws Exception {\n    JSDocInfo info =\n        parse(\"@return {((null||Array.<boolean>,string),boolean)}*/\");\n    assertTypeEquals(\n        createUnionType(createTemplatizedType(ARRAY_TYPE, BOOLEAN_TYPE),\n            NULL_TYPE, STRING_TYPE, BOOLEAN_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 852,
        "end_line": 859,
        "comment": "",
        "child_ranges": [
            "(line 853,col 5)-(line 854,col 70)",
            "(line 855,col 5)-(line 858,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType1()",
        "snippet": "  public void testParseThisType1() throws Exception {\n    JSDocInfo info =\n        parse(\"@this {goog.foo.Bar}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.foo.Bar\", null, -1, -1),\n        info.getThisType());\n  }\n",
        "begin_line": 861,
        "end_line": 867,
        "comment": "",
        "child_ranges": [
            "(line 862,col 5)-(line 863,col 40)",
            "(line 864,col 5)-(line 866,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType2()",
        "snippet": "  public void testParseThisType2() throws Exception {\n    JSDocInfo info =\n        parse(\"@this goog.foo.Bar*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.foo.Bar\", null, -1, -1),\n        info.getThisType());\n  }\n",
        "begin_line": 869,
        "end_line": 875,
        "comment": "",
        "child_ranges": [
            "(line 870,col 5)-(line 871,col 38)",
            "(line 872,col 5)-(line 874,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType3()",
        "snippet": "  public void testParseThisType3() throws Exception {\n    parse(\"@type {number}\\n@this goog.foo.Bar*/\",\n        \"Bad type annotation. type annotation incompatible \" +\n        \"with other annotations\");\n  }\n",
        "begin_line": 877,
        "end_line": 881,
        "comment": "",
        "child_ranges": [
            "(line 878,col 5)-(line 880,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType4()",
        "snippet": "  public void testParseThisType4() throws Exception {\n    resolve(parse(\"@this number*/\").getThisType(),\n        \"@this must specify an object type\");\n  }\n",
        "begin_line": 883,
        "end_line": 886,
        "comment": "",
        "child_ranges": [
            "(line 884,col 5)-(line 885,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType5()",
        "snippet": "  public void testParseThisType5() throws Exception {\n    parse(\"@this {Date|Error}*/\");\n  }\n",
        "begin_line": 888,
        "end_line": 890,
        "comment": "",
        "child_ranges": [
            "(line 889,col 5)-(line 889,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType6()",
        "snippet": "  public void testParseThisType6() throws Exception {\n    resolve(parse(\"@this {Date|number}*/\").getThisType(),\n        \"@this must specify an object type\");\n  }\n",
        "begin_line": 892,
        "end_line": 895,
        "comment": "",
        "child_ranges": [
            "(line 893,col 5)-(line 894,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam1()",
        "snippet": "  public void testParseParam1() throws Exception {\n    JSDocInfo info = parse(\"@param {number} index*/\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 897,
        "end_line": 901,
        "comment": "",
        "child_ranges": [
            "(line 898,col 5)-(line 898,col 54)",
            "(line 899,col 5)-(line 899,col 46)",
            "(line 900,col 5)-(line 900,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam2()",
        "snippet": "  public void testParseParam2() throws Exception {\n    JSDocInfo info = parse(\"@param index*/\");\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 903,
        "end_line": 907,
        "comment": "",
        "child_ranges": [
            "(line 904,col 5)-(line 904,col 45)",
            "(line 905,col 5)-(line 905,col 46)",
            "(line 906,col 5)-(line 906,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam3()",
        "snippet": "  public void testParseParam3() throws Exception {\n    JSDocInfo info = parse(\"@param {number} index useful comments*/\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 909,
        "end_line": 913,
        "comment": "",
        "child_ranges": [
            "(line 910,col 5)-(line 910,col 70)",
            "(line 911,col 5)-(line 911,col 46)",
            "(line 912,col 5)-(line 912,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam4()",
        "snippet": "  public void testParseParam4() throws Exception {\n    JSDocInfo info = parse(\"@param index useful comments*/\");\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 915,
        "end_line": 919,
        "comment": "",
        "child_ranges": [
            "(line 916,col 5)-(line 916,col 61)",
            "(line 917,col 5)-(line 917,col 46)",
            "(line 918,col 5)-(line 918,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam5()",
        "snippet": "  public void testParseParam5() throws Exception {\n    // Test for multi-line @param.\n    JSDocInfo info = parse(\"@param {number} \\n index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 921,
        "end_line": 926,
        "comment": "",
        "child_ranges": [
            "(line 923,col 5)-(line 923,col 58)",
            "(line 924,col 5)-(line 924,col 46)",
            "(line 925,col 5)-(line 925,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam6()",
        "snippet": "  public void testParseParam6() throws Exception {\n    // Test for multi-line @param.\n    JSDocInfo info = parse(\"@param {number} \\n * index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 928,
        "end_line": 933,
        "comment": "",
        "child_ranges": [
            "(line 930,col 5)-(line 930,col 60)",
            "(line 931,col 5)-(line 931,col 46)",
            "(line 932,col 5)-(line 932,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam7()",
        "snippet": "  public void testParseParam7() throws Exception {\n    // Optional @param\n    JSDocInfo info = parse(\"@param {number=} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(NUMBER_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 935,
        "end_line": 941,
        "comment": "",
        "child_ranges": [
            "(line 937,col 5)-(line 937,col 56)",
            "(line 938,col 5)-(line 940,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam8()",
        "snippet": "  public void testParseParam8() throws Exception {\n    // Var args @param\n    JSDocInfo info = parse(\"@param {...number} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(NUMBER_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 943,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 945,col 5)-(line 945,col 58)",
            "(line 946,col 5)-(line 948,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam9()",
        "snippet": "  public void testParseParam9() throws Exception {\n    parse(\"@param {...number=} index */\",\n        \"Bad type annotation. expected closing }\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 951,
        "end_line": 955,
        "comment": "",
        "child_ranges": [
            "(line 952,col 5)-(line 954,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam10()",
        "snippet": "  public void testParseParam10() throws Exception {\n    parse(\"@param {...number index */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 957,
        "end_line": 960,
        "comment": "",
        "child_ranges": [
            "(line 958,col 5)-(line 959,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam11()",
        "snippet": "  public void testParseParam11() throws Exception {\n    parse(\"@param {number= index */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 962,
        "end_line": 965,
        "comment": "",
        "child_ranges": [
            "(line 963,col 5)-(line 964,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam12()",
        "snippet": "  public void testParseParam12() throws Exception {\n    JSDocInfo info = parse(\"@param {...number|string} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(\n            registry.createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 967,
        "end_line": 973,
        "comment": "",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 65)",
            "(line 969,col 5)-(line 972,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam13()",
        "snippet": "  public void testParseParam13() throws Exception {\n    JSDocInfo info = parse(\"@param {...(number|string)} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(\n            registry.createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 975,
        "end_line": 981,
        "comment": "",
        "child_ranges": [
            "(line 976,col 5)-(line 976,col 67)",
            "(line 977,col 5)-(line 980,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam14()",
        "snippet": "  public void testParseParam14() throws Exception {\n    JSDocInfo info = parse(\"@param {string} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 983,
        "end_line": 989,
        "comment": "",
        "child_ranges": [
            "(line 984,col 5)-(line 984,col 57)",
            "(line 985,col 5)-(line 985,col 46)",
            "(line 986,col 5)-(line 988,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam15()",
        "snippet": "  public void testParseParam15() throws Exception {\n    JSDocInfo info = parse(\"@param {string} [index */\",\n        \"Bad type annotation. missing closing ]\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(STRING_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 991,
        "end_line": 996,
        "comment": "",
        "child_ranges": [
            "(line 992,col 5)-(line 993,col 50)",
            "(line 994,col 5)-(line 994,col 46)",
            "(line 995,col 5)-(line 995,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam16()",
        "snippet": "  public void testParseParam16() throws Exception {\n    JSDocInfo info = parse(\"@param {string} index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(STRING_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 998,
        "end_line": 1002,
        "comment": "",
        "child_ranges": [
            "(line 999,col 5)-(line 999,col 56)",
            "(line 1000,col 5)-(line 1000,col 46)",
            "(line 1001,col 5)-(line 1001,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam17()",
        "snippet": "  public void testParseParam17() throws Exception {\n    JSDocInfo info = parse(\"@param {string=} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 1004,
        "end_line": 1010,
        "comment": "",
        "child_ranges": [
            "(line 1005,col 5)-(line 1005,col 58)",
            "(line 1006,col 5)-(line 1006,col 46)",
            "(line 1007,col 5)-(line 1009,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam18()",
        "snippet": "  public void testParseParam18() throws Exception {\n    JSDocInfo info = parse(\"@param {...string} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 1012,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1013,col 5)-(line 1013,col 60)",
            "(line 1014,col 5)-(line 1014,col 46)",
            "(line 1015,col 5)-(line 1017,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam19()",
        "snippet": "  public void testParseParam19() throws Exception {\n    JSDocInfo info = parse(\"@param {...} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(UNKNOWN_TYPE),\n        info.getParameterType(\"index\"));\n    assertTrue(info.getParameterType(\"index\").isVarArgs());\n  }\n",
        "begin_line": 1020,
        "end_line": 1027,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 5)-(line 1021,col 54)",
            "(line 1022,col 5)-(line 1022,col 46)",
            "(line 1023,col 5)-(line 1025,col 40)",
            "(line 1026,col 5)-(line 1026,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam20()",
        "snippet": "  public void testParseParam20() throws Exception {\n    JSDocInfo info = parse(\"@param {?=} index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        UNKNOWN_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 1029,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1030,col 5)-(line 1030,col 51)",
            "(line 1031,col 5)-(line 1031,col 46)",
            "(line 1032,col 5)-(line 1033,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam21()",
        "snippet": "  public void testParseParam21() throws Exception {\n    JSDocInfo info = parse(\"@param {...?} index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        UNKNOWN_TYPE, info.getParameterType(\"index\"));\n    assertTrue(info.getParameterType(\"index\").isVarArgs());\n  }\n",
        "begin_line": 1036,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 53)",
            "(line 1038,col 5)-(line 1038,col 46)",
            "(line 1039,col 5)-(line 1040,col 54)",
            "(line 1041,col 5)-(line 1041,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThrows1()",
        "snippet": "  public void testParseThrows1() throws Exception {\n    JSDocInfo info = parse(\"@throws {number} Some number */\");\n    assertEquals(1, info.getThrownTypes().size());\n    assertTypeEquals(NUMBER_TYPE, info.getThrownTypes().get(0));\n  }\n",
        "begin_line": 1044,
        "end_line": 1048,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1045,col 62)",
            "(line 1046,col 5)-(line 1046,col 50)",
            "(line 1047,col 5)-(line 1047,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThrows2()",
        "snippet": "  public void testParseThrows2() throws Exception {\n    JSDocInfo info = parse(\"@throws {number} Some number\\n \"\n                           + \"*@throws {String} A string */\");\n    assertEquals(2, info.getThrownTypes().size());\n    assertTypeEquals(NUMBER_TYPE, info.getThrownTypes().get(0));\n  }\n",
        "begin_line": 1050,
        "end_line": 1055,
        "comment": "",
        "child_ranges": [
            "(line 1051,col 5)-(line 1052,col 62)",
            "(line 1053,col 5)-(line 1053,col 50)",
            "(line 1054,col 5)-(line 1054,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType1()",
        "snippet": "  public void testParseRecordType1() throws Exception {\n    parseFull(\"/** @param {{x}} n\\n*/\");\n  }\n",
        "begin_line": 1057,
        "end_line": 1059,
        "comment": "",
        "child_ranges": [
            "(line 1058,col 5)-(line 1058,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType2()",
        "snippet": "  public void testParseRecordType2() throws Exception {\n    parseFull(\"/** @param {{z, y}} n\\n*/\");\n  }\n",
        "begin_line": 1061,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1062,col 5)-(line 1062,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType3()",
        "snippet": "  public void testParseRecordType3() throws Exception {\n    parseFull(\"/** @param {{z, y, x, q, hello, thisisatest}} n\\n*/\");\n  }\n",
        "begin_line": 1065,
        "end_line": 1067,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 5)-(line 1066,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType4()",
        "snippet": "  public void testParseRecordType4() throws Exception {\n    parseFull(\"/** @param {{a, 'a', 'hello', 2, this, do, while, for}} n\\n*/\");\n  }\n",
        "begin_line": 1069,
        "end_line": 1071,
        "comment": "",
        "child_ranges": [
            "(line 1070,col 5)-(line 1070,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType5()",
        "snippet": "  public void testParseRecordType5() throws Exception {\n    parseFull(\"/** @param {{x : hello}} n\\n*/\");\n  }\n",
        "begin_line": 1073,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1074,col 5)-(line 1074,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType6()",
        "snippet": "  public void testParseRecordType6() throws Exception {\n    parseFull(\"/** @param {{'x' : hello}} n\\n*/\");\n  }\n",
        "begin_line": 1077,
        "end_line": 1079,
        "comment": "",
        "child_ranges": [
            "(line 1078,col 5)-(line 1078,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType7()",
        "snippet": "  public void testParseRecordType7() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello}} n\\n*/\");\n  }\n",
        "begin_line": 1081,
        "end_line": 1083,
        "comment": "",
        "child_ranges": [
            "(line 1082,col 5)-(line 1082,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType8()",
        "snippet": "  public void testParseRecordType8() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello, y : bar}} n\\n*/\");\n  }\n",
        "begin_line": 1085,
        "end_line": 1087,
        "comment": "",
        "child_ranges": [
            "(line 1086,col 5)-(line 1086,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType9()",
        "snippet": "  public void testParseRecordType9() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello, y : {z : bar, 3 : meh}}} n\\n*/\");\n  }\n",
        "begin_line": 1089,
        "end_line": 1091,
        "comment": "",
        "child_ranges": [
            "(line 1090,col 5)-(line 1090,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType10()",
        "snippet": "  public void testParseRecordType10() throws Exception {\n    parseFull(\"/** @param {{__proto__ : moo}} n\\n*/\");\n  }\n",
        "begin_line": 1093,
        "end_line": 1095,
        "comment": "",
        "child_ranges": [
            "(line 1094,col 5)-(line 1094,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType11()",
        "snippet": "  public void testParseRecordType11() throws Exception {\n    parseFull(\"/** @param {{a : b} n\\n*/\",\n              \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1097,
        "end_line": 1100,
        "comment": "",
        "child_ranges": [
            "(line 1098,col 5)-(line 1099,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType12()",
        "snippet": "  public void testParseRecordType12() throws Exception {\n    parseFull(\"/** @param {{!hello : hey}} n\\n*/\",\n              \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 1102,
        "end_line": 1105,
        "comment": "",
        "child_ranges": [
            "(line 1103,col 5)-(line 1104,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType13()",
        "snippet": "  public void testParseRecordType13() throws Exception {\n    parseFull(\"/** @param {{x}|number} n\\n*/\");\n  }\n",
        "begin_line": 1107,
        "end_line": 1109,
        "comment": "",
        "child_ranges": [
            "(line 1108,col 5)-(line 1108,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType14()",
        "snippet": "  public void testParseRecordType14() throws Exception {\n    parseFull(\"/** @param {{x : y}|number} n\\n*/\");\n  }\n",
        "begin_line": 1111,
        "end_line": 1113,
        "comment": "",
        "child_ranges": [
            "(line 1112,col 5)-(line 1112,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType15()",
        "snippet": "  public void testParseRecordType15() throws Exception {\n    parseFull(\"/** @param {{'x' : y}|number} n\\n*/\");\n  }\n",
        "begin_line": 1115,
        "end_line": 1117,
        "comment": "",
        "child_ranges": [
            "(line 1116,col 5)-(line 1116,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType16()",
        "snippet": "  public void testParseRecordType16() throws Exception {\n    parseFull(\"/** @param {{x, y}|number} n\\n*/\");\n  }\n",
        "begin_line": 1119,
        "end_line": 1121,
        "comment": "",
        "child_ranges": [
            "(line 1120,col 5)-(line 1120,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType17()",
        "snippet": "  public void testParseRecordType17() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|number} n\\n*/\");\n  }\n",
        "begin_line": 1123,
        "end_line": 1125,
        "comment": "",
        "child_ranges": [
            "(line 1124,col 5)-(line 1124,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType18()",
        "snippet": "  public void testParseRecordType18() throws Exception {\n    parseFull(\"/** @param {number|{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1127,
        "end_line": 1129,
        "comment": "",
        "child_ranges": [
            "(line 1128,col 5)-(line 1128,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType19()",
        "snippet": "  public void testParseRecordType19() throws Exception {\n    parseFull(\"/** @param {?{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1131,
        "end_line": 1133,
        "comment": "",
        "child_ranges": [
            "(line 1132,col 5)-(line 1132,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType20()",
        "snippet": "  public void testParseRecordType20() throws Exception {\n    parseFull(\"/** @param {!{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1135,
        "end_line": 1137,
        "comment": "",
        "child_ranges": [
            "(line 1136,col 5)-(line 1136,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType21()",
        "snippet": "  public void testParseRecordType21() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|boolean} n\\n*/\");\n  }\n",
        "begin_line": 1139,
        "end_line": 1141,
        "comment": "",
        "child_ranges": [
            "(line 1140,col 5)-(line 1140,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType22()",
        "snippet": "  public void testParseRecordType22() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|function()} n\\n*/\");\n  }\n",
        "begin_line": 1143,
        "end_line": 1145,
        "comment": "",
        "child_ranges": [
            "(line 1144,col 5)-(line 1144,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType23()",
        "snippet": "  public void testParseRecordType23() throws Exception {\n    parseFull(\"/** @param {{x : function(), 'y'}|function()} n\\n*/\");\n  }\n",
        "begin_line": 1147,
        "end_line": 1149,
        "comment": "",
        "child_ranges": [
            "(line 1148,col 5)-(line 1148,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError1()",
        "snippet": "  public void testParseParamError1() throws Exception {\n    parseFull(\"/** @param\\n*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1151,
        "end_line": 1154,
        "comment": "",
        "child_ranges": [
            "(line 1152,col 5)-(line 1153,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError2()",
        "snippet": "  public void testParseParamError2() throws Exception {\n    parseFull(\"/** @param {Number}*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1156,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1157,col 5)-(line 1158,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError3()",
        "snippet": "  public void testParseParamError3() throws Exception {\n    parseFull(\"/** @param {Number}\\n*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1161,
        "end_line": 1164,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 5)-(line 1163,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError4()",
        "snippet": "  public void testParseParamError4() throws Exception {\n    parseFull(\"/** @param {Number}\\n* * num */\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1166,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1167,col 5)-(line 1168,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError5()",
        "snippet": "  public void testParseParamError5() throws Exception {\n    parse(\"@param {number} x \\n * @param {string} x */\",\n        \"Bad type annotation. duplicate variable name \\\"x\\\"\");\n  }\n",
        "begin_line": 1171,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1172,col 5)-(line 1173,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends1()",
        "snippet": "  public void testParseExtends1() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n                     parse(\"@extends String*/\").getBaseType());\n  }\n",
        "begin_line": 1176,
        "end_line": 1179,
        "comment": "",
        "child_ranges": [
            "(line 1177,col 5)-(line 1178,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends2()",
        "snippet": "  public void testParseExtends2() throws Exception {\n    JSDocInfo info = parse(\"@extends com.google.Foo.Bar.Hello.World*/\");\n    assertTypeEquals(\n        registry.createNamedType(\n            \"com.google.Foo.Bar.Hello.World\", null, -1, -1),\n        info.getBaseType());\n  }\n",
        "begin_line": 1181,
        "end_line": 1187,
        "comment": "",
        "child_ranges": [
            "(line 1182,col 5)-(line 1182,col 72)",
            "(line 1183,col 5)-(line 1186,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsGenerics()",
        "snippet": "  public void testParseExtendsGenerics() throws Exception {\n    JSDocInfo info =\n        parse(\"@extends com.google.Foo.Bar.Hello.World.<Boolean,number>*/\");\n    assertTypeEquals(\n        registry.createNamedType(\n            \"com.google.Foo.Bar.Hello.World\", null, -1, -1),\n        info.getBaseType());\n  }\n",
        "begin_line": 1189,
        "end_line": 1196,
        "comment": "",
        "child_ranges": [
            "(line 1190,col 5)-(line 1191,col 76)",
            "(line 1192,col 5)-(line 1195,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsGenerics()",
        "snippet": "  public void testParseImplementsGenerics() throws Exception {\n    // For types that are not templatized, <> annotations are ignored.\n    List<JSTypeExpression> interfaces =\n        parse(\"@implements {SomeInterface.<*>} */\")\n        .getImplementedInterfaces();\n    assertEquals(1, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface\", null, -1, -1),\n        interfaces.get(0));\n  }\n",
        "begin_line": 1198,
        "end_line": 1206,
        "comment": "",
        "child_ranges": [
            "(line 1200,col 5)-(line 1202,col 36)",
            "(line 1203,col 5)-(line 1203,col 39)",
            "(line 1204,col 5)-(line 1205,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends4()",
        "snippet": "  public void testParseExtends4() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends {String}*/\").getBaseType());\n  }\n",
        "begin_line": 1208,
        "end_line": 1211,
        "comment": "",
        "child_ranges": [
            "(line 1209,col 5)-(line 1210,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends5()",
        "snippet": "  public void testParseExtends5() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends {String*/\",\n              \"Bad type annotation. expected closing }\").getBaseType());\n  }\n",
        "begin_line": 1213,
        "end_line": 1217,
        "comment": "",
        "child_ranges": [
            "(line 1214,col 5)-(line 1216,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends6()",
        "snippet": "  public void testParseExtends6() throws Exception {\n    // Multi-line extends\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends \\n * {String}*/\").getBaseType());\n  }\n",
        "begin_line": 1219,
        "end_line": 1223,
        "comment": "",
        "child_ranges": [
            "(line 1221,col 5)-(line 1222,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsInvalidName()",
        "snippet": "  public void testParseExtendsInvalidName() throws Exception {\n    // This looks bad, but for the time being it should be OK, as\n    // we will not find a type with this name in the JS parsed tree.\n    // If this is fixed in the future, change this test to check for a\n    // warning/error message.\n    assertTypeEquals(\n        registry.createNamedType(\"some_++#%$%_UglyString\", null, -1, -1),\n        parse(\"@extends {some_++#%$%_UglyString} */\").getBaseType());\n  }\n",
        "begin_line": 1225,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1230,col 5)-(line 1232,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsNullable1()",
        "snippet": "  public void testParseExtendsNullable1() throws Exception {\n    parse(\"@extends {Base?} */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1235,
        "end_line": 1237,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 5)-(line 1236,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsNullable2()",
        "snippet": "  public void testParseExtendsNullable2() throws Exception {\n    parse(\"@extends Base? */\",\n        \"Bad type annotation. expected end of line or comment\");\n  }\n",
        "begin_line": 1239,
        "end_line": 1242,
        "comment": "",
        "child_ranges": [
            "(line 1240,col 5)-(line 1241,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum1()",
        "snippet": "  public void testParseEnum1() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@enum*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1244,
        "end_line": 1246,
        "comment": "",
        "child_ranges": [
            "(line 1245,col 5)-(line 1245,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum2()",
        "snippet": "  public void testParseEnum2() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@enum {string}*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1248,
        "end_line": 1251,
        "comment": "",
        "child_ranges": [
            "(line 1249,col 5)-(line 1250,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum3()",
        "snippet": "  public void testParseEnum3() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@enum string*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1253,
        "end_line": 1256,
        "comment": "",
        "child_ranges": [
            "(line 1254,col 5)-(line 1255,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc1()",
        "snippet": "  public void testParseDesc1() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello world!*/\").getDescription());\n  }\n",
        "begin_line": 1258,
        "end_line": 1261,
        "comment": "",
        "child_ranges": [
            "(line 1259,col 5)-(line 1260,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc2()",
        "snippet": "  public void testParseDesc2() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello world!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1263,
        "end_line": 1266,
        "comment": "",
        "child_ranges": [
            "(line 1264,col 5)-(line 1265,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc3()",
        "snippet": "  public void testParseDesc3() throws Exception {\n    assertEquals(\"\", parse(\"@desc*/\").getDescription());\n  }\n",
        "begin_line": 1268,
        "end_line": 1270,
        "comment": "",
        "child_ranges": [
            "(line 1269,col 5)-(line 1269,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc4()",
        "snippet": "  public void testParseDesc4() throws Exception {\n    assertEquals(\"\", parse(\"@desc\\n*/\").getDescription());\n  }\n",
        "begin_line": 1272,
        "end_line": 1274,
        "comment": "",
        "child_ranges": [
            "(line 1273,col 5)-(line 1273,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc5()",
        "snippet": "  public void testParseDesc5() throws Exception {\n    assertEquals(\"hello world!\",\n                 parse(\"@desc hello\\nworld!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1276,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1277,col 5)-(line 1278,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc6()",
        "snippet": "  public void testParseDesc6() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello\\n* world!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1281,
        "end_line": 1284,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 5)-(line 1283,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc7()",
        "snippet": "  public void testParseDesc7() throws Exception {\n    assertEquals(\"a b c\", parse(\"@desc a\\n\\nb\\nc*/\").getDescription());\n  }\n",
        "begin_line": 1286,
        "end_line": 1288,
        "comment": "",
        "child_ranges": [
            "(line 1287,col 5)-(line 1287,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc8()",
        "snippet": "  public void testParseDesc8() throws Exception {\n    assertEquals(\"a b c d\",\n        parse(\"@desc a\\n      *b\\n\\n  *c\\n\\nd*/\").getDescription());\n  }\n",
        "begin_line": 1290,
        "end_line": 1293,
        "comment": "",
        "child_ranges": [
            "(line 1291,col 5)-(line 1292,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc9()",
        "snippet": "  public void testParseDesc9() throws Exception {\n    String comment = \"@desc\\n.\\n,\\n{\\n)\\n}\\n|\\n.<\\n>\\n<\\n?\\n~\\n+\\n-\\n;\\n:\\n*/\";\n\n    assertEquals(\". , { ) } | .< > < ? ~ + - ; :\",\n        parse(comment).getDescription());\n  }\n",
        "begin_line": 1295,
        "end_line": 1300,
        "comment": "",
        "child_ranges": [
            "(line 1296,col 5)-(line 1296,col 79)",
            "(line 1298,col 5)-(line 1299,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc10()",
        "snippet": "  public void testParseDesc10() throws Exception {\n    String comment = \"@desc\\n?\\n?\\n?\\n?*/\";\n\n    assertEquals(\"? ? ? ?\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1302,
        "end_line": 1306,
        "comment": "",
        "child_ranges": [
            "(line 1303,col 5)-(line 1303,col 43)",
            "(line 1305,col 5)-(line 1305,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc11()",
        "snippet": "  public void testParseDesc11() throws Exception {\n    String comment = \"@desc :[]*/\";\n\n    assertEquals(\":[]\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1308,
        "end_line": 1312,
        "comment": "",
        "child_ranges": [
            "(line 1309,col 5)-(line 1309,col 35)",
            "(line 1311,col 5)-(line 1311,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc12()",
        "snippet": "  public void testParseDesc12() throws Exception {\n    String comment = \"@desc\\n:\\n[\\n]\\n...*/\";\n\n    assertEquals(\": [ ] ...\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1314,
        "end_line": 1318,
        "comment": "",
        "child_ranges": [
            "(line 1315,col 5)-(line 1315,col 45)",
            "(line 1317,col 5)-(line 1317,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning1()",
        "snippet": "  public void testParseMeaning1() throws Exception {\n    assertEquals(\"tigers\",\n        parse(\"@meaning tigers   */\").getMeaning());\n  }\n",
        "begin_line": 1320,
        "end_line": 1323,
        "comment": "",
        "child_ranges": [
            "(line 1321,col 5)-(line 1322,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning2()",
        "snippet": "  public void testParseMeaning2() throws Exception {\n    assertEquals(\"tigers and lions and bears\",\n        parse(\"@meaning tigers\\n * and lions\\n * and bears */\").getMeaning());\n  }\n",
        "begin_line": 1325,
        "end_line": 1328,
        "comment": "",
        "child_ranges": [
            "(line 1326,col 5)-(line 1327,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning3()",
        "snippet": "  public void testParseMeaning3() throws Exception {\n    JSDocInfo info =\n        parse(\"@meaning  tigers\\n * and lions\\n * @desc  and bears */\");\n    assertEquals(\"tigers and lions\", info.getMeaning());\n    assertEquals(\"and bears\", info.getDescription());\n  }\n",
        "begin_line": 1330,
        "end_line": 1335,
        "comment": "",
        "child_ranges": [
            "(line 1331,col 5)-(line 1332,col 72)",
            "(line 1333,col 5)-(line 1333,col 56)",
            "(line 1334,col 5)-(line 1334,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning4()",
        "snippet": "  public void testParseMeaning4() throws Exception {\n    parse(\"@meaning  tigers\\n * @meaning and lions  */\",\n        \"extra @meaning tag\");\n  }\n",
        "begin_line": 1337,
        "end_line": 1340,
        "comment": "",
        "child_ranges": [
            "(line 1338,col 5)-(line 1339,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends1()",
        "snippet": "  public void testParseLends1() throws Exception {\n    JSDocInfo info = parse(\"@lends {name} */\");\n    assertEquals(\"name\", info.getLendsName());\n  }\n",
        "begin_line": 1342,
        "end_line": 1345,
        "comment": "",
        "child_ranges": [
            "(line 1343,col 5)-(line 1343,col 47)",
            "(line 1344,col 5)-(line 1344,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends2()",
        "snippet": "  public void testParseLends2() throws Exception {\n    JSDocInfo info = parse(\"@lends   foo.bar  */\");\n    assertEquals(\"foo.bar\", info.getLendsName());\n  }\n",
        "begin_line": 1347,
        "end_line": 1350,
        "comment": "",
        "child_ranges": [
            "(line 1348,col 5)-(line 1348,col 51)",
            "(line 1349,col 5)-(line 1349,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends3()",
        "snippet": "  public void testParseLends3() throws Exception {\n    parse(\"@lends {name */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1352,
        "end_line": 1354,
        "comment": "",
        "child_ranges": [
            "(line 1353,col 5)-(line 1353,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends4()",
        "snippet": "  public void testParseLends4() throws Exception {\n    parse(\"@lends {} */\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 1356,
        "end_line": 1359,
        "comment": "",
        "child_ranges": [
            "(line 1357,col 5)-(line 1358,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends5()",
        "snippet": "  public void testParseLends5() throws Exception {\n    parse(\"@lends } */\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 1361,
        "end_line": 1364,
        "comment": "",
        "child_ranges": [
            "(line 1362,col 5)-(line 1363,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends6()",
        "snippet": "  public void testParseLends6() throws Exception {\n    parse(\"@lends {string} \\n * @lends {string} */\",\n        \"Bad type annotation. @lends tag incompatible with other annotations\");\n  }\n",
        "begin_line": 1366,
        "end_line": 1369,
        "comment": "",
        "child_ranges": [
            "(line 1367,col 5)-(line 1368,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends7()",
        "snippet": "  public void testParseLends7() throws Exception {\n    parse(\"@type {string} \\n * @lends {string} */\",\n        \"Bad type annotation. @lends tag incompatible with other annotations\");\n  }\n",
        "begin_line": 1371,
        "end_line": 1374,
        "comment": "",
        "child_ranges": [
            "(line 1372,col 5)-(line 1373,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStackedAnnotation()",
        "snippet": "  public void testStackedAnnotation() throws Exception {\n    JSDocInfo info = parse(\"@const @type {string}*/\");\n    assertTrue(info.isConstant());\n    assertTrue(info.hasType());\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 1376,
        "end_line": 1381,
        "comment": "",
        "child_ranges": [
            "(line 1377,col 5)-(line 1377,col 54)",
            "(line 1378,col 5)-(line 1378,col 34)",
            "(line 1379,col 5)-(line 1379,col 31)",
            "(line 1380,col 5)-(line 1380,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStackedAnnotation2()",
        "snippet": "  public void testStackedAnnotation2() throws Exception {\n    JSDocInfo info = parse(\"@type {string} @const */\");\n    assertTrue(info.isConstant());\n    assertTrue(info.hasType());\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 1383,
        "end_line": 1388,
        "comment": "",
        "child_ranges": [
            "(line 1384,col 5)-(line 1384,col 55)",
            "(line 1385,col 5)-(line 1385,col 34)",
            "(line 1386,col 5)-(line 1386,col 31)",
            "(line 1387,col 5)-(line 1387,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStackedAnnotation3()",
        "snippet": "  public void testStackedAnnotation3() throws Exception {\n    JSDocInfo info = parse(\"@const @see {string}*/\");\n    assertTrue(info.isConstant());\n    assertFalse(info.hasType());\n  }\n",
        "begin_line": 1390,
        "end_line": 1394,
        "comment": "",
        "child_ranges": [
            "(line 1391,col 5)-(line 1391,col 53)",
            "(line 1392,col 5)-(line 1392,col 34)",
            "(line 1393,col 5)-(line 1393,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStackedAnnotation4()",
        "snippet": "  public void testStackedAnnotation4() throws Exception {\n    JSDocInfo info = parse(\"@constructor @extends {Foo} @implements {Bar}*/\");\n    assertTrue(info.isConstructor());\n    assertTrue(info.hasBaseType());\n    assertEquals(1, info.getImplementedInterfaceCount());\n  }\n",
        "begin_line": 1396,
        "end_line": 1401,
        "comment": "",
        "child_ranges": [
            "(line 1397,col 5)-(line 1397,col 78)",
            "(line 1398,col 5)-(line 1398,col 37)",
            "(line 1399,col 5)-(line 1399,col 35)",
            "(line 1400,col 5)-(line 1400,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStackedAnnotation5()",
        "snippet": "  public void testStackedAnnotation5() throws Exception {\n    JSDocInfo info = parse(\"@param {number} x @constructor */\");\n    assertTrue(info.hasParameterType(\"x\"));\n    assertTrue(info.isConstructor());\n  }\n",
        "begin_line": 1403,
        "end_line": 1407,
        "comment": "",
        "child_ranges": [
            "(line 1404,col 5)-(line 1404,col 64)",
            "(line 1405,col 5)-(line 1405,col 43)",
            "(line 1406,col 5)-(line 1406,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStackedAnnotation6()",
        "snippet": "  public void testStackedAnnotation6() throws Exception {\n    JSDocInfo info = parse(\"@return {number} @constructor */\", true);\n    assertTrue(info.hasReturnType());\n    assertTrue(info.isConstructor());\n\n    info = parse(\"@return {number} @constructor */\", false);\n    assertTrue(info.hasReturnType());\n    assertTrue(info.isConstructor());\n  }\n",
        "begin_line": 1409,
        "end_line": 1417,
        "comment": "",
        "child_ranges": [
            "(line 1410,col 5)-(line 1410,col 69)",
            "(line 1411,col 5)-(line 1411,col 37)",
            "(line 1412,col 5)-(line 1412,col 37)",
            "(line 1414,col 5)-(line 1414,col 60)",
            "(line 1415,col 5)-(line 1415,col 37)",
            "(line 1416,col 5)-(line 1416,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStackedAnnotation7()",
        "snippet": "  public void testStackedAnnotation7() throws Exception {\n    JSDocInfo info = parse(\"@return @constructor */\");\n    assertTrue(info.hasReturnType());\n    assertTrue(info.isConstructor());\n  }\n",
        "begin_line": 1419,
        "end_line": 1423,
        "comment": "",
        "child_ranges": [
            "(line 1420,col 5)-(line 1420,col 54)",
            "(line 1421,col 5)-(line 1421,col 37)",
            "(line 1422,col 5)-(line 1422,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStackedAnnotation8()",
        "snippet": "  public void testStackedAnnotation8() throws Exception {\n    JSDocInfo info = parse(\"@throws {number} @constructor */\", true);\n    assertTrue(!info.getThrownTypes().isEmpty());\n    assertTrue(info.isConstructor());\n\n    info = parse(\"@return {number} @constructor */\", false);\n    assertTrue(info.hasReturnType());\n    assertTrue(info.isConstructor());\n  }\n",
        "begin_line": 1425,
        "end_line": 1433,
        "comment": "",
        "child_ranges": [
            "(line 1426,col 5)-(line 1426,col 69)",
            "(line 1427,col 5)-(line 1427,col 49)",
            "(line 1428,col 5)-(line 1428,col 37)",
            "(line 1430,col 5)-(line 1430,col 60)",
            "(line 1431,col 5)-(line 1431,col 37)",
            "(line 1432,col 5)-(line 1432,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParsePreserve()",
        "snippet": "  public void testParsePreserve() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@preserve Foo\\nBar\\n\\nBaz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\nBar\\n\\nBaz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1436,
        "end_line": 1442,
        "comment": "",
        "child_ranges": [
            "(line 1437,col 5)-(line 1437,col 28)",
            "(line 1438,col 5)-(line 1438,col 63)",
            "(line 1439,col 5)-(line 1439,col 51)",
            "(line 1440,col 5)-(line 1440,col 19)",
            "(line 1441,col 5)-(line 1441,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicense()",
        "snippet": "  public void testParseLicense() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo\\nBar\\n\\nBaz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\nBar\\n\\nBaz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1444,
        "end_line": 1450,
        "comment": "",
        "child_ranges": [
            "(line 1445,col 5)-(line 1445,col 28)",
            "(line 1446,col 5)-(line 1446,col 63)",
            "(line 1447,col 5)-(line 1447,col 50)",
            "(line 1448,col 5)-(line 1448,col 19)",
            "(line 1449,col 5)-(line 1449,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicenseAscii()",
        "snippet": "  public void testParseLicenseAscii() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo\\n *   Bar\\n\\n  Baz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\n   Bar\\n\\n  Baz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1452,
        "end_line": 1458,
        "comment": "",
        "child_ranges": [
            "(line 1453,col 5)-(line 1453,col 28)",
            "(line 1454,col 5)-(line 1454,col 63)",
            "(line 1455,col 5)-(line 1455,col 57)",
            "(line 1456,col 5)-(line 1456,col 19)",
            "(line 1457,col 5)-(line 1457,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicenseWithAnnotation()",
        "snippet": "  public void testParseLicenseWithAnnotation() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo \\n * @author Charlie Brown */\";\n    parse(comment);\n    assertEquals(\" Foo \\n @author Charlie Brown \",\n        node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1460,
        "end_line": 1467,
        "comment": "",
        "child_ranges": [
            "(line 1461,col 5)-(line 1461,col 28)",
            "(line 1462,col 5)-(line 1462,col 63)",
            "(line 1463,col 5)-(line 1463,col 66)",
            "(line 1464,col 5)-(line 1464,col 19)",
            "(line 1465,col 5)-(line 1466,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine1()",
        "snippet": "  public void testParseDefine1() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@define {string}*/\").getType());\n  }\n",
        "begin_line": 1469,
        "end_line": 1472,
        "comment": "",
        "child_ranges": [
            "(line 1470,col 5)-(line 1471,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine2()",
        "snippet": "  public void testParseDefine2() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@define {string*/\",\n              \"Bad type annotation. expected closing }\").getType());\n  }\n",
        "begin_line": 1474,
        "end_line": 1478,
        "comment": "",
        "child_ranges": [
            "(line 1475,col 5)-(line 1477,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine3()",
        "snippet": "  public void testParseDefine3() throws Exception {\n    JSDocInfo info = parse(\"@define {boolean}*/\");\n    assertTrue(info.isConstant());\n    assertTrue(info.isDefine());\n    assertTypeEquals(BOOLEAN_TYPE, info.getType());\n  }\n",
        "begin_line": 1480,
        "end_line": 1485,
        "comment": "",
        "child_ranges": [
            "(line 1481,col 5)-(line 1481,col 50)",
            "(line 1482,col 5)-(line 1482,col 34)",
            "(line 1483,col 5)-(line 1483,col 32)",
            "(line 1484,col 5)-(line 1484,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine4()",
        "snippet": "  public void testParseDefine4() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@define {number}*/\").getType());\n  }\n",
        "begin_line": 1487,
        "end_line": 1489,
        "comment": "",
        "child_ranges": [
            "(line 1488,col 5)-(line 1488,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine5()",
        "snippet": "  public void testParseDefine5() throws Exception {\n    assertTypeEquals(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE),\n        parse(\"@define {number|boolean}*/\").getType());\n  }\n",
        "begin_line": 1491,
        "end_line": 1494,
        "comment": "",
        "child_ranges": [
            "(line 1492,col 5)-(line 1493,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineDescription()",
        "snippet": "  public void testParseDefineDescription() throws Exception {\n    JSDocInfo doc = parse(\n        \"@define {string} description of element \\n next line*/\", true);\n    Marker defineMarker = doc.getMarkers().iterator().next();\n    assertEquals(\"define\", defineMarker.getAnnotation().getItem());\n    assertTrue(defineMarker.getDescription().getItem().contains(\"description of element\"));\n    assertTrue(defineMarker.getDescription().getItem().contains(\"next line\"));\n  }\n",
        "begin_line": 1496,
        "end_line": 1503,
        "comment": "",
        "child_ranges": [
            "(line 1497,col 5)-(line 1498,col 72)",
            "(line 1499,col 5)-(line 1499,col 61)",
            "(line 1500,col 5)-(line 1500,col 67)",
            "(line 1501,col 5)-(line 1501,col 91)",
            "(line 1502,col 5)-(line 1502,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParsePrivateDescription()",
        "snippet": "  public void testParsePrivateDescription() throws Exception {\n    JSDocInfo doc =\n        parse(\"@private {string} description \\n next line*/\", true);\n    Marker defineMarker = doc.getMarkers().iterator().next();\n    assertEquals(\"private\", defineMarker.getAnnotation().getItem());\n    assertTrue(defineMarker.getDescription().getItem().contains(\"description \"));\n    assertTrue(defineMarker.getDescription().getItem().contains(\"next line\"));\n  }\n",
        "begin_line": 1505,
        "end_line": 1512,
        "comment": "",
        "child_ranges": [
            "(line 1506,col 5)-(line 1507,col 68)",
            "(line 1508,col 5)-(line 1508,col 61)",
            "(line 1509,col 5)-(line 1509,col 68)",
            "(line 1510,col 5)-(line 1510,col 81)",
            "(line 1511,col 5)-(line 1511,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseProtectedDescription()",
        "snippet": "  public void testParseProtectedDescription() throws Exception {\n    JSDocInfo doc =\n        parse(\"@protected {string} description \\n next line*/\", true);\n    Marker defineMarker = doc.getMarkers().iterator().next();\n    assertEquals(\"protected\", defineMarker.getAnnotation().getItem());\n    assertTrue(defineMarker.getDescription().getItem().contains(\"description \"));\n    assertTrue(defineMarker.getDescription().getItem().contains(\"next line\"));\n  }\n",
        "begin_line": 1514,
        "end_line": 1521,
        "comment": "",
        "child_ranges": [
            "(line 1515,col 5)-(line 1516,col 70)",
            "(line 1517,col 5)-(line 1517,col 61)",
            "(line 1518,col 5)-(line 1518,col 70)",
            "(line 1519,col 5)-(line 1519,col 81)",
            "(line 1520,col 5)-(line 1520,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors1()",
        "snippet": "  public void testParseDefineErrors1() throws Exception {\n    parse(\"@enum {string}\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1523,
        "end_line": 1525,
        "comment": "",
        "child_ranges": [
            "(line 1524,col 5)-(line 1524,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors2()",
        "snippet": "  public void testParseDefineErrors2() throws Exception {\n    parse(\"@define {string}\\n @enum {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1527,
        "end_line": 1531,
        "comment": "",
        "child_ranges": [
            "(line 1528,col 5)-(line 1530,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors3()",
        "snippet": "  public void testParseDefineErrors3() throws Exception {\n    parse(\"@const\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1533,
        "end_line": 1535,
        "comment": "",
        "child_ranges": [
            "(line 1534,col 5)-(line 1534,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors4()",
        "snippet": "  public void testParseDefineErrors4() throws Exception {\n    parse(\"@type string \\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1537,
        "end_line": 1539,
        "comment": "",
        "child_ranges": [
            "(line 1538,col 5)-(line 1538,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors5()",
        "snippet": "  public void testParseDefineErrors5() throws Exception {\n    parse(\"@return {string}\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1541,
        "end_line": 1543,
        "comment": "",
        "child_ranges": [
            "(line 1542,col 5)-(line 1542,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors7()",
        "snippet": "  public void testParseDefineErrors7() throws Exception {\n    parse(\"@define {string}\\n @const */\", \"conflicting @const tag\");\n  }\n",
        "begin_line": 1545,
        "end_line": 1547,
        "comment": "",
        "child_ranges": [
            "(line 1546,col 5)-(line 1546,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors8()",
        "snippet": "  public void testParseDefineErrors8() throws Exception {\n    parse(\"@define {string}\\n @type string */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1549,
        "end_line": 1553,
        "comment": "",
        "child_ranges": [
            "(line 1550,col 5)-(line 1552,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCheck1()",
        "snippet": "  public void testParseNoCheck1() throws Exception {\n    assertTrue(parse(\"@notypecheck*/\").isNoTypeCheck());\n  }\n",
        "begin_line": 1555,
        "end_line": 1557,
        "comment": "",
        "child_ranges": [
            "(line 1556,col 5)-(line 1556,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCheck2()",
        "snippet": "  public void testParseNoCheck2() throws Exception {\n    parse(\"@notypecheck\\n@notypecheck*/\", \"extra @notypecheck tag\");\n  }\n",
        "begin_line": 1559,
        "end_line": 1561,
        "comment": "",
        "child_ranges": [
            "(line 1560,col 5)-(line 1560,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOverride1()",
        "snippet": "  public void testParseOverride1() throws Exception {\n    assertTrue(parse(\"@override*/\").isOverride());\n  }\n",
        "begin_line": 1563,
        "end_line": 1565,
        "comment": "",
        "child_ranges": [
            "(line 1564,col 5)-(line 1564,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOverride2()",
        "snippet": "  public void testParseOverride2() throws Exception {\n    parse(\"@override\\n@override*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1567,
        "end_line": 1570,
        "comment": "",
        "child_ranges": [
            "(line 1568,col 5)-(line 1569,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc1()",
        "snippet": "  public void testParseInheritDoc1() throws Exception {\n    assertTrue(parse(\"@inheritDoc*/\").isOverride());\n  }\n",
        "begin_line": 1572,
        "end_line": 1574,
        "comment": "",
        "child_ranges": [
            "(line 1573,col 5)-(line 1573,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc2()",
        "snippet": "  public void testParseInheritDoc2() throws Exception {\n    parse(\"@override\\n@inheritDoc*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1576,
        "end_line": 1579,
        "comment": "",
        "child_ranges": [
            "(line 1577,col 5)-(line 1578,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc3()",
        "snippet": "  public void testParseInheritDoc3() throws Exception {\n    parse(\"@inheritDoc\\n@inheritDoc*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1581,
        "end_line": 1584,
        "comment": "",
        "child_ranges": [
            "(line 1582,col 5)-(line 1583,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoAlias1()",
        "snippet": "  public void testParseNoAlias1() throws Exception {\n    assertTrue(parse(\"@noalias*/\").isNoAlias());\n  }\n",
        "begin_line": 1586,
        "end_line": 1588,
        "comment": "",
        "child_ranges": [
            "(line 1587,col 5)-(line 1587,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoAlias2()",
        "snippet": "  public void testParseNoAlias2() throws Exception {\n    parse(\"@noalias\\n@noalias*/\", \"extra @noalias tag\");\n  }\n",
        "begin_line": 1590,
        "end_line": 1592,
        "comment": "",
        "child_ranges": [
            "(line 1591,col 5)-(line 1591,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDeprecated1()",
        "snippet": "  public void testParseDeprecated1() throws Exception {\n    assertTrue(parse(\"@deprecated*/\").isDeprecated());\n  }\n",
        "begin_line": 1594,
        "end_line": 1596,
        "comment": "",
        "child_ranges": [
            "(line 1595,col 5)-(line 1595,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDeprecated2()",
        "snippet": "  public void testParseDeprecated2() throws Exception {\n    parse(\"@deprecated\\n@deprecated*/\", \"extra @deprecated tag\");\n  }\n",
        "begin_line": 1598,
        "end_line": 1600,
        "comment": "",
        "child_ranges": [
            "(line 1599,col 5)-(line 1599,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExport1()",
        "snippet": "  public void testParseExport1() throws Exception {\n    assertTrue(parse(\"@export*/\").isExport());\n  }\n",
        "begin_line": 1602,
        "end_line": 1604,
        "comment": "",
        "child_ranges": [
            "(line 1603,col 5)-(line 1603,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExport2()",
        "snippet": "  public void testParseExport2() throws Exception {\n    parse(\"@export\\n@export*/\", \"extra @export tag\");\n  }\n",
        "begin_line": 1606,
        "end_line": 1608,
        "comment": "",
        "child_ranges": [
            "(line 1607,col 5)-(line 1607,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExpose1()",
        "snippet": "  public void testParseExpose1() throws Exception {\n    assertTrue(parse(\"@expose*/\").isExpose());\n  }\n",
        "begin_line": 1610,
        "end_line": 1612,
        "comment": "",
        "child_ranges": [
            "(line 1611,col 5)-(line 1611,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExpose2()",
        "snippet": "  public void testParseExpose2() throws Exception {\n    parse(\"@expose\\n@expose*/\", \"extra @expose tag\");\n  }\n",
        "begin_line": 1614,
        "end_line": 1616,
        "comment": "",
        "child_ranges": [
            "(line 1615,col 5)-(line 1615,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns1()",
        "snippet": "  public void testParseExterns1() throws Exception {\n    assertTrue(parseFileOverview(\"@externs*/\").isExterns());\n  }\n",
        "begin_line": 1618,
        "end_line": 1620,
        "comment": "",
        "child_ranges": [
            "(line 1619,col 5)-(line 1619,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns2()",
        "snippet": "  public void testParseExterns2() throws Exception {\n    parseFileOverview(\"@externs\\n@externs*/\", \"extra @externs tag\");\n  }\n",
        "begin_line": 1622,
        "end_line": 1624,
        "comment": "",
        "child_ranges": [
            "(line 1623,col 5)-(line 1623,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns3()",
        "snippet": "  public void testParseExterns3() throws Exception {\n    assertNull(parse(\"@externs*/\"));\n  }\n",
        "begin_line": 1626,
        "end_line": 1628,
        "comment": "",
        "child_ranges": [
            "(line 1627,col 5)-(line 1627,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch1()",
        "snippet": "  public void testParseJavaDispatch1() throws Exception {\n    assertTrue(parse(\"@javadispatch*/\").isJavaDispatch());\n  }\n",
        "begin_line": 1630,
        "end_line": 1632,
        "comment": "",
        "child_ranges": [
            "(line 1631,col 5)-(line 1631,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch2()",
        "snippet": "  public void testParseJavaDispatch2() throws Exception {\n    parse(\"@javadispatch\\n@javadispatch*/\",\n        \"extra @javadispatch tag\");\n  }\n",
        "begin_line": 1634,
        "end_line": 1637,
        "comment": "",
        "child_ranges": [
            "(line 1635,col 5)-(line 1636,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch3()",
        "snippet": "  public void testParseJavaDispatch3() throws Exception {\n    assertNull(parseFileOverview(\"@javadispatch*/\"));\n  }\n",
        "begin_line": 1639,
        "end_line": 1641,
        "comment": "",
        "child_ranges": [
            "(line 1640,col 5)-(line 1640,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCompile1()",
        "snippet": "  public void testParseNoCompile1() throws Exception {\n    assertTrue(parseFileOverview(\"@nocompile*/\").isNoCompile());\n  }\n",
        "begin_line": 1643,
        "end_line": 1645,
        "comment": "",
        "child_ranges": [
            "(line 1644,col 5)-(line 1644,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCompile2()",
        "snippet": "  public void testParseNoCompile2() throws Exception {\n    parseFileOverview(\"@nocompile\\n@nocompile*/\", \"extra @nocompile tag\");\n  }\n",
        "begin_line": 1647,
        "end_line": 1649,
        "comment": "",
        "child_ranges": [
            "(line 1648,col 5)-(line 1648,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBugAnnotation()",
        "snippet": "  public void testBugAnnotation() throws Exception {\n    parse(\"@bug */\");\n  }\n",
        "begin_line": 1651,
        "end_line": 1653,
        "comment": "",
        "child_ranges": [
            "(line 1652,col 5)-(line 1652,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDescriptionAnnotation()",
        "snippet": "  public void testDescriptionAnnotation() throws Exception {\n    parse(\"@description */\");\n  }\n",
        "begin_line": 1655,
        "end_line": 1657,
        "comment": "",
        "child_ranges": [
            "(line 1656,col 5)-(line 1656,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression1()",
        "snippet": "  public void testRegression1() throws Exception {\n    String comment =\n        \" * @param {number} index the index of blah\\n\" +\n        \" * @return {boolean} whatever\\n\" +\n        \" * @private\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n    assertTypeEquals(BOOLEAN_TYPE, info.getReturnType());\n    assertEquals(Visibility.PRIVATE, info.getVisibility());\n  }\n",
        "begin_line": 1659,
        "end_line": 1671,
        "comment": "",
        "child_ranges": [
            "(line 1660,col 5)-(line 1664,col 14)",
            "(line 1666,col 5)-(line 1666,col 36)",
            "(line 1667,col 5)-(line 1667,col 46)",
            "(line 1668,col 5)-(line 1668,col 66)",
            "(line 1669,col 5)-(line 1669,col 57)",
            "(line 1670,col 5)-(line 1670,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression2()",
        "snippet": "  public void testRegression2() throws Exception {\n    String comment =\n        \" * @return {boolean} whatever\\n\" +\n        \" * but important\\n\" +\n        \" *\\n\" +\n        \" * @param {number} index the index of blah\\n\" +\n        \" * some more comments here\\n\" +\n        \" * @param name the name of the guy\\n\" +\n        \" *\\n\" +\n        \" * @protected\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(2, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n    assertEquals(null, info.getParameterType(\"name\"));\n    assertTypeEquals(BOOLEAN_TYPE, info.getReturnType());\n    assertEquals(Visibility.PROTECTED, info.getVisibility());\n  }\n",
        "begin_line": 1673,
        "end_line": 1691,
        "comment": "",
        "child_ranges": [
            "(line 1674,col 5)-(line 1683,col 14)",
            "(line 1685,col 5)-(line 1685,col 36)",
            "(line 1686,col 5)-(line 1686,col 46)",
            "(line 1687,col 5)-(line 1687,col 66)",
            "(line 1688,col 5)-(line 1688,col 54)",
            "(line 1689,col 5)-(line 1689,col 57)",
            "(line 1690,col 5)-(line 1690,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression3()",
        "snippet": "  public void testRegression3() throws Exception {\n    String comment =\n        \" * @param mediaTag this specified whether the @media tag is ....\\n\" +\n        \" *\\n\" +\n        \"\\n\" +\n        \"@public\\n\" +\n        \" *\\n\" +\n        \"\\n\" +\n        \" **********\\n\" +\n        \" * @final\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"mediaTag\"));\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n    assertTrue(info.isConstant());\n  }\n",
        "begin_line": 1693,
        "end_line": 1710,
        "comment": "",
        "child_ranges": [
            "(line 1694,col 5)-(line 1703,col 14)",
            "(line 1705,col 5)-(line 1705,col 36)",
            "(line 1706,col 5)-(line 1706,col 46)",
            "(line 1707,col 5)-(line 1707,col 58)",
            "(line 1708,col 5)-(line 1708,col 58)",
            "(line 1709,col 5)-(line 1709,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression4()",
        "snippet": "  public void testRegression4() throws Exception {\n    String comment =\n        \" * @const\\n\" +\n        \" * @hidden\\n\" +\n        \" * @preserveTry\\n\" +\n        \" * @constructor\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isConstant());\n    assertFalse(info.isDefine());\n    assertTrue(info.isConstructor());\n    assertTrue(info.isHidden());\n    assertTrue(info.shouldPreserveTry());\n  }\n",
        "begin_line": 1712,
        "end_line": 1726,
        "comment": "",
        "child_ranges": [
            "(line 1713,col 5)-(line 1718,col 14)",
            "(line 1720,col 5)-(line 1720,col 36)",
            "(line 1721,col 5)-(line 1721,col 34)",
            "(line 1722,col 5)-(line 1722,col 33)",
            "(line 1723,col 5)-(line 1723,col 37)",
            "(line 1724,col 5)-(line 1724,col 32)",
            "(line 1725,col 5)-(line 1725,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression5()",
        "snippet": "  public void testRegression5() throws Exception {\n    String comment = \"@const\\n@enum {string}\\n@public*/\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isConstant());\n    assertFalse(info.isDefine());\n    assertTypeEquals(STRING_TYPE, info.getEnumParameterType());\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n  }\n",
        "begin_line": 1728,
        "end_line": 1736,
        "comment": "",
        "child_ranges": [
            "(line 1729,col 5)-(line 1729,col 57)",
            "(line 1731,col 5)-(line 1731,col 36)",
            "(line 1732,col 5)-(line 1732,col 34)",
            "(line 1733,col 5)-(line 1733,col 33)",
            "(line 1734,col 5)-(line 1734,col 63)",
            "(line 1735,col 5)-(line 1735,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression6()",
        "snippet": "  public void testRegression6() throws Exception {\n    String comment = \"@hidden\\n@enum\\n@public*/\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isHidden());\n    assertTypeEquals(NUMBER_TYPE, info.getEnumParameterType());\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n  }\n",
        "begin_line": 1738,
        "end_line": 1745,
        "comment": "",
        "child_ranges": [
            "(line 1739,col 5)-(line 1739,col 49)",
            "(line 1741,col 5)-(line 1741,col 36)",
            "(line 1742,col 5)-(line 1742,col 32)",
            "(line 1743,col 5)-(line 1743,col 63)",
            "(line 1744,col 5)-(line 1744,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression7()",
        "snippet": "  public void testRegression7() throws Exception {\n    String comment =\n        \" * @desc description here\\n\" +\n        \" * @param {boolean} flag and some more description\\n\" +\n        \" *     nicely formatted\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(BOOLEAN_TYPE, info.getParameterType(\"flag\"));\n    assertEquals(\"description here\", info.getDescription());\n  }\n",
        "begin_line": 1747,
        "end_line": 1758,
        "comment": "",
        "child_ranges": [
            "(line 1748,col 5)-(line 1752,col 14)",
            "(line 1754,col 5)-(line 1754,col 36)",
            "(line 1755,col 5)-(line 1755,col 46)",
            "(line 1756,col 5)-(line 1756,col 66)",
            "(line 1757,col 5)-(line 1757,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression8()",
        "snippet": "  public void testRegression8() throws Exception {\n    String comment =\n        \" * @name random tag here\\n\" +\n        \" * @desc description here\\n\" +\n        \" *\\n\" +\n        \" * @param {boolean} flag and some more description\\n\" +\n        \" *     nicely formatted\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(BOOLEAN_TYPE, info.getParameterType(\"flag\"));\n    assertEquals(\"description here\", info.getDescription());\n  }\n",
        "begin_line": 1760,
        "end_line": 1773,
        "comment": "",
        "child_ranges": [
            "(line 1761,col 5)-(line 1767,col 14)",
            "(line 1769,col 5)-(line 1769,col 36)",
            "(line 1770,col 5)-(line 1770,col 46)",
            "(line 1771,col 5)-(line 1771,col 66)",
            "(line 1772,col 5)-(line 1772,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression9()",
        "snippet": "  public void testRegression9() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @param {string} p0 blah blah blah\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(1, jsdoc.getParameterCount());\n    assertTypeEquals(STRING_TYPE, jsdoc.getParameterType(\"p0\"));\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1775,
        "end_line": 1790,
        "comment": "",
        "child_ranges": [
            "(line 1776,col 5)-(line 1778,col 15)",
            "(line 1780,col 5)-(line 1780,col 36)",
            "(line 1781,col 5)-(line 1781,col 36)",
            "(line 1782,col 5)-(line 1782,col 39)",
            "(line 1783,col 5)-(line 1783,col 45)",
            "(line 1784,col 5)-(line 1784,col 34)",
            "(line 1785,col 5)-(line 1785,col 47)",
            "(line 1786,col 5)-(line 1786,col 64)",
            "(line 1787,col 5)-(line 1787,col 38)",
            "(line 1788,col 5)-(line 1788,col 32)",
            "(line 1789,col 5)-(line 1789,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression10()",
        "snippet": "  public void testRegression10() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @param {!String} p0 blah blah blah\\n\" +\n        \" * @param {boolean} p1 fobar\\n\" +\n        \" * @return {!Date} jksjkash dshad\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(2, jsdoc.getParameterCount());\n    assertTypeEquals(STRING_OBJECT_TYPE, jsdoc.getParameterType(\"p0\"));\n    assertTypeEquals(BOOLEAN_TYPE, jsdoc.getParameterType(\"p1\"));\n    assertTypeEquals(DATE_TYPE, jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1792,
        "end_line": 1810,
        "comment": "",
        "child_ranges": [
            "(line 1793,col 5)-(line 1797,col 15)",
            "(line 1799,col 5)-(line 1799,col 36)",
            "(line 1800,col 5)-(line 1800,col 36)",
            "(line 1801,col 5)-(line 1801,col 39)",
            "(line 1802,col 5)-(line 1802,col 45)",
            "(line 1803,col 5)-(line 1803,col 34)",
            "(line 1804,col 5)-(line 1804,col 47)",
            "(line 1805,col 5)-(line 1805,col 71)",
            "(line 1806,col 5)-(line 1806,col 65)",
            "(line 1807,col 5)-(line 1807,col 55)",
            "(line 1808,col 5)-(line 1808,col 32)",
            "(line 1809,col 5)-(line 1809,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression11()",
        "snippet": "  public void testRegression11() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @constructor\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1812,
        "end_line": 1826,
        "comment": "",
        "child_ranges": [
            "(line 1813,col 5)-(line 1815,col 15)",
            "(line 1817,col 5)-(line 1817,col 36)",
            "(line 1818,col 5)-(line 1818,col 36)",
            "(line 1819,col 5)-(line 1819,col 39)",
            "(line 1820,col 5)-(line 1820,col 45)",
            "(line 1821,col 5)-(line 1821,col 34)",
            "(line 1822,col 5)-(line 1822,col 47)",
            "(line 1823,col 5)-(line 1823,col 38)",
            "(line 1824,col 5)-(line 1824,col 32)",
            "(line 1825,col 5)-(line 1825,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression12()",
        "snippet": "  public void testRegression12() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @extends FooBar\\n\" +\n        \" */\");\n\n    assertTypeEquals(registry.createNamedType(\"FooBar\", null, 0, 0),\n        jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1828,
        "end_line": 1843,
        "comment": "",
        "child_ranges": [
            "(line 1829,col 5)-(line 1831,col 15)",
            "(line 1833,col 5)-(line 1834,col 29)",
            "(line 1835,col 5)-(line 1835,col 36)",
            "(line 1836,col 5)-(line 1836,col 39)",
            "(line 1837,col 5)-(line 1837,col 45)",
            "(line 1838,col 5)-(line 1838,col 34)",
            "(line 1839,col 5)-(line 1839,col 47)",
            "(line 1840,col 5)-(line 1840,col 38)",
            "(line 1841,col 5)-(line 1841,col 32)",
            "(line 1842,col 5)-(line 1842,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression13()",
        "snippet": "  public void testRegression13() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @type {!RegExp}\\n\" +\n        \" * @protected\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertTypeEquals(REGEXP_TYPE, jsdoc.getType());\n    assertEquals(Visibility.PROTECTED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1845,
        "end_line": 1860,
        "comment": "",
        "child_ranges": [
            "(line 1846,col 5)-(line 1849,col 15)",
            "(line 1851,col 5)-(line 1851,col 36)",
            "(line 1852,col 5)-(line 1852,col 36)",
            "(line 1853,col 5)-(line 1853,col 39)",
            "(line 1854,col 5)-(line 1854,col 45)",
            "(line 1855,col 5)-(line 1855,col 34)",
            "(line 1856,col 5)-(line 1856,col 47)",
            "(line 1857,col 5)-(line 1857,col 38)",
            "(line 1858,col 5)-(line 1858,col 51)",
            "(line 1859,col 5)-(line 1859,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression14()",
        "snippet": "  public void testRegression14() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @const\\n\" +\n        \" * @private\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertTrue(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.PRIVATE, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1862,
        "end_line": 1877,
        "comment": "",
        "child_ranges": [
            "(line 1863,col 5)-(line 1866,col 15)",
            "(line 1868,col 5)-(line 1868,col 36)",
            "(line 1869,col 5)-(line 1869,col 35)",
            "(line 1870,col 5)-(line 1870,col 39)",
            "(line 1871,col 5)-(line 1871,col 45)",
            "(line 1872,col 5)-(line 1872,col 34)",
            "(line 1873,col 5)-(line 1873,col 47)",
            "(line 1874,col 5)-(line 1874,col 38)",
            "(line 1875,col 5)-(line 1875,col 32)",
            "(line 1876,col 5)-(line 1876,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression15()",
        "snippet": "  public void testRegression15() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @desc Hello,\\n\" +\n        \" * World!\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertEquals(\"Hello, World!\", jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n    assertFalse(jsdoc.isExport());\n  }\n",
        "begin_line": 1879,
        "end_line": 1895,
        "comment": "",
        "child_ranges": [
            "(line 1880,col 5)-(line 1883,col 15)",
            "(line 1885,col 5)-(line 1885,col 36)",
            "(line 1886,col 5)-(line 1886,col 36)",
            "(line 1887,col 5)-(line 1887,col 58)",
            "(line 1888,col 5)-(line 1888,col 45)",
            "(line 1889,col 5)-(line 1889,col 34)",
            "(line 1890,col 5)-(line 1890,col 47)",
            "(line 1891,col 5)-(line 1891,col 38)",
            "(line 1892,col 5)-(line 1892,col 32)",
            "(line 1893,col 5)-(line 1893,col 62)",
            "(line 1894,col 5)-(line 1894,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression16()",
        "snippet": "  public void testRegression16() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" Email is plp@foo.bar\\n\" +\n        \" @type {string}\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1897,
        "end_line": 1910,
        "comment": "",
        "child_ranges": [
            "(line 1898,col 5)-(line 1901,col 15)",
            "(line 1903,col 5)-(line 1903,col 36)",
            "(line 1904,col 5)-(line 1904,col 36)",
            "(line 1905,col 5)-(line 1905,col 51)",
            "(line 1906,col 5)-(line 1906,col 34)",
            "(line 1907,col 5)-(line 1907,col 47)",
            "(line 1908,col 5)-(line 1908,col 38)",
            "(line 1909,col 5)-(line 1909,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression17()",
        "snippet": "  public void testRegression17() throws Exception {\n    // verifying that if no @desc is present the description is empty\n    assertNull(parse(\"@private*/\").getDescription());\n  }\n",
        "begin_line": 1912,
        "end_line": 1915,
        "comment": "",
        "child_ranges": [
            "(line 1914,col 5)-(line 1914,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression1()",
        "snippet": "  public void testFullRegression1() throws Exception {\n    parseFull(\"/** @param (string,number) foo*/function bar(foo){}\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1917,
        "end_line": 1920,
        "comment": "",
        "child_ranges": [
            "(line 1918,col 5)-(line 1919,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression2()",
        "snippet": "  public void testFullRegression2() throws Exception {\n    parseFull(\"/** @param {string,number) foo*/function bar(foo){}\",\n        \"Bad type annotation. expected closing }\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1922,
        "end_line": 1926,
        "comment": "",
        "child_ranges": [
            "(line 1923,col 5)-(line 1925,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression3()",
        "snippet": "  public void testFullRegression3() throws Exception {\n    parseFull(\"/**..\\n*/\");\n  }\n",
        "begin_line": 1928,
        "end_line": 1930,
        "comment": "",
        "child_ranges": [
            "(line 1929,col 5)-(line 1929,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug907488()",
        "snippet": "  public void testBug907488() throws Exception {\n    parse(\"@type {number,null} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1932,
        "end_line": 1935,
        "comment": "",
        "child_ranges": [
            "(line 1933,col 5)-(line 1934,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug907494()",
        "snippet": "  public void testBug907494() throws Exception {\n    parse(\"@return {Object,undefined} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1937,
        "end_line": 1940,
        "comment": "",
        "child_ranges": [
            "(line 1938,col 5)-(line 1939,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug909468()",
        "snippet": "  public void testBug909468() throws Exception {\n    parse(\"@extends {(x)}*/\",\n        \"Bad type annotation. expecting a type name\");\n  }\n",
        "begin_line": 1942,
        "end_line": 1945,
        "comment": "",
        "child_ranges": [
            "(line 1943,col 5)-(line 1944,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInterface()",
        "snippet": "  public void testParseInterface() throws Exception {\n    assertTrue(parse(\"@interface*/\").isInterface());\n  }\n",
        "begin_line": 1947,
        "end_line": 1949,
        "comment": "",
        "child_ranges": [
            "(line 1948,col 5)-(line 1948,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplicitCast1()",
        "snippet": "  public void testParseImplicitCast1() throws Exception {\n    assertTrue(parse(\"@type {string} \\n * @implicitCast*/\").isImplicitCast());\n  }\n",
        "begin_line": 1951,
        "end_line": 1953,
        "comment": "",
        "child_ranges": [
            "(line 1952,col 5)-(line 1952,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplicitCast2()",
        "snippet": "  public void testParseImplicitCast2() throws Exception {\n    assertFalse(parse(\"@type {string}*/\").isImplicitCast());\n  }\n",
        "begin_line": 1955,
        "end_line": 1957,
        "comment": "",
        "child_ranges": [
            "(line 1956,col 5)-(line 1956,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDuplicateImplicitCast()",
        "snippet": "  public void testParseDuplicateImplicitCast() throws Exception {\n    parse(\"@type {string} \\n * @implicitCast \\n * @implicitCast*/\",\n          \"Bad type annotation. extra @implicitCast tag\");\n  }\n",
        "begin_line": 1959,
        "end_line": 1962,
        "comment": "",
        "child_ranges": [
            "(line 1960,col 5)-(line 1961,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInterfaceDoubled()",
        "snippet": "  public void testParseInterfaceDoubled() throws Exception {\n    parse(\n        \"* @interface\\n\" +\n        \"* @interface\\n\" +\n        \"*/\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1964,
        "end_line": 1971,
        "comment": "",
        "child_ranges": [
            "(line 1965,col 5)-(line 1970,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplements()",
        "snippet": "  public void testParseImplements() throws Exception {\n    List<JSTypeExpression> interfaces = parse(\"@implements {SomeInterface}*/\")\n        .getImplementedInterfaces();\n    assertEquals(1, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface\", null, -1, -1),\n        interfaces.get(0));\n  }\n",
        "begin_line": 1973,
        "end_line": 1979,
        "comment": "",
        "child_ranges": [
            "(line 1974,col 5)-(line 1975,col 36)",
            "(line 1976,col 5)-(line 1976,col 39)",
            "(line 1977,col 5)-(line 1978,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsTwo()",
        "snippet": "  public void testParseImplementsTwo() throws Exception {\n    List<JSTypeExpression> interfaces =\n        parse(\n            \"* @implements {SomeInterface1}\\n\" +\n            \"* @implements {SomeInterface2}\\n\" +\n            \"*/\")\n        .getImplementedInterfaces();\n    assertEquals(2, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface1\", null, -1, -1),\n        interfaces.get(0));\n    assertTypeEquals(registry.createNamedType(\"SomeInterface2\", null, -1, -1),\n        interfaces.get(1));\n  }\n",
        "begin_line": 1981,
        "end_line": 1993,
        "comment": "",
        "child_ranges": [
            "(line 1982,col 5)-(line 1987,col 36)",
            "(line 1988,col 5)-(line 1988,col 39)",
            "(line 1989,col 5)-(line 1990,col 27)",
            "(line 1991,col 5)-(line 1992,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsSameTwice()",
        "snippet": "  public void testParseImplementsSameTwice() throws Exception {\n    parse(\n        \"* @implements {Smth}\\n\" +\n        \"* @implements {Smth}\\n\" +\n        \"*/\",\n        \"Bad type annotation. duplicate @implements tag\");\n  }\n",
        "begin_line": 1995,
        "end_line": 2001,
        "comment": "",
        "child_ranges": [
            "(line 1996,col 5)-(line 2000,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNoName()",
        "snippet": "  public void testParseImplementsNoName() throws Exception {\n    parse(\"* @implements {} */\",\n        \"Bad type annotation. expecting a type name\");\n  }\n",
        "begin_line": 2003,
        "end_line": 2006,
        "comment": "",
        "child_ranges": [
            "(line 2004,col 5)-(line 2005,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsMissingRC()",
        "snippet": "  public void testParseImplementsMissingRC() throws Exception {\n    parse(\"* @implements {Smth */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 2008,
        "end_line": 2011,
        "comment": "",
        "child_ranges": [
            "(line 2009,col 5)-(line 2010,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNullable1()",
        "snippet": "  public void testParseImplementsNullable1() throws Exception {\n    parse(\"@implements {Base?} */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 2013,
        "end_line": 2015,
        "comment": "",
        "child_ranges": [
            "(line 2014,col 5)-(line 2014,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNullable2()",
        "snippet": "  public void testParseImplementsNullable2() throws Exception {\n    parse(\"@implements Base? */\",\n        \"Bad type annotation. expected end of line or comment\");\n  }\n",
        "begin_line": 2017,
        "end_line": 2020,
        "comment": "",
        "child_ranges": [
            "(line 2018,col 5)-(line 2019,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n     JSDocInfo jsdoc = parse(\n         \" * @interface \\n\" +\n         \" * @extends {Extended} */\");\n    assertTrue(jsdoc.isInterface());\n    assertEquals(1, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended\", null, -1, -1),\n        types.get(0));\n  }\n",
        "begin_line": 2022,
        "end_line": 2031,
        "comment": "",
        "child_ranges": [
            "(line 2023,col 6)-(line 2025,col 38)",
            "(line 2026,col 5)-(line 2026,col 36)",
            "(line 2027,col 5)-(line 2027,col 56)",
            "(line 2028,col 5)-(line 2028,col 65)",
            "(line 2029,col 5)-(line 2030,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceMultiExtends1()",
        "snippet": "  public void testInterfaceMultiExtends1() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @interface \\n\" +\n        \" * @extends {Extended1} \\n\" +\n        \" * @extends {Extended2} */\");\n    assertTrue(jsdoc.isInterface());\n    assertNull(jsdoc.getBaseType());\n    assertEquals(2, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended1\", null, -1, -1),\n       types.get(0));\n    assertTypeEquals(registry.createNamedType(\"Extended2\", null, -1, -1),\n        types.get(1));\n  }\n",
        "begin_line": 2033,
        "end_line": 2046,
        "comment": "",
        "child_ranges": [
            "(line 2034,col 5)-(line 2037,col 38)",
            "(line 2038,col 5)-(line 2038,col 36)",
            "(line 2039,col 5)-(line 2039,col 36)",
            "(line 2040,col 5)-(line 2040,col 56)",
            "(line 2041,col 5)-(line 2041,col 65)",
            "(line 2042,col 5)-(line 2043,col 21)",
            "(line 2044,col 5)-(line 2045,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceMultiExtends2()",
        "snippet": "  public void testInterfaceMultiExtends2() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @extends {Extended1} \\n\" +\n        \" * @interface \\n\" +\n        \" * @extends {Extended2} \\n\" +\n        \" * @extends {Extended3} */\");\n    assertTrue(jsdoc.isInterface());\n    assertNull(jsdoc.getBaseType());\n    assertEquals(3, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended1\", null, -1, -1),\n       types.get(0));\n    assertTypeEquals(registry.createNamedType(\"Extended2\", null, -1, -1),\n        types.get(1));\n    assertTypeEquals(registry.createNamedType(\"Extended3\", null, -1, -1),\n        types.get(2));\n  }\n",
        "begin_line": 2048,
        "end_line": 2064,
        "comment": "",
        "child_ranges": [
            "(line 2049,col 5)-(line 2053,col 38)",
            "(line 2054,col 5)-(line 2054,col 36)",
            "(line 2055,col 5)-(line 2055,col 36)",
            "(line 2056,col 5)-(line 2056,col 56)",
            "(line 2057,col 5)-(line 2057,col 65)",
            "(line 2058,col 5)-(line 2059,col 21)",
            "(line 2060,col 5)-(line 2061,col 22)",
            "(line 2062,col 5)-(line 2063,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadClassMultiExtends()",
        "snippet": "  public void testBadClassMultiExtends() throws Exception {\n    parse(\" * @extends {Extended1} \\n\" +\n        \" * @constructor \\n\" +\n        \" * @extends {Extended2} */\",\n        \"Bad type annotation. type annotation incompatible with other \" +\n        \"annotations\");\n  }\n",
        "begin_line": 2066,
        "end_line": 2072,
        "comment": "",
        "child_ranges": [
            "(line 2067,col 5)-(line 2071,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadExtendsWithNullable()",
        "snippet": "  public void testBadExtendsWithNullable() throws Exception {\n    JSDocInfo jsdoc = parse(\"@constructor\\n * @extends {Object?} */\",\n        \"Bad type annotation. expected closing }\");\n    assertTrue(jsdoc.isConstructor());\n    assertTypeEquals(OBJECT_TYPE, jsdoc.getBaseType());\n  }\n",
        "begin_line": 2074,
        "end_line": 2079,
        "comment": "",
        "child_ranges": [
            "(line 2075,col 5)-(line 2076,col 51)",
            "(line 2077,col 5)-(line 2077,col 38)",
            "(line 2078,col 5)-(line 2078,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadImplementsWithNullable()",
        "snippet": "  public void testBadImplementsWithNullable() throws Exception {\n  JSDocInfo jsdoc = parse(\"@implements {Disposable?}\\n * @constructor */\",\n      \"Bad type annotation. expected closing }\");\n    assertTrue(jsdoc.isConstructor());\n    assertTypeEquals(registry.createNamedType(\"Disposable\", null, -1, -1),\n        jsdoc.getImplementedInterfaces().get(0));\n  }\n",
        "begin_line": 2081,
        "end_line": 2087,
        "comment": "",
        "child_ranges": [
            "(line 2082,col 3)-(line 2083,col 49)",
            "(line 2084,col 5)-(line 2084,col 38)",
            "(line 2085,col 5)-(line 2086,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadTypeDefInterfaceAndConstructor1()",
        "snippet": "  public void testBadTypeDefInterfaceAndConstructor1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@interface\\n@constructor*/\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n    assertTrue(jsdoc.isInterface());\n  }\n",
        "begin_line": 2089,
        "end_line": 2093,
        "comment": "",
        "child_ranges": [
            "(line 2090,col 5)-(line 2091,col 78)",
            "(line 2092,col 5)-(line 2092,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadTypeDefInterfaceAndConstructor2()",
        "snippet": "  public void testBadTypeDefInterfaceAndConstructor2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@constructor\\n@interface*/\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n    assertTrue(jsdoc.isConstructor());\n  }\n",
        "begin_line": 2095,
        "end_line": 2099,
        "comment": "",
        "child_ranges": [
            "(line 2096,col 5)-(line 2097,col 78)",
            "(line 2098,col 5)-(line 2098,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationParameter()",
        "snippet": "  public void testDocumentationParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.*/\", true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n  }\n",
        "begin_line": 2101,
        "end_line": 2108,
        "comment": "",
        "child_ranges": [
            "(line 2102,col 5)-(line 2103,col 75)",
            "(line 2105,col 5)-(line 2105,col 61)",
            "(line 2106,col 5)-(line 2107,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testMultilineDocumentationParameter()",
        "snippet": "  public void testMultilineDocumentationParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description\"\n                + \"\\n* on multiple \\n* lines.*/\", true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description on multiple lines.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n\n  }\n",
        "begin_line": 2110,
        "end_line": 2119,
        "comment": "",
        "child_ranges": [
            "(line 2111,col 5)-(line 2113,col 56)",
            "(line 2115,col 5)-(line 2115,col 61)",
            "(line 2116,col 5)-(line 2117,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationMultipleParameter()",
        "snippet": "  public void testDocumentationMultipleParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.\"\n                + \"\\n* @param {Integer} number87 This is another description.*/\"\n                , true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number87\"));\n    assertEquals(\"This is another description.\",\n                 jsdoc.getDescriptionForParameter(\"number87\"));\n  }\n",
        "begin_line": 2121,
        "end_line": 2134,
        "comment": "",
        "child_ranges": [
            "(line 2122,col 5)-(line 2125,col 24)",
            "(line 2127,col 5)-(line 2127,col 61)",
            "(line 2128,col 5)-(line 2129,col 63)",
            "(line 2131,col 5)-(line 2131,col 61)",
            "(line 2132,col 5)-(line 2133,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationMultipleParameter2()",
        "snippet": "  public void testDocumentationMultipleParameter2() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {number} delta = 0 results in a redraw\\n\" +\n                \"  != 0 ..... */\", true);\n    assertTrue(jsdoc.hasDescriptionForParameter(\"delta\"));\n    assertEquals(\"= 0 results in a redraw != 0 .....\",\n                 jsdoc.getDescriptionForParameter(\"delta\"));\n  }\n",
        "begin_line": 2136,
        "end_line": 2143,
        "comment": "",
        "child_ranges": [
            "(line 2137,col 5)-(line 2139,col 41)",
            "(line 2140,col 5)-(line 2140,col 58)",
            "(line 2141,col 5)-(line 2142,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testAuthors()",
        "snippet": "  public void testAuthors() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.\"\n                + \"\\n* @param {Integer} number87 This is another description.\"\n                + \"\\n* @author a@google.com (A Person)\"\n                + \"\\n* @author b@google.com (B Person)\"\n                + \"\\n* @author c@google.com (C Person)*/\"\n                , true);\n\n    Collection<String> authors = jsdoc.getAuthors();\n\n    assertTrue(authors != null);\n    assertTrue(authors.size() == 3);\n\n    assertContains(authors, \"a@google.com (A Person)\");\n    assertContains(authors, \"b@google.com (B Person)\");\n    assertContains(authors, \"c@google.com (C Person)\");\n  }\n",
        "begin_line": 2146,
        "end_line": 2163,
        "comment": "",
        "child_ranges": [
            "(line 2147,col 5)-(line 2153,col 24)",
            "(line 2155,col 5)-(line 2155,col 52)",
            "(line 2157,col 5)-(line 2157,col 32)",
            "(line 2158,col 5)-(line 2158,col 36)",
            "(line 2160,col 5)-(line 2160,col 55)",
            "(line 2161,col 5)-(line 2161,col 55)",
            "(line 2162,col 5)-(line 2162,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSuppress1()",
        "snippet": "  public void testSuppress1() throws Exception {\n    JSDocInfo info = parse(\"@suppress {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getSuppressions());\n  }\n",
        "begin_line": 2165,
        "end_line": 2168,
        "comment": "",
        "child_ranges": [
            "(line 2166,col 5)-(line 2166,col 47)",
            "(line 2167,col 5)-(line 2167,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSuppress2()",
        "snippet": "  public void testSuppress2() throws Exception {\n    JSDocInfo info = parse(\"@suppress {x|y|x|z} */\");\n    assertEquals(Sets.newHashSet(\"x\", \"y\", \"z\"), info.getSuppressions());\n  }\n",
        "begin_line": 2170,
        "end_line": 2173,
        "comment": "",
        "child_ranges": [
            "(line 2171,col 5)-(line 2171,col 53)",
            "(line 2172,col 5)-(line 2172,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSuppress3()",
        "snippet": "  public void testSuppress3() throws Exception {\n    JSDocInfo info = parse(\"@suppress {x,y} */\");\n    assertEquals(Sets.newHashSet(\"x\", \"y\"), info.getSuppressions());\n  }\n",
        "begin_line": 2175,
        "end_line": 2178,
        "comment": "",
        "child_ranges": [
            "(line 2176,col 5)-(line 2176,col 49)",
            "(line 2177,col 5)-(line 2177,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress1()",
        "snippet": "  public void testBadSuppress1() throws Exception {\n    parse(\"@suppress {} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 2180,
        "end_line": 2182,
        "comment": "",
        "child_ranges": [
            "(line 2181,col 5)-(line 2181,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress2()",
        "snippet": "  public void testBadSuppress2() throws Exception {\n    parse(\"@suppress {x|} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 2184,
        "end_line": 2186,
        "comment": "",
        "child_ranges": [
            "(line 2185,col 5)-(line 2185,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress3()",
        "snippet": "  public void testBadSuppress3() throws Exception {\n    parse(\"@suppress {|x} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 2188,
        "end_line": 2190,
        "comment": "",
        "child_ranges": [
            "(line 2189,col 5)-(line 2189,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress4()",
        "snippet": "  public void testBadSuppress4() throws Exception {\n    parse(\"@suppress {x|y */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 2192,
        "end_line": 2194,
        "comment": "",
        "child_ranges": [
            "(line 2193,col 5)-(line 2193,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress6()",
        "snippet": "  public void testBadSuppress6() throws Exception {\n    parse(\"@suppress {x} \\n * @suppress {y} */\", \"duplicate @suppress tag\");\n  }\n",
        "begin_line": 2196,
        "end_line": 2198,
        "comment": "",
        "child_ranges": [
            "(line 2197,col 5)-(line 2197,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress7()",
        "snippet": "  public void testBadSuppress7() throws Exception {\n    parse(\"@suppress {impossible} */\",\n          \"unknown @suppress parameter: impossible\");\n  }\n",
        "begin_line": 2200,
        "end_line": 2203,
        "comment": "",
        "child_ranges": [
            "(line 2201,col 5)-(line 2202,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies1()",
        "snippet": "  public void testModifies1() throws Exception {\n    JSDocInfo info = parse(\"@modifies {this} */\");\n    assertEquals(Sets.newHashSet(\"this\"), info.getModifies());\n  }\n",
        "begin_line": 2205,
        "end_line": 2208,
        "comment": "",
        "child_ranges": [
            "(line 2206,col 5)-(line 2206,col 50)",
            "(line 2207,col 5)-(line 2207,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies2()",
        "snippet": "  public void testModifies2() throws Exception {\n    JSDocInfo info = parse(\"@modifies {arguments} */\");\n    assertEquals(Sets.newHashSet(\"arguments\"), info.getModifies());\n  }\n",
        "begin_line": 2210,
        "end_line": 2213,
        "comment": "",
        "child_ranges": [
            "(line 2211,col 5)-(line 2211,col 55)",
            "(line 2212,col 5)-(line 2212,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies3()",
        "snippet": "  public void testModifies3() throws Exception {\n    JSDocInfo info = parse(\"@modifies {this|arguments} */\");\n    assertEquals(Sets.newHashSet(\"this\", \"arguments\"), info.getModifies());\n  }\n",
        "begin_line": 2215,
        "end_line": 2218,
        "comment": "",
        "child_ranges": [
            "(line 2216,col 5)-(line 2216,col 60)",
            "(line 2217,col 5)-(line 2217,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies4()",
        "snippet": "  public void testModifies4() throws Exception {\n    JSDocInfo info = parse(\"@param {*} x\\n * @modifies {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getModifies());\n  }\n",
        "begin_line": 2220,
        "end_line": 2223,
        "comment": "",
        "child_ranges": [
            "(line 2221,col 5)-(line 2221,col 64)",
            "(line 2222,col 5)-(line 2222,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies5()",
        "snippet": "  public void testModifies5() throws Exception {\n    JSDocInfo info = parse(\n        \"@param {*} x\\n\"\n        + \" * @param {*} y\\n\"\n        + \" * @modifies {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getModifies());\n  }\n",
        "begin_line": 2225,
        "end_line": 2231,
        "comment": "",
        "child_ranges": [
            "(line 2226,col 5)-(line 2229,col 33)",
            "(line 2230,col 5)-(line 2230,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies6()",
        "snippet": "  public void testModifies6() throws Exception {\n    JSDocInfo info = parse(\n        \"@param {*} x\\n\"\n        + \" * @param {*} y\\n\"\n        + \" * @modifies {x|y} */\");\n    assertEquals(Sets.newHashSet(\"x\", \"y\"), info.getModifies());\n  }\n",
        "begin_line": 2233,
        "end_line": 2239,
        "comment": "",
        "child_ranges": [
            "(line 2234,col 5)-(line 2237,col 35)",
            "(line 2238,col 5)-(line 2238,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies1()",
        "snippet": "  public void testBadModifies1() throws Exception {\n    parse(\"@modifies {} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2242,
        "end_line": 2244,
        "comment": "",
        "child_ranges": [
            "(line 2243,col 5)-(line 2243,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies2()",
        "snippet": "  public void testBadModifies2() throws Exception {\n    parse(\"@modifies {this|} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2246,
        "end_line": 2248,
        "comment": "",
        "child_ranges": [
            "(line 2247,col 5)-(line 2247,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies3()",
        "snippet": "  public void testBadModifies3() throws Exception {\n    parse(\"@modifies {|this} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2250,
        "end_line": 2252,
        "comment": "",
        "child_ranges": [
            "(line 2251,col 5)-(line 2251,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies4()",
        "snippet": "  public void testBadModifies4() throws Exception {\n    parse(\"@modifies {this|arguments */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2254,
        "end_line": 2256,
        "comment": "",
        "child_ranges": [
            "(line 2255,col 5)-(line 2255,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies5()",
        "snippet": "  public void testBadModifies5() throws Exception {\n    parse(\"@modifies {this,arguments} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2258,
        "end_line": 2260,
        "comment": "",
        "child_ranges": [
            "(line 2259,col 5)-(line 2259,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies6()",
        "snippet": "  public void testBadModifies6() throws Exception {\n    parse(\"@modifies {this} \\n * @modifies {this} */\",\n        \"conflicting @modifies tag\");\n  }\n",
        "begin_line": 2262,
        "end_line": 2265,
        "comment": "",
        "child_ranges": [
            "(line 2263,col 5)-(line 2264,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies7()",
        "snippet": "  public void testBadModifies7() throws Exception {\n    parse(\"@modifies {impossible} */\",\n          \"unknown @modifies parameter: impossible\");\n  }\n",
        "begin_line": 2267,
        "end_line": 2270,
        "comment": "",
        "child_ranges": [
            "(line 2268,col 5)-(line 2269,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies8()",
        "snippet": "  public void testBadModifies8() throws Exception {\n    parse(\"@modifies {this}\\n\"\n        + \"@nosideeffects */\", \"conflicting @nosideeffects tag\");\n  }\n",
        "begin_line": 2272,
        "end_line": 2275,
        "comment": "",
        "child_ranges": [
            "(line 2273,col 5)-(line 2274,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies9()",
        "snippet": "  public void testBadModifies9() throws Exception {\n    parse(\"@nosideeffects\\n\"\n        + \"@modifies {this} */\", \"conflicting @modifies tag\");\n  }\n",
        "begin_line": 2277,
        "end_line": 2280,
        "comment": "",
        "child_ranges": [
            "(line 2278,col 5)-(line 2279,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewSingleLine()",
        "snippet": "  public void testFileOverviewSingleLine() throws Exception {\n    JSDocInfo jsdoc = parseFileOverview(\"@fileoverview Hi mom! */\");\n    assertEquals(\"Hi mom!\", jsdoc.getFileOverview());\n  }\n",
        "begin_line": 2288,
        "end_line": 2291,
        "comment": "",
        "child_ranges": [
            "(line 2289,col 5)-(line 2289,col 68)",
            "(line 2290,col 5)-(line 2290,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewMultiLine()",
        "snippet": "  public void testFileOverviewMultiLine() throws Exception {\n    JSDocInfo jsdoc = parseFileOverview(\"@fileoverview Pie is \\n * good! */\");\n    assertEquals(\"Pie is\\n good!\", jsdoc.getFileOverview());\n  }\n",
        "begin_line": 2293,
        "end_line": 2296,
        "comment": "",
        "child_ranges": [
            "(line 2294,col 5)-(line 2294,col 78)",
            "(line 2295,col 5)-(line 2295,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewDuplicate()",
        "snippet": "  public void testFileOverviewDuplicate() throws Exception {\n    parseFileOverview(\n        \"@fileoverview Pie \\n * @fileoverview Cake */\",\n        \"extra @fileoverview tag\");\n  }\n",
        "begin_line": 2298,
        "end_line": 2302,
        "comment": "",
        "child_ranges": [
            "(line 2299,col 5)-(line 2301,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testReferences()",
        "snippet": "  public void testReferences() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@see A cool place!\"\n                + \"\\n* @see The world.\"\n                + \"\\n* @see SomeClass#SomeMember\"\n                + \"\\n* @see A boring test case*/\"\n                , true);\n\n    Collection<String> references = jsdoc.getReferences();\n\n    assertTrue(references != null);\n    assertTrue(references.size() == 4);\n\n    assertContains(references, \"A cool place!\");\n    assertContains(references, \"The world.\");\n    assertContains(references, \"SomeClass#SomeMember\");\n    assertContains(references, \"A boring test case\");\n  }\n",
        "begin_line": 2304,
        "end_line": 2321,
        "comment": "",
        "child_ranges": [
            "(line 2305,col 5)-(line 2310,col 24)",
            "(line 2312,col 5)-(line 2312,col 58)",
            "(line 2314,col 5)-(line 2314,col 35)",
            "(line 2315,col 5)-(line 2315,col 39)",
            "(line 2317,col 5)-(line 2317,col 48)",
            "(line 2318,col 5)-(line 2318,col 45)",
            "(line 2319,col 5)-(line 2319,col 55)",
            "(line 2320,col 5)-(line 2320,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSingleTags()",
        "snippet": "  public void testSingleTags() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@version Some old version\"\n                + \"\\n* @deprecated In favor of the new one!\"\n                + \"\\n* @return {SomeType} The most important object :-)*/\"\n                , true);\n\n    assertTrue(jsdoc.isDeprecated());\n    assertEquals(\"In favor of the new one!\", jsdoc.getDeprecationReason());\n    assertEquals(\"Some old version\", jsdoc.getVersion());\n    assertEquals(\"The most important object :-)\", jsdoc.getReturnDescription());\n  }\n",
        "begin_line": 2323,
        "end_line": 2334,
        "comment": "",
        "child_ranges": [
            "(line 2324,col 5)-(line 2328,col 24)",
            "(line 2330,col 5)-(line 2330,col 37)",
            "(line 2331,col 5)-(line 2331,col 75)",
            "(line 2332,col 5)-(line 2332,col 57)",
            "(line 2333,col 5)-(line 2333,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSingleTags2()",
        "snippet": "  public void testSingleTags2() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \"@param {SomeType} a The most important object :-)*/\", true);\n\n    assertEquals(\"The most important object :-)\",\n        jsdoc.getDescriptionForParameter(\"a\"));\n  }\n",
        "begin_line": 2336,
        "end_line": 2342,
        "comment": "",
        "child_ranges": [
            "(line 2337,col 5)-(line 2338,col 69)",
            "(line 2340,col 5)-(line 2341,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSingleTagsReordered()",
        "snippet": "  public void testSingleTagsReordered() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@deprecated In favor of the new one!\"\n                + \"\\n * @return {SomeType} The most important object :-)\"\n                + \"\\n * @version Some old version*/\"\n                , true);\n\n    assertTrue(jsdoc.isDeprecated());\n    assertEquals(\"In favor of the new one!\", jsdoc.getDeprecationReason());\n    assertEquals(\"Some old version\", jsdoc.getVersion());\n    assertEquals(\"The most important object :-)\", jsdoc.getReturnDescription());\n  }\n",
        "begin_line": 2344,
        "end_line": 2355,
        "comment": "",
        "child_ranges": [
            "(line 2345,col 5)-(line 2349,col 24)",
            "(line 2351,col 5)-(line 2351,col 37)",
            "(line 2352,col 5)-(line 2352,col 75)",
            "(line 2353,col 5)-(line 2353,col 57)",
            "(line 2354,col 5)-(line 2354,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testVersionDuplication()",
        "snippet": "  public void testVersionDuplication() throws Exception {\n    parse(\"* @version Some old version\"\n          + \"\\n* @version Another version*/\", true,\n          \"conflicting @version tag\");\n  }\n",
        "begin_line": 2357,
        "end_line": 2361,
        "comment": "",
        "child_ranges": [
            "(line 2358,col 5)-(line 2360,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testVersionMissing()",
        "snippet": "  public void testVersionMissing() throws Exception {\n    parse(\"* @version */\", true,\n          \"@version tag missing version information\");\n  }\n",
        "begin_line": 2363,
        "end_line": 2366,
        "comment": "",
        "child_ranges": [
            "(line 2364,col 5)-(line 2365,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testAuthorMissing()",
        "snippet": "  public void testAuthorMissing() throws Exception {\n    parse(\"* @author */\", true,\n          \"@author tag missing author\");\n  }\n",
        "begin_line": 2368,
        "end_line": 2371,
        "comment": "",
        "child_ranges": [
            "(line 2369,col 5)-(line 2370,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSeeMissing()",
        "snippet": "  public void testSeeMissing() throws Exception {\n    parse(\"* @see */\", true,\n          \"@see tag missing description\");\n  }\n",
        "begin_line": 2373,
        "end_line": 2376,
        "comment": "",
        "child_ranges": [
            "(line 2374,col 5)-(line 2375,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSourceName()",
        "snippet": "  public void testSourceName() throws Exception {\n    JSDocInfo jsdoc = parse(\"@deprecated */\", true);\n    assertEquals(\"testcode\", jsdoc.getAssociatedNode().getSourceFileName());\n  }\n",
        "begin_line": 2378,
        "end_line": 2381,
        "comment": "",
        "child_ranges": [
            "(line 2379,col 5)-(line 2379,col 52)",
            "(line 2380,col 5)-(line 2380,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment()",
        "snippet": "  public void testParseBlockComment() throws Exception {\n    JSDocInfo jsdoc = parse(\"this is a nice comment\\n \"\n                            + \"* that is multiline \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"this is a nice comment\\nthat is multiline\",\n                 jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2383,
        "end_line": 2394,
        "comment": "",
        "child_ranges": [
            "(line 2384,col 5)-(line 2386,col 67)",
            "(line 2388,col 5)-(line 2389,col 46)",
            "(line 2391,col 5)-(line 2393,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment2()",
        "snippet": "  public void testParseBlockComment2() throws Exception {\n    JSDocInfo jsdoc = parse(\"this is a nice comment\\n \"\n                            + \"* that is *** multiline \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"this is a nice comment\\nthat is *** multiline\",\n                 jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2396,
        "end_line": 2407,
        "comment": "",
        "child_ranges": [
            "(line 2397,col 5)-(line 2399,col 67)",
            "(line 2401,col 5)-(line 2402,col 46)",
            "(line 2404,col 5)-(line 2406,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment3()",
        "snippet": "  public void testParseBlockComment3() throws Exception {\n    JSDocInfo jsdoc = parse(\"\\n \"\n                            + \"* hello world \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"hello world\", jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2409,
        "end_line": 2419,
        "comment": "",
        "child_ranges": [
            "(line 2410,col 5)-(line 2412,col 67)",
            "(line 2414,col 5)-(line 2414,col 61)",
            "(line 2416,col 5)-(line 2418,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers1()",
        "snippet": "  public void testParseWithMarkers1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@author abc@google.com */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 0, 0),\n        \"abc@google.com\", 7, 0, 21);\n  }\n",
        "begin_line": 2421,
        "end_line": 2427,
        "comment": "",
        "child_ranges": [
            "(line 2422,col 5)-(line 2422,col 63)",
            "(line 2424,col 5)-(line 2426,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers2()",
        "snippet": "  public void testParseWithMarkers2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {Foo} somename abc@google.com */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"abc@google.com\", 21, 0, 37);\n  }\n",
        "begin_line": 2429,
        "end_line": 2435,
        "comment": "",
        "child_ranges": [
            "(line 2430,col 5)-(line 2430,col 77)",
            "(line 2432,col 5)-(line 2434,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers3()",
        "snippet": "  public void testParseWithMarkers3() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@return {Foo} some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    JSDocInfo.Marker returnDoc =\n        assertAnnotationMarker(jsdoc, \"return\", 0, 0);\n    assertDocumentationInMarker(returnDoc,\n        \"some long multiline description\", 14, 2, 15);\n    assertEquals(8, returnDoc.getType().getPositionOnStartLine());\n    assertEquals(12, returnDoc.getType().getPositionOnEndLine());\n  }\n",
        "begin_line": 2437,
        "end_line": 2448,
        "comment": "",
        "child_ranges": [
            "(line 2438,col 5)-(line 2440,col 44)",
            "(line 2442,col 5)-(line 2443,col 54)",
            "(line 2444,col 5)-(line 2445,col 54)",
            "(line 2446,col 5)-(line 2446,col 66)",
            "(line 2447,col 5)-(line 2447,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers4()",
        "snippet": "  public void testParseWithMarkers4() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@author foobar \\n * @param {Foo} somename abc@google.com */\",\n              true);\n\n    assertAnnotationMarker(jsdoc, \"author\", 0, 0);\n    assertAnnotationMarker(jsdoc, \"param\", 1, 3);\n  }\n",
        "begin_line": 2450,
        "end_line": 2457,
        "comment": "",
        "child_ranges": [
            "(line 2451,col 5)-(line 2453,col 20)",
            "(line 2455,col 5)-(line 2455,col 50)",
            "(line 2456,col 5)-(line 2456,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers5()",
        "snippet": "  public void testParseWithMarkers5() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@return some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"return\", 0, 0),\n        \"some long multiline description\", 8, 2, 15);\n  }\n",
        "begin_line": 2459,
        "end_line": 2467,
        "comment": "",
        "child_ranges": [
            "(line 2460,col 5)-(line 2462,col 44)",
            "(line 2464,col 5)-(line 2466,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers6()",
        "snippet": "  public void testParseWithMarkers6() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@param x some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"some long multiline description\", 8, 2, 15);\n  }\n",
        "begin_line": 2469,
        "end_line": 2477,
        "comment": "",
        "child_ranges": [
            "(line 2470,col 5)-(line 2472,col 44)",
            "(line 2474,col 5)-(line 2476,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames1()",
        "snippet": "  public void testParseWithMarkerNames1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {SomeType} name somedescription */\", true);\n\n    assertNameInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"name\", 0, 18);\n  }\n",
        "begin_line": 2479,
        "end_line": 2485,
        "comment": "",
        "child_ranges": [
            "(line 2480,col 5)-(line 2480,col 79)",
            "(line 2482,col 5)-(line 2484,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames2()",
        "snippet": "  public void testParseWithMarkerNames2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {SomeType} name somedescription \\n\" +\n                            \"* @param {AnotherType} anothername des */\", true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 0, 0, 0),\n            \"name\", 0, 18),\n        \"SomeType\", 0, 7, 0, 16, true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 1, 2, 1),\n            \"anothername\", 1, 23),\n        \"AnotherType\", 1, 9, 1, 21, true);\n  }\n",
        "begin_line": 2487,
        "end_line": 2502,
        "comment": "",
        "child_ranges": [
            "(line 2488,col 5)-(line 2489,col 79)",
            "(line 2491,col 5)-(line 2495,col 39)",
            "(line 2497,col 5)-(line 2501,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames3()",
        "snippet": "  public void testParseWithMarkerNames3() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \"@param {Some.Long.Type.\\n *  Name} name somedescription */\", true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 0, 0, 0),\n            \"name\", 1, 10),\n        \"Some.Long.Type.Name\", 0, 7, 1, 8, true);\n  }\n",
        "begin_line": 2504,
        "end_line": 2513,
        "comment": "",
        "child_ranges": [
            "(line 2505,col 5)-(line 2506,col 76)",
            "(line 2508,col 5)-(line 2512,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithoutMarkerName()",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  public void testParseWithoutMarkerName() throws Exception {\n    JSDocInfo jsdoc = parse(\"@author helloworld*/\", true);\n    assertNull(assertAnnotationMarker(jsdoc, \"author\", 0, 0).getName());\n  }\n",
        "begin_line": 2515,
        "end_line": 2519,
        "comment": "",
        "child_ranges": [
            "(line 2517,col 5)-(line 2517,col 58)",
            "(line 2518,col 5)-(line 2518,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerType()",
        "snippet": "  public void testParseWithMarkerType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@extends {FooBar}*/\", true);\n\n    assertTypeInMarker(\n        assertAnnotationMarker(jsdoc, \"extends\", 0, 0),\n        \"FooBar\", 0, 9, 0, 16, true);\n  }\n",
        "begin_line": 2521,
        "end_line": 2527,
        "comment": "",
        "child_ranges": [
            "(line 2522,col 5)-(line 2522,col 57)",
            "(line 2524,col 5)-(line 2526,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerType2()",
        "snippet": "  public void testParseWithMarkerType2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@extends FooBar*/\", true);\n\n    assertTypeInMarker(\n        assertAnnotationMarker(jsdoc, \"extends\", 0, 0),\n        \"FooBar\", 0, 9, 0, 15, false);\n  }\n",
        "begin_line": 2529,
        "end_line": 2535,
        "comment": "",
        "child_ranges": [
            "(line 2530,col 5)-(line 2530,col 55)",
            "(line 2532,col 5)-(line 2534,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict1()",
        "snippet": "  public void testTypeTagConflict1() throws Exception {\n    parse(\"@constructor \\n * @constructor */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2537,
        "end_line": 2541,
        "comment": "",
        "child_ranges": [
            "(line 2538,col 5)-(line 2540,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict2()",
        "snippet": "  public void testTypeTagConflict2() throws Exception {\n    parse(\"@interface \\n * @interface */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2543,
        "end_line": 2547,
        "comment": "",
        "child_ranges": [
            "(line 2544,col 5)-(line 2546,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict3()",
        "snippet": "  public void testTypeTagConflict3() throws Exception {\n    parse(\"@constructor \\n * @interface */\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n  }\n",
        "begin_line": 2549,
        "end_line": 2552,
        "comment": "",
        "child_ranges": [
            "(line 2550,col 5)-(line 2551,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict4()",
        "snippet": "  public void testTypeTagConflict4() throws Exception {\n    parse(\"@interface \\n * @constructor */\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n  }\n",
        "begin_line": 2554,
        "end_line": 2557,
        "comment": "",
        "child_ranges": [
            "(line 2555,col 5)-(line 2556,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict5()",
        "snippet": "  public void testTypeTagConflict5() throws Exception {\n    parse(\"@interface \\n * @type {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2559,
        "end_line": 2563,
        "comment": "",
        "child_ranges": [
            "(line 2560,col 5)-(line 2562,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict6()",
        "snippet": "  public void testTypeTagConflict6() throws Exception {\n    parse(\"@typedef {string} \\n * @type {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2565,
        "end_line": 2569,
        "comment": "",
        "child_ranges": [
            "(line 2566,col 5)-(line 2568,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict7()",
        "snippet": "  public void testTypeTagConflict7() throws Exception {\n    parse(\"@typedef {string} \\n * @constructor */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2571,
        "end_line": 2575,
        "comment": "",
        "child_ranges": [
            "(line 2572,col 5)-(line 2574,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict8()",
        "snippet": "  public void testTypeTagConflict8() throws Exception {\n    parse(\"@typedef {string} \\n * @return {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2577,
        "end_line": 2581,
        "comment": "",
        "child_ranges": [
            "(line 2578,col 5)-(line 2580,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict9()",
        "snippet": "  public void testTypeTagConflict9() throws Exception {\n    parse(\"@enum {string} \\n * @return {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2583,
        "end_line": 2587,
        "comment": "",
        "child_ranges": [
            "(line 2584,col 5)-(line 2586,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict10()",
        "snippet": "  public void testTypeTagConflict10() throws Exception {\n    parse(\"@this {Object} \\n * @enum {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2589,
        "end_line": 2593,
        "comment": "",
        "child_ranges": [
            "(line 2590,col 5)-(line 2592,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict11()",
        "snippet": "  public void testTypeTagConflict11() throws Exception {\n    parse(\"@param {Object} x \\n * @type {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2595,
        "end_line": 2599,
        "comment": "",
        "child_ranges": [
            "(line 2596,col 5)-(line 2598,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict12()",
        "snippet": "  public void testTypeTagConflict12() throws Exception {\n    parse(\"@typedef {boolean} \\n * @param {Object} x */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2601,
        "end_line": 2605,
        "comment": "",
        "child_ranges": [
            "(line 2602,col 5)-(line 2604,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict13()",
        "snippet": "  public void testTypeTagConflict13() throws Exception {\n    parse(\"@typedef {boolean} \\n * @extends {Object} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2607,
        "end_line": 2611,
        "comment": "",
        "child_ranges": [
            "(line 2608,col 5)-(line 2610,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict14()",
        "snippet": "  public void testTypeTagConflict14() throws Exception {\n    parse(\"@return x \\n * @return y */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2613,
        "end_line": 2617,
        "comment": "",
        "child_ranges": [
            "(line 2614,col 5)-(line 2616,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict15()",
        "snippet": "  public void testTypeTagConflict15() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @struct\\n\" +\n          \" * @struct\\n\" +\n          \" */\\n\" +\n          \"function StrStr() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2619,
        "end_line": 2627,
        "comment": "",
        "child_ranges": [
            "(line 2620,col 5)-(line 2626,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict16()",
        "snippet": "  public void testTypeTagConflict16() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @struct\\n\" +\n          \" * @interface\\n\" +\n          \" */\\n\" +\n          \"function StrIntf() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2629,
        "end_line": 2637,
        "comment": "",
        "child_ranges": [
            "(line 2630,col 5)-(line 2636,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict17()",
        "snippet": "  public void testTypeTagConflict17() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @interface\\n\" +\n          \" * @struct\\n\" +\n          \" */\\n\" +\n          \"function StrIntf() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2639,
        "end_line": 2647,
        "comment": "",
        "child_ranges": [
            "(line 2640,col 5)-(line 2646,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict18()",
        "snippet": "  public void testTypeTagConflict18() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @dict\\n\" +\n          \" * @dict\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2649,
        "end_line": 2657,
        "comment": "",
        "child_ranges": [
            "(line 2650,col 5)-(line 2656,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict19()",
        "snippet": "  public void testTypeTagConflict19() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @dict\\n\" +\n          \" * @interface\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2659,
        "end_line": 2667,
        "comment": "",
        "child_ranges": [
            "(line 2660,col 5)-(line 2666,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict20()",
        "snippet": "  public void testTypeTagConflict20() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @interface\\n\" +\n          \" * @dict\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2669,
        "end_line": 2677,
        "comment": "",
        "child_ranges": [
            "(line 2670,col 5)-(line 2676,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict21()",
        "snippet": "  public void testTypeTagConflict21() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @private {string}\\n\" +\n          \" * @type {number}\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2679,
        "end_line": 2687,
        "comment": "",
        "child_ranges": [
            "(line 2680,col 5)-(line 2686,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict22()",
        "snippet": "  public void testTypeTagConflict22() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @protected {string}\\n\" +\n          \" * @param {string} x\\n\" +\n          \" */\\n\" +\n          \"function DictDict(x) {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2689,
        "end_line": 2697,
        "comment": "",
        "child_ranges": [
            "(line 2690,col 5)-(line 2696,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict23()",
        "snippet": "  public void testTypeTagConflict23() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @public {string}\\n\" +\n          \" * @return {string} x\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2699,
        "end_line": 2707,
        "comment": "",
        "child_ranges": [
            "(line 2700,col 5)-(line 2706,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict24()",
        "snippet": "  public void testTypeTagConflict24() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @const {string}\\n\" +\n          \" * @return {string} x\\n\" +\n          \" */\\n\" +\n          \"function DictDict() {}\",\n          \"Bad type annotation. \" +\n          \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2709,
        "end_line": 2717,
        "comment": "",
        "child_ranges": [
            "(line 2710,col 5)-(line 2716,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testPrivateType()",
        "snippet": "  public void testPrivateType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@private {string} */\");\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n  }\n",
        "begin_line": 2719,
        "end_line": 2722,
        "comment": "",
        "child_ranges": [
            "(line 2720,col 5)-(line 2720,col 52)",
            "(line 2721,col 5)-(line 2721,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testProtectedType()",
        "snippet": "  public void testProtectedType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@protected {string} */\");\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n  }\n",
        "begin_line": 2724,
        "end_line": 2727,
        "comment": "",
        "child_ranges": [
            "(line 2725,col 5)-(line 2725,col 54)",
            "(line 2726,col 5)-(line 2726,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testPublicType()",
        "snippet": "  public void testPublicType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@public {string} */\");\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n  }\n",
        "begin_line": 2729,
        "end_line": 2732,
        "comment": "",
        "child_ranges": [
            "(line 2730,col 5)-(line 2730,col 51)",
            "(line 2731,col 5)-(line 2731,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testConstType()",
        "snippet": "  public void testConstType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@const {string} */\");\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n  }\n",
        "begin_line": 2734,
        "end_line": 2737,
        "comment": "",
        "child_ranges": [
            "(line 2735,col 5)-(line 2735,col 50)",
            "(line 2736,col 5)-(line 2736,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStableIdGeneratorConflict()",
        "snippet": "  public void testStableIdGeneratorConflict() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @stableIdGenerator\\n\" +\n          \" * @stableIdGenerator\\n\" +\n          \" */\\n\" +\n          \"function getId() {}\",\n          \"extra @stableIdGenerator tag\");\n  }\n",
        "begin_line": 2739,
        "end_line": 2746,
        "comment": "",
        "child_ranges": [
            "(line 2740,col 5)-(line 2745,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIdGenerator()",
        "snippet": "  public void testIdGenerator() throws Exception {\n    JSDocInfo info = parse(\"/**\\n\" +\n          \" * @idGenerator\\n\" +\n          \" */\\n\" +\n          \"function getId() {}\");\n    assertTrue(info.isIdGenerator());\n  }\n",
        "begin_line": 2748,
        "end_line": 2754,
        "comment": "",
        "child_ranges": [
            "(line 2749,col 5)-(line 2752,col 33)",
            "(line 2753,col 5)-(line 2753,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIdGeneratorConflict()",
        "snippet": "  public void testIdGeneratorConflict() throws Exception {\n    parse(\"/**\\n\" +\n          \" * @idGenerator\\n\" +\n          \" * @idGenerator\\n\" +\n          \" */\\n\" +\n          \"function getId() {}\",\n          \"extra @idGenerator tag\");\n  }\n",
        "begin_line": 2756,
        "end_line": 2763,
        "comment": "",
        "child_ranges": [
            "(line 2757,col 5)-(line 2762,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIdGenerator1()",
        "snippet": "  public void testIdGenerator1() throws Exception {\n    JSDocInfo info = parse(\"@idGenerator {unique} */\");\n    assertTrue(info.isIdGenerator());\n  }\n",
        "begin_line": 2765,
        "end_line": 2768,
        "comment": "",
        "child_ranges": [
            "(line 2766,col 5)-(line 2766,col 55)",
            "(line 2767,col 5)-(line 2767,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIdGenerator2()",
        "snippet": "  public void testIdGenerator2() throws Exception {\n    JSDocInfo info = parse(\"@idGenerator {consistent} */\");\n    assertTrue(info.isConsistentIdGenerator());\n  }\n",
        "begin_line": 2770,
        "end_line": 2773,
        "comment": "",
        "child_ranges": [
            "(line 2771,col 5)-(line 2771,col 59)",
            "(line 2772,col 5)-(line 2772,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIdGenerator3()",
        "snippet": "  public void testIdGenerator3() throws Exception {\n    JSDocInfo info = parse(\"@idGenerator {stable} */\");\n    assertTrue(info.isStableIdGenerator());\n  }\n",
        "begin_line": 2775,
        "end_line": 2778,
        "comment": "",
        "child_ranges": [
            "(line 2776,col 5)-(line 2776,col 55)",
            "(line 2777,col 5)-(line 2777,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIdGenerator4()",
        "snippet": "  public void testIdGenerator4() throws Exception {\n    JSDocInfo info = parse(\"@idGenerator {mapped} */\");\n    assertTrue(info.isMappedIdGenerator());\n  }\n",
        "begin_line": 2780,
        "end_line": 2783,
        "comment": "",
        "child_ranges": [
            "(line 2781,col 5)-(line 2781,col 55)",
            "(line 2782,col 5)-(line 2782,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadIdGenerator1()",
        "snippet": "  public void testBadIdGenerator1() throws Exception {\n    parse(\"@idGenerator {} */\", \"malformed @idGenerator tag\");\n  }\n",
        "begin_line": 2785,
        "end_line": 2787,
        "comment": "",
        "child_ranges": [
            "(line 2786,col 5)-(line 2786,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadIdGenerator2()",
        "snippet": "  public void testBadIdGenerator2() throws Exception {\n    parse(\"@idGenerator {impossible} */\",\n        \"unknown @idGenerator parameter: impossible\");\n  }\n",
        "begin_line": 2789,
        "end_line": 2792,
        "comment": "",
        "child_ranges": [
            "(line 2790,col 5)-(line 2791,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadIdGenerator3()",
        "snippet": "  public void testBadIdGenerator3() throws Exception {\n    parse(\"@idGenerator {unique */\", \"malformed @idGenerator tag\");\n  }\n",
        "begin_line": 2794,
        "end_line": 2796,
        "comment": "",
        "child_ranges": [
            "(line 2795,col 5)-(line 2795,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTemplateTypeNameMissing()",
        "snippet": "  public void testParserWithTemplateTypeNameMissing() {\n    parse(\"@template */\",\n        \"Bad type annotation. @template tag missing type name\");\n  }\n",
        "begin_line": 2798,
        "end_line": 2801,
        "comment": "",
        "child_ranges": [
            "(line 2799,col 5)-(line 2800,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTemplateDuplicated()",
        "snippet": "  public void testParserWithTemplateDuplicated() {\n    parse(\"@template T\\n@template V */\",\n        \"Bad type annotation. @template tag at most once\");\n  }\n",
        "begin_line": 2803,
        "end_line": 2806,
        "comment": "",
        "child_ranges": [
            "(line 2804,col 5)-(line 2805,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTwoTemplates()",
        "snippet": "  public void testParserWithTwoTemplates() {\n    parse(\"@template T,V */\");\n  }\n",
        "begin_line": 2808,
        "end_line": 2810,
        "comment": "",
        "child_ranges": [
            "(line 2809,col 5)-(line 2809,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedNewAnnotations()",
        "snippet": "  public void testWhitelistedNewAnnotations() {\n    parse(\"@foobar */\",\n        \"illegal use of unknown JSDoc tag \\\"foobar\\\"; ignoring it\");\n    extraAnnotations.add(\"foobar\");\n    parse(\"@foobar */\");\n  }\n",
        "begin_line": 2812,
        "end_line": 2817,
        "comment": "",
        "child_ranges": [
            "(line 2813,col 5)-(line 2814,col 68)",
            "(line 2815,col 5)-(line 2815,col 35)",
            "(line 2816,col 5)-(line 2816,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedConflictingAnnotation()",
        "snippet": "  public void testWhitelistedConflictingAnnotation() {\n    extraAnnotations.add(\"param\");\n    JSDocInfo info = parse(\"@param {number} index */\");\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 2819,
        "end_line": 2823,
        "comment": "",
        "child_ranges": [
            "(line 2820,col 5)-(line 2820,col 34)",
            "(line 2821,col 5)-(line 2821,col 55)",
            "(line 2822,col 5)-(line 2822,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testNonIdentifierAnnotation()",
        "snippet": "  public void testNonIdentifierAnnotation() {\n    // Try to whitelist an annotation that is not a valid JS identifier.\n    // It should not work.\n    extraAnnotations.add(\"123\");\n    parse(\"@123 */\", \"illegal use of unknown JSDoc tag \\\"\\\"; ignoring it\");\n  }\n",
        "begin_line": 2825,
        "end_line": 2830,
        "comment": "",
        "child_ranges": [
            "(line 2828,col 5)-(line 2828,col 32)",
            "(line 2829,col 5)-(line 2829,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testUnsupportedJsDocSyntax1()",
        "snippet": "  public void testUnsupportedJsDocSyntax1() {\n    JSDocInfo info =\n        parse(\"@param {string} [accessLevel=\\\"author\\\"] The user level */\",\n            true);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"accessLevel\"));\n    assertEquals(\"The user level\",\n        info.getDescriptionForParameter(\"accessLevel\"));\n  }\n",
        "begin_line": 2832,
        "end_line": 2842,
        "comment": "",
        "child_ranges": [
            "(line 2833,col 5)-(line 2835,col 18)",
            "(line 2836,col 5)-(line 2836,col 46)",
            "(line 2837,col 5)-(line 2839,col 46)",
            "(line 2840,col 5)-(line 2841,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testUnsupportedJsDocSyntax2()",
        "snippet": "  public void testUnsupportedJsDocSyntax2() {\n    JSDocInfo info =\n        parse(\"@param userInfo The user info. \\n\" +\n              \" * @param userInfo.name The name of the user */\", true);\n    assertEquals(1, info.getParameterCount());\n    assertEquals(\"The user info.\",\n        info.getDescriptionForParameter(\"userInfo\"));\n  }\n",
        "begin_line": 2844,
        "end_line": 2851,
        "comment": "",
        "child_ranges": [
            "(line 2845,col 5)-(line 2847,col 71)",
            "(line 2848,col 5)-(line 2848,col 46)",
            "(line 2849,col 5)-(line 2850,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedAnnotations()",
        "snippet": "  public void testWhitelistedAnnotations() {\n    parse(\n      \"* @addon \\n\" +\n      \"* @augments \\n\" +\n      \"* @base \\n\" +\n      \"* @borrows \\n\" +\n      \"* @bug \\n\" +\n      \"* @class \\n\" +\n      \"* @config \\n\" +\n      \"* @constructs \\n\" +\n      \"* @default \\n\" +\n      \"* @description \\n\" +\n      \"* @enhance \\n\" +\n      \"* @enhanceable \\n\" +\n      \"* @event \\n\" +\n      \"* @example \\n\" +\n      \"* @exception \\n\" +\n      \"* @exec \\n\" +\n      \"* @externs \\n\" +\n      \"* @field \\n\" +\n      \"* @function \\n\" +\n      \"* @hassoydelcall \\n\" +\n      \"* @hassoydeltemplate \\n\" +\n      \"* @id \\n\" +\n      \"* @ignore \\n\" +\n      \"* @inner \\n\" +\n      \"* @jaggerInject \\n\" +\n      \"* @jaggerModule \\n\" +\n      \"* @jaggerProvide \\n\" +\n      \"* @lends {string} \\n\" +\n      \"* @link \\n\" +\n      \"* @member \\n\" +\n      \"* @memberOf \\n\" +\n      \"* @modName \\n\" +\n      \"* @mods \\n\" +\n      \"* @name \\n\" +\n      \"* @namespace \\n\" +\n      \"* @ngInject \\n\" +\n      \"* @nocompile \\n\" +\n      \"* @property \\n\" +\n      \"* @requirecss \\n\" +\n      \"* @requires \\n\" +\n      \"* @since \\n\" +\n      \"* @static \\n\" +\n      \"* @supported\\n\" +\n      \"* @wizaction \\n\" +\n      \"* @wizmodule \\n\" +\n      \"*/\");\n  }\n",
        "begin_line": 2853,
        "end_line": 2901,
        "comment": "",
        "child_ranges": [
            "(line 2854,col 5)-(line 2900,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testJsDocInfoPosition()",
        "snippet": "  public void testJsDocInfoPosition() throws IOException {\n    SourceFile sourceFile = SourceFile.fromCode(\"comment-position-test.js\",\n        \"   \\n\" +\n        \"  /**\\n\" +\n        \"   * A comment\\n\" +\n        \"   */\\n\" +\n        \"  function double(x) {}\");\n    List<JSDocInfo> jsdocs = parseFull(sourceFile.getCode());\n    assertEquals(1, jsdocs.size());\n    assertEquals(6, jsdocs.get(0).getOriginalCommentPosition());\n    assertEquals(2, sourceFile.getLineOfOffset(jsdocs.get(0).getOriginalCommentPosition()));\n    assertEquals(2, sourceFile.getColumnOfOffset(jsdocs.get(0).getOriginalCommentPosition()));\n  }\n",
        "begin_line": 2903,
        "end_line": 2915,
        "comment": "",
        "child_ranges": [
            "(line 2904,col 5)-(line 2909,col 35)",
            "(line 2910,col 5)-(line 2910,col 61)",
            "(line 2911,col 5)-(line 2911,col 35)",
            "(line 2912,col 5)-(line 2912,col 64)",
            "(line 2913,col 5)-(line 2913,col 92)",
            "(line 2914,col 5)-(line 2914,col 94)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testGetOriginalCommentString()",
        "snippet": "  public void testGetOriginalCommentString() throws Exception {\n    String comment = \"* @desc This is a comment */\";\n    JSDocInfo info = parse(comment);\n    assertNull(info.getOriginalCommentString());\n    info = parse(comment, true /* parseDocumentation */);\n    assertEquals(comment, info.getOriginalCommentString());\n  }\n",
        "begin_line": 2917,
        "end_line": 2923,
        "comment": "",
        "child_ranges": [
            "(line 2918,col 5)-(line 2918,col 52)",
            "(line 2919,col 5)-(line 2919,col 36)",
            "(line 2920,col 5)-(line 2920,col 48)",
            "(line 2921,col 5)-(line 2921,col 57)",
            "(line 2922,col 5)-(line 2922,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNgInject1()",
        "snippet": "  public void testParseNgInject1() throws Exception {\n    assertTrue(parse(\"@ngInject*/\").isNgInject());\n  }\n",
        "begin_line": 2925,
        "end_line": 2927,
        "comment": "",
        "child_ranges": [
            "(line 2926,col 5)-(line 2926,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNgInject2()",
        "snippet": "  public void testParseNgInject2() throws Exception {\n    parse(\"@ngInject \\n@ngInject*/\", \"extra @ngInject tag\");\n  }\n",
        "begin_line": 2929,
        "end_line": 2931,
        "comment": "",
        "child_ranges": [
            "(line 2930,col 5)-(line 2930,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJaggerInject()",
        "snippet": "  public void testParseJaggerInject() throws Exception {\n    assertTrue(parse(\"@jaggerInject*/\").isJaggerInject());\n  }\n",
        "begin_line": 2933,
        "end_line": 2935,
        "comment": "",
        "child_ranges": [
            "(line 2934,col 5)-(line 2934,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJaggerInjectExtra()",
        "snippet": "  public void testParseJaggerInjectExtra() throws Exception {\n    parse(\"@jaggerInject \\n@jaggerInject*/\", \"extra @jaggerInject tag\");\n  }\n",
        "begin_line": 2937,
        "end_line": 2939,
        "comment": "",
        "child_ranges": [
            "(line 2938,col 5)-(line 2938,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJaggerModule()",
        "snippet": "  public void testParseJaggerModule() throws Exception {\n    assertTrue(parse(\"@jaggerModule*/\").isJaggerModule());\n  }\n",
        "begin_line": 2941,
        "end_line": 2943,
        "comment": "",
        "child_ranges": [
            "(line 2942,col 5)-(line 2942,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJaggerModuleExtra()",
        "snippet": "  public void testParseJaggerModuleExtra() throws Exception {\n    parse(\"@jaggerModule \\n@jaggerModule*/\", \"extra @jaggerModule tag\");\n  }\n",
        "begin_line": 2945,
        "end_line": 2947,
        "comment": "",
        "child_ranges": [
            "(line 2946,col 5)-(line 2946,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJaggerProvide()",
        "snippet": "  public void testParseJaggerProvide() throws Exception {\n    assertTrue(parse(\"@jaggerProvide*/\").isJaggerProvide());\n  }\n",
        "begin_line": 2949,
        "end_line": 2951,
        "comment": "",
        "child_ranges": [
            "(line 2950,col 5)-(line 2950,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJaggerProvideExtra()",
        "snippet": "  public void testParseJaggerProvideExtra() throws Exception {\n    parse(\"@jaggerProvide \\n@jaggerProvide*/\", \"extra @jaggerProvide tag\");\n  }\n",
        "begin_line": 2953,
        "end_line": 2955,
        "comment": "",
        "child_ranges": [
            "(line 2954,col 5)-(line 2954,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWizaction1()",
        "snippet": "  public void testParseWizaction1() throws Exception {\n    assertTrue(parse(\"@wizaction*/\").isWizaction());\n  }\n",
        "begin_line": 2957,
        "end_line": 2959,
        "comment": "",
        "child_ranges": [
            "(line 2958,col 5)-(line 2958,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWizaction2()",
        "snippet": "  public void testParseWizaction2() throws Exception {\n    parse(\"@wizaction \\n@wizaction*/\", \"extra @wizaction tag\");\n  }\n",
        "begin_line": 2961,
        "end_line": 2963,
        "comment": "",
        "child_ranges": [
            "(line 2962,col 5)-(line 2962,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDisposes1()",
        "snippet": "  public void testParseDisposes1() throws Exception {\n    assertTrue(parse(\"@param x \\n * @disposes x */\").isDisposes());\n  }\n",
        "begin_line": 2965,
        "end_line": 2967,
        "comment": "",
        "child_ranges": [
            "(line 2966,col 5)-(line 2966,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDisposes2()",
        "snippet": "  public void testParseDisposes2() throws Exception {\n    parse(\"@param x \\n * @disposes */\",\n        true, \"Bad type annotation. @disposes tag missing parameter name\");\n  }\n",
        "begin_line": 2969,
        "end_line": 2972,
        "comment": "",
        "child_ranges": [
            "(line 2970,col 5)-(line 2971,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDisposes3()",
        "snippet": "  public void testParseDisposes3() throws Exception {\n    assertTrue(parse(\"@param x \\n @param y\\n * @disposes x, y */\").isDisposes());\n  }\n",
        "begin_line": 2974,
        "end_line": 2976,
        "comment": "",
        "child_ranges": [
            "(line 2975,col 5)-(line 2975,col 81)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDisposesUnknown()",
        "snippet": "  public void testParseDisposesUnknown() throws Exception {\n    parse(\"@param x \\n * @disposes x,y */\",\n        true,\n        \"Bad type annotation. @disposes parameter unknown or parameter specified multiple times\");\n  }\n",
        "begin_line": 2978,
        "end_line": 2982,
        "comment": "",
        "child_ranges": [
            "(line 2979,col 5)-(line 2981,col 98)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDisposesMultiple()",
        "snippet": "  public void testParseDisposesMultiple() throws Exception {\n    parse(\"@param x \\n * @disposes x,x */\",\n        true,\n        \"Bad type annotation. @disposes parameter unknown or parameter specified multiple times\");\n  }\n",
        "begin_line": 2984,
        "end_line": 2988,
        "comment": "",
        "child_ranges": [
            "(line 2985,col 5)-(line 2987,col 98)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDisposesAll1()",
        "snippet": "  public void testParseDisposesAll1() throws Exception {\n    assertTrue(parse(\"@param x \\n * @disposes * */\").isDisposes());\n  }\n",
        "begin_line": 2990,
        "end_line": 2992,
        "comment": "",
        "child_ranges": [
            "(line 2991,col 5)-(line 2991,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDisposesAll2()",
        "snippet": "  public void testParseDisposesAll2() throws Exception {\n    assertTrue(parse(\"@param x \\n * @disposes x,* */\").isDisposes());\n  }\n",
        "begin_line": 2994,
        "end_line": 2996,
        "comment": "",
        "child_ranges": [
            "(line 2995,col 5)-(line 2995,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDisposesAll3()",
        "snippet": "  public void testParseDisposesAll3() throws Exception {\n    parse(\"@param x \\n * @disposes *, * */\",\n        true,\n        \"Bad type annotation. @disposes parameter unknown or parameter specified multiple times\");\n  }\n",
        "begin_line": 2998,
        "end_line": 3002,
        "comment": "",
        "child_ranges": [
            "(line 2999,col 5)-(line 3001,col 98)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTextExtents()",
        "snippet": "  public void testTextExtents() {\n    parse(\"@return {@code foo} bar \\n *    baz. */\",\n        true, \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 3004,
        "end_line": 3007,
        "comment": "",
        "child_ranges": [
            "(line 3005,col 5)-(line 3006,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertDocumentationInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, int, int)",
        "snippet": "  private JSDocInfo.Marker assertDocumentationInMarker(JSDocInfo.Marker marker,\n                                                       String description,\n                                                       int startCharno,\n                                                       int endLineno,\n                                                       int endCharno) {\n    assertTrue(marker.getDescription() != null);\n    assertEquals(description, marker.getDescription().getItem());\n\n    // Match positional information.\n    assertEquals(marker.getAnnotation().getStartLine(),\n                 marker.getDescription().getStartLine());\n    assertEquals(startCharno, marker.getDescription().getPositionOnStartLine());\n    assertEquals(endLineno, marker.getDescription().getEndLine());\n    assertEquals(endCharno, marker.getDescription().getPositionOnEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 3018,
        "end_line": 3034,
        "comment": "\n   * Asserts that a documentation field exists on the given marker.\n   *\n   * @param description The text of the documentation field expected.\n   * @param startCharno The starting character of the text.\n   * @param endLineno The ending line of the text.\n   * @param endCharno The ending character of the text.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 3023,col 5)-(line 3023,col 48)",
            "(line 3024,col 5)-(line 3024,col 65)",
            "(line 3027,col 5)-(line 3028,col 57)",
            "(line 3029,col 5)-(line 3029,col 80)",
            "(line 3030,col 5)-(line 3030,col 66)",
            "(line 3031,col 5)-(line 3031,col 76)",
            "(line 3033,col 5)-(line 3033,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertTypeInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, int, int, int, boolean)",
        "snippet": "  private JSDocInfo.Marker assertTypeInMarker(\n      JSDocInfo.Marker marker, String typeName,\n      int startLineno, int startCharno, int endLineno, int endCharno,\n      boolean hasBrackets) {\n\n    assertTrue(marker.getType() != null);\n    assertTrue(marker.getType().getItem().isString());\n\n    // Match the name and brackets information.\n    String foundName = marker.getType().getItem().getString();\n\n    assertEquals(typeName, foundName);\n    assertEquals(hasBrackets, marker.getType().hasBrackets());\n\n    // Match position information.\n    assertEquals(startCharno, marker.getType().getPositionOnStartLine());\n    assertEquals(endCharno, marker.getType().getPositionOnEndLine());\n    assertEquals(startLineno, marker.getType().getStartLine());\n    assertEquals(endLineno, marker.getType().getEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 3045,
        "end_line": 3066,
        "comment": "\n   * Asserts that a type field exists on the given marker.\n   *\n   * @param typeName The name of the type expected in the type field.\n   * @param startCharno The starting character of the type declaration.\n   * @param hasBrackets Whether the type in the type field is expected\n   *     to have brackets.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 3050,col 5)-(line 3050,col 41)",
            "(line 3051,col 5)-(line 3051,col 54)",
            "(line 3054,col 5)-(line 3054,col 62)",
            "(line 3056,col 5)-(line 3056,col 38)",
            "(line 3057,col 5)-(line 3057,col 62)",
            "(line 3060,col 5)-(line 3060,col 73)",
            "(line 3061,col 5)-(line 3061,col 69)",
            "(line 3062,col 5)-(line 3062,col 63)",
            "(line 3063,col 5)-(line 3063,col 59)",
            "(line 3065,col 5)-(line 3065,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertNameInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, int)",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  private JSDocInfo.Marker assertNameInMarker(JSDocInfo.Marker marker,\n      String name, int startLine, int startCharno) {\n    assertTrue(marker.getName() != null);\n    assertEquals(name, marker.getName().getItem());\n\n    assertEquals(startCharno, marker.getName().getPositionOnStartLine());\n    assertEquals(startCharno + name.length(),\n                 marker.getName().getPositionOnEndLine());\n\n    assertEquals(startLine, marker.getName().getStartLine());\n    assertEquals(startLine, marker.getName().getEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 3075,
        "end_line": 3089,
        "comment": "\n   * Asserts that a name field exists on the given marker.\n   *\n   * @param name The name expected in the name field.\n   * @param startCharno The starting character of the text.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 3078,col 5)-(line 3078,col 41)",
            "(line 3079,col 5)-(line 3079,col 51)",
            "(line 3081,col 5)-(line 3081,col 73)",
            "(line 3082,col 5)-(line 3083,col 58)",
            "(line 3085,col 5)-(line 3085,col 61)",
            "(line 3086,col 5)-(line 3086,col 59)",
            "(line 3088,col 5)-(line 3088,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertAnnotationMarker(com.google.javascript.rhino.JSDocInfo, java.lang.String, int, int)",
        "snippet": "  private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,\n                                                  String annotationName,\n                                                  int startLineno,\n                                                  int startCharno) {\n    return assertAnnotationMarker(jsdoc, annotationName, startLineno,\n                                  startCharno, 0);\n  }\n",
        "begin_line": 3102,
        "end_line": 3108,
        "comment": "\n   * Asserts that an annotation marker of a given annotation name\n   * is found in the given JSDocInfo.\n   *\n   * @param jsdoc The JSDocInfo in which to search for the annotation marker.\n   * @param annotationName The name/type of the annotation for which to\n   *   search. Example: \"author\" for an \"@author\" annotation.\n   * @param startLineno The expected starting line number of the marker.\n   * @param startCharno The expected character on the starting line.\n   * @return The marker found, for further testing.\n   ",
        "child_ranges": [
            "(line 3106,col 5)-(line 3107,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertAnnotationMarker(com.google.javascript.rhino.JSDocInfo, java.lang.String, int, int, int)",
        "snippet": "  private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,\n                                                  String annotationName,\n                                                  int startLineno,\n                                                  int startCharno,\n                                                  int index) {\n\n    Collection<JSDocInfo.Marker> markers = jsdoc.getMarkers();\n\n    assertTrue(markers.size() > 0);\n\n    int counter = 0;\n\n    for (JSDocInfo.Marker marker : markers) {\n      if (marker.getAnnotation() != null) {\n        if (annotationName.equals(marker.getAnnotation().getItem())) {\n\n          if (counter == index) {\n            assertEquals(startLineno, marker.getAnnotation().getStartLine());\n            assertEquals(startCharno,\n                         marker.getAnnotation().getPositionOnStartLine());\n            assertEquals(startLineno, marker.getAnnotation().getEndLine());\n            assertEquals(startCharno + annotationName.length(),\n                         marker.getAnnotation().getPositionOnEndLine());\n\n            return marker;\n          }\n\n          counter++;\n        }\n      }\n    }\n\n    fail(\"No marker found\");\n    return null;\n  }\n",
        "begin_line": 3122,
        "end_line": 3156,
        "comment": "\n   * Asserts that the index-th annotation marker of a given annotation name\n   * is found in the given JSDocInfo.\n   *\n   * @param jsdoc The JSDocInfo in which to search for the annotation marker.\n   * @param annotationName The name/type of the annotation for which to\n   *   search. Example: \"author\" for an \"@author\" annotation.\n   * @param startLineno The expected starting line number of the marker.\n   * @param startCharno The expected character on the starting line.\n   * @param index The index of the marker.\n   * @return The marker found, for further testing.\n   ",
        "child_ranges": [
            "(line 3128,col 5)-(line 3128,col 62)",
            "(line 3130,col 5)-(line 3130,col 35)",
            "(line 3132,col 5)-(line 3132,col 20)",
            "(line 3134,col 5)-(line 3152,col 5)",
            "(line 3154,col 5)-(line 3154,col 28)",
            "(line 3155,col 5)-(line 3155,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertContains(java.util.Collection<T>, T)",
        "snippet": "  private <T> void assertContains(Collection<T> collection, T item) {\n    assertTrue(collection.contains(item));\n  }\n",
        "begin_line": 3158,
        "end_line": 3160,
        "comment": "",
        "child_ranges": [
            "(line 3159,col 5)-(line 3159,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFull(java.lang.String, java.lang.String...)",
        "snippet": "  private List<JSDocInfo> parseFull(String code, String... warnings) {\n    CompilerEnvirons environment = new CompilerEnvirons();\n\n    TestErrorReporter testErrorReporter = new TestErrorReporter(null, warnings);\n    environment.setErrorReporter(testErrorReporter);\n\n    environment.setRecordingComments(true);\n    environment.setRecordingLocalJsDocComments(true);\n\n    Parser p = new Parser(environment, testErrorReporter);\n    AstRoot script = p.parse(code, null, 0);\n\n    Config config =\n        new Config(extraAnnotations, extraSuppressions,\n            true, LanguageMode.ECMASCRIPT3, false);\n\n    List<JSDocInfo> jsdocs = Lists.newArrayList();\n    for (Comment comment : script.getComments()) {\n      JsDocInfoParser jsdocParser =\n        new JsDocInfoParser(\n            new JsDocTokenStream(comment.getValue().substring(3),\n                comment.getLineno()),\n            comment,\n            null,\n            config,\n            testErrorReporter);\n      jsdocParser.parse();\n      jsdocs.add(jsdocParser.retrieveAndResetParsedJSDocInfo());\n    }\n\n    assertTrue(\"some expected warnings were not reported\",\n        testErrorReporter.hasEncounteredAllWarnings());\n    return jsdocs;\n  }\n",
        "begin_line": 3162,
        "end_line": 3195,
        "comment": "",
        "child_ranges": [
            "(line 3163,col 5)-(line 3163,col 58)",
            "(line 3165,col 5)-(line 3165,col 80)",
            "(line 3166,col 5)-(line 3166,col 52)",
            "(line 3168,col 5)-(line 3168,col 43)",
            "(line 3169,col 5)-(line 3169,col 53)",
            "(line 3171,col 5)-(line 3171,col 58)",
            "(line 3172,col 5)-(line 3172,col 44)",
            "(line 3174,col 5)-(line 3176,col 51)",
            "(line 3178,col 5)-(line 3178,col 50)",
            "(line 3179,col 5)-(line 3190,col 5)",
            "(line 3192,col 5)-(line 3193,col 55)",
            "(line 3194,col 5)-(line 3194,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFileOverviewWithoutDoc(java.lang.String, java.lang.String...)",
        "snippet": "  @SuppressWarnings(\"unused\")\n  private JSDocInfo parseFileOverviewWithoutDoc(String comment,\n                                                String... warnings) {\n    return parse(comment, false, true, warnings);\n  }\n",
        "begin_line": 3197,
        "end_line": 3201,
        "comment": "",
        "child_ranges": [
            "(line 3200,col 5)-(line 3200,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFileOverview(java.lang.String, java.lang.String...)",
        "snippet": "  private JSDocInfo parseFileOverview(String comment, String... warnings) {\n    return parse(comment, true, true, warnings);\n  }\n",
        "begin_line": 3203,
        "end_line": 3205,
        "comment": "",
        "child_ranges": [
            "(line 3204,col 5)-(line 3204,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, String... warnings) {\n    return parse(comment, false, warnings);\n  }\n",
        "begin_line": 3207,
        "end_line": 3209,
        "comment": "",
        "child_ranges": [
            "(line 3208,col 5)-(line 3208,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, boolean, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, boolean parseDocumentation,\n                          String... warnings) {\n    return parse(comment, parseDocumentation, false, warnings);\n  }\n",
        "begin_line": 3211,
        "end_line": 3214,
        "comment": "",
        "child_ranges": [
            "(line 3213,col 5)-(line 3213,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, boolean, boolean, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, boolean parseDocumentation,\n      boolean parseFileOverview, String... warnings) {\n    TestErrorReporter errorReporter = new TestErrorReporter(null, warnings);\n\n    Config config = new Config(extraAnnotations, extraSuppressions,\n        parseDocumentation, LanguageMode.ECMASCRIPT3, false);\n    StaticSourceFile file = new SimpleSourceFile(\"testcode\", false);\n    Node associatedNode = new Node(Token.SCRIPT);\n    associatedNode.setInputId(new InputId(file.getName()));\n    associatedNode.setStaticSourceFile(file);\n    JsDocInfoParser jsdocParser = new JsDocInfoParser(\n        stream(comment),\n        new Comment(0, 0, CommentType.JSDOC, comment),\n        associatedNode,\n        config, errorReporter);\n\n    if (fileLevelJsDocBuilder != null) {\n      jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    }\n\n    jsdocParser.parse();\n\n    assertTrue(\"expected warnings were not reported\",\n        errorReporter.hasEncounteredAllWarnings());\n\n    if (parseFileOverview) {\n      return jsdocParser.getFileOverviewJSDocInfo();\n    } else {\n      return jsdocParser.retrieveAndResetParsedJSDocInfo();\n    }\n  }\n",
        "begin_line": 3216,
        "end_line": 3246,
        "comment": "",
        "child_ranges": [
            "(line 3218,col 5)-(line 3218,col 76)",
            "(line 3220,col 5)-(line 3221,col 61)",
            "(line 3222,col 5)-(line 3222,col 68)",
            "(line 3223,col 5)-(line 3223,col 49)",
            "(line 3224,col 5)-(line 3224,col 59)",
            "(line 3225,col 5)-(line 3225,col 45)",
            "(line 3226,col 5)-(line 3230,col 31)",
            "(line 3232,col 5)-(line 3234,col 5)",
            "(line 3236,col 5)-(line 3236,col 24)",
            "(line 3238,col 5)-(line 3239,col 51)",
            "(line 3241,col 5)-(line 3245,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseType(java.lang.String)",
        "snippet": "  private Node parseType(String typeComment) {\n    return JsDocInfoParser.parseTypeString(typeComment);\n  }\n",
        "begin_line": 3248,
        "end_line": 3250,
        "comment": "",
        "child_ranges": [
            "(line 3249,col 5)-(line 3249,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.stream(java.lang.String)",
        "snippet": "  private JsDocTokenStream stream(String source) {\n    return new JsDocTokenStream(source, 0);\n  }\n",
        "begin_line": 3252,
        "end_line": 3254,
        "comment": "",
        "child_ranges": [
            "(line 3253,col 5)-(line 3253,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertTemplatizedTypeEquals(com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  private void assertTemplatizedTypeEquals(TemplateType key, JSType expected,\n                                           JSTypeExpression te) {\n    assertEquals(\n        expected, resolve(te).getTemplateTypeMap().getTemplateType(key));\n  }\n",
        "begin_line": 3256,
        "end_line": 3260,
        "comment": "",
        "child_ranges": [
            "(line 3258,col 5)-(line 3259,col 73)"
        ]
    }
]