[
    {
        "name": "XYIntervalSeriesCollection.XYIntervalSeriesCollection#73",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
        "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.XYIntervalSeriesCollection()",
        "snippet": "    public XYIntervalSeriesCollection() {\n        this.data = new java.util.ArrayList();\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\r\n     * Creates a new instance of <code>XIntervalSeriesCollection</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYIntervalSeriesCollection.addSeries#83",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
        "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.addSeries(org.jfree.data.xy.XYIntervalSeries)",
        "snippet": "    public void addSeries(XYIntervalSeries series) {\n        if (series == null) {\n            throw new IllegalArgumentException(\"Null 'series' argument.\");\n        }\n        this.data.add(series);\n        series.addChangeListener(this);\n        fireDatasetChanged(new DatasetChangeInfo());\n        //TODO: fill in real change info\n    }\n",
        "begin_line": 83,
        "end_line": 91,
        "comment": "\r\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param series  the series (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYIntervalSeriesCollection.getSeriesCount#98",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
        "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesCount()",
        "snippet": "    public int getSeriesCount() {\n        return this.data.size();\n    }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\r\n     * Returns the number of series in the collection.\r\n     *\r\n     * @return The series count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYIntervalSeriesCollection.getSeries#112",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
        "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getSeries(int)",
        "snippet": "    public XYIntervalSeries getSeries(int series) {\n        if ((series < 0) || (series >= getSeriesCount())) {\n            throw new IllegalArgumentException(\"Series index out of bounds\");\n        }\n        return (XYIntervalSeries) this.data.get(series);\n    }\n",
        "begin_line": 112,
        "end_line": 117,
        "comment": "\r\n     * Returns a series from the collection.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The series.\r\n     *\r\n     * @throws IllegalArgumentException if <code>series</code> is not in the\r\n     *     range <code>0</code> to <code>getSeriesCount() - 1</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYIntervalSeriesCollection.getItemCount#145",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
        "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getItemCount(int)",
        "snippet": "    public int getItemCount(int series) {\n        // defer argument checking\n        return getSeries(series).getItemCount();\n    }\n",
        "begin_line": 145,
        "end_line": 148,
        "comment": "\r\n     * Returns the number of items in the specified series.\r\n     *\r\n     * @param series  the series (zero-based index).\r\n     *\r\n     * @return The item count.\r\n     *\r\n     * @throws IllegalArgumentException if <code>series</code> is not in the\r\n     *     range <code>0</code> to <code>getSeriesCount() - 1</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYIntervalSeries.XYIntervalSeries#63",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeries",
        "signature": "org.jfree.data.xy.XYIntervalSeries.XYIntervalSeries(java.lang.Comparable)",
        "snippet": "    public XYIntervalSeries(Comparable key) {\n        this(key, true, true);\n    }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "\r\n     * Creates a new empty series.  By default, items added to the series will\r\n     * be sorted into ascending order by x-value, and duplicate x-values will\r\n     * be allowed (these defaults can be modified with another constructor).\r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYIntervalSeries.XYIntervalSeries#77",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeries",
        "signature": "org.jfree.data.xy.XYIntervalSeries.XYIntervalSeries(java.lang.Comparable, boolean, boolean)",
        "snippet": "    public XYIntervalSeries(Comparable key, boolean autoSort,\n            boolean allowDuplicateXValues) {\n        super(key, autoSort, allowDuplicateXValues);\n    }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "\r\n     * Constructs a new xy-series that contains no data.  You can specify\r\n     * whether or not duplicate x-values are allowed for the series.\r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     * @param autoSort  a flag that controls whether or not the items in the\r\n     *                  series are sorted.\r\n     * @param allowDuplicateXValues  a flag that controls whether duplicate\r\n     *                               x-values are allowed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYIntervalSeries.add#92",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeries",
        "signature": "org.jfree.data.xy.XYIntervalSeries.add(double, double, double, double, double, double)",
        "snippet": "    public void add(double x, double xLow, double xHigh, double y, double yLow,\n            double yHigh) {\n        super.add(new XYIntervalDataItem(x, xLow, xHigh, y, yLow, yHigh), true);\n    }\n",
        "begin_line": 92,
        "end_line": 95,
        "comment": "\r\n     * Adds a data item to the series.\r\n     *\r\n     * @param x  the x-value.\r\n     * @param xLow  the lower bound of the x-interval.\r\n     * @param xHigh  the upper bound of the x-interval.\r\n     * @param y  the y-value.\r\n     * @param yLow  the lower bound of the y-interval.\r\n     * @param yHigh  the upper bound of the y-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYIntervalSeries.getDataItem#188",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeries",
        "signature": "org.jfree.data.xy.XYIntervalSeries.getDataItem(int)",
        "snippet": "    public ComparableObjectItem getDataItem(int index) {\n        return super.getDataItem(index);\n    }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "\r\n     * Returns the data item at the specified index.\r\n     *\r\n     * @param index  the item index.\r\n     *\r\n     * @return The data item.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYIntervalDataItem.XYIntervalDataItem#62",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
        "class_name": "org.jfree.data.xy.XYIntervalDataItem",
        "signature": "org.jfree.data.xy.XYIntervalDataItem.XYIntervalDataItem(double, double, double, double, double, double)",
        "snippet": "    public XYIntervalDataItem(double x, double xLow, double xHigh, double y,\n            double yLow, double yHigh) {\n        super(new Double(x), new XYInterval(xLow, xHigh, y, yLow, yHigh));\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Creates a new instance of <code>XYIntervalItem</code>.\r\n     *\r\n     * @param x  the x-value.\r\n     * @param xLow  the lower bound of the x-interval.\r\n     * @param xHigh  the upper bound of the x-interval.\r\n     * @param y  the y-value.\r\n     * @param yLow  the lower bound of the y-interval.\r\n     * @param yHigh  the upper bound of the y-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYInterval.XYInterval#77",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYInterval.java",
        "class_name": "org.jfree.data.xy.XYInterval",
        "signature": "org.jfree.data.xy.XYInterval.XYInterval(double, double, double, double, double)",
        "snippet": "    public XYInterval(double xLow, double xHigh, double y, double yLow,\n            double yHigh) {\n        this.xLow = xLow;\n        this.xHigh = xHigh;\n        this.y = y;\n        this.yLow = yLow;\n        this.yHigh = yHigh;\n    }\n",
        "begin_line": 77,
        "end_line": 84,
        "comment": "\r\n     * Creates a new instance of <code>XYInterval</code>.\r\n     *\r\n     * @param xLow  the lower bound of the x-interval.\r\n     * @param xHigh  the upper bound of the y-interval.\r\n     * @param y  the y-value.\r\n     * @param yLow  the lower bound of the y-interval.\r\n     * @param yHigh  the upper bound of the y-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYIntervalSeriesCollection.getStartXValue#172",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
        "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue(int, int)",
        "snippet": "    public double getStartXValue(int series, int item) {\n        XYIntervalSeries s = (XYIntervalSeries) this.data.get(series);\n        return s.getXLowValue(item);\n    }\n",
        "begin_line": 172,
        "end_line": 175,
        "comment": "\r\n     * Returns the start x-value (as a double primitive) for an item within a\r\n     * series.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return The value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalSeriesCollection.getEndXValue#186",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
        "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue(int, int)",
        "snippet": "    public double getEndXValue(int series, int item) {\n        XYIntervalSeries s = (XYIntervalSeries) this.data.get(series);\n        return s.getXHighValue(item);\n    }\n",
        "begin_line": 186,
        "end_line": 189,
        "comment": "\r\n     * Returns the end x-value (as a double primitive) for an item within a\r\n     * series.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return The value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalSeriesCollection.getStartYValue#214",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
        "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getStartYValue(int, int)",
        "snippet": "    public double getStartYValue(int series, int item) {\n        XYIntervalSeries s = (XYIntervalSeries) this.data.get(series);\n        return s.getYLowValue(item);\n    }\n",
        "begin_line": 214,
        "end_line": 217,
        "comment": "\r\n     * Returns the start y-value (as a double primitive) for an item within a\r\n     * series.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return The value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalSeriesCollection.getEndYValue#228",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
        "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getEndYValue(int, int)",
        "snippet": "    public double getEndYValue(int series, int item) {\n        XYIntervalSeries s = (XYIntervalSeries) this.data.get(series);\n        return s.getYHighValue(item);\n    }\n",
        "begin_line": 228,
        "end_line": 231,
        "comment": "\r\n     * Returns the end y-value (as a double primitive) for an item within a\r\n     * series.\r\n     *\r\n     * @param series  the series (zero-based index).\r\n     * @param item  the item (zero-based index).\r\n     *\r\n     * @return The value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalSeries.getXLowValue#119",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeries",
        "signature": "org.jfree.data.xy.XYIntervalSeries.getXLowValue(int)",
        "snippet": "    public double getXLowValue(int index) {\n        XYIntervalDataItem item = (XYIntervalDataItem) getDataItem(index);\n        return item.getXLowValue();\n    }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "\r\n     * Returns the lower bound of the x-interval for the specified item in the\r\n     * series.\r\n     *\r\n     * @param index  the item index.\r\n     *\r\n     * @return The lower bound of the x-interval.\r\n     *\r\n     * @since 1.0.5\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalSeries.getXHighValue#134",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeries",
        "signature": "org.jfree.data.xy.XYIntervalSeries.getXHighValue(int)",
        "snippet": "    public double getXHighValue(int index) {\n        XYIntervalDataItem item = (XYIntervalDataItem) getDataItem(index);\n        return item.getXHighValue();\n    }\n",
        "begin_line": 134,
        "end_line": 137,
        "comment": "\r\n     * Returns the upper bound of the x-interval for the specified item in the\r\n     * series.\r\n     *\r\n     * @param index  the item index.\r\n     *\r\n     * @return The upper bound of the x-interval.\r\n     *\r\n     * @since 1.0.5\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalSeries.getYLowValue#161",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeries",
        "signature": "org.jfree.data.xy.XYIntervalSeries.getYLowValue(int)",
        "snippet": "    public double getYLowValue(int index) {\n        XYIntervalDataItem item = (XYIntervalDataItem) getDataItem(index);\n        return item.getYLowValue();\n    }\n",
        "begin_line": 161,
        "end_line": 164,
        "comment": "\r\n     * Returns the lower bound of the Y-interval for the specified item in the\r\n     * series.\r\n     *\r\n     * @param index  the item index.\r\n     *\r\n     * @return The lower bound of the Y-interval.\r\n     *\r\n     * @since 1.0.5\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalSeries.getYHighValue#176",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
        "class_name": "org.jfree.data.xy.XYIntervalSeries",
        "signature": "org.jfree.data.xy.XYIntervalSeries.getYHighValue(int)",
        "snippet": "    public double getYHighValue(int index) {\n        XYIntervalDataItem item = (XYIntervalDataItem) getDataItem(index);\n        return item.getYHighValue();\n    }\n",
        "begin_line": 176,
        "end_line": 179,
        "comment": "\r\n     * Returns the upper bound of the y-interval for the specified item in the\r\n     * series.\r\n     *\r\n     * @param index  the item index.\r\n     *\r\n     * @return The upper bound of the y-interval.\r\n     *\r\n     * @since 1.0.5\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalDataItem.getXLowValue#96",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
        "class_name": "org.jfree.data.xy.XYIntervalDataItem",
        "signature": "org.jfree.data.xy.XYIntervalDataItem.getXLowValue()",
        "snippet": "    public double getXLowValue() {\n        XYInterval interval = (XYInterval) getObject();\n        if (interval != null) {\n            return interval.getXLow();\n        }\n        else {\n            return Double.NaN;\n        }\n    }\n",
        "begin_line": 96,
        "end_line": 104,
        "comment": "\r\n     * Returns the lower bound of the x-interval.\r\n     *\r\n     * @return The lower bound of the x-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalDataItem.getXHighValue#111",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
        "class_name": "org.jfree.data.xy.XYIntervalDataItem",
        "signature": "org.jfree.data.xy.XYIntervalDataItem.getXHighValue()",
        "snippet": "    public double getXHighValue() {\n        XYInterval interval = (XYInterval) getObject();\n        if (interval != null) {\n            return interval.getXHigh();\n        }\n        else {\n            return Double.NaN;\n        }\n    }\n",
        "begin_line": 111,
        "end_line": 119,
        "comment": "\r\n     * Returns the upper bound of the x-interval.\r\n     *\r\n     * @return The upper bound of the x-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalDataItem.getYLowValue#126",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
        "class_name": "org.jfree.data.xy.XYIntervalDataItem",
        "signature": "org.jfree.data.xy.XYIntervalDataItem.getYLowValue()",
        "snippet": "    public double getYLowValue() {\n        XYInterval interval = (XYInterval) getObject();\n        if (interval != null) {\n            return interval.getYLow();\n        }\n        else {\n            return Double.NaN;\n        }\n    }\n",
        "begin_line": 126,
        "end_line": 134,
        "comment": "\r\n     * Returns the lower bound of the y-interval.\r\n     *\r\n     * @return The lower bound of the y-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYIntervalDataItem.getYHighValue#141",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
        "class_name": "org.jfree.data.xy.XYIntervalDataItem",
        "signature": "org.jfree.data.xy.XYIntervalDataItem.getYHighValue()",
        "snippet": "    public double getYHighValue() {\n        XYInterval interval = (XYInterval) getObject();\n        if (interval != null) {\n            return interval.getYHigh();\n        }\n        else {\n            return Double.NaN;\n        }\n    }\n",
        "begin_line": 141,
        "end_line": 149,
        "comment": "\r\n     * Returns the upper bound of the y-interval.\r\n     *\r\n     * @return The upper bound of the y-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYInterval.getXLow#91",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYInterval.java",
        "class_name": "org.jfree.data.xy.XYInterval",
        "signature": "org.jfree.data.xy.XYInterval.getXLow()",
        "snippet": "    public double getXLow() {\n        return this.xLow;\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\r\n     * Returns the lower bound of the x-interval.\r\n     *\r\n     * @return The lower bound of the x-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYInterval.getXHigh#100",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYInterval.java",
        "class_name": "org.jfree.data.xy.XYInterval",
        "signature": "org.jfree.data.xy.XYInterval.getXHigh()",
        "snippet": "    public double getXHigh() {\n        return this.xHigh;\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\r\n     * Returns the upper bound of the x-interval.\r\n     *\r\n     * @return The upper bound of the x-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYInterval.getYLow#118",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYInterval.java",
        "class_name": "org.jfree.data.xy.XYInterval",
        "signature": "org.jfree.data.xy.XYInterval.getYLow()",
        "snippet": "    public double getYLow() {\n        return this.yLow;\n    }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\r\n     * Returns the lower bound of the y-interval.\r\n     *\r\n     * @return The lower bound of the y-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYInterval.getYHigh#127",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYInterval.java",
        "class_name": "org.jfree.data.xy.XYInterval",
        "signature": "org.jfree.data.xy.XYInterval.getYHigh()",
        "snippet": "    public double getYHigh() {\n        return this.yHigh;\n    }\n",
        "begin_line": 127,
        "end_line": 129,
        "comment": "\r\n     * Returns the upper bound of the y-interval.\r\n     *\r\n     * @return The upper bound of the y-interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComparableObjectSeries.ComparableObjectSeries#96",
        "is_bug": false,
        "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
        "class_name": "org.jfree.data.ComparableObjectSeries",
        "signature": "org.jfree.data.ComparableObjectSeries.ComparableObjectSeries(java.lang.Comparable, boolean, boolean)",
        "snippet": "    public ComparableObjectSeries(Comparable key, boolean autoSort,\n            boolean allowDuplicateXValues) {\n        super(key);\n        this.data = new java.util.ArrayList();\n        this.autoSort = autoSort;\n        this.allowDuplicateXValues = allowDuplicateXValues;\n    }\n",
        "begin_line": 96,
        "end_line": 102,
        "comment": "\r\n     * Constructs a new series that contains no data.  You can specify\r\n     * whether or not duplicate x-values are allowed for the series.\r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     * @param autoSort  a flag that controls whether or not the items in the\r\n     *                  series are sorted.\r\n     * @param allowDuplicateXValues  a flag that controls whether duplicate\r\n     *                               x-values are allowed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComparableObjectSeries.getItemCount#130",
        "is_bug": false,
        "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
        "class_name": "org.jfree.data.ComparableObjectSeries",
        "signature": "org.jfree.data.ComparableObjectSeries.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.data.size();\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\r\n     * Returns the number of items in the series.\r\n     *\r\n     * @return The item count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComparableObjectSeries.add#214",
        "is_bug": false,
        "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
        "class_name": "org.jfree.data.ComparableObjectSeries",
        "signature": "org.jfree.data.ComparableObjectSeries.add(org.jfree.data.ComparableObjectItem, boolean)",
        "snippet": "    protected void add(ComparableObjectItem item, boolean notify) {\n\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null 'item' argument.\");\n        }\n\n        if (this.autoSort) {\n            int index = Collections.binarySearch(this.data, item);\n            if (index < 0) {\n                this.data.add(-index - 1, item);\n            }\n            else {\n                if (this.allowDuplicateXValues) {\n                    // need to make sure we are adding *after* any duplicates\n                    int size = this.data.size();\n                    while (index < size\n                           && item.compareTo(this.data.get(index)) == 0) {\n                        index++;\n                    }\n                    if (index < this.data.size()) {\n                        this.data.add(index, item);\n                    }\n                    else {\n                        this.data.add(item);\n                    }\n                }\n                else {\n                    throw new SeriesException(\"X-value already exists.\");\n                }\n            }\n        }\n        else {\n            if (!this.allowDuplicateXValues) {\n                // can't allow duplicate values, so we need to check whether\n                // there is an item with the given x-value already\n                int index = indexOf(item.getComparable());\n                if (index >= 0) {\n                    throw new SeriesException(\"X-value already exists.\");\n                }\n            }\n            this.data.add(item);\n        }\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n        if (notify) {\n            fireSeriesChanged();\n        }\n    }\n",
        "begin_line": 214,
        "end_line": 262,
        "comment": "\r\n     * Adds a data item to the series and, if requested, sends a\r\n     * {@link SeriesChangeEvent} to all registered listeners.\r\n     *\r\n     * @param item  the (x, y) item (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether or not a\r\n     *                {@link SeriesChangeEvent} is sent to all registered\r\n     *                listeners.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComparableObjectSeries.getDataItem#332",
        "is_bug": false,
        "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
        "class_name": "org.jfree.data.ComparableObjectSeries",
        "signature": "org.jfree.data.ComparableObjectSeries.getDataItem(int)",
        "snippet": "    protected ComparableObjectItem getDataItem(int index) {\n        return (ComparableObjectItem) this.data.get(index);\n    }\n",
        "begin_line": 332,
        "end_line": 334,
        "comment": "\r\n     * Return the data item with the specified index.\r\n     *\r\n     * @param index  the index.\r\n     *\r\n     * @return The data item with the specified index.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComparableObjectItem.ComparableObjectItem#72",
        "is_bug": false,
        "src_path": "source/org/jfree/data/ComparableObjectItem.java",
        "class_name": "org.jfree.data.ComparableObjectItem",
        "signature": "org.jfree.data.ComparableObjectItem.ComparableObjectItem(java.lang.Comparable, java.lang.Object)",
        "snippet": "    public ComparableObjectItem(Comparable x, Object y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n        this.x = x;\n        this.obj = y;\n    }\n",
        "begin_line": 72,
        "end_line": 78,
        "comment": "\r\n     * Constructs a new data item.\r\n     *\r\n     * @param x  the x-value (<code>null</code> NOT permitted).\r\n     * @param y  the y-value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComparableObjectItem.getObject#94",
        "is_bug": false,
        "src_path": "source/org/jfree/data/ComparableObjectItem.java",
        "class_name": "org.jfree.data.ComparableObjectItem",
        "signature": "org.jfree.data.ComparableObjectItem.getObject()",
        "snippet": "    protected Object getObject() {\n        return this.obj;\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\r\n     * Returns the y-value.\r\n     *\r\n     * @return The y-value (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetUtilities.iterateDomainBounds#725",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.iterateDomainBounds(org.jfree.data.xy.XYDataset)",
        "snippet": "    public static Range iterateDomainBounds(XYDataset dataset) {\n        return iterateDomainBounds(dataset, true);\n    }\n",
        "begin_line": 725,
        "end_line": 727,
        "comment": "\r\n     * Iterates over the items in an {@link XYDataset} to find\r\n     * the range of x-values.  If the dataset is an instance of\r\n     * {@link IntervalXYDataset}, the starting and ending x-values\r\n     * will be used for the bounds calculation.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     *\r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetUtilities.iterateDomainBounds#740",
        "is_bug": true,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.iterateDomainBounds(org.jfree.data.xy.XYDataset, boolean)",
        "snippet": "    public static Range iterateDomainBounds(XYDataset dataset,\n                                            boolean includeInterval) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n        double lvalue;\n        double uvalue;\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            IntervalXYDataset intervalXYData = (IntervalXYDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    lvalue = intervalXYData.getStartXValue(series, item);\n                    uvalue = intervalXYData.getEndXValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else {\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    lvalue = dataset.getXValue(series, item);\n                    uvalue = lvalue;\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        if (minimum > maximum) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }\n",
        "begin_line": 740,
        "end_line": 785,
        "comment": "\r\n     * Iterates over the items in an {@link XYDataset} to find\r\n     * the range of x-values.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param includeInterval  a flag that determines, for an\r\n     *          {@link IntervalXYDataset}, whether the x-interval or just the\r\n     *          x-value is used to determine the overall range.\r\n     *\r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetUtilities.iterateRangeBounds#1212",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.xy.XYDataset)",
        "snippet": "    public static Range iterateRangeBounds(XYDataset dataset) {\n        return iterateRangeBounds(dataset, true);\n    }\n",
        "begin_line": 1212,
        "end_line": 1214,
        "comment": "\r\n     * Iterates over the data item of the xy dataset to find\r\n     * the range bounds.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     *\r\n     * @return The range (possibly <code>null</code>).\r\n     *\r\n     * @since 1.0.10\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetUtilities.iterateRangeBounds#1229",
        "is_bug": true,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.xy.XYDataset, boolean)",
        "snippet": "    public static Range iterateRangeBounds(XYDataset dataset,\n            boolean includeInterval) {\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n\n        // handle three cases by dataset type\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            // handle special case of IntervalXYDataset\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double lvalue = ixyd.getStartYValue(series, item);\n                    double uvalue = ixyd.getEndYValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else if (includeInterval && dataset instanceof OHLCDataset) {\n            // handle special case of OHLCDataset\n            OHLCDataset ohlc = (OHLCDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double lvalue = ohlc.getLowValue(series, item);\n                    double uvalue = ohlc.getHighValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else {\n            // standard case - plain XYDataset\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double value = dataset.getYValue(series, item);\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n        }\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }\n",
        "begin_line": 1229,
        "end_line": 1289,
        "comment": "\r\n     * Iterates over the data items of the xy dataset to find\r\n     * the range bounds.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param includeInterval  a flag that determines, for an\r\n     *          {@link IntervalXYDataset}, whether the y-interval or just the\r\n     *          y-value is used to determine the overall range.\r\n     *\r\n     * @return The range (possibly <code>null</code>).\r\n     *\r\n     * @since 1.0.10\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.fireSeriesChanged#314",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.fireSeriesChanged()",
        "snippet": "    public void fireSeriesChanged() {\n        if (this.notify) {\n            notifyListeners(new SeriesChangeEvent(this));\n        }\n    }\n",
        "begin_line": 314,
        "end_line": 318,
        "comment": "\r\n     * General method for signalling to registered listeners that the series\r\n     * has been changed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1516
        },
        "num_failing_tests": 2
    },
    {
        "name": "Series.notifyListeners#326",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.notifyListeners(org.jfree.data.event.SeriesChangeEvent)",
        "snippet": "    protected void notifyListeners(SeriesChangeEvent event) {\n\n        Object[] listenerList = this.listeners.getListenerList();\n        for (int i = listenerList.length - 2; i >= 0; i -= 2) {\n            if (listenerList[i] == SeriesChangeListener.class) {\n                ((SeriesChangeListener) listenerList[i + 1]).seriesChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 326,
        "end_line": 336,
        "comment": "\r\n     * Sends a change event to all registered listeners.\r\n     *\r\n     * @param event  contains information about the event that triggered the\r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1516
        },
        "num_failing_tests": 2
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#69",
        "is_bug": false,
        "src_path": "source/org/jfree/data/event/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.event.SeriesChangeEvent",
        "signature": "org.jfree.data.event.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object)",
        "snippet": "    public SeriesChangeEvent(Object source) {\n        this(source, null);\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\r\n     * Constructs a new event.\r\n     *\r\n     * @param source  the source of the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1516
        },
        "num_failing_tests": 2
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#81",
        "is_bug": false,
        "src_path": "source/org/jfree/data/event/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.event.SeriesChangeEvent",
        "signature": "org.jfree.data.event.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object, org.jfree.data.general.SeriesChangeInfo)",
        "snippet": "    public SeriesChangeEvent(Object source, SeriesChangeInfo summary) {\n        super(source);\n        this.summary = summary;\n    }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\r\n     * Constructs a new change event.\r\n     *\r\n     * @param source  the event source.\r\n     * @param summary  a summary of the change (<code>null</code> permitted).\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1516
        },
        "num_failing_tests": 2
    },
    {
        "name": "Series.Series#103",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable)",
        "snippet": "    protected Series(Comparable key) {\n        this(key, null);\n    }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\r\n     * Creates a new series with the specified key.\r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1474
        },
        "num_failing_tests": 2
    },
    {
        "name": "Series.Series#113",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable, java.lang.String)",
        "snippet": "    protected Series(Comparable key, String description) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        this.key = key;\n        this.description = description;\n        this.listeners = new EventListenerList();\n        this.propertyChangeSupport = new PropertyChangeSupport(this);\n        this.notify = true;\n    }\n",
        "begin_line": 113,
        "end_line": 122,
        "comment": "\r\n     * Creates a new series with the specified key and description.\r\n     *\r\n     * @param key  the series key (<code>null</code> NOT permitted).\r\n     * @param description  the series description (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1474
        },
        "num_failing_tests": 2
    },
    {
        "name": "Series.addChangeListener#296",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.addChangeListener(org.jfree.data.event.SeriesChangeListener)",
        "snippet": "    public void addChangeListener(SeriesChangeListener listener) {\n        this.listeners.add(SeriesChangeListener.class, listener);\n    }\n",
        "begin_line": 296,
        "end_line": 298,
        "comment": "\r\n     * Registers an object with this series, to receive notification whenever\r\n     * the series changes.\r\n     * <P>\r\n     * Objects being registered must implement the {@link SeriesChangeListener}\r\n     * interface.\r\n     *\r\n     * @param listener  the listener to register.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1474
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractSeriesDataset.AbstractSeriesDataset#65",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
        "class_name": "org.jfree.data.general.AbstractSeriesDataset",
        "signature": "org.jfree.data.general.AbstractSeriesDataset.AbstractSeriesDataset()",
        "snippet": "    protected AbstractSeriesDataset() {\n        super();\n    }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\r\n     * Creates a new dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1195
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractDataset.fireDatasetChanged#175",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.fireDatasetChanged(org.jfree.chart.event.DatasetChangeInfo)",
        "snippet": "    protected void fireDatasetChanged(DatasetChangeInfo info) {\n        notifyListeners(new DatasetChangeEvent(this, this, info));\n    }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     *\r\n     * @param info  information about the change (<code>null</code> not\r\n     *         permitted).\r\n     *\r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0869
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractDataset.notifyListeners#188",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.notifyListeners(org.jfree.data.event.DatasetChangeEvent)",
        "snippet": "    protected void notifyListeners(DatasetChangeEvent event) {\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == DatasetChangeListener.class) {\n                ((DatasetChangeListener) listeners[i + 1]).datasetChanged(\n                        event);\n            }\n        }\n    }\n",
        "begin_line": 188,
        "end_line": 196,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     *\r\n     * @param event  contains information about the event that triggered the\r\n     *               notification.\r\n     *\r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     * @see #removeChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0869
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetGroup.DatasetGroup#62",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "class_name": "org.jfree.data.general.DatasetGroup",
        "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup()",
        "snippet": "    public DatasetGroup() {\n        super();\n        this.id = \"NOID\";\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Constructs a new group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0828
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractDataset.AbstractDataset#95",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset()",
        "snippet": "    protected AbstractDataset() {\n        this.group = new DatasetGroup();\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\r\n     * Constructs a dataset. By default, the dataset is assigned to its own\r\n     * group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0828
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetChangeEvent.DatasetChangeEvent#85",
        "is_bug": false,
        "src_path": "source/org/jfree/data/event/DatasetChangeEvent.java",
        "class_name": "org.jfree.data.event.DatasetChangeEvent",
        "signature": "org.jfree.data.event.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset, org.jfree.chart.event.DatasetChangeInfo)",
        "snippet": "    public DatasetChangeEvent(Object source, Dataset dataset,\n            DatasetChangeInfo info) {\n        super(source);\n        if (info == null) {\n            throw new IllegalArgumentException(\"Null 'info' argument.\");\n        }\n        this.dataset = dataset;\n        this.info = info;\n    }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "\r\n     * Constructs a new event.  The source is either the dataset or the\r\n     * {@link Plot} class.  The dataset can be <code>null</code> (in this case\r\n     * the source will be the {@link Plot} class).\r\n     *\r\n     * @param source  the source of the event.\r\n     * @param dataset  the dataset that generated the event (<code>null</code>\r\n     *                 permitted).\r\n     * @param info  information about the change (<code>null</code> not\r\n     *         permitted).\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0792
        },
        "num_failing_tests": 2
    }
]