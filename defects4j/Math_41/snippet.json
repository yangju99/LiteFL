[
    {
        "name": "Variance.evaluate#369",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[], double[])",
        "snippet": "    public double evaluate(final double[] values, final double[] weights) {\n        return evaluate(values, weights, 0, values.length);\n    }\n",
        "begin_line": 369,
        "end_line": 371,
        "comment": "\n     * <p>\n     * Returns the weighted variance of the entries in the the input array.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre>\n     * where weightedMean is the weighted mean</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if either array is null.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @return the weighted variance of the values\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Sum.evaluate#157",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Sum",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Sum.evaluate(double[], double[], int, int)",
        "snippet": "    public double evaluate(final double[] values, final double[] weights,\n                           final int begin, final int length) {\n        double sum = Double.NaN;\n        if (test(values, weights, begin, length, true)) {\n            sum = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                sum += values[i] * weights[i];\n            }\n        }\n        return sum;\n    }\n",
        "begin_line": 157,
        "end_line": 167,
        "comment": "\n     * The weighted sum of the entries in the specified portion of\n     * the input array, or 0 if the designated subarray\n     * is empty.\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     * <p>\n     * Uses the formula, <pre>\n     *    weighted sum = &Sigma;(values[i] * weights[i])\n     * </pre></p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the sum of the values or 0 if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Variance.evaluate#313",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[], double[], int, int)",
        "snippet": "    public double evaluate(final double[] values, final double[] weights,\n                           final int begin, final int length) {\n\n        double var = Double.NaN;\n\n        if (test(values, weights,begin, length)) {\n            clear();\n            if (length == 1) {\n                var = 0.0;\n            } else if (length > 1) {\n                Mean mean = new Mean();\n                double m = mean.evaluate(values, weights, begin, length);\n                var = evaluate(values, weights, m, begin, length);\n            }\n        }\n        return var;\n    }\n",
        "begin_line": 313,
        "end_line": 329,
        "comment": "\n     * <p>Returns the weighted variance of the entries in the specified portion of\n     * the input array, or <code>Double.NaN</code> if the designated subarray\n     * is empty.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre>\n     * where weightedMean is the weighted mean</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if either array is null.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the weighted variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Variance.evaluate#501",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[], double[], double, int, int)",
        "snippet": "    public double evaluate(final double[] values, final double[] weights,\n                           final double mean, final int begin, final int length) {\n\n        double var = Double.NaN;\n\n        if (test(values, weights, begin, length)) {\n            if (length == 1) {\n                var = 0.0;\n            } else if (length > 1) {\n                double accum = 0.0;\n                double dev = 0.0;\n                double accum2 = 0.0;\n                for (int i = begin; i < begin + length; i++) {\n                    dev = values[i] - mean;\n                    accum += weights[i] * (dev * dev);\n                    accum2 += weights[i] * dev;\n                }\n\n                double sumWts = 0;\n                for (int i = 0; i < weights.length; i++) {\n                    sumWts += weights[i];\n                }\n\n                if (isBiasCorrected) {\n                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n                } else {\n                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n                }\n            }\n        }\n        return var;\n    }\n",
        "begin_line": 501,
        "end_line": 532,
        "comment": "\n     * Returns the weighted variance of the entries in the specified portion of\n     * the input array, using the precomputed weighted mean value.  Returns\n     * <code>Double.NaN</code> if the designated subarray is empty.\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre></p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the weighted arithmetic\n     * mean of the sample data, not a known population parameter. This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param mean the precomputed weighted mean value\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Mean.evaluate#203",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Mean",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[], double[], int, int)",
        "snippet": "    public double evaluate(final double[] values, final double[] weights,\n                           final int begin, final int length) {\n        if (test(values, weights, begin, length)) {\n            Sum sum = new Sum();\n\n            // Compute initial estimate using definitional formula\n            double sumw = sum.evaluate(weights,begin,length);\n            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n\n            // Compute correction factor in second pass\n            double correction = 0;\n            for (int i = begin; i < begin + length; i++) {\n                correction += weights[i] * (values[i] - xbarw);\n            }\n            return xbarw + (correction/sumw);\n        }\n        return Double.NaN;\n    }\n",
        "begin_line": 203,
        "end_line": 220,
        "comment": "\n     * Returns the weighted arithmetic mean of the entries in the specified portion of\n     * the input array, or <code>Double.NaN</code> if the designated subarray\n     * is empty.\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if either array is null.</p>\n     * <p>\n     * See {@link Mean} for details on the computing algorithm. The two-pass algorithm\n     * described above is used here, with weights applied in computing both the original\n     * estimate and the correction factor.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the mean of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractUnivariateStatistic.test#217",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java",
        "class_name": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic",
        "signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], double[], int, int)",
        "snippet": "    protected boolean test(\n        final double[] values,\n        final double[] weights,\n        final int begin,\n        final int length) {\n        return test(values, weights, begin, length, false);\n    }\n",
        "begin_line": 217,
        "end_line": 223,
        "comment": "\n     * This method is used by <code>evaluate(double[], double[], int, int)</code> methods\n     * to verify that the begin and length parameters designate a subarray of positive length\n     * and the weights are all non-negative, non-NaN, finite, and not all zero.\n     * <p>\n     * <ul>\n     * <li>returns <code>true</code> iff the parameters designate a subarray of\n     * positive length and the weights array contains legitimate values.</li>\n     * <li>throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li></ul>\n     * </li>\n     * <li>returns <code>false</li> if the array is non-null, but\n     * <code>length</code> is 0.\n     * </ul></p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return true if the parameters are valid and designate a subarray of positive length\n     * @throws IllegalArgumentException if the indices are invalid or the array is null\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractUnivariateStatistic.test#256",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java",
        "class_name": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic",
        "signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], double[], int, int, boolean)",
        "snippet": "    protected boolean test(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty){\n\n        if (weights == null) {\n            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n        }\n\n        if (weights.length != values.length) {\n            throw new DimensionMismatchException(weights.length, values.length);\n        }\n\n        boolean containsPositiveWeight = false;\n        for (int i = begin; i < begin + length; i++) {\n            if (Double.isNaN(weights[i])) {\n                throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX, i);\n            }\n            if (Double.isInfinite(weights[i])) {\n                throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, weights[i], i);\n            }\n            if (weights[i] < 0) {\n                throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX, i, weights[i]);\n            }\n            if (!containsPositiveWeight && weights[i] > 0.0) {\n                containsPositiveWeight = true;\n            }\n        }\n\n        if (!containsPositiveWeight) {\n            throw new MathIllegalArgumentException(LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO);\n        }\n\n        return test(values, begin, length, allowEmpty);\n    }\n",
        "begin_line": 256,
        "end_line": 287,
        "comment": "\n     * This method is used by <code>evaluate(double[], double[], int, int)</code> methods\n     * to verify that the begin and length parameters designate a subarray of positive length\n     * and the weights are all non-negative, non-NaN, finite, and not all zero.\n     * <p>\n     * <ul>\n     * <li>returns <code>true</code> iff the parameters designate a subarray of\n     * non-negative length and the weights array contains legitimate values.</li>\n     * <li>throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li></ul>\n     * </li>\n     * <li>returns <code>false</li> if the array is non-null, but\n     * <code>length</code> is 0 unless <code>allowEmpty</code> is <code>true</code>.\n     * </ul></p>\n     *\n     * @param values the input array.\n     * @param weights the weights array.\n     * @param begin index of the first array element to include.\n     * @param length the number of elements to include.\n     * @param allowEmpty if {@code true} than allow zero length arrays to pass.\n     * @return {@code true} if the parameters are valid.\n     * @throws IllegalArgumentException if the indices are invalid or the array\n     * is {@code null}.\n     * @since 3.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Variance.clear#202",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.clear()",
        "snippet": "    @Override\n    public void clear() {\n        if (incMoment) {\n            moment.clear();\n        }\n    }\n",
        "begin_line": 202,
        "end_line": 207,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic": "\n     * {@inheritDoc}\n     ",
            "java.io.Serializable": null,
            "org.apache.commons.math.stat.descriptive.WeightedEvaluation": null,
            "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic": null,
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic": "\n     * Clears the internal state of the Statistic\n     ",
            "org.apache.commons.math.stat.descriptive.UnivariateStatistic": null
        },
        "susp": {
            "ochiai_susp": 0.124
        },
        "num_failing_tests": 1
    },
    {
        "name": "Sum.evaluate#118",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Sum",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Sum.evaluate(double[], int, int)",
        "snippet": "    @Override\n    public double evaluate(final double[] values, final int begin, final int length) {\n        double sum = Double.NaN;\n        if (test(values, begin, length, true)) {\n            sum = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                sum += values[i];\n            }\n        }\n        return sum;\n    }\n",
        "begin_line": 118,
        "end_line": 128,
        "comment": "\n     * The sum of the entries in the specified portion of\n     * the input array, or 0 if the designated subarray\n     * is empty.\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     *\n     * @param values the input array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the sum of the values or 0 if length = 0\n     * @throws IllegalArgumentException if the array is null or the array index\n     *  parameters are not valid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1125
        },
        "num_failing_tests": 1
    },
    {
        "name": "SecondMoment.clear#90",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment.clear()",
        "snippet": "    @Override\n    public void clear() {\n        super.clear();\n        m2 = Double.NaN;\n    }\n",
        "begin_line": 90,
        "end_line": 94,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.math.stat.descriptive.moment.FirstMoment": "\n     * {@inheritDoc}\n     ",
            "java.io.Serializable": null,
            "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic": "\n     * {@inheritDoc}\n     ",
            "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic": null,
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic": "\n     * Clears the internal state of the Statistic\n     ",
            "org.apache.commons.math.stat.descriptive.UnivariateStatistic": null
        },
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 1
    },
    {
        "name": "FirstMoment.clear#115",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.clear()",
        "snippet": "    @Override\n    public void clear() {\n        m1 = Double.NaN;\n        n = 0;\n        dev = Double.NaN;\n        nDev = Double.NaN;\n    }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic": "\n     * {@inheritDoc}\n     ",
            "java.io.Serializable": null,
            "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic": null,
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic": "\n     * Clears the internal state of the Statistic\n     ",
            "org.apache.commons.math.stat.descriptive.UnivariateStatistic": null
        },
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 1
    },
    {
        "name": "Mean.Mean#79",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Mean",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()",
        "snippet": "    public Mean() {\n        incMoment = true;\n        moment = new FirstMoment();\n    }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": " Constructs a Mean. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Variance.Variance#97",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()",
        "snippet": "    public Variance() {\n        moment = new SecondMoment();\n    }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Constructs a Variance with default (true) <code>isBiasCorrected</code>\n     * property.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0971
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractUnivariateStatistic.test#161",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java",
        "class_name": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic",
        "signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean)",
        "snippet": "    protected boolean test(final double[] values, final int begin, final int length, final boolean allowEmpty){\n\n        if (values == null) {\n            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n        }\n\n        if (begin < 0) {\n            throw new NotPositiveException(LocalizedFormats.START_POSITION, begin);\n        }\n\n        if (length < 0) {\n            throw new NotPositiveException(LocalizedFormats.LENGTH, length);\n        }\n\n        if (begin + length > values.length) {\n            throw new NumberIsTooLargeException(LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END,\n                                                begin + length, values.length, true);\n        }\n\n        if (length == 0 && !allowEmpty) {\n            return false;\n        }\n\n        return true;\n\n    }\n",
        "begin_line": 161,
        "end_line": 186,
        "comment": "\n     * This method is used by <code>evaluate(double[], int, int)</code> methods\n     * to verify that the input parameters designate a subarray of positive length.\n     * <p>\n     * <ul>\n     * <li>returns <code>true</code> iff the parameters designate a subarray of\n     * non-negative length</li>\n     * <li>throws <code>IllegalArgumentException</code> if the array is null or\n     * or the indices are invalid</li>\n     * <li>returns <code>false</li> if the array is non-null, but\n     * <code>length</code> is 0 unless <code>allowEmpty</code> is <code>true</code>\n     * </ul></p>\n     *\n     * @param values the input array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @param allowEmpty if <code>true</code> then zero length arrays are allowed\n     * @return true if the parameters are valid\n     * @throws IllegalArgumentException if the indices are invalid or the array is null\n     * @since 3.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "Sum.Sum#56",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Sum",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()",
        "snippet": "    public Sum() {\n        n = 0;\n        value = 0;\n    }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "\n     * Create a Sum instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0867
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.sqrt#374",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.sqrt(double)",
        "snippet": "    public static double sqrt(final double a) {\n        return Math.sqrt(a);\n    }\n",
        "begin_line": 374,
        "end_line": 376,
        "comment": " Compute the square root of a number.\n     * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}\n     * @param a number on which evaluation is done\n     * @return square root of a\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0811
        },
        "num_failing_tests": 1
    },
    {
        "name": "SecondMoment.SecondMoment#59",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()",
        "snippet": "    public SecondMoment() {\n        super();\n        m2 = Double.NaN;\n    }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "\n     * Create a SecondMoment instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0778
        },
        "num_failing_tests": 1
    },
    {
        "name": "FirstMoment.FirstMoment#79",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()",
        "snippet": "    public FirstMoment() {\n        n = 0;\n        m1 = Double.NaN;\n        dev = Double.NaN;\n        nDev = Double.NaN;\n    }\n",
        "begin_line": 79,
        "end_line": 84,
        "comment": "\n     * Create a FirstMoment instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    }
]