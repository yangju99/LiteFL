[
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VarianceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VarianceTest.getUnivariateStatistic()",
        "snippet": "    @Override\n    public UnivariateStatistic getUnivariateStatistic() {\n        return new Variance();\n    }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n     * {@inheritDoc}\n     ",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VarianceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VarianceTest.expectedValue()",
        "snippet": "    @Override\n    public double expectedValue() {\n        return this.var;\n    }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "\n     * {@inheritDoc}\n     ",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VarianceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VarianceTest.expectedWeightedValue()",
        "snippet": "    public double expectedWeightedValue() {\n        return this.weightedVar;\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "Expected value for  the testArray defined in UnivariateStatisticAbstractTest ",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VarianceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testNaN()",
        "snippet": "    @Test\n    public void testNaN() {\n        StandardDeviation std = new StandardDeviation();\n        Assert.assertTrue(Double.isNaN(std.getResult()));\n        std.increment(1d);\n        Assert.assertEquals(0d, std.getResult(), 0);\n    }\n",
        "begin_line": 59,
        "end_line": 65,
        "comment": "\n     * Make sure Double.NaN is returned iff n = 0\n     *\n     ",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 56)",
            "(line 62,col 9)-(line 62,col 57)",
            "(line 63,col 9)-(line 63,col 26)",
            "(line 64,col 9)-(line 64,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VarianceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()",
        "snippet": "    @Test\n    public void testPopulation() {\n        double[] values = {-1.0d, 3.1d, 4.0d, -2.1d, 22d, 11.7d, 3d, 14d};\n        SecondMoment m = new SecondMoment();\n        m.evaluate(values);  // side effect is to add values\n        Variance v1 = new Variance();\n        v1.setBiasCorrected(false);\n        Assert.assertEquals(populationVariance(values), v1.evaluate(values), 1E-14);\n        v1.incrementAll(values);\n        Assert.assertEquals(populationVariance(values), v1.getResult(), 1E-14);\n        v1 = new Variance(false, m);\n        Assert.assertEquals(populationVariance(values), v1.getResult(), 1E-14);\n        v1 = new Variance(false);\n        Assert.assertEquals(populationVariance(values), v1.evaluate(values), 1E-14);\n        v1.incrementAll(values);\n        Assert.assertEquals(populationVariance(values), v1.getResult(), 1E-14);\n    }\n",
        "begin_line": 70,
        "end_line": 86,
        "comment": "\n     * Test population version of variance\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 74)",
            "(line 73,col 9)-(line 73,col 44)",
            "(line 74,col 9)-(line 74,col 27)",
            "(line 75,col 9)-(line 75,col 37)",
            "(line 76,col 9)-(line 76,col 35)",
            "(line 77,col 9)-(line 77,col 84)",
            "(line 78,col 9)-(line 78,col 32)",
            "(line 79,col 9)-(line 79,col 79)",
            "(line 80,col 9)-(line 80,col 36)",
            "(line 81,col 9)-(line 81,col 79)",
            "(line 82,col 9)-(line 82,col 33)",
            "(line 83,col 9)-(line 83,col 84)",
            "(line 84,col 9)-(line 84,col 32)",
            "(line 85,col 9)-(line 85,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VarianceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VarianceTest.populationVariance(double[])",
        "snippet": "    protected double populationVariance(double[] v) {\n        double mean = new Mean().evaluate(v);\n        double sum = 0;\n        for (int i = 0; i < v.length; i++) {\n           sum += (v[i] - mean) * (v[i] - mean);\n        }\n        return sum / v.length;\n    }\n",
        "begin_line": 91,
        "end_line": 98,
        "comment": "\n     * Definitional formula for population variance\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 45)",
            "(line 93,col 9)-(line 93,col 23)",
            "(line 94,col 9)-(line 96,col 9)",
            "(line 97,col 9)-(line 97,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VarianceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testWeightedVariance()",
        "snippet": "    @Test\n    public void testWeightedVariance() {\n        Variance variance = new Variance();\n        Assert.assertEquals(expectedWeightedValue(),\n                variance.evaluate(testArray, testWeightsArray, 0, testArray.length), getTolerance());\n\n        // All weights = 1 -> weighted variance = unweighted variance\n        Assert.assertEquals(expectedValue(),\n                variance.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance());\n\n        // All weights the same -> when weights are normalized to sum to the length of the values array,\n        // weighted variance = unweighted value\n        Assert.assertEquals(expectedValue(),\n                variance.evaluate(testArray, MathArrays.normalizeArray(identicalWeightsArray, testArray.length),\n                        0, testArray.length), getTolerance());\n\n    }\n",
        "begin_line": 100,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 43)",
            "(line 103,col 9)-(line 104,col 101)",
            "(line 107,col 9)-(line 108,col 101)",
            "(line 112,col 9)-(line 114,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.getUnivariateStatistic()",
        "snippet": "    @Override\n    public abstract UnivariateStatistic getUnivariateStatistic();\n",
        "begin_line": 36,
        "end_line": 37,
        "comment": " Return a new instance of the statistic ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.expectedValue()",
        "snippet": "    @Override\n    public abstract double expectedValue();\n",
        "begin_line": 40,
        "end_line": 41,
        "comment": "Expected value for  the testArray defined in UnivariateStatisticAbstractTest ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()",
        "snippet": "    @Test\n    public void testIncrementation() throws Exception {\n\n        StorelessUnivariateStatistic statistic =\n            (StorelessUnivariateStatistic) getUnivariateStatistic();\n\n        // Add testArray one value at a time and check result\n        for (int i = 0; i < testArray.length; i++) {\n            statistic.increment(testArray[i]);\n        }\n\n        Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance());\n        Assert.assertEquals(testArray.length, statistic.getN());\n\n        statistic.clear();\n\n        // Add testArray all at once and check again\n        statistic.incrementAll(testArray);\n        Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance());\n        Assert.assertEquals(testArray.length, statistic.getN());\n\n        statistic.clear();\n\n        // Cleared\n        checkClearValue(statistic);\n        Assert.assertEquals(0, statistic.getN());\n\n    }\n",
        "begin_line": 46,
        "end_line": 73,
        "comment": "\n     *  Verifies that increment() and incrementAll work properly.\n     ",
        "child_ranges": [
            "(line 49,col 9)-(line 50,col 68)",
            "(line 53,col 9)-(line 55,col 9)",
            "(line 57,col 9)-(line 57,col 84)",
            "(line 58,col 9)-(line 58,col 64)",
            "(line 60,col 9)-(line 60,col 26)",
            "(line 63,col 9)-(line 63,col 42)",
            "(line 64,col 9)-(line 64,col 84)",
            "(line 65,col 9)-(line 65,col 64)",
            "(line 67,col 9)-(line 67,col 26)",
            "(line 70,col 9)-(line 70,col 35)",
            "(line 71,col 9)-(line 71,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.checkClearValue(org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)",
        "snippet": "    protected void checkClearValue(StorelessUnivariateStatistic statistic){\n        Assert.assertTrue(Double.isNaN(statistic.getResult()));\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()",
        "snippet": "    @Test\n    public void testSerialization() throws Exception {\n\n        StorelessUnivariateStatistic statistic =\n            (StorelessUnivariateStatistic) getUnivariateStatistic();\n\n        TestUtils.checkSerializedEquality(statistic);\n\n        statistic.clear();\n\n        for (int i = 0; i < testArray.length; i++) {\n            statistic.increment(testArray[i]);\n            if(i % 5 == 0)\n                statistic = (StorelessUnivariateStatistic)TestUtils.serializeAndRecover(statistic);\n        }\n\n        TestUtils.checkSerializedEquality(statistic);\n\n        Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance());\n\n        statistic.clear();\n\n        checkClearValue(statistic);\n\n    }\n",
        "begin_line": 79,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 83,col 68)",
            "(line 85,col 9)-(line 85,col 53)",
            "(line 87,col 9)-(line 87,col 26)",
            "(line 89,col 9)-(line 93,col 9)",
            "(line 95,col 9)-(line 95,col 53)",
            "(line 97,col 9)-(line 97,col 84)",
            "(line 99,col 9)-(line 99,col 26)",
            "(line 101,col 9)-(line 101,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testEqualsAndHashCode()",
        "snippet": "    @Test\n    public void testEqualsAndHashCode() {\n        StorelessUnivariateStatistic statistic =\n            (StorelessUnivariateStatistic) getUnivariateStatistic();\n        StorelessUnivariateStatistic statistic2 = null;\n\n        Assert.assertTrue(\"non-null, compared to null\", !statistic.equals(statistic2));\n        Assert.assertTrue(\"reflexive, non-null\", statistic.equals(statistic));\n\n        int emptyHash = statistic.hashCode();\n        statistic2 = (StorelessUnivariateStatistic) getUnivariateStatistic();\n        Assert.assertTrue(\"empty stats should be equal\", statistic.equals(statistic2));\n        Assert.assertEquals(\"empty stats should have the same hashcode\",\n                emptyHash, statistic2.hashCode());\n\n        statistic.increment(1d);\n        Assert.assertTrue(\"reflexive, non-empty\", statistic.equals(statistic));\n        Assert.assertTrue(\"non-empty, compared to empty\", !statistic.equals(statistic2));\n        Assert.assertTrue(\"non-empty, compared to empty\", !statistic2.equals(statistic));\n        Assert.assertTrue(\"non-empty stat should have different hashcode from empty stat\",\n                statistic.hashCode() != emptyHash);\n\n        statistic2.increment(1d);\n        Assert.assertTrue(\"stats with same data should be equal\", statistic.equals(statistic2));\n        Assert.assertEquals(\"stats with same data should have the same hashcode\",\n                statistic.hashCode(), statistic2.hashCode());\n\n        statistic.increment(Double.POSITIVE_INFINITY);\n        Assert.assertTrue(\"stats with different n's should not be equal\", !statistic2.equals(statistic));\n        Assert.assertTrue(\"stats with different n's should have different hashcodes\",\n                statistic.hashCode() != statistic2.hashCode());\n\n        statistic2.increment(Double.POSITIVE_INFINITY);\n        Assert.assertTrue(\"stats with same data should be equal\", statistic.equals(statistic2));\n        Assert.assertEquals(\"stats with same data should have the same hashcode\",\n                statistic.hashCode(), statistic2.hashCode());\n\n        statistic.clear();\n        statistic2.clear();\n        Assert.assertTrue(\"cleared stats should be equal\", statistic.equals(statistic2));\n        Assert.assertEquals(\"cleared stats should have thashcode of empty stat\",\n                emptyHash, statistic2.hashCode());\n        Assert.assertEquals(\"cleared stats should have thashcode of empty stat\",\n                emptyHash, statistic.hashCode());\n\n    }\n",
        "begin_line": 105,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 108,col 68)",
            "(line 109,col 9)-(line 109,col 55)",
            "(line 111,col 9)-(line 111,col 87)",
            "(line 112,col 9)-(line 112,col 78)",
            "(line 114,col 9)-(line 114,col 45)",
            "(line 115,col 9)-(line 115,col 77)",
            "(line 116,col 9)-(line 116,col 87)",
            "(line 117,col 9)-(line 118,col 50)",
            "(line 120,col 9)-(line 120,col 32)",
            "(line 121,col 9)-(line 121,col 79)",
            "(line 122,col 9)-(line 122,col 89)",
            "(line 123,col 9)-(line 123,col 89)",
            "(line 124,col 9)-(line 125,col 51)",
            "(line 127,col 9)-(line 127,col 33)",
            "(line 128,col 9)-(line 128,col 96)",
            "(line 129,col 9)-(line 130,col 61)",
            "(line 132,col 9)-(line 132,col 54)",
            "(line 133,col 9)-(line 133,col 105)",
            "(line 134,col 9)-(line 135,col 63)",
            "(line 137,col 9)-(line 137,col 55)",
            "(line 138,col 9)-(line 138,col 96)",
            "(line 139,col 9)-(line 140,col 61)",
            "(line 142,col 9)-(line 142,col 26)",
            "(line 143,col 9)-(line 143,col 27)",
            "(line 144,col 9)-(line 144,col 89)",
            "(line 145,col 9)-(line 146,col 50)",
            "(line 147,col 9)-(line 148,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testMomentSmallSamples()",
        "snippet": "    @Test\n    public void testMomentSmallSamples() {\n        UnivariateStatistic stat = getUnivariateStatistic();\n        if (stat instanceof SecondMoment) {\n            SecondMoment moment = (SecondMoment) getUnivariateStatistic();\n            Assert.assertTrue(Double.isNaN(moment.getResult()));\n            moment.increment(1d);\n            Assert.assertEquals(0d, moment.getResult(), 0);\n        }\n    }\n",
        "begin_line": 152,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 60)",
            "(line 155,col 9)-(line 160,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()",
        "snippet": "    @Test\n    public void testConsistency() {\n        StorelessUnivariateStatistic stat = (StorelessUnivariateStatistic) getUnivariateStatistic();\n        stat.incrementAll(testArray);\n        Assert.assertEquals(stat.getResult(), stat.evaluate(testArray), getTolerance());\n        for (int i = 0; i < smallSamples.length; i++) {\n            stat.clear();\n            for (int j =0; j < smallSamples[i].length; j++) {\n                stat.increment(smallSamples[i][j]);\n            }\n            TestUtils.assertEquals(stat.getResult(), stat.evaluate(smallSamples[i]), getTolerance());\n        }\n    }\n",
        "begin_line": 167,
        "end_line": 179,
        "comment": "\n     * Make sure that evaluate(double[]) and inrementAll(double[]),\n     * getResult() give same results.\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 100)",
            "(line 170,col 9)-(line 170,col 37)",
            "(line 171,col 9)-(line 171,col 88)",
            "(line 172,col 9)-(line 178,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testCopyConsistency()",
        "snippet": "    @Test\n    public void testCopyConsistency() {\n\n        StorelessUnivariateStatistic master =\n            (StorelessUnivariateStatistic) getUnivariateStatistic();\n\n        StorelessUnivariateStatistic replica = null;\n\n        // Randomly select a portion of testArray to load first\n        long index = FastMath.round((FastMath.random()) * testArray.length);\n\n        // Put first half in master and copy master to replica\n        master.incrementAll(testArray, 0, (int) index);\n        replica = master.copy();\n\n        // Check same\n        Assert.assertTrue(replica.equals(master));\n        Assert.assertTrue(master.equals(replica));\n\n        // Now add second part to both and check again\n        master.incrementAll(testArray,\n                (int) index, (int) (testArray.length - index));\n        replica.incrementAll(testArray,\n                (int) index, (int) (testArray.length - index));\n        Assert.assertTrue(replica.equals(master));\n        Assert.assertTrue(master.equals(replica));\n    }\n",
        "begin_line": 186,
        "end_line": 212,
        "comment": "\n     * Verifies that copied statistics remain equal to originals when\n     * incremented the same way.\n     *\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 190,col 68)",
            "(line 192,col 9)-(line 192,col 52)",
            "(line 195,col 9)-(line 195,col 76)",
            "(line 198,col 9)-(line 198,col 55)",
            "(line 199,col 9)-(line 199,col 32)",
            "(line 202,col 9)-(line 202,col 50)",
            "(line 203,col 9)-(line 203,col 50)",
            "(line 206,col 9)-(line 207,col 63)",
            "(line 208,col 9)-(line 209,col 63)",
            "(line 210,col 9)-(line 210,col 50)",
            "(line 211,col 9)-(line 211,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial() {\n        StorelessUnivariateStatistic s =\n            (StorelessUnivariateStatistic) getUnivariateStatistic();\n        Assert.assertEquals(s, TestUtils.serializeAndRecover(s));\n    }\n",
        "begin_line": 214,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 217,col 68)",
            "(line 218,col 9)-(line 218,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.getUnivariateStatistic()",
        "snippet": "    public abstract UnivariateStatistic getUnivariateStatistic();\n",
        "begin_line": 87,
        "end_line": 87,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.expectedValue()",
        "snippet": "    public abstract double expectedValue();\n",
        "begin_line": 89,
        "end_line": 89,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.getTolerance()",
        "snippet": "    public double getTolerance() {\n        return tolerance;\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluation()",
        "snippet": "    @Test\n    public void testEvaluation() throws Exception {\n        Assert.assertEquals(\n            expectedValue(),\n            getUnivariateStatistic().evaluate(testArray),\n            getTolerance());\n    }\n",
        "begin_line": 95,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 100,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluateArraySegment()",
        "snippet": "    @Test\n    public void testEvaluateArraySegment() {\n        final UnivariateStatistic stat = getUnivariateStatistic();\n        final double[] arrayZero = new double[5];\n        System.arraycopy(testArray, 0, arrayZero, 0, 5);\n        Assert.assertEquals(stat.evaluate(arrayZero), stat.evaluate(testArray, 0, 5), 0);\n        final double[] arrayOne = new double[5];\n        System.arraycopy(testArray, 5, arrayOne, 0, 5);\n        Assert.assertEquals(stat.evaluate(arrayOne), stat.evaluate(testArray, 5, 5), 0);\n        final double[] arrayEnd = new double[5];\n        System.arraycopy(testArray, testArray.length - 5, arrayEnd, 0, 5);\n        Assert.assertEquals(stat.evaluate(arrayEnd), stat.evaluate(testArray, testArray.length - 5, 5), 0);\n    }\n",
        "begin_line": 103,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 66)",
            "(line 106,col 9)-(line 106,col 49)",
            "(line 107,col 9)-(line 107,col 56)",
            "(line 108,col 9)-(line 108,col 89)",
            "(line 109,col 9)-(line 109,col 48)",
            "(line 110,col 9)-(line 110,col 55)",
            "(line 111,col 9)-(line 111,col 88)",
            "(line 112,col 9)-(line 112,col 48)",
            "(line 113,col 9)-(line 113,col 74)",
            "(line 114,col 9)-(line 114,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluateArraySegmentWeighted()",
        "snippet": "    @Test\n    public void testEvaluateArraySegmentWeighted() {\n        // See if this statistic computes weighted statistics\n        // If not, skip this test\n        UnivariateStatistic statistic = getUnivariateStatistic();\n        if (!(statistic instanceof WeightedEvaluation)) {\n            return;\n        }\n        final WeightedEvaluation stat = (WeightedEvaluation) getUnivariateStatistic();\n        final double[] arrayZero = new double[5];\n        final double[] weightZero = new double[5];\n        System.arraycopy(testArray, 0, arrayZero, 0, 5);\n        System.arraycopy(testWeightsArray, 0, weightZero, 0, 5);\n        Assert.assertEquals(stat.evaluate(arrayZero, weightZero),\n                stat.evaluate(testArray, testWeightsArray, 0, 5), 0);\n        final double[] arrayOne = new double[5];\n        final double[] weightOne = new double[5];\n        System.arraycopy(testArray, 5, arrayOne, 0, 5);\n        System.arraycopy(testWeightsArray, 5, weightOne, 0, 5);\n        Assert.assertEquals(stat.evaluate(arrayOne, weightOne),\n                stat.evaluate(testArray, testWeightsArray, 5, 5), 0);\n        final double[] arrayEnd = new double[5];\n        final double[] weightEnd = new double[5];\n        System.arraycopy(testArray, testArray.length - 5, arrayEnd, 0, 5);\n        System.arraycopy(testWeightsArray, testArray.length - 5, weightEnd, 0, 5);\n        Assert.assertEquals(stat.evaluate(arrayEnd, weightEnd),\n                stat.evaluate(testArray, testWeightsArray, testArray.length - 5, 5), 0);\n    }\n",
        "begin_line": 117,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 65)",
            "(line 122,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 86)",
            "(line 126,col 9)-(line 126,col 49)",
            "(line 127,col 9)-(line 127,col 50)",
            "(line 128,col 9)-(line 128,col 56)",
            "(line 129,col 9)-(line 129,col 64)",
            "(line 130,col 9)-(line 131,col 69)",
            "(line 132,col 9)-(line 132,col 48)",
            "(line 133,col 9)-(line 133,col 49)",
            "(line 134,col 9)-(line 134,col 55)",
            "(line 135,col 9)-(line 135,col 63)",
            "(line 136,col 9)-(line 137,col 69)",
            "(line 138,col 9)-(line 138,col 48)",
            "(line 139,col 9)-(line 139,col 49)",
            "(line 140,col 9)-(line 140,col 74)",
            "(line 141,col 9)-(line 141,col 82)",
            "(line 142,col 9)-(line 143,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testCopy()",
        "snippet": "    @Test\n    public void testCopy() throws Exception {\n        UnivariateStatistic original = getUnivariateStatistic();\n        UnivariateStatistic copy = original.copy();\n        Assert.assertEquals(\n                expectedValue(),\n                copy.evaluate(testArray),\n                getTolerance());\n    }\n",
        "begin_line": 146,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 64)",
            "(line 149,col 9)-(line 149,col 51)",
            "(line 150,col 9)-(line 153,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest",
        "child_classes": [
            "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest",
            "org.apache.commons.math.stat.descriptive.moment.VarianceTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java",
        "signature": "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testWeightedConsistency()",
        "snippet": "    @Test\n    public void testWeightedConsistency() throws Exception {\n\n        // See if this statistic computes weighted statistics\n        // If not, skip this test\n        UnivariateStatistic statistic = getUnivariateStatistic();\n        if (!(statistic instanceof WeightedEvaluation)) {\n            return;\n        }\n\n        // Create arrays of values and corresponding integral weights\n        // and longer array with values repeated according to the weights\n        final int len = 10;        // length of values array\n        final double mu = 0;       // mean of test data\n        final double sigma = 5;    // std dev of test data\n        double[] values = new double[len];\n        double[] weights = new double[len];\n        RandomData randomData = new RandomDataImpl();\n\n        // Fill weights array with random int values between 1 and 5\n        int[] intWeights = new int[len];\n        for (int i = 0; i < len; i++) {\n            intWeights[i] = randomData.nextInt(1, 5);\n            weights[i] = intWeights[i];\n        }\n\n        // Fill values array with random data from N(mu, sigma)\n        // and fill valuesList with values from values array with\n        // values[i] repeated weights[i] times, each i\n        List<Double> valuesList = new ArrayList<Double>();\n        for (int i = 0; i < len; i++) {\n            double value = randomData.nextGaussian(mu, sigma);\n            values[i] = value;\n            for (int j = 0; j < intWeights[i]; j++) {\n                valuesList.add(new Double(value));\n            }\n        }\n\n        // Dump valuesList into repeatedValues array\n        int sumWeights = valuesList.size();\n        double[] repeatedValues = new double[sumWeights];\n        for (int i = 0; i < sumWeights; i++) {\n            repeatedValues[i] = valuesList.get(i);\n        }\n\n        // Compare result of weighted statistic computation with direct computation\n        // on array of repeated values\n        WeightedEvaluation weightedStatistic = (WeightedEvaluation) statistic;\n        TestUtils.assertRelativelyEquals(statistic.evaluate(repeatedValues),\n                weightedStatistic.evaluate(values, weights, 0, values.length),\n                10E-14);\n\n        // Check consistency of weighted evaluation methods\n        Assert.assertEquals(weightedStatistic.evaluate(values, weights, 0, values.length),\n                weightedStatistic.evaluate(values, weights), Double.MIN_VALUE);\n\n    }\n",
        "begin_line": 165,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 65)",
            "(line 171,col 9)-(line 173,col 9)",
            "(line 177,col 9)-(line 177,col 27)",
            "(line 178,col 9)-(line 178,col 28)",
            "(line 179,col 9)-(line 179,col 31)",
            "(line 180,col 9)-(line 180,col 42)",
            "(line 181,col 9)-(line 181,col 43)",
            "(line 182,col 9)-(line 182,col 53)",
            "(line 185,col 9)-(line 185,col 40)",
            "(line 186,col 9)-(line 189,col 9)",
            "(line 194,col 9)-(line 194,col 58)",
            "(line 195,col 9)-(line 201,col 9)",
            "(line 204,col 9)-(line 204,col 43)",
            "(line 205,col 9)-(line 205,col 57)",
            "(line 206,col 9)-(line 208,col 9)",
            "(line 212,col 9)-(line 212,col 78)",
            "(line 213,col 9)-(line 215,col 24)",
            "(line 218,col 9)-(line 219,col 79)"
        ]
    }
]