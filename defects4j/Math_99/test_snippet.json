[
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.MathUtilsTest(java.lang.String)",
        "snippet": "    public MathUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(MathUtilsTest.class);\n        suite.setName(\"MathUtils Tests\");\n        return suite;\n    }\n",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 61)",
            "(line 42,col 9)-(line 42,col 41)",
            "(line 43,col 9)-(line 43,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.binomialCoefficient(int, int)",
        "snippet": "    private long binomialCoefficient(int n, int k) throws ArithmeticException {\n        if (binomialCache.size() > n) {\n            Long cachedResult = binomialCache.get(n).get(new Integer(k));\n            if (cachedResult != null) {\n                return cachedResult.longValue();\n            }\n        }\n        long result = -1;\n        if ((n == k) || (k == 0)) {\n            result = 1;\n        } else if ((k == 1) || (k == n - 1)) {\n            result = n;\n        } else {\n            // Reduce stack depth for larger values of n\n            if (k < n - 100) {\n                binomialCoefficient(n - 100, k);\n            }\n            if (k > 100) {\n                binomialCoefficient(n - 100, k - 100);\n            }\n            result = MathUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),\n                binomialCoefficient(n - 1, k));\n        }\n        if (result == -1) {\n            throw new ArithmeticException(\n                \"error computing binomial coefficient\");\n        }\n        for (int i = binomialCache.size(); i < n + 1; i++) {\n            binomialCache.add(new HashMap<Integer, Long>());\n        }\n        binomialCache.get(n).put(new Integer(k), new Long(result));\n        return result;\n    }\n",
        "begin_line": 52,
        "end_line": 84,
        "comment": "\n     * Exact (caching) recursive implementation to test against\n     ",
        "child_ranges": [
            "(line 53,col 9)-(line 58,col 9)",
            "(line 59,col 9)-(line 59,col 25)",
            "(line 60,col 9)-(line 74,col 9)",
            "(line 75,col 9)-(line 78,col 9)",
            "(line 79,col 9)-(line 81,col 9)",
            "(line 82,col 9)-(line 82,col 67)",
            "(line 83,col 9)-(line 83,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.factorial(int)",
        "snippet": "    private long factorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n",
        "begin_line": 89,
        "end_line": 95,
        "comment": "\n     * Exact direct multiplication implementation to test against\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 24)",
            "(line 91,col 9)-(line 93,col 9)",
            "(line 94,col 9)-(line 94,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.test0Choose0()",
        "snippet": "    public void test0Choose0() {\n        assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);\n        assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);\n        assertEquals(MathUtils.binomialCoefficient(0, 0), 1);\n    }\n",
        "begin_line": 98,
        "end_line": 102,
        "comment": " Verify that b(0,0) = 1 ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 71)",
            "(line 100,col 9)-(line 100,col 68)",
            "(line 101,col 9)-(line 101,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheck()",
        "snippet": "    public void testAddAndCheck() {\n        int big = Integer.MAX_VALUE;\n        int bigNeg = Integer.MIN_VALUE;\n        assertEquals(big, MathUtils.addAndCheck(big, 0));\n        try {\n            MathUtils.addAndCheck(big, 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n        try {\n            MathUtils.addAndCheck(bigNeg, -1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n    }\n",
        "begin_line": 104,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 36)",
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 107,col 57)",
            "(line 108,col 9)-(line 112,col 9)",
            "(line 113,col 9)-(line 117,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLong()",
        "snippet": "    public void testAddAndCheckLong() {\n        long max = Long.MAX_VALUE;\n        long min = Long.MIN_VALUE;\n        assertEquals(max, MathUtils.addAndCheck(max, 0L));\n        assertEquals(min, MathUtils.addAndCheck(min, 0L));\n        assertEquals(max, MathUtils.addAndCheck(0L, max));\n        assertEquals(min, MathUtils.addAndCheck(0L, min));\n        assertEquals(1, MathUtils.addAndCheck(-1L, 2L));\n        assertEquals(1, MathUtils.addAndCheck(2L, -1L));\n        assertEquals(-3, MathUtils.addAndCheck(-2L, -1L));\n        assertEquals(min, MathUtils.addAndCheck(min + 1, -1L));\n        testAddAndCheckLongFailure(max, 1L);\n        testAddAndCheckLongFailure(min, -1L);\n        testAddAndCheckLongFailure(1L, max);\n        testAddAndCheckLongFailure(-1L, min);\n    }\n",
        "begin_line": 120,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 34)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 123,col 9)-(line 123,col 58)",
            "(line 124,col 9)-(line 124,col 58)",
            "(line 125,col 9)-(line 125,col 58)",
            "(line 126,col 9)-(line 126,col 58)",
            "(line 127,col 9)-(line 127,col 56)",
            "(line 128,col 9)-(line 128,col 56)",
            "(line 129,col 9)-(line 129,col 58)",
            "(line 130,col 9)-(line 130,col 63)",
            "(line 131,col 9)-(line 131,col 44)",
            "(line 132,col 9)-(line 132,col 45)",
            "(line 133,col 9)-(line 133,col 44)",
            "(line 134,col 9)-(line 134,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLongFailure(long, long)",
        "snippet": "    private void testAddAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.addAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 137,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 143,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()",
        "snippet": "    public void testBinomialCoefficient() {\n        long[] bcoef5 = {\n            1,\n            5,\n            10,\n            10,\n            5,\n            1 };\n        long[] bcoef6 = {\n            1,\n            6,\n            15,\n            20,\n            15,\n            6,\n            1 };\n        for (int i = 0; i < 6; i++) {\n            assertEquals(\"5 choose \" + i, bcoef5[i], MathUtils.binomialCoefficient(5, i));\n        }\n        for (int i = 0; i < 7; i++) {\n            assertEquals(\"6 choose \" + i, bcoef6[i], MathUtils.binomialCoefficient(6, i));\n        }\n\n        for (int n = 1; n < 10; n++) {\n            for (int k = 0; k <= n; k++) {\n                assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficient(n, k));\n                assertEquals(n + \" choose \" + k, (double)binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);\n                assertEquals(n + \" choose \" + k, Math.log((double)binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);\n            }\n        }\n\n        int[] n = { 34, 66, 100, 1500, 1500 };\n        int[] k = { 17, 33, 10, 1500 - 4, 4 };\n        for (int i = 0; i < n.length; i++) {\n            long expected = binomialCoefficient(n[i], k[i]);\n            assertEquals(n[i] + \" choose \" + k[i], expected,\n                MathUtils.binomialCoefficient(n[i], k[i]));\n            assertEquals(n[i] + \" choose \" + k[i], (double) expected,\n                MathUtils.binomialCoefficientDouble(n[i], k[i]), 0.0);\n            assertEquals(\"log(\" + n[i] + \" choose \" + k[i] + \")\", Math.log(expected),\n                MathUtils.binomialCoefficientLog(n[i], k[i]), 0.0);\n        }\n    }\n",
        "begin_line": 146,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 153,col 16)",
            "(line 154,col 9)-(line 161,col 16)",
            "(line 162,col 9)-(line 164,col 9)",
            "(line 165,col 9)-(line 167,col 9)",
            "(line 169,col 9)-(line 175,col 9)",
            "(line 177,col 9)-(line 177,col 46)",
            "(line 178,col 9)-(line 178,col 46)",
            "(line 179,col 9)-(line 187,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge()",
        "snippet": "    public void testBinomialCoefficientLarge() throws Exception {\n        // This tests all legal and illegal values for n <= 200.\n        for (int n = 0; n <= 200; n++) {\n            for (int k = 0; k <= n; k++) {\n                long ourResult = -1;\n                long exactResult = -1;\n                boolean shouldThrow = false;\n                boolean didThrow = false;\n                try {\n                    ourResult = MathUtils.binomialCoefficient(n, k);\n                } catch (ArithmeticException ex) {\n                    didThrow = true;\n                }\n                try {\n                    exactResult = binomialCoefficient(n, k);\n                } catch (ArithmeticException ex) {\n                    shouldThrow = true;\n                }\n                assertEquals(n + \" choose \" + k, exactResult, ourResult);\n                assertEquals(n + \" choose \" + k, shouldThrow, didThrow);\n                assertTrue(n + \" choose \" + k, (n > 66 || !didThrow));\n\n                if (!shouldThrow && exactResult > 1) {\n                    assertEquals(n + \" choose \" + k, 1.,\n                        MathUtils.binomialCoefficientDouble(n, k) / exactResult, 1e-10);\n                    assertEquals(n + \" choose \" + k, 1,\n                        MathUtils.binomialCoefficientLog(n, k) / Math.log(exactResult), 1e-10);\n                }\n            }\n        }\n\n        long ourResult = MathUtils.binomialCoefficient(300, 3);\n        long exactResult = binomialCoefficient(300, 3);\n        assertEquals(exactResult, ourResult);\n\n        ourResult = MathUtils.binomialCoefficient(700, 697);\n        exactResult = binomialCoefficient(700, 697);\n        assertEquals(exactResult, ourResult);\n\n        // This one should throw\n        try {\n            MathUtils.binomialCoefficient(700, 300);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // Expected\n        }\n\n        int n = 10000;\n        ourResult = MathUtils.binomialCoefficient(n, 3);\n        exactResult = binomialCoefficient(n, 3);\n        assertEquals(exactResult, ourResult);\n        assertEquals(1, MathUtils.binomialCoefficientDouble(n, 3) / exactResult, 1e-10);\n        assertEquals(1, MathUtils.binomialCoefficientLog(n, 3) / Math.log(exactResult), 1e-10);\n\n    }\n",
        "begin_line": 194,
        "end_line": 248,
        "comment": "\n     * Tests correctness for large n and sharpness of upper bound in API doc\n     * JIRA: MATH-241\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 223,col 9)",
            "(line 225,col 9)-(line 225,col 63)",
            "(line 226,col 9)-(line 226,col 55)",
            "(line 227,col 9)-(line 227,col 45)",
            "(line 229,col 9)-(line 229,col 60)",
            "(line 230,col 9)-(line 230,col 52)",
            "(line 231,col 9)-(line 231,col 45)",
            "(line 234,col 9)-(line 239,col 9)",
            "(line 241,col 9)-(line 241,col 22)",
            "(line 242,col 9)-(line 242,col 56)",
            "(line 243,col 9)-(line 243,col 48)",
            "(line 244,col 9)-(line 244,col 45)",
            "(line 245,col 9)-(line 245,col 88)",
            "(line 246,col 9)-(line 246,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail()",
        "snippet": "    public void testBinomialCoefficientFail() {\n        try {\n            MathUtils.binomialCoefficient(4, 5);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n\n        try {\n            MathUtils.binomialCoefficientDouble(4, 5);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n\n        try {\n            MathUtils.binomialCoefficientLog(4, 5);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n\n        try {\n            MathUtils.binomialCoefficient(-1, -2);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            MathUtils.binomialCoefficientDouble(-1, -2);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            MathUtils.binomialCoefficientLog(-1, -2);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n\n        try {\n            MathUtils.binomialCoefficient(67, 30);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            ;\n        }\n        try {\n            MathUtils.binomialCoefficient(67, 34);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            ;\n        }\n        double x = MathUtils.binomialCoefficientDouble(1030, 515);\n        assertTrue(\"expecting infinite binomial coefficient\", Double\n            .isInfinite(x));\n    }\n",
        "begin_line": 250,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 256,col 9)",
            "(line 258,col 9)-(line 263,col 9)",
            "(line 265,col 9)-(line 270,col 9)",
            "(line 272,col 9)-(line 277,col 9)",
            "(line 278,col 9)-(line 283,col 9)",
            "(line 284,col 9)-(line 289,col 9)",
            "(line 291,col 9)-(line 296,col 9)",
            "(line 297,col 9)-(line 302,col 9)",
            "(line 303,col 9)-(line 303,col 66)",
            "(line 304,col 9)-(line 305,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testCosh()",
        "snippet": "    public void testCosh() {\n        double x = 3.0;\n        double expected = 10.06766;\n        assertEquals(expected, MathUtils.cosh(x), 1.0e-5);\n    }\n",
        "begin_line": 308,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 23)",
            "(line 310,col 9)-(line 310,col 35)",
            "(line 311,col 9)-(line 311,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testCoshNaN()",
        "snippet": "    public void testCoshNaN() {\n        assertTrue(Double.isNaN(MathUtils.cosh(Double.NaN)));\n    }\n",
        "begin_line": 314,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testEquals()",
        "snippet": "    public void testEquals() {\n        double[] testArray = {\n            Double.NaN,\n            Double.POSITIVE_INFINITY,\n            Double.NEGATIVE_INFINITY,\n            1d,\n            0d };\n        for (int i = 0; i < testArray.length; i++) {\n            for (int j = 0; j < testArray.length; j++) {\n                if (i == j) {\n                    assertTrue(MathUtils.equals(testArray[i], testArray[j]));\n                    assertTrue(MathUtils.equals(testArray[j], testArray[i]));\n                } else {\n                    assertTrue(!MathUtils.equals(testArray[i], testArray[j]));\n                    assertTrue(!MathUtils.equals(testArray[j], testArray[i]));\n                }\n            }\n        }\n    }\n",
        "begin_line": 318,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 319,col 9)-(line 324,col 17)",
            "(line 325,col 9)-(line 335,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testEqualsWithAllowedDelta()",
        "snippet": "    public void testEqualsWithAllowedDelta() {\n        assertTrue(MathUtils.equals(153.0000, 153.0000, .0001));\n        assertTrue(MathUtils.equals(153.0000, 153.0001, .0001));\n        assertTrue(MathUtils.equals(152.9999, 153.0000, .0001));\n        assertFalse(MathUtils.equals(153.0000, 153.0001, .00001));\n        assertFalse(MathUtils.equals(152.9998, 153.0000, .0001));\n    }\n",
        "begin_line": 338,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 64)",
            "(line 340,col 9)-(line 340,col 64)",
            "(line 341,col 9)-(line 341,col 64)",
            "(line 342,col 9)-(line 342,col 66)",
            "(line 343,col 9)-(line 343,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testArrayEquals()",
        "snippet": "    public void testArrayEquals() {\n        assertFalse(MathUtils.equals(new double[] { 1d }, null));\n        assertFalse(MathUtils.equals(null, new double[] { 1d }));\n        assertTrue(MathUtils.equals((double[]) null, (double[]) null));\n\n        assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));\n        assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));\n        assertTrue(MathUtils.equals(new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }, new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }));\n        assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },\n                                     new double[] { Double.NEGATIVE_INFINITY }));\n        assertFalse(MathUtils.equals(new double[] { 1d },\n                                     new double[] { MathUtils.nextAfter(1d, 2d) }));\n\n    }\n",
        "begin_line": 346,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 65)",
            "(line 348,col 9)-(line 348,col 65)",
            "(line 349,col 9)-(line 349,col 71)",
            "(line 351,col 9)-(line 351,col 74)",
            "(line 352,col 9)-(line 352,col 79)",
            "(line 353,col 9)-(line 359,col 40)",
            "(line 360,col 9)-(line 361,col 81)",
            "(line 362,col 9)-(line 363,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testFactorial()",
        "snippet": "    public void testFactorial() {\n        for (int i = 1; i < 21; i++) {\n            assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));\n            assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n            assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);\n        }\n        \n        assertEquals(\"0\", 1, MathUtils.factorial(0));\n        assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n        assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);\n    }\n",
        "begin_line": 367,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 368,col 9)-(line 372,col 9)",
            "(line 374,col 9)-(line 374,col 53)",
            "(line 375,col 9)-(line 375,col 69)",
            "(line 376,col 9)-(line 376,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testFactorialFail()",
        "snippet": "    public void testFactorialFail() {\n        try {\n            MathUtils.factorial(-1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            MathUtils.factorialDouble(-1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            MathUtils.factorialLog(-1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            MathUtils.factorial(21);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            ;\n        }\n        assertTrue(\"expecting infinite factorial value\", Double.isInfinite(MathUtils.factorialDouble(171)));\n    }\n",
        "begin_line": 379,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 385,col 9)",
            "(line 386,col 9)-(line 391,col 9)",
            "(line 392,col 9)-(line 397,col 9)",
            "(line 398,col 9)-(line 403,col 9)",
            "(line 404,col 9)-(line 404,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testGcd()",
        "snippet": "    public void testGcd() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.gcd(0, 0));\n\n        assertEquals(b, MathUtils.gcd(0, b));\n        assertEquals(a, MathUtils.gcd(a, 0));\n        assertEquals(b, MathUtils.gcd(0, -b));\n        assertEquals(a, MathUtils.gcd(-a, 0));\n\n        assertEquals(10, MathUtils.gcd(a, b));\n        assertEquals(10, MathUtils.gcd(-a, b));\n        assertEquals(10, MathUtils.gcd(a, -b));\n        assertEquals(10, MathUtils.gcd(-a, -b));\n\n        assertEquals(1, MathUtils.gcd(a, c));\n        assertEquals(1, MathUtils.gcd(-a, c));\n        assertEquals(1, MathUtils.gcd(a, -c));\n        assertEquals(1, MathUtils.gcd(-a, -c));\n\n        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));\n        assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }\n",
        "begin_line": 407,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 408,col 9)-(line 408,col 19)",
            "(line 409,col 9)-(line 409,col 19)",
            "(line 410,col 9)-(line 410,col 19)",
            "(line 412,col 9)-(line 412,col 45)",
            "(line 414,col 9)-(line 414,col 45)",
            "(line 415,col 9)-(line 415,col 45)",
            "(line 416,col 9)-(line 416,col 46)",
            "(line 417,col 9)-(line 417,col 46)",
            "(line 419,col 9)-(line 419,col 46)",
            "(line 420,col 9)-(line 420,col 47)",
            "(line 421,col 9)-(line 421,col 47)",
            "(line 422,col 9)-(line 422,col 48)",
            "(line 424,col 9)-(line 424,col 45)",
            "(line 425,col 9)-(line 425,col 46)",
            "(line 426,col 9)-(line 426,col 46)",
            "(line 427,col 9)-(line 427,col 47)",
            "(line 429,col 9)-(line 429,col 75)",
            "(line 431,col 9)-(line 431,col 77)",
            "(line 432,col 9)-(line 432,col 78)",
            "(line 433,col 9)-(line 433,col 70)",
            "(line 434,col 9)-(line 440,col 9)",
            "(line 441,col 9)-(line 447,col 9)",
            "(line 448,col 9)-(line 454,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testHash()",
        "snippet": "    public void testHash() {\n        double[] testArray = {\n            Double.NaN,\n            Double.POSITIVE_INFINITY,\n            Double.NEGATIVE_INFINITY,\n            1d,\n            0d,\n            1E-14,\n            (1 + 1E-14),\n            Double.MIN_VALUE,\n            Double.MAX_VALUE };\n        for (int i = 0; i < testArray.length; i++) {\n            for (int j = 0; j < testArray.length; j++) {\n                if (i == j) {\n                    assertEquals(MathUtils.hash(testArray[i]), MathUtils.hash(testArray[j]));\n                    assertEquals(MathUtils.hash(testArray[j]), MathUtils.hash(testArray[i]));\n                } else {\n                    assertTrue(MathUtils.hash(testArray[i]) != MathUtils.hash(testArray[j]));\n                    assertTrue(MathUtils.hash(testArray[j]) != MathUtils.hash(testArray[i]));\n                }\n            }\n        }\n    }\n",
        "begin_line": 457,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 458,col 9)-(line 467,col 31)",
            "(line 468,col 9)-(line 478,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testArrayHash()",
        "snippet": "    public void testArrayHash() {\n        assertEquals(0, MathUtils.hash((double[]) null));\n        assertEquals(MathUtils.hash(new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }),\n                     MathUtils.hash(new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }));\n        assertFalse(MathUtils.hash(new double[] { 1d }) ==\n                    MathUtils.hash(new double[] { MathUtils.nextAfter(1d, 2d) }));\n        assertFalse(MathUtils.hash(new double[] { 1d }) ==\n                    MathUtils.hash(new double[] { 1d, 1d }));\n    }\n",
        "begin_line": 481,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 482,col 9)-(line 482,col 57)",
            "(line 483,col 9)-(line 490,col 40)",
            "(line 491,col 9)-(line 492,col 82)",
            "(line 493,col 9)-(line 494,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testPermutedArrayHash()",
        "snippet": "    public void testPermutedArrayHash() {\n        double[] original = new double[10];\n        double[] permuted = new double[10];\n        RandomDataImpl random = new RandomDataImpl();\n        \n        // Generate 10 distinct random values\n        for (int i = 0; i < 10; i++) {\n            original[i] = random.nextUniform((double)i + 0.5, (double)i + 0.75);\n        }\n        \n        // Generate a random permutation, making sure it is not the identity\n        boolean isIdentity = true;\n        do {\n            int[] permutation = random.nextPermutation(10, 10);\n            for (int i = 0; i < 10; i++) {\n                if (i != permutation[i]) {\n                    isIdentity = false;\n                }\n                permuted[i] = original[permutation[i]];\n            }\n        } while (isIdentity);\n        \n        // Verify that permuted array has different hash\n        assertFalse(MathUtils.hash(original) == MathUtils.hash(permuted));\n    }\n",
        "begin_line": 500,
        "end_line": 524,
        "comment": "\n     * Make sure that permuted arrays do not hash to the same value.\n     ",
        "child_ranges": [
            "(line 501,col 9)-(line 501,col 43)",
            "(line 502,col 9)-(line 502,col 43)",
            "(line 503,col 9)-(line 503,col 53)",
            "(line 506,col 9)-(line 508,col 9)",
            "(line 511,col 9)-(line 511,col 34)",
            "(line 512,col 9)-(line 520,col 29)",
            "(line 523,col 9)-(line 523,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorByte()",
        "snippet": "    public void testIndicatorByte() {\n        assertEquals((byte)1, MathUtils.indicator((byte)2));\n        assertEquals((byte)1, MathUtils.indicator((byte)0));\n        assertEquals((byte)(-1), MathUtils.indicator((byte)(-2)));\n    }\n",
        "begin_line": 526,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 527,col 9)-(line 527,col 60)",
            "(line 528,col 9)-(line 528,col 60)",
            "(line 529,col 9)-(line 529,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorDouble()",
        "snippet": "    public void testIndicatorDouble() {\n        double delta = 0.0;\n        assertEquals(1.0, MathUtils.indicator(2.0), delta);\n        assertEquals(1.0, MathUtils.indicator(0.0), delta);\n        assertEquals(-1.0, MathUtils.indicator(-2.0), delta);\n        assertEquals(Double.NaN, MathUtils.indicator(Double.NaN));\n    }\n",
        "begin_line": 532,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 533,col 9)-(line 533,col 27)",
            "(line 534,col 9)-(line 534,col 59)",
            "(line 535,col 9)-(line 535,col 59)",
            "(line 536,col 9)-(line 536,col 61)",
            "(line 537,col 9)-(line 537,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorFloat()",
        "snippet": "    public void testIndicatorFloat() {\n        float delta = 0.0F;\n        assertEquals(1.0F, MathUtils.indicator(2.0F), delta);\n        assertEquals(1.0F, MathUtils.indicator(0.0F), delta);\n        assertEquals(-1.0F, MathUtils.indicator(-2.0F), delta);\n    }\n",
        "begin_line": 540,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 541,col 9)-(line 541,col 27)",
            "(line 542,col 9)-(line 542,col 61)",
            "(line 543,col 9)-(line 543,col 61)",
            "(line 544,col 9)-(line 544,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorInt()",
        "snippet": "    public void testIndicatorInt() {\n        assertEquals((int)1, MathUtils.indicator((int)(2)));\n        assertEquals((int)1, MathUtils.indicator((int)(0)));\n        assertEquals((int)(-1), MathUtils.indicator((int)(-2)));\n    }\n",
        "begin_line": 547,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 548,col 9)-(line 548,col 60)",
            "(line 549,col 9)-(line 549,col 60)",
            "(line 550,col 9)-(line 550,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorLong()",
        "snippet": "    public void testIndicatorLong() {\n        assertEquals(1L, MathUtils.indicator(2L));\n        assertEquals(1L, MathUtils.indicator(0L));\n        assertEquals(-1L, MathUtils.indicator(-2L));\n    }\n",
        "begin_line": 553,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 554,col 9)-(line 554,col 50)",
            "(line 555,col 9)-(line 555,col 50)",
            "(line 556,col 9)-(line 556,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorShort()",
        "snippet": "    public void testIndicatorShort() {\n        assertEquals((short)1, MathUtils.indicator((short)2));\n        assertEquals((short)1, MathUtils.indicator((short)0));\n        assertEquals((short)(-1), MathUtils.indicator((short)(-2)));\n    }\n",
        "begin_line": 559,
        "end_line": 563,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 62)",
            "(line 561,col 9)-(line 561,col 62)",
            "(line 562,col 9)-(line 562,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testLcm()",
        "snippet": "    public void testLcm() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.lcm(0, b));\n        assertEquals(0, MathUtils.lcm(a, 0));\n        assertEquals(b, MathUtils.lcm(1, b));\n        assertEquals(a, MathUtils.lcm(a, 1));\n        assertEquals(150, MathUtils.lcm(a, b));\n        assertEquals(150, MathUtils.lcm(-a, b));\n        assertEquals(150, MathUtils.lcm(a, -b));\n        assertEquals(150, MathUtils.lcm(-a, -b));\n        assertEquals(2310, MathUtils.lcm(a, c));\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));\n\n        // Special case\n        assertEquals(0, MathUtils.lcm(0, 0));\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 565,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 566,col 9)-(line 566,col 19)",
            "(line 567,col 9)-(line 567,col 19)",
            "(line 568,col 9)-(line 568,col 19)",
            "(line 570,col 9)-(line 570,col 45)",
            "(line 571,col 9)-(line 571,col 45)",
            "(line 572,col 9)-(line 572,col 45)",
            "(line 573,col 9)-(line 573,col 45)",
            "(line 574,col 9)-(line 574,col 47)",
            "(line 575,col 9)-(line 575,col 48)",
            "(line 576,col 9)-(line 576,col 48)",
            "(line 577,col 9)-(line 577,col 49)",
            "(line 578,col 9)-(line 578,col 48)",
            "(line 582,col 9)-(line 582,col 70)",
            "(line 585,col 9)-(line 585,col 45)",
            "(line 587,col 9)-(line 593,col 9)",
            "(line 595,col 9)-(line 601,col 9)",
            "(line 603,col 9)-(line 608,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testLog()",
        "snippet": "    public void testLog() {\n        assertEquals(2.0, MathUtils.log(2, 4), 0);\n        assertEquals(3.0, MathUtils.log(2, 8), 0);\n        assertTrue(Double.isNaN(MathUtils.log(-1, 1)));\n        assertTrue(Double.isNaN(MathUtils.log(1, -1)));\n        assertTrue(Double.isNaN(MathUtils.log(0, 0)));\n        assertEquals(0, MathUtils.log(0, 10), 0);\n        assertEquals(Double.NEGATIVE_INFINITY, MathUtils.log(10, 0), 0);\n    }\n",
        "begin_line": 611,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 612,col 9)-(line 612,col 50)",
            "(line 613,col 9)-(line 613,col 50)",
            "(line 614,col 9)-(line 614,col 55)",
            "(line 615,col 9)-(line 615,col 55)",
            "(line 616,col 9)-(line 616,col 54)",
            "(line 617,col 9)-(line 617,col 49)",
            "(line 618,col 9)-(line 618,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheck()",
        "snippet": "    public void testMulAndCheck() {\n        int big = Integer.MAX_VALUE;\n        int bigNeg = Integer.MIN_VALUE;\n        assertEquals(big, MathUtils.mulAndCheck(big, 1));\n        try {\n            MathUtils.mulAndCheck(big, 2);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n        try {\n            MathUtils.mulAndCheck(bigNeg, 2);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n    }\n",
        "begin_line": 621,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 622,col 9)-(line 622,col 36)",
            "(line 623,col 9)-(line 623,col 39)",
            "(line 624,col 9)-(line 624,col 57)",
            "(line 625,col 9)-(line 629,col 9)",
            "(line 630,col 9)-(line 634,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLong()",
        "snippet": "    public void testMulAndCheckLong() {\n        long max = Long.MAX_VALUE;\n        long min = Long.MIN_VALUE;\n        assertEquals(max, MathUtils.mulAndCheck(max, 1L));\n        assertEquals(min, MathUtils.mulAndCheck(min, 1L));\n        assertEquals(0L, MathUtils.mulAndCheck(max, 0L));\n        assertEquals(0L, MathUtils.mulAndCheck(min, 0L));\n        assertEquals(max, MathUtils.mulAndCheck(1L, max));\n        assertEquals(min, MathUtils.mulAndCheck(1L, min));\n        assertEquals(0L, MathUtils.mulAndCheck(0L, max));\n        assertEquals(0L, MathUtils.mulAndCheck(0L, min));\n        assertEquals(1L, MathUtils.mulAndCheck(-1L, -1L));\n        assertEquals(min, MathUtils.mulAndCheck(min / 2, 2));\n        testMulAndCheckLongFailure(max, 2L);\n        testMulAndCheckLongFailure(2L, max);\n        testMulAndCheckLongFailure(min, 2L);\n        testMulAndCheckLongFailure(2L, min);\n        testMulAndCheckLongFailure(min, -1L);\n        testMulAndCheckLongFailure(-1L, min);\n    }\n",
        "begin_line": 637,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 638,col 9)-(line 638,col 34)",
            "(line 639,col 9)-(line 639,col 34)",
            "(line 640,col 9)-(line 640,col 58)",
            "(line 641,col 9)-(line 641,col 58)",
            "(line 642,col 9)-(line 642,col 57)",
            "(line 643,col 9)-(line 643,col 57)",
            "(line 644,col 9)-(line 644,col 58)",
            "(line 645,col 9)-(line 645,col 58)",
            "(line 646,col 9)-(line 646,col 57)",
            "(line 647,col 9)-(line 647,col 57)",
            "(line 648,col 9)-(line 648,col 58)",
            "(line 649,col 9)-(line 649,col 61)",
            "(line 650,col 9)-(line 650,col 44)",
            "(line 651,col 9)-(line 651,col 44)",
            "(line 652,col 9)-(line 652,col 44)",
            "(line 653,col 9)-(line 653,col 44)",
            "(line 654,col 9)-(line 654,col 45)",
            "(line 655,col 9)-(line 655,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLongFailure(long, long)",
        "snippet": "    private void testMulAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.mulAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 658,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 659,col 9)-(line 664,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testNextAfter()",
        "snippet": "    public void testNextAfter() {\n        // 0x402fffffffffffff 0x404123456789abcd -> 4030000000000000\n        assertEquals(16.0, MathUtils.nextAfter(15.999999999999998, 34.27555555555555), 0.0);\n\n        // 0xc02fffffffffffff 0x404123456789abcd -> c02ffffffffffffe\n        assertEquals(-15.999999999999996, MathUtils.nextAfter(-15.999999999999998, 34.27555555555555), 0.0);\n\n        // 0x402fffffffffffff 0x400123456789abcd -> 402ffffffffffffe\n        assertEquals(15.999999999999996, MathUtils.nextAfter(15.999999999999998, 2.142222222222222), 0.0);\n\n        // 0xc02fffffffffffff 0x400123456789abcd -> c02ffffffffffffe\n        assertEquals(-15.999999999999996, MathUtils.nextAfter(-15.999999999999998, 2.142222222222222), 0.0);\n\n        // 0x4020000000000000 0x404123456789abcd -> 4020000000000001\n        assertEquals(8.000000000000002, MathUtils.nextAfter(8.0, 34.27555555555555), 0.0);\n\n        // 0xc020000000000000 0x404123456789abcd -> c01fffffffffffff\n        assertEquals(-7.999999999999999, MathUtils.nextAfter(-8.0, 34.27555555555555), 0.0);\n\n        // 0x4020000000000000 0x400123456789abcd -> 401fffffffffffff\n        assertEquals(7.999999999999999, MathUtils.nextAfter(8.0, 2.142222222222222), 0.0);\n\n        // 0xc020000000000000 0x400123456789abcd -> c01fffffffffffff\n        assertEquals(-7.999999999999999, MathUtils.nextAfter(-8.0, 2.142222222222222), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a224 -> 3f2e43753d36a224\n        assertEquals(2.308922399667661E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a223 -> 3f2e43753d36a224\n        assertEquals(2.308922399667661E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a222 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a224 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a223 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a222 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a224 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a223 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a222 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a224 -> bf2e43753d36a224\n        assertEquals(-2.308922399667661E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a223 -> bf2e43753d36a224\n        assertEquals(-2.308922399667661E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a222 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n\n    }\n",
        "begin_line": 667,
        "end_line": 728,
        "comment": "",
        "child_ranges": [
            "(line 669,col 9)-(line 669,col 92)",
            "(line 672,col 9)-(line 672,col 108)",
            "(line 675,col 9)-(line 675,col 106)",
            "(line 678,col 9)-(line 678,col 108)",
            "(line 681,col 9)-(line 681,col 90)",
            "(line 684,col 9)-(line 684,col 92)",
            "(line 687,col 9)-(line 687,col 90)",
            "(line 690,col 9)-(line 690,col 92)",
            "(line 693,col 9)-(line 693,col 114)",
            "(line 696,col 9)-(line 696,col 115)",
            "(line 699,col 9)-(line 699,col 116)",
            "(line 702,col 9)-(line 702,col 116)",
            "(line 705,col 9)-(line 705,col 117)",
            "(line 708,col 9)-(line 708,col 117)",
            "(line 711,col 9)-(line 711,col 117)",
            "(line 714,col 9)-(line 714,col 118)",
            "(line 717,col 9)-(line 717,col 118)",
            "(line 720,col 9)-(line 720,col 117)",
            "(line 723,col 9)-(line 723,col 118)",
            "(line 726,col 9)-(line 726,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testNextAfterSpecialCases()",
        "snippet": "    public void testNextAfterSpecialCases() {\n        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.NEGATIVE_INFINITY, 0)));\n        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.POSITIVE_INFINITY, 0)));\n        assertTrue(Double.isNaN(MathUtils.nextAfter(Double.NaN, 0)));\n        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.MAX_VALUE, Double.POSITIVE_INFINITY)));\n        assertTrue(Double.isInfinite(MathUtils.nextAfter(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY)));\n        assertEquals(Double.MIN_VALUE, MathUtils.nextAfter(0, 1), 0);\n        assertEquals(-Double.MIN_VALUE, MathUtils.nextAfter(0, -1), 0);\n        assertEquals(0, MathUtils.nextAfter(Double.MIN_VALUE, -1), 0);\n        assertEquals(0, MathUtils.nextAfter(-Double.MIN_VALUE, 1), 0);\n    }\n",
        "begin_line": 730,
        "end_line": 740,
        "comment": "",
        "child_ranges": [
            "(line 731,col 9)-(line 731,col 88)",
            "(line 732,col 9)-(line 732,col 88)",
            "(line 733,col 9)-(line 733,col 69)",
            "(line 734,col 9)-(line 734,col 103)",
            "(line 735,col 9)-(line 735,col 104)",
            "(line 736,col 9)-(line 736,col 69)",
            "(line 737,col 9)-(line 737,col 71)",
            "(line 738,col 9)-(line 738,col 70)",
            "(line 739,col 9)-(line 739,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testScalb()",
        "snippet": "    public void testScalb() {\n        assertEquals( 0.0, MathUtils.scalb(0.0, 5), 1.0e-15);\n        assertEquals(32.0, MathUtils.scalb(1.0, 5), 1.0e-15);\n        assertEquals(1.0 / 32.0, MathUtils.scalb(1.0,  -5), 1.0e-15);\n        assertEquals(Math.PI, MathUtils.scalb(Math.PI, 0), 1.0e-15);\n        assertTrue(Double.isInfinite(MathUtils.scalb(Double.POSITIVE_INFINITY, 1)));\n        assertTrue(Double.isInfinite(MathUtils.scalb(Double.NEGATIVE_INFINITY, 1)));\n        assertTrue(Double.isNaN(MathUtils.scalb(Double.NaN, 1)));\n    }\n",
        "begin_line": 742,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 743,col 9)-(line 743,col 61)",
            "(line 744,col 9)-(line 744,col 61)",
            "(line 745,col 9)-(line 745,col 69)",
            "(line 746,col 9)-(line 746,col 68)",
            "(line 747,col 9)-(line 747,col 84)",
            "(line 748,col 9)-(line 748,col 84)",
            "(line 749,col 9)-(line 749,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testNormalizeAngle()",
        "snippet": "    public void testNormalizeAngle() {\n        for (double a = -15.0; a <= 15.0; a += 0.1) {\n            for (double b = -15.0; b <= 15.0; b += 0.2) {\n                double c = MathUtils.normalizeAngle(a, b);\n                assertTrue((b - Math.PI) <= c);\n                assertTrue(c <= (b + Math.PI));\n                double twoK = Math.rint((a - c) / Math.PI);\n                assertEquals(c, a - twoK * Math.PI, 1.0e-14);\n            }\n        }\n    }\n",
        "begin_line": 752,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 753,col 9)-(line 761,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testRoundDouble()",
        "snippet": "    public void testRoundDouble() {\n        double x = 1.234567890;\n        assertEquals(1.23, MathUtils.round(x, 2), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4), 0.0);\n\n        // JIRA MATH-151\n        assertEquals(39.25, MathUtils.round(39.245, 2), 0.0);\n        assertEquals(39.24, MathUtils.round(39.245, 2, BigDecimal.ROUND_DOWN), 0.0);\n        double xx = 39.0;\n        xx = xx + 245d / 1000d;\n        assertEquals(39.25, MathUtils.round(xx, 2), 0.0);\n\n        // BZ 35904\n        assertEquals(30.1d, MathUtils.round(30.095d, 2), 0.0d);\n        assertEquals(30.1d, MathUtils.round(30.095d, 1), 0.0d);\n        assertEquals(33.1d, MathUtils.round(33.095d, 1), 0.0d);\n        assertEquals(33.1d, MathUtils.round(33.095d, 2), 0.0d);\n        assertEquals(50.09d, MathUtils.round(50.085d, 2), 0.0d);\n        assertEquals(50.19d, MathUtils.round(50.185d, 2), 0.0d);\n        assertEquals(50.01d, MathUtils.round(50.005d, 2), 0.0d);\n        assertEquals(30.01d, MathUtils.round(30.005d, 2), 0.0d);\n        assertEquals(30.65d, MathUtils.round(30.645d, 2), 0.0d);\n\n        assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.236, MathUtils.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.236, MathUtils.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        assertEquals(-1.23, MathUtils.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n        assertEquals(1.23, MathUtils.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n\n        try {\n            MathUtils.round(1.234, 2, BigDecimal.ROUND_UNNECESSARY);\n            fail();\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n        assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n\n        try {\n            MathUtils.round(1.234, 2, 1923);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n\n        // MATH-151\n        assertEquals(39.25, MathUtils.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        // special values\n        TestUtils.assertEquals(Double.NaN, MathUtils.round(Double.NaN, 2), 0.0);\n        assertEquals(0.0, MathUtils.round(0.0, 2), 0.0);\n        assertEquals(Double.POSITIVE_INFINITY, MathUtils.round(Double.POSITIVE_INFINITY, 2), 0.0);\n        assertEquals(Double.NEGATIVE_INFINITY, MathUtils.round(Double.NEGATIVE_INFINITY, 2), 0.0);\n    }\n",
        "begin_line": 764,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 765,col 9)-(line 765,col 31)",
            "(line 766,col 9)-(line 766,col 55)",
            "(line 767,col 9)-(line 767,col 56)",
            "(line 768,col 9)-(line 768,col 57)",
            "(line 771,col 9)-(line 771,col 61)",
            "(line 772,col 9)-(line 772,col 84)",
            "(line 773,col 9)-(line 773,col 25)",
            "(line 774,col 9)-(line 774,col 31)",
            "(line 775,col 9)-(line 775,col 57)",
            "(line 778,col 9)-(line 778,col 63)",
            "(line 779,col 9)-(line 779,col 63)",
            "(line 780,col 9)-(line 780,col 63)",
            "(line 781,col 9)-(line 781,col 63)",
            "(line 782,col 9)-(line 782,col 64)",
            "(line 783,col 9)-(line 783,col 64)",
            "(line 784,col 9)-(line 784,col 64)",
            "(line 785,col 9)-(line 785,col 64)",
            "(line 786,col 9)-(line 786,col 64)",
            "(line 788,col 9)-(line 788,col 81)",
            "(line 789,col 9)-(line 789,col 82)",
            "(line 790,col 9)-(line 790,col 83)",
            "(line 791,col 9)-(line 791,col 83)",
            "(line 792,col 9)-(line 792,col 84)",
            "(line 793,col 9)-(line 793,col 85)",
            "(line 795,col 9)-(line 795,col 78)",
            "(line 796,col 9)-(line 796,col 79)",
            "(line 797,col 9)-(line 797,col 80)",
            "(line 798,col 9)-(line 798,col 80)",
            "(line 799,col 9)-(line 799,col 81)",
            "(line 800,col 9)-(line 800,col 82)",
            "(line 802,col 9)-(line 802,col 79)",
            "(line 803,col 9)-(line 803,col 80)",
            "(line 804,col 9)-(line 804,col 81)",
            "(line 805,col 9)-(line 805,col 81)",
            "(line 806,col 9)-(line 806,col 82)",
            "(line 807,col 9)-(line 807,col 83)",
            "(line 809,col 9)-(line 809,col 83)",
            "(line 810,col 9)-(line 810,col 84)",
            "(line 811,col 9)-(line 811,col 85)",
            "(line 812,col 9)-(line 812,col 85)",
            "(line 813,col 9)-(line 813,col 86)",
            "(line 814,col 9)-(line 814,col 87)",
            "(line 815,col 9)-(line 815,col 89)",
            "(line 816,col 9)-(line 816,col 91)",
            "(line 818,col 9)-(line 818,col 83)",
            "(line 819,col 9)-(line 819,col 84)",
            "(line 820,col 9)-(line 820,col 85)",
            "(line 821,col 9)-(line 821,col 85)",
            "(line 822,col 9)-(line 822,col 86)",
            "(line 823,col 9)-(line 823,col 87)",
            "(line 824,col 9)-(line 824,col 89)",
            "(line 825,col 9)-(line 825,col 91)",
            "(line 826,col 9)-(line 826,col 89)",
            "(line 827,col 9)-(line 827,col 91)",
            "(line 829,col 9)-(line 829,col 81)",
            "(line 830,col 9)-(line 830,col 82)",
            "(line 831,col 9)-(line 831,col 83)",
            "(line 832,col 9)-(line 832,col 83)",
            "(line 833,col 9)-(line 833,col 84)",
            "(line 834,col 9)-(line 834,col 85)",
            "(line 835,col 9)-(line 835,col 87)",
            "(line 836,col 9)-(line 836,col 89)",
            "(line 838,col 9)-(line 838,col 90)",
            "(line 839,col 9)-(line 839,col 88)",
            "(line 841,col 9)-(line 846,col 9)",
            "(line 848,col 9)-(line 848,col 76)",
            "(line 849,col 9)-(line 849,col 77)",
            "(line 850,col 9)-(line 850,col 78)",
            "(line 851,col 9)-(line 851,col 78)",
            "(line 852,col 9)-(line 852,col 79)",
            "(line 853,col 9)-(line 853,col 80)",
            "(line 855,col 9)-(line 860,col 9)",
            "(line 863,col 9)-(line 863,col 87)",
            "(line 866,col 9)-(line 866,col 80)",
            "(line 867,col 9)-(line 867,col 56)",
            "(line 868,col 9)-(line 868,col 98)",
            "(line 869,col 9)-(line 869,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()",
        "snippet": "    public void testRoundFloat() {\n        float x = 1.234567890f;\n        assertEquals(1.23f, MathUtils.round(x, 2), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4), 0.0);\n\n        // BZ 35904\n        assertEquals(30.1f, MathUtils.round(30.095f, 2), 0.0f);\n        assertEquals(30.1f, MathUtils.round(30.095f, 1), 0.0f);\n        assertEquals(50.09f, MathUtils.round(50.085f, 2), 0.0f);\n        assertEquals(50.19f, MathUtils.round(50.185f, 2), 0.0f);\n        assertEquals(50.01f, MathUtils.round(50.005f, 2), 0.0f);\n        assertEquals(30.01f, MathUtils.round(30.005f, 2), 0.0f);\n        assertEquals(30.65f, MathUtils.round(30.645f, 2), 0.0f);\n\n        assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.236f, MathUtils.round(1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.236f, MathUtils.round(-1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        assertEquals(-1.23f, MathUtils.round(-1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n        assertEquals(1.23f, MathUtils.round(1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n\n        try {\n            MathUtils.round(1.234f, 2, BigDecimal.ROUND_UNNECESSARY);\n            fail();\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n        assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n\n        try {\n            MathUtils.round(1.234f, 2, 1923);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n\n        // special values\n        TestUtils.assertEquals(Float.NaN, MathUtils.round(Float.NaN, 2), 0.0f);\n        assertEquals(0.0f, MathUtils.round(0.0f, 2), 0.0f);\n        assertEquals(Float.POSITIVE_INFINITY, MathUtils.round(Float.POSITIVE_INFINITY, 2), 0.0f);\n        assertEquals(Float.NEGATIVE_INFINITY, MathUtils.round(Float.NEGATIVE_INFINITY, 2), 0.0f);\n    }\n",
        "begin_line": 872,
        "end_line": 966,
        "comment": "",
        "child_ranges": [
            "(line 873,col 9)-(line 873,col 31)",
            "(line 874,col 9)-(line 874,col 56)",
            "(line 875,col 9)-(line 875,col 57)",
            "(line 876,col 9)-(line 876,col 58)",
            "(line 879,col 9)-(line 879,col 63)",
            "(line 880,col 9)-(line 880,col 63)",
            "(line 881,col 9)-(line 881,col 64)",
            "(line 882,col 9)-(line 882,col 64)",
            "(line 883,col 9)-(line 883,col 64)",
            "(line 884,col 9)-(line 884,col 64)",
            "(line 885,col 9)-(line 885,col 64)",
            "(line 887,col 9)-(line 887,col 82)",
            "(line 888,col 9)-(line 888,col 83)",
            "(line 889,col 9)-(line 889,col 84)",
            "(line 890,col 9)-(line 890,col 84)",
            "(line 891,col 9)-(line 891,col 85)",
            "(line 892,col 9)-(line 892,col 86)",
            "(line 894,col 9)-(line 894,col 79)",
            "(line 895,col 9)-(line 895,col 80)",
            "(line 896,col 9)-(line 896,col 81)",
            "(line 897,col 9)-(line 897,col 81)",
            "(line 898,col 9)-(line 898,col 82)",
            "(line 899,col 9)-(line 899,col 83)",
            "(line 901,col 9)-(line 901,col 80)",
            "(line 902,col 9)-(line 902,col 81)",
            "(line 903,col 9)-(line 903,col 82)",
            "(line 904,col 9)-(line 904,col 82)",
            "(line 905,col 9)-(line 905,col 83)",
            "(line 906,col 9)-(line 906,col 84)",
            "(line 908,col 9)-(line 908,col 84)",
            "(line 909,col 9)-(line 909,col 85)",
            "(line 910,col 9)-(line 910,col 86)",
            "(line 911,col 9)-(line 911,col 86)",
            "(line 912,col 9)-(line 912,col 87)",
            "(line 913,col 9)-(line 913,col 88)",
            "(line 914,col 9)-(line 914,col 91)",
            "(line 915,col 9)-(line 915,col 93)",
            "(line 917,col 9)-(line 917,col 84)",
            "(line 918,col 9)-(line 918,col 85)",
            "(line 919,col 9)-(line 919,col 86)",
            "(line 920,col 9)-(line 920,col 86)",
            "(line 921,col 9)-(line 921,col 87)",
            "(line 922,col 9)-(line 922,col 88)",
            "(line 923,col 9)-(line 923,col 91)",
            "(line 924,col 9)-(line 924,col 93)",
            "(line 925,col 9)-(line 925,col 91)",
            "(line 926,col 9)-(line 926,col 93)",
            "(line 928,col 9)-(line 928,col 82)",
            "(line 929,col 9)-(line 929,col 83)",
            "(line 930,col 9)-(line 930,col 84)",
            "(line 931,col 9)-(line 931,col 84)",
            "(line 932,col 9)-(line 932,col 85)",
            "(line 933,col 9)-(line 933,col 86)",
            "(line 934,col 9)-(line 934,col 89)",
            "(line 935,col 9)-(line 935,col 91)",
            "(line 937,col 9)-(line 937,col 92)",
            "(line 938,col 9)-(line 938,col 90)",
            "(line 940,col 9)-(line 945,col 9)",
            "(line 947,col 9)-(line 947,col 77)",
            "(line 948,col 9)-(line 948,col 78)",
            "(line 949,col 9)-(line 949,col 79)",
            "(line 950,col 9)-(line 950,col 79)",
            "(line 951,col 9)-(line 951,col 80)",
            "(line 952,col 9)-(line 952,col 81)",
            "(line 954,col 9)-(line 959,col 9)",
            "(line 962,col 9)-(line 962,col 79)",
            "(line 963,col 9)-(line 963,col 59)",
            "(line 964,col 9)-(line 964,col 97)",
            "(line 965,col 9)-(line 965,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignByte()",
        "snippet": "    public void testSignByte() {\n        assertEquals((byte) 1, MathUtils.sign((byte) 2));\n        assertEquals((byte) 0, MathUtils.sign((byte) 0));\n        assertEquals((byte) (-1), MathUtils.sign((byte) (-2)));\n    }\n",
        "begin_line": 968,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 969,col 9)-(line 969,col 57)",
            "(line 970,col 9)-(line 970,col 57)",
            "(line 971,col 9)-(line 971,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignDouble()",
        "snippet": "    public void testSignDouble() {\n        double delta = 0.0;\n        assertEquals(1.0, MathUtils.sign(2.0), delta);\n        assertEquals(0.0, MathUtils.sign(0.0), delta);\n        assertEquals(-1.0, MathUtils.sign(-2.0), delta);\n        TestUtils.assertSame(-0. / 0., MathUtils.sign(Double.NaN));\n    }\n",
        "begin_line": 974,
        "end_line": 980,
        "comment": "",
        "child_ranges": [
            "(line 975,col 9)-(line 975,col 27)",
            "(line 976,col 9)-(line 976,col 54)",
            "(line 977,col 9)-(line 977,col 54)",
            "(line 978,col 9)-(line 978,col 56)",
            "(line 979,col 9)-(line 979,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignFloat()",
        "snippet": "    public void testSignFloat() {\n        float delta = 0.0F;\n        assertEquals(1.0F, MathUtils.sign(2.0F), delta);\n        assertEquals(0.0F, MathUtils.sign(0.0F), delta);\n        assertEquals(-1.0F, MathUtils.sign(-2.0F), delta);\n        TestUtils.assertSame(Float.NaN, MathUtils.sign(Float.NaN));\n    }\n",
        "begin_line": 982,
        "end_line": 988,
        "comment": "",
        "child_ranges": [
            "(line 983,col 9)-(line 983,col 27)",
            "(line 984,col 9)-(line 984,col 56)",
            "(line 985,col 9)-(line 985,col 56)",
            "(line 986,col 9)-(line 986,col 58)",
            "(line 987,col 9)-(line 987,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignInt()",
        "snippet": "    public void testSignInt() {\n        assertEquals((int) 1, MathUtils.sign((int) 2));\n        assertEquals((int) 0, MathUtils.sign((int) 0));\n        assertEquals((int) (-1), MathUtils.sign((int) (-2)));\n    }\n",
        "begin_line": 990,
        "end_line": 994,
        "comment": "",
        "child_ranges": [
            "(line 991,col 9)-(line 991,col 55)",
            "(line 992,col 9)-(line 992,col 55)",
            "(line 993,col 9)-(line 993,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignLong()",
        "snippet": "    public void testSignLong() {\n        assertEquals(1L, MathUtils.sign(2L));\n        assertEquals(0L, MathUtils.sign(0L));\n        assertEquals(-1L, MathUtils.sign(-2L));\n    }\n",
        "begin_line": 996,
        "end_line": 1000,
        "comment": "",
        "child_ranges": [
            "(line 997,col 9)-(line 997,col 45)",
            "(line 998,col 9)-(line 998,col 45)",
            "(line 999,col 9)-(line 999,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignShort()",
        "snippet": "    public void testSignShort() {\n        assertEquals((short) 1, MathUtils.sign((short) 2));\n        assertEquals((short) 0, MathUtils.sign((short) 0));\n        assertEquals((short) (-1), MathUtils.sign((short) (-2)));\n    }\n",
        "begin_line": 1002,
        "end_line": 1006,
        "comment": "",
        "child_ranges": [
            "(line 1003,col 9)-(line 1003,col 59)",
            "(line 1004,col 9)-(line 1004,col 59)",
            "(line 1005,col 9)-(line 1005,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSinh()",
        "snippet": "    public void testSinh() {\n        double x = 3.0;\n        double expected = 10.01787;\n        assertEquals(expected, MathUtils.sinh(x), 1.0e-5);\n    }\n",
        "begin_line": 1008,
        "end_line": 1012,
        "comment": "",
        "child_ranges": [
            "(line 1009,col 9)-(line 1009,col 23)",
            "(line 1010,col 9)-(line 1010,col 35)",
            "(line 1011,col 9)-(line 1011,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSinhNaN()",
        "snippet": "    public void testSinhNaN() {\n        assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));\n    }\n",
        "begin_line": 1014,
        "end_line": 1016,
        "comment": "",
        "child_ranges": [
            "(line 1015,col 9)-(line 1015,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheck()",
        "snippet": "    public void testSubAndCheck() {\n        int big = Integer.MAX_VALUE;\n        int bigNeg = Integer.MIN_VALUE;\n        assertEquals(big, MathUtils.subAndCheck(big, 0));\n        assertEquals(bigNeg + 1, MathUtils.subAndCheck(bigNeg, -1));\n        assertEquals(-1, MathUtils.subAndCheck(bigNeg, -big));\n        try {\n            MathUtils.subAndCheck(big, -1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n        try {\n            MathUtils.subAndCheck(bigNeg, 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n    }\n",
        "begin_line": 1018,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1019,col 9)-(line 1019,col 36)",
            "(line 1020,col 9)-(line 1020,col 39)",
            "(line 1021,col 9)-(line 1021,col 57)",
            "(line 1022,col 9)-(line 1022,col 68)",
            "(line 1023,col 9)-(line 1023,col 62)",
            "(line 1024,col 9)-(line 1028,col 9)",
            "(line 1029,col 9)-(line 1033,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckErrorMessage()",
        "snippet": "    public void testSubAndCheckErrorMessage() {\n        int big = Integer.MAX_VALUE;\n        try {\n            MathUtils.subAndCheck(big, -1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            assertEquals(\"overflow: subtract\", ex.getMessage());\n        }\n    }\n",
        "begin_line": 1036,
        "end_line": 1044,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 9)-(line 1037,col 36)",
            "(line 1038,col 9)-(line 1043,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLong()",
        "snippet": "    public void testSubAndCheckLong() {\n        long max = Long.MAX_VALUE;\n        long min = Long.MIN_VALUE;\n        assertEquals(max, MathUtils.subAndCheck(max, 0));\n        assertEquals(min, MathUtils.subAndCheck(min, 0));\n        assertEquals(-max, MathUtils.subAndCheck(0, max));\n        assertEquals(min + 1, MathUtils.subAndCheck(min, -1));\n        // min == -1-max\n        assertEquals(-1, MathUtils.subAndCheck(-max - 1, -max));\n        assertEquals(max, MathUtils.subAndCheck(-1, -1 - max));\n        testSubAndCheckLongFailure(0L, min);\n        testSubAndCheckLongFailure(max, -1L);\n        testSubAndCheckLongFailure(min, 1L);\n    }\n",
        "begin_line": 1046,
        "end_line": 1059,
        "comment": "",
        "child_ranges": [
            "(line 1047,col 9)-(line 1047,col 34)",
            "(line 1048,col 9)-(line 1048,col 34)",
            "(line 1049,col 9)-(line 1049,col 57)",
            "(line 1050,col 9)-(line 1050,col 57)",
            "(line 1051,col 9)-(line 1051,col 58)",
            "(line 1052,col 9)-(line 1052,col 62)",
            "(line 1054,col 9)-(line 1054,col 64)",
            "(line 1055,col 9)-(line 1055,col 63)",
            "(line 1056,col 9)-(line 1056,col 44)",
            "(line 1057,col 9)-(line 1057,col 45)",
            "(line 1058,col 9)-(line 1058,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLongFailure(long, long)",
        "snippet": "    private void testSubAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.subAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n    }\n",
        "begin_line": 1061,
        "end_line": 1069,
        "comment": "",
        "child_ranges": [
            "(line 1062,col 9)-(line 1067,col 9)"
        ]
    }
]