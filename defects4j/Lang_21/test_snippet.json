[
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.DateUtilsTest(java.lang.String)",
        "snippet": "    public DateUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        dateParser = new SimpleDateFormat(\"MMM dd, yyyy\", Locale.ENGLISH);\n        dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n\n        dateAmPm1 = dateTimeParser.parse(\"February 3, 2002 01:10:00.000\");\n        dateAmPm2 = dateTimeParser.parse(\"February 3, 2002 11:10:00.000\");\n        dateAmPm3 = dateTimeParser.parse(\"February 3, 2002 13:10:00.000\");\n        dateAmPm4 = dateTimeParser.parse(\"February 3, 2002 19:10:00.000\");\n        date0 = dateTimeParser.parse(\"February 3, 2002 12:34:56.789\");\n        date1 = dateTimeParser.parse(\"February 12, 2002 12:34:56.789\");\n        date2 = dateTimeParser.parse(\"November 18, 2001 1:23:11.321\");\n        defaultZone = TimeZone.getDefault();\n        zone = TimeZone.getTimeZone(\"MET\");\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n        date3 = dateTimeParser.parse(\"March 30, 2003 05:30:45.000\");\n        date4 = dateTimeParser.parse(\"March 30, 2003 01:10:00.000\");\n        date5 = dateTimeParser.parse(\"March 30, 2003 01:40:00.000\");\n        date6 = dateTimeParser.parse(\"March 30, 2003 02:10:00.000\");\n        date7 = dateTimeParser.parse(\"March 30, 2003 02:40:00.000\");\n        date8 = dateTimeParser.parse(\"October 26, 2003 05:30:45.000\");\n        dateTimeParser.setTimeZone(defaultZone);\n        TimeZone.setDefault(defaultZone);\n        calAmPm1 = Calendar.getInstance();\n        calAmPm1.setTime(dateAmPm1);\n        calAmPm2 = Calendar.getInstance();\n        calAmPm2.setTime(dateAmPm2);\n        calAmPm3 = Calendar.getInstance();\n        calAmPm3.setTime(dateAmPm3);\n        calAmPm4 = Calendar.getInstance();\n        calAmPm4.setTime(dateAmPm4);\n        cal1 = Calendar.getInstance();\n        cal1.setTime(date1);\n        cal2 = Calendar.getInstance();\n        cal2.setTime(date2);\n        TimeZone.setDefault(zone);\n        cal3 = Calendar.getInstance();\n        cal3.setTime(date3);\n        cal4 = Calendar.getInstance();\n        cal4.setTime(date4);\n        cal5 = Calendar.getInstance();\n        cal5.setTime(date5);\n        cal6 = Calendar.getInstance();\n        cal6.setTime(date6);\n        cal7 = Calendar.getInstance();\n        cal7.setTime(date7);\n        cal8 = Calendar.getInstance();\n        cal8.setTime(date8);\n        TimeZone.setDefault(defaultZone);\n    }\n",
        "begin_line": 88,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 22)",
            "(line 92,col 9)-(line 92,col 74)",
            "(line 93,col 9)-(line 93,col 90)",
            "(line 95,col 9)-(line 95,col 74)",
            "(line 96,col 9)-(line 96,col 74)",
            "(line 97,col 9)-(line 97,col 74)",
            "(line 98,col 9)-(line 98,col 74)",
            "(line 99,col 9)-(line 99,col 70)",
            "(line 100,col 9)-(line 100,col 71)",
            "(line 101,col 9)-(line 101,col 70)",
            "(line 102,col 9)-(line 102,col 44)",
            "(line 103,col 9)-(line 103,col 43)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 105,col 9)-(line 105,col 41)",
            "(line 106,col 9)-(line 106,col 68)",
            "(line 107,col 9)-(line 107,col 68)",
            "(line 108,col 9)-(line 108,col 68)",
            "(line 109,col 9)-(line 109,col 68)",
            "(line 110,col 9)-(line 110,col 68)",
            "(line 111,col 9)-(line 111,col 70)",
            "(line 112,col 9)-(line 112,col 48)",
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 42)",
            "(line 115,col 9)-(line 115,col 36)",
            "(line 116,col 9)-(line 116,col 42)",
            "(line 117,col 9)-(line 117,col 36)",
            "(line 118,col 9)-(line 118,col 42)",
            "(line 119,col 9)-(line 119,col 36)",
            "(line 120,col 9)-(line 120,col 42)",
            "(line 121,col 9)-(line 121,col 36)",
            "(line 122,col 9)-(line 122,col 38)",
            "(line 123,col 9)-(line 123,col 28)",
            "(line 124,col 9)-(line 124,col 38)",
            "(line 125,col 9)-(line 125,col 28)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 127,col 9)-(line 127,col 38)",
            "(line 128,col 9)-(line 128,col 28)",
            "(line 129,col 9)-(line 129,col 38)",
            "(line 130,col 9)-(line 130,col 28)",
            "(line 131,col 9)-(line 131,col 38)",
            "(line 132,col 9)-(line 132,col 28)",
            "(line 133,col 9)-(line 133,col 38)",
            "(line 134,col 9)-(line 134,col 28)",
            "(line 135,col 9)-(line 135,col 38)",
            "(line 136,col 9)-(line 136,col 28)",
            "(line 137,col 9)-(line 137,col 38)",
            "(line 138,col 9)-(line 138,col 28)",
            "(line 139,col 9)-(line 139,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new DateUtils());\n        Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(DateUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(DateUtils.class.getModifiers()));\n    }\n",
        "begin_line": 143,
        "end_line": 150,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 39)",
            "(line 145,col 9)-(line 145,col 74)",
            "(line 146,col 9)-(line 146,col 37)",
            "(line 147,col 9)-(line 147,col 70)",
            "(line 148,col 9)-(line 148,col 78)",
            "(line 149,col 9)-(line 149,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIsSameDay_Date()",
        "snippet": "    public void testIsSameDay_Date() {\n        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameDay(date1, date2));\n        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameDay(date1, date2));\n        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameDay(date1, date2));\n        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameDay(date1, date2));\n        try {\n            DateUtils.isSameDay((Date) null, (Date) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 153,
        "end_line": 167,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 73)",
            "(line 155,col 9)-(line 155,col 73)",
            "(line 156,col 9)-(line 156,col 62)",
            "(line 157,col 9)-(line 157,col 69)",
            "(line 158,col 9)-(line 158,col 63)",
            "(line 159,col 9)-(line 159,col 69)",
            "(line 160,col 9)-(line 160,col 62)",
            "(line 161,col 9)-(line 161,col 69)",
            "(line 162,col 9)-(line 162,col 63)",
            "(line 163,col 9)-(line 166,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIsSameDay_Cal()",
        "snippet": "    public void testIsSameDay_Cal() {\n        GregorianCalendar cal1 = new GregorianCalendar(2004, 6, 9, 13, 45);\n        GregorianCalendar cal2 = new GregorianCalendar(2004, 6, 9, 13, 45);\n        assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n        cal2.add(Calendar.DAY_OF_YEAR, 1);\n        assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n        cal1.add(Calendar.DAY_OF_YEAR, 1);\n        assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n        cal2.add(Calendar.YEAR, 1);\n        assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n        try {\n            DateUtils.isSameDay((Calendar) null, (Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 170,
        "end_line": 184,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 75)",
            "(line 172,col 9)-(line 172,col 75)",
            "(line 173,col 9)-(line 173,col 60)",
            "(line 174,col 9)-(line 174,col 42)",
            "(line 175,col 9)-(line 175,col 61)",
            "(line 176,col 9)-(line 176,col 42)",
            "(line 177,col 9)-(line 177,col 60)",
            "(line 178,col 9)-(line 178,col 35)",
            "(line 179,col 9)-(line 179,col 61)",
            "(line 180,col 9)-(line 183,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIsSameInstant_Date()",
        "snippet": "    public void testIsSameInstant_Date() {\n        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n        try {\n            DateUtils.isSameInstant((Date) null, (Date) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 187,
        "end_line": 201,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 73)",
            "(line 189,col 9)-(line 189,col 73)",
            "(line 190,col 9)-(line 190,col 66)",
            "(line 191,col 9)-(line 191,col 69)",
            "(line 192,col 9)-(line 192,col 67)",
            "(line 193,col 9)-(line 193,col 69)",
            "(line 194,col 9)-(line 194,col 66)",
            "(line 195,col 9)-(line 195,col 69)",
            "(line 196,col 9)-(line 196,col 67)",
            "(line 197,col 9)-(line 200,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIsSameInstant_Cal()",
        "snippet": "    public void testIsSameInstant_Cal() {\n        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n        cal1.set(2004, 6, 9, 13, 45, 0);\n        cal1.set(Calendar.MILLISECOND, 0);\n        cal2.set(2004, 6, 9, 13, 45, 0);\n        cal2.set(Calendar.MILLISECOND, 0);\n        assertEquals(false, DateUtils.isSameInstant(cal1, cal2));\n        \n        cal2.set(2004, 6, 9, 11, 45, 0);\n        assertEquals(true, DateUtils.isSameInstant(cal1, cal2));\n        try {\n            DateUtils.isSameInstant((Calendar) null, (Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 204,
        "end_line": 219,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 86)",
            "(line 206,col 9)-(line 206,col 86)",
            "(line 207,col 9)-(line 207,col 40)",
            "(line 208,col 9)-(line 208,col 42)",
            "(line 209,col 9)-(line 209,col 40)",
            "(line 210,col 9)-(line 210,col 42)",
            "(line 211,col 9)-(line 211,col 65)",
            "(line 213,col 9)-(line 213,col 40)",
            "(line 214,col 9)-(line 214,col 64)",
            "(line 215,col 9)-(line 218,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIsSameLocalTime_Cal()",
        "snippet": "    public void testIsSameLocalTime_Cal() {\n        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n        cal1.set(2004, 6, 9, 13, 45, 0);\n        cal1.set(Calendar.MILLISECOND, 0);\n        cal2.set(2004, 6, 9, 13, 45, 0);\n        cal2.set(Calendar.MILLISECOND, 0);\n        assertEquals(true, DateUtils.isSameLocalTime(cal1, cal2));\n\n        Calendar cal3 = Calendar.getInstance();\n        Calendar cal4 = Calendar.getInstance();\n        cal3.set(2004, 6, 9, 4,  0, 0);\n        cal4.set(2004, 6, 9, 16, 0, 0);\n        cal3.set(Calendar.MILLISECOND, 0);\n        cal4.set(Calendar.MILLISECOND, 0);\n        assertFalse(\"LANG-677\", DateUtils.isSameLocalTime(cal3, cal4));\n        \n        cal2.set(2004, 6, 9, 11, 45, 0);\n        assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));\n        try {\n            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 222,
        "end_line": 245,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 86)",
            "(line 224,col 9)-(line 224,col 86)",
            "(line 225,col 9)-(line 225,col 40)",
            "(line 226,col 9)-(line 226,col 42)",
            "(line 227,col 9)-(line 227,col 40)",
            "(line 228,col 9)-(line 228,col 42)",
            "(line 229,col 9)-(line 229,col 66)",
            "(line 231,col 9)-(line 231,col 47)",
            "(line 232,col 9)-(line 232,col 47)",
            "(line 233,col 9)-(line 233,col 39)",
            "(line 234,col 9)-(line 234,col 39)",
            "(line 235,col 9)-(line 235,col 42)",
            "(line 236,col 9)-(line 236,col 42)",
            "(line 237,col 9)-(line 237,col 71)",
            "(line 239,col 9)-(line 239,col 40)",
            "(line 240,col 9)-(line 240,col 67)",
            "(line 241,col 9)-(line 244,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testParseDate()",
        "snippet": "    public void testParseDate() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1972, 11, 3);\n        String dateStr = \"1972-12-03\";\n        String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};\n        Date date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        dateStr = \"1972-338\";\n        date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        dateStr = \"19721203\";\n        date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        try {\n            DateUtils.parseDate(\"PURPLE\", parsers);\n            fail();\n        } catch (ParseException ex) {}\n        try {\n            DateUtils.parseDate(\"197212AB\", parsers);\n            fail();\n        } catch (ParseException ex) {}\n        try {\n            DateUtils.parseDate(null, parsers);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.parseDate(dateStr, (String[]) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.parseDate(dateStr, new String[0]);\n            fail();\n        } catch (ParseException ex) {}\n    }\n",
        "begin_line": 248,
        "end_line": 283,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 67)",
            "(line 250,col 9)-(line 250,col 38)",
            "(line 251,col 9)-(line 251,col 85)",
            "(line 252,col 9)-(line 252,col 58)",
            "(line 253,col 9)-(line 253,col 42)",
            "(line 255,col 9)-(line 255,col 29)",
            "(line 256,col 9)-(line 256,col 53)",
            "(line 257,col 9)-(line 257,col 42)",
            "(line 259,col 9)-(line 259,col 29)",
            "(line 260,col 9)-(line 260,col 53)",
            "(line 261,col 9)-(line 261,col 42)",
            "(line 263,col 9)-(line 266,col 38)",
            "(line 267,col 9)-(line 270,col 38)",
            "(line 271,col 9)-(line 274,col 48)",
            "(line 275,col 9)-(line 278,col 48)",
            "(line 279,col 9)-(line 282,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testParseDateWithLeniency()",
        "snippet": "    public void testParseDateWithLeniency() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1998, 6, 30);\n        String dateStr = \"02 942, 1996\";\n        String[] parsers = new String[] {\"MM DDD, yyyy\"};\n        \n        Date date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        try {\n            date = DateUtils.parseDateStrictly(dateStr, parsers);\n            fail();\n        } catch (ParseException ex) {}\n    }\n",
        "begin_line": 285,
        "end_line": 297,
        "comment": " LANG-486",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 67)",
            "(line 287,col 9)-(line 287,col 40)",
            "(line 288,col 9)-(line 288,col 57)",
            "(line 290,col 9)-(line 290,col 58)",
            "(line 291,col 9)-(line 291,col 42)",
            "(line 293,col 9)-(line 296,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddYears()",
        "snippet": "    public void testAddYears() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addYears(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addYears(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2001, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addYears(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 1999, 6, 5, 4, 3, 2, 1);\n    }\n",
        "begin_line": 300,
        "end_line": 316,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 42)",
            "(line 302,col 9)-(line 302,col 50)",
            "(line 303,col 9)-(line 303,col 36)",
            "(line 304,col 9)-(line 304,col 49)",
            "(line 305,col 9)-(line 305,col 51)",
            "(line 307,col 9)-(line 307,col 45)",
            "(line 308,col 9)-(line 308,col 36)",
            "(line 309,col 9)-(line 309,col 49)",
            "(line 310,col 9)-(line 310,col 51)",
            "(line 312,col 9)-(line 312,col 46)",
            "(line 313,col 9)-(line 313,col 36)",
            "(line 314,col 9)-(line 314,col 49)",
            "(line 315,col 9)-(line 315,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddMonths()",
        "snippet": "    public void testAddMonths() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addMonths(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addMonths(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 7, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addMonths(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n    }\n",
        "begin_line": 319,
        "end_line": 335,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 42)",
            "(line 321,col 9)-(line 321,col 51)",
            "(line 322,col 9)-(line 322,col 36)",
            "(line 323,col 9)-(line 323,col 49)",
            "(line 324,col 9)-(line 324,col 51)",
            "(line 326,col 9)-(line 326,col 46)",
            "(line 327,col 9)-(line 327,col 36)",
            "(line 328,col 9)-(line 328,col 49)",
            "(line 329,col 9)-(line 329,col 51)",
            "(line 331,col 9)-(line 331,col 47)",
            "(line 332,col 9)-(line 332,col 36)",
            "(line 333,col 9)-(line 333,col 49)",
            "(line 334,col 9)-(line 334,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddWeeks()",
        "snippet": "    public void testAddWeeks() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addWeeks(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addWeeks(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 12, 4, 3, 2, 1);\n        \n        result = DateUtils.addWeeks(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);      // july\n        assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june\n    }\n",
        "begin_line": 338,
        "end_line": 354,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 42)",
            "(line 340,col 9)-(line 340,col 50)",
            "(line 341,col 9)-(line 341,col 36)",
            "(line 342,col 9)-(line 342,col 49)",
            "(line 343,col 9)-(line 343,col 51)",
            "(line 345,col 9)-(line 345,col 45)",
            "(line 346,col 9)-(line 346,col 36)",
            "(line 347,col 9)-(line 347,col 49)",
            "(line 348,col 9)-(line 348,col 52)",
            "(line 350,col 9)-(line 350,col 46)",
            "(line 351,col 9)-(line 351,col 36)",
            "(line 352,col 9)-(line 352,col 49)",
            "(line 353,col 9)-(line 353,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddDays()",
        "snippet": "    public void testAddDays() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addDays(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addDays(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 6, 4, 3, 2, 1);\n        \n        result = DateUtils.addDays(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 4, 4, 3, 2, 1);\n    }\n",
        "begin_line": 357,
        "end_line": 373,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 358,col 9)-(line 358,col 42)",
            "(line 359,col 9)-(line 359,col 49)",
            "(line 360,col 9)-(line 360,col 36)",
            "(line 361,col 9)-(line 361,col 49)",
            "(line 362,col 9)-(line 362,col 51)",
            "(line 364,col 9)-(line 364,col 44)",
            "(line 365,col 9)-(line 365,col 36)",
            "(line 366,col 9)-(line 366,col 49)",
            "(line 367,col 9)-(line 367,col 51)",
            "(line 369,col 9)-(line 369,col 45)",
            "(line 370,col 9)-(line 370,col 36)",
            "(line 371,col 9)-(line 371,col 49)",
            "(line 372,col 9)-(line 372,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddHours()",
        "snippet": "    public void testAddHours() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addHours(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addHours(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 5, 3, 2, 1);\n        \n        result = DateUtils.addHours(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 3, 3, 2, 1);\n    }\n",
        "begin_line": 376,
        "end_line": 392,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 42)",
            "(line 378,col 9)-(line 378,col 50)",
            "(line 379,col 9)-(line 379,col 36)",
            "(line 380,col 9)-(line 380,col 49)",
            "(line 381,col 9)-(line 381,col 51)",
            "(line 383,col 9)-(line 383,col 45)",
            "(line 384,col 9)-(line 384,col 36)",
            "(line 385,col 9)-(line 385,col 49)",
            "(line 386,col 9)-(line 386,col 51)",
            "(line 388,col 9)-(line 388,col 46)",
            "(line 389,col 9)-(line 389,col 36)",
            "(line 390,col 9)-(line 390,col 49)",
            "(line 391,col 9)-(line 391,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddMinutes()",
        "snippet": "    public void testAddMinutes() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addMinutes(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addMinutes(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 4, 2, 1);\n        \n        result = DateUtils.addMinutes(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 2, 2, 1);\n    }\n",
        "begin_line": 395,
        "end_line": 411,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 42)",
            "(line 397,col 9)-(line 397,col 52)",
            "(line 398,col 9)-(line 398,col 36)",
            "(line 399,col 9)-(line 399,col 49)",
            "(line 400,col 9)-(line 400,col 51)",
            "(line 402,col 9)-(line 402,col 47)",
            "(line 403,col 9)-(line 403,col 36)",
            "(line 404,col 9)-(line 404,col 49)",
            "(line 405,col 9)-(line 405,col 51)",
            "(line 407,col 9)-(line 407,col 48)",
            "(line 408,col 9)-(line 408,col 36)",
            "(line 409,col 9)-(line 409,col 49)",
            "(line 410,col 9)-(line 410,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddSeconds()",
        "snippet": "    public void testAddSeconds() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addSeconds(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addSeconds(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 3, 1);\n        \n        result = DateUtils.addSeconds(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 1, 1);\n    }\n",
        "begin_line": 414,
        "end_line": 430,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 42)",
            "(line 416,col 9)-(line 416,col 52)",
            "(line 417,col 9)-(line 417,col 36)",
            "(line 418,col 9)-(line 418,col 49)",
            "(line 419,col 9)-(line 419,col 51)",
            "(line 421,col 9)-(line 421,col 47)",
            "(line 422,col 9)-(line 422,col 36)",
            "(line 423,col 9)-(line 423,col 49)",
            "(line 424,col 9)-(line 424,col 51)",
            "(line 426,col 9)-(line 426,col 48)",
            "(line 427,col 9)-(line 427,col 36)",
            "(line 428,col 9)-(line 428,col 49)",
            "(line 429,col 9)-(line 429,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds()",
        "snippet": "    public void testAddMilliseconds() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addMilliseconds(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addMilliseconds(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 2);\n        \n        result = DateUtils.addMilliseconds(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n    }\n",
        "begin_line": 433,
        "end_line": 449,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 434,col 9)-(line 434,col 42)",
            "(line 435,col 9)-(line 435,col 57)",
            "(line 436,col 9)-(line 436,col 36)",
            "(line 437,col 9)-(line 437,col 49)",
            "(line 438,col 9)-(line 438,col 51)",
            "(line 440,col 9)-(line 440,col 52)",
            "(line 441,col 9)-(line 441,col 36)",
            "(line 442,col 9)-(line 442,col 49)",
            "(line 443,col 9)-(line 443,col 51)",
            "(line 445,col 9)-(line 445,col 53)",
            "(line 446,col 9)-(line 446,col 36)",
            "(line 447,col 9)-(line 447,col 49)",
            "(line 448,col 9)-(line 448,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetYears()",
        "snippet": "    public void testSetYears() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setYears(base, 2000);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n\n        result = DateUtils.setYears(base, 2008);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2008, 6, 5, 4, 3, 2, 1);\n\n        result = DateUtils.setYears(base, 2005);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2005, 6, 5, 4, 3, 2, 1);\n    }\n",
        "begin_line": 452,
        "end_line": 468,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 42)",
            "(line 454,col 9)-(line 454,col 53)",
            "(line 455,col 9)-(line 455,col 36)",
            "(line 456,col 9)-(line 456,col 49)",
            "(line 457,col 9)-(line 457,col 51)",
            "(line 459,col 9)-(line 459,col 48)",
            "(line 460,col 9)-(line 460,col 36)",
            "(line 461,col 9)-(line 461,col 49)",
            "(line 462,col 9)-(line 462,col 51)",
            "(line 464,col 9)-(line 464,col 48)",
            "(line 465,col 9)-(line 465,col 36)",
            "(line 466,col 9)-(line 466,col 49)",
            "(line 467,col 9)-(line 467,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetMonths()",
        "snippet": "    public void testSetMonths() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setMonths(base, 5);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n\n        result = DateUtils.setMonths(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 1, 5, 4, 3, 2, 1);\n\n        try {\n            result = DateUtils.setMonths(base, 12);\n            fail(\"DateUtils.setMonths did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }\n",
        "begin_line": 471,
        "end_line": 489,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 472,col 9)-(line 472,col 42)",
            "(line 473,col 9)-(line 473,col 51)",
            "(line 474,col 9)-(line 474,col 36)",
            "(line 475,col 9)-(line 475,col 49)",
            "(line 476,col 9)-(line 476,col 51)",
            "(line 478,col 9)-(line 478,col 46)",
            "(line 479,col 9)-(line 479,col 36)",
            "(line 480,col 9)-(line 480,col 49)",
            "(line 481,col 9)-(line 481,col 51)",
            "(line 483,col 9)-(line 488,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetDays()",
        "snippet": "    public void testSetDays() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setDays(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 1, 4, 3, 2, 1);\n\n        result = DateUtils.setDays(base, 29);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 29, 4, 3, 2, 1);\n\n        try {\n            result = DateUtils.setDays(base, 32);\n            fail(\"DateUtils.setDays did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }\n",
        "begin_line": 492,
        "end_line": 510,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 493,col 9)-(line 493,col 42)",
            "(line 494,col 9)-(line 494,col 49)",
            "(line 495,col 9)-(line 495,col 36)",
            "(line 496,col 9)-(line 496,col 49)",
            "(line 497,col 9)-(line 497,col 51)",
            "(line 499,col 9)-(line 499,col 45)",
            "(line 500,col 9)-(line 500,col 36)",
            "(line 501,col 9)-(line 501,col 49)",
            "(line 502,col 9)-(line 502,col 52)",
            "(line 504,col 9)-(line 509,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetHours()",
        "snippet": "    public void testSetHours() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setHours(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 0, 3, 2, 1);\n\n        result = DateUtils.setHours(base, 23);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 23, 3, 2, 1);\n\n        try {\n            result = DateUtils.setHours(base, 24);\n            fail(\"DateUtils.setHours did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }\n",
        "begin_line": 513,
        "end_line": 531,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 514,col 9)-(line 514,col 42)",
            "(line 515,col 9)-(line 515,col 50)",
            "(line 516,col 9)-(line 516,col 36)",
            "(line 517,col 9)-(line 517,col 49)",
            "(line 518,col 9)-(line 518,col 51)",
            "(line 520,col 9)-(line 520,col 46)",
            "(line 521,col 9)-(line 521,col 36)",
            "(line 522,col 9)-(line 522,col 49)",
            "(line 523,col 9)-(line 523,col 52)",
            "(line 525,col 9)-(line 530,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetMinutes()",
        "snippet": "    public void testSetMinutes() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setMinutes(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 0, 2, 1);\n\n        result = DateUtils.setMinutes(base, 59);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 59, 2, 1);\n\n        try {\n            result = DateUtils.setMinutes(base, 60);\n            fail(\"DateUtils.setMinutes did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }\n",
        "begin_line": 534,
        "end_line": 552,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 535,col 9)-(line 535,col 42)",
            "(line 536,col 9)-(line 536,col 52)",
            "(line 537,col 9)-(line 537,col 36)",
            "(line 538,col 9)-(line 538,col 49)",
            "(line 539,col 9)-(line 539,col 51)",
            "(line 541,col 9)-(line 541,col 48)",
            "(line 542,col 9)-(line 542,col 36)",
            "(line 543,col 9)-(line 543,col 49)",
            "(line 544,col 9)-(line 544,col 52)",
            "(line 546,col 9)-(line 551,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds()",
        "snippet": "    public void testSetSeconds() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setSeconds(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 0, 1);\n\n        result = DateUtils.setSeconds(base, 59);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 59, 1);\n\n        try {\n            result = DateUtils.setSeconds(base, 60);\n            fail(\"DateUtils.setSeconds did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }\n",
        "begin_line": 555,
        "end_line": 573,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 556,col 9)-(line 556,col 42)",
            "(line 557,col 9)-(line 557,col 52)",
            "(line 558,col 9)-(line 558,col 36)",
            "(line 559,col 9)-(line 559,col 49)",
            "(line 560,col 9)-(line 560,col 51)",
            "(line 562,col 9)-(line 562,col 48)",
            "(line 563,col 9)-(line 563,col 36)",
            "(line 564,col 9)-(line 564,col 49)",
            "(line 565,col 9)-(line 565,col 52)",
            "(line 567,col 9)-(line 572,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetMilliseconds()",
        "snippet": "    public void testSetMilliseconds() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setMilliseconds(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n\n        result = DateUtils.setMilliseconds(base, 999);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 999);\n\n        try {\n            result = DateUtils.setMilliseconds(base, 1000);\n            fail(\"DateUtils.setMilliseconds did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }\n",
        "begin_line": 576,
        "end_line": 594,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 577,col 9)-(line 577,col 42)",
            "(line 578,col 9)-(line 578,col 57)",
            "(line 579,col 9)-(line 579,col 36)",
            "(line 580,col 9)-(line 580,col 49)",
            "(line 581,col 9)-(line 581,col 51)",
            "(line 583,col 9)-(line 583,col 54)",
            "(line 584,col 9)-(line 584,col 36)",
            "(line 585,col 9)-(line 585,col 49)",
            "(line 586,col 9)-(line 586,col 53)",
            "(line 588,col 9)-(line 593,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.assertDate(java.util.Date, int, int, int, int, int, int, int)",
        "snippet": "    private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTime(date);\n        assertEquals(year, cal.get(Calendar.YEAR));\n        assertEquals(month, cal.get(Calendar.MONTH));\n        assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));\n        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));\n        assertEquals(min, cal.get(Calendar.MINUTE));\n        assertEquals(sec, cal.get(Calendar.SECOND));\n        assertEquals(mil, cal.get(Calendar.MILLISECOND));\n    }\n",
        "begin_line": 597,
        "end_line": 607,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 598,col 9)-(line 598,col 56)",
            "(line 599,col 9)-(line 599,col 26)",
            "(line 600,col 9)-(line 600,col 51)",
            "(line 601,col 9)-(line 601,col 53)",
            "(line 602,col 9)-(line 602,col 58)",
            "(line 603,col 9)-(line 603,col 58)",
            "(line 604,col 9)-(line 604,col 52)",
            "(line 605,col 9)-(line 605,col 52)",
            "(line 606,col 9)-(line 606,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testToCalendar()",
        "snippet": "    public void testToCalendar() {\n        assertEquals(\"Failed to convert to a Calendar and back\", date1, DateUtils.toCalendar(date1).getTime());\n        try {\n            DateUtils.toCalendar(null);\n            fail(\"Expected NullPointerException to be thrown\");\n        } catch(NullPointerException npe) {\n            // expected\n        }\n    }\n",
        "begin_line": 610,
        "end_line": 618,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 611,col 9)-(line 611,col 111)",
            "(line 612,col 9)-(line 617,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testRound()",
        "snippet": "    public void testRound() throws Exception {\n        // tests for public static Date round(Date date, int field)\n        assertEquals(\"round year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round(date1, Calendar.YEAR));\n        assertEquals(\"round year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round(date2, Calendar.YEAR));\n        assertEquals(\"round month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round(date1, Calendar.MONTH));\n        assertEquals(\"round month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.round(date2, Calendar.MONTH));\n        assertEquals(\"round semimonth-0 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round(date0, DateUtils.SEMI_MONTH));\n        assertEquals(\"round semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.round(date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"round semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.round(date2, DateUtils.SEMI_MONTH));\n        \n        \n        assertEquals(\"round date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.round(date1, Calendar.DATE));\n        assertEquals(\"round date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.round(date2, Calendar.DATE));\n        assertEquals(\"round hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.round(date1, Calendar.HOUR));\n        assertEquals(\"round hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.round(date2, Calendar.HOUR));\n        assertEquals(\"round minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.round(date1, Calendar.MINUTE));\n        assertEquals(\"round minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.round(date2, Calendar.MINUTE));\n        assertEquals(\"round second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round(date1, Calendar.SECOND));\n        assertEquals(\"round second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round(date2, Calendar.SECOND));\n        assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round(dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round(dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round(dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round(dateAmPm4, Calendar.AM_PM));\n\n        // tests for public static Date round(Object date, int field)\n        assertEquals(\"round year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round((Object) date1, Calendar.YEAR));\n        assertEquals(\"round year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round((Object) date2, Calendar.YEAR));\n        assertEquals(\"round month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round((Object) date1, Calendar.MONTH));\n        assertEquals(\"round month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.round((Object) date2, Calendar.MONTH));\n        assertEquals(\"round semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.round((Object) date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"round semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.round((Object) date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"round date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.round((Object) date1, Calendar.DATE));\n        assertEquals(\"round date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.round((Object) date2, Calendar.DATE));\n        assertEquals(\"round hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.round((Object) date1, Calendar.HOUR));\n        assertEquals(\"round hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.round((Object) date2, Calendar.HOUR));\n        assertEquals(\"round minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.round((Object) date1, Calendar.MINUTE));\n        assertEquals(\"round minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.round((Object) date2, Calendar.MINUTE));\n        assertEquals(\"round second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round((Object) date1, Calendar.SECOND));\n        assertEquals(\"round second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round((Object) date2, Calendar.SECOND));\n        assertEquals(\"round calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round((Object) cal1, Calendar.SECOND));\n        assertEquals(\"round calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round((Object) cal2, Calendar.SECOND));\n        assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round((Object) dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round((Object) dateAmPm4, Calendar.AM_PM));\n\n        try {\n            DateUtils.round((Date) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.round((Calendar) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.round((Object) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.round(\"\", Calendar.SECOND);\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            DateUtils.round(date1, -9999);\n            fail();\n        } catch(IllegalArgumentException ex) {}\n\n        assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round((Object) calAmPm1, Calendar.AM_PM));\n        assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) calAmPm2, Calendar.AM_PM));\n        assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) calAmPm3, Calendar.AM_PM));\n        assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round((Object) calAmPm4, Calendar.AM_PM));\n        \n        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 / LANG-13\n        // Test rounding across the beginning of daylight saving time\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date4, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal4, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date5, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal5, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date6, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal6, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date7, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal7, Calendar.DATE));\n        \n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                DateUtils.round(date4, Calendar.HOUR_OF_DAY));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY));\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round(date5, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round(date6, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.round(date7, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY));\n        } else {\n            this.warn(\"WARNING: Some date rounding tests not run since the current version is \" + SystemUtils.JAVA_SPECIFICATION_VERSION);\n        }\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n    }\n",
        "begin_line": 624,
        "end_line": 841,
        "comment": "\n     * Tests various values with the round method\n     ",
        "child_ranges": [
            "(line 626,col 9)-(line 628,col 55)",
            "(line 629,col 9)-(line 631,col 55)",
            "(line 632,col 9)-(line 634,col 56)",
            "(line 635,col 9)-(line 637,col 56)",
            "(line 638,col 9)-(line 640,col 62)",
            "(line 641,col 9)-(line 643,col 62)",
            "(line 644,col 9)-(line 646,col 62)",
            "(line 649,col 9)-(line 651,col 55)",
            "(line 652,col 9)-(line 654,col 55)",
            "(line 655,col 9)-(line 657,col 55)",
            "(line 658,col 9)-(line 660,col 55)",
            "(line 661,col 9)-(line 663,col 57)",
            "(line 664,col 9)-(line 666,col 57)",
            "(line 667,col 9)-(line 669,col 57)",
            "(line 670,col 9)-(line 672,col 57)",
            "(line 673,col 9)-(line 675,col 60)",
            "(line 676,col 9)-(line 678,col 60)",
            "(line 679,col 9)-(line 681,col 60)",
            "(line 682,col 9)-(line 684,col 60)",
            "(line 687,col 9)-(line 689,col 64)",
            "(line 690,col 9)-(line 692,col 64)",
            "(line 693,col 9)-(line 695,col 65)",
            "(line 696,col 9)-(line 698,col 65)",
            "(line 699,col 9)-(line 701,col 71)",
            "(line 702,col 9)-(line 704,col 71)",
            "(line 705,col 9)-(line 707,col 64)",
            "(line 708,col 9)-(line 710,col 64)",
            "(line 711,col 9)-(line 713,col 64)",
            "(line 714,col 9)-(line 716,col 64)",
            "(line 717,col 9)-(line 719,col 66)",
            "(line 720,col 9)-(line 722,col 66)",
            "(line 723,col 9)-(line 725,col 66)",
            "(line 726,col 9)-(line 728,col 66)",
            "(line 729,col 9)-(line 731,col 65)",
            "(line 732,col 9)-(line 734,col 65)",
            "(line 735,col 9)-(line 737,col 69)",
            "(line 738,col 9)-(line 740,col 69)",
            "(line 741,col 9)-(line 743,col 69)",
            "(line 744,col 9)-(line 746,col 69)",
            "(line 748,col 9)-(line 751,col 48)",
            "(line 752,col 9)-(line 755,col 48)",
            "(line 756,col 9)-(line 759,col 48)",
            "(line 760,col 9)-(line 763,col 42)",
            "(line 764,col 9)-(line 767,col 47)",
            "(line 769,col 9)-(line 771,col 68)",
            "(line 772,col 9)-(line 774,col 68)",
            "(line 775,col 9)-(line 777,col 68)",
            "(line 778,col 9)-(line 780,col 68)",
            "(line 784,col 9)-(line 784,col 34)",
            "(line 785,col 9)-(line 785,col 41)",
            "(line 786,col 9)-(line 788,col 55)",
            "(line 789,col 9)-(line 791,col 63)",
            "(line 792,col 9)-(line 794,col 55)",
            "(line 795,col 9)-(line 797,col 63)",
            "(line 798,col 9)-(line 800,col 55)",
            "(line 801,col 9)-(line 803,col 63)",
            "(line 804,col 9)-(line 806,col 55)",
            "(line 807,col 9)-(line 809,col 63)",
            "(line 811,col 9)-(line 813,col 62)",
            "(line 814,col 9)-(line 816,col 70)",
            "(line 817,col 9)-(line 838,col 9)",
            "(line 839,col 9)-(line 839,col 41)",
            "(line 840,col 9)-(line 840,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testRoundLang346()",
        "snippet": "    public void testRoundLang346() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));\n    }\n",
        "begin_line": 847,
        "end_line": 904,
        "comment": "\n     * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked\n     * by DateUtils.round().\n     ",
        "child_ranges": [
            "(line 849,col 9)-(line 849,col 41)",
            "(line 850,col 9)-(line 850,col 48)",
            "(line 851,col 9)-(line 851,col 55)",
            "(line 852,col 9)-(line 852,col 47)",
            "(line 853,col 9)-(line 853,col 43)",
            "(line 854,col 9)-(line 856,col 61)",
            "(line 858,col 9)-(line 858,col 47)",
            "(line 859,col 9)-(line 859,col 38)",
            "(line 860,col 9)-(line 862,col 61)",
            "(line 864,col 9)-(line 864,col 47)",
            "(line 865,col 9)-(line 865,col 52)",
            "(line 866,col 9)-(line 866,col 38)",
            "(line 868,col 9)-(line 870,col 61)",
            "(line 872,col 9)-(line 872,col 47)",
            "(line 873,col 9)-(line 873,col 52)",
            "(line 874,col 9)-(line 874,col 38)",
            "(line 875,col 9)-(line 877,col 61)",
            "(line 879,col 9)-(line 879,col 47)",
            "(line 880,col 9)-(line 880,col 52)",
            "(line 881,col 9)-(line 881,col 38)",
            "(line 882,col 9)-(line 884,col 61)",
            "(line 886,col 9)-(line 886,col 47)",
            "(line 887,col 9)-(line 887,col 52)",
            "(line 888,col 9)-(line 888,col 38)",
            "(line 889,col 9)-(line 891,col 61)",
            "(line 893,col 9)-(line 893,col 47)",
            "(line 894,col 9)-(line 894,col 38)",
            "(line 895,col 9)-(line 897,col 59)",
            "(line 899,col 9)-(line 899,col 48)",
            "(line 900,col 9)-(line 900,col 38)",
            "(line 901,col 9)-(line 903,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testTruncate()",
        "snippet": "    public void testTruncate() throws Exception {\n        // tests public static Date truncate(Date date, int field)\n        assertEquals(\"truncate year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.truncate(date1, Calendar.YEAR));\n        assertEquals(\"truncate year-2 failed\",\n                dateParser.parse(\"January 1, 2001\"),\n                DateUtils.truncate(date2, Calendar.YEAR));\n        assertEquals(\"truncate month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate(date1, Calendar.MONTH));\n        assertEquals(\"truncate month-2 failed\",\n                dateParser.parse(\"November 1, 2001\"),\n                DateUtils.truncate(date2, Calendar.MONTH));\n        assertEquals(\"truncate semimonth-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate(date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.truncate(date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate date-1 failed\",\n                dateParser.parse(\"February 12, 2002\"),\n                DateUtils.truncate(date1, Calendar.DATE));\n        assertEquals(\"truncate date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.truncate(date2, Calendar.DATE));\n        assertEquals(\"truncate hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n                DateUtils.truncate(date1, Calendar.HOUR));\n        assertEquals(\"truncate hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.truncate(date2, Calendar.HOUR));\n        assertEquals(\"truncate minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n                DateUtils.truncate(date1, Calendar.MINUTE));\n        assertEquals(\"truncate minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.truncate(date2, Calendar.MINUTE));\n        assertEquals(\"truncate second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate(date1, Calendar.SECOND));\n        assertEquals(\"truncate second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate(date2, Calendar.SECOND));\n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate(dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate(dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate(dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate(dateAmPm4, Calendar.AM_PM));\n\n        // tests public static Date truncate(Object date, int field)\n        assertEquals(\"truncate year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.YEAR));\n        assertEquals(\"truncate year-2 failed\",\n                dateParser.parse(\"January 1, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.YEAR));\n        assertEquals(\"truncate month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.MONTH));\n        assertEquals(\"truncate month-2 failed\",\n                dateParser.parse(\"November 1, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.MONTH));\n        assertEquals(\"truncate semimonth-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate date-1 failed\",\n                dateParser.parse(\"February 12, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.DATE));\n        assertEquals(\"truncate date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.DATE));\n        assertEquals(\"truncate hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) date1, Calendar.HOUR));\n        assertEquals(\"truncate hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.truncate((Object) date2, Calendar.HOUR));\n        assertEquals(\"truncate minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n                DateUtils.truncate((Object) date1, Calendar.MINUTE));\n        assertEquals(\"truncate minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.truncate((Object) date2, Calendar.MINUTE));\n        assertEquals(\"truncate second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate((Object) date1, Calendar.SECOND));\n        assertEquals(\"truncate second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate((Object) date2, Calendar.SECOND));\n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM));\n        \n        assertEquals(\"truncate calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate((Object) cal1, Calendar.SECOND));\n        assertEquals(\"truncate calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate((Object) cal2, Calendar.SECOND));\n        \n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM));\n        \n        try {\n            DateUtils.truncate((Date) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.truncate((Calendar) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.truncate((Object) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.truncate(\"\", Calendar.SECOND);\n            fail();\n        } catch (ClassCastException ex) {}\n\n        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n        // Test truncate across beginning of daylight saving time\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.truncate(date3, Calendar.DATE));\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.truncate((Object) cal3, Calendar.DATE));\n        // Test truncate across end of daylight saving time\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n                DateUtils.truncate(date8, Calendar.DATE));\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n                DateUtils.truncate((Object) cal8, Calendar.DATE));\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        \n        // Bug 31395, large dates\n        Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\n        GregorianCalendar endCal = new GregorianCalendar();\n        endCal.setTime(endOfTime);\n        try {\n            DateUtils.truncate(endCal, Calendar.DATE);\n            fail();\n        } catch (ArithmeticException ex) {}\n        endCal.set(Calendar.YEAR, 280000001);\n        try {\n            DateUtils.truncate(endCal, Calendar.DATE);\n            fail();\n        } catch (ArithmeticException ex) {}\n        endCal.set(Calendar.YEAR, 280000000);\n        Calendar cal = DateUtils.truncate(endCal, Calendar.DATE);\n        assertEquals(0, cal.get(Calendar.HOUR));\n    }\n",
        "begin_line": 909,
        "end_line": 1095,
        "comment": "\n     * Tests various values with the trunc method\n     ",
        "child_ranges": [
            "(line 911,col 9)-(line 913,col 58)",
            "(line 914,col 9)-(line 916,col 58)",
            "(line 917,col 9)-(line 919,col 59)",
            "(line 920,col 9)-(line 922,col 59)",
            "(line 923,col 9)-(line 925,col 65)",
            "(line 926,col 9)-(line 928,col 65)",
            "(line 929,col 9)-(line 931,col 58)",
            "(line 932,col 9)-(line 934,col 58)",
            "(line 935,col 9)-(line 937,col 58)",
            "(line 938,col 9)-(line 940,col 58)",
            "(line 941,col 9)-(line 943,col 60)",
            "(line 944,col 9)-(line 946,col 60)",
            "(line 947,col 9)-(line 949,col 60)",
            "(line 950,col 9)-(line 952,col 60)",
            "(line 953,col 9)-(line 955,col 63)",
            "(line 956,col 9)-(line 958,col 63)",
            "(line 959,col 9)-(line 961,col 63)",
            "(line 962,col 9)-(line 964,col 63)",
            "(line 967,col 9)-(line 969,col 67)",
            "(line 970,col 9)-(line 972,col 67)",
            "(line 973,col 9)-(line 975,col 68)",
            "(line 976,col 9)-(line 978,col 68)",
            "(line 979,col 9)-(line 981,col 74)",
            "(line 982,col 9)-(line 984,col 74)",
            "(line 985,col 9)-(line 987,col 67)",
            "(line 988,col 9)-(line 990,col 67)",
            "(line 991,col 9)-(line 993,col 67)",
            "(line 994,col 9)-(line 996,col 67)",
            "(line 997,col 9)-(line 999,col 69)",
            "(line 1000,col 9)-(line 1002,col 69)",
            "(line 1003,col 9)-(line 1005,col 69)",
            "(line 1006,col 9)-(line 1008,col 69)",
            "(line 1009,col 9)-(line 1011,col 72)",
            "(line 1012,col 9)-(line 1014,col 72)",
            "(line 1015,col 9)-(line 1017,col 72)",
            "(line 1018,col 9)-(line 1020,col 72)",
            "(line 1022,col 9)-(line 1024,col 68)",
            "(line 1025,col 9)-(line 1027,col 68)",
            "(line 1029,col 9)-(line 1031,col 71)",
            "(line 1032,col 9)-(line 1034,col 71)",
            "(line 1035,col 9)-(line 1037,col 71)",
            "(line 1038,col 9)-(line 1040,col 71)",
            "(line 1042,col 9)-(line 1045,col 48)",
            "(line 1046,col 9)-(line 1049,col 48)",
            "(line 1050,col 9)-(line 1053,col 48)",
            "(line 1054,col 9)-(line 1057,col 42)",
            "(line 1061,col 9)-(line 1061,col 34)",
            "(line 1062,col 9)-(line 1062,col 41)",
            "(line 1063,col 9)-(line 1065,col 58)",
            "(line 1066,col 9)-(line 1068,col 66)",
            "(line 1070,col 9)-(line 1072,col 58)",
            "(line 1073,col 9)-(line 1075,col 66)",
            "(line 1076,col 9)-(line 1076,col 41)",
            "(line 1077,col 9)-(line 1077,col 48)",
            "(line 1080,col 9)-(line 1080,col 50)",
            "(line 1081,col 9)-(line 1081,col 59)",
            "(line 1082,col 9)-(line 1082,col 34)",
            "(line 1083,col 9)-(line 1086,col 43)",
            "(line 1087,col 9)-(line 1087,col 45)",
            "(line 1088,col 9)-(line 1091,col 43)",
            "(line 1092,col 9)-(line 1092,col 45)",
            "(line 1093,col 9)-(line 1093,col 65)",
            "(line 1094,col 9)-(line 1094,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59()",
        "snippet": "    public void testTruncateLang59() throws Exception {\n        if (!SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\n            this.warn(\"WARNING: Test for LANG-59 not run since the current version is \" + SystemUtils.JAVA_SPECIFICATION_VERSION);\n            return;\n        }\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));\n        assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));\n        assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));\n        assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));\n        assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);\n\n        // ---------- Test Truncate ----------\n        assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n        assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n        assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n        assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n        assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));\n\n\n        // ---------- Test Round (down) ----------\n        assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n        assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n        assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n        assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n        assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n        assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }\n",
        "begin_line": 1102,
        "end_line": 1174,
        "comment": "\n     * Tests for LANG-59\n     *\n     * see http://issues.apache.org/jira/browse/LANG-59\n     ",
        "child_ranges": [
            "(line 1103,col 9)-(line 1106,col 9)",
            "(line 1109,col 9)-(line 1109,col 59)",
            "(line 1110,col 9)-(line 1110,col 37)",
            "(line 1111,col 9)-(line 1111,col 78)",
            "(line 1112,col 9)-(line 1112,col 36)",
            "(line 1114,col 9)-(line 1114,col 52)",
            "(line 1116,col 9)-(line 1116,col 85)",
            "(line 1117,col 9)-(line 1117,col 84)",
            "(line 1118,col 9)-(line 1118,col 82)",
            "(line 1119,col 9)-(line 1119,col 79)",
            "(line 1121,col 9)-(line 1121,col 99)",
            "(line 1122,col 9)-(line 1122,col 102)",
            "(line 1123,col 9)-(line 1123,col 105)",
            "(line 1124,col 9)-(line 1124,col 108)",
            "(line 1125,col 9)-(line 1125,col 111)",
            "(line 1128,col 9)-(line 1128,col 47)",
            "(line 1129,col 9)-(line 1129,col 54)",
            "(line 1130,col 9)-(line 1130,col 61)",
            "(line 1131,col 9)-(line 1131,col 104)",
            "(line 1134,col 9)-(line 1135,col 102)",
            "(line 1137,col 9)-(line 1138,col 97)",
            "(line 1140,col 9)-(line 1141,col 97)",
            "(line 1143,col 9)-(line 1144,col 102)",
            "(line 1146,col 9)-(line 1147,col 95)",
            "(line 1149,col 9)-(line 1150,col 95)",
            "(line 1154,col 9)-(line 1155,col 99)",
            "(line 1157,col 9)-(line 1158,col 94)",
            "(line 1160,col 9)-(line 1161,col 94)",
            "(line 1163,col 9)-(line 1164,col 99)",
            "(line 1166,col 9)-(line 1167,col 92)",
            "(line 1169,col 9)-(line 1170,col 92)",
            "(line 1173,col 9)-(line 1173,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testLang530()",
        "snippet": "    public void testLang530() throws ParseException {\n        Date d = new Date();\n        String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d);\n        Date d2 = DateUtils.parseDate(isoDateStr, new String[] { DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern() });\n        // the format loses milliseconds so have to reintroduce them\n        assertEquals(\"Date not equal to itself ISO formatted and parsed\", d.getTime(), d2.getTime() + d.getTime() % 1000); \n    }\n",
        "begin_line": 1177,
        "end_line": 1183,
        "comment": " http://issues.apache.org/jira/browse/LANG-530",
        "child_ranges": [
            "(line 1178,col 9)-(line 1178,col 28)",
            "(line 1179,col 9)-(line 1179,col 84)",
            "(line 1180,col 9)-(line 1180,col 127)",
            "(line 1182,col 9)-(line 1182,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testCeil()",
        "snippet": "    public void testCeil() throws Exception {\n        // test javadoc\n        assertEquals(\"ceiling javadoc-1 failed\",\n                dateTimeParser.parse(\"March 28, 2002 14:00:00.000\"),\n                DateUtils.ceiling(\n                    dateTimeParser.parse(\"March 28, 2002 13:45:01.231\"),\n                Calendar.HOUR));\n        assertEquals(\"ceiling javadoc-2 failed\",\n                dateTimeParser.parse(\"April 1, 2002 00:00:00.000\"),\n                DateUtils.ceiling(\n                    dateTimeParser.parse(\"March 28, 2002 13:45:01.231\"),\n                Calendar.MONTH));\n\n        // tests public static Date ceiling(Date date, int field)\n        assertEquals(\"ceiling year-1 failed\",\n                dateParser.parse(\"January 1, 2003\"),\n                DateUtils.ceiling(date1, Calendar.YEAR));\n        assertEquals(\"ceiling year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.ceiling(date2, Calendar.YEAR));\n        assertEquals(\"ceiling month-1 failed\",\n                dateParser.parse(\"March 1, 2002\"),\n                DateUtils.ceiling(date1, Calendar.MONTH));\n        assertEquals(\"ceiling month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling(date2, Calendar.MONTH));\n        assertEquals(\"ceiling semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.ceiling(date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"ceiling semimonth-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling(date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"ceiling date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.ceiling(date1, Calendar.DATE));\n        assertEquals(\"ceiling date-2 failed\",\n                dateParser.parse(\"November 19, 2001\"),\n                DateUtils.ceiling(date2, Calendar.DATE));\n        assertEquals(\"ceiling hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.ceiling(date1, Calendar.HOUR));\n        assertEquals(\"ceiling hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n                DateUtils.ceiling(date2, Calendar.HOUR));\n        assertEquals(\"ceiling minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.ceiling(date1, Calendar.MINUTE));\n        assertEquals(\"ceiling minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n                DateUtils.ceiling(date2, Calendar.MINUTE));\n        assertEquals(\"ceiling second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling(date1, Calendar.SECOND));\n        assertEquals(\"ceiling second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling(date2, Calendar.SECOND));\n        assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling(dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling(dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling(dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling(dateAmPm4, Calendar.AM_PM));\n        \n     // tests public static Date ceiling(Object date, int field)\n        assertEquals(\"ceiling year-1 failed\",\n                dateParser.parse(\"January 1, 2003\"),\n                DateUtils.ceiling((Object) date1, Calendar.YEAR));\n        assertEquals(\"ceiling year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.ceiling((Object) date2, Calendar.YEAR));\n        assertEquals(\"ceiling month-1 failed\",\n                dateParser.parse(\"March 1, 2002\"),\n                DateUtils.ceiling((Object) date1, Calendar.MONTH));\n        assertEquals(\"ceiling month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling((Object) date2, Calendar.MONTH));\n        assertEquals(\"ceiling semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"ceiling semimonth-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"ceiling date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.ceiling((Object) date1, Calendar.DATE));\n        assertEquals(\"ceiling date-2 failed\",\n                dateParser.parse(\"November 19, 2001\"),\n                DateUtils.ceiling((Object) date2, Calendar.DATE));\n        assertEquals(\"ceiling hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.HOUR));\n        assertEquals(\"ceiling hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.HOUR));\n        assertEquals(\"ceiling minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.MINUTE));\n        assertEquals(\"ceiling minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.MINUTE));\n        assertEquals(\"ceiling second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.SECOND));\n        assertEquals(\"ceiling second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.SECOND));\n        assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM));\n        \n        assertEquals(\"ceiling calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling((Object) cal1, Calendar.SECOND));\n        assertEquals(\"ceiling calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling((Object) cal2, Calendar.SECOND));\n        \n        assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM));\n\n        try {\n            DateUtils.ceiling((Date) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.ceiling((Calendar) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.ceiling((Object) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.ceiling(\"\", Calendar.SECOND);\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            DateUtils.ceiling(date1, -9999);\n            fail();\n        } catch(IllegalArgumentException ex) {}\n\n        \n        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n        // Test ceiling across the beginning of daylight saving time\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date4, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal4, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date5, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal5, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date6, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal6, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date7, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal7, Calendar.DATE));\n        \n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY));\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY));\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY));\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY));\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY));\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY));\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY));\n        } else {\n            this.warn(\"WARNING: Some date ceiling tests not run since the current version is \" + SystemUtils.JAVA_SPECIFICATION_VERSION);\n        }\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        \n     // Bug 31395, large dates\n        Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\n        GregorianCalendar endCal = new GregorianCalendar();\n        endCal.setTime(endOfTime);\n        try {\n            DateUtils.ceiling(endCal, Calendar.DATE);\n            fail();\n        } catch (ArithmeticException ex) {}\n        endCal.set(Calendar.YEAR, 280000001);\n        try {\n            DateUtils.ceiling(endCal, Calendar.DATE);\n            fail();\n        } catch (ArithmeticException ex) {}\n        endCal.set(Calendar.YEAR, 280000000);\n        Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE);\n        assertEquals(0, cal.get(Calendar.HOUR));\n    }\n",
        "begin_line": 1188,
        "end_line": 1432,
        "comment": "\n     * Tests various values with the ceiling method\n     ",
        "child_ranges": [
            "(line 1190,col 9)-(line 1194,col 32)",
            "(line 1195,col 9)-(line 1199,col 33)",
            "(line 1202,col 9)-(line 1204,col 57)",
            "(line 1205,col 9)-(line 1207,col 57)",
            "(line 1208,col 9)-(line 1210,col 58)",
            "(line 1211,col 9)-(line 1213,col 58)",
            "(line 1214,col 9)-(line 1216,col 64)",
            "(line 1217,col 9)-(line 1219,col 64)",
            "(line 1220,col 9)-(line 1222,col 57)",
            "(line 1223,col 9)-(line 1225,col 57)",
            "(line 1226,col 9)-(line 1228,col 57)",
            "(line 1229,col 9)-(line 1231,col 57)",
            "(line 1232,col 9)-(line 1234,col 59)",
            "(line 1235,col 9)-(line 1237,col 59)",
            "(line 1238,col 9)-(line 1240,col 59)",
            "(line 1241,col 9)-(line 1243,col 59)",
            "(line 1244,col 9)-(line 1246,col 62)",
            "(line 1247,col 9)-(line 1249,col 62)",
            "(line 1250,col 9)-(line 1252,col 62)",
            "(line 1253,col 9)-(line 1255,col 62)",
            "(line 1258,col 9)-(line 1260,col 66)",
            "(line 1261,col 9)-(line 1263,col 66)",
            "(line 1264,col 9)-(line 1266,col 67)",
            "(line 1267,col 9)-(line 1269,col 67)",
            "(line 1270,col 9)-(line 1272,col 73)",
            "(line 1273,col 9)-(line 1275,col 73)",
            "(line 1276,col 9)-(line 1278,col 66)",
            "(line 1279,col 9)-(line 1281,col 66)",
            "(line 1282,col 9)-(line 1284,col 66)",
            "(line 1285,col 9)-(line 1287,col 66)",
            "(line 1288,col 9)-(line 1290,col 68)",
            "(line 1291,col 9)-(line 1293,col 68)",
            "(line 1294,col 9)-(line 1296,col 68)",
            "(line 1297,col 9)-(line 1299,col 68)",
            "(line 1300,col 9)-(line 1302,col 71)",
            "(line 1303,col 9)-(line 1305,col 71)",
            "(line 1306,col 9)-(line 1308,col 71)",
            "(line 1309,col 9)-(line 1311,col 71)",
            "(line 1313,col 9)-(line 1315,col 67)",
            "(line 1316,col 9)-(line 1318,col 67)",
            "(line 1320,col 9)-(line 1322,col 70)",
            "(line 1323,col 9)-(line 1325,col 70)",
            "(line 1326,col 9)-(line 1328,col 70)",
            "(line 1329,col 9)-(line 1331,col 70)",
            "(line 1333,col 9)-(line 1336,col 48)",
            "(line 1337,col 9)-(line 1340,col 48)",
            "(line 1341,col 9)-(line 1344,col 48)",
            "(line 1345,col 9)-(line 1348,col 42)",
            "(line 1349,col 9)-(line 1352,col 47)",
            "(line 1357,col 9)-(line 1357,col 34)",
            "(line 1358,col 9)-(line 1358,col 41)",
            "(line 1360,col 9)-(line 1362,col 57)",
            "(line 1363,col 9)-(line 1365,col 65)",
            "(line 1366,col 9)-(line 1368,col 57)",
            "(line 1369,col 9)-(line 1371,col 65)",
            "(line 1372,col 9)-(line 1374,col 57)",
            "(line 1375,col 9)-(line 1377,col 65)",
            "(line 1378,col 9)-(line 1380,col 57)",
            "(line 1381,col 9)-(line 1383,col 65)",
            "(line 1385,col 9)-(line 1387,col 64)",
            "(line 1388,col 9)-(line 1390,col 72)",
            "(line 1391,col 9)-(line 1412,col 9)",
            "(line 1413,col 9)-(line 1413,col 41)",
            "(line 1414,col 9)-(line 1414,col 48)",
            "(line 1417,col 9)-(line 1417,col 50)",
            "(line 1418,col 9)-(line 1418,col 59)",
            "(line 1419,col 9)-(line 1419,col 34)",
            "(line 1420,col 9)-(line 1423,col 43)",
            "(line 1424,col 9)-(line 1424,col 45)",
            "(line 1425,col 9)-(line 1428,col 43)",
            "(line 1429,col 9)-(line 1429,col 45)",
            "(line 1430,col 9)-(line 1430,col 64)",
            "(line 1431,col 9)-(line 1431,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx()",
        "snippet": "    public void testIteratorEx() throws Exception {\n        try {\n            DateUtils.iterator(Calendar.getInstance(), -9999);\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator(\"\", DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (ClassCastException ex) {}\n    }\n",
        "begin_line": 1437,
        "end_line": 1457,
        "comment": "\n     * Tests the iterator exceptions\n     ",
        "child_ranges": [
            "(line 1438,col 9)-(line 1440,col 48)",
            "(line 1441,col 9)-(line 1444,col 48)",
            "(line 1445,col 9)-(line 1448,col 48)",
            "(line 1449,col 9)-(line 1452,col 48)",
            "(line 1453,col 9)-(line 1456,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator()",
        "snippet": "    public void testWeekIterator() throws Exception {\n        Calendar now = Calendar.getInstance();\n        for (int i = 0; i< 7; i++) {\n            Calendar today = DateUtils.truncate(now, Calendar.DATE);\n            Calendar sunday = DateUtils.truncate(now, Calendar.DATE);\n            sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));\n            Calendar monday = DateUtils.truncate(now, Calendar.DATE);\n            if (monday.get(Calendar.DAY_OF_WEEK) == 1) {\n                //This is sunday... roll back 6 days\n                monday.add(Calendar.DATE, -6);\n            } else {\n                monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));\n            }\n            Calendar centered = DateUtils.truncate(now, Calendar.DATE);\n            centered.add(Calendar.DATE, -3);\n            \n            Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);\n            assertWeekIterator(it, sunday);\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);\n            assertWeekIterator(it, monday);\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);\n            assertWeekIterator(it, today);\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\n            assertWeekIterator(it, centered);\n            \n            it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);\n            assertWeekIterator(it, centered);\n            it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);\n            assertWeekIterator(it, centered);\n            try {\n                it.next();\n                fail();\n            } catch (NoSuchElementException ex) {}\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\n            it.next();\n            try {\n                it.remove();\n            } catch( UnsupportedOperationException ex) {}\n            \n            now.add(Calendar.DATE,1);\n        }\n    }\n",
        "begin_line": 1462,
        "end_line": 1503,
        "comment": "\n     * Tests the calendar iterator for week ranges\n     ",
        "child_ranges": [
            "(line 1463,col 9)-(line 1463,col 46)",
            "(line 1464,col 9)-(line 1502,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator()",
        "snippet": "    public void testMonthIterator() throws Exception {\n        Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"January 27, 2002\"),\n                dateParser.parse(\"March 2, 2002\"));\n\n        it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"January 28, 2002\"),\n                dateParser.parse(\"March 3, 2002\"));\n\n        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"October 28, 2001\"),\n                dateParser.parse(\"December 1, 2001\"));\n\n        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"October 29, 2001\"),\n                dateParser.parse(\"December 2, 2001\"));\n    }\n",
        "begin_line": 1508,
        "end_line": 1528,
        "comment": "\n     * Tests the calendar iterator for month-based ranges\n     ",
        "child_ranges": [
            "(line 1509,col 9)-(line 1509,col 81)",
            "(line 1510,col 9)-(line 1512,col 51)",
            "(line 1514,col 9)-(line 1514,col 69)",
            "(line 1515,col 9)-(line 1517,col 51)",
            "(line 1519,col 9)-(line 1519,col 69)",
            "(line 1520,col 9)-(line 1522,col 54)",
            "(line 1524,col 9)-(line 1524,col 69)",
            "(line 1525,col 9)-(line 1527,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator<?>, java.util.Calendar)",
        "snippet": "    private static void assertWeekIterator(Iterator<?> it, Calendar start) {\n        Calendar end = (Calendar) start.clone();\n        end.add(Calendar.DATE, 6);\n\n        assertWeekIterator(it, start, end);\n    }\n",
        "begin_line": 1534,
        "end_line": 1539,
        "comment": "\n     * This checks that this is a 7 element iterator of Calendar objects\n     * that are dates (no time), and exactly 1 day spaced after each other.\n     ",
        "child_ranges": [
            "(line 1535,col 9)-(line 1535,col 48)",
            "(line 1536,col 9)-(line 1536,col 34)",
            "(line 1538,col 9)-(line 1538,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator<?>, java.util.Date, java.util.Date)",
        "snippet": "    private static void assertWeekIterator(Iterator<?> it, Date start, Date end) {\n        Calendar calStart = Calendar.getInstance();\n        calStart.setTime(start);\n        Calendar calEnd = Calendar.getInstance();\n        calEnd.setTime(end);\n\n        assertWeekIterator(it, calStart, calEnd);\n    }\n",
        "begin_line": 1544,
        "end_line": 1551,
        "comment": "\n     * Convenience method for when working with Date objects\n     ",
        "child_ranges": [
            "(line 1545,col 9)-(line 1545,col 51)",
            "(line 1546,col 9)-(line 1546,col 32)",
            "(line 1547,col 9)-(line 1547,col 49)",
            "(line 1548,col 9)-(line 1548,col 28)",
            "(line 1550,col 9)-(line 1550,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator<?>, java.util.Calendar, java.util.Calendar)",
        "snippet": "    private static void assertWeekIterator(Iterator<?> it, Calendar start, Calendar end) {\n        Calendar cal = (Calendar) it.next();\n        assertEquals(\"\", start, cal, 0);\n        Calendar last = null;\n        int count = 1;\n        while (it.hasNext()) {\n            //Check this is just a date (no time component)\n            assertEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);\n\n            last = cal;\n            cal = (Calendar) it.next();\n            count++;\n\n            //Check that this is one day more than the last date\n            last.add(Calendar.DATE, 1);\n            assertEquals(\"\", last, cal, 0);\n        }\n        if (count % 7 != 0) {\n            throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");\n        }\n        assertEquals(\"\", end, cal, 0);\n    }\n",
        "begin_line": 1558,
        "end_line": 1579,
        "comment": "\n     * This checks that this is a 7 divisble iterator of Calendar objects\n     * that are dates (no time), and exactly 1 day spaced after each other\n     * (in addition to the proper start and stop dates)\n     ",
        "child_ranges": [
            "(line 1559,col 9)-(line 1559,col 44)",
            "(line 1560,col 9)-(line 1560,col 40)",
            "(line 1561,col 9)-(line 1561,col 29)",
            "(line 1562,col 9)-(line 1562,col 22)",
            "(line 1563,col 9)-(line 1574,col 9)",
            "(line 1575,col 9)-(line 1577,col 9)",
            "(line 1578,col 9)-(line 1578,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.assertEquals(java.lang.String, java.util.Calendar, java.util.Calendar, long)",
        "snippet": "    private static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {\n            throw new AssertionFailedError(\n                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());\n        }\n    }\n",
        "begin_line": 1585,
        "end_line": 1590,
        "comment": "\n     * Used to check that Calendar objects are close enough\n     * delta is in milliseconds\n     ",
        "child_ranges": [
            "(line 1586,col 9)-(line 1589,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.warn(java.lang.String)",
        "snippet": "    void warn(String msg) {\n        System.err.println(msg);\n    }\n",
        "begin_line": 1592,
        "end_line": 1594,
        "comment": "",
        "child_ranges": [
            "(line 1593,col 9)-(line 1593,col 32)"
        ]
    }
]