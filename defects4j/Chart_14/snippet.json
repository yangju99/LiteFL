[
    {
        "name": "XYPlot.removeDomainMarker#2231",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker(org.jfree.chart.plot.Marker)",
        "snippet": "    public boolean removeDomainMarker(Marker marker) {\n        return removeDomainMarker(marker, Layer.FOREGROUND);\n    }\n",
        "begin_line": 2231,
        "end_line": 2233,
        "comment": "\r\n     * Removes a marker for the domain axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     *\r\n     * @param marker  the marker.\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.removeDomainMarker#2247",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public boolean removeDomainMarker(Marker marker, Layer layer) {\n        return removeDomainMarker(0, marker, layer);\n    }\n",
        "begin_line": 2247,
        "end_line": 2249,
        "comment": "\r\n     * Removes a marker for the domain axis in the specified layer and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param marker the marker (<code>null</code> not permitted).\r\n     * @param layer the layer (foreground or background).\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.removeDomainMarker#2264",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public boolean removeDomainMarker(int index, Marker marker, Layer layer) {\n    \treturn removeDomainMarker(index, marker, layer, true);\n    }\n",
        "begin_line": 2264,
        "end_line": 2266,
        "comment": "\r\n     * Removes a marker for a specific dataset/renderer and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param index the dataset/renderer index.\r\n     * @param marker the marker.\r\n     * @param layer the layer (foreground or background).\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.removeDomainMarker#2282",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer, boolean)",
        "snippet": "    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
        "begin_line": 2282,
        "end_line": 2298,
        "comment": "\r\n     * Removes a marker for a specific dataset/renderer and, if requested, \r\n     * sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param index  the dataset/renderer index.\r\n     * @param marker  the marker.\r\n     * @param layer  the layer (foreground or background).\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.10\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.removeRangeMarker#2464",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker(org.jfree.chart.plot.Marker)",
        "snippet": "    public boolean removeRangeMarker(Marker marker) {\n        return removeRangeMarker(marker, Layer.FOREGROUND);\n    }\n",
        "begin_line": 2464,
        "end_line": 2466,
        "comment": "\r\n     * Removes a marker for the range axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     *\r\n     * @param marker the marker.\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.removeRangeMarker#2480",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public boolean removeRangeMarker(Marker marker, Layer layer) {\n        return removeRangeMarker(0, marker, layer);\n    }\n",
        "begin_line": 2480,
        "end_line": 2482,
        "comment": "\r\n     * Removes a marker for the range axis in the specified layer and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param marker the marker (<code>null</code> not permitted).\r\n     * @param layer the layer (foreground or background).\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.removeRangeMarker#2497",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public boolean removeRangeMarker(int index, Marker marker, Layer layer) {\n    \treturn removeRangeMarker(index, marker, layer, true);\n    }\n",
        "begin_line": 2497,
        "end_line": 2499,
        "comment": "\r\n     * Removes a marker for a specific dataset/renderer and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param index the dataset/renderer index.\r\n     * @param marker the marker.\r\n     * @param layer the layer (foreground or background).\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.removeRangeMarker#2515",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer, boolean)",
        "snippet": "    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' argument.\");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
        "begin_line": 2515,
        "end_line": 2534,
        "comment": "\r\n     * Removes a marker for a specific dataset/renderer and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param index  the dataset/renderer index.\r\n     * @param marker  the marker.\r\n     * @param layer  the layer (foreground or background).\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.10\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.removeDomainMarker#2105",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.removeDomainMarker(org.jfree.chart.plot.Marker)",
        "snippet": "    public boolean removeDomainMarker(Marker marker) {\n        return removeDomainMarker(marker, Layer.FOREGROUND);\n    }\n",
        "begin_line": 2105,
        "end_line": 2107,
        "comment": "\r\n     * Removes a marker for the domain axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     *\r\n     * @param marker  the marker.\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.removeDomainMarker#2121",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.removeDomainMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public boolean removeDomainMarker(Marker marker, Layer layer) {\n        return removeDomainMarker(0, marker, layer);\n    }\n",
        "begin_line": 2121,
        "end_line": 2123,
        "comment": "\r\n     * Removes a marker for the domain axis in the specified layer and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param marker the marker (<code>null</code> not permitted).\r\n     * @param layer the layer (foreground or background).\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.removeDomainMarker#2138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.removeDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public boolean removeDomainMarker(int index, Marker marker, Layer layer) {\n    \treturn removeDomainMarker(index, marker, layer, true);\n    }\n",
        "begin_line": 2138,
        "end_line": 2140,
        "comment": "\r\n     * Removes a marker for a specific dataset/renderer and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param index the dataset/renderer index.\r\n     * @param marker the marker.\r\n     * @param layer the layer (foreground or background).\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.removeDomainMarker#2155",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.removeDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer, boolean)",
        "snippet": "    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
        "begin_line": 2155,
        "end_line": 2171,
        "comment": "\r\n     * Removes a marker for a specific dataset/renderer and, if requested, \r\n     * sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param index the dataset/renderer index.\r\n     * @param marker the marker.\r\n     * @param layer the layer (foreground or background).\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.10\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.removeRangeMarker#2377",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.removeRangeMarker(org.jfree.chart.plot.Marker)",
        "snippet": "    public boolean removeRangeMarker(Marker marker) {\n        return removeRangeMarker(marker, Layer.FOREGROUND);\n    }\n",
        "begin_line": 2377,
        "end_line": 2379,
        "comment": "\r\n     * Removes a marker for the range axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     *\r\n     * @param marker the marker.\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     * \r\n     * @see #addRangeMarker(Marker)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.removeRangeMarker#2395",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.removeRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public boolean removeRangeMarker(Marker marker, Layer layer) {\n        return removeRangeMarker(0, marker, layer);\n    }\n",
        "begin_line": 2395,
        "end_line": 2397,
        "comment": "\r\n     * Removes a marker for the range axis in the specified layer and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param marker the marker (<code>null</code> not permitted).\r\n     * @param layer the layer (foreground or background).\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     * \r\n     * @see #addRangeMarker(Marker, Layer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.removeRangeMarker#2414",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.removeRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public boolean removeRangeMarker(int index, Marker marker, Layer layer) {\n    \treturn removeRangeMarker(index, marker, layer, true);\n    }\n",
        "begin_line": 2414,
        "end_line": 2416,
        "comment": "\r\n     * Removes a marker for a specific dataset/renderer and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param index the dataset/renderer index.\r\n     * @param marker the marker.\r\n     * @param layer the layer (foreground or background).\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.7\r\n     * \r\n     * @see #addRangeMarker(int, Marker, Layer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.removeRangeMarker#2434",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.removeRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer, boolean)",
        "snippet": "    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' argument.\");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
        "begin_line": 2434,
        "end_line": 2453,
        "comment": "\r\n     * Removes a marker for a specific dataset/renderer and sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param index  the dataset/renderer index.\r\n     * @param marker  the marker.\r\n     * @param layer  the layer (foreground or background).\r\n     * @param notify  notify listeners.\r\n     *\r\n     * @return A boolean indicating whether or not the marker was actually \r\n     *         removed.\r\n     *\r\n     * @since 1.0.10\r\n     * \r\n     * @see #addRangeMarker(int, Marker, Layer, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.CategoryPlot#429",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.CategoryPlot()",
        "snippet": "    public CategoryPlot() {\n        this(null, null, null, null);\n    }\n",
        "begin_line": 429,
        "end_line": 431,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueMarker.ValueMarker#67",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
        "class_name": "org.jfree.chart.plot.ValueMarker",
        "signature": "org.jfree.chart.plot.ValueMarker.ValueMarker(double)",
        "snippet": "    public ValueMarker(double value) {\n        super();\n        this.value = value;\n    }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "\r\n     * Creates a new marker.\r\n     * \r\n     * @param value  the value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 3
    },
    {
        "name": "Marker.Marker#143",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.Marker()",
        "snippet": "    protected Marker() {\n        this(Color.gray);\n    }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\r\n     * Creates a new marker with default attributes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 3
    },
    {
        "name": "Marker.Marker#152",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.Marker(java.awt.Paint)",
        "snippet": "    protected Marker(Paint paint) {\n        this(paint, new BasicStroke(0.5f), Color.gray, new BasicStroke(0.5f), \n                0.80f);\n    }\n",
        "begin_line": 152,
        "end_line": 155,
        "comment": "\r\n     * Constructs a new marker.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 3
    },
    {
        "name": "CategoryMarker.CategoryMarker#79",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
        "class_name": "org.jfree.chart.plot.CategoryMarker",
        "signature": "org.jfree.chart.plot.CategoryMarker.CategoryMarker(java.lang.Comparable)",
        "snippet": "    public CategoryMarker(Comparable key) {\n        this(key, Color.gray, new BasicStroke(1.0f));    \n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\r\n     * Creates a new category marker for the specified category.\r\n     * \r\n     * @param key  the category key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryMarker.CategoryMarker#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
        "class_name": "org.jfree.chart.plot.CategoryMarker",
        "signature": "org.jfree.chart.plot.CategoryMarker.CategoryMarker(java.lang.Comparable, java.awt.Paint, java.awt.Stroke)",
        "snippet": "    public CategoryMarker(Comparable key, Paint paint, Stroke stroke) {\n        this(key, paint, stroke, paint, stroke, 1.0f);\n    }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\r\n     * Creates a new category marker.\r\n     * \r\n     * @param key  the key.\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param stroke  the stroke (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryMarker.CategoryMarker#104",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
        "class_name": "org.jfree.chart.plot.CategoryMarker",
        "signature": "org.jfree.chart.plot.CategoryMarker.CategoryMarker(java.lang.Comparable, java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)",
        "snippet": "    public CategoryMarker(Comparable key, Paint paint, Stroke stroke, \n                          Paint outlinePaint, Stroke outlineStroke, \n                          float alpha) {\n        super(paint, stroke, outlinePaint, outlineStroke, alpha);\n        this.key = key;\n        setLabelOffsetType(LengthAdjustmentType.EXPAND);\n    }\n",
        "begin_line": 104,
        "end_line": 110,
        "comment": "\r\n     * Creates a new category marker.\r\n     * \r\n     * @param key  the key.\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param stroke  the stroke (<code>null</code> not permitted).\r\n     * @param outlinePaint  the outline paint (<code>null</code> permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> permitted).\r\n     * @param alpha  the alpha transparency.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.getRangeAxis#893",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxis(int)",
        "snippet": "    public ValueAxis getRangeAxis(int index) {\n        ValueAxis result = null;\n        if (index < this.rangeAxes.size()) {\n            result = (ValueAxis) this.rangeAxes.get(index);\n        }\n        if (result == null) {\n            Plot parent = getParent();\n            if (parent instanceof CategoryPlot) {\n                CategoryPlot cp = (CategoryPlot) parent;\n                result = cp.getRangeAxis(index);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 893,
        "end_line": 906,
        "comment": "\r\n     * Returns a range axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The axis (<code>null</code> possible).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYPlot.XYPlot#500",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.XYPlot()",
        "snippet": "    public XYPlot() {\n        this(null, null, null, null);\n    }\n",
        "begin_line": 500,
        "end_line": 502,
        "comment": "\r\n     * Creates a new <code>XYPlot</code> instance with no dataset, no axes and\r\n     * no renderer.  You should specify these items before using the plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 2
    },
    {
        "name": "Marker.setLabelOffsetType#489",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)",
        "snippet": "    public void setLabelOffsetType(LengthAdjustmentType adj) {\n        if (adj == null) {\n            throw new IllegalArgumentException(\"Null 'adj' argument.\");\n        }\n        this.labelOffsetType = adj;    \n        notifyListeners(new MarkerChangeEvent(this));\n    }\n",
        "begin_line": 489,
        "end_line": 495,
        "comment": "\r\n     * Sets the label offset type and sends a {@link MarkerChangeEvent} to all\r\n     * registered listeners.\r\n     * \r\n     * @param adj  the type (<code>null</code> not permitted).\r\n     * \r\n     * @see #getLabelOffsetType()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "LengthAdjustmentType.LengthAdjustmentType#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.LengthAdjustmentType(java.lang.String)",
        "snippet": "    private LengthAdjustmentType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1782
        },
        "num_failing_tests": 4
    },
    {
        "name": "Marker.Marker#171",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.Marker(java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)",
        "snippet": "    protected Marker(Paint paint, Stroke stroke, \n                     Paint outlinePaint, Stroke outlineStroke, \n                     float alpha) {\n\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (alpha < 0.0f || alpha > 1.0f)\n            throw new IllegalArgumentException(\n                    \"The 'alpha' value must be in the range 0.0f to 1.0f\");\n        \n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n        \n        this.labelFont = new Font(\"SansSerif\", Font.PLAIN, 9);\n        this.labelPaint = Color.black;\n        this.labelAnchor = RectangleAnchor.TOP_LEFT;\n        this.labelOffset = new RectangleInsets(3.0, 3.0, 3.0, 3.0);\n        this.labelOffsetType = LengthAdjustmentType.CONTRACT;\n        this.labelTextAnchor = TextAnchor.CENTER;\n        \n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 171,
        "end_line": 199,
        "comment": "\r\n     * Constructs a new marker.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param stroke  the stroke (<code>null</code> not permitted).\r\n     * @param outlinePaint  the outline paint (<code>null</code> permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> permitted).\r\n     * @param alpha  the alpha transparency (must be in the range 0.0f to \r\n     *     1.0f).\r\n     *     \r\n     * @throws IllegalArgumentException if <code>paint</code> or \r\n     *     <code>stroke</code> is <code>null</code>, or <code>alpha</code> is \r\n     *     not in the specified range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1782
        },
        "num_failing_tests": 4
    },
    {
        "name": "Layer.Layer#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "class_name": "org.jfree.chart.util.Layer",
        "signature": "org.jfree.chart.util.Layer.Layer(java.lang.String)",
        "snippet": "    private Layer(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1703
        },
        "num_failing_tests": 4
    },
    {
        "name": "DatasetRenderingOrder.DatasetRenderingOrder#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.DatasetRenderingOrder(java.lang.String)",
        "snippet": "    private DatasetRenderingOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisLocation.AxisLocation#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "signature": "org.jfree.chart.axis.AxisLocation.AxisLocation(java.lang.String)",
        "snippet": "    private AxisLocation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleAnchor.RectangleAnchor#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.RectangleAnchor(java.lang.String)",
        "snippet": "    private RectangleAnchor(final String name) {\n        this.name = name;\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1418
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.getParent#432",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getParent()",
        "snippet": "    public Plot getParent() {\n        return this.parent;\n    }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "\r\n     * Returns the parent plot (or <code>null</code> if this plot is not part \r\n     * of a combined plot).\r\n     *\r\n     * @return The parent plot.\r\n     * \r\n     * @see #setParent(Plot)\r\n     * @see #getRootPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1411
        },
        "num_failing_tests": 4
    },
    {
        "name": "ChartChangeEvent.setType#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.setType(org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public void setType(ChartChangeEventType type) {\n        this.type = type;\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\r\n     * Sets the event type.\r\n     *\r\n     * @param type  the event type.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1411
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectList.get#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.get(int)",
        "snippet": "    public Object get(int index) {         \n        return super.get(index);         \n    }    \n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "          \n     * Returns the object at the specified index, if there is one, or \n     * <code>null</code>.         \n     *   \n     * @param index  the object index.   \n     *   \n     * @return The object or <code>null</code>.          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1407
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectList.set#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.set(int, java.lang.Object)",
        "snippet": "    public void set(int index, Object object) {      \n        super.set(index, object);        \n    }    \n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "          \n     * Sets an object reference (overwriting any existing object).       \n     *   \n     * @param index  the object index.   \n     * @param object  the object (<code>null</code> permitted).          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1404
        },
        "num_failing_tests": 4
    },
    {
        "name": "PlotOrientation.PlotOrientation#72",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "signature": "org.jfree.chart.plot.PlotOrientation.PlotOrientation(java.lang.String)",
        "snippet": "    private PlotOrientation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1404
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.get#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.get(int)",
        "snippet": "    protected Object get(int index) {\n        Object result = null;\n        if (index >= 0 && index < this.size) {\n            result = this.objects[index];\n        }\n        return result;\n    }\n",
        "begin_line": 108,
        "end_line": 114,
        "comment": "\n     * Returns the object at the specified index, if there is one, or \n     * <code>null</code>.\n     *\n     * @param index  the object index.\n     *\n     * @return The object or <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.137
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.set#122",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.set(int, java.lang.Object)",
        "snippet": "    protected void set(int index, Object object) {\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Requires index >= 0.\");\n        }\n        if (index >= this.objects.length) {\n            Object[] enlarged = new Object[index + this.increment];\n            System.arraycopy(this.objects, 0, enlarged, 0, this.objects.length);\n            this.objects = enlarged;\n        }\n        this.objects[index] = object;\n        this.size = Math.max(this.size, index + 1);\n    }\n",
        "begin_line": 122,
        "end_line": 133,
        "comment": "\n     * Sets an object reference (overwriting any existing object).\n     *\n     * @param index  the object index.\n     * @param object  the object (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1367
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.notifyListeners#887",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.notifyListeners(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void notifyListeners(PlotChangeEvent event) {\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == PlotChangeListener.class) {\n                ((PlotChangeListener) listeners[i + 1]).plotChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 887,
        "end_line": 894,
        "comment": "\r\n     * Notifies all registered listeners that the plot has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1339
        },
        "num_failing_tests": 4
    },
    {
        "name": "PlotChangeEvent.PlotChangeEvent#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
        "class_name": "org.jfree.chart.event.PlotChangeEvent",
        "signature": "org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent(org.jfree.chart.plot.Plot)",
        "snippet": "    public PlotChangeEvent(Plot plot) {\n        super(plot);\n        this.plot = plot;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\r\n     * Creates a new PlotChangeEvent.\r\n     *\r\n     * @param plot  the plot that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1339
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.Plot#284",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.Plot()",
        "snippet": "    protected Plot() {\n\n        this.parent = null;\n        this.insets = DEFAULT_INSETS;\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n        this.backgroundAlpha = DEFAULT_BACKGROUND_ALPHA;\n        this.backgroundImage = null;\n        this.outlineVisible = true;\n        this.outlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.outlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.foregroundAlpha = DEFAULT_FOREGROUND_ALPHA;\n\n        this.noDataMessage = null;\n        this.noDataMessageFont = new Font(\"SansSerif\", Font.PLAIN, 12);\n        this.noDataMessagePaint = Color.black;\n\n        this.drawingSupplier = new DefaultDrawingSupplier();\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 284,
        "end_line": 304,
        "comment": "\r\n     * Creates a new plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier()",
        "snippet": "    public DefaultDrawingSupplier() {\n\n        this(DEFAULT_PAINT_SEQUENCE, DEFAULT_FILL_PAINT_SEQUENCE,\n             DEFAULT_OUTLINE_PAINT_SEQUENCE,\n             DEFAULT_STROKE_SEQUENCE,\n             DEFAULT_OUTLINE_STROKE_SEQUENCE,\n             DEFAULT_SHAPE_SEQUENCE);\n\n    }\n",
        "begin_line": 148,
        "end_line": 156,
        "comment": "\r\n     * Creates a new supplier, with default sequences for fill paint, outline \r\n     * paint, stroke and shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#194",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])",
        "snippet": "    public DefaultDrawingSupplier(Paint[] paintSequence, \n            Paint[] fillPaintSequence, Paint[] outlinePaintSequence,\n            Stroke[] strokeSequence, Stroke[] outlineStrokeSequence,\n            Shape[] shapeSequence) {\n\n        this.paintSequence = paintSequence;\n        this.fillPaintSequence = fillPaintSequence;\n        this.outlinePaintSequence = outlinePaintSequence;\n        this.strokeSequence = strokeSequence;\n        this.outlineStrokeSequence = outlineStrokeSequence;\n        this.shapeSequence = shapeSequence;\n    }\n",
        "begin_line": 194,
        "end_line": 205,
        "comment": "\r\n     * Creates a new supplier.\r\n     *\r\n     * @param paintSequence  the paint sequence.\r\n     * @param fillPaintSequence  the fill paint sequence.\r\n     * @param outlinePaintSequence  the outline paint sequence.\r\n     * @param strokeSequence  the stroke sequence.\r\n     * @param outlineStrokeSequence  the outline stroke sequence.\r\n     * @param shapeSequence  the shape sequence.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.createStandardSeriesShapes#287",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes()",
        "snippet": "    public static Shape[] createStandardSeriesShapes() {\n\n        Shape[] result = new Shape[10];\n\n        double size = 6.0;\n        double delta = size / 2.0;\n        int[] xpoints = null;\n        int[] ypoints = null;\n\n        // square\n        result[0] = new Rectangle2D.Double(-delta, -delta, size, size);\n        // circle\n        result[1] = new Ellipse2D.Double(-delta, -delta, size, size);\n\n        // up-pointing triangle\n        xpoints = intArray(0.0, delta, -delta);\n        ypoints = intArray(-delta, delta, delta);\n        result[2] = new Polygon(xpoints, ypoints, 3);\n\n        // diamond\n        xpoints = intArray(0.0, delta, 0.0, -delta);\n        ypoints = intArray(-delta, 0.0, delta, 0.0);\n        result[3] = new Polygon(xpoints, ypoints, 4);\n\n        // horizontal rectangle\n        result[4] = new Rectangle2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // down-pointing triangle\n        xpoints = intArray(-delta, +delta, 0.0);\n        ypoints = intArray(-delta, -delta, delta);\n        result[5] = new Polygon(xpoints, ypoints, 3);\n\n        // horizontal ellipse\n        result[6] = new Ellipse2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // right-pointing triangle\n        xpoints = intArray(-delta, delta, -delta);\n        ypoints = intArray(-delta, 0.0, delta);\n        result[7] = new Polygon(xpoints, ypoints, 3);\n\n        // vertical rectangle\n        result[8] = new Rectangle2D.Double(-delta / 2, -delta, size / 2, size);\n\n        // left-pointing triangle\n        xpoints = intArray(-delta, delta, delta);\n        ypoints = intArray(0.0, -delta, +delta);\n        result[9] = new Polygon(xpoints, ypoints, 3);\n\n        return result;\n\n    }\n",
        "begin_line": 287,
        "end_line": 337,
        "comment": "\r\n     * Creates an array of standard shapes to display for the items in series \r\n     * on charts.\r\n     *\r\n     * @return The array of shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.intArray#516",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c) {\n        return new int[] {(int) a, (int) b, (int) c};\n    }\n",
        "begin_line": 516,
        "end_line": 518,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     *\r\n     * @return int[3] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.intArray#531",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c, double d) {\n        return new int[] {(int) a, (int) b, (int) c, (int) d};\n    }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     * @param d  t\r\n     *\r\n     * @return int[4] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 4
    },
    {
        "name": "ChartColor.createDefaultPaintArray#149",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "class_name": "org.jfree.chart.ChartColor",
        "signature": "org.jfree.chart.ChartColor.createDefaultPaintArray()",
        "snippet": "    public static Paint[] createDefaultPaintArray() {\n\n        return new Paint[] {\n            new Color(0xFF, 0x55, 0x55),\n            new Color(0x55, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0x55),\n            new Color(0xFF, 0xFF, 0x55),\n            new Color(0xFF, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0xFF),\n            Color.pink,\n            Color.gray,\n            ChartColor.DARK_RED,\n            ChartColor.DARK_BLUE,\n            ChartColor.DARK_GREEN,\n            ChartColor.DARK_YELLOW,\n            ChartColor.DARK_MAGENTA,\n            ChartColor.DARK_CYAN,\n            Color.darkGray,\n            ChartColor.LIGHT_RED,\n            ChartColor.LIGHT_BLUE,\n            ChartColor.LIGHT_GREEN,\n            ChartColor.LIGHT_YELLOW,\n            ChartColor.LIGHT_MAGENTA,\n            ChartColor.LIGHT_CYAN,\n            Color.lightGray,\n            ChartColor.VERY_DARK_RED,\n            ChartColor.VERY_DARK_BLUE,\n            ChartColor.VERY_DARK_GREEN,\n            ChartColor.VERY_DARK_YELLOW,\n            ChartColor.VERY_DARK_MAGENTA,\n            ChartColor.VERY_DARK_CYAN,\n            ChartColor.VERY_LIGHT_RED,\n            ChartColor.VERY_LIGHT_BLUE,\n            ChartColor.VERY_LIGHT_GREEN,\n            ChartColor.VERY_LIGHT_YELLOW,\n            ChartColor.VERY_LIGHT_MAGENTA,\n            ChartColor.VERY_LIGHT_CYAN\n        };\n    }\n",
        "begin_line": 149,
        "end_line": 187,
        "comment": "\r\n     * Convenience method to return an array of <code>Paint</code> objects that\r\n     * represent the pre-defined colors in the <code>Color<code> and \r\n     * <code>ChartColor</code> objects.\r\n     *\r\n     * @return An array of objects with the <code>Paint</code> interface.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 4
    },
    {
        "name": "DatasetChangeEvent.DatasetChangeEvent#70",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetChangeEvent.java",
        "class_name": "org.jfree.data.general.DatasetChangeEvent",
        "signature": "org.jfree.data.general.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset)",
        "snippet": "    public DatasetChangeEvent(Object source, Dataset dataset) {\n        super(source);\n        this.dataset = dataset;\n    }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "\r\n     * Constructs a new event.  The source is either the dataset or the \r\n     * {@link org.jfree.chart.plot.Plot} class.  The dataset can be \r\n     * <code>null</code> (in this case the source will be the \r\n     * {@link org.jfree.chart.plot.Plot} class).\r\n     *\r\n     * @param source  the source of the event.\r\n     * @param dataset  the dataset that generated the event (<code>null</code>\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.RectangleInsets#100",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double)",
        "snippet": "    public RectangleInsets(double top, double left, double bottom, \n            double right) {\n        this(UnitType.ABSOLUTE, top, left, bottom, right);   \n    }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "\n     * Creates a new instance with the specified insets (as 'absolute' units).\n     * \n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1255
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.RectangleInsets#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double)",
        "snippet": "    public RectangleInsets(UnitType unitType, double top, double left, \n                           double bottom, double right) {\n        if (unitType == null) {\n            throw new IllegalArgumentException(\"Null 'unitType' argument.\");\n        }\n        this.unitType = unitType;\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n",
        "begin_line": 115,
        "end_line": 125,
        "comment": "\n     * Creates a new instance.\n     * \n     * @param unitType  absolute or relative units (<code>null</code> not \n     *                  permitted).\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1255
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnitType.UnitType#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.UnitType(java.lang.String)",
        "snippet": "    private UnitType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.124
        },
        "num_failing_tests": 4
    },
    {
        "name": "Marker.notifyListeners#557",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.notifyListeners(org.jfree.chart.event.MarkerChangeEvent)",
        "snippet": "    public void notifyListeners(MarkerChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == MarkerChangeListener.class) {\n                ((MarkerChangeListener) listeners[i + 1]).markerChanged(event);\n            }\n        }\n\n    }\n",
        "begin_line": 557,
        "end_line": 566,
        "comment": "\r\n     * Notifies all registered listeners that the marker has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 1
    },
    {
        "name": "MarkerChangeEvent.MarkerChangeEvent#64",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/MarkerChangeEvent.java",
        "class_name": "org.jfree.chart.event.MarkerChangeEvent",
        "signature": "org.jfree.chart.event.MarkerChangeEvent.MarkerChangeEvent(org.jfree.chart.plot.Marker)",
        "snippet": "    public MarkerChangeEvent(Marker marker) {\n        super(marker);\n        this.marker = marker;\n    }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "\r\n     * Creates a new <code>MarkerChangeEvent</code> instance.\r\n     *\r\n     * @param marker  the marker that triggered the event (<code>null</code> \r\n     *     not permitted).\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYPlot.XYPlot#515",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.XYPlot(org.jfree.data.xy.XYDataset, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.renderer.xy.XYItemRenderer)",
        "snippet": "    public XYPlot(XYDataset dataset,\n                  ValueAxis domainAxis,\n                  ValueAxis rangeAxis,\n                  XYItemRenderer renderer) {\n\n        super();\n\n        this.orientation = PlotOrientation.VERTICAL;\n        this.weight = 1;  // only relevant when this is a subplot\n        this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0);\n\n        // allocate storage for datasets, axes and renderers (all optional)\n        this.domainAxes = new ObjectList();\n        this.domainAxisLocations = new ObjectList();\n        this.foregroundDomainMarkers = new HashMap();\n        this.backgroundDomainMarkers = new HashMap();\n\n        this.rangeAxes = new ObjectList();\n        this.rangeAxisLocations = new ObjectList();\n        this.foregroundRangeMarkers = new HashMap();\n        this.backgroundRangeMarkers = new HashMap();\n\n        this.datasets = new ObjectList();\n        this.renderers = new ObjectList();\n\n        this.datasetToDomainAxisMap = new TreeMap();\n        this.datasetToRangeAxisMap = new TreeMap();\n\n        this.datasets.set(0, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n\n        this.renderers.set(0, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n\n        this.domainAxes.set(0, domainAxis);\n        this.mapDatasetToDomainAxis(0, 0);\n        if (domainAxis != null) {\n            domainAxis.setPlot(this);\n            domainAxis.addChangeListener(this);\n        }\n        this.domainAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT);\n\n        this.rangeAxes.set(0, rangeAxis);\n        this.mapDatasetToRangeAxis(0, 0);\n        if (rangeAxis != null) {\n            rangeAxis.setPlot(this);\n            rangeAxis.addChangeListener(this);\n        }\n        this.rangeAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT);\n\n        configureDomainAxes();\n        configureRangeAxes();\n\n        this.domainGridlinesVisible = true;\n        this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.domainZeroBaselineVisible = false;\n        this.domainZeroBaselinePaint = Color.black;\n        this.domainZeroBaselineStroke = new BasicStroke(0.5f);\n\n        this.rangeGridlinesVisible = true;\n        this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.rangeZeroBaselineVisible = false;\n        this.rangeZeroBaselinePaint = Color.black;\n        this.rangeZeroBaselineStroke = new BasicStroke(0.5f);\n\n        this.domainCrosshairVisible = false;\n        this.domainCrosshairValue = 0.0;\n        this.domainCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.domainCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n\n        this.rangeCrosshairVisible = false;\n        this.rangeCrosshairValue = 0.0;\n        this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n\n        this.annotations = new java.util.ArrayList();\n\n    }\n",
        "begin_line": 515,
        "end_line": 601,
        "comment": "\r\n     * Creates a new plot with the specified dataset, axes and renderer.  Any\r\n     * of the arguments can be <code>null</code>, but in that case you should\r\n     * take care to specify the value before using the plot (otherwise a\r\n     * <code>NullPointerException</code> may be thrown).\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * @param domainAxis  the domain axis (<code>null</code> permitted).\r\n     * @param rangeAxis  the range axis (<code>null</code> permitted).\r\n     * @param renderer  the renderer (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYPlot.configureDomainAxes#859",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.configureDomainAxes()",
        "snippet": "    public void configureDomainAxes() {\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.domainAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 859,
        "end_line": 866,
        "comment": "\r\n     * Configures the domain axes. \r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYPlot.configureRangeAxes#1159",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.configureRangeAxes()",
        "snippet": "    public void configureRangeAxes() {\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 1159,
        "end_line": 1166,
        "comment": "\r\n     * Configures the range axes.\r\n     * \r\n     * @see #configureDomainAxes()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYPlot.getDataset#1272",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.getDataset(int)",
        "snippet": "    public XYDataset getDataset(int index) {\n        XYDataset result = null;\n        if (this.datasets.size() > index) {\n            result = (XYDataset) this.datasets.get(index);\n        }\n        return result;\n    }\n",
        "begin_line": 1272,
        "end_line": 1278,
        "comment": "\r\n     * Returns a dataset.\r\n     *\r\n     * @param index  the dataset index.\r\n     *\r\n     * @return The dataset (possibly <code>null</code>).\r\n     * \r\n     * @see #setDataset(int, XYDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYPlot.mapDatasetToDomainAxis#1353",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToDomainAxis(int, int)",
        "snippet": "    public void mapDatasetToDomainAxis(int index, int axisIndex) {\n        this.datasetToDomainAxisMap.put(new Integer(index), \n                new Integer(axisIndex));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));\n    }\n",
        "begin_line": 1353,
        "end_line": 1358,
        "comment": "\r\n     * Maps a dataset to a particular domain axis.  All data will be plotted\r\n     * against axis zero by default, no mapping is required for this case.\r\n     *\r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index.\r\n     * \r\n     * @see #mapDatasetToRangeAxis(int, int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYPlot.mapDatasetToRangeAxis#1369",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToRangeAxis(int, int)",
        "snippet": "    public void mapDatasetToRangeAxis(int index, int axisIndex) {\n        this.datasetToRangeAxisMap.put(new Integer(index), \n                new Integer(axisIndex));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));\n    }\n",
        "begin_line": 1369,
        "end_line": 1374,
        "comment": "\r\n     * Maps a dataset to a particular range axis.  All data will be plotted\r\n     * against axis zero by default, no mapping is required for this case.\r\n     *\r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index.\r\n     * \r\n     * @see #mapDatasetToDomainAxis(int, int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 2
    },
    {
        "name": "XYPlot.datasetChanged#4032",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/XYPlot.java",
        "class_name": "org.jfree.chart.plot.XYPlot",
        "signature": "org.jfree.chart.plot.XYPlot.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    public void datasetChanged(DatasetChangeEvent event) {\n        configureDomainAxes();\n        configureRangeAxes();\n        if (getParent() != null) {\n            getParent().datasetChanged(event);\n        }\n        else {\n            PlotChangeEvent e = new PlotChangeEvent(this);\n            e.setType(ChartChangeEventType.DATASET_UPDATED);\n            notifyListeners(e);\n        }\n    }\n",
        "begin_line": 4032,
        "end_line": 4043,
        "comment": "\r\n     * Receives notification of a change to the plot's dataset.\r\n     * <P>\r\n     * The axis ranges are updated if necessary.\r\n     *\r\n     * @param event  information about the event (not used here).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 2
    },
    {
        "name": "SeriesRenderingOrder.SeriesRenderingOrder#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
        "signature": "org.jfree.chart.plot.SeriesRenderingOrder.SeriesRenderingOrder(java.lang.String)",
        "snippet": "    private SeriesRenderingOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartChangeEventType.ChartChangeEventType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String)",
        "snippet": "    private ChartChangeEventType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 4
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object)",
        "snippet": "    public ChartChangeEvent(Object source) {\n        this(source, null, ChartChangeEventType.GENERAL);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, \r\n     *                an axis etc.)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 4
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public ChartChangeEvent(Object source, JFreeChart chart, \n                            ChartChangeEventType type) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an\r\n                      axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.size#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.size()",
        "snippet": "    public int size() {\n        return this.size;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Returns the size of the list.\n     *\n     * @return The size of the list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1006
        },
        "num_failing_tests": 4
    },
    {
        "name": "SortOrder.SortOrder#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "class_name": "org.jfree.chart.util.SortOrder",
        "signature": "org.jfree.chart.util.SortOrder.SortOrder(java.lang.String)",
        "snippet": "    private SortOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueMarker.ValueMarker#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
        "class_name": "org.jfree.chart.plot.ValueMarker",
        "signature": "org.jfree.chart.plot.ValueMarker.ValueMarker(double, java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)",
        "snippet": "    public ValueMarker(double value, Paint paint, Stroke stroke, \n                       Paint outlinePaint, Stroke outlineStroke, float alpha) {\n        super(paint, stroke, outlinePaint, outlineStroke, alpha);\n        this.value = value;\n    }\n",
        "begin_line": 93,
        "end_line": 97,
        "comment": "\r\n     * Creates a new value marker.\r\n     * \r\n     * @param value  the value.\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param stroke  the stroke (<code>null</code> not permitted).\r\n     * @param outlinePaint  the outline paint (<code>null</code> permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> permitted).\r\n     * @param alpha  the alpha transparency (in the range 0.0f to 1.0f).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.CategoryPlot#442",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.CategoryPlot(org.jfree.data.category.CategoryDataset, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.renderer.category.CategoryItemRenderer)",
        "snippet": "    public CategoryPlot(CategoryDataset dataset,\n                        CategoryAxis domainAxis,\n                        ValueAxis rangeAxis,\n                        CategoryItemRenderer renderer) {\n\n        super();\n\n        this.orientation = PlotOrientation.VERTICAL;\n\n        // allocate storage for dataset, axes and renderers\n        this.domainAxes = new ObjectList();\n        this.domainAxisLocations = new ObjectList();\n        this.rangeAxes = new ObjectList();\n        this.rangeAxisLocations = new ObjectList();\n        \n        this.datasetToDomainAxisMap = new ObjectList();\n        this.datasetToRangeAxisMap = new ObjectList();\n\n        this.renderers = new ObjectList();\n\n        this.datasets = new ObjectList();\n        this.datasets.set(0, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n\n        this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0);\n\n        setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT, false);\n        setRangeAxisLocation(AxisLocation.TOP_OR_LEFT, false);\n\n        this.renderers.set(0, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n\n        this.domainAxes.set(0, domainAxis);\n        this.mapDatasetToDomainAxis(0, 0);\n        if (domainAxis != null) {\n            domainAxis.setPlot(this);\n            domainAxis.addChangeListener(this);\n        }\n        this.drawSharedDomainAxis = false;\n\n        this.rangeAxes.set(0, rangeAxis);\n        this.mapDatasetToRangeAxis(0, 0);\n        if (rangeAxis != null) {\n            rangeAxis.setPlot(this);\n            rangeAxis.addChangeListener(this);\n        }\n        \n        configureDomainAxes();\n        configureRangeAxes();\n\n        this.domainGridlinesVisible = DEFAULT_DOMAIN_GRIDLINES_VISIBLE;\n        this.domainGridlinePosition = CategoryAnchor.MIDDLE;\n        this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.rangeGridlinesVisible = DEFAULT_RANGE_GRIDLINES_VISIBLE;\n        this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.foregroundDomainMarkers = new HashMap();\n        this.backgroundDomainMarkers = new HashMap();\n        this.foregroundRangeMarkers = new HashMap();\n        this.backgroundRangeMarkers = new HashMap();\n\n        Marker baseline = new ValueMarker(0.0, new Color(0.8f, 0.8f, 0.8f, \n                0.5f), new BasicStroke(1.0f), new Color(0.85f, 0.85f, 0.95f, \n                0.5f), new BasicStroke(1.0f), 0.6f);\n        addRangeMarker(baseline, Layer.BACKGROUND);\n\n        this.anchorValue = 0.0;\n\n        this.rangeCrosshairVisible = DEFAULT_CROSSHAIR_VISIBLE;\n        this.rangeCrosshairValue = 0.0;\n        this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n        \n        this.annotations = new java.util.ArrayList();\n\n    }\n",
        "begin_line": 442,
        "end_line": 525,
        "comment": "\r\n     * Creates a new plot.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * @param domainAxis  the domain axis (<code>null</code> permitted).\r\n     * @param rangeAxis  the range axis (<code>null</code> permitted).\r\n     * @param renderer  the item renderer (<code>null</code> permitted).\r\n     *\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setDomainAxisLocation#765",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setDomainAxisLocation(AxisLocation location, boolean notify) {\n        // delegate...\n        setDomainAxisLocation(0, location, notify);\n    }\n",
        "begin_line": 765,
        "end_line": 768,
        "comment": "\r\n     * Sets the location of the domain axis and, if requested, sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param location  the axis location (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether listeners are notified.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setDomainAxisLocation#798",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setDomainAxisLocation(int index, AxisLocation location, \n            boolean notify) {\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'location' for index 0 not permitted.\");\n        }\n        this.domainAxisLocations.set(index, location);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 798,
        "end_line": 808,
        "comment": "\r\n     * Sets the location for a domain axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     * \r\n     * @param index  the axis index.\r\n     * @param location  the location.\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @since 1.0.5\r\n     * \r\n     * @see #getDomainAxisLocation(int)\r\n     * @see #setRangeAxisLocation(int, AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.configureDomainAxes#866",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.configureDomainAxes()",
        "snippet": "    public void configureDomainAxes() {\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 866,
        "end_line": 873,
        "comment": "\r\n     * Configures the domain axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setRangeAxisLocation#1050",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setRangeAxisLocation(AxisLocation location, boolean notify) {\n        setRangeAxisLocation(0, location, notify);\n    }\n",
        "begin_line": 1050,
        "end_line": 1052,
        "comment": "\r\n     * Sets the location of the range axis and, if requested, sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param location  the location (<code>null</code> not permitted).\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @see #setDomainAxisLocation(AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setRangeAxisLocation#1079",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setRangeAxisLocation(int index, AxisLocation location, \n                                     boolean notify) {\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'location' for index 0 not permitted.\");\n        }\n        this.rangeAxisLocations.set(index, location);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 1079,
        "end_line": 1089,
        "comment": "\r\n     * Sets the location for a range axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     *\r\n     * @param index  the axis index.\r\n     * @param location  the location.\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @see #getRangeAxisLocation(int)\r\n     * @see #setDomainAxisLocation(int, AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.configureRangeAxes#1144",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.configureRangeAxes()",
        "snippet": "    public void configureRangeAxes() {\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 1144,
        "end_line": 1151,
        "comment": "\r\n     * Configures the range axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.getDataset#1173",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDataset(int)",
        "snippet": "    public CategoryDataset getDataset(int index) {\n        CategoryDataset result = null;\n        if (this.datasets.size() > index) {\n            result = (CategoryDataset) this.datasets.get(index);\n        }\n        return result;\n    }\n",
        "begin_line": 1173,
        "end_line": 1179,
        "comment": "\r\n     * Returns the dataset at the given index.\r\n     *\r\n     * @param index  the dataset index.\r\n     *\r\n     * @return The dataset (possibly <code>null</code>).\r\n     * \r\n     * @see #setDataset(int, CategoryDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.mapDatasetToDomainAxis#1240",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis(int, int)",
        "snippet": "    public void mapDatasetToDomainAxis(int index, int axisIndex) {\n        this.datasetToDomainAxisMap.set(index, new Integer(axisIndex));  \n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));  \n    }\n",
        "begin_line": 1240,
        "end_line": 1244,
        "comment": "\r\n     * Maps a dataset to a particular domain axis.\r\n     * \r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index (zero-based).\r\n     * \r\n     * @see #getDomainAxisForDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.mapDatasetToRangeAxis#1273",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis(int, int)",
        "snippet": "    public void mapDatasetToRangeAxis(int index, int axisIndex) {\n        this.datasetToRangeAxisMap.set(index, new Integer(axisIndex));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));  \n    }\n",
        "begin_line": 1273,
        "end_line": 1277,
        "comment": "\r\n     * Maps a dataset to a particular range axis.\r\n     * \r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index (zero-based).\r\n     * \r\n     * @see #getRangeAxisForDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.datasetChanged#1853",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    public void datasetChanged(DatasetChangeEvent event) {\n\n        int count = this.rangeAxes.size();\n        for (int axisIndex = 0; axisIndex < count; axisIndex++) {\n            ValueAxis yAxis = getRangeAxis(axisIndex);\n            if (yAxis != null) {\n                yAxis.configure();\n            }\n        }\n        if (getParent() != null) {\n            getParent().datasetChanged(event);\n        }\n        else {\n            PlotChangeEvent e = new PlotChangeEvent(this);\n            e.setType(ChartChangeEventType.DATASET_UPDATED);\n            notifyListeners(e);\n        }\n\n    }\n",
        "begin_line": 1853,
        "end_line": 1871,
        "comment": "\r\n     * Receives notification of a change to the plot's dataset.\r\n     * <P>\r\n     * The range axis bounds will be recalculated if necessary.\r\n     *\r\n     * @param event  information about the event (not used here).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.addRangeMarker#2199",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public void addRangeMarker(Marker marker, Layer layer) {\n        addRangeMarker(0, marker, layer);\n    }\n",
        "begin_line": 2199,
        "end_line": 2201,
        "comment": "\r\n     * Adds a marker for display against the range axis and sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.  Typically a marker \r\n     * will be drawn by the renderer as a line perpendicular to the range axis, \r\n     * however this is entirely up to the renderer.\r\n     *\r\n     * @param marker  the marker (<code>null</code> not permitted).\r\n     * @param layer  the layer (foreground or background) (<code>null</code> \r\n     *               not permitted).\r\n     *               \r\n     * @see #removeRangeMarker(Marker, Layer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.addRangeMarker#2216",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public void addRangeMarker(int index, Marker marker, Layer layer) {\n    \taddRangeMarker(index, marker, layer, true);\n    }\n",
        "begin_line": 2216,
        "end_line": 2218,
        "comment": "\r\n     * Adds a marker for display by a particular renderer and sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     * <P>\r\n     * Typically a marker will be drawn by the renderer as a line perpendicular\r\n     * to a range axis, however this is entirely up to the renderer.\r\n     *\r\n     * @param index  the renderer index.\r\n     * @param marker  the marker.\r\n     * @param layer  the layer.\r\n     * \r\n     * @see #removeRangeMarker(int, Marker, Layer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.addRangeMarker#2236",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer, boolean)",
        "snippet": "    public void addRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        Collection markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (Collection) this.foregroundRangeMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.foregroundRangeMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);\n        }\n        else if (layer == Layer.BACKGROUND) {\n            markers = (Collection) this.backgroundRangeMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.backgroundRangeMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);            \n        }\n        marker.addChangeListener(this);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 2236,
        "end_line": 2261,
        "comment": "\r\n     * Adds a marker for display by a particular renderer and sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     * <P>\r\n     * Typically a marker will be drawn by the renderer as a line perpendicular\r\n     * to a range axis, however this is entirely up to the renderer.\r\n     *\r\n     * @param index  the renderer index.\r\n     * @param marker  the marker.\r\n     * @param layer  the layer.\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @since 1.0.10\r\n     * \r\n     * @see #removeRangeMarker(int, Marker, Layer, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextAnchor.TextAnchor#124",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String)",
        "snippet": "    private TextAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectList.ObjectList#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.ObjectList()",
        "snippet": "    public ObjectList() {\n    }\n",
        "begin_line": 58,
        "end_line": 59,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0946
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList()",
        "snippet": "    protected AbstractObjectList() {\n        this(DEFAULT_INITIAL_CAPACITY);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Creates a new list with the default initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0946
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity) {\n        this (initialCapacity, initialCapacity);\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0946
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity, int increment) {\n        this.objects = new Object[initialCapacity];\n        this.increment = increment;\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\n     * Creates a new list.\n     * \n     * @param initialCapacity  the initial capacity.\n     * @param increment  the increment.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0946
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAnchor.CategoryAnchor#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "signature": "org.jfree.chart.axis.CategoryAnchor.CategoryAnchor(java.lang.String)",
        "snippet": "    private CategoryAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 2
    },
    {
        "name": "Marker.addChangeListener#533",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.addChangeListener(org.jfree.chart.event.MarkerChangeListener)",
        "snippet": "    public void addChangeListener(MarkerChangeListener listener) {\n        this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n",
        "begin_line": 533,
        "end_line": 535,
        "comment": "\r\n     * Registers an object for notification of changes to the marker.\r\n     *\r\n     * @param listener  the object to be registered.\r\n     * \r\n     * @see #removeChangeListener(MarkerChangeListener)\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0898
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.fireChangeEvent#901",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.fireChangeEvent()",
        "snippet": "    protected void fireChangeEvent() {\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 901,
        "end_line": 903,
        "comment": "\r\n     * Sends a {@link PlotChangeEvent} to all registered listeners.\r\n     * \r\n     * @since 1.0.10\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0724
        },
        "num_failing_tests": 2
    }
]