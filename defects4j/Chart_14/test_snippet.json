[
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryPlotTests.class);\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.CategoryPlotTests(java.lang.String)",
        "snippet": "    public CategoryPlotTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testConstructor()",
        "snippet": "    public void testConstructor() {\n        CategoryPlot plot = new CategoryPlot();\n        assertEquals(new RectangleInsets(4.0, 4.0, 4.0, 4.0), \n        \t\tplot.getAxisOffset());\n    }\n",
        "begin_line": 122,
        "end_line": 126,
        "comment": "\n     * Some checks for the constructor.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 47)",
            "(line 124,col 9)-(line 125,col 32)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAxisRange()",
        "snippet": "    public void testAxisRange() {\n        DefaultCategoryDataset datasetA = new DefaultCategoryDataset();\n        DefaultCategoryDataset datasetB = new DefaultCategoryDataset();\n        datasetB.addValue(50.0, \"R1\", \"C1\");\n        datasetB.addValue(80.0, \"R1\", \"C1\");\n        CategoryPlot plot = new CategoryPlot(datasetA, new CategoryAxis(null), \n                new NumberAxis(null), new LineAndShapeRenderer());\n        plot.setDataset(1, datasetB);\n        plot.setRenderer(1, new LineAndShapeRenderer());\n        Range r = plot.getRangeAxis().getRange();\n        assertEquals(84.0, r.getUpperBound(), 0.00001);\n    }\n",
        "begin_line": 131,
        "end_line": 142,
        "comment": "\n     * A test for a bug reported in the forum.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 71)",
            "(line 133,col 9)-(line 133,col 71)",
            "(line 134,col 9)-(line 134,col 44)",
            "(line 135,col 9)-(line 135,col 44)",
            "(line 136,col 9)-(line 137,col 66)",
            "(line 138,col 9)-(line 138,col 37)",
            "(line 139,col 9)-(line 139,col 56)",
            "(line 140,col 9)-(line 140,col 49)",
            "(line 141,col 9)-(line 141,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));    \n        assertTrue(plot2.equals(plot1));\n        \n        // orientation...\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n        \n        // axisOffset...\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxis - no longer a separate field but test anyway...\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxes...\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocation - no longer a separate field but test anyway...\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocations...\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // draw shared domain axis...\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeAxis - no longer a separate field but test anyway...\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxes...\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocation - no longer a separate field but test anyway...\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocations...\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n        \n        // datasetToDomainAxisMap...\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        // datasetToRangeAxisMap...\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n        \n        // renderer - no longer a separate field but test anyway...\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // renderers...\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // rendering order...\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        // columnRenderingOrder...\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n        \n        // rowRenderingOrder...\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinesVisible\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlinePosition\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlineStroke\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinePaint\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinesVisible\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeGridlineStroke\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinePaint\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // anchorValue\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairVisible\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairValue\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairStroke\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairPaint\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairLockedOnData\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // range markers - no longer separate fields but test anyway...\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        // foreground range markers...\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        // background range markers...\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        // annotations\n        plot1.addAnnotation(\n            new CategoryTextAnnotation(\"Text\", \"Category\", 43.0)\n        );\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\", \n                43.0));\n        assertTrue(plot1.equals(plot2));\n        \n        // weight\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n        \n        // fixed domain axis space...\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n        \n        // fixed range axis space...\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n    }\n",
        "begin_line": 147,
        "end_line": 397,
        "comment": "\n     * Test that the equals() method differentiates all the required fields.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 48)",
            "(line 150,col 9)-(line 150,col 48)",
            "(line 151,col 9)-(line 151,col 40)",
            "(line 152,col 9)-(line 152,col 40)",
            "(line 155,col 9)-(line 155,col 57)",
            "(line 156,col 9)-(line 156,col 41)",
            "(line 157,col 9)-(line 157,col 57)",
            "(line 158,col 9)-(line 158,col 40)",
            "(line 161,col 9)-(line 161,col 73)",
            "(line 162,col 9)-(line 162,col 41)",
            "(line 163,col 9)-(line 163,col 73)",
            "(line 164,col 9)-(line 164,col 40)",
            "(line 167,col 9)-(line 167,col 63)",
            "(line 168,col 9)-(line 168,col 41)",
            "(line 169,col 9)-(line 169,col 63)",
            "(line 170,col 9)-(line 170,col 40)",
            "(line 173,col 9)-(line 173,col 68)",
            "(line 174,col 9)-(line 174,col 41)",
            "(line 175,col 9)-(line 175,col 68)",
            "(line 176,col 9)-(line 176,col 40)",
            "(line 179,col 9)-(line 179,col 63)",
            "(line 180,col 9)-(line 180,col 41)",
            "(line 181,col 9)-(line 181,col 63)",
            "(line 182,col 9)-(line 182,col 40)",
            "(line 185,col 9)-(line 185,col 67)",
            "(line 186,col 9)-(line 186,col 41)",
            "(line 187,col 9)-(line 187,col 67)",
            "(line 188,col 9)-(line 188,col 40)",
            "(line 191,col 9)-(line 191,col 72)",
            "(line 192,col 9)-(line 192,col 41)",
            "(line 193,col 9)-(line 193,col 72)",
            "(line 194,col 9)-(line 194,col 40)",
            "(line 197,col 9)-(line 197,col 57)",
            "(line 198,col 9)-(line 198,col 41)",
            "(line 199,col 9)-(line 199,col 57)",
            "(line 200,col 9)-(line 200,col 40)",
            "(line 203,col 9)-(line 203,col 71)",
            "(line 204,col 9)-(line 204,col 41)",
            "(line 205,col 9)-(line 205,col 71)",
            "(line 206,col 9)-(line 206,col 40)",
            "(line 209,col 9)-(line 209,col 62)",
            "(line 210,col 9)-(line 210,col 41)",
            "(line 211,col 9)-(line 211,col 62)",
            "(line 212,col 9)-(line 212,col 40)",
            "(line 215,col 9)-(line 215,col 66)",
            "(line 216,col 9)-(line 216,col 41)",
            "(line 217,col 9)-(line 217,col 66)",
            "(line 218,col 9)-(line 218,col 40)",
            "(line 221,col 9)-(line 221,col 45)",
            "(line 222,col 9)-(line 222,col 41)",
            "(line 223,col 9)-(line 223,col 45)",
            "(line 224,col 9)-(line 224,col 40)",
            "(line 227,col 9)-(line 227,col 44)",
            "(line 228,col 9)-(line 228,col 41)",
            "(line 229,col 9)-(line 229,col 44)",
            "(line 230,col 9)-(line 230,col 40)",
            "(line 233,col 9)-(line 233,col 46)",
            "(line 234,col 9)-(line 234,col 41)",
            "(line 235,col 9)-(line 235,col 46)",
            "(line 236,col 9)-(line 236,col 40)",
            "(line 239,col 9)-(line 239,col 50)",
            "(line 240,col 9)-(line 240,col 41)",
            "(line 241,col 9)-(line 241,col 50)",
            "(line 242,col 9)-(line 242,col 40)",
            "(line 245,col 9)-(line 245,col 70)",
            "(line 246,col 9)-(line 246,col 41)",
            "(line 247,col 9)-(line 247,col 70)",
            "(line 248,col 9)-(line 248,col 40)",
            "(line 251,col 9)-(line 251,col 60)",
            "(line 252,col 9)-(line 252,col 41)",
            "(line 253,col 9)-(line 253,col 60)",
            "(line 254,col 9)-(line 254,col 40)",
            "(line 257,col 9)-(line 257,col 57)",
            "(line 258,col 9)-(line 258,col 41)",
            "(line 259,col 9)-(line 259,col 57)",
            "(line 260,col 9)-(line 260,col 40)",
            "(line 263,col 9)-(line 263,col 46)",
            "(line 264,col 9)-(line 264,col 41)",
            "(line 265,col 9)-(line 265,col 46)",
            "(line 266,col 9)-(line 266,col 40)",
            "(line 269,col 9)-(line 269,col 60)",
            "(line 270,col 9)-(line 270,col 41)",
            "(line 271,col 9)-(line 271,col 60)",
            "(line 272,col 9)-(line 272,col 40)",
            "(line 275,col 9)-(line 275,col 46)",
            "(line 276,col 9)-(line 276,col 46)",
            "(line 277,col 9)-(line 277,col 41)",
            "(line 278,col 9)-(line 278,col 46)",
            "(line 279,col 9)-(line 279,col 40)",
            "(line 282,col 9)-(line 283,col 43)",
            "(line 284,col 9)-(line 284,col 41)",
            "(line 285,col 9)-(line 286,col 43)",
            "(line 287,col 9)-(line 287,col 40)",
            "(line 290,col 9)-(line 290,col 46)",
            "(line 291,col 9)-(line 291,col 41)",
            "(line 292,col 9)-(line 292,col 46)",
            "(line 293,col 9)-(line 293,col 40)",
            "(line 296,col 9)-(line 296,col 45)",
            "(line 297,col 9)-(line 297,col 41)",
            "(line 298,col 9)-(line 298,col 45)",
            "(line 299,col 9)-(line 299,col 40)",
            "(line 302,col 9)-(line 303,col 43)",
            "(line 304,col 9)-(line 304,col 41)",
            "(line 305,col 9)-(line 306,col 43)",
            "(line 307,col 9)-(line 307,col 40)",
            "(line 310,col 9)-(line 310,col 36)",
            "(line 311,col 9)-(line 311,col 41)",
            "(line 312,col 9)-(line 312,col 36)",
            "(line 313,col 9)-(line 313,col 40)",
            "(line 316,col 9)-(line 316,col 45)",
            "(line 317,col 9)-(line 317,col 41)",
            "(line 318,col 9)-(line 318,col 45)",
            "(line 319,col 9)-(line 319,col 40)",
            "(line 322,col 9)-(line 322,col 44)",
            "(line 323,col 9)-(line 323,col 41)",
            "(line 324,col 9)-(line 324,col 44)",
            "(line 325,col 9)-(line 325,col 40)",
            "(line 328,col 9)-(line 328,col 46)",
            "(line 329,col 9)-(line 329,col 41)",
            "(line 330,col 9)-(line 330,col 46)",
            "(line 331,col 9)-(line 331,col 40)",
            "(line 334,col 9)-(line 335,col 43)",
            "(line 336,col 9)-(line 336,col 41)",
            "(line 337,col 9)-(line 338,col 43)",
            "(line 339,col 9)-(line 339,col 40)",
            "(line 342,col 9)-(line 342,col 51)",
            "(line 343,col 9)-(line 343,col 41)",
            "(line 344,col 9)-(line 344,col 51)",
            "(line 345,col 9)-(line 345,col 40)",
            "(line 348,col 9)-(line 348,col 69)",
            "(line 349,col 9)-(line 349,col 41)",
            "(line 350,col 9)-(line 350,col 69)",
            "(line 351,col 9)-(line 351,col 40)",
            "(line 353,col 9)-(line 353,col 69)",
            "(line 354,col 9)-(line 354,col 41)",
            "(line 355,col 9)-(line 355,col 69)",
            "(line 356,col 9)-(line 356,col 40)",
            "(line 359,col 9)-(line 359,col 72)",
            "(line 360,col 9)-(line 360,col 41)",
            "(line 361,col 9)-(line 361,col 72)",
            "(line 362,col 9)-(line 362,col 40)",
            "(line 365,col 9)-(line 365,col 72)",
            "(line 366,col 9)-(line 366,col 41)",
            "(line 367,col 9)-(line 367,col 72)",
            "(line 368,col 9)-(line 368,col 40)",
            "(line 371,col 9)-(line 373,col 10)",
            "(line 374,col 9)-(line 374,col 41)",
            "(line 375,col 9)-(line 376,col 23)",
            "(line 377,col 9)-(line 377,col 40)",
            "(line 380,col 9)-(line 380,col 27)",
            "(line 381,col 9)-(line 381,col 41)",
            "(line 382,col 9)-(line 382,col 27)",
            "(line 383,col 9)-(line 383,col 40)",
            "(line 386,col 9)-(line 386,col 55)",
            "(line 387,col 9)-(line 387,col 41)",
            "(line 388,col 9)-(line 388,col 55)",
            "(line 389,col 9)-(line 389,col 40)",
            "(line 392,col 9)-(line 392,col 54)",
            "(line 393,col 9)-(line 393,col 41)",
            "(line 394,col 9)-(line 394,col 54)",
            "(line 395,col 9)-(line 395,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryPlot p1 = new CategoryPlot();\n        p1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        CategoryPlot p2 = null;\n        try {\n            p2 = (CategoryPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 402,
        "end_line": 417,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 45)",
            "(line 404,col 9)-(line 405,col 43)",
            "(line 406,col 9)-(line 406,col 31)",
            "(line 407,col 9)-(line 413,col 9)",
            "(line 414,col 9)-(line 414,col 29)",
            "(line 415,col 9)-(line 415,col 51)",
            "(line 416,col 9)-(line 416,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        CategoryAxis domainAxis = new CategoryAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        BarRenderer renderer = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(dataset, domainAxis, rangeAxis, \n                renderer);\n        p1.setOrientation(PlotOrientation.HORIZONTAL);\n        CategoryPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 422,
        "end_line": 447,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 424,col 9)-(line 424,col 70)",
            "(line 425,col 9)-(line 425,col 61)",
            "(line 426,col 9)-(line 426,col 55)",
            "(line 427,col 9)-(line 427,col 49)",
            "(line 428,col 9)-(line 429,col 26)",
            "(line 430,col 9)-(line 430,col 54)",
            "(line 431,col 9)-(line 431,col 31)",
            "(line 432,col 9)-(line 445,col 9)",
            "(line 446,col 9)-(line 446,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        DefaultCategoryDataset data = new DefaultCategoryDataset();\n        CategoryAxis domainAxis = new CategoryAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        BarRenderer renderer = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(data, domainAxis, rangeAxis, \n                renderer);\n        p1.setOrientation(PlotOrientation.VERTICAL);\n        CategoryPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }\n",
        "begin_line": 452,
        "end_line": 479,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 454,col 9)-(line 454,col 67)",
            "(line 455,col 9)-(line 455,col 61)",
            "(line 456,col 9)-(line 456,col 55)",
            "(line 457,col 9)-(line 457,col 49)",
            "(line 458,col 9)-(line 459,col 26)",
            "(line 460,col 9)-(line 460,col 52)",
            "(line 461,col 9)-(line 461,col 31)",
            "(line 463,col 9)-(line 476,col 9)",
            "(line 477,col 9)-(line 477,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization3()",
        "snippet": "    public void testSerialization3() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n\n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }\n",
        "begin_line": 484,
        "end_line": 524,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 485,col 9)-(line 485,col 70)",
            "(line 486,col 9)-(line 495,col 10)",
            "(line 496,col 9)-(line 496,col 33)",
            "(line 499,col 9)-(line 512,col 9)",
            "(line 515,col 9)-(line 515,col 30)",
            "(line 516,col 9)-(line 522,col 9)",
            "(line 523,col 9)-(line 523,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization4()",
        "snippet": "    public void testSerialization4() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(chart, chart2);\n        \n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }\n",
        "begin_line": 529,
        "end_line": 573,
        "comment": "\n     * This test ensures that a plot with markers is serialized correctly.\n     ",
        "child_ranges": [
            "(line 530,col 9)-(line 530,col 70)",
            "(line 531,col 9)-(line 540,col 10)",
            "(line 541,col 9)-(line 541,col 59)",
            "(line 542,col 9)-(line 542,col 68)",
            "(line 543,col 9)-(line 543,col 76)",
            "(line 544,col 9)-(line 544,col 33)",
            "(line 547,col 9)-(line 560,col 9)",
            "(line 561,col 9)-(line 561,col 36)",
            "(line 564,col 9)-(line 564,col 30)",
            "(line 565,col 9)-(line 571,col 9)",
            "(line 572,col 9)-(line 572,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization5()",
        "snippet": "    public void testSerialization5() {\n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        CategoryAxis domainAxis1 = new CategoryAxis(\"Domain 1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\n        BarRenderer renderer1 = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(dataset1, domainAxis1, rangeAxis1, \n                renderer1);\n        CategoryAxis domainAxis2 = new CategoryAxis(\"Domain 2\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Range 2\");\n        BarRenderer renderer2 = new BarRenderer();\n        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n        p1.setDataset(1, dataset2);\n        p1.setDomainAxis(1, domainAxis2);\n        p1.setRangeAxis(1, rangeAxis2);\n        p1.setRenderer(1, renderer2);\n        CategoryPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n        \n        // now check that all datasets, renderers and axes are being listened \n        // too...\n        CategoryAxis domainAxisA = p2.getDomainAxis(0);\n        NumberAxis rangeAxisA = (NumberAxis) p2.getRangeAxis(0);\n        DefaultCategoryDataset datasetA \n                = (DefaultCategoryDataset) p2.getDataset(0);\n        BarRenderer rendererA = (BarRenderer) p2.getRenderer(0);\n        CategoryAxis domainAxisB = p2.getDomainAxis(1);\n        NumberAxis rangeAxisB = (NumberAxis) p2.getRangeAxis(1);\n        DefaultCategoryDataset datasetB \n                = (DefaultCategoryDataset) p2.getDataset(1);\n        BarRenderer rendererB  = (BarRenderer) p2.getRenderer(1);\n        assertTrue(datasetA.hasListener(p2));\n        assertTrue(domainAxisA.hasListener(p2));\n        assertTrue(rangeAxisA.hasListener(p2));\n        assertTrue(rendererA.hasListener(p2));\n        assertTrue(datasetB.hasListener(p2));\n        assertTrue(domainAxisB.hasListener(p2));\n        assertTrue(rangeAxisB.hasListener(p2));\n        assertTrue(rendererB.hasListener(p2));\n    }\n",
        "begin_line": 580,
        "end_line": 631,
        "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
        "child_ranges": [
            "(line 581,col 9)-(line 581,col 71)",
            "(line 582,col 9)-(line 582,col 64)",
            "(line 583,col 9)-(line 583,col 58)",
            "(line 584,col 9)-(line 584,col 50)",
            "(line 585,col 9)-(line 586,col 27)",
            "(line 587,col 9)-(line 587,col 64)",
            "(line 588,col 9)-(line 588,col 58)",
            "(line 589,col 9)-(line 589,col 50)",
            "(line 590,col 9)-(line 590,col 71)",
            "(line 591,col 9)-(line 591,col 35)",
            "(line 592,col 9)-(line 592,col 41)",
            "(line 593,col 9)-(line 593,col 39)",
            "(line 594,col 9)-(line 594,col 37)",
            "(line 595,col 9)-(line 595,col 31)",
            "(line 596,col 9)-(line 608,col 9)",
            "(line 609,col 9)-(line 609,col 29)",
            "(line 613,col 9)-(line 613,col 55)",
            "(line 614,col 9)-(line 614,col 64)",
            "(line 615,col 9)-(line 616,col 60)",
            "(line 617,col 9)-(line 617,col 64)",
            "(line 618,col 9)-(line 618,col 55)",
            "(line 619,col 9)-(line 619,col 64)",
            "(line 620,col 9)-(line 621,col 60)",
            "(line 622,col 9)-(line 622,col 65)",
            "(line 623,col 9)-(line 623,col 45)",
            "(line 624,col 9)-(line 624,col 48)",
            "(line 625,col 9)-(line 625,col 47)",
            "(line 626,col 9)-(line 626,col 46)",
            "(line 627,col 9)-(line 627,col 45)",
            "(line 628,col 9)-(line 628,col 48)",
            "(line 629,col 9)-(line 629,col 47)",
            "(line 630,col 9)-(line 630,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSetRenderer()",
        "snippet": "    public void testSetRenderer() {\n        CategoryPlot plot = new CategoryPlot();\n        CategoryItemRenderer renderer = new LineAndShapeRenderer();\n        plot.setRenderer(renderer);\n        // now make a change to the renderer and see if it triggers a plot\n        // change event...\n        MyPlotChangeListener listener = new MyPlotChangeListener();\n        plot.addChangeListener(listener);\n        renderer.setSeriesPaint(0, Color.black);\n        assertTrue(listener.getEvent() != null);\n    }\n",
        "begin_line": 637,
        "end_line": 647,
        "comment": "\n     * A test for a bug where setting the renderer doesn't register the plot\n     * as a RendererChangeListener.\n     ",
        "child_ranges": [
            "(line 638,col 9)-(line 638,col 47)",
            "(line 639,col 9)-(line 639,col 67)",
            "(line 640,col 9)-(line 640,col 35)",
            "(line 643,col 9)-(line 643,col 67)",
            "(line 644,col 9)-(line 644,col 41)",
            "(line 645,col 9)-(line 645,col 48)",
            "(line 646,col 9)-(line 646,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.test1169972()",
        "snippet": "    public void test1169972() {\n        CategoryPlot plot = new CategoryPlot(null, null, null, null);\n        plot.setDomainAxis(new CategoryAxis(\"C\"));\n        plot.setRangeAxis(new NumberAxis(\"Y\"));\n        plot.setRenderer(new BarRenderer());\n        plot.setDataset(new DefaultCategoryDataset());\n        assertTrue(plot != null);\n    }\n",
        "begin_line": 652,
        "end_line": 659,
        "comment": "\n     * A test for bug report 1169972.\n     ",
        "child_ranges": [
            "(line 653,col 9)-(line 653,col 69)",
            "(line 654,col 9)-(line 654,col 50)",
            "(line 655,col 9)-(line 655,col 47)",
            "(line 656,col 9)-(line 656,col 44)",
            "(line 657,col 9)-(line 657,col 54)",
            "(line 658,col 9)-(line 658,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAddDomainMarker()",
        "snippet": "    public void testAddDomainMarker() {\n        CategoryPlot plot = new CategoryPlot();\n        CategoryMarker m = new CategoryMarker(\"C1\");\n        plot.addDomainMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearDomainMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }    \n",
        "begin_line": 664,
        "end_line": 674,
        "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
        "child_ranges": [
            "(line 665,col 9)-(line 665,col 47)",
            "(line 666,col 9)-(line 666,col 52)",
            "(line 667,col 9)-(line 667,col 32)",
            "(line 668,col 9)-(line 669,col 45)",
            "(line 670,col 9)-(line 670,col 45)",
            "(line 671,col 9)-(line 671,col 34)",
            "(line 672,col 9)-(line 672,col 78)",
            "(line 673,col 9)-(line 673,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAddRangeMarker()",
        "snippet": "    public void testAddRangeMarker() {\n        CategoryPlot plot = new CategoryPlot();\n        Marker m = new ValueMarker(1.0);\n        plot.addRangeMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearRangeMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }\n",
        "begin_line": 679,
        "end_line": 689,
        "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
        "child_ranges": [
            "(line 680,col 9)-(line 680,col 47)",
            "(line 681,col 9)-(line 681,col 40)",
            "(line 682,col 9)-(line 682,col 31)",
            "(line 683,col 9)-(line 684,col 45)",
            "(line 685,col 9)-(line 685,col 45)",
            "(line 686,col 9)-(line 686,col 33)",
            "(line 687,col 9)-(line 687,col 78)",
            "(line 688,col 9)-(line 688,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.test1654215()",
        "snippet": "    public void test1654215() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.setRenderer(1, new LineAndShapeRenderer());\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 695,
        "end_line": 715,
        "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
        "child_ranges": [
            "(line 696,col 9)-(line 696,col 70)",
            "(line 697,col 9)-(line 698,col 71)",
            "(line 699,col 9)-(line 699,col 59)",
            "(line 700,col 9)-(line 700,col 56)",
            "(line 701,col 9)-(line 701,col 32)",
            "(line 702,col 9)-(line 713,col 9)",
            "(line 714,col 9)-(line 714,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testGetDomainAxisIndex()",
        "snippet": "    public void testGetDomainAxisIndex() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        CategoryAxis domainAxis2 = new CategoryAxis(\"X2\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getDomainAxisIndex(domainAxis1));\n        assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));\n        plot.setDomainAxis(1, domainAxis2);\n        assertEquals(1, plot.getDomainAxisIndex(domainAxis2));\n        assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis(\"X2\")));\n        boolean pass = false;\n        try {\n            plot.getDomainAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 720,
        "end_line": 739,
        "comment": "\n     * Some checks for the getDomainAxisIndex() method.\n     ",
        "child_ranges": [
            "(line 721,col 9)-(line 721,col 58)",
            "(line 722,col 9)-(line 722,col 58)",
            "(line 723,col 9)-(line 723,col 53)",
            "(line 724,col 9)-(line 725,col 22)",
            "(line 726,col 9)-(line 726,col 62)",
            "(line 727,col 9)-(line 727,col 63)",
            "(line 728,col 9)-(line 728,col 43)",
            "(line 729,col 9)-(line 729,col 62)",
            "(line 730,col 9)-(line 730,col 74)",
            "(line 731,col 9)-(line 731,col 29)",
            "(line 732,col 9)-(line 737,col 9)",
            "(line 738,col 9)-(line 738,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testGetRangeAxisIndex()",
        "snippet": "    public void testGetRangeAxisIndex() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Y2\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));\n        assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));\n        plot.setRangeAxis(1, rangeAxis2);\n        assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));\n        assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis(\"Y2\")));\n        boolean pass = false;\n        try {\n            plot.getRangeAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 744,
        "end_line": 763,
        "comment": "\n     * Some checks for the getRangeAxisIndex() method.\n     ",
        "child_ranges": [
            "(line 745,col 9)-(line 745,col 58)",
            "(line 746,col 9)-(line 746,col 53)",
            "(line 747,col 9)-(line 747,col 53)",
            "(line 748,col 9)-(line 749,col 22)",
            "(line 750,col 9)-(line 750,col 60)",
            "(line 751,col 9)-(line 751,col 61)",
            "(line 752,col 9)-(line 752,col 41)",
            "(line 753,col 9)-(line 753,col 60)",
            "(line 754,col 9)-(line 754,col 71)",
            "(line 755,col 9)-(line 755,col 29)",
            "(line 756,col 9)-(line 761,col 9)",
            "(line 762,col 9)-(line 762,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveDomainMarker()",
        "snippet": "    public void testRemoveDomainMarker() {\n    \tCategoryPlot plot = new CategoryPlot();\n    \tassertFalse(plot.removeDomainMarker(new CategoryMarker(\"Category 1\")));\n    }\n",
        "begin_line": 769,
        "end_line": 772,
        "comment": "\n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
        "child_ranges": [
            "(line 770,col 6)-(line 770,col 44)",
            "(line 771,col 6)-(line 771,col 76)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveRangeMarker()",
        "snippet": "    public void testRemoveRangeMarker() {\n    \tCategoryPlot plot = new CategoryPlot();\n    \tassertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));\n    }\n",
        "begin_line": 778,
        "end_line": 781,
        "comment": "\n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
        "child_ranges": [
            "(line 779,col 6)-(line 779,col 44)",
            "(line 780,col 6)-(line 780,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYPlotTests.class);\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.XYPlotTests(java.lang.String)",
        "snippet": "    public XYPlotTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        XYPlot plot1 = new XYPlot();\n        XYPlot plot2 = new XYPlot();\n        assertTrue(plot1.equals(plot2));    \n        \n        // orientation...\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n        \n        // axisOffset...\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxis...\n        plot1.setDomainAxis(new NumberAxis(\"Domain Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new NumberAxis(\"Domain Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocation...\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // secondary DomainAxes...\n        plot1.setDomainAxis(11, new NumberAxis(\"Secondary Domain Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new NumberAxis(\"Secondary Domain Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // secondary DomainAxisLocations...\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxis...\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocation...\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // secondary RangeAxes...\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // secondary RangeAxisLocations...\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n        \n        // secondary DatasetDomainAxisMap...\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        // secondaryDatasetRangeAxisMap...\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n        \n        // renderer\n        plot1.setRenderer(new DefaultXYItemRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new DefaultXYItemRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // secondary renderers\n        plot1.setRenderer(11, new DefaultXYItemRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new DefaultXYItemRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinesVisible\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlineStroke\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinePaint\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinesVisible\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeGridlineStroke\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinePaint\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n                \n        // rangeZeroBaselineVisible\n        plot1.setRangeZeroBaselineVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeZeroBaselineStroke\n        plot1.setRangeZeroBaselineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeZeroBaselinePaint\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeCrosshairVisible\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairValue\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairStroke\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairPaint\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.pink, \n                3.0f, 4.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.pink, \n                3.0f, 4.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairLockedOnData\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // range markers\n        plot1.addRangeMarker(new ValueMarker(4.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0));\n        assertTrue(plot1.equals(plot2));\n        \n        // secondary range markers\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.addRangeMarker(1, new ValueMarker(99.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(99.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n                \n        // weight\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n        \n        // quadrant origin\n        plot1.setQuadrantOrigin(new Point2D.Double(12.3, 45.6));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantOrigin(new Point2D.Double(12.3, 45.6));\n        assertTrue(plot1.equals(plot2));\n        \n        // quadrant paint\n        plot1.setQuadrantPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        plot1.setQuadrantPaint(1, new GradientPaint(2.0f, 3.0f, Color.red,\n                4.0f, 5.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(1, new GradientPaint(2.0f, 3.0f, Color.red,\n                4.0f, 5.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        plot1.setQuadrantPaint(2, new GradientPaint(3.0f, 4.0f, Color.red,\n                5.0f, 6.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(2, new GradientPaint(3.0f, 4.0f, Color.red,\n                5.0f, 6.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n        plot1.setQuadrantPaint(3, new GradientPaint(4.0f, 5.0f, Color.red,\n                6.0f, 7.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setQuadrantPaint(3, new GradientPaint(4.0f, 5.0f, Color.red,\n                6.0f, 7.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));  \n        \n        plot1.setDomainTickBandPaint(Color.red);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainTickBandPaint(Color.red);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.setRangeTickBandPaint(Color.blue);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeTickBandPaint(Color.blue);\n        assertTrue(plot1.equals(plot2));\n        \n    }\n",
        "begin_line": 142,
        "end_line": 390,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 36)",
            "(line 145,col 9)-(line 145,col 36)",
            "(line 146,col 9)-(line 146,col 40)",
            "(line 149,col 9)-(line 149,col 57)",
            "(line 150,col 9)-(line 150,col 41)",
            "(line 151,col 9)-(line 151,col 57)",
            "(line 152,col 9)-(line 152,col 40)",
            "(line 155,col 9)-(line 155,col 73)",
            "(line 156,col 9)-(line 156,col 41)",
            "(line 157,col 9)-(line 157,col 73)",
            "(line 158,col 9)-(line 158,col 40)",
            "(line 161,col 9)-(line 161,col 59)",
            "(line 162,col 9)-(line 162,col 41)",
            "(line 163,col 9)-(line 163,col 59)",
            "(line 164,col 9)-(line 164,col 40)",
            "(line 167,col 9)-(line 167,col 63)",
            "(line 168,col 9)-(line 168,col 41)",
            "(line 169,col 9)-(line 169,col 63)",
            "(line 170,col 9)-(line 170,col 40)",
            "(line 173,col 9)-(line 173,col 73)",
            "(line 174,col 9)-(line 174,col 41)",
            "(line 175,col 9)-(line 175,col 73)",
            "(line 176,col 9)-(line 176,col 40)",
            "(line 179,col 9)-(line 179,col 67)",
            "(line 180,col 9)-(line 180,col 41)",
            "(line 181,col 9)-(line 181,col 67)",
            "(line 182,col 9)-(line 182,col 40)",
            "(line 185,col 9)-(line 185,col 57)",
            "(line 186,col 9)-(line 186,col 41)",
            "(line 187,col 9)-(line 187,col 57)",
            "(line 188,col 9)-(line 188,col 40)",
            "(line 191,col 9)-(line 191,col 62)",
            "(line 192,col 9)-(line 192,col 41)",
            "(line 193,col 9)-(line 193,col 62)",
            "(line 194,col 9)-(line 194,col 40)",
            "(line 197,col 9)-(line 197,col 71)",
            "(line 198,col 9)-(line 198,col 41)",
            "(line 199,col 9)-(line 199,col 71)",
            "(line 200,col 9)-(line 200,col 40)",
            "(line 203,col 9)-(line 203,col 66)",
            "(line 204,col 9)-(line 204,col 41)",
            "(line 205,col 9)-(line 205,col 66)",
            "(line 206,col 9)-(line 206,col 40)",
            "(line 209,col 9)-(line 209,col 45)",
            "(line 210,col 9)-(line 210,col 41)",
            "(line 211,col 9)-(line 211,col 45)",
            "(line 212,col 9)-(line 212,col 40)",
            "(line 215,col 9)-(line 215,col 44)",
            "(line 216,col 9)-(line 216,col 41)",
            "(line 217,col 9)-(line 217,col 44)",
            "(line 218,col 9)-(line 218,col 40)",
            "(line 221,col 9)-(line 221,col 55)",
            "(line 222,col 9)-(line 222,col 41)",
            "(line 223,col 9)-(line 223,col 55)",
            "(line 224,col 9)-(line 224,col 40)",
            "(line 227,col 9)-(line 227,col 59)",
            "(line 228,col 9)-(line 228,col 41)",
            "(line 229,col 9)-(line 229,col 59)",
            "(line 230,col 9)-(line 230,col 40)",
            "(line 233,col 9)-(line 233,col 47)",
            "(line 234,col 9)-(line 234,col 41)",
            "(line 235,col 9)-(line 235,col 47)",
            "(line 236,col 9)-(line 236,col 40)",
            "(line 239,col 9)-(line 239,col 46)",
            "(line 240,col 9)-(line 240,col 46)",
            "(line 241,col 9)-(line 241,col 41)",
            "(line 242,col 9)-(line 242,col 46)",
            "(line 243,col 9)-(line 243,col 40)",
            "(line 246,col 9)-(line 247,col 40)",
            "(line 248,col 9)-(line 248,col 41)",
            "(line 249,col 9)-(line 250,col 40)",
            "(line 251,col 9)-(line 251,col 40)",
            "(line 254,col 9)-(line 254,col 46)",
            "(line 255,col 9)-(line 255,col 41)",
            "(line 256,col 9)-(line 256,col 46)",
            "(line 257,col 9)-(line 257,col 40)",
            "(line 260,col 9)-(line 260,col 45)",
            "(line 261,col 9)-(line 261,col 41)",
            "(line 262,col 9)-(line 262,col 45)",
            "(line 263,col 9)-(line 263,col 40)",
            "(line 266,col 9)-(line 267,col 40)",
            "(line 268,col 9)-(line 268,col 41)",
            "(line 269,col 9)-(line 270,col 40)",
            "(line 271,col 9)-(line 271,col 40)",
            "(line 274,col 9)-(line 274,col 48)",
            "(line 275,col 9)-(line 275,col 41)",
            "(line 276,col 9)-(line 276,col 48)",
            "(line 277,col 9)-(line 277,col 40)",
            "(line 280,col 9)-(line 280,col 49)",
            "(line 281,col 9)-(line 281,col 41)",
            "(line 282,col 9)-(line 282,col 49)",
            "(line 283,col 9)-(line 283,col 40)",
            "(line 286,col 9)-(line 287,col 40)",
            "(line 288,col 9)-(line 288,col 41)",
            "(line 289,col 9)-(line 290,col 40)",
            "(line 291,col 9)-(line 291,col 40)",
            "(line 294,col 9)-(line 294,col 45)",
            "(line 295,col 9)-(line 295,col 41)",
            "(line 296,col 9)-(line 296,col 45)",
            "(line 297,col 9)-(line 297,col 40)",
            "(line 300,col 9)-(line 300,col 44)",
            "(line 301,col 9)-(line 301,col 41)",
            "(line 302,col 9)-(line 302,col 44)",
            "(line 303,col 9)-(line 303,col 40)",
            "(line 306,col 9)-(line 306,col 46)",
            "(line 307,col 9)-(line 307,col 41)",
            "(line 308,col 9)-(line 308,col 46)",
            "(line 309,col 9)-(line 309,col 40)",
            "(line 312,col 9)-(line 313,col 40)",
            "(line 314,col 9)-(line 314,col 41)",
            "(line 315,col 9)-(line 316,col 40)",
            "(line 317,col 9)-(line 317,col 40)",
            "(line 320,col 9)-(line 320,col 51)",
            "(line 321,col 9)-(line 321,col 41)",
            "(line 322,col 9)-(line 322,col 51)",
            "(line 323,col 9)-(line 323,col 40)",
            "(line 326,col 9)-(line 326,col 51)",
            "(line 327,col 9)-(line 327,col 41)",
            "(line 328,col 9)-(line 328,col 51)",
            "(line 329,col 9)-(line 329,col 40)",
            "(line 332,col 9)-(line 332,col 72)",
            "(line 333,col 9)-(line 333,col 41)",
            "(line 334,col 9)-(line 334,col 72)",
            "(line 335,col 9)-(line 335,col 40)",
            "(line 337,col 9)-(line 337,col 73)",
            "(line 338,col 9)-(line 338,col 41)",
            "(line 339,col 9)-(line 339,col 73)",
            "(line 340,col 9)-(line 340,col 40)",
            "(line 343,col 9)-(line 343,col 27)",
            "(line 344,col 9)-(line 344,col 41)",
            "(line 345,col 9)-(line 345,col 27)",
            "(line 346,col 9)-(line 346,col 40)",
            "(line 349,col 9)-(line 349,col 64)",
            "(line 350,col 9)-(line 350,col 41)",
            "(line 351,col 9)-(line 351,col 64)",
            "(line 352,col 9)-(line 352,col 40)",
            "(line 355,col 9)-(line 356,col 41)",
            "(line 357,col 9)-(line 357,col 41)",
            "(line 358,col 9)-(line 359,col 41)",
            "(line 360,col 9)-(line 360,col 40)",
            "(line 361,col 9)-(line 362,col 41)",
            "(line 363,col 9)-(line 363,col 41)",
            "(line 364,col 9)-(line 365,col 41)",
            "(line 366,col 9)-(line 366,col 40)",
            "(line 367,col 9)-(line 368,col 41)",
            "(line 369,col 9)-(line 369,col 41)",
            "(line 370,col 9)-(line 371,col 41)",
            "(line 372,col 9)-(line 372,col 40)",
            "(line 373,col 9)-(line 374,col 41)",
            "(line 375,col 9)-(line 375,col 41)",
            "(line 376,col 9)-(line 377,col 41)",
            "(line 378,col 9)-(line 378,col 40)",
            "(line 380,col 9)-(line 380,col 48)",
            "(line 381,col 9)-(line 381,col 41)",
            "(line 382,col 9)-(line 382,col 48)",
            "(line 383,col 9)-(line 383,col 40)",
            "(line 385,col 9)-(line 385,col 48)",
            "(line 386,col 9)-(line 386,col 41)",
            "(line 387,col 9)-(line 387,col 48)",
            "(line 388,col 9)-(line 388,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYPlot p1 = new XYPlot();\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 395,
        "end_line": 407,
        "comment": "\n     * Confirm that basic cloning works.\n     ",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 33)",
            "(line 397,col 9)-(line 397,col 25)",
            "(line 398,col 9)-(line 403,col 9)",
            "(line 404,col 9)-(line 404,col 29)",
            "(line 405,col 9)-(line 405,col 51)",
            "(line 406,col 9)-(line 406,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        XYPlot p1 = new XYPlot(null, new NumberAxis(\"Domain Axis\"), \n                new NumberAxis(\"Range Axis\"), new StandardXYItemRenderer());\n        p1.setRangeAxis(1, new NumberAxis(\"Range Axis 2\"));\n        p1.setRenderer(1, new XYBarRenderer());\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 412,
        "end_line": 427,
        "comment": "\n     * Tests cloning for a more complex plot.\n     ",
        "child_ranges": [
            "(line 413,col 9)-(line 414,col 76)",
            "(line 415,col 9)-(line 415,col 59)",
            "(line 416,col 9)-(line 416,col 47)",
            "(line 417,col 9)-(line 417,col 25)",
            "(line 418,col 9)-(line 423,col 9)",
            "(line 424,col 9)-(line 424,col 29)",
            "(line 425,col 9)-(line 425,col 51)",
            "(line 426,col 9)-(line 426,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantOrigin()",
        "snippet": "    public void testCloning_QuadrantOrigin() {\n        XYPlot p1 = new XYPlot();\n        Point2D p = new Point2D.Double(1.2, 3.4);\n        p1.setQuadrantOrigin(p);\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.getQuadrantOrigin() != p);\n    }\n",
        "begin_line": 432,
        "end_line": 447,
        "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 33)",
            "(line 434,col 9)-(line 434,col 49)",
            "(line 435,col 9)-(line 435,col 32)",
            "(line 436,col 9)-(line 436,col 25)",
            "(line 437,col 9)-(line 442,col 9)",
            "(line 443,col 9)-(line 443,col 29)",
            "(line 444,col 9)-(line 444,col 51)",
            "(line 445,col 9)-(line 445,col 34)",
            "(line 446,col 9)-(line 446,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantPaint()",
        "snippet": "    public void testCloning_QuadrantPaint() {\n        XYPlot p1 = new XYPlot();\n        p1.setQuadrantPaint(3, new GradientPaint(1.0f, 2.0f, Color.red, \n                3.0f, 4.0f, Color.blue));\n        XYPlot p2 = null;\n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n        \n        // check for independence\n        p1.setQuadrantPaint(1, Color.red);\n        assertFalse(p1.equals(p2));\n        p2.setQuadrantPaint(1, Color.red);\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 452,
        "end_line": 472,
        "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 33)",
            "(line 454,col 9)-(line 455,col 41)",
            "(line 456,col 9)-(line 456,col 25)",
            "(line 457,col 9)-(line 462,col 9)",
            "(line 463,col 9)-(line 463,col 29)",
            "(line 464,col 9)-(line 464,col 51)",
            "(line 465,col 9)-(line 465,col 34)",
            "(line 468,col 9)-(line 468,col 42)",
            "(line 469,col 9)-(line 469,col 35)",
            "(line 470,col 9)-(line 470,col 42)",
            "(line 471,col 9)-(line 471,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloneIndependence()",
        "snippet": "    public void testCloneIndependence() {\n        XYPlot p1 = new XYPlot(null, new NumberAxis(\"Domain Axis\"), \n                new NumberAxis(\"Range Axis\"), new StandardXYItemRenderer());\n        p1.setDomainAxis(1, new NumberAxis(\"Domain Axis 2\"));\n        p1.setDomainAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT);\n        p1.setRangeAxis(1, new NumberAxis(\"Range Axis 2\"));\n        p1.setRangeAxisLocation(1, AxisLocation.TOP_OR_RIGHT);\n        p1.setRenderer(1, new XYBarRenderer());\n        XYPlot p2 = null;        \n        try {\n            p2 = (XYPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1.equals(p2));\n        \n        p1.getDomainAxis().setLabel(\"Label\");\n        assertFalse(p1.equals(p2));\n        p2.getDomainAxis().setLabel(\"Label\");\n        assertTrue(p1.equals(p2));\n        \n        p1.getDomainAxis(1).setLabel(\"S1\");\n        assertFalse(p1.equals(p2));\n        p2.getDomainAxis(1).setLabel(\"S1\");\n        assertTrue(p1.equals(p2));\n        \n        p1.setDomainAxisLocation(1, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(p1.equals(p2));\n        p2.setDomainAxisLocation(1, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(p1.equals(p2));\n        \n        p1.mapDatasetToDomainAxis(2, 1);\n        assertFalse(p1.equals(p2));\n        p2.mapDatasetToDomainAxis(2, 1);\n        assertTrue(p1.equals(p2));\n\n        p1.getRangeAxis().setLabel(\"Label\");\n        assertFalse(p1.equals(p2));\n        p2.getRangeAxis().setLabel(\"Label\");\n        assertTrue(p1.equals(p2));\n        \n        p1.getRangeAxis(1).setLabel(\"S1\");\n        assertFalse(p1.equals(p2));\n        p2.getRangeAxis(1).setLabel(\"S1\");\n        assertTrue(p1.equals(p2));\n        \n        p1.setRangeAxisLocation(1, AxisLocation.TOP_OR_LEFT);\n        assertFalse(p1.equals(p2));\n        p2.setRangeAxisLocation(1, AxisLocation.TOP_OR_LEFT);\n        assertTrue(p1.equals(p2));\n        \n        p1.mapDatasetToRangeAxis(2, 1);\n        assertFalse(p1.equals(p2));\n        p2.mapDatasetToRangeAxis(2, 1);\n        assertTrue(p1.equals(p2));\n\n        p1.getRenderer().setBaseOutlinePaint(Color.cyan);\n        assertFalse(p1.equals(p2));\n        p2.getRenderer().setBaseOutlinePaint(Color.cyan);\n        assertTrue(p1.equals(p2));\n        \n        p1.getRenderer(1).setBaseOutlinePaint(Color.red);\n        assertFalse(p1.equals(p2));\n        p2.getRenderer(1).setBaseOutlinePaint(Color.red);\n        assertTrue(p1.equals(p2));\n        \n    }\n",
        "begin_line": 477,
        "end_line": 545,
        "comment": "\n     * Tests the independence of the clones.\n     ",
        "child_ranges": [
            "(line 478,col 9)-(line 479,col 76)",
            "(line 480,col 9)-(line 480,col 61)",
            "(line 481,col 9)-(line 481,col 65)",
            "(line 482,col 9)-(line 482,col 59)",
            "(line 483,col 9)-(line 483,col 62)",
            "(line 484,col 9)-(line 484,col 47)",
            "(line 485,col 9)-(line 485,col 25)",
            "(line 486,col 9)-(line 492,col 9)",
            "(line 493,col 9)-(line 493,col 34)",
            "(line 495,col 9)-(line 495,col 45)",
            "(line 496,col 9)-(line 496,col 35)",
            "(line 497,col 9)-(line 497,col 45)",
            "(line 498,col 9)-(line 498,col 34)",
            "(line 500,col 9)-(line 500,col 43)",
            "(line 501,col 9)-(line 501,col 35)",
            "(line 502,col 9)-(line 502,col 43)",
            "(line 503,col 9)-(line 503,col 34)",
            "(line 505,col 9)-(line 505,col 63)",
            "(line 506,col 9)-(line 506,col 35)",
            "(line 507,col 9)-(line 507,col 63)",
            "(line 508,col 9)-(line 508,col 34)",
            "(line 510,col 9)-(line 510,col 40)",
            "(line 511,col 9)-(line 511,col 35)",
            "(line 512,col 9)-(line 512,col 40)",
            "(line 513,col 9)-(line 513,col 34)",
            "(line 515,col 9)-(line 515,col 44)",
            "(line 516,col 9)-(line 516,col 35)",
            "(line 517,col 9)-(line 517,col 44)",
            "(line 518,col 9)-(line 518,col 34)",
            "(line 520,col 9)-(line 520,col 42)",
            "(line 521,col 9)-(line 521,col 35)",
            "(line 522,col 9)-(line 522,col 42)",
            "(line 523,col 9)-(line 523,col 34)",
            "(line 525,col 9)-(line 525,col 61)",
            "(line 526,col 9)-(line 526,col 35)",
            "(line 527,col 9)-(line 527,col 61)",
            "(line 528,col 9)-(line 528,col 34)",
            "(line 530,col 9)-(line 530,col 39)",
            "(line 531,col 9)-(line 531,col 35)",
            "(line 532,col 9)-(line 532,col 39)",
            "(line 533,col 9)-(line 533,col 34)",
            "(line 535,col 9)-(line 535,col 57)",
            "(line 536,col 9)-(line 536,col 35)",
            "(line 537,col 9)-(line 537,col 57)",
            "(line 538,col 9)-(line 538,col 34)",
            "(line 540,col 9)-(line 540,col 57)",
            "(line 541,col 9)-(line 541,col 35)",
            "(line 542,col 9)-(line 542,col 57)",
            "(line 543,col 9)-(line 543,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetNullRenderer()",
        "snippet": "    public void testSetNullRenderer() {\n        boolean failed = false;\n        try {\n            XYPlot plot = new XYPlot(null, new NumberAxis(\"X\"), \n                    new NumberAxis(\"Y\"), null);\n            plot.setRenderer(null);\n        }\n        catch (Exception e) {\n            failed = true;\n        }\n        assertTrue(!failed);\n    }\n",
        "begin_line": 551,
        "end_line": 562,
        "comment": "\n     * Setting a null renderer should be allowed, but is generating a null \n     * pointer exception in 0.9.7.\n     ",
        "child_ranges": [
            "(line 552,col 9)-(line 552,col 31)",
            "(line 553,col 9)-(line 560,col 9)",
            "(line 561,col 9)-(line 561,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization1()",
        "snippet": "    public void testSerialization1() {\n\n        XYDataset data = new XYSeriesCollection();\n        NumberAxis domainAxis = new NumberAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        StandardXYItemRenderer renderer = new StandardXYItemRenderer();\n        XYPlot p1 = new XYPlot(data, domainAxis, rangeAxis, renderer);\n        XYPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (XYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }\n",
        "begin_line": 567,
        "end_line": 593,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 569,col 9)-(line 569,col 50)",
            "(line 570,col 9)-(line 570,col 57)",
            "(line 571,col 9)-(line 571,col 55)",
            "(line 572,col 9)-(line 572,col 71)",
            "(line 573,col 9)-(line 573,col 70)",
            "(line 574,col 9)-(line 574,col 25)",
            "(line 576,col 9)-(line 590,col 9)",
            "(line 591,col 9)-(line 591,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        IntervalXYDataset data1 = createDataset1();\n        XYItemRenderer renderer1 = new XYBarRenderer(0.20);\n        renderer1.setBaseToolTipGenerator(\n                StandardXYToolTipGenerator.getTimeSeriesInstance());\n        XYPlot p1 = new XYPlot(data1, new DateAxis(\"Date\"), null, renderer1);\n        XYPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (XYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }\n",
        "begin_line": 599,
        "end_line": 624,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.  This test \n     * uses a {@link DateAxis} and a {@link StandardXYToolTipGenerator}.\n     ",
        "child_ranges": [
            "(line 601,col 9)-(line 601,col 51)",
            "(line 602,col 9)-(line 602,col 59)",
            "(line 603,col 9)-(line 604,col 68)",
            "(line 605,col 9)-(line 605,col 77)",
            "(line 606,col 9)-(line 606,col 25)",
            "(line 608,col 9)-(line 621,col 9)",
            "(line 622,col 9)-(line 622,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization3()",
        "snippet": "    public void testSerialization3() {\n        \n        XYSeriesCollection dataset = new XYSeriesCollection();\n        JFreeChart chart = ChartFactory.createXYLineChart(\n            \"Test Chart\",\n            \"Domain Axis\",\n            \"Range Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n\n        assertEquals(chart, chart2);\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }\n",
        "begin_line": 636,
        "end_line": 678,
        "comment": "\n     * Problem to reproduce a bug in serialization.  The bug (first reported \n     * against the {@link org.jfree.chart.plot.CategoryPlot} class) is a null \n     * pointer exception that occurs when drawing a plot after deserialization.\n     * It is caused by four temporary storage structures (axesAtTop, \n     * axesAtBottom, axesAtLeft and axesAtRight - all initialized as empty \n     * lists in the constructor) not being initialized by the readObject() \n     * method following deserialization.  This test has been written to \n     * reproduce the bug (now fixed).\n     ",
        "child_ranges": [
            "(line 638,col 9)-(line 638,col 62)",
            "(line 639,col 9)-(line 648,col 10)",
            "(line 649,col 9)-(line 649,col 33)",
            "(line 652,col 9)-(line 666,col 9)",
            "(line 668,col 9)-(line 668,col 36)",
            "(line 669,col 9)-(line 669,col 30)",
            "(line 670,col 9)-(line 676,col 9)",
            "(line 677,col 9)-(line 677,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization4()",
        "snippet": "    public void testSerialization4() {\n        \n        XYSeriesCollection dataset = new XYSeriesCollection();\n        JFreeChart chart = ChartFactory.createXYLineChart(\n            \"Test Chart\",\n            \"Domain Axis\",\n            \"Range Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.addDomainMarker(new ValueMarker(1.0), Layer.FOREGROUND);\n        plot.addDomainMarker(new IntervalMarker(2.0, 3.0), Layer.BACKGROUND);\n        plot.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(5.0, 6.0), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n\n        assertEquals(chart, chart2);\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }\n",
        "begin_line": 684,
        "end_line": 731,
        "comment": "\n     * A test to reproduce a bug in serialization: the domain and/or range\n     * markers for a plot are not being serialized.\n     ",
        "child_ranges": [
            "(line 686,col 9)-(line 686,col 62)",
            "(line 687,col 9)-(line 696,col 10)",
            "(line 697,col 9)-(line 697,col 47)",
            "(line 698,col 9)-(line 698,col 69)",
            "(line 699,col 9)-(line 699,col 77)",
            "(line 700,col 9)-(line 700,col 68)",
            "(line 701,col 9)-(line 701,col 76)",
            "(line 702,col 9)-(line 702,col 33)",
            "(line 705,col 9)-(line 719,col 9)",
            "(line 721,col 9)-(line 721,col 36)",
            "(line 722,col 9)-(line 722,col 30)",
            "(line 723,col 9)-(line 729,col 9)",
            "(line 730,col 9)-(line 730,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization5()",
        "snippet": "    public void testSerialization5() {\n        XYSeriesCollection dataset1 = new XYSeriesCollection();\n        NumberAxis domainAxis1 = new NumberAxis(\"Domain 1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\n        StandardXYItemRenderer renderer1 = new StandardXYItemRenderer();\n        XYPlot p1 = new XYPlot(dataset1, domainAxis1, rangeAxis1, renderer1);\n        NumberAxis domainAxis2 = new NumberAxis(\"Domain 2\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Range 2\");\n        StandardXYItemRenderer renderer2 = new StandardXYItemRenderer();\n        XYSeriesCollection dataset2 = new XYSeriesCollection();\n        p1.setDataset(1, dataset2);\n        p1.setDomainAxis(1, domainAxis2);\n        p1.setRangeAxis(1, rangeAxis2);\n        p1.setRenderer(1, renderer2);\n        XYPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            p2 = (XYPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n        \n        // now check that all datasets, renderers and axes are being listened \n        // too...\n        NumberAxis domainAxisA = (NumberAxis) p2.getDomainAxis(0);\n        NumberAxis rangeAxisA = (NumberAxis) p2.getRangeAxis(0);\n        XYSeriesCollection datasetA = (XYSeriesCollection) p2.getDataset(0);\n        StandardXYItemRenderer rendererA \n            = (StandardXYItemRenderer) p2.getRenderer(0);\n        NumberAxis domainAxisB = (NumberAxis) p2.getDomainAxis(1);\n        NumberAxis rangeAxisB = (NumberAxis) p2.getRangeAxis(1);\n        XYSeriesCollection datasetB = (XYSeriesCollection) p2.getDataset(1);\n        StandardXYItemRenderer rendererB \n            = (StandardXYItemRenderer) p2.getRenderer(1);\n        assertTrue(datasetA.hasListener(p2));\n        assertTrue(domainAxisA.hasListener(p2));\n        assertTrue(rangeAxisA.hasListener(p2));\n        assertTrue(rendererA.hasListener(p2));\n        assertTrue(datasetB.hasListener(p2));\n        assertTrue(domainAxisB.hasListener(p2));\n        assertTrue(rangeAxisB.hasListener(p2));\n        assertTrue(rendererB.hasListener(p2));\n    }\n",
        "begin_line": 738,
        "end_line": 789,
        "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
        "child_ranges": [
            "(line 739,col 9)-(line 739,col 63)",
            "(line 740,col 9)-(line 740,col 60)",
            "(line 741,col 9)-(line 741,col 58)",
            "(line 742,col 9)-(line 742,col 72)",
            "(line 743,col 9)-(line 743,col 77)",
            "(line 744,col 9)-(line 744,col 60)",
            "(line 745,col 9)-(line 745,col 58)",
            "(line 746,col 9)-(line 746,col 72)",
            "(line 747,col 9)-(line 747,col 63)",
            "(line 748,col 9)-(line 748,col 35)",
            "(line 749,col 9)-(line 749,col 41)",
            "(line 750,col 9)-(line 750,col 39)",
            "(line 751,col 9)-(line 751,col 37)",
            "(line 752,col 9)-(line 752,col 25)",
            "(line 753,col 9)-(line 766,col 9)",
            "(line 767,col 9)-(line 767,col 29)",
            "(line 771,col 9)-(line 771,col 66)",
            "(line 772,col 9)-(line 772,col 64)",
            "(line 773,col 9)-(line 773,col 76)",
            "(line 774,col 9)-(line 775,col 57)",
            "(line 776,col 9)-(line 776,col 66)",
            "(line 777,col 9)-(line 777,col 64)",
            "(line 778,col 9)-(line 778,col 76)",
            "(line 779,col 9)-(line 780,col 57)",
            "(line 781,col 9)-(line 781,col 45)",
            "(line 782,col 9)-(line 782,col 48)",
            "(line 783,col 9)-(line 783,col 47)",
            "(line 784,col 9)-(line 784,col 46)",
            "(line 785,col 9)-(line 785,col 45)",
            "(line 786,col 9)-(line 786,col 48)",
            "(line 787,col 9)-(line 787,col 47)",
            "(line 788,col 9)-(line 788,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRendererForDataset()",
        "snippet": "    public void testGetRendererForDataset() {\n        XYDataset d0 = new XYSeriesCollection();\n        XYDataset d1 = new XYSeriesCollection();\n        XYDataset d2 = new XYSeriesCollection();\n        XYDataset d3 = new XYSeriesCollection();  // not used by plot\n        XYItemRenderer r0 = new XYLineAndShapeRenderer();\n        XYItemRenderer r2 = new XYLineAndShapeRenderer();\n        XYPlot plot = new XYPlot();\n        plot.setDataset(0, d0);\n        plot.setDataset(1, d1);\n        plot.setDataset(2, d2);\n        plot.setRenderer(0, r0);\n        // no renderer 1\n        plot.setRenderer(2, r2);\n        assertEquals(r0, plot.getRendererForDataset(d0));\n        assertEquals(r0, plot.getRendererForDataset(d1));\n        assertEquals(r2, plot.getRendererForDataset(d2));\n        assertEquals(null, plot.getRendererForDataset(d3));\n        assertEquals(null, plot.getRendererForDataset(null));\n    }\n",
        "begin_line": 794,
        "end_line": 813,
        "comment": "\n     * Some checks for the getRendererForDataset() method.\n     ",
        "child_ranges": [
            "(line 795,col 9)-(line 795,col 48)",
            "(line 796,col 9)-(line 796,col 48)",
            "(line 797,col 9)-(line 797,col 48)",
            "(line 798,col 9)-(line 798,col 48)",
            "(line 799,col 9)-(line 799,col 57)",
            "(line 800,col 9)-(line 800,col 57)",
            "(line 801,col 9)-(line 801,col 35)",
            "(line 802,col 9)-(line 802,col 31)",
            "(line 803,col 9)-(line 803,col 31)",
            "(line 804,col 9)-(line 804,col 31)",
            "(line 805,col 9)-(line 805,col 32)",
            "(line 807,col 9)-(line 807,col 32)",
            "(line 808,col 9)-(line 808,col 57)",
            "(line 809,col 9)-(line 809,col 57)",
            "(line 810,col 9)-(line 810,col 57)",
            "(line 811,col 9)-(line 811,col 59)",
            "(line 812,col 9)-(line 812,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetLegendItems()",
        "snippet": "    public void testGetLegendItems() {\n        // check the case where there is a secondary dataset that doesn't \n        // have a renderer (i.e. falls back to renderer 0)\n        XYDataset d0 = createDataset1();\n        XYDataset d1 = createDataset2();\n        XYItemRenderer r0 = new XYLineAndShapeRenderer();\n        XYPlot plot = new XYPlot();\n        plot.setDataset(0, d0);\n        plot.setDataset(1, d1);\n        plot.setRenderer(0, r0);\n        LegendItemCollection items = plot.getLegendItems();\n        assertEquals(2, items.getItemCount());\n    }\n",
        "begin_line": 818,
        "end_line": 830,
        "comment": "\n     * Some checks for the getLegendItems() method.\n     ",
        "child_ranges": [
            "(line 821,col 9)-(line 821,col 40)",
            "(line 822,col 9)-(line 822,col 40)",
            "(line 823,col 9)-(line 823,col 57)",
            "(line 824,col 9)-(line 824,col 35)",
            "(line 825,col 9)-(line 825,col 31)",
            "(line 826,col 9)-(line 826,col 31)",
            "(line 827,col 9)-(line 827,col 32)",
            "(line 828,col 9)-(line 828,col 59)",
            "(line 829,col 9)-(line 829,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset1()",
        "snippet": "    private IntervalXYDataset createDataset1() {\n\n        // create dataset 1...\n        TimeSeries series1 = new TimeSeries(\"Series 1\", Day.class);\n        series1.add(new Day(1, MonthConstants.MARCH, 2002), 12353.3);\n        series1.add(new Day(2, MonthConstants.MARCH, 2002), 13734.4);\n        series1.add(new Day(3, MonthConstants.MARCH, 2002), 14525.3);\n        series1.add(new Day(4, MonthConstants.MARCH, 2002), 13984.3);\n        series1.add(new Day(5, MonthConstants.MARCH, 2002), 12999.4);\n        series1.add(new Day(6, MonthConstants.MARCH, 2002), 14274.3);\n        series1.add(new Day(7, MonthConstants.MARCH, 2002), 15943.5);\n        series1.add(new Day(8, MonthConstants.MARCH, 2002), 14845.3);\n        series1.add(new Day(9, MonthConstants.MARCH, 2002), 14645.4);\n        series1.add(new Day(10, MonthConstants.MARCH, 2002), 16234.6);\n        series1.add(new Day(11, MonthConstants.MARCH, 2002), 17232.3);\n        series1.add(new Day(12, MonthConstants.MARCH, 2002), 14232.2);\n        series1.add(new Day(13, MonthConstants.MARCH, 2002), 13102.2);\n        series1.add(new Day(14, MonthConstants.MARCH, 2002), 14230.2);\n        series1.add(new Day(15, MonthConstants.MARCH, 2002), 11235.2);\n\n        TimeSeriesCollection collection = new TimeSeriesCollection(series1);\n        return collection;\n\n    }\n",
        "begin_line": 837,
        "end_line": 860,
        "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 1.\n     ",
        "child_ranges": [
            "(line 840,col 9)-(line 840,col 67)",
            "(line 841,col 9)-(line 841,col 69)",
            "(line 842,col 9)-(line 842,col 69)",
            "(line 843,col 9)-(line 843,col 69)",
            "(line 844,col 9)-(line 844,col 69)",
            "(line 845,col 9)-(line 845,col 69)",
            "(line 846,col 9)-(line 846,col 69)",
            "(line 847,col 9)-(line 847,col 69)",
            "(line 848,col 9)-(line 848,col 69)",
            "(line 849,col 9)-(line 849,col 69)",
            "(line 850,col 9)-(line 850,col 70)",
            "(line 851,col 9)-(line 851,col 70)",
            "(line 852,col 9)-(line 852,col 70)",
            "(line 853,col 9)-(line 853,col 70)",
            "(line 854,col 9)-(line 854,col 70)",
            "(line 855,col 9)-(line 855,col 70)",
            "(line 857,col 9)-(line 857,col 76)",
            "(line 858,col 9)-(line 858,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset2()",
        "snippet": "    private XYDataset createDataset2() {\n        // create dataset 1...\n        XYSeries series = new XYSeries(\"Series 2\");\n        XYSeriesCollection collection = new XYSeriesCollection(series);\n        return collection;\n\n    }\n",
        "begin_line": 867,
        "end_line": 873,
        "comment": "\n     * Creates a sample dataset.\n     *\n     * @return A sample dataset.\n     ",
        "child_ranges": [
            "(line 869,col 9)-(line 869,col 51)",
            "(line 870,col 9)-(line 870,col 71)",
            "(line 871,col 9)-(line 871,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetRenderer()",
        "snippet": "    public void testSetRenderer() {\n        XYPlot plot = new XYPlot();\n        XYItemRenderer renderer = new XYLineAndShapeRenderer();\n        plot.setRenderer(renderer);\n        // now make a change to the renderer and see if it triggers a plot\n        // change event...\n        MyPlotChangeListener listener = new MyPlotChangeListener();\n        plot.addChangeListener(listener);\n        renderer.setSeriesPaint(0, Color.black);\n        assertTrue(listener.getEvent() != null);\n    }\n",
        "begin_line": 879,
        "end_line": 889,
        "comment": "\n     * A test for a bug where setting the renderer doesn't register the plot\n     * as a RendererChangeListener.\n     ",
        "child_ranges": [
            "(line 880,col 9)-(line 880,col 35)",
            "(line 881,col 9)-(line 881,col 63)",
            "(line 882,col 9)-(line 882,col 35)",
            "(line 885,col 9)-(line 885,col 67)",
            "(line 886,col 9)-(line 886,col 41)",
            "(line 887,col 9)-(line 887,col 48)",
            "(line 888,col 9)-(line 888,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveAnnotation()",
        "snippet": "    public void testRemoveAnnotation() {\n        XYPlot plot = new XYPlot();\n        XYTextAnnotation a1 = new XYTextAnnotation(\"X\", 1.0, 2.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"X\", 3.0, 4.0);\n        XYTextAnnotation a3 = new XYTextAnnotation(\"X\", 1.0, 2.0);\n        plot.addAnnotation(a1);\n        plot.addAnnotation(a2);\n        plot.addAnnotation(a3);\n        plot.removeAnnotation(a2);\n        XYTextAnnotation x = (XYTextAnnotation) plot.getAnnotations().get(0);\n        assertEquals(x, a1);\n        \n        // now remove a3, but since a3.equals(a1), this will in fact remove \n        // a1...\n        assertTrue(a1.equals(a3));\n        plot.removeAnnotation(a3);  // actually removes a1\n        x = (XYTextAnnotation) plot.getAnnotations().get(0);\n        assertEquals(x, a3); \n    }\n",
        "begin_line": 894,
        "end_line": 912,
        "comment": "\n     * Some checks for the removeAnnotation() method.\n     ",
        "child_ranges": [
            "(line 895,col 9)-(line 895,col 35)",
            "(line 896,col 9)-(line 896,col 66)",
            "(line 897,col 9)-(line 897,col 66)",
            "(line 898,col 9)-(line 898,col 66)",
            "(line 899,col 9)-(line 899,col 31)",
            "(line 900,col 9)-(line 900,col 31)",
            "(line 901,col 9)-(line 901,col 31)",
            "(line 902,col 9)-(line 902,col 34)",
            "(line 903,col 9)-(line 903,col 77)",
            "(line 904,col 9)-(line 904,col 28)",
            "(line 908,col 9)-(line 908,col 34)",
            "(line 909,col 9)-(line 909,col 34)",
            "(line 910,col 9)-(line 910,col 60)",
            "(line 911,col 9)-(line 911,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddDomainMarker()",
        "snippet": "    public void testAddDomainMarker() {\n        XYPlot plot = new XYPlot();\n        Marker m = new ValueMarker(1.0);\n        plot.addDomainMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearDomainMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }    \n",
        "begin_line": 917,
        "end_line": 927,
        "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
        "child_ranges": [
            "(line 918,col 9)-(line 918,col 35)",
            "(line 919,col 9)-(line 919,col 40)",
            "(line 920,col 9)-(line 920,col 32)",
            "(line 921,col 9)-(line 922,col 45)",
            "(line 923,col 9)-(line 923,col 45)",
            "(line 924,col 9)-(line 924,col 34)",
            "(line 925,col 9)-(line 925,col 78)",
            "(line 926,col 9)-(line 926,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddRangeMarker()",
        "snippet": "    public void testAddRangeMarker() {\n        XYPlot plot = new XYPlot();\n        Marker m = new ValueMarker(1.0);\n        plot.addRangeMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearRangeMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }\n",
        "begin_line": 932,
        "end_line": 942,
        "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
        "child_ranges": [
            "(line 933,col 9)-(line 933,col 35)",
            "(line 934,col 9)-(line 934,col 40)",
            "(line 935,col 9)-(line 935,col 31)",
            "(line 936,col 9)-(line 937,col 45)",
            "(line 938,col 9)-(line 938,col 45)",
            "(line 939,col 9)-(line 939,col 33)",
            "(line 940,col 9)-(line 940,col 78)",
            "(line 941,col 9)-(line 941,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.test1654215()",
        "snippet": "    public void test1654215() {\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(1, new XYLineAndShapeRenderer());\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 948,
        "end_line": 968,
        "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
        "child_ranges": [
            "(line 949,col 9)-(line 949,col 58)",
            "(line 950,col 9)-(line 951,col 71)",
            "(line 952,col 9)-(line 952,col 47)",
            "(line 953,col 9)-(line 953,col 58)",
            "(line 954,col 9)-(line 954,col 32)",
            "(line 955,col 9)-(line 966,col 9)",
            "(line 967,col 9)-(line 967,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines()",
        "snippet": "    public void testDrawRangeGridlines() {\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(null);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 974,
        "end_line": 994,
        "comment": "\n     * A test for drawing range grid lines when there is no primary renderer.\n     * In 1.0.4, this is throwing a NullPointerException.\n     ",
        "child_ranges": [
            "(line 975,col 9)-(line 975,col 58)",
            "(line 976,col 9)-(line 977,col 71)",
            "(line 978,col 9)-(line 978,col 47)",
            "(line 979,col 9)-(line 979,col 31)",
            "(line 980,col 9)-(line 980,col 32)",
            "(line 981,col 9)-(line 992,col 9)",
            "(line 993,col 9)-(line 993,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawSeriesWithZeroItems()",
        "snippet": "    public void testDrawSeriesWithZeroItems() {\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        dataset.addSeries(\"Series 1\", new double[][] {{1.0, 2.0}, {3.0, 4.0}});\n        dataset.addSeries(\"Series 2\", new double[][] {{}, {}});\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 1000,
        "end_line": 1020,
        "comment": "\n     * A test for drawing a plot where a series has zero items.  With\n     * JFreeChart 1.0.5+cvs this was throwing an exception at one point.\n     ",
        "child_ranges": [
            "(line 1001,col 9)-(line 1001,col 58)",
            "(line 1002,col 9)-(line 1002,col 79)",
            "(line 1003,col 9)-(line 1003,col 63)",
            "(line 1004,col 9)-(line 1005,col 71)",
            "(line 1006,col 9)-(line 1006,col 32)",
            "(line 1007,col 9)-(line 1018,col 9)",
            "(line 1019,col 9)-(line 1019,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveDomainMarker()",
        "snippet": "    public void testRemoveDomainMarker() {\n    \tXYPlot plot = new XYPlot();\n    \tassertFalse(plot.removeDomainMarker(new ValueMarker(0.5)));\n    }\n",
        "begin_line": 1026,
        "end_line": 1029,
        "comment": "\n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
        "child_ranges": [
            "(line 1027,col 6)-(line 1027,col 32)",
            "(line 1028,col 6)-(line 1028,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveRangeMarker()",
        "snippet": "    public void testRemoveRangeMarker() {\n    \tXYPlot plot = new XYPlot();\n    \tassertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));\n    }\n",
        "begin_line": 1035,
        "end_line": 1038,
        "comment": "\n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
        "child_ranges": [
            "(line 1036,col 6)-(line 1036,col 32)",
            "(line 1037,col 6)-(line 1037,col 63)"
        ]
    }
]