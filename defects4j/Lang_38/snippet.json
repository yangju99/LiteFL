[
    {
        "name": "FastDateFormat.parsePattern#577",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.parsePattern()",
        "snippet": "    protected List<Rule> parsePattern() {\n        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n        List<Rule> rules = new ArrayList<Rule>();\n\n        String[] ERAs = symbols.getEras();\n        String[] months = symbols.getMonths();\n        String[] shortMonths = symbols.getShortMonths();\n        String[] weekdays = symbols.getWeekdays();\n        String[] shortWeekdays = symbols.getShortWeekdays();\n        String[] AmPmStrings = symbols.getAmPmStrings();\n\n        int length = mPattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i = 0; i < length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(mPattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n\n            Rule rule;\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }\n",
        "begin_line": 577,
        "end_line": 698,
        "comment": "\n     * <p>Returns a list of Rules given a pattern.</p>\n     * \n     * @return a <code>List</code> of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.format#870",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer)",
        "snippet": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n        return applyRules(calendar, buf);\n    }\n",
        "begin_line": 870,
        "end_line": 876,
        "comment": "\n     * <p>Formats a <code>Calendar</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getInstance#181",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone)",
        "snippet": "    public static FastDateFormat getInstance(String pattern, TimeZone timeZone) {\n        return getInstance(pattern, timeZone, null);\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1298",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 100) {\n                for (int i = mSize; --i >= 2; ) {\n                    buffer.append('0');\n                }\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            } else {\n                int digits;\n                if (value < 1000) {\n                    digits = 3;\n                } else {\n                    Validate.isTrue(value > -1, \"Negative values should not be possible\", value);\n                    digits = Integer.toString(value).length();\n                }\n                for (int i = mSize; --i >= digits; ) {\n                    buffer.append('0');\n                }\n                buffer.append(Integer.toString(value));\n            }\n        }\n",
        "begin_line": 1298,
        "end_line": 1318,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1422",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);\n        }\n",
        "begin_line": 1422,
        "end_line": 1424,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1429",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            buffer.append((char)(value / 10 + '0'));\n            buffer.append((char)(value % 10 + '0'));\n        }\n",
        "begin_line": 1429,
        "end_line": 1432,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    },
    {
        "name": "Validate.isTrue#120",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/Validate.java",
        "class_name": "org.apache.commons.lang3.Validate",
        "signature": "org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, long)",
        "snippet": "    public static void isTrue(boolean expression, String message, long value) {\n        if (expression == false) {\n            throw new IllegalArgumentException(String.format(message, Long.valueOf(value)));\n        }\n    }\n",
        "begin_line": 120,
        "end_line": 124,
        "comment": "\n     * <p>Validate that the argument condition is <code>true</code>; otherwise \n     * throwing an exception with the specified message. This method is useful when\n     * validating according to an arbitrary boolean expression, such as validating a \n     * primitive number or using your own custom validation expression.</p>\n     *\n     * <pre>Validate.isTrue(i > 0.0, \"The value must be greater than zero: %d\", i);</pre>\n     *\n     * <p>For performance reasons, the long value is passed as a separate parameter and\n     * appended to the exception message only in the case of an error.</p>\n     * \n     * @param expression the boolean expression to check \n     * @param message the exception message if invalid\n     * @param value the value to append to the message when invalid\n     * @throws IllegalArgumentException if expression is <code>false</code>\n     * @see #isTrue(boolean)\n     * @see #isTrue(boolean, String, double)\n     * @see #isTrue(boolean, String, Object)\n     * @see #isTrue(boolean, String, Object...)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1346",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(mField));\n        }\n",
        "begin_line": 1346,
        "end_line": 1348,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1353",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 100) {\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            } else {\n                buffer.append(Integer.toString(value));\n            }\n        }\n",
        "begin_line": 1353,
        "end_line": 1360,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1291",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(mField));\n        }\n",
        "begin_line": 1291,
        "end_line": 1293,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.appendTo#1097",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            buffer.append(mValue);\n        }\n",
        "begin_line": 1097,
        "end_line": 1099,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.parseToken#707",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.parseToken(java.lang.String, int[])",
        "snippet": "    protected String parseToken(String pattern, int[] indexRef) {\n        StringBuilder buf = new StringBuilder();\n\n        int i = indexRef[0];\n        int length = pattern.length();\n\n        char c = pattern.charAt(i);\n        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n            // Scan a run of the same character, which indicates a time\n            // pattern.\n            buf.append(c);\n\n            while (i + 1 < length) {\n                char peek = pattern.charAt(i + 1);\n                if (peek == c) {\n                    buf.append(c);\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } else {\n            // This will identify token as text.\n            buf.append('\\'');\n\n            boolean inLiteral = false;\n\n            for (; i < length; i++) {\n                c = pattern.charAt(i);\n\n                if (c == '\\'') {\n                    if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n                        // '' is treated as escaped '\n                        i++;\n                        buf.append(c);\n                    } else {\n                        inLiteral = !inLiteral;\n                    }\n                } else if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {\n                    i--;\n                    break;\n                } else {\n                    buf.append(c);\n                }\n            }\n        }\n\n        indexRef[0] = i;\n        return buf.toString();\n    }\n",
        "begin_line": 707,
        "end_line": 757,
        "comment": "\n     * <p>Performs the parsing of tokens.</p>\n     * \n     * @param pattern  the pattern\n     * @param indexRef  index references\n     * @return parsed token\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.format#831",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar)",
        "snippet": "    public String format(Calendar calendar) {\n        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n    }\n",
        "begin_line": 831,
        "end_line": 833,
        "comment": "\n     * <p>Formats a <code>Calendar</code> object.</p>\n     * \n     * @param calendar  the calendar to format\n     * @return the formatted string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.applyRules#886",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer)",
        "snippet": "    protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {\n        Rule[] rules = mRules;\n        int len = mRules.length;\n        for (int i = 0; i < len; i++) {\n            rules[i].appendTo(buf, calendar);\n        }\n        return buf;\n    }\n",
        "begin_line": 886,
        "end_line": 893,
        "comment": "\n     * <p>Performs the formatting by applying the rules to the\n     * specified calendar.</p>\n     * \n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.FastDateFormat#534",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n        super();\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"The pattern must not be null\");\n        }\n        mPattern = pattern;\n        \n        mTimeZoneForced = (timeZone != null);\n        if (timeZone == null) {\n            timeZone = TimeZone.getDefault();\n        }\n        mTimeZone = timeZone;\n        \n        mLocaleForced = (locale != null);\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        mLocale = locale;\n    }\n",
        "begin_line": 534,
        "end_line": 552,
        "comment": "\n     * <p>Constructs a new FastDateFormat.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  time zone to use, <code>null</code> means use\n     *  default for <code>Date</code> and value within for\n     *  <code>Calendar</code>\n     * @param locale  locale, <code>null</code> means use system\n     *  default\n     * @throws IllegalArgumentException if pattern is invalid or\n     *  <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1562
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TwoDigitMonthField#1408",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField.TwoDigitMonthField()",
        "snippet": "        TwoDigitMonthField() {\n            super();\n        }\n",
        "begin_line": 1408,
        "end_line": 1410,
        "comment": "\n         * Constructs an instance of <code>TwoDigitMonthField</code>.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1415",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }\n",
        "begin_line": 1415,
        "end_line": 1417,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.TwoDigitNumberField#1332",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField.TwoDigitNumberField(int)",
        "snippet": "        TwoDigitNumberField(int field) {\n            mField = field;\n        }\n",
        "begin_line": 1332,
        "end_line": 1334,
        "comment": "\n         * Constructs an instance of <code>TwoDigitNumberField</code> with the specified field.\n         * \n         * @param field the field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1339",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }\n",
        "begin_line": 1339,
        "end_line": 1341,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.PaddedNumberField#1272",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField.PaddedNumberField(int, int)",
        "snippet": "        PaddedNumberField(int field, int size) {\n            if (size < 3) {\n                // Should use UnpaddedNumberField or TwoDigitNumberField.\n                throw new IllegalArgumentException();\n            }\n            mField = field;\n            mSize = size;\n        }\n",
        "begin_line": 1272,
        "end_line": 1279,
        "comment": "\n         * Constructs an instance of <code>PaddedNumberField</code>.\n         * \n         * @param field the field\n         * @param size size of the output field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1284",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 4;\n        }\n",
        "begin_line": 1284,
        "end_line": 1286,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.selectNumberRule#766",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int)",
        "snippet": "    protected NumberRule selectNumberRule(int field, int padding) {\n        switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }\n    }\n",
        "begin_line": 766,
        "end_line": 775,
        "comment": "\n     * <p>Gets an appropriate rule for the padding required.</p>\n     * \n     * @param field  the field to get a rule for\n     * @param padding  the padding required\n     * @return a new rule with the correct padding\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.CharacterLiteral#1083",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral.CharacterLiteral(char)",
        "snippet": "        CharacterLiteral(char value) {\n            mValue = value;\n        }\n",
        "begin_line": 1083,
        "end_line": 1085,
        "comment": "\n         * Constructs a new instance of <code>CharacterLiteral</code>\n         * to hold the specified value.\n         * \n         * @param value the character literal\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1491
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1090",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 1;\n        }\n",
        "begin_line": 1090,
        "end_line": 1092,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang3.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.1491
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getInstance#212",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {\n        FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);\n        FastDateFormat format = cInstanceCache.get(emptyFormat);\n        if (format == null) {\n            format = emptyFormat;\n            format.init();  // convert shell format into usable one\n            cInstanceCache.put(format, format);  // this is OK!\n        }\n        return format;\n    }\n",
        "begin_line": 212,
        "end_line": 221,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1491
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.init#557",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.init()",
        "snippet": "    protected void init() {\n        List<Rule> rulesList = parsePattern();\n        mRules = rulesList.toArray(new Rule[rulesList.size()]);\n\n        int len = 0;\n        for (int i=mRules.length; --i >= 0; ) {\n            len += mRules[i].estimateLength();\n        }\n\n        mMaxLengthEstimate = len;\n    }\n",
        "begin_line": 557,
        "end_line": 567,
        "comment": "\n     * <p>Initializes the instance for first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1491
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.hashCode#1000",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n        int total = 0;\n        total += mPattern.hashCode();\n        total += mTimeZone.hashCode();\n        total += (mTimeZoneForced ? 1 : 0);\n        total += mLocale.hashCode();\n        total += (mLocaleForced ? 1 : 0);\n        return total;\n    }\n",
        "begin_line": 1000,
        "end_line": 1009,
        "comment": "\n     * <p>Returns a hashcode compatible with equals.</p>\n     * \n     * @return a hashcode compatible with equals\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1491
        },
        "num_failing_tests": 1
    }
]