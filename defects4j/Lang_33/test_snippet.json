[
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.ClassUtilsTest(java.lang.String)",
        "snippet": "    public ClassUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new ClassUtils());\n        Constructor<?>[] cons = ClassUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(ClassUtils.class.getModifiers()));\n    }\n",
        "begin_line": 50,
        "end_line": 57,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 40)",
            "(line 52,col 9)-(line 52,col 75)",
            "(line 53,col 9)-(line 53,col 37)",
            "(line 54,col 9)-(line 54,col 70)",
            "(line 55,col 9)-(line 55,col 79)",
            "(line 56,col 9)-(line 56,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Object()",
        "snippet": "    public void test_getShortClassName_Object() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(new Inner(), \"<null>\"));\n        assertEquals(\"String\", ClassUtils.getShortClassName(\"hello\", \"<null>\"));\n        assertEquals(\"<null>\", ClassUtils.getShortClassName(null, \"<null>\"));\n    }\n",
        "begin_line": 60,
        "end_line": 65,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 93)",
            "(line 62,col 9)-(line 62,col 98)",
            "(line 63,col 9)-(line 63,col 80)",
            "(line 64,col 9)-(line 64,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Class()",
        "snippet": "    public void test_getShortClassName_Class() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getShortClassName((Class<?>) null));\n\n        // LANG-535\n        assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));\n        assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));\n\n        // Primitives\n        assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));\n        assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));\n        assertEquals(\"char\", ClassUtils.getShortClassName(char.class));\n        assertEquals(\"short\", ClassUtils.getShortClassName(short.class));\n        assertEquals(\"int\", ClassUtils.getShortClassName(int.class));\n        assertEquals(\"long\", ClassUtils.getShortClassName(long.class));\n        assertEquals(\"float\", ClassUtils.getShortClassName(float.class));\n        assertEquals(\"double\", ClassUtils.getShortClassName(double.class));\n\n        // Primitive Arrays\n        assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));\n        assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));\n        assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));\n        assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));\n        assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));\n        assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));\n        assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));\n        assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));\n\n        // Arrays of arrays of ...\n        assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));\n        assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));\n        assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));\n    }\n",
        "begin_line": 67,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 83)",
            "(line 69,col 9)-(line 69,col 81)",
            "(line 70,col 9)-(line 70,col 72)",
            "(line 73,col 9)-(line 73,col 79)",
            "(line 74,col 9)-(line 74,col 85)",
            "(line 77,col 9)-(line 77,col 77)",
            "(line 78,col 9)-(line 78,col 71)",
            "(line 79,col 9)-(line 79,col 71)",
            "(line 80,col 9)-(line 80,col 73)",
            "(line 81,col 9)-(line 81,col 69)",
            "(line 82,col 9)-(line 82,col 71)",
            "(line 83,col 9)-(line 83,col 73)",
            "(line 84,col 9)-(line 84,col 75)",
            "(line 87,col 9)-(line 87,col 81)",
            "(line 88,col 9)-(line 88,col 75)",
            "(line 89,col 9)-(line 89,col 75)",
            "(line 90,col 9)-(line 90,col 77)",
            "(line 91,col 9)-(line 91,col 73)",
            "(line 92,col 9)-(line 92,col 75)",
            "(line 93,col 9)-(line 93,col 77)",
            "(line 94,col 9)-(line 94,col 79)",
            "(line 97,col 9)-(line 97,col 83)",
            "(line 98,col 9)-(line 98,col 87)",
            "(line 99,col 9)-(line 99,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_String()",
        "snippet": "    public void test_getShortClassName_String() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class.getName()));\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class.getName()));\n        assertEquals(\"\", ClassUtils.getShortClassName((String) null));\n        assertEquals(\"\", ClassUtils.getShortClassName(\"\"));\n    }\n",
        "begin_line": 102,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 93)",
            "(line 104,col 9)-(line 104,col 91)",
            "(line 105,col 9)-(line 105,col 70)",
            "(line 106,col 9)-(line 106,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Object()",
        "snippet": "    public void test_getPackageName_Object() {\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new Inner(), \"<null>\"));\n        assertEquals(\"<null>\", ClassUtils.getPackageName(null, \"<null>\"));\n    }\n",
        "begin_line": 110,
        "end_line": 114,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 104)",
            "(line 112,col 9)-(line 112,col 99)",
            "(line 113,col 9)-(line 113,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Class()",
        "snippet": "    public void test_getPackageName_Class() {\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getPackageName((Class<?>)null));\n\n        // LANG-535\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));\n\n        // Primitive Arrays\n        assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(byte[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(char[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(short[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(int[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(long[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(float[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(double[].class));\n\n        // Arrays of arrays of ...\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));\n    }\n",
        "begin_line": 116,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 75)",
            "(line 118,col 9)-(line 118,col 78)",
            "(line 119,col 9)-(line 119,col 68)",
            "(line 122,col 9)-(line 122,col 77)",
            "(line 125,col 9)-(line 125,col 69)",
            "(line 126,col 9)-(line 126,col 66)",
            "(line 127,col 9)-(line 127,col 66)",
            "(line 128,col 9)-(line 128,col 67)",
            "(line 129,col 9)-(line 129,col 65)",
            "(line 130,col 9)-(line 130,col 66)",
            "(line 131,col 9)-(line 131,col 67)",
            "(line 132,col 9)-(line 132,col 68)",
            "(line 135,col 9)-(line 135,col 79)",
            "(line 136,col 9)-(line 136,col 81)",
            "(line 137,col 9)-(line 137,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_String()",
        "snippet": "    public void test_getPackageName_String() {\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(ClassUtils.class.getName()));\n        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class.getName()));\n        assertEquals(\"\", ClassUtils.getPackageName((String)null));\n        assertEquals(\"\", ClassUtils.getPackageName(\"\"));\n    }\n",
        "begin_line": 140,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 104)",
            "(line 142,col 9)-(line 142,col 88)",
            "(line 143,col 9)-(line 143,col 66)",
            "(line 144,col 9)-(line 144,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getAllSuperclasses_Class()",
        "snippet": "    public void test_getAllSuperclasses_Class() {\n        List<?> list = ClassUtils.getAllSuperclasses(CY.class);\n        assertEquals(2, list.size());\n        assertEquals(CX.class, list.get(0));\n        assertEquals(Object.class, list.get(1));\n\n        assertEquals(null, ClassUtils.getAllSuperclasses(null));\n    }\n",
        "begin_line": 148,
        "end_line": 155,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 63)",
            "(line 150,col 9)-(line 150,col 37)",
            "(line 151,col 9)-(line 151,col 44)",
            "(line 152,col 9)-(line 152,col 48)",
            "(line 154,col 9)-(line 154,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getAllInterfaces_Class()",
        "snippet": "    public void test_getAllInterfaces_Class() {\n        List<?> list = ClassUtils.getAllInterfaces(CY.class);\n        assertEquals(6, list.size());\n        assertEquals(IB.class, list.get(0));\n        assertEquals(IC.class, list.get(1));\n        assertEquals(ID.class, list.get(2));\n        assertEquals(IE.class, list.get(3));\n        assertEquals(IF.class, list.get(4));\n        assertEquals(IA.class, list.get(5));\n\n        assertEquals(null, ClassUtils.getAllInterfaces(null));\n    }\n",
        "begin_line": 157,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 61)",
            "(line 159,col 9)-(line 159,col 37)",
            "(line 160,col 9)-(line 160,col 44)",
            "(line 161,col 9)-(line 161,col 44)",
            "(line 162,col 9)-(line 162,col 44)",
            "(line 163,col 9)-(line 163,col 44)",
            "(line 164,col 9)-(line 164,col 44)",
            "(line 165,col 9)-(line 165,col 44)",
            "(line 167,col 9)-(line 167,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_convertClassNamesToClasses_List()",
        "snippet": "    public void test_convertClassNamesToClasses_List() {\n        List<String> list = new ArrayList<String>();\n        List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list);\n        assertEquals(0, result.size());\n\n        list.add(\"java.lang.String\");\n        list.add(\"java.lang.xxx\");\n        list.add(\"java.lang.Object\");\n        result = ClassUtils.convertClassNamesToClasses(list);\n        assertEquals(3, result.size());\n        assertEquals(String.class, result.get(0));\n        assertEquals(null, result.get(1));\n        assertEquals(Object.class, result.get(2));\n\n        @SuppressWarnings(\"unchecked\") // test what happens when non-gneric code adds wrong type of element\n        List<Object> olist = (List<Object>)(List<?>)list;\n        olist.add(new Object());\n        try {\n            ClassUtils.convertClassNamesToClasses(list);\n            fail(\"Should not have been able to convert list\");\n        } catch (ClassCastException expected) {}\n        assertEquals(null, ClassUtils.convertClassNamesToClasses(null));\n    }\n",
        "begin_line": 188,
        "end_line": 210,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 52)",
            "(line 190,col 9)-(line 190,col 76)",
            "(line 191,col 9)-(line 191,col 39)",
            "(line 193,col 9)-(line 193,col 37)",
            "(line 194,col 9)-(line 194,col 34)",
            "(line 195,col 9)-(line 195,col 37)",
            "(line 196,col 9)-(line 196,col 61)",
            "(line 197,col 9)-(line 197,col 39)",
            "(line 198,col 9)-(line 198,col 50)",
            "(line 199,col 9)-(line 199,col 42)",
            "(line 200,col 9)-(line 200,col 50)",
            "(line 202,col 9)-(line 203,col 57)",
            "(line 204,col 9)-(line 204,col 32)",
            "(line 205,col 9)-(line 208,col 48)",
            "(line 209,col 9)-(line 209,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_convertClassesToClassNames_List()",
        "snippet": "    public void test_convertClassesToClassNames_List() {\n        List<Class<?>> list = new ArrayList<Class<?>>();\n        List<String> result = ClassUtils.convertClassesToClassNames(list);\n        assertEquals(0, result.size());\n\n        list.add(String.class);\n        list.add(null);\n        list.add(Object.class);\n        result = ClassUtils.convertClassesToClassNames(list);\n        assertEquals(3, result.size());\n        assertEquals(\"java.lang.String\", result.get(0));\n        assertEquals(null, result.get(1));\n        assertEquals(\"java.lang.Object\", result.get(2));\n\n        @SuppressWarnings(\"unchecked\") // test what happens when non-gneric code adds wrong type of element\n        List<Object> olist = (List<Object>)(List<?>)list;\n        olist.add(new Object());\n        try {\n            ClassUtils.convertClassesToClassNames(list);\n            fail(\"Should not have been able to convert list\");\n        } catch (ClassCastException expected) {}\n        assertEquals(null, ClassUtils.convertClassesToClassNames(null));\n    }\n",
        "begin_line": 212,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 56)",
            "(line 214,col 9)-(line 214,col 74)",
            "(line 215,col 9)-(line 215,col 39)",
            "(line 217,col 9)-(line 217,col 31)",
            "(line 218,col 9)-(line 218,col 23)",
            "(line 219,col 9)-(line 219,col 31)",
            "(line 220,col 9)-(line 220,col 61)",
            "(line 221,col 9)-(line 221,col 39)",
            "(line 222,col 9)-(line 222,col 56)",
            "(line 223,col 9)-(line 223,col 42)",
            "(line 224,col 9)-(line 224,col 56)",
            "(line 226,col 9)-(line 227,col 57)",
            "(line 228,col 9)-(line 228,col 32)",
            "(line 229,col 9)-(line 232,col 48)",
            "(line 233,col 9)-(line 233,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isInnerClass_Class()",
        "snippet": "    public void test_isInnerClass_Class() {\n        assertEquals(true, ClassUtils.isInnerClass(Inner.class));\n        assertEquals(true, ClassUtils.isInnerClass(Map.Entry.class));\n        assertEquals(true, ClassUtils.isInnerClass(new Cloneable() {\n        }.getClass()));\n        assertEquals(false, ClassUtils.isInnerClass(this.getClass()));\n        assertEquals(false, ClassUtils.isInnerClass(String.class));\n        assertEquals(false, ClassUtils.isInnerClass(null));\n    }\n",
        "begin_line": 237,
        "end_line": 245,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 65)",
            "(line 239,col 9)-(line 239,col 69)",
            "(line 240,col 9)-(line 241,col 23)",
            "(line 242,col 9)-(line 242,col 70)",
            "(line 243,col 9)-(line 243,col 67)",
            "(line 244,col 9)-(line 244,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray()",
        "snippet": "    public void test_isAssignable_ClassArray_ClassArray() throws Exception {\n        Class<?>[] array2 = new Class[] {Object.class, Object.class};\n        Class<?>[] array1 = new Class[] {Object.class};\n        Class<?>[] array1s = new Class[] {String.class};\n        Class<?>[] array0 = new Class[] {};\n        Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\n        Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\n\n        assertFalse(ClassUtils.isAssignable(array1, array2));\n        assertFalse(ClassUtils.isAssignable(null, array2));\n        assertTrue(ClassUtils.isAssignable(null, array0));\n        assertTrue(ClassUtils.isAssignable(array0, array0));\n        assertTrue(ClassUtils.isAssignable(array0, null));\n        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null));\n\n        assertFalse(ClassUtils.isAssignable(array1, array1s));\n        assertTrue(ClassUtils.isAssignable(array1s, array1s));\n        assertTrue(ClassUtils.isAssignable(array1s, array1));\n\n        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n\n        assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers));\n        assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives));\n        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1));\n        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1));\n        assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2));\n        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2));\n    }\n",
        "begin_line": 248,
        "end_line": 275,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 69)",
            "(line 250,col 9)-(line 250,col 55)",
            "(line 251,col 9)-(line 251,col 56)",
            "(line 252,col 9)-(line 252,col 43)",
            "(line 253,col 9)-(line 253,col 68)",
            "(line 254,col 9)-(line 254,col 68)",
            "(line 256,col 9)-(line 256,col 61)",
            "(line 257,col 9)-(line 257,col 59)",
            "(line 258,col 9)-(line 258,col 58)",
            "(line 259,col 9)-(line 259,col 60)",
            "(line 260,col 9)-(line 260,col 58)",
            "(line 261,col 9)-(line 261,col 76)",
            "(line 263,col 9)-(line 263,col 62)",
            "(line 264,col 9)-(line 264,col 62)",
            "(line 265,col 9)-(line 265,col 61)",
            "(line 267,col 9)-(line 267,col 68)",
            "(line 269,col 9)-(line 269,col 90)",
            "(line 270,col 9)-(line 270,col 90)",
            "(line 271,col 9)-(line 271,col 70)",
            "(line 272,col 9)-(line 272,col 68)",
            "(line 273,col 9)-(line 273,col 83)",
            "(line 274,col 9)-(line 274,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray_Autoboxing()",
        "snippet": "    public void test_isAssignable_ClassArray_ClassArray_Autoboxing() throws Exception {\n        Class<?>[] array2 = new Class[] {Object.class, Object.class};\n        Class<?>[] array1 = new Class[] {Object.class};\n        Class<?>[] array1s = new Class[] {String.class};\n        Class<?>[] array0 = new Class[] {};\n        Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\n        Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\n\n        assertFalse(ClassUtils.isAssignable(array1, array2, true));\n        assertFalse(ClassUtils.isAssignable(null, array2, true));\n        assertTrue(ClassUtils.isAssignable(null, array0, true));\n        assertTrue(ClassUtils.isAssignable(array0, array0, true));\n        assertTrue(ClassUtils.isAssignable(array0, null, true));\n        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, true));\n\n        assertFalse(ClassUtils.isAssignable(array1, array1s, true));\n        assertTrue(ClassUtils.isAssignable(array1s, array1s, true));\n        assertTrue(ClassUtils.isAssignable(array1s, array1, true));\n\n        assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, true));\n        assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, true));\n        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, true));\n        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, true));\n        assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2, true));\n        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, true));\n    }\n",
        "begin_line": 277,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 278,col 9)-(line 278,col 69)",
            "(line 279,col 9)-(line 279,col 55)",
            "(line 280,col 9)-(line 280,col 56)",
            "(line 281,col 9)-(line 281,col 43)",
            "(line 282,col 9)-(line 282,col 68)",
            "(line 283,col 9)-(line 283,col 68)",
            "(line 285,col 9)-(line 285,col 67)",
            "(line 286,col 9)-(line 286,col 65)",
            "(line 287,col 9)-(line 287,col 64)",
            "(line 288,col 9)-(line 288,col 66)",
            "(line 289,col 9)-(line 289,col 64)",
            "(line 290,col 9)-(line 290,col 82)",
            "(line 292,col 9)-(line 292,col 68)",
            "(line 293,col 9)-(line 293,col 68)",
            "(line 294,col 9)-(line 294,col 67)",
            "(line 296,col 9)-(line 296,col 82)",
            "(line 297,col 9)-(line 297,col 82)",
            "(line 298,col 9)-(line 298,col 76)",
            "(line 299,col 9)-(line 299,col 74)",
            "(line 300,col 9)-(line 300,col 75)",
            "(line 301,col 9)-(line 301,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray_NoAutoboxing()",
        "snippet": "    public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception {\n        Class<?>[] array2 = new Class[] {Object.class, Object.class};\n        Class<?>[] array1 = new Class[] {Object.class};\n        Class<?>[] array1s = new Class[] {String.class};\n        Class<?>[] array0 = new Class[] {};\n        Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\n        Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\n\n        assertFalse(ClassUtils.isAssignable(array1, array2, false));\n        assertFalse(ClassUtils.isAssignable(null, array2, false));\n        assertTrue(ClassUtils.isAssignable(null, array0, false));\n        assertTrue(ClassUtils.isAssignable(array0, array0, false));\n        assertTrue(ClassUtils.isAssignable(array0, null, false));\n        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false));\n\n        assertFalse(ClassUtils.isAssignable(array1, array1s, false));\n        assertTrue(ClassUtils.isAssignable(array1s, array1s, false));\n        assertTrue(ClassUtils.isAssignable(array1s, array1, false));\n\n        assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false));\n        assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false));\n        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false));\n        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false));\n        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false));\n        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false));\n    }\n",
        "begin_line": 304,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 69)",
            "(line 306,col 9)-(line 306,col 55)",
            "(line 307,col 9)-(line 307,col 56)",
            "(line 308,col 9)-(line 308,col 43)",
            "(line 309,col 9)-(line 309,col 68)",
            "(line 310,col 9)-(line 310,col 68)",
            "(line 312,col 9)-(line 312,col 68)",
            "(line 313,col 9)-(line 313,col 66)",
            "(line 314,col 9)-(line 314,col 65)",
            "(line 315,col 9)-(line 315,col 67)",
            "(line 316,col 9)-(line 316,col 65)",
            "(line 317,col 9)-(line 317,col 83)",
            "(line 319,col 9)-(line 319,col 69)",
            "(line 320,col 9)-(line 320,col 69)",
            "(line 321,col 9)-(line 321,col 68)",
            "(line 323,col 9)-(line 323,col 84)",
            "(line 324,col 9)-(line 324,col 84)",
            "(line 325,col 9)-(line 325,col 77)",
            "(line 326,col 9)-(line 326,col 75)",
            "(line 327,col 9)-(line 327,col 74)",
            "(line 328,col 9)-(line 328,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable()",
        "snippet": "    public void test_isAssignable() throws Exception {\n        assertFalse(ClassUtils.isAssignable((Class<?>) null, null));\n        assertFalse(ClassUtils.isAssignable(String.class, null));\n\n        assertTrue(ClassUtils.isAssignable(null, Object.class));\n        assertTrue(ClassUtils.isAssignable(null, Integer.class));\n        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));\n        assertTrue(ClassUtils.isAssignable(String.class, Object.class));\n        assertTrue(ClassUtils.isAssignable(String.class, String.class));\n        assertFalse(ClassUtils.isAssignable(Object.class, String.class));\n\n        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n\n        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));\n    }\n",
        "begin_line": 331,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 68)",
            "(line 333,col 9)-(line 333,col 65)",
            "(line 335,col 9)-(line 335,col 64)",
            "(line 336,col 9)-(line 336,col 65)",
            "(line 337,col 9)-(line 337,col 65)",
            "(line 338,col 9)-(line 338,col 72)",
            "(line 339,col 9)-(line 339,col 72)",
            "(line 340,col 9)-(line 340,col 73)",
            "(line 342,col 9)-(line 342,col 68)",
            "(line 344,col 9)-(line 344,col 87)",
            "(line 345,col 9)-(line 345,col 86)",
            "(line 346,col 9)-(line 346,col 87)",
            "(line 347,col 9)-(line 347,col 87)",
            "(line 348,col 9)-(line 348,col 72)",
            "(line 349,col 9)-(line 349,col 74)",
            "(line 350,col 9)-(line 350,col 87)",
            "(line 351,col 9)-(line 351,col 86)",
            "(line 352,col 9)-(line 352,col 87)",
            "(line 353,col 9)-(line 353,col 87)",
            "(line 354,col 9)-(line 354,col 72)",
            "(line 355,col 9)-(line 355,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Autoboxing()",
        "snippet": "    public void test_isAssignable_Autoboxing() throws Exception {\n        assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true));\n        assertFalse(ClassUtils.isAssignable(String.class, null, true));\n\n        assertTrue(ClassUtils.isAssignable(null, Object.class, true));\n        assertTrue(ClassUtils.isAssignable(null, Integer.class, true));\n        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true));\n        assertTrue(ClassUtils.isAssignable(String.class, Object.class, true));\n        assertTrue(ClassUtils.isAssignable(String.class, String.class, true));\n        assertFalse(ClassUtils.isAssignable(Object.class, String.class, true));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class, true));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Object.class, true));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, true));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));\n    }\n",
        "begin_line": 358,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 74)",
            "(line 360,col 9)-(line 360,col 71)",
            "(line 362,col 9)-(line 362,col 70)",
            "(line 363,col 9)-(line 363,col 71)",
            "(line 364,col 9)-(line 364,col 71)",
            "(line 365,col 9)-(line 365,col 78)",
            "(line 366,col 9)-(line 366,col 78)",
            "(line 367,col 9)-(line 367,col 79)",
            "(line 368,col 9)-(line 368,col 79)",
            "(line 369,col 9)-(line 369,col 78)",
            "(line 370,col 9)-(line 370,col 79)",
            "(line 371,col 9)-(line 371,col 79)",
            "(line 372,col 9)-(line 372,col 78)",
            "(line 373,col 9)-(line 373,col 80)",
            "(line 374,col 9)-(line 374,col 79)",
            "(line 375,col 9)-(line 375,col 79)",
            "(line 376,col 9)-(line 376,col 79)",
            "(line 377,col 9)-(line 377,col 78)",
            "(line 378,col 9)-(line 378,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_NoAutoboxing()",
        "snippet": "    public void test_isAssignable_NoAutoboxing() throws Exception {\n        assertFalse(ClassUtils.isAssignable((Class<?>) null, null, false));\n        assertFalse(ClassUtils.isAssignable(String.class, null, false));\n\n        assertTrue(ClassUtils.isAssignable(null, Object.class, false));\n        assertTrue(ClassUtils.isAssignable(null, Integer.class, false));\n        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, false));\n        assertTrue(ClassUtils.isAssignable(String.class, Object.class, false));\n        assertTrue(ClassUtils.isAssignable(String.class, String.class, false));\n        assertFalse(ClassUtils.isAssignable(Object.class, String.class, false));\n        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class, false));\n        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Object.class, false));\n        assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE, false));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, false));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, false));\n        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, false));\n        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Object.class, false));\n        assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, false));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, false));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, false));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, false));\n    }\n",
        "begin_line": 381,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 75)",
            "(line 383,col 9)-(line 383,col 72)",
            "(line 385,col 9)-(line 385,col 71)",
            "(line 386,col 9)-(line 386,col 72)",
            "(line 387,col 9)-(line 387,col 72)",
            "(line 388,col 9)-(line 388,col 79)",
            "(line 389,col 9)-(line 389,col 79)",
            "(line 390,col 9)-(line 390,col 80)",
            "(line 391,col 9)-(line 391,col 81)",
            "(line 392,col 9)-(line 392,col 80)",
            "(line 393,col 9)-(line 393,col 81)",
            "(line 394,col 9)-(line 394,col 79)",
            "(line 395,col 9)-(line 395,col 81)",
            "(line 396,col 9)-(line 396,col 81)",
            "(line 397,col 9)-(line 397,col 80)",
            "(line 398,col 9)-(line 398,col 81)",
            "(line 399,col 9)-(line 399,col 80)",
            "(line 400,col 9)-(line 400,col 79)",
            "(line 401,col 9)-(line 401,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Widening()",
        "snippet": "    public void test_isAssignable_Widening() throws Exception {\n        // test byte conversions\n        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.TYPE, Character.TYPE));\n        assertTrue(\"byte -> byte\", ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE));\n        assertTrue(\"byte -> short\", ClassUtils.isAssignable(Byte.TYPE, Short.TYPE));\n        assertTrue(\"byte -> int\", ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE));\n        assertTrue(\"byte -> long\", ClassUtils.isAssignable(Byte.TYPE, Long.TYPE));\n        assertTrue(\"byte -> float\", ClassUtils.isAssignable(Byte.TYPE, Float.TYPE));\n        assertTrue(\"byte -> double\", ClassUtils.isAssignable(Byte.TYPE, Double.TYPE));\n        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE));\n\n        // test short conversions\n        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.TYPE, Character.TYPE));\n        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.TYPE, Byte.TYPE));\n        assertTrue(\"short -> short\", ClassUtils.isAssignable(Short.TYPE, Short.TYPE));\n        assertTrue(\"short -> int\", ClassUtils.isAssignable(Short.TYPE, Integer.TYPE));\n        assertTrue(\"short -> long\", ClassUtils.isAssignable(Short.TYPE, Long.TYPE));\n        assertTrue(\"short -> float\", ClassUtils.isAssignable(Short.TYPE, Float.TYPE));\n        assertTrue(\"short -> double\", ClassUtils.isAssignable(Short.TYPE, Double.TYPE));\n        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE));\n\n        // test char conversions\n        assertTrue(\"char -> char\", ClassUtils.isAssignable(Character.TYPE, Character.TYPE));\n        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.TYPE, Byte.TYPE));\n        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.TYPE, Short.TYPE));\n        assertTrue(\"char -> int\", ClassUtils.isAssignable(Character.TYPE, Integer.TYPE));\n        assertTrue(\"char -> long\", ClassUtils.isAssignable(Character.TYPE, Long.TYPE));\n        assertTrue(\"char -> float\", ClassUtils.isAssignable(Character.TYPE, Float.TYPE));\n        assertTrue(\"char -> double\", ClassUtils.isAssignable(Character.TYPE, Double.TYPE));\n        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE));\n\n        // test int conversions\n        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.TYPE, Character.TYPE));\n        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE));\n        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.TYPE, Short.TYPE));\n        assertTrue(\"int -> int\", ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n        assertTrue(\"int -> long\", ClassUtils.isAssignable(Integer.TYPE, Long.TYPE));\n        assertTrue(\"int -> float\", ClassUtils.isAssignable(Integer.TYPE, Float.TYPE));\n        assertTrue(\"int -> double\", ClassUtils.isAssignable(Integer.TYPE, Double.TYPE));\n        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE));\n\n        // test long conversions\n        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.TYPE, Character.TYPE));\n        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.TYPE, Byte.TYPE));\n        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.TYPE, Short.TYPE));\n        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.TYPE, Integer.TYPE));\n        assertTrue(\"long -> long\", ClassUtils.isAssignable(Long.TYPE, Long.TYPE));\n        assertTrue(\"long -> float\", ClassUtils.isAssignable(Long.TYPE, Float.TYPE));\n        assertTrue(\"long -> double\", ClassUtils.isAssignable(Long.TYPE, Double.TYPE));\n        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE));\n\n        // test float conversions\n        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.TYPE, Character.TYPE));\n        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.TYPE, Byte.TYPE));\n        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.TYPE, Short.TYPE));\n        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.TYPE, Integer.TYPE));\n        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.TYPE, Long.TYPE));\n        assertTrue(\"float -> float\", ClassUtils.isAssignable(Float.TYPE, Float.TYPE));\n        assertTrue(\"float -> double\", ClassUtils.isAssignable(Float.TYPE, Double.TYPE));\n        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE));\n\n        // test double conversions\n        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.TYPE, Character.TYPE));\n        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.TYPE, Byte.TYPE));\n        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.TYPE, Short.TYPE));\n        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.TYPE, Integer.TYPE));\n        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.TYPE, Long.TYPE));\n        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.TYPE, Float.TYPE));\n        assertTrue(\"double -> double\", ClassUtils.isAssignable(Double.TYPE, Double.TYPE));\n        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE));\n\n        // test boolean conversions\n        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE));\n        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE));\n        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE));\n        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE));\n        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE));\n        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE));\n        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));\n        assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n    }\n",
        "begin_line": 404,
        "end_line": 484,
        "comment": "",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 88)",
            "(line 407,col 9)-(line 407,col 82)",
            "(line 408,col 9)-(line 408,col 84)",
            "(line 409,col 9)-(line 409,col 84)",
            "(line 410,col 9)-(line 410,col 82)",
            "(line 411,col 9)-(line 411,col 84)",
            "(line 412,col 9)-(line 412,col 86)",
            "(line 413,col 9)-(line 413,col 89)",
            "(line 416,col 9)-(line 416,col 90)",
            "(line 417,col 9)-(line 417,col 85)",
            "(line 418,col 9)-(line 418,col 86)",
            "(line 419,col 9)-(line 419,col 86)",
            "(line 420,col 9)-(line 420,col 84)",
            "(line 421,col 9)-(line 421,col 86)",
            "(line 422,col 9)-(line 422,col 88)",
            "(line 423,col 9)-(line 423,col 91)",
            "(line 426,col 9)-(line 426,col 92)",
            "(line 427,col 9)-(line 427,col 88)",
            "(line 428,col 9)-(line 428,col 90)",
            "(line 429,col 9)-(line 429,col 89)",
            "(line 430,col 9)-(line 430,col 87)",
            "(line 431,col 9)-(line 431,col 89)",
            "(line 432,col 9)-(line 432,col 91)",
            "(line 433,col 9)-(line 433,col 94)",
            "(line 436,col 9)-(line 436,col 90)",
            "(line 437,col 9)-(line 437,col 85)",
            "(line 438,col 9)-(line 438,col 87)",
            "(line 439,col 9)-(line 439,col 86)",
            "(line 440,col 9)-(line 440,col 84)",
            "(line 441,col 9)-(line 441,col 86)",
            "(line 442,col 9)-(line 442,col 88)",
            "(line 443,col 9)-(line 443,col 91)",
            "(line 446,col 9)-(line 446,col 88)",
            "(line 447,col 9)-(line 447,col 83)",
            "(line 448,col 9)-(line 448,col 85)",
            "(line 449,col 9)-(line 449,col 85)",
            "(line 450,col 9)-(line 450,col 82)",
            "(line 451,col 9)-(line 451,col 84)",
            "(line 452,col 9)-(line 452,col 86)",
            "(line 453,col 9)-(line 453,col 89)",
            "(line 456,col 9)-(line 456,col 90)",
            "(line 457,col 9)-(line 457,col 85)",
            "(line 458,col 9)-(line 458,col 87)",
            "(line 459,col 9)-(line 459,col 87)",
            "(line 460,col 9)-(line 460,col 85)",
            "(line 461,col 9)-(line 461,col 86)",
            "(line 462,col 9)-(line 462,col 88)",
            "(line 463,col 9)-(line 463,col 91)",
            "(line 466,col 9)-(line 466,col 92)",
            "(line 467,col 9)-(line 467,col 87)",
            "(line 468,col 9)-(line 468,col 89)",
            "(line 469,col 9)-(line 469,col 89)",
            "(line 470,col 9)-(line 470,col 87)",
            "(line 471,col 9)-(line 471,col 89)",
            "(line 472,col 9)-(line 472,col 90)",
            "(line 473,col 9)-(line 473,col 93)",
            "(line 476,col 9)-(line 476,col 94)",
            "(line 477,col 9)-(line 477,col 89)",
            "(line 478,col 9)-(line 478,col 91)",
            "(line 479,col 9)-(line 479,col 91)",
            "(line 480,col 9)-(line 480,col 89)",
            "(line 481,col 9)-(line 481,col 91)",
            "(line 482,col 9)-(line 482,col 93)",
            "(line 483,col 9)-(line 483,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_DefaultUnboxing_Widening()",
        "snippet": "    public void test_isAssignable_DefaultUnboxing_Widening() throws Exception {\n        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n\n        // test byte conversions\n        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.class, Character.TYPE));\n        assertEquals(\"byte -> byte\", autoboxing, ClassUtils.isAssignable(Byte.class, Byte.TYPE));\n        assertEquals(\"byte -> short\", autoboxing, ClassUtils.isAssignable(Byte.class, Short.TYPE));\n        assertEquals(\"byte -> int\", autoboxing, ClassUtils.isAssignable(Byte.class, Integer.TYPE));\n        assertEquals(\"byte -> long\", autoboxing, ClassUtils.isAssignable(Byte.class, Long.TYPE));\n        assertEquals(\"byte -> float\", autoboxing, ClassUtils.isAssignable(Byte.class, Float.TYPE));\n        assertEquals(\"byte -> double\", autoboxing, ClassUtils.isAssignable(Byte.class, Double.TYPE));\n        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.class, Boolean.TYPE));\n\n        // test short conversions\n        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.class, Character.TYPE));\n        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.class, Byte.TYPE));\n        assertEquals(\"short -> short\", autoboxing, ClassUtils.isAssignable(Short.class, Short.TYPE));\n        assertEquals(\"short -> int\", autoboxing, ClassUtils.isAssignable(Short.class, Integer.TYPE));\n        assertEquals(\"short -> long\", autoboxing, ClassUtils.isAssignable(Short.class, Long.TYPE));\n        assertEquals(\"short -> float\", autoboxing, ClassUtils.isAssignable(Short.class, Float.TYPE));\n        assertEquals(\"short -> double\", autoboxing, ClassUtils.isAssignable(Short.class, Double.TYPE));\n        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.class, Boolean.TYPE));\n\n        // test char conversions\n        assertEquals(\"char -> char\", autoboxing, ClassUtils.isAssignable(Character.class, Character.TYPE));\n        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.class, Byte.TYPE));\n        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.class, Short.TYPE));\n        assertEquals(\"char -> int\", autoboxing, ClassUtils.isAssignable(Character.class, Integer.TYPE));\n        assertEquals(\"char -> long\", autoboxing, ClassUtils.isAssignable(Character.class, Long.TYPE));\n        assertEquals(\"char -> float\", autoboxing, ClassUtils.isAssignable(Character.class, Float.TYPE));\n        assertEquals(\"char -> double\", autoboxing, ClassUtils.isAssignable(Character.class, Double.TYPE));\n        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.class, Boolean.TYPE));\n\n        // test int conversions\n        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.class, Character.TYPE));\n        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.class, Byte.TYPE));\n        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.class, Short.TYPE));\n        assertEquals(\"int -> int\", autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n        assertEquals(\"int -> long\", autoboxing, ClassUtils.isAssignable(Integer.class, Long.TYPE));\n        assertEquals(\"int -> float\", autoboxing, ClassUtils.isAssignable(Integer.class, Float.TYPE));\n        assertEquals(\"int -> double\", autoboxing, ClassUtils.isAssignable(Integer.class, Double.TYPE));\n        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.class, Boolean.TYPE));\n\n        // test long conversions\n        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.class, Character.TYPE));\n        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.class, Byte.TYPE));\n        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.class, Short.TYPE));\n        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.class, Integer.TYPE));\n        assertEquals(\"long -> long\", autoboxing, ClassUtils.isAssignable(Long.class, Long.TYPE));\n        assertEquals(\"long -> float\", autoboxing, ClassUtils.isAssignable(Long.class, Float.TYPE));\n        assertEquals(\"long -> double\", autoboxing, ClassUtils.isAssignable(Long.class, Double.TYPE));\n        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.class, Boolean.TYPE));\n\n        // test float conversions\n        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.class, Character.TYPE));\n        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.class, Byte.TYPE));\n        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.class, Short.TYPE));\n        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.class, Integer.TYPE));\n        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.class, Long.TYPE));\n        assertEquals(\"float -> float\", autoboxing, ClassUtils.isAssignable(Float.class, Float.TYPE));\n        assertEquals(\"float -> double\", autoboxing, ClassUtils.isAssignable(Float.class, Double.TYPE));\n        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.class, Boolean.TYPE));\n\n        // test double conversions\n        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.class, Character.TYPE));\n        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.class, Byte.TYPE));\n        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.class, Short.TYPE));\n        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.class, Integer.TYPE));\n        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.class, Long.TYPE));\n        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.class, Float.TYPE));\n        assertEquals(\"double -> double\", autoboxing, ClassUtils.isAssignable(Double.class, Double.TYPE));\n        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.class, Boolean.TYPE));\n\n        // test boolean conversions\n        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.class, Character.TYPE));\n        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.class, Byte.TYPE));\n        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.class, Short.TYPE));\n        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.class, Integer.TYPE));\n        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.class, Long.TYPE));\n        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.class, Float.TYPE));\n        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.class, Double.TYPE));\n        assertEquals(\"boolean -> boolean\", autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n    }\n",
        "begin_line": 486,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 68)",
            "(line 490,col 9)-(line 490,col 89)",
            "(line 491,col 9)-(line 491,col 97)",
            "(line 492,col 9)-(line 492,col 99)",
            "(line 493,col 9)-(line 493,col 99)",
            "(line 494,col 9)-(line 494,col 97)",
            "(line 495,col 9)-(line 495,col 99)",
            "(line 496,col 9)-(line 496,col 101)",
            "(line 497,col 9)-(line 497,col 90)",
            "(line 500,col 9)-(line 500,col 91)",
            "(line 501,col 9)-(line 501,col 86)",
            "(line 502,col 9)-(line 502,col 101)",
            "(line 503,col 9)-(line 503,col 101)",
            "(line 504,col 9)-(line 504,col 99)",
            "(line 505,col 9)-(line 505,col 101)",
            "(line 506,col 9)-(line 506,col 103)",
            "(line 507,col 9)-(line 507,col 92)",
            "(line 510,col 9)-(line 510,col 107)",
            "(line 511,col 9)-(line 511,col 89)",
            "(line 512,col 9)-(line 512,col 91)",
            "(line 513,col 9)-(line 513,col 104)",
            "(line 514,col 9)-(line 514,col 102)",
            "(line 515,col 9)-(line 515,col 104)",
            "(line 516,col 9)-(line 516,col 106)",
            "(line 517,col 9)-(line 517,col 95)",
            "(line 520,col 9)-(line 520,col 91)",
            "(line 521,col 9)-(line 521,col 86)",
            "(line 522,col 9)-(line 522,col 88)",
            "(line 523,col 9)-(line 523,col 101)",
            "(line 524,col 9)-(line 524,col 99)",
            "(line 525,col 9)-(line 525,col 101)",
            "(line 526,col 9)-(line 526,col 103)",
            "(line 527,col 9)-(line 527,col 92)",
            "(line 530,col 9)-(line 530,col 89)",
            "(line 531,col 9)-(line 531,col 84)",
            "(line 532,col 9)-(line 532,col 86)",
            "(line 533,col 9)-(line 533,col 86)",
            "(line 534,col 9)-(line 534,col 97)",
            "(line 535,col 9)-(line 535,col 99)",
            "(line 536,col 9)-(line 536,col 101)",
            "(line 537,col 9)-(line 537,col 90)",
            "(line 540,col 9)-(line 540,col 91)",
            "(line 541,col 9)-(line 541,col 86)",
            "(line 542,col 9)-(line 542,col 88)",
            "(line 543,col 9)-(line 543,col 88)",
            "(line 544,col 9)-(line 544,col 86)",
            "(line 545,col 9)-(line 545,col 101)",
            "(line 546,col 9)-(line 546,col 103)",
            "(line 547,col 9)-(line 547,col 92)",
            "(line 550,col 9)-(line 550,col 93)",
            "(line 551,col 9)-(line 551,col 88)",
            "(line 552,col 9)-(line 552,col 90)",
            "(line 553,col 9)-(line 553,col 90)",
            "(line 554,col 9)-(line 554,col 88)",
            "(line 555,col 9)-(line 555,col 90)",
            "(line 556,col 9)-(line 556,col 105)",
            "(line 557,col 9)-(line 557,col 94)",
            "(line 560,col 9)-(line 560,col 95)",
            "(line 561,col 9)-(line 561,col 90)",
            "(line 562,col 9)-(line 562,col 92)",
            "(line 563,col 9)-(line 563,col 92)",
            "(line 564,col 9)-(line 564,col 90)",
            "(line 565,col 9)-(line 565,col 92)",
            "(line 566,col 9)-(line 566,col 94)",
            "(line 567,col 9)-(line 567,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Unboxing_Widening()",
        "snippet": "    public void test_isAssignable_Unboxing_Widening() throws Exception {\n        // test byte conversions\n        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.class, Character.TYPE, true));\n        assertTrue(\"byte -> byte\", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true));\n        assertTrue(\"byte -> short\", ClassUtils.isAssignable(Byte.class, Short.TYPE, true));\n        assertTrue(\"byte -> int\", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true));\n        assertTrue(\"byte -> long\", ClassUtils.isAssignable(Byte.class, Long.TYPE, true));\n        assertTrue(\"byte -> float\", ClassUtils.isAssignable(Byte.class, Float.TYPE, true));\n        assertTrue(\"byte -> double\", ClassUtils.isAssignable(Byte.class, Double.TYPE, true));\n        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true));\n\n        // test short conversions\n        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.class, Character.TYPE, true));\n        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.class, Byte.TYPE, true));\n        assertTrue(\"short -> short\", ClassUtils.isAssignable(Short.class, Short.TYPE, true));\n        assertTrue(\"short -> int\", ClassUtils.isAssignable(Short.class, Integer.TYPE, true));\n        assertTrue(\"short -> long\", ClassUtils.isAssignable(Short.class, Long.TYPE, true));\n        assertTrue(\"short -> float\", ClassUtils.isAssignable(Short.class, Float.TYPE, true));\n        assertTrue(\"short -> double\", ClassUtils.isAssignable(Short.class, Double.TYPE, true));\n        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true));\n\n        // test char conversions\n        assertTrue(\"char -> char\", ClassUtils.isAssignable(Character.class, Character.TYPE, true));\n        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.class, Byte.TYPE, true));\n        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.class, Short.TYPE, true));\n        assertTrue(\"char -> int\", ClassUtils.isAssignable(Character.class, Integer.TYPE, true));\n        assertTrue(\"char -> long\", ClassUtils.isAssignable(Character.class, Long.TYPE, true));\n        assertTrue(\"char -> float\", ClassUtils.isAssignable(Character.class, Float.TYPE, true));\n        assertTrue(\"char -> double\", ClassUtils.isAssignable(Character.class, Double.TYPE, true));\n        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true));\n\n        // test int conversions\n        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.class, Character.TYPE, true));\n        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true));\n        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.class, Short.TYPE, true));\n        assertTrue(\"int -> int\", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));\n        assertTrue(\"int -> long\", ClassUtils.isAssignable(Integer.class, Long.TYPE, true));\n        assertTrue(\"int -> float\", ClassUtils.isAssignable(Integer.class, Float.TYPE, true));\n        assertTrue(\"int -> double\", ClassUtils.isAssignable(Integer.class, Double.TYPE, true));\n        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true));\n\n        // test long conversions\n        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.class, Character.TYPE, true));\n        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.class, Byte.TYPE, true));\n        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.class, Short.TYPE, true));\n        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.class, Integer.TYPE, true));\n        assertTrue(\"long -> long\", ClassUtils.isAssignable(Long.class, Long.TYPE, true));\n        assertTrue(\"long -> float\", ClassUtils.isAssignable(Long.class, Float.TYPE, true));\n        assertTrue(\"long -> double\", ClassUtils.isAssignable(Long.class, Double.TYPE, true));\n        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true));\n\n        // test float conversions\n        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.class, Character.TYPE, true));\n        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.class, Byte.TYPE, true));\n        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.class, Short.TYPE, true));\n        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.class, Integer.TYPE, true));\n        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.class, Long.TYPE, true));\n        assertTrue(\"float -> float\", ClassUtils.isAssignable(Float.class, Float.TYPE, true));\n        assertTrue(\"float -> double\", ClassUtils.isAssignable(Float.class, Double.TYPE, true));\n        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true));\n\n        // test double conversions\n        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.class, Character.TYPE, true));\n        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.class, Byte.TYPE, true));\n        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.class, Short.TYPE, true));\n        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.class, Integer.TYPE, true));\n        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.class, Long.TYPE, true));\n        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.class, Float.TYPE, true));\n        assertTrue(\"double -> double\", ClassUtils.isAssignable(Double.class, Double.TYPE, true));\n        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true));\n\n        // test boolean conversions\n        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true));\n        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true));\n        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true));\n        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true));\n        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true));\n        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true));\n        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true));\n        assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n    }\n",
        "begin_line": 570,
        "end_line": 650,
        "comment": "",
        "child_ranges": [
            "(line 572,col 9)-(line 572,col 95)",
            "(line 573,col 9)-(line 573,col 89)",
            "(line 574,col 9)-(line 574,col 91)",
            "(line 575,col 9)-(line 575,col 91)",
            "(line 576,col 9)-(line 576,col 89)",
            "(line 577,col 9)-(line 577,col 91)",
            "(line 578,col 9)-(line 578,col 93)",
            "(line 579,col 9)-(line 579,col 96)",
            "(line 582,col 9)-(line 582,col 97)",
            "(line 583,col 9)-(line 583,col 92)",
            "(line 584,col 9)-(line 584,col 93)",
            "(line 585,col 9)-(line 585,col 93)",
            "(line 586,col 9)-(line 586,col 91)",
            "(line 587,col 9)-(line 587,col 93)",
            "(line 588,col 9)-(line 588,col 95)",
            "(line 589,col 9)-(line 589,col 98)",
            "(line 592,col 9)-(line 592,col 99)",
            "(line 593,col 9)-(line 593,col 95)",
            "(line 594,col 9)-(line 594,col 97)",
            "(line 595,col 9)-(line 595,col 96)",
            "(line 596,col 9)-(line 596,col 94)",
            "(line 597,col 9)-(line 597,col 96)",
            "(line 598,col 9)-(line 598,col 98)",
            "(line 599,col 9)-(line 599,col 101)",
            "(line 602,col 9)-(line 602,col 97)",
            "(line 603,col 9)-(line 603,col 92)",
            "(line 604,col 9)-(line 604,col 94)",
            "(line 605,col 9)-(line 605,col 93)",
            "(line 606,col 9)-(line 606,col 91)",
            "(line 607,col 9)-(line 607,col 93)",
            "(line 608,col 9)-(line 608,col 95)",
            "(line 609,col 9)-(line 609,col 98)",
            "(line 612,col 9)-(line 612,col 95)",
            "(line 613,col 9)-(line 613,col 90)",
            "(line 614,col 9)-(line 614,col 92)",
            "(line 615,col 9)-(line 615,col 92)",
            "(line 616,col 9)-(line 616,col 89)",
            "(line 617,col 9)-(line 617,col 91)",
            "(line 618,col 9)-(line 618,col 93)",
            "(line 619,col 9)-(line 619,col 96)",
            "(line 622,col 9)-(line 622,col 97)",
            "(line 623,col 9)-(line 623,col 92)",
            "(line 624,col 9)-(line 624,col 94)",
            "(line 625,col 9)-(line 625,col 94)",
            "(line 626,col 9)-(line 626,col 92)",
            "(line 627,col 9)-(line 627,col 93)",
            "(line 628,col 9)-(line 628,col 95)",
            "(line 629,col 9)-(line 629,col 98)",
            "(line 632,col 9)-(line 632,col 99)",
            "(line 633,col 9)-(line 633,col 94)",
            "(line 634,col 9)-(line 634,col 96)",
            "(line 635,col 9)-(line 635,col 96)",
            "(line 636,col 9)-(line 636,col 94)",
            "(line 637,col 9)-(line 637,col 96)",
            "(line 638,col 9)-(line 638,col 97)",
            "(line 639,col 9)-(line 639,col 100)",
            "(line 642,col 9)-(line 642,col 101)",
            "(line 643,col 9)-(line 643,col 96)",
            "(line 644,col 9)-(line 644,col 98)",
            "(line 645,col 9)-(line 645,col 98)",
            "(line 646,col 9)-(line 646,col 96)",
            "(line 647,col 9)-(line 647,col 98)",
            "(line 648,col 9)-(line 648,col 100)",
            "(line 649,col 9)-(line 649,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testPrimitiveToWrapper()",
        "snippet": "    public void testPrimitiveToWrapper() {\n\n        // test primitive classes\n        assertEquals(\"boolean -> Boolean.class\",\n            Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE));\n        assertEquals(\"byte -> Byte.class\",\n            Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE));\n        assertEquals(\"char -> Character.class\",\n            Character.class, ClassUtils.primitiveToWrapper(Character.TYPE));\n        assertEquals(\"short -> Short.class\",\n            Short.class, ClassUtils.primitiveToWrapper(Short.TYPE));\n        assertEquals(\"int -> Integer.class\",\n            Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE));\n        assertEquals(\"long -> Long.class\",\n            Long.class, ClassUtils.primitiveToWrapper(Long.TYPE));\n        assertEquals(\"double -> Double.class\",\n            Double.class, ClassUtils.primitiveToWrapper(Double.TYPE));\n        assertEquals(\"float -> Float.class\",\n            Float.class, ClassUtils.primitiveToWrapper(Float.TYPE));\n\n        // test a few other classes\n        assertEquals(\"String.class -> String.class\",\n            String.class, ClassUtils.primitiveToWrapper(String.class));\n        assertEquals(\"ClassUtils.class -> ClassUtils.class\",\n            org.apache.commons.lang3.ClassUtils.class,\n            ClassUtils.primitiveToWrapper(org.apache.commons.lang3.ClassUtils.class));\n        assertEquals(\"Void.TYPE -> Void.TYPE\",\n            Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE));\n\n        // test null\n        assertNull(\"null -> null\",\n            ClassUtils.primitiveToWrapper(null));\n    }\n",
        "begin_line": 652,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 655,col 9)-(line 656,col 72)",
            "(line 657,col 9)-(line 658,col 66)",
            "(line 659,col 9)-(line 660,col 76)",
            "(line 661,col 9)-(line 662,col 68)",
            "(line 663,col 9)-(line 664,col 72)",
            "(line 665,col 9)-(line 666,col 66)",
            "(line 667,col 9)-(line 668,col 70)",
            "(line 669,col 9)-(line 670,col 68)",
            "(line 673,col 9)-(line 674,col 71)",
            "(line 675,col 9)-(line 677,col 86)",
            "(line 678,col 9)-(line 679,col 65)",
            "(line 682,col 9)-(line 683,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testPrimitivesToWrappers()",
        "snippet": "    public void testPrimitivesToWrappers() {\n        // test null\n        assertNull(\"null -> null\",\n            ClassUtils.primitivesToWrappers(null));\n        // test empty array\n        assertEquals(\"empty -> empty\",\n                ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));\n\n        // test an array of various classes\n        final Class<?>[] primitives = new Class[] {\n                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,\n                Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE,\n                String.class, ClassUtils.class\n        };\n        Class<?>[] wrappers= ClassUtils.primitivesToWrappers(primitives);\n\n        for (int i=0; i < primitives.length; i++) {\n            // test each returned wrapper\n            Class<?> primitive = primitives[i];\n            Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive);\n\n            assertEquals(primitive + \" -> \" + expectedWrapper, expectedWrapper, wrappers[i]);\n        }\n\n        // test an array of no primitive classes\n        final Class<?>[] noPrimitives = new Class[] {\n                String.class, ClassUtils.class, Void.TYPE\n        };\n        // This used to return the exact same array, but no longer does.\n        assertNotSame(\"unmodified\", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));\n    }\n",
        "begin_line": 686,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 688,col 9)-(line 689,col 51)",
            "(line 691,col 9)-(line 692,col 109)",
            "(line 695,col 9)-(line 699,col 10)",
            "(line 700,col 9)-(line 700,col 73)",
            "(line 702,col 9)-(line 708,col 9)",
            "(line 711,col 9)-(line 713,col 10)",
            "(line 715,col 9)-(line 715,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitive()",
        "snippet": "    public void testWrapperToPrimitive() {\n        // an array with classes to convert\n        final Class<?>[] primitives = {\n                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,\n                Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE\n        };\n        for (int i = 0; i < primitives.length; i++) {\n            Class<?> wrapperCls = ClassUtils.primitiveToWrapper(primitives[i]);\n            assertFalse(\"Still primitive\", wrapperCls.isPrimitive());\n            assertEquals(wrapperCls + \" -> \" + primitives[i], primitives[i],\n                    ClassUtils.wrapperToPrimitive(wrapperCls));\n        }\n    }\n",
        "begin_line": 718,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 720,col 9)-(line 723,col 10)",
            "(line 724,col 9)-(line 729,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNoWrapper()",
        "snippet": "    public void testWrapperToPrimitiveNoWrapper() {\n        assertNull(\"Wrong result for non wrapper class\", ClassUtils.wrapperToPrimitive(String.class));\n    }\n",
        "begin_line": 732,
        "end_line": 734,
        "comment": "",
        "child_ranges": [
            "(line 733,col 9)-(line 733,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNull()",
        "snippet": "    public void testWrapperToPrimitiveNull() {\n        assertNull(\"Wrong result for null class\", ClassUtils.wrapperToPrimitive(null));\n    }\n",
        "begin_line": 736,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 737,col 9)-(line 737,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitives()",
        "snippet": "    public void testWrappersToPrimitives() {\n        // an array with classes to test\n        final Class<?>[] classes = {\n                Boolean.class, Byte.class, Character.class, Short.class,\n                Integer.class, Long.class, Float.class, Double.class,\n                String.class, ClassUtils.class, null\n        };\n\n        Class<?>[] primitives = ClassUtils.wrappersToPrimitives(classes);\n        // now test the result\n        assertEquals(\"Wrong length of result array\", classes.length, primitives.length);\n        for (int i = 0; i < classes.length; i++) {\n            Class<?> expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);\n            assertEquals(classes[i] + \" -> \" + expectedPrimitive, expectedPrimitive,\n                    primitives[i]);\n        }\n    }\n",
        "begin_line": 740,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 742,col 9)-(line 746,col 10)",
            "(line 748,col 9)-(line 748,col 73)",
            "(line 750,col 9)-(line 750,col 88)",
            "(line 751,col 9)-(line 755,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesNull()",
        "snippet": "    public void testWrappersToPrimitivesNull() {\n        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives(null));\n    }\n",
        "begin_line": 758,
        "end_line": 760,
        "comment": "",
        "child_ranges": [
            "(line 759,col 9)-(line 759,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesEmpty()",
        "snippet": "    public void testWrappersToPrimitivesEmpty() {\n        Class<?>[] empty = new Class[0];\n        assertEquals(\"Wrong result for empty input\", empty, ClassUtils.wrappersToPrimitives(empty));\n    }\n",
        "begin_line": 762,
        "end_line": 765,
        "comment": "",
        "child_ranges": [
            "(line 763,col 9)-(line 763,col 40)",
            "(line 764,col 9)-(line 764,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassClassNotFound()",
        "snippet": "    public void testGetClassClassNotFound() throws Exception {\n        assertGetClassThrowsClassNotFound( \"bool\" );\n        assertGetClassThrowsClassNotFound( \"bool[]\" );\n        assertGetClassThrowsClassNotFound( \"integer[]\" );\n    }\n",
        "begin_line": 767,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 768,col 9)-(line 768,col 52)",
            "(line 769,col 9)-(line 769,col 54)",
            "(line 770,col 9)-(line 770,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassInvalidArguments()",
        "snippet": "    public void testGetClassInvalidArguments() throws Exception {\n        assertGetClassThrowsNullPointerException( null );\n        assertGetClassThrowsClassNotFound( \"[][][]\" );\n        assertGetClassThrowsClassNotFound( \"[[]\" );\n        assertGetClassThrowsClassNotFound( \"[\" );\n        assertGetClassThrowsClassNotFound( \"java.lang.String][\" );\n        assertGetClassThrowsClassNotFound( \".hello.world\" );\n        assertGetClassThrowsClassNotFound( \"hello..world\" );\n    }\n",
        "begin_line": 773,
        "end_line": 781,
        "comment": "",
        "child_ranges": [
            "(line 774,col 9)-(line 774,col 57)",
            "(line 775,col 9)-(line 775,col 54)",
            "(line 776,col 9)-(line 776,col 51)",
            "(line 777,col 9)-(line 777,col 49)",
            "(line 778,col 9)-(line 778,col 66)",
            "(line 779,col 9)-(line 779,col 60)",
            "(line 780,col 9)-(line 780,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWithInterleavingWhitespace()",
        "snippet": "    public void testWithInterleavingWhitespace() throws ClassNotFoundException {\n        assertEquals( int[].class, ClassUtils.getClass( \" int [ ] \" ) );\n        assertEquals( long[].class, ClassUtils.getClass( \"\\rlong\\t[\\n]\\r\" ) );\n        assertEquals( short[].class, ClassUtils.getClass( \"\\tshort                \\t\\t[]\" ) );\n        assertEquals( byte[].class, ClassUtils.getClass( \"byte[\\t\\t\\n\\r]   \" ) );\n    }\n",
        "begin_line": 783,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 784,col 9)-(line 784,col 72)",
            "(line 785,col 9)-(line 785,col 78)",
            "(line 786,col 9)-(line 786,col 94)",
            "(line 787,col 9)-(line 787,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays()",
        "snippet": "    public void testGetClassByNormalNameArrays() throws ClassNotFoundException {\n        assertEquals( int[].class, ClassUtils.getClass( \"int[]\" ) );\n        assertEquals( long[].class, ClassUtils.getClass( \"long[]\" ) );\n        assertEquals( short[].class, ClassUtils.getClass( \"short[]\" ) );\n        assertEquals( byte[].class, ClassUtils.getClass( \"byte[]\" ) );\n        assertEquals( char[].class, ClassUtils.getClass( \"char[]\" ) );\n        assertEquals( float[].class, ClassUtils.getClass( \"float[]\" ) );\n        assertEquals( double[].class, ClassUtils.getClass( \"double[]\" ) );\n        assertEquals( boolean[].class, ClassUtils.getClass( \"boolean[]\" ) );\n        assertEquals( String[].class, ClassUtils.getClass( \"java.lang.String[]\" ) );\n    }\n",
        "begin_line": 790,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 791,col 9)-(line 791,col 68)",
            "(line 792,col 9)-(line 792,col 70)",
            "(line 793,col 9)-(line 793,col 72)",
            "(line 794,col 9)-(line 794,col 70)",
            "(line 795,col 9)-(line 795,col 70)",
            "(line 796,col 9)-(line 796,col 72)",
            "(line 797,col 9)-(line 797,col 74)",
            "(line 798,col 9)-(line 798,col 76)",
            "(line 799,col 9)-(line 799,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays2D()",
        "snippet": "    public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException {\n        assertEquals( int[][].class, ClassUtils.getClass( \"int[][]\" ) );\n        assertEquals( long[][].class, ClassUtils.getClass( \"long[][]\" ) );\n        assertEquals( short[][].class, ClassUtils.getClass( \"short[][]\" ) );\n        assertEquals( byte[][].class, ClassUtils.getClass( \"byte[][]\" ) );\n        assertEquals( char[][].class, ClassUtils.getClass( \"char[][]\" ) );\n        assertEquals( float[][].class, ClassUtils.getClass( \"float[][]\" ) );\n        assertEquals( double[][].class, ClassUtils.getClass( \"double[][]\" ) );\n        assertEquals( boolean[][].class, ClassUtils.getClass( \"boolean[][]\" ) );\n        assertEquals( String[][].class, ClassUtils.getClass( \"java.lang.String[][]\" ) );\n    }\n",
        "begin_line": 802,
        "end_line": 812,
        "comment": "",
        "child_ranges": [
            "(line 803,col 9)-(line 803,col 72)",
            "(line 804,col 9)-(line 804,col 74)",
            "(line 805,col 9)-(line 805,col 76)",
            "(line 806,col 9)-(line 806,col 74)",
            "(line 807,col 9)-(line 807,col 74)",
            "(line 808,col 9)-(line 808,col 76)",
            "(line 809,col 9)-(line 809,col 78)",
            "(line 810,col 9)-(line 810,col 80)",
            "(line 811,col 9)-(line 811,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses2D()",
        "snippet": "    public void testGetClassWithArrayClasses2D() throws Exception {\n        assertGetClassReturnsClass( String[][].class );\n        assertGetClassReturnsClass( int[][].class );\n        assertGetClassReturnsClass( long[][].class );\n        assertGetClassReturnsClass( short[][].class );\n        assertGetClassReturnsClass( byte[][].class );\n        assertGetClassReturnsClass( char[][].class );\n        assertGetClassReturnsClass( float[][].class );\n        assertGetClassReturnsClass( double[][].class );\n        assertGetClassReturnsClass( boolean[][].class );\n    }\n",
        "begin_line": 814,
        "end_line": 824,
        "comment": "",
        "child_ranges": [
            "(line 815,col 9)-(line 815,col 55)",
            "(line 816,col 9)-(line 816,col 52)",
            "(line 817,col 9)-(line 817,col 53)",
            "(line 818,col 9)-(line 818,col 54)",
            "(line 819,col 9)-(line 819,col 53)",
            "(line 820,col 9)-(line 820,col 53)",
            "(line 821,col 9)-(line 821,col 54)",
            "(line 822,col 9)-(line 822,col 55)",
            "(line 823,col 9)-(line 823,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses()",
        "snippet": "    public void testGetClassWithArrayClasses() throws Exception {\n        assertGetClassReturnsClass( String[].class );\n        assertGetClassReturnsClass( int[].class );\n        assertGetClassReturnsClass( long[].class );\n        assertGetClassReturnsClass( short[].class );\n        assertGetClassReturnsClass( byte[].class );\n        assertGetClassReturnsClass( char[].class );\n        assertGetClassReturnsClass( float[].class );\n        assertGetClassReturnsClass( double[].class );\n        assertGetClassReturnsClass( boolean[].class );\n    }\n",
        "begin_line": 826,
        "end_line": 836,
        "comment": "",
        "child_ranges": [
            "(line 827,col 9)-(line 827,col 53)",
            "(line 828,col 9)-(line 828,col 50)",
            "(line 829,col 9)-(line 829,col 51)",
            "(line 830,col 9)-(line 830,col 52)",
            "(line 831,col 9)-(line 831,col 51)",
            "(line 832,col 9)-(line 832,col 51)",
            "(line 833,col 9)-(line 833,col 52)",
            "(line 834,col 9)-(line 834,col 53)",
            "(line 835,col 9)-(line 835,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassRawPrimitives()",
        "snippet": "    public void testGetClassRawPrimitives() throws ClassNotFoundException {\n        assertEquals( int.class, ClassUtils.getClass( \"int\" ) );\n        assertEquals( long.class, ClassUtils.getClass( \"long\" ) );\n        assertEquals( short.class, ClassUtils.getClass( \"short\" ) );\n        assertEquals( byte.class, ClassUtils.getClass( \"byte\" ) );\n        assertEquals( char.class, ClassUtils.getClass( \"char\" ) );\n        assertEquals( float.class, ClassUtils.getClass( \"float\" ) );\n        assertEquals( double.class, ClassUtils.getClass( \"double\" ) );\n        assertEquals( boolean.class, ClassUtils.getClass( \"boolean\" ) );\n    }\n",
        "begin_line": 838,
        "end_line": 847,
        "comment": "",
        "child_ranges": [
            "(line 839,col 9)-(line 839,col 64)",
            "(line 840,col 9)-(line 840,col 66)",
            "(line 841,col 9)-(line 841,col 68)",
            "(line 842,col 9)-(line 842,col 66)",
            "(line 843,col 9)-(line 843,col 66)",
            "(line 844,col 9)-(line 844,col 68)",
            "(line 845,col 9)-(line 845,col 70)",
            "(line 846,col 9)-(line 846,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.assertGetClassReturnsClass(java.lang.Class<?>)",
        "snippet": "    private void assertGetClassReturnsClass( Class<?> c ) throws Exception {\n        assertEquals( c, ClassUtils.getClass( c.getName() ) );\n    }\n",
        "begin_line": 849,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 850,col 9)-(line 850,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.assertGetClassThrowsException(java.lang.String, java.lang.Class<?>)",
        "snippet": "    private void assertGetClassThrowsException( String className, Class<?> exceptionType ) throws Exception {\n        try {\n            ClassUtils.getClass( className );\n            fail( \"ClassUtils.getClass() should fail with an exception of type \" + exceptionType.getName() + \" when given class name \\\"\" + className + \"\\\".\" );\n        }\n        catch( Exception e ) {\n            assertTrue( exceptionType.isAssignableFrom( e.getClass() ) );\n        }\n    }\n",
        "begin_line": 853,
        "end_line": 861,
        "comment": "",
        "child_ranges": [
            "(line 854,col 9)-(line 860,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.assertGetClassThrowsNullPointerException(java.lang.String)",
        "snippet": "    private void assertGetClassThrowsNullPointerException( String className ) throws Exception {\n        assertGetClassThrowsException( className, NullPointerException.class );\n    }\n",
        "begin_line": 863,
        "end_line": 865,
        "comment": "",
        "child_ranges": [
            "(line 864,col 9)-(line 864,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.assertGetClassThrowsClassNotFound(java.lang.String)",
        "snippet": "    private void assertGetClassThrowsClassNotFound( String className ) throws Exception {\n        assertGetClassThrowsException( className, ClassNotFoundException.class );\n    }\n",
        "begin_line": 867,
        "end_line": 869,
        "comment": "",
        "child_ranges": [
            "(line 868,col 9)-(line 868,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testShowJavaBug()",
        "snippet": "    public void testShowJavaBug() throws Exception {\n        // Tests with Collections$UnmodifiableSet\n        Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n        Method isEmptyMethod = set.getClass().getMethod(\"isEmpty\",  new Class[0]);\n        try {\n            isEmptyMethod.invoke(set, new Object[0]);\n            fail(\"Failed to throw IllegalAccessException as expected\");\n        } catch(IllegalAccessException iae) {\n            // expected\n        }\n    }\n",
        "begin_line": 873,
        "end_line": 883,
        "comment": " We may have to delete this if a JDK fixes the bug.",
        "child_ranges": [
            "(line 875,col 9)-(line 875,col 72)",
            "(line 876,col 9)-(line 876,col 82)",
            "(line 877,col 9)-(line 882,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetPublicMethod()",
        "snippet": "    public void testGetPublicMethod() throws Exception {\n        // Tests with Collections$UnmodifiableSet\n        Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n        Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]);\n            assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));\n\n        try {\n            isEmptyMethod.invoke(set, new Object[0]);\n        } catch(java.lang.IllegalAccessException iae) {\n            fail(\"Should not have thrown IllegalAccessException\");\n        }\n\n        // Tests with a public Class\n        Method toStringMethod = ClassUtils.getPublicMethod(Object.class, \"toString\",  new Class[0]);\n            assertEquals(Object.class.getMethod(\"toString\", new Class[0]), toStringMethod);\n    }\n",
        "begin_line": 885,
        "end_line": 900,
        "comment": "",
        "child_ranges": [
            "(line 887,col 9)-(line 887,col 72)",
            "(line 888,col 9)-(line 888,col 100)",
            "(line 889,col 13)-(line 889,col 92)",
            "(line 891,col 9)-(line 895,col 9)",
            "(line 898,col 9)-(line 898,col 100)",
            "(line 899,col 13)-(line 899,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testToClass_object()",
        "snippet": "    public void testToClass_object() {\n        assertNull(ClassUtils.toClass(null));\n\n        assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY));\n\n        assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class },\n                ClassUtils.toClass(new Object[] { \"Test\", 1, 99d })));\n\n        assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class },\n                ClassUtils.toClass(new Object[] { \"Test\", null, 99d })));\n    }\n",
        "begin_line": 902,
        "end_line": 912,
        "comment": "",
        "child_ranges": [
            "(line 903,col 9)-(line 903,col 45)",
            "(line 905,col 9)-(line 905,col 100)",
            "(line 907,col 9)-(line 908,col 70)",
            "(line 910,col 9)-(line 911,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Object()",
        "snippet": "    public void test_getShortCanonicalName_Object() {\n        assertEquals(\"<null>\", ClassUtils.getShortCanonicalName(null, \"<null>\"));\n        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(new ClassUtils[0], \"<null>\"));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], \"<null>\"));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(new int[0], \"<null>\"));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(new int[0][0], \"<null>\"));\n    }\n",
        "begin_line": 914,
        "end_line": 921,
        "comment": "",
        "child_ranges": [
            "(line 915,col 9)-(line 915,col 81)",
            "(line 916,col 9)-(line 916,col 97)",
            "(line 917,col 9)-(line 917,col 100)",
            "(line 918,col 9)-(line 918,col 105)",
            "(line 919,col 9)-(line 919,col 86)",
            "(line 920,col 9)-(line 920,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Class()",
        "snippet": "    public void test_getShortCanonicalName_Class() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(ClassUtils.class));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(ClassUtils[].class));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(ClassUtils[][].class));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(int[].class));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(int[][].class));\n    }\n",
        "begin_line": 923,
        "end_line": 929,
        "comment": "",
        "child_ranges": [
            "(line 924,col 9)-(line 924,col 87)",
            "(line 925,col 9)-(line 925,col 91)",
            "(line 926,col 9)-(line 926,col 95)",
            "(line 927,col 9)-(line 927,col 77)",
            "(line 928,col 9)-(line 928,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_String()",
        "snippet": "    public void test_getShortCanonicalName_String() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtils;\"));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"[[Lorg.apache.commons.lang3.ClassUtils;\"));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils[]\"));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils[][]\"));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"[I\"));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"[[I\"));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"int[]\"));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"int[][]\"));\n    }\n",
        "begin_line": 931,
        "end_line": 941,
        "comment": "",
        "child_ranges": [
            "(line 932,col 9)-(line 932,col 108)",
            "(line 933,col 9)-(line 933,col 113)",
            "(line 934,col 9)-(line 934,col 116)",
            "(line 935,col 9)-(line 935,col 112)",
            "(line 936,col 9)-(line 936,col 116)",
            "(line 937,col 9)-(line 937,col 70)",
            "(line 938,col 9)-(line 938,col 73)",
            "(line 939,col 9)-(line 939,col 73)",
            "(line 940,col 9)-(line 940,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Object()",
        "snippet": "    public void test_getPackageCanonicalName_Object() {\n        assertEquals(\"<null>\", ClassUtils.getPackageCanonicalName(null, \"<null>\"));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils[0], \"<null>\"));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], \"<null>\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0], \"<null>\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0][0], \"<null>\"));\n    }\n",
        "begin_line": 943,
        "end_line": 950,
        "comment": "",
        "child_ranges": [
            "(line 944,col 9)-(line 944,col 83)",
            "(line 945,col 9)-(line 945,col 113)",
            "(line 946,col 9)-(line 946,col 114)",
            "(line 947,col 9)-(line 947,col 117)",
            "(line 948,col 9)-(line 948,col 83)",
            "(line 949,col 9)-(line 949,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Class()",
        "snippet": "    public void test_getPackageCanonicalName_Class() {\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils.class));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils[].class));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[].class));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[][].class));\n    }\n",
        "begin_line": 952,
        "end_line": 958,
        "comment": "",
        "child_ranges": [
            "(line 953,col 9)-(line 953,col 103)",
            "(line 954,col 9)-(line 954,col 105)",
            "(line 955,col 9)-(line 955,col 107)",
            "(line 956,col 9)-(line 956,col 74)",
            "(line 957,col 9)-(line 957,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_String()",
        "snippet": "    public void test_getPackageCanonicalName_String() {\n        assertEquals(\"org.apache.commons.lang3\",\n            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\n        assertEquals(\"org.apache.commons.lang3\",\n            ClassUtils.getPackageCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtils;\"));\n        assertEquals(\"org.apache.commons.lang3\",\n            ClassUtils.getPackageCanonicalName(\"[[Lorg.apache.commons.lang3.ClassUtils;\"));\n        assertEquals(\"org.apache.commons.lang3\",\n            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[]\"));\n        assertEquals(\"org.apache.commons.lang3\",\n            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[][]\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[I\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[[I\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[]\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[][]\"));\n    }\n",
        "begin_line": 960,
        "end_line": 975,
        "comment": "",
        "child_ranges": [
            "(line 961,col 9)-(line 962,col 87)",
            "(line 963,col 9)-(line 964,col 90)",
            "(line 965,col 9)-(line 966,col 91)",
            "(line 967,col 9)-(line 968,col 89)",
            "(line 969,col 9)-(line 970,col 91)",
            "(line 971,col 9)-(line 971,col 67)",
            "(line 972,col 9)-(line 972,col 68)",
            "(line 973,col 9)-(line 973,col 70)",
            "(line 974,col 9)-(line 974,col 72)"
        ]
    }
]