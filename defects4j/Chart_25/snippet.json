[
    {
        "name": "MeanAndStandardDeviation.MeanAndStandardDeviation#84",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java",
        "class_name": "org.jfree.data.statistics.MeanAndStandardDeviation",
        "signature": "org.jfree.data.statistics.MeanAndStandardDeviation.MeanAndStandardDeviation(java.lang.Number, java.lang.Number)",
        "snippet": "    public MeanAndStandardDeviation(Number mean, Number standardDeviation) {\n        this.mean = mean;\n        this.standardDeviation = standardDeviation;\n    }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "\r\n     * Creates a new mean and standard deviation record.\r\n     *\r\n     * @param mean  the mean (<code>null</code> permitted).\r\n     * @param standardDeviation  the standard deviation (<code>null</code>\r\n     *                           permitted.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "MeanAndStandardDeviation.getMean#94",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java",
        "class_name": "org.jfree.data.statistics.MeanAndStandardDeviation",
        "signature": "org.jfree.data.statistics.MeanAndStandardDeviation.getMean()",
        "snippet": "    public Number getMean() {\n        return this.mean;\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\r\n     * Returns the mean.\r\n     *\r\n     * @return The mean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "MeanAndStandardDeviation.getStandardDeviation#103",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java",
        "class_name": "org.jfree.data.statistics.MeanAndStandardDeviation",
        "signature": "org.jfree.data.statistics.MeanAndStandardDeviation.getStandardDeviation()",
        "snippet": "    public Number getStandardDeviation() {\n        return this.standardDeviation;\n    }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\r\n     * Returns the standard deviation.\r\n     *\r\n     * @return The standard deviation.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.DefaultStatisticalCategoryDataset#90",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.DefaultStatisticalCategoryDataset()",
        "snippet": "    public DefaultStatisticalCategoryDataset() {\n        this.data = new KeyedObjects2D();\n        this.minimumRangeValue = Double.NaN;\n        this.maximumRangeValue = Double.NaN;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n    }\n",
        "begin_line": 90,
        "end_line": 96,
        "comment": "\r\n     * Creates a new dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getMeanValue#106",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getMeanValue(int, int)",
        "snippet": "    public Number getMeanValue(int row, int column) {\n        Number result = null;\n        MeanAndStandardDeviation masd \n            = (MeanAndStandardDeviation) this.data.getObject(row, column);\n        if (masd != null) {\n            result = masd.getMean();\n        }\n        return result;\n    }\n",
        "begin_line": 106,
        "end_line": 114,
        "comment": "\r\n     * Returns the mean value for an item.\r\n     *\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     *\r\n     * @return The mean value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getValue#125",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getValue(int, int)",
        "snippet": "    public Number getValue(int row, int column) {\n        return getMeanValue(row, column);\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\r\n     * Returns the value for an item (for this dataset, the mean value is\r\n     * returned).\r\n     *\r\n     * @param row  the row index.\r\n     * @param column  the column index.\r\n     *\r\n     * @return The value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getStdDevValue#168",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getStdDevValue(int, int)",
        "snippet": "    public Number getStdDevValue(int row, int column) {\n        Number result = null;\n        MeanAndStandardDeviation masd \n            = (MeanAndStandardDeviation) this.data.getObject(row, column);\n        if (masd != null) {\n            result = masd.getStandardDeviation();\n        }\n        return result;\n    }\n",
        "begin_line": 168,
        "end_line": 176,
        "comment": "\r\n     * Returns the standard deviation value for an item.\r\n     *\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     *\r\n     * @return The standard deviation.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getColumnKey#214",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getColumnKey(int)",
        "snippet": "    public Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\r\n     * Returns a column key.\r\n     *\r\n     * @param column  the column index (zero-based).\r\n     *\r\n     * @return The column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getRowKey#245",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRowKey(int)",
        "snippet": "    public Comparable getRowKey(int row) {\n        return this.data.getRowKey(row);\n    }\n",
        "begin_line": 245,
        "end_line": 247,
        "comment": "\r\n     * Returns a row key.\r\n     *\r\n     * @param row  the row index (zero-based).\r\n     *\r\n     * @return The row key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getRowCount#263",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRowCount()",
        "snippet": "    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n",
        "begin_line": 263,
        "end_line": 265,
        "comment": "\r\n     * Returns the number of rows in the table.\r\n     *\r\n     * @return The row count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getColumnCount#272",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n",
        "begin_line": 272,
        "end_line": 274,
        "comment": "\r\n     * Returns the number of columns in the table.\r\n     *\r\n     * @return The column count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.add#284",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.add(double, double, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void add(double mean, double standardDeviation,\n                    Comparable rowKey, Comparable columnKey) {\n        add(new Double(mean), new Double(standardDeviation), rowKey, columnKey);\n    }\n",
        "begin_line": 284,
        "end_line": 287,
        "comment": "\r\n     * Adds a mean and standard deviation to the table.\r\n     *\r\n     * @param mean  the mean.\r\n     * @param standardDeviation  the standard deviation.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.add#297",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.add(java.lang.Number, java.lang.Number, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void add(Number mean, Number standardDeviation,\n                    Comparable rowKey, Comparable columnKey) {\n        MeanAndStandardDeviation item = new MeanAndStandardDeviation(\n                mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n        double m = 0.0;\n        double sd = 0.0;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();   \n        }\n        \n        if (!Double.isNaN(m)) {\n            if (Double.isNaN(this.maximumRangeValue) \n                    || m > this.maximumRangeValue) {\n                this.maximumRangeValue = m;\n            }\n        }\n        \n        if (!Double.isNaN(m + sd)) {\n            if (Double.isNaN(this.maximumRangeValueIncStdDev) \n                    || (m + sd) > this.maximumRangeValueIncStdDev) {\n                this.maximumRangeValueIncStdDev = m + sd;\n            }\n        }\n\n        if (!Double.isNaN(m)) {\n            if (Double.isNaN(this.minimumRangeValue) \n                    || m < this.minimumRangeValue) {\n                this.minimumRangeValue = m;\n            }\n        }\n\n        if (!Double.isNaN(m - sd)) {\n            if (Double.isNaN(this.minimumRangeValueIncStdDev) \n                    || (m - sd) < this.minimumRangeValueIncStdDev) {\n                this.minimumRangeValueIncStdDev = m - sd;\n            }\n        }\n\n        fireDatasetChanged();\n    }\n",
        "begin_line": 297,
        "end_line": 340,
        "comment": "\r\n     * Adds a mean and standard deviation to the table.\r\n     *\r\n     * @param mean  the mean.\r\n     * @param standardDeviation  the standard deviation.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getRangeBounds#376",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeBounds(boolean)",
        "snippet": "    public Range getRangeBounds(boolean includeInterval) {\n        Range result = null;\n        if (includeInterval) {\n            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n            result = new Range(this.minimumRangeValueIncStdDev, \n                    this.maximumRangeValueIncStdDev);\n        }\n        else {\n            if (!Double.isNaN(this.minimumRangeValue) \n                    && !Double.isNaN(this.maximumRangeValue))\n            result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n        }\n        return result;\n    }\n",
        "begin_line": 376,
        "end_line": 390,
        "comment": "\r\n     * Returns the range of the values in this dataset's range.\r\n     *\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *                         y-interval is taken into account.\r\n     * \r\n     * @return The range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DatasetUtilities.isEmptyOrNull#562",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.isEmptyOrNull(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public static boolean isEmptyOrNull(CategoryDataset dataset) {\n\n        if (dataset == null) {\n            return true;\n        }\n\n        int rowCount = dataset.getRowCount();\n        int columnCount = dataset.getColumnCount();\n        if (rowCount == 0 || columnCount == 0) {\n            return true;\n        }\n\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                if (dataset.getValue(r, c) != null) {\n                    return false;\n                }\n\n            }\n        }\n\n        return true;\n\n    }\n",
        "begin_line": 562,
        "end_line": 585,
        "comment": "\r\n     * Returns <code>true</code> if the dataset is empty (or <code>null</code>),\r\n     * and <code>false</code> otherwise.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DatasetUtilities.findRangeBounds#724",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public static Range findRangeBounds(CategoryDataset dataset) {\n        return findRangeBounds(dataset, true);\n    }\n",
        "begin_line": 724,
        "end_line": 726,
        "comment": "\r\n     * Returns the range of values in the range for the dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     *\r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DatasetUtilities.findRangeBounds#737",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset, boolean)",
        "snippet": "    public static Range findRangeBounds(CategoryDataset dataset, \n                                        boolean includeInterval) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        Range result = null;\n        if (dataset instanceof RangeInfo) {\n            RangeInfo info = (RangeInfo) dataset;\n            result = info.getRangeBounds(includeInterval);\n        }\n        else {\n            result = iterateCategoryRangeBounds(dataset, includeInterval);\n        }\n        return result;\n    }\n",
        "begin_line": 737,
        "end_line": 751,
        "comment": "\r\n     * Returns the range of values in the range for the dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *                         y-interval is taken into account.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DatasetGroup.DatasetGroup#64",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "class_name": "org.jfree.data.general.DatasetGroup",
        "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup()",
        "snippet": "    public DatasetGroup() {\n        super();\n        this.id = \"NOID\";\n    }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "\r\n     * Constructs a new group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DatasetChangeEvent.DatasetChangeEvent#72",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetChangeEvent.java",
        "class_name": "org.jfree.data.general.DatasetChangeEvent",
        "signature": "org.jfree.data.general.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset)",
        "snippet": "    public DatasetChangeEvent(Object source, Dataset dataset) {\n        super(source);\n        this.dataset = dataset;\n    }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "\r\n     * Constructs a new event.  The source is either the dataset or the \r\n     * {@link org.jfree.chart.plot.Plot} class.  The dataset can be \r\n     * <code>null</code> (in this case the source will be the \r\n     * {@link org.jfree.chart.plot.Plot} class).\r\n     *\r\n     * @param source  the source of the event.\r\n     * @param dataset  the dataset that generated the event (<code>null</code>\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractDataset.AbstractDataset#96",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset()",
        "snippet": "    protected AbstractDataset() {\n        this.group = new DatasetGroup();\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 96,
        "end_line": 99,
        "comment": "\r\n     * Constructs a dataset. By default, the dataset is assigned to its own \r\n     * group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractDataset.addChangeListener#133",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.addChangeListener(org.jfree.data.general.DatasetChangeListener)",
        "snippet": "    public void addChangeListener(DatasetChangeListener listener) {\n        this.listenerList.add(DatasetChangeListener.class, listener);\n    }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "\r\n     * Registers an object to receive notification of changes to the dataset.\r\n     *\r\n     * @param listener  the object to register.\r\n     * \r\n     * @see #removeChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractDataset.fireDatasetChanged#171",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.fireDatasetChanged()",
        "snippet": "    protected void fireDatasetChanged() {\n        notifyListeners(new DatasetChangeEvent(this, this));\n    }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     * \r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractDataset.notifyListeners#184",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.notifyListeners(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    protected void notifyListeners(DatasetChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == DatasetChangeListener.class) {\n                ((DatasetChangeListener) listeners[i + 1]).datasetChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 184,
        "end_line": 194,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     *\r\n     * @param event  contains information about the event that triggered the \r\n     *               notification.\r\n     *               \r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     * @see #removeChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RangeType.RangeType#76",
        "is_bug": false,
        "src_path": "source/org/jfree/data/RangeType.java",
        "class_name": "org.jfree.data.RangeType",
        "signature": "org.jfree.data.RangeType.RangeType(java.lang.String)",
        "snippet": "    private RangeType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Range.Range#85",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.Range(double, double)",
        "snippet": "    public Range(double lower, double upper) {\n        if (lower > upper) {\n            String msg = \"Range(double, double): require lower (\" + lower \n                + \") <= upper (\" + upper + \").\";\n            throw new IllegalArgumentException(msg);\n        }\n        this.lower = lower;\n        this.upper = upper;\n    }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "\r\n     * Creates a new range.\r\n     *\r\n     * @param lower  the lower bound (must be <= upper bound).\r\n     * @param upper  the upper bound (must be >= lower bound).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Range.getLowerBound#100",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getLowerBound()",
        "snippet": "    public double getLowerBound() {\n        return this.lower;\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\r\n     * Returns the lower bound for the range.\r\n     *\r\n     * @return The lower bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Range.getUpperBound#109",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getUpperBound()",
        "snippet": "    public double getUpperBound() {\n        return this.upper;\n    }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\r\n     * Returns the upper bound for the range.\r\n     *\r\n     * @return The upper bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Range.contains#139",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.contains(double)",
        "snippet": "    public boolean contains(double value) {\n        return (value >= this.lower && value <= this.upper);\n    }\n",
        "begin_line": 139,
        "end_line": 141,
        "comment": "\r\n     * Returns <code>true</code> if the range contains the specified value and \r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param value  the value to lookup.\r\n     *\r\n     * @return <code>true</code> if the range contains the specified value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Range.combine#198",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.combine(org.jfree.data.Range, org.jfree.data.Range)",
        "snippet": "    public static Range combine(Range range1, Range range2) {\n        if (range1 == null) {\n            return range2;\n        }\n        else {\n            if (range2 == null) {\n                return range1;\n            }\n            else {\n                double l = Math.min(range1.getLowerBound(), \n                        range2.getLowerBound());\n                double u = Math.max(range1.getUpperBound(), \n                        range2.getUpperBound());\n                return new Range(l, u);\n            }\n        }\n    }\n",
        "begin_line": 198,
        "end_line": 214,
        "comment": "\r\n     * Creates a new range by combining two existing ranges.\r\n     * <P>\r\n     * Note that:\r\n     * <ul>\r\n     *   <li>either range can be <code>null</code>, in which case the other \r\n     *       range is returned;</li>\r\n     *   <li>if both ranges are <code>null</code> the return value is \r\n     *       <code>null</code>.</li>\r\n     * </ul>\r\n     *\r\n     * @param range1  the first range (<code>null</code> permitted).\r\n     * @param range2  the second range (<code>null</code> permitted).\r\n     *\r\n     * @return A new range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Range.expandToInclude#227",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.expandToInclude(org.jfree.data.Range, double)",
        "snippet": "    public static Range expandToInclude(Range range, double value) {\n        if (range == null) {\n            return new Range(value, value);\n        }\n        if (value < range.getLowerBound()) {\n            return new Range(value, range.getUpperBound());\n        }\n        else if (value > range.getUpperBound()) {\n            return new Range(range.getLowerBound(), value);\n        }\n        else {\n            return range;\n        }\n    }\n",
        "begin_line": 227,
        "end_line": 240,
        "comment": "\r\n     * Returns a range that includes all the values in the specified \r\n     * <code>range</code> AND the specified <code>value</code>.\r\n     * \r\n     * @param range  the range (<code>null</code> permitted).\r\n     * @param value  the value that must be included.\r\n     * \r\n     * @return A range.\r\n     * \r\n     * @since 1.0.1\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects2D.KeyedObjects2D#74",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.KeyedObjects2D()",
        "snippet": "    public KeyedObjects2D() {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n    }\n",
        "begin_line": 74,
        "end_line": 78,
        "comment": "\r\n     * Creates a new instance (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects2D.getRowCount#85",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getRowCount()",
        "snippet": "    public int getRowCount() {\n        return this.rowKeys.size();\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\r\n     * Returns the row count.\r\n     *\r\n     * @return The row count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects2D.getColumnCount#94",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.columnKeys.size();\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\r\n     * Returns the column count.\r\n     *\r\n     * @return The column count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects2D.getObject#106",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getObject(int, int)",
        "snippet": "    public Object getObject(int row, int column) {\n\n        Object result = null;\n        KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n        if (rowData != null) {\n            Comparable columnKey = (Comparable) this.columnKeys.get(column);\n            if (columnKey != null) {\n                result = rowData.getObject(columnKey);\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 106,
        "end_line": 118,
        "comment": "\r\n     * Returns the object for a given row and column.\r\n     *\r\n     * @param row  the row index.\r\n     * @param column  the column index.\r\n     *\r\n     * @return The object.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects2D.getRowKey#127",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getRowKey(int)",
        "snippet": "    public Comparable getRowKey(int row) {\n        return (Comparable) this.rowKeys.get(row);\n    }\n",
        "begin_line": 127,
        "end_line": 129,
        "comment": "\r\n     * Returns the key for a given row.\r\n     *\r\n     * @param row  the row index (zero based).\r\n     *\r\n     * @return The row index.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects2D.getColumnKey#158",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getColumnKey(int)",
        "snippet": "    public Comparable getColumnKey(int column) {\n        return (Comparable) this.columnKeys.get(column);\n    }\n",
        "begin_line": 158,
        "end_line": 160,
        "comment": "\r\n     * Returns the key for a given column.\r\n     *\r\n     * @param column  the column.\r\n     *\r\n     * @return The key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects2D.addObject#209",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.addObject(java.lang.Object, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addObject(Object object, \n                          Comparable rowKey, \n                          Comparable columnKey) {\n        setObject(object, rowKey, columnKey);\n    }\n",
        "begin_line": 209,
        "end_line": 213,
        "comment": "\r\n     * Adds an object to the table.  Performs the same function as setObject().\r\n     *\r\n     * @param object  the object.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects2D.setObject#222",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.setObject(java.lang.Object, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void setObject(Object object, \n                          Comparable rowKey, \n                          Comparable columnKey) {\n\n        KeyedObjects row;\n        int rowIndex = this.rowKeys.indexOf(rowKey);\n        if (rowIndex >= 0) {\n            row = (KeyedObjects) this.rows.get(rowIndex);\n        }\n        else {\n            this.rowKeys.add(rowKey);\n            row = new KeyedObjects();\n            this.rows.add(row);\n        }\n        row.setObject(columnKey, object);\n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n\n    }\n",
        "begin_line": 222,
        "end_line": 242,
        "comment": "\r\n     * Adds or updates an object.\r\n     *\r\n     * @param object  the object.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects.KeyedObjects#67",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.KeyedObjects()",
        "snippet": "    public KeyedObjects() {\n        this.data = new java.util.ArrayList();\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\r\n     * Creates a new collection (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects.getObject#87",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.getObject(int)",
        "snippet": "    public Object getObject(int item) {\n        Object result = null;\n        if (item >= 0 && item < this.data.size()) {\n            KeyedObject kobj = (KeyedObject) this.data.get(item);\n            if (kobj != null) {\n                result = kobj.getObject();\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 87,
        "end_line": 96,
        "comment": "\r\n     * Returns an object.\r\n     *\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return The object (<code>null</code> if the index is out of range).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects.getIndex#125",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.getIndex(java.lang.Comparable)",
        "snippet": "    public int getIndex(Comparable key) {\n        int result = -1;\n        int i = 0;\n        Iterator iterator = this.data.iterator();\n        while (iterator.hasNext()) {\n            KeyedObject ko = (KeyedObject) iterator.next();\n            if (ko.getKey().equals(key)) {\n                result = i;\n            }\n            i++;\n        }\n        return result;\n    }\n",
        "begin_line": 125,
        "end_line": 137,
        "comment": "\r\n     * Returns the index for a given key.\r\n     *\r\n     * @param key  the key.\r\n     *\r\n     * @return The index, or <code>-1</code> if the key is unrecognised.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects.getObject#162",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.getObject(java.lang.Comparable)",
        "snippet": "    public Object getObject(Comparable key) {\n        return getObject(getIndex(key));\n    }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "\r\n     * Returns the object for a given key. If the key is not recognised, the \r\n     * method should return <code>null</code>.\r\n     *\r\n     * @param key  the key.\r\n     *\r\n     * @return The object (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObjects.setObject#185",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.setObject(java.lang.Comparable, java.lang.Object)",
        "snippet": "    public void setObject(Comparable key, Object object) {\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            KeyedObject ko = (KeyedObject) this.data.get(keyIndex);\n            ko.setObject(object);\n        }\n        else {\n            KeyedObject ko = new KeyedObject(key, object);\n            this.data.add(ko);\n        }\n    }\n",
        "begin_line": 185,
        "end_line": 195,
        "comment": "\r\n     * Replaces an existing object, or adds a new object to the collection.\r\n     * This is the same as the {@link #addObject(Comparable, Object)} \r\n     * method.\r\n     *\r\n     * @param key  the key.\r\n     * @param object  the object.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObject.KeyedObject#74",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "class_name": "org.jfree.data.KeyedObject",
        "signature": "org.jfree.data.KeyedObject.KeyedObject(java.lang.Comparable, java.lang.Object)",
        "snippet": "    public KeyedObject(Comparable key, Object object) {\n        this.key = key;\n        this.object = object;\n    }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "\r\n     * Creates a new (key, object) pair.\r\n     *\r\n     * @param key  the key.\r\n     * @param object  the object (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObject.getKey#84",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "class_name": "org.jfree.data.KeyedObject",
        "signature": "org.jfree.data.KeyedObject.getKey()",
        "snippet": "    public Comparable getKey() {\n        return this.key;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\r\n     * Returns the key.\r\n     *\r\n     * @return The key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "KeyedObject.getObject#93",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "class_name": "org.jfree.data.KeyedObject",
        "signature": "org.jfree.data.KeyedObject.getObject()",
        "snippet": "    public Object getObject() {\n        return this.object;\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\r\n     * Returns the object.\r\n     *\r\n     * @return The object (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "VerticalAlignment.VerticalAlignment#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "signature": "org.jfree.chart.util.VerticalAlignment.VerticalAlignment(java.lang.String)",
        "snippet": "    private VerticalAlignment(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnitType.UnitType#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.UnitType(java.lang.String)",
        "snippet": "    private UnitType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "StrokeList.getStroke#70",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.getStroke(int)",
        "snippet": "    public Stroke getStroke(int index) {\n        return (Stroke) get(index);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns a {@link Stroke} object from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return The object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "SortOrder.SortOrder#51",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "class_name": "org.jfree.chart.util.SortOrder",
        "signature": "org.jfree.chart.util.SortOrder.SortOrder(java.lang.String)",
        "snippet": "    private SortOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Size2D.Size2D#48",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.Size2D()",
        "snippet": "    public Size2D() {\n        this(0.0, 0.0);\n    }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "\n     * Creates a new instance with zero width and height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Size2D.Size2D#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.Size2D(double, double)",
        "snippet": "    public Size2D(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "\n     * Creates a new instance with the specified width and height.\n     *\n     * @param width  the width.\n     * @param height  the height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Size2D.getWidth#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.getWidth()",
        "snippet": "    public double getWidth() {\n        return this.width;\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the width.\n     *\n     * @return The width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Size2D.getHeight#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.getHeight()",
        "snippet": "    public double getHeight() {\n        return this.height;\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Returns the height.\n     *\n     * @return The height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ShapeUtilities.createTranslatedShape#332",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeUtilities.java",
        "class_name": "org.jfree.chart.util.ShapeUtilities",
        "signature": "org.jfree.chart.util.ShapeUtilities.createTranslatedShape(java.awt.Shape, org.jfree.chart.util.RectangleAnchor, double, double)",
        "snippet": "    public static Shape createTranslatedShape(Shape shape, \n                                              RectangleAnchor anchor, \n                                              double locationX,\n                                              double locationY) {\n        if (shape == null) {\n            throw new IllegalArgumentException(\"Null 'shape' argument.\");\n        }        \n        if (anchor == null) {\n            throw new IllegalArgumentException(\"Null 'anchor' argument.\");\n        }\n        Point2D anchorPoint = RectangleAnchor.coordinates(shape.getBounds2D(), \n                anchor);\n        AffineTransform transform = AffineTransform.getTranslateInstance(\n                locationX - anchorPoint.getX(), locationY - anchorPoint.getY());\n        return transform.createTransformedShape(shape);   \n    }\n",
        "begin_line": 332,
        "end_line": 347,
        "comment": "\n     * Translates a shape to a new location such that the anchor point \n     * (relative to the rectangular bounds of the shape) aligns with the \n     * specified (x, y) coordinate in Java2D space.\n     *  \n     * @param shape  the shape (<code>null</code> not permitted).\n     * @param anchor  the anchor (<code>null</code> not permitted).\n     * @param locationX  the x-coordinate (in Java2D space).\n     * @param locationY  the y-coordinate (in Java2D space).\n     * \n     * @return A new and translated shape.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ShapeUtilities.rotateShape#360",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeUtilities.java",
        "class_name": "org.jfree.chart.util.ShapeUtilities",
        "signature": "org.jfree.chart.util.ShapeUtilities.rotateShape(java.awt.Shape, double, float, float)",
        "snippet": "    public static Shape rotateShape(Shape base, double angle,\n                                    float x, float y) {\n        if (base == null) {\n            return null;\n        }\n        AffineTransform rotate = AffineTransform.getRotateInstance(angle, x, y);\n        Shape result = rotate.createTransformedShape(base);\n        return result;\n    }\n",
        "begin_line": 360,
        "end_line": 368,
        "comment": "\n     * Rotates a shape about the specified coordinates.\n     * \n     * @param base  the shape (<code>null</code> permitted, returns \n     *              <code>null</code>).\n     * @param angle  the angle (in radians).\n     * @param x  the x coordinate for the rotation point (in Java2D space).\n     * @param y  the y coordinate for the rotation point (in Java2D space).\n     * \n     * @return the rotated shape.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.RectangleInsets#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double)",
        "snippet": "    public RectangleInsets(double top, double left, double bottom, \n            double right) {\n        this(UnitType.ABSOLUTE, top, left, bottom, right);   \n    }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "\n     * Creates a new instance with the specified insets (as 'absolute' units).\n     * \n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.RectangleInsets#92",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double)",
        "snippet": "    public RectangleInsets(UnitType unitType, double top, double left, \n                           double bottom, double right) {\n        if (unitType == null) {\n            throw new IllegalArgumentException(\"Null 'unitType' argument.\");\n        }\n        this.unitType = unitType;\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n",
        "begin_line": 92,
        "end_line": 102,
        "comment": "\n     * Creates a new instance.\n     * \n     * @param unitType  absolute or relative units (<code>null</code> not \n     *                  permitted).\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.getTop#119",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.getTop()",
        "snippet": "    public double getTop() {\n        return this.top;\n    }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n     * Returns the top insets.\n     * \n     * @return The top insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.getBottom#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.getBottom()",
        "snippet": "    public double getBottom() {\n        return this.bottom;\n    }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n     * Returns the bottom insets.\n     * \n     * @return The bottom insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.getLeft#137",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.getLeft()",
        "snippet": "    public double getLeft() {\n        return this.left;\n    }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n     * Returns the left insets.\n     * \n     * @return The left insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.getRight#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.getRight()",
        "snippet": "    public double getRight() {\n        return this.right;\n    }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n     * Returns the right insets.\n     * \n     * @return The right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.createOutsetRectangle#311",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.createOutsetRectangle(java.awt.geom.Rectangle2D)",
        "snippet": "    public Rectangle2D createOutsetRectangle(Rectangle2D base) {\n        return createOutsetRectangle(base, true, true);\n    }\n",
        "begin_line": 311,
        "end_line": 313,
        "comment": "\n     * Creates an outset rectangle.\n     * \n     * @param base  the base rectangle (<code>null</code> not permitted).\n     * \n     * @return An outset rectangle.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.createOutsetRectangle#324",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.createOutsetRectangle(java.awt.geom.Rectangle2D, boolean, boolean)",
        "snippet": "    public Rectangle2D createOutsetRectangle(Rectangle2D base,\n                                             boolean horizontal, \n                                             boolean vertical) {\n        if (base == null) {\n            throw new IllegalArgumentException(\"Null 'base' argument.\");\n        }\n        double topMargin = 0.0;\n        double bottomMargin = 0.0;\n        if (vertical) {\n            topMargin = calculateTopOutset(base.getHeight());\n            bottomMargin = calculateBottomOutset(base.getHeight());\n        }\n        double leftMargin = 0.0;\n        double rightMargin = 0.0;\n        if (horizontal) {\n            leftMargin = calculateLeftOutset(base.getWidth());\n            rightMargin = calculateRightOutset(base.getWidth());\n        }\n        return new Rectangle2D.Double(\n            base.getX() - leftMargin, \n            base.getY() - topMargin,\n            base.getWidth() + leftMargin + rightMargin,\n            base.getHeight() + topMargin + bottomMargin\n        );\n    }\n",
        "begin_line": 324,
        "end_line": 348,
        "comment": "\n     * Creates an outset rectangle.\n     * \n     * @param base  the base rectangle (<code>null</code> not permitted).\n     * @param horizontal  apply horizontal insets?\n     * @param vertical  apply vertical insets? \n     * \n     * @return An outset rectangle.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.calculateTopInset#357",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateTopInset(double)",
        "snippet": "    public double calculateTopInset(double height) {\n        double result = this.top;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.top * height);\n        }\n        return result;\n    }\n",
        "begin_line": 357,
        "end_line": 363,
        "comment": "\n     * Returns the top margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The top margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.calculateTopOutset#372",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateTopOutset(double)",
        "snippet": "    public double calculateTopOutset(double height) {\n        double result = this.top;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (height / (1 - this.top - this.bottom)) * this.top;\n        }\n        return result;\n    }\n",
        "begin_line": 372,
        "end_line": 378,
        "comment": "\n     * Returns the top margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The top margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.calculateBottomInset#387",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomInset(double)",
        "snippet": "    public double calculateBottomInset(double height) {\n        double result = this.bottom;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.bottom * height);\n        }\n        return result;\n    }\n",
        "begin_line": 387,
        "end_line": 393,
        "comment": "\n     * Returns the bottom margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The bottom margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.calculateBottomOutset#402",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomOutset(double)",
        "snippet": "    public double calculateBottomOutset(double height) {\n        double result = this.bottom;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (height / (1 - this.top - this.bottom)) * this.bottom;\n        }\n        return result;\n    }\n",
        "begin_line": 402,
        "end_line": 408,
        "comment": "\n     * Returns the bottom margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The bottom margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.calculateLeftInset#417",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftInset(double)",
        "snippet": "    public double calculateLeftInset(double width) {\n        double result = this.left;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.left * width);\n        }\n        return result;\n    }\n",
        "begin_line": 417,
        "end_line": 423,
        "comment": "\n     * Returns the left margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The left margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.calculateLeftOutset#432",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftOutset(double)",
        "snippet": "    public double calculateLeftOutset(double width) {\n        double result = this.left;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (width / (1 - this.left - this.right)) * this.left;\n        }\n        return result;\n    }\n",
        "begin_line": 432,
        "end_line": 438,
        "comment": "\n     * Returns the left margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The left margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.calculateRightInset#447",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateRightInset(double)",
        "snippet": "    public double calculateRightInset(double width) {\n        double result = this.right;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.right * width);\n        }\n        return result;\n    }\n",
        "begin_line": 447,
        "end_line": 453,
        "comment": "\n     * Returns the right margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The right margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.calculateRightOutset#462",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateRightOutset(double)",
        "snippet": "    public double calculateRightOutset(double width) {\n        double result = this.right;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (width / (1 - this.left - this.right)) * this.right;\n        }\n        return result;\n    }\n",
        "begin_line": 462,
        "end_line": 468,
        "comment": "\n     * Returns the right margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The right margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.trimWidth#477",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trimWidth(double)",
        "snippet": "    public double trimWidth(double width) {\n        return width - calculateLeftInset(width) - calculateRightInset(width);   \n    }\n",
        "begin_line": 477,
        "end_line": 479,
        "comment": "\n     * Trims the given width to allow for the insets.\n     * \n     * @param width  the width.\n     * \n     * @return The trimmed width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.extendWidth#488",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.extendWidth(double)",
        "snippet": "    public double extendWidth(double width) {\n        return width + calculateLeftOutset(width) + calculateRightOutset(width);   \n    }\n",
        "begin_line": 488,
        "end_line": 490,
        "comment": "\n     * Extends the given width to allow for the insets.\n     * \n     * @param width  the width.\n     * \n     * @return The extended width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.trimHeight#499",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trimHeight(double)",
        "snippet": "    public double trimHeight(double height) {\n        return height \n               - calculateTopInset(height) - calculateBottomInset(height);   \n    }\n",
        "begin_line": 499,
        "end_line": 502,
        "comment": "\n     * Trims the given height to allow for the insets.\n     * \n     * @param height  the height.\n     * \n     * @return The trimmed height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.extendHeight#511",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.extendHeight(double)",
        "snippet": "    public double extendHeight(double height) {\n        return height \n               + calculateTopOutset(height) + calculateBottomOutset(height);   \n    }\n",
        "begin_line": 511,
        "end_line": 514,
        "comment": "\n     * Extends the given height to allow for the insets.\n     * \n     * @param height  the height.\n     * \n     * @return The extended height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleInsets.trim#521",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trim(java.awt.geom.Rectangle2D)",
        "snippet": "    public void trim(Rectangle2D area) {\n        double w = area.getWidth();\n        double h = area.getHeight();\n        double l = calculateLeftInset(w);\n        double r = calculateRightInset(w);\n        double t = calculateTopInset(h);\n        double b = calculateBottomInset(h);\n        area.setRect(area.getX() + l, area.getY() + t, w - l - r, h - t - b);    \n    }\n",
        "begin_line": 521,
        "end_line": 529,
        "comment": "\n     * Shrinks the given rectangle by the amount of these insets.\n     * \n     * @param area  the area (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleEdge.RectangleEdge#57",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.RectangleEdge(java.lang.String)",
        "snippet": "    private RectangleEdge(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleEdge.equals#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof RectangleEdge)) {\n            return false;\n        }\n\n        RectangleEdge order = (RectangleEdge) obj;\n        if (!this.name.equals(order.name)) {\n            return false;\n        }\n\n        return true;\n\n    }\n",
        "begin_line": 78,
        "end_line": 94,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleEdge.isTopOrBottom#113",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.isTopOrBottom(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public static boolean isTopOrBottom(RectangleEdge edge) {\n        return (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM);    \n    }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n     * Returns <code>true</code> if the edge is <code>TOP</code> or \n     * <code>BOTTOM</code>, and <code>false</code> otherwise.\n     * \n     * @param edge  the edge.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleEdge.isLeftOrRight#125",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.isLeftOrRight(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public static boolean isLeftOrRight(RectangleEdge edge) {\n        return (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT);    \n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n     * Returns <code>true</code> if the edge is <code>LEFT</code> or \n     * <code>RIGHT</code>, and <code>false</code> otherwise.\n     * \n     * @param edge  the edge.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleAnchor.RectangleAnchor#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.RectangleAnchor(java.lang.String)",
        "snippet": "    private RectangleAnchor(final String name) {\n        this.name = name;\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleAnchor.coordinates#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.coordinates(java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleAnchor)",
        "snippet": "    public static Point2D coordinates(final Rectangle2D rectangle, \n                                      final RectangleAnchor anchor) {\n        Point2D result = new Point2D.Double();\n        if (anchor == RectangleAnchor.CENTER) {\n            result.setLocation(rectangle.getCenterX(), rectangle.getCenterY());\n        }\n        else if (anchor == RectangleAnchor.TOP) {\n            result.setLocation(rectangle.getCenterX(), rectangle.getMinY());\n        }\n        else if (anchor == RectangleAnchor.BOTTOM) {\n            result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());\n        }\n        else if (anchor == RectangleAnchor.LEFT) {\n            result.setLocation(rectangle.getMinX(), rectangle.getCenterY());\n        }\n        else if (anchor == RectangleAnchor.RIGHT) {\n            result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());\n        }\n        else if (anchor == RectangleAnchor.TOP_LEFT) {\n            result.setLocation(rectangle.getMinX(), rectangle.getMinY());\n        }\n        else if (anchor == RectangleAnchor.TOP_RIGHT) {\n            result.setLocation(rectangle.getMaxX(), rectangle.getMinY());\n        }\n        else if (anchor == RectangleAnchor.BOTTOM_LEFT) {\n            result.setLocation(rectangle.getMinX(), rectangle.getMaxY());\n        }\n        else if (anchor == RectangleAnchor.BOTTOM_RIGHT) {\n            result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());\n        }\n        return result;\n    }\n",
        "begin_line": 138,
        "end_line": 169,
        "comment": "\n     * Returns the (x, y) coordinates of the specified anchor.\n     * \n     * @param rectangle  the rectangle.\n     * @param anchor  the anchor.\n     * \n     * @return The (x, y) coordinates.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "PaintList.getPaint#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.getPaint(int)",
        "snippet": "    public Paint getPaint(int index) {\n        return (Paint) get(index);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns a {@link Paint} object from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return The object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "PaintList.setPaint#82",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.setPaint(int, java.awt.Paint)",
        "snippet": "    public void setPaint(int index, Paint paint) {\n        set(index, paint);\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Sets the {@link Paint} for an item in the list.  The list is expanded \n     * if necessary.\n     *\n     * @param index  the index (zero-based).\n     * @param paint  the {@link Paint}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectUtilities.getClassLoader#256",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "signature": "org.jfree.chart.util.ObjectUtilities.getClassLoader(java.lang.Class)",
        "snippet": "    public synchronized static ClassLoader getClassLoader(final Class c) {\n        if (classLoader != null) {\n            return classLoader;\n        }\n        if (\"ThreadContext\".equals(classLoaderSource)) {\n            final ClassLoader threadLoader\n                = Thread.currentThread().getContextClassLoader();\n            if (threadLoader != null) {\n                return threadLoader;\n            }\n        }\n\n        // Context classloader - do not cache ..\n        final ClassLoader applicationCL = c.getClassLoader();\n        if (applicationCL == null) {\n            return ClassLoader.getSystemClassLoader();\n        }\n        else {\n            return applicationCL;\n        }\n    }\n",
        "begin_line": 256,
        "end_line": 276,
        "comment": "\n     * Returns the classloader, which was responsible for loading the given\n     * class.\n     *\n     * @param c the classloader, either an application class loader or the\n     *          boot loader.\n     * @return the classloader, never null.\n     * @throws SecurityException if the SecurityManager does not allow to grab\n     *                           the context classloader.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectUtilities.isJDK14#440",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "signature": "org.jfree.chart.util.ObjectUtilities.isJDK14()",
        "snippet": "    public static boolean isJDK14() {\n        ClassLoader loader = getClassLoader(ObjectUtilities.class);\n        if (loader != null) {\n            try {\n              loader.loadClass(\"java.util.RandomAccess\");\n              return true;\n            }\n            catch (ClassNotFoundException e) {\n              return false;\n            }\n            catch(Exception e) {\n              // do nothing, but do not crash ...\n            }\n        }\n        // OK, the quick and dirty, but secure way failed. Lets try it\n        // using the standard way.\n        try {\n            String version = System.getProperty(\n                    \"java.vm.specification.version\");\n            // parse the beast...\n            if (version == null) {\n                return false;\n            }\n\n            String[] versions = parseVersions(version);\n            String[] target = new String[]{ \"1\", \"4\" };\n            return (ArrayUtilities.compareVersionArrays(versions, target) >= 0);\n        }\n        catch(Exception e) {\n            return false;\n        }\n    }\n",
        "begin_line": 440,
        "end_line": 471,
        "comment": "\n     * Returns <code>true</code> if we are running on JRE 1.4 or later.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectList.get#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.get(int)",
        "snippet": "    public Object get(int index) {         \n        return super.get(index);         \n    }    \n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "          \n     * Returns the object at the specified index, if there is one, or \n     * <code>null</code>.         \n     *   \n     * @param index  the object index.   \n     *   \n     * @return The object or <code>null</code>.          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectList.set#96",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.set(int, java.lang.Object)",
        "snippet": "    public void set(int index, Object object) {      \n        super.set(index, object);        \n    }    \n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "          \n     * Sets an object reference (overwriting any existing object).       \n     *   \n     * @param index  the object index.   \n     * @param object  the object (<code>null</code> permitted).          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectList.indexOf#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.indexOf(java.lang.Object)",
        "snippet": "    public int indexOf(Object object) {    \n        return super.indexOf(object);    \n    }    \n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "          \n     * Returns the index of the specified object, or -1 if the object is not \n     * in the list.        \n     *   \n     * @param object  the object.        \n     *   \n     * @return The index or -1.          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LengthAdjustmentType.LengthAdjustmentType#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.LengthAdjustmentType(java.lang.String)",
        "snippet": "    private LengthAdjustmentType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Layer.Layer#46",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "class_name": "org.jfree.chart.util.Layer",
        "signature": "org.jfree.chart.util.Layer.Layer(java.lang.String)",
        "snippet": "    private Layer(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Layer.equals#67",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "class_name": "org.jfree.chart.util.Layer",
        "signature": "org.jfree.chart.util.Layer.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof Layer)) {\n            return false;\n        }\n\n        Layer layer = (Layer) obj;\n        if (!this.name.equals(layer.name)) {\n            return false;\n        }\n\n        return true;\n\n    }\n",
        "begin_line": 67,
        "end_line": 83,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "HorizontalAlignment.HorizontalAlignment#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "signature": "org.jfree.chart.util.HorizontalAlignment.HorizontalAlignment(java.lang.String)",
        "snippet": "    private HorizontalAlignment(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BooleanList.getBoolean#72",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "class_name": "org.jfree.chart.util.BooleanList",
        "signature": "org.jfree.chart.util.BooleanList.getBoolean(int)",
        "snippet": "    public Boolean getBoolean(int index) {\n        return (Boolean) get(index);\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns a {@link Boolean} from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return a {@link Boolean} from the list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.get#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.get(int)",
        "snippet": "    protected Object get(int index) {\n        Object result = null;\n        if (index >= 0 && index < this.size) {\n            result = this.objects[index];\n        }\n        return result;\n    }\n",
        "begin_line": 108,
        "end_line": 114,
        "comment": "\n     * Returns the object at the specified index, if there is one, or \n     * <code>null</code>.\n     *\n     * @param index  the object index.\n     *\n     * @return The object or <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.set#122",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.set(int, java.lang.Object)",
        "snippet": "    protected void set(int index, Object object) {\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Requires index >= 0.\");\n        }\n        if (index >= this.objects.length) {\n            Object[] enlarged = new Object[index + this.increment];\n            System.arraycopy(this.objects, 0, enlarged, 0, this.objects.length);\n            this.objects = enlarged;\n        }\n        this.objects[index] = object;\n        this.size = Math.max(this.size, index + 1);\n    }\n",
        "begin_line": 122,
        "end_line": 133,
        "comment": "\n     * Sets an object reference (overwriting any existing object).\n     *\n     * @param index  the object index.\n     * @param object  the object (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.indexOf#160",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.indexOf(java.lang.Object)",
        "snippet": "    protected int indexOf(Object object) {\n        for (int index = 0; index < this.size; index++) {\n            if (this.objects[index] == object) {\n                return (index);\n            }\n        }\n        return -1;\n    }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "\n     * Returns the index of the specified object, or -1 if the object is not in\n     * the list.\n     *\n     * @param object  the object.\n     *\n     * @return The index or -1.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProjectInfo.ProjectInfo#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.ProjectInfo()",
        "snippet": "    public ProjectInfo() {\n        // nothing required\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Constructs an empty project info object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProjectInfo.setLogo#112",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setLogo(java.awt.Image)",
        "snippet": "    public void setLogo(final Image logo) {\n        this.logo = logo;\n    }\n",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\n     * Sets the project logo.\n     *\n     * @param logo  the project logo.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProjectInfo.setLicenceText#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setLicenceText(java.lang.String)",
        "snippet": "    public void setLicenceText(final String licenceText) {\n        this.licenceText = licenceText;\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\n     * Sets the project licence text.\n     *\n     * @param licenceText  the licence text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProjectInfo.setContributors#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setContributors(java.util.List)",
        "snippet": "    public void setContributors(final List contributors) {\n        this.contributors = contributors;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Sets the list of contributors.\n     *\n     * @param contributors  the list of contributors.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Licences.getInstance#800",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "class_name": "org.jfree.chart.ui.Licences",
        "signature": "org.jfree.chart.ui.Licences.getInstance()",
        "snippet": "    public static Licences getInstance() {\n        if (singleton == null) {\n            singleton = new Licences();\n        }\n        return singleton;\n    }\n",
        "begin_line": 800,
        "end_line": 805,
        "comment": "\n     * Returns a reference to this class.\n     *\n     * @return the instance reference.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Licences.getLGPL#823",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "class_name": "org.jfree.chart.ui.Licences",
        "signature": "org.jfree.chart.ui.Licences.getLGPL()",
        "snippet": "    public String getLGPL() {\n        return LGPL;\n    }\n",
        "begin_line": 823,
        "end_line": 825,
        "comment": "\n     * Returns the LGPL text in a non static way to prevent the compiler\n     * to copy the contents of the field.\n     *\n     * @return the LGPL licence text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Library.Library#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.Library()",
        "snippet": "    protected Library() {\n        // nothing required\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Creates a new library reference.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Library.setInfo#129",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setInfo(java.lang.String)",
        "snippet": "    protected void setInfo(String info) {\n        this.info = info;\n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n     * Sets the project info.\n     * \n     * @param info  the project info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Library.setLicenceName#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setLicenceName(java.lang.String)",
        "snippet": "    protected void setLicenceName(String licenceName) {\n        this.licenceName = licenceName;\n    }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\n     * Sets the licence name.\n     * \n     * @param licenceName  the licence name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Library.setName#147",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setName(java.lang.String)",
        "snippet": "    protected void setName(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\n     * Sets the project name.\n     * \n     * @param name  the project name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Library.setVersion#156",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setVersion(java.lang.String)",
        "snippet": "    protected void setVersion(String version) {\n        this.version = version;\n    }\n",
        "begin_line": 156,
        "end_line": 158,
        "comment": "\n     * Sets the version identifier.\n     * \n     * @param version  the version identifier.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Contributor.Contributor#65",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Contributor.java",
        "class_name": "org.jfree.chart.ui.Contributor",
        "signature": "org.jfree.chart.ui.Contributor.Contributor(java.lang.String, java.lang.String)",
        "snippet": "    public Contributor(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\n     * Creates a new contributor.\n     *\n     * @param name  the name.\n     * @param email  the e-mail address.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicProjectInfo.BasicProjectInfo#147",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.BasicProjectInfo()",
        "snippet": "    public BasicProjectInfo() {\n        this.libraries = new ArrayList();\n        this.optionalLibraries = new ArrayList();\n    }\n",
        "begin_line": 147,
        "end_line": 150,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicProjectInfo.setCopyright#199",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setCopyright(java.lang.String)",
        "snippet": "    public void setCopyright(String copyright) {\n        this.copyright = copyright;\n    }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n     * Sets the project copyright statement.\n     *\n     * @param copyright  the project copyright statement.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicProjectInfo.setInfo#208",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setInfo(java.lang.String)",
        "snippet": "    public void setInfo(String info) {\n        super.setInfo(info);\n    }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n     * Sets the project info string (for example, this could be the project URL).\n     * \n     * @param info  the info string.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicProjectInfo.setLicenceName#217",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setLicenceName(java.lang.String)",
        "snippet": "    public void setLicenceName(String licence) {\n        super.setLicenceName(licence);\n    }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\n     * Sets the license name.\n     * \n     * @param licence  the license name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicProjectInfo.setName#226",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setName(java.lang.String)",
        "snippet": "    public void setName(String name) {\n        super.setName(name);\n    }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": "\n     * Sets the project name.\n     * \n     * @param name  the project name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicProjectInfo.setVersion#235",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setVersion(java.lang.String)",
        "snippet": "    public void setVersion(String version) {\n        super.setVersion(version);\n    }\n",
        "begin_line": 235,
        "end_line": 237,
        "comment": "\n     * Sets the project version number.\n     * \n     * @param version  the version number.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Title.Title#132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.Title()",
        "snippet": "    protected Title() {\n        this(Title.DEFAULT_POSITION,\n                Title.DEFAULT_HORIZONTAL_ALIGNMENT,\n                Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING);\n    }\n",
        "begin_line": 132,
        "end_line": 136,
        "comment": "\r\n     * Creates a new title, using default attributes where necessary.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Title.Title#171",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.Title(org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    protected Title(RectangleEdge position,\n                    HorizontalAlignment horizontalAlignment, \n                    VerticalAlignment verticalAlignment,\n                    RectangleInsets padding) {\n\n        // check arguments...\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");\n        }\n        if (horizontalAlignment == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'horizontalAlignment' argument.\");\n        }\n\n        if (verticalAlignment == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'verticalAlignment' argument.\");\n        }\n        if (padding == null) {\n            throw new IllegalArgumentException(\"Null 'spacer' argument.\");\n        }\n\n        this.position = position;\n        this.horizontalAlignment = horizontalAlignment;\n        this.verticalAlignment = verticalAlignment;\n        setPadding(padding);\n        this.listenerList = new EventListenerList();\n        this.notify = true;\n\n    }\n",
        "begin_line": 171,
        "end_line": 200,
        "comment": "\r\n     * Creates a new title.\r\n     *\r\n     * @param position  the position of the title (<code>null</code> not \r\n     *                  permitted).\r\n     * @param horizontalAlignment  the horizontal alignment of the title (LEFT,\r\n     *                             CENTER or RIGHT, <code>null</code> not \r\n     *                             permitted).\r\n     * @param verticalAlignment  the vertical alignment of the title (TOP, \r\n     *                           MIDDLE or BOTTOM, <code>null</code> not \r\n     *                           permitted).\r\n     * @param padding  the amount of space to leave around the outside of the \r\n     *                 title (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Title.getPosition#207",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.getPosition()",
        "snippet": "    public RectangleEdge getPosition() {\n        return this.position;\n    }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\r\n     * Returns the position of the title.\r\n     *\r\n     * @return The title position (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Title.setPosition#217",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.setPosition(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public void setPosition(RectangleEdge position) {\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");\n        }\n        if (this.position != position) {\n            this.position = position;\n            notifyListeners(new TitleChangeEvent(this));\n        }\n    }\n",
        "begin_line": 217,
        "end_line": 225,
        "comment": "\r\n     * Sets the position for the title and sends a {@link TitleChangeEvent} to \r\n     * all registered listeners.\r\n     *\r\n     * @param position  the position (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Title.getHorizontalAlignment#232",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.getHorizontalAlignment()",
        "snippet": "    public HorizontalAlignment getHorizontalAlignment() {\n        return this.horizontalAlignment;\n    }\n",
        "begin_line": 232,
        "end_line": 234,
        "comment": "\r\n     * Returns the horizontal alignment of the title.\r\n     *\r\n     * @return The horizontal alignment (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Title.addChangeListener#338",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.addChangeListener(org.jfree.chart.event.TitleChangeListener)",
        "snippet": "    public void addChangeListener(TitleChangeListener listener) {\n        this.listenerList.add(TitleChangeListener.class, listener);\n    }\n",
        "begin_line": 338,
        "end_line": 340,
        "comment": "\r\n     * Registers an object for notification of changes to the title.\r\n     *\r\n     * @param listener  the object that is being registered.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Title.notifyListeners#358",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.notifyListeners(org.jfree.chart.event.TitleChangeEvent)",
        "snippet": "    protected void notifyListeners(TitleChangeEvent event) {\n        if (this.notify) {\n            Object[] listeners = this.listenerList.getListenerList();\n            for (int i = listeners.length - 2; i >= 0; i -= 2) {\n                if (listeners[i] == TitleChangeListener.class) {\n                    ((TitleChangeListener) listeners[i + 1]).titleChanged(\n                            event);\n                }\n            }\n        }\n    }\n",
        "begin_line": 358,
        "end_line": 368,
        "comment": "\r\n     * Notifies all registered listeners that the chart title has changed in \r\n     * some way.\r\n     *\r\n     * @param event  an object that contains information about the change to \r\n     *               the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendTitle.LegendTitle#163",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource)",
        "snippet": "    public LegendTitle(LegendItemSource source) {\n        this(source, new FlowArrangement(), new ColumnArrangement());\n    }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "\r\n     * Constructs a new (empty) legend for the specified source.\r\n     * \r\n     * @param source  the source.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendTitle.LegendTitle#176",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource, org.jfree.chart.block.Arrangement, org.jfree.chart.block.Arrangement)",
        "snippet": "    public LegendTitle(LegendItemSource source, \n                       Arrangement hLayout, Arrangement vLayout) {\n        this.sources = new LegendItemSource[] {source};\n        this.items = new BlockContainer(hLayout);\n        this.hLayout = hLayout;\n        this.vLayout = vLayout;\n        this.backgroundPaint = null;  \n        this.legendItemGraphicEdge = RectangleEdge.LEFT;\n        this.legendItemGraphicAnchor = RectangleAnchor.CENTER;\n        this.legendItemGraphicLocation = RectangleAnchor.CENTER;\n        this.legendItemGraphicPadding = new RectangleInsets(2.0, 2.0, 2.0, 2.0);\n        this.itemFont = DEFAULT_ITEM_FONT;\n        this.itemPaint = DEFAULT_ITEM_PAINT;\n        this.itemLabelPadding = new RectangleInsets(2.0, 2.0, 2.0, 2.0);\n    }\n",
        "begin_line": 176,
        "end_line": 190,
        "comment": "\r\n     * Creates a new legend title with the specified arrangement.\r\n     * \r\n     * @param source  the source.\r\n     * @param hLayout  the horizontal item arrangement (<code>null</code> not\r\n     *                 permitted).\r\n     * @param vLayout  the vertical item arrangement (<code>null</code> not\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendTitle.setBackgroundPaint#230",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.setBackgroundPaint(java.awt.Paint)",
        "snippet": "    public void setBackgroundPaint(Paint paint) {\n        this.backgroundPaint = paint;   \n        notifyListeners(new TitleChangeEvent(this));\n    }\n",
        "begin_line": 230,
        "end_line": 233,
        "comment": "\r\n     * Sets the background paint for the legend and sends a \r\n     * {@link TitleChangeEvent} to all registered listeners.\r\n     * \r\n     * @param paint  the paint (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendTitle.getLegendItemGraphicAnchor#262",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.getLegendItemGraphicAnchor()",
        "snippet": "    public RectangleAnchor getLegendItemGraphicAnchor() {\n        return this.legendItemGraphicAnchor;\n    }\n",
        "begin_line": 262,
        "end_line": 264,
        "comment": "\r\n     * Returns the legend item graphic anchor.\r\n     * \r\n     * @return The graphic anchor (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendTitle.getLegendItemGraphicLocation#283",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.getLegendItemGraphicLocation()",
        "snippet": "    public RectangleAnchor getLegendItemGraphicLocation() {\n        return this.legendItemGraphicLocation;\n    }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "\r\n     * Returns the legend item graphic location.\r\n     * \r\n     * @return The location (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendTitle.fetchLegendItems#389",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.fetchLegendItems()",
        "snippet": "    protected void fetchLegendItems() {\n        this.items.clear();\n        RectangleEdge p = getPosition();\n        if (RectangleEdge.isTopOrBottom(p)) {\n            this.items.setArrangement(this.hLayout);   \n        }\n        else {\n            this.items.setArrangement(this.vLayout);   \n        }\n        for (int s = 0; s < this.sources.length; s++) {\n            LegendItemCollection legendItems = this.sources[s].getLegendItems();\n            if (legendItems != null) {\n                for (int i = 0; i < legendItems.getItemCount(); i++) {\n                    LegendItem item = legendItems.get(i);\n                    Block block = createLegendItemBlock(item);\n                    this.items.add(block);\n                }\n            }\n        }\n    }\n",
        "begin_line": 389,
        "end_line": 408,
        "comment": "\r\n     * Fetches the latest legend items.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendTitle.createLegendItemBlock#417",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.createLegendItemBlock(org.jfree.chart.LegendItem)",
        "snippet": "    protected Block createLegendItemBlock(LegendItem item) {\n        BlockContainer result = null;\n        LegendGraphic lg = new LegendGraphic(item.getShape(), \n                item.getFillPaint());\n        lg.setFillPaintTransformer(item.getFillPaintTransformer());\n        lg.setShapeFilled(item.isShapeFilled());\n        lg.setLine(item.getLine());\n        lg.setLineStroke(item.getLineStroke());\n        lg.setLinePaint(item.getLinePaint());\n        lg.setLineVisible(item.isLineVisible());\n        lg.setShapeVisible(item.isShapeVisible());\n        lg.setShapeOutlineVisible(item.isShapeOutlineVisible());\n        lg.setOutlinePaint(item.getOutlinePaint());\n        lg.setOutlineStroke(item.getOutlineStroke());\n        lg.setPadding(this.legendItemGraphicPadding);\n\n        LegendItemBlockContainer legendItem = new LegendItemBlockContainer(\n                new BorderArrangement(), item.getDataset(), \n                item.getSeriesKey());\n        lg.setShapeAnchor(getLegendItemGraphicAnchor());\n        lg.setShapeLocation(getLegendItemGraphicLocation());\n        legendItem.add(lg, this.legendItemGraphicEdge);\n        LabelBlock labelBlock = new LabelBlock(item.getLabel(), this.itemFont, \n                this.itemPaint);\n        labelBlock.setPadding(this.itemLabelPadding);\n        legendItem.add(labelBlock);\n        legendItem.setToolTipText(item.getToolTipText());\n        legendItem.setURLText(item.getURLText());\n        \n        result = new BlockContainer(new CenterArrangement());\n        result.add(legendItem);\n        \n        return result;\n    }\n",
        "begin_line": 417,
        "end_line": 450,
        "comment": "\r\n     * Creates a legend item block.\r\n     * \r\n     * @param item  the legend item.\r\n     * \r\n     * @return The block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendTitle.arrange#470",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        Size2D result = new Size2D();\n        fetchLegendItems();\n        if (this.items.isEmpty()) {\n            return result;   \n        }\n        BlockContainer container = this.wrapper;\n        if (container == null) {\n            container = this.items;\n        }\n        RectangleConstraint c = toContentConstraint(constraint);\n        Size2D size = container.arrange(g2, c);\n        result.height = calculateTotalHeight(size.height);\n        result.width = calculateTotalWidth(size.width);\n        return result;\n    }\n",
        "begin_line": 470,
        "end_line": 485,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendTitle.draw#508",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        Rectangle2D target = (Rectangle2D) area.clone();\n        target = trimMargin(target);\n        if (this.backgroundPaint != null) {\n            g2.setPaint(this.backgroundPaint);\n            g2.fill(target);\n        }\n        BlockFrame border = getFrame();\n        border.draw(g2, target);\n        border.getInsets().trim(target);\n        BlockContainer container = this.wrapper;\n        if (container == null) {\n            container = this.items; \n        }\n        target = trimPadding(target);\n        return container.draw(g2, target, params);   \n    }\n",
        "begin_line": 508,
        "end_line": 524,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  ignored (<code>null</code> permitted).\r\n     * \r\n     * @return An {@link org.jfree.chart.block.EntityBlockResult} or \r\n     *         <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItemBlockContainer.LegendItemBlockContainer#98",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.LegendItemBlockContainer(org.jfree.chart.block.Arrangement, org.jfree.data.general.Dataset, java.lang.Comparable)",
        "snippet": "    public LegendItemBlockContainer(Arrangement arrangement, Dataset dataset,\n            Comparable seriesKey) {\n        super(arrangement);\n        this.dataset = dataset;\n        this.seriesKey = seriesKey;\n    }\n",
        "begin_line": 98,
        "end_line": 103,
        "comment": "\r\n     * Creates a new legend item block.\r\n     * \r\n     * @param arrangement  the arrangement.\r\n     * @param dataset  the dataset.\r\n     * @param seriesKey  the series key.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItemBlockContainer.setToolTipText#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.setToolTipText(java.lang.String)",
        "snippet": "    public void setToolTipText(String text) {\n        this.toolTipText = text;   \n    }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\r\n     * Sets the tool tip text.\r\n     * \r\n     * @param text  the text (<code>null</code> permitted).\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItemBlockContainer.setURLText#167",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.setURLText(java.lang.String)",
        "snippet": "    public void setURLText(String text) {\n        this.urlText = text;   \n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\r\n     * Sets the URL text.\r\n     * \r\n     * @param text  the text (<code>null</code> permitted).\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItemBlockContainer.draw#181",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        // draw the block without collecting entities\n        super.draw(g2, area, null);\n        EntityBlockParams ebp = null;\n        BlockResult r = new BlockResult();\n        if (params instanceof EntityBlockParams) {\n            ebp = (EntityBlockParams) params;\n            if (ebp.getGenerateEntities()) {\n                EntityCollection ec = new StandardEntityCollection();\n                LegendItemEntity entity = new LegendItemEntity(\n                        (Shape) area.clone());\n                entity.setSeriesKey(this.seriesKey);\n                entity.setDataset(this.dataset);\n                entity.setToolTipText(getToolTipText());\n                entity.setURLText(getURLText());\n                ec.add(entity);\n                r.setEntityCollection(ec);\n            }\n        }\n        return r;\n    }\n",
        "begin_line": 181,
        "end_line": 201,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  passed on to blocks within the container \r\n     *                (<code>null</code> permitted).\r\n     * \r\n     * @return An instance of {@link EntityBlockResult}, or <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.LegendGraphic#154",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.LegendGraphic(java.awt.Shape, java.awt.Paint)",
        "snippet": "    public LegendGraphic(Shape shape, Paint fillPaint) {\n        if (shape == null) {\n            throw new IllegalArgumentException(\"Null 'shape' argument.\");\n        }\n        if (fillPaint == null) {\n            throw new IllegalArgumentException(\"Null 'fillPaint' argument.\");\n        }\n        this.shapeVisible = true;\n        this.shape = shape;\n        this.shapeAnchor = RectangleAnchor.CENTER;\n        this.shapeLocation = RectangleAnchor.CENTER;\n        this.shapeFilled = true;\n        this.fillPaint = fillPaint;\n        this.fillPaintTransformer = new StandardGradientPaintTransformer();\n        setPadding(2.0, 2.0, 2.0, 2.0);\n    }\n",
        "begin_line": 154,
        "end_line": 169,
        "comment": "\r\n     * Creates a new legend graphic.\r\n     * \r\n     * @param shape  the shape (<code>null</code> not permitted).\r\n     * @param fillPaint  the fill paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setShapeVisible#191",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setShapeVisible(boolean)",
        "snippet": "    public void setShapeVisible(boolean visible) {\n        this.shapeVisible = visible;\n    }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\r\n     * Sets a flag that controls whether or not the shape is \r\n     * visible.\r\n     * \r\n     * @param visible  the flag.\r\n     * \r\n     * @see #isShapeVisible()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setShapeFilled#237",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setShapeFilled(boolean)",
        "snippet": "    public void setShapeFilled(boolean filled) {\n        this.shapeFilled = filled;\n    }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "\r\n     * Sets a flag that controls whether or not the shape is\r\n     * filled.\r\n     * \r\n     * @param filled  the flag.\r\n     * \r\n     * @see #isShapeFilled()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setFillPaintTransformer#287",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)",
        "snippet": "    public void setFillPaintTransformer(GradientPaintTransformer transformer) {\n        if (transformer == null) {\n            throw new IllegalArgumentException(\"Null 'transformer' argument.\");\n        }\n        this.fillPaintTransformer = transformer;\n    }\n",
        "begin_line": 287,
        "end_line": 292,
        "comment": "\r\n     * Sets the transformer used when the fill paint is an instance of \r\n     * <code>GradientPaint</code>.\r\n     * \r\n     * @param transformer  the transformer (<code>null</code> not permitted).\r\n     * \r\n     * @since 1.0.4\r\n     * \r\n     * @see #getFillPaintTransformer()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setShapeOutlineVisible#313",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setShapeOutlineVisible(boolean)",
        "snippet": "    public void setShapeOutlineVisible(boolean visible) {\n        this.shapeOutlineVisible = visible;\n    }\n",
        "begin_line": 313,
        "end_line": 315,
        "comment": "\r\n     * Sets a flag that controls whether or not the shape outline\r\n     * is visible.\r\n     * \r\n     * @param visible  the flag.\r\n     * \r\n     * @see #isShapeOutlineVisible()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setOutlinePaint#335",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setOutlinePaint(java.awt.Paint)",
        "snippet": "    public void setOutlinePaint(Paint paint) {\n        this.outlinePaint = paint;\n    }\n",
        "begin_line": 335,
        "end_line": 337,
        "comment": "\r\n     * Sets the outline paint.\r\n     * \r\n     * @param paint  the paint.\r\n     * \r\n     * @see #getOutlinePaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setOutlineStroke#357",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setOutlineStroke(java.awt.Stroke)",
        "snippet": "    public void setOutlineStroke(Stroke stroke) {\n        this.outlineStroke = stroke;\n    }\n",
        "begin_line": 357,
        "end_line": 359,
        "comment": "\r\n     * Sets the outline stroke.\r\n     * \r\n     * @param stroke  the stroke.\r\n     * \r\n     * @see #getOutlineStroke()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setShapeAnchor#380",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setShapeAnchor(org.jfree.chart.util.RectangleAnchor)",
        "snippet": "    public void setShapeAnchor(RectangleAnchor anchor) {\n        if (anchor == null) {\n            throw new IllegalArgumentException(\"Null 'anchor' argument.\");\n        }\n        this.shapeAnchor = anchor;    \n    }\n",
        "begin_line": 380,
        "end_line": 385,
        "comment": "\r\n     * Sets the shape anchor.  This defines a point on the shapes bounding\r\n     * rectangle that will be used to align the shape to a location.\r\n     * \r\n     * @param anchor  the anchor (<code>null</code> not permitted).\r\n     * \r\n     * @see #setShapeAnchor(RectangleAnchor)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setShapeLocation#406",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setShapeLocation(org.jfree.chart.util.RectangleAnchor)",
        "snippet": "    public void setShapeLocation(RectangleAnchor location) {\n        if (location == null) {\n            throw new IllegalArgumentException(\"Null 'location' argument.\");\n        }\n        this.shapeLocation = location;\n    }\n",
        "begin_line": 406,
        "end_line": 411,
        "comment": "\r\n     * Sets the shape location.  This defines a point within the drawing\r\n     * area that will be used to align the shape to.\r\n     * \r\n     * @param location  the location (<code>null</code> not permitted).\r\n     * \r\n     * @see #getShapeLocation()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setLineVisible#431",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setLineVisible(boolean)",
        "snippet": "    public void setLineVisible(boolean visible) {\n        this.lineVisible = visible;\n    }\n",
        "begin_line": 431,
        "end_line": 433,
        "comment": "\r\n     * Sets the flag that controls whether or not the line is visible.\r\n     * \r\n     * @param visible  the flag.\r\n     * \r\n     * @see #isLineVisible()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setLine#454",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setLine(java.awt.Shape)",
        "snippet": "    public void setLine(Shape line) {\n        this.line = line;\n    }\n",
        "begin_line": 454,
        "end_line": 456,
        "comment": "\r\n     * Sets the line.  A Shape is used here, because then you can use Line2D, \r\n     * GeneralPath or any other Shape to represent the line.\r\n     * \r\n     * @param line  the line.\r\n     * \r\n     * @see #getLine()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setLinePaint#476",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setLinePaint(java.awt.Paint)",
        "snippet": "    public void setLinePaint(Paint paint) {\n        this.linePaint = paint;\n    }\n",
        "begin_line": 476,
        "end_line": 478,
        "comment": "\r\n     * Sets the line paint.\r\n     * \r\n     * @param paint  the paint.\r\n     * \r\n     * @see #getLinePaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.setLineStroke#498",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setLineStroke(java.awt.Stroke)",
        "snippet": "    public void setLineStroke(Stroke stroke) {\n        this.lineStroke = stroke;\n    }\n",
        "begin_line": 498,
        "end_line": 500,
        "comment": "\r\n     * Sets the line stroke.\r\n     * \r\n     * @param stroke  the stroke.\r\n     * \r\n     * @see #getLineStroke()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.arrange#511",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        RectangleConstraint contentConstraint = toContentConstraint(constraint);\n        LengthConstraintType w = contentConstraint.getWidthConstraintType();\n        LengthConstraintType h = contentConstraint.getHeightConstraintType();\n        Size2D contentSize = null;\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeNN(g2);\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n            else if (h == LengthConstraintType.FIXED) {   \n                contentSize = new Size2D(\n                    contentConstraint.getWidth(),\n                    contentConstraint.getHeight()\n                );\n            }            \n        }\n        return new Size2D(\n            calculateTotalWidth(contentSize.getWidth()), \n            calculateTotalHeight(contentSize.getHeight())\n        );\n    }\n",
        "begin_line": 511,
        "end_line": 556,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.arrangeNN#567",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.arrangeNN(java.awt.Graphics2D)",
        "snippet": "    protected Size2D arrangeNN(Graphics2D g2) {\n        Rectangle2D contentSize = new Rectangle2D.Double();\n        if (this.line != null) {\n            contentSize.setRect(this.line.getBounds2D());\n        }\n        if (this.shape != null) {\n            contentSize = contentSize.createUnion(this.shape.getBounds2D());\n        }\n        return new Size2D(contentSize.getWidth(), contentSize.getHeight());\n    }\n",
        "begin_line": 567,
        "end_line": 576,
        "comment": "\r\n     * Performs the layout with no constraint, so the content size is \r\n     * determined by the bounds of the shape and/or line drawn to represent \r\n     * the series.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return  The content size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.draw#584",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D area) {\n        \n        area = trimMargin(area);\n        drawBorder(g2, area);\n        area = trimBorder(area);\n        area = trimPadding(area);\n        \n        if (this.lineVisible) {\n            Point2D location = RectangleAnchor.coordinates(area, \n                    this.shapeLocation);\n            Shape aLine = ShapeUtilities.createTranslatedShape(getLine(), \n                    this.shapeAnchor, location.getX(), location.getY());\n            g2.setPaint(this.linePaint);\n            g2.setStroke(this.lineStroke);\n            g2.draw(aLine);\n        }\n        \n        if (this.shapeVisible) {\n            Point2D location = RectangleAnchor.coordinates(area, \n                    this.shapeLocation);\n            \n            Shape s = ShapeUtilities.createTranslatedShape(this.shape, \n                    this.shapeAnchor, location.getX(), location.getY());\n            if (this.shapeFilled) {\n                Paint p = this.fillPaint;\n                if (p instanceof GradientPaint) {\n                    GradientPaint gp = (GradientPaint) this.fillPaint;\n                    p = this.fillPaintTransformer.transform(gp, s);\n                }\n                g2.setPaint(p);\n                g2.fill(s);\n            }\n            if (this.shapeOutlineVisible) {\n                g2.setPaint(this.outlinePaint);\n                g2.setStroke(this.outlineStroke);\n                g2.draw(s);\n            }\n        }\n        \n    }\n",
        "begin_line": 584,
        "end_line": 623,
        "comment": "\r\n     * Draws the graphic item within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendGraphic.draw#634",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        draw(g2, area);\n        return null;\n    }\n",
        "begin_line": 634,
        "end_line": 637,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  ignored (<code>null</code> permitted).\r\n     * \r\n     * @return Always <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextUtilities.createTextBlock#114",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public static TextBlock createTextBlock(String text, Font font,\n                                            Paint paint) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Null 'text' argument.\");\n        }\n        TextBlock result = new TextBlock();\n        String input = text;\n        boolean moreInputToProcess = (text.length() > 0);\n        int start = 0;\n        while (moreInputToProcess) {\n            int index = input.indexOf(\"\\n\");\n            if (index > start) {\n                String line = input.substring(start, index);\n                if (index < input.length() - 1) {\n                    result.addLine(line, font, paint);\n                    input = input.substring(index + 1);\n                }\n                else {\n                    moreInputToProcess = false;\n                }\n            }\n            else if (index == start) {\n                if (index < input.length() - 1) {\n                    input = input.substring(index + 1);\n                }\n                else {\n                    moreInputToProcess = false;\n                }\n            }\n            else {\n                result.addLine(input, font, paint);\n                moreInputToProcess = false;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 114,
        "end_line": 149,
        "comment": "\n     * Creates a {@link TextBlock} from a <code>String</code>.  Line breaks \n     * are added where the <code>String</code> contains '\\n' characters.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     * \n     * @return A text block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextUtilities.createTextBlock#185",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint, float, int, org.jfree.chart.text.TextMeasurer)",
        "snippet": "    public static TextBlock createTextBlock(String text, Font font,\n            Paint paint, float maxWidth, int maxLines, TextMeasurer measurer) {\n        \n        TextBlock result = new TextBlock();\n        BreakIterator iterator = BreakIterator.getLineInstance();\n        iterator.setText(text);\n        int current = 0;\n        int lines = 0;\n        int length = text.length();\n        while (current < length && lines < maxLines) {\n            int next = nextLineBreak(text, current, maxWidth, iterator, \n                    measurer);\n            if (next == BreakIterator.DONE) {\n                result.addLine(text.substring(current), font, paint);\n                return result;\n            }\n            result.addLine(text.substring(current, next), font, paint);\n            lines++;\n            current = next;\n            while (current < text.length()&& text.charAt(current) == '\\n') {\n                current++;\n            }\n        }\n        if (current < length) {\n            TextLine lastLine = result.getLastLine();\n            TextFragment lastFragment = lastLine.getLastTextFragment();\n            String oldStr = lastFragment.getText();\n            String newStr = \"...\";\n            if (oldStr.length() > 3) {\n                newStr = oldStr.substring(0, oldStr.length() - 3) + \"...\";\n            }\n\n            lastLine.removeFragment(lastFragment);\n            TextFragment newFragment = new TextFragment(newStr, \n                    lastFragment.getFont(), lastFragment.getPaint());\n            lastLine.addFragment(newFragment);\n        }\n        return result;\n    }\n",
        "begin_line": 185,
        "end_line": 223,
        "comment": "\n     * Creates a new text block from the given string, breaking the\n     * text into lines so that the <code>maxWidth</code> value is\n     * respected.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     * @param maxWidth  the maximum width for each line.\n     * @param maxLines  the maximum number of lines.\n     * @param measurer  the text measurer.\n     * \n     * @return A text block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextUtilities.nextLineBreak#236",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.nextLineBreak(java.lang.String, int, float, java.text.BreakIterator, org.jfree.chart.text.TextMeasurer)",
        "snippet": "    private static int nextLineBreak(String text, int start,\n            float width, BreakIterator iterator, TextMeasurer measurer) {\n        \n        // this method is (loosely) based on code in JFreeReport's \n        // TextParagraph class\n        int current = start;\n        int end;\n        float x = 0.0f;\n        boolean firstWord = true;\n        int newline = text.indexOf('\\n', start);\n        if (newline < 0) {\n            newline = Integer.MAX_VALUE;\n        }\n        while (((end = iterator.next()) != BreakIterator.DONE)) {\n            if (end > newline) {\n                return newline;\n            }\n            x += measurer.getStringWidth(text, current, end);\n            if (x > width) {\n                if (firstWord) {\n                    while (measurer.getStringWidth(text, start, end) > width) {\n                        end--;\n                        if (end <= start) {\n                            return end;\n                        }\n                    }\n                    return end;\n                }\n                else {\n                    end = iterator.previous();\n                    return end;\n                }\n            }\n            // we found at least one word that fits ...\n            firstWord = false;\n            current = end;\n        }\n        return BreakIterator.DONE;\n    }\n",
        "begin_line": 236,
        "end_line": 274,
        "comment": "\n     * Returns the character index of the next line break.\n     * \n     * @param text  the text.\n     * @param start  the start index.\n     * @param width  the target display width.\n     * @param iterator  the word break iterator.\n     * @param measurer  the text measurer.\n     * \n     * @return The index of the next line break.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextUtilities.getTextBounds#286",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.getTextBounds(java.lang.String, java.awt.Graphics2D, java.awt.FontMetrics)",
        "snippet": "    public static Rectangle2D getTextBounds(String text, Graphics2D g2, \n            FontMetrics fm) {\n        \n        final Rectangle2D bounds;\n        if (TextUtilities.useFontMetricsGetStringBounds) {\n            bounds = fm.getStringBounds(text, g2);\n            // getStringBounds() can return incorrect height for some Unicode\n            // characters...see bug parade 6183356, let's replace it with \n            // something correct\n            LineMetrics lm = fm.getFont().getLineMetrics(text,\n                    g2.getFontRenderContext());\n            bounds.setRect(bounds.getX(), bounds.getY(), bounds.getWidth(),\n                    lm.getHeight());\n        }\n        else {\n            double width = fm.stringWidth(text);\n            double height = fm.getHeight();\n            bounds = new Rectangle2D.Double(0.0, -fm.getAscent(), width, \n                    height);\n        }\n        return bounds;\n    }\n",
        "begin_line": 286,
        "end_line": 307,
        "comment": "\n     * Returns the bounds for the specified text.\n     * \n     * @param text  the text (<code>null</code> permitted).\n     * @param g2  the graphics context (not <code>null</code>).\n     * @param fm  the font metrics (not <code>null</code>).\n     * \n     * @return The text bounds (<code>null</code> if the <code>text</code> \n     *         argument is <code>null</code>).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextUtilities.drawRotatedString#474",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, double, float, float)",
        "snippet": "    public static void drawRotatedString(String text, Graphics2D g2,\n            float textX, float textY, double angle,\n            float rotateX, float rotateY) {\n\n        if ((text == null) || (text.equals(\"\"))) {\n            return;\n        }\n\n        AffineTransform saved = g2.getTransform();\n\n        // apply the rotation...\n        AffineTransform rotate = AffineTransform.getRotateInstance(\n                angle, rotateX, rotateY);\n        g2.transform(rotate);\n\n        if (useDrawRotatedStringWorkaround) {\n            // workaround for JDC bug ID 4312117 and others...\n            TextLayout tl = new TextLayout(text, g2.getFont(), \n                    g2.getFontRenderContext());\n            tl.draw(g2, textX, textY);\n        }\n        else {\n            // replaces this code...\n            g2.drawString(text, textX, textY);\n        }\n        g2.setTransform(saved);\n\n    }\n",
        "begin_line": 474,
        "end_line": 501,
        "comment": "\n     * A utility method for drawing rotated text.\n     * <P>\n     * A common rotation is -Math.PI/2 which draws text 'vertically' (with the \n     * top of the characters on the left).\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param textX  the x-coordinate for the text (before rotation).\n     * @param textY  the y-coordinate for the text (before rotation).\n     * @param angle  the angle of the (clockwise) rotation (in radians).\n     * @param rotateX  the point about which the text is rotated.\n     * @param rotateY  the point about which the text is rotated.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextUtilities.drawRotatedString#516",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, double, float, float)",
        "snippet": "    public static void drawRotatedString(String text, Graphics2D g2, float x, \n            float y, TextAnchor textAnchor, double angle, float rotationX, \n            float rotationY) {\n\n        if (text == null || text.equals(\"\")) {\n            return;\n        }\n        float[] textAdj = deriveTextBoundsAnchorOffsets(g2, text, textAnchor);\n        drawRotatedString(text, g2, x + textAdj[0], y + textAdj[1], angle, \n                rotationX, rotationY);\n    }\n",
        "begin_line": 516,
        "end_line": 526,
        "comment": "\n     * Draws a string that is aligned by one anchor point and rotated about \n     * another anchor point.\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for positioning the text.\n     * @param y  the y-coordinate for positioning the text.\n     * @param textAnchor  the text anchor.\n     * @param angle  the rotation angle.\n     * @param rotationX  the x-coordinate for the rotation anchor point.\n     * @param rotationY  the y-coordinate for the rotation anchor point.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextUtilities.drawRotatedString#540",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, double, org.jfree.chart.text.TextAnchor)",
        "snippet": "    public static void drawRotatedString(String text, Graphics2D g2,\n            float x, float y, TextAnchor textAnchor,\n            double angle, TextAnchor rotationAnchor) {\n\n        if (text == null || text.equals(\"\")) {\n            return;\n        }\n        float[] textAdj = deriveTextBoundsAnchorOffsets(g2, text, textAnchor);\n        float[] rotateAdj = deriveRotationAnchorOffsets(g2, text, \n                rotationAnchor);\n        drawRotatedString(text, g2, x + textAdj[0], y + textAdj[1],\n                angle, x + textAdj[0] + rotateAdj[0], \n                y + textAdj[1] + rotateAdj[1]);\n\n    }\n",
        "begin_line": 540,
        "end_line": 554,
        "comment": "\n     * Draws a string that is aligned by one anchor point and rotated about \n     * another anchor point.\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for positioning the text.\n     * @param y  the y-coordinate for positioning the text.\n     * @param textAnchor  the text anchor.\n     * @param angle  the rotation angle (in radians).\n     * @param rotationAnchor  the rotation anchor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextUtilities.deriveTextBoundsAnchorOffsets#601",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.deriveTextBoundsAnchorOffsets(java.awt.Graphics2D, java.lang.String, org.jfree.chart.text.TextAnchor)",
        "snippet": "    private static float[] deriveTextBoundsAnchorOffsets(Graphics2D g2,\n            String text, TextAnchor anchor) {\n\n        float[] result = new float[2];\n        FontRenderContext frc = g2.getFontRenderContext();\n        Font f = g2.getFont();\n        FontMetrics fm = g2.getFontMetrics(f);\n        Rectangle2D bounds = TextUtilities.getTextBounds(text, g2, fm);\n        LineMetrics metrics = f.getLineMetrics(text, frc);\n        float ascent = metrics.getAscent();\n        float halfAscent = ascent / 2.0f;\n        float descent = metrics.getDescent();\n        float leading = metrics.getLeading();\n        float xAdj = 0.0f;\n        float yAdj = 0.0f;\n\n        if (anchor == TextAnchor.TOP_CENTER\n                || anchor == TextAnchor.CENTER\n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BASELINE_CENTER\n                || anchor == TextAnchor.HALF_ASCENT_CENTER) {\n\n            xAdj = (float) -bounds.getWidth() / 2.0f;\n\n        }\n        else if (anchor == TextAnchor.TOP_RIGHT\n                || anchor == TextAnchor.CENTER_RIGHT\n                || anchor == TextAnchor.BOTTOM_RIGHT\n                || anchor == TextAnchor.BASELINE_RIGHT\n                || anchor == TextAnchor.HALF_ASCENT_RIGHT) {\n\n            xAdj = (float) -bounds.getWidth();\n\n        }\n\n        if (anchor == TextAnchor.TOP_LEFT\n                || anchor == TextAnchor.TOP_CENTER\n                || anchor == TextAnchor.TOP_RIGHT) {\n\n            yAdj = -descent - leading + (float) bounds.getHeight();\n\n        }\n        else if (anchor == TextAnchor.HALF_ASCENT_LEFT\n                || anchor == TextAnchor.HALF_ASCENT_CENTER\n                || anchor == TextAnchor.HALF_ASCENT_RIGHT) {\n\n            yAdj = halfAscent;\n\n        }\n        else if (anchor == TextAnchor.CENTER_LEFT\n                || anchor == TextAnchor.CENTER\n                || anchor == TextAnchor.CENTER_RIGHT) {\n\n            yAdj = -descent - leading + (float) (bounds.getHeight() / 2.0);\n\n        }\n        else if (anchor == TextAnchor.BASELINE_LEFT\n                || anchor == TextAnchor.BASELINE_CENTER\n                || anchor == TextAnchor.BASELINE_RIGHT) {\n\n            yAdj = 0.0f;\n\n        }\n        else if (anchor == TextAnchor.BOTTOM_LEFT\n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BOTTOM_RIGHT) {\n\n            yAdj = -metrics.getDescent() - metrics.getLeading();\n\n        }\n        result[0] = xAdj;\n        result[1] = yAdj;\n        return result;\n\n    }\n",
        "begin_line": 601,
        "end_line": 675,
        "comment": "\n     * A utility method that calculates the anchor offsets for a string.  \n     * Normally, the (x, y) coordinate for drawing text is a point on the \n     * baseline at the left of the text string.  If you add these offsets to \n     * (x, y) and draw the string, then the anchor point should coincide with \n     * the (x, y) point.\n     *\n     * @param g2  the graphics device (not <code>null</code>).\n     * @param text  the text.\n     * @param anchor  the anchor point.\n     *\n     * @return  The offsets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextUtilities.deriveRotationAnchorOffsets#688",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.deriveRotationAnchorOffsets(java.awt.Graphics2D, java.lang.String, org.jfree.chart.text.TextAnchor)",
        "snippet": "    private static float[] deriveRotationAnchorOffsets(Graphics2D g2,\n            String text, TextAnchor anchor) {\n\n        float[] result = new float[2];\n        FontRenderContext frc = g2.getFontRenderContext();\n        LineMetrics metrics = g2.getFont().getLineMetrics(text, frc);\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D bounds = TextUtilities.getTextBounds(text, g2, fm);\n        float ascent = metrics.getAscent();\n        float halfAscent = ascent / 2.0f;\n        float descent = metrics.getDescent();\n        float leading = metrics.getLeading();\n        float xAdj = 0.0f;\n        float yAdj = 0.0f;\n\n        if (anchor == TextAnchor.TOP_LEFT\n                || anchor == TextAnchor.CENTER_LEFT\n                || anchor == TextAnchor.BOTTOM_LEFT\n                || anchor == TextAnchor.BASELINE_LEFT\n                || anchor == TextAnchor.HALF_ASCENT_LEFT) {\n\n            xAdj = 0.0f;\n\n        }\n        else if (anchor == TextAnchor.TOP_CENTER\n                || anchor == TextAnchor.CENTER\n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BASELINE_CENTER\n                || anchor == TextAnchor.HALF_ASCENT_CENTER) {\n\n            xAdj = (float) bounds.getWidth() / 2.0f;\n\n        }\n        else if (anchor == TextAnchor.TOP_RIGHT\n                || anchor == TextAnchor.CENTER_RIGHT\n                || anchor == TextAnchor.BOTTOM_RIGHT\n                || anchor == TextAnchor.BASELINE_RIGHT\n                || anchor == TextAnchor.HALF_ASCENT_RIGHT) {\n\n            xAdj = (float) bounds.getWidth();\n\n        }\n\n        if (anchor == TextAnchor.TOP_LEFT\n                || anchor == TextAnchor.TOP_CENTER\n                || anchor == TextAnchor.TOP_RIGHT) {\n\n            yAdj = descent + leading - (float) bounds.getHeight();\n\n        }\n        else if (anchor == TextAnchor.CENTER_LEFT\n                || anchor == TextAnchor.CENTER\n                || anchor == TextAnchor.CENTER_RIGHT) {\n\n            yAdj = descent + leading - (float) (bounds.getHeight() / 2.0);\n\n        }\n        else if (anchor == TextAnchor.HALF_ASCENT_LEFT\n                || anchor == TextAnchor.HALF_ASCENT_CENTER\n                || anchor == TextAnchor.HALF_ASCENT_RIGHT) {\n\n            yAdj = -halfAscent;\n\n        }\n        else if (anchor == TextAnchor.BASELINE_LEFT\n                || anchor == TextAnchor.BASELINE_CENTER\n                || anchor == TextAnchor.BASELINE_RIGHT) {\n\n            yAdj = 0.0f;\n\n        }\n        else if (anchor == TextAnchor.BOTTOM_LEFT\n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BOTTOM_RIGHT) {\n\n            yAdj = metrics.getDescent() + metrics.getLeading();\n\n        }\n        result[0] = xAdj;\n        result[1] = yAdj;\n        return result;\n\n    }\n",
        "begin_line": 688,
        "end_line": 770,
        "comment": "\n     * A utility method that calculates the rotation anchor offsets for a \n     * string.  These offsets are relative to the text starting coordinate \n     * (BASELINE_LEFT).\n     *\n     * @param g2  the graphics device.\n     * @param text  the text.\n     * @param anchor  the anchor point.\n     *\n     * @return  The offsets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextLine.TextLine#109",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.TextLine(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public TextLine(String text, Font font, Paint paint) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Null 'text' argument.\");   \n        }\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");   \n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");   \n        }\n        this.fragments = new java.util.ArrayList();\n        TextFragment fragment = new TextFragment(text, font, paint);\n        this.fragments.add(fragment);\n    }\n",
        "begin_line": 109,
        "end_line": 122,
        "comment": "\n     * Creates a new text line.\n     * \n     * @param text  the text (<code>null</code> not permitted).\n     * @param font  the text font (<code>null</code> not permitted).\n     * @param paint  the text color (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextLine.draw#154",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, float, float, double)",
        "snippet": "    public void draw(Graphics2D g2, float anchorX, float anchorY, \n                     TextAnchor anchor, float rotateX, float rotateY, \n                     double angle) {\n    \n        float x = anchorX;\n        float yOffset = calculateBaselineOffset(g2, anchor);\n        Iterator iterator = this.fragments.iterator();\n        while (iterator.hasNext()) {\n            TextFragment fragment = (TextFragment) iterator.next();\n            Size2D d = fragment.calculateDimensions(g2);\n            fragment.draw(g2, x, anchorY + yOffset, TextAnchor.BASELINE_LEFT, \n                    rotateX, rotateY, angle);\n            x = x + (float) d.getWidth();\n        }\n    \n    }\n",
        "begin_line": 154,
        "end_line": 169,
        "comment": "\n     * Draws the text line.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the point on the text line that is aligned to the anchor \n     *                point.\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the y-coordinate for the rotation point.\n     * @param angle  the rotation angle (in radians).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextLine.calculateDimensions#178",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.calculateDimensions(java.awt.Graphics2D)",
        "snippet": "    public Size2D calculateDimensions(Graphics2D g2) {\n        double width = 0.0;\n        double height = 0.0;\n        Iterator iterator = this.fragments.iterator();\n        while (iterator.hasNext()) {\n            TextFragment fragment = (TextFragment) iterator.next();\n            Size2D dimension = fragment.calculateDimensions(g2);\n            width = width + dimension.getWidth();\n            height = Math.max(height, dimension.getHeight());\n        }\n        return new Size2D(width, height);\n    }\n",
        "begin_line": 178,
        "end_line": 189,
        "comment": "\n     * Calculates the width and height of the text line.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextLine.calculateBaselineOffset#227",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.calculateBaselineOffset(java.awt.Graphics2D, org.jfree.chart.text.TextAnchor)",
        "snippet": "    private float calculateBaselineOffset(Graphics2D g2, \n                                          TextAnchor anchor) {\n        float result = 0.0f;\n        Iterator iterator = this.fragments.iterator();\n        while (iterator.hasNext()) {\n            TextFragment fragment = (TextFragment) iterator.next();\n            result = Math.max(result, \n                    fragment.calculateBaselineOffset(g2, anchor));\n        }\n        return result;\n    }\n",
        "begin_line": 227,
        "end_line": 237,
        "comment": "\n     * Calculate the offsets required to translate from the specified anchor \n     * position to the left baseline position.\n     * \n     * @param g2  the graphics device.\n     * @param anchor  the anchor position.\n     * \n     * @return The offsets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextFragment.TextFragment#126",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.TextFragment(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public TextFragment(String text, Font font, Paint paint) {\n        this(text, font, paint, 0.0f);\n    }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n     * Creates a new text fragment.\n     * \n     * @param text  the text (<code>null</code> not permitted).\n     * @param font  the font (<code>null</code> not permitted).\n     * @param paint  the text color (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextFragment.TextFragment#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.TextFragment(java.lang.String, java.awt.Font, java.awt.Paint, float)",
        "snippet": "    public TextFragment(String text, Font font, Paint paint,\n                        float baselineOffset) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Null 'text' argument.\");  \n        }\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.text = text;\n        this.font = font;\n        this.paint = paint;\n        this.baselineOffset = baselineOffset;\n    }\n",
        "begin_line": 138,
        "end_line": 153,
        "comment": "\n     * Creates a new text fragment.\n     * \n     * @param text  the text (<code>null</code> not permitted).\n     * @param font  the font (<code>null</code> not permitted).\n     * @param paint  the text color (<code>null</code> not permitted).\n     * @param baselineOffset  the baseline offset.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextFragment.draw#203",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, float, float, double)",
        "snippet": "    public void draw(Graphics2D g2, float anchorX, \n                     float anchorY, TextAnchor anchor,\n                     float rotateX, float rotateY, \n                     double angle) {\n    \n        g2.setFont(this.font);\n        g2.setPaint(this.paint);\n        TextUtilities.drawRotatedString(this.text, g2, anchorX, anchorY \n                + this.baselineOffset, anchor, angle, rotateX, rotateY);\n    \n    }\n",
        "begin_line": 203,
        "end_line": 213,
        "comment": "\n     * Draws the text fragment.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate of the anchor point.\n     * @param anchorY  the y-coordinate of the anchor point.\n     * @param anchor  the location of the text that is aligned to the anchor \n     *                point.\n     * @param rotateX  the x-coordinate of the rotation point.\n     * @param rotateY  the y-coordinate of the rotation point.\n     * @param angle  the angle.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextFragment.calculateDimensions#222",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.calculateDimensions(java.awt.Graphics2D)",
        "snippet": "    public Size2D calculateDimensions(Graphics2D g2) {\n        FontMetrics fm = g2.getFontMetrics(this.font);\n        Rectangle2D bounds = TextUtilities.getTextBounds(this.text, g2, fm);\n        Size2D result = new Size2D(bounds.getWidth(), bounds.getHeight());\n        return result;\n    }\n",
        "begin_line": 222,
        "end_line": 227,
        "comment": "\n     * Calculates the dimensions of the text fragment.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height of the text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextFragment.calculateBaselineOffset#238",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.calculateBaselineOffset(java.awt.Graphics2D, org.jfree.chart.text.TextAnchor)",
        "snippet": "    public float calculateBaselineOffset(Graphics2D g2, TextAnchor anchor) {\n        float result = 0.0f;\n        FontMetrics fm = g2.getFontMetrics(this.font);\n        LineMetrics lm = fm.getLineMetrics(\"ABCxyz\", g2);\n        if (anchor == TextAnchor.TOP_LEFT || anchor == TextAnchor.TOP_CENTER\n                                          || anchor == TextAnchor.TOP_RIGHT) {\n            result = lm.getAscent();\n        }\n        else if (anchor == TextAnchor.BOTTOM_LEFT \n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BOTTOM_RIGHT) {\n            result = -lm.getDescent() - lm.getLeading();\n        }\n        return result;                                             \n    }\n",
        "begin_line": 238,
        "end_line": 252,
        "comment": "\n     * Calculates the vertical offset between the baseline and the specified \n     * text anchor.\n     * \n     * @param g2  the graphics device.\n     * @param anchor  the anchor.\n     * \n     * @return the offset.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextBlockAnchor.TextBlockAnchor#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "signature": "org.jfree.chart.text.TextBlockAnchor.TextBlockAnchor(java.lang.String)",
        "snippet": "    private TextBlockAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextBlock.TextBlock#87",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.TextBlock()",
        "snippet": "    public TextBlock() {\n        this.lines = new java.util.ArrayList();\n        this.lineAlignment = HorizontalAlignment.CENTER;\n    }\n",
        "begin_line": 87,
        "end_line": 90,
        "comment": "\n     * Creates a new empty text block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextBlock.addLine#120",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.addLine(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public void addLine(String text, Font font, Paint paint) {\n        addLine(new TextLine(text, font, paint));\n    }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n     * Adds a line of text that will be displayed using the specified font.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextBlock.addLine#129",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.addLine(org.jfree.chart.text.TextLine)",
        "snippet": "    public void addLine(TextLine line) {\n        this.lines.add(line);    \n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n     * Adds a {@link TextLine} to the block.\n     * \n     * @param line  the line.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextBlock.calculateDimensions#163",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.calculateDimensions(java.awt.Graphics2D)",
        "snippet": "    public Size2D calculateDimensions(Graphics2D g2) {\n        double width = 0.0;\n        double height = 0.0;\n        Iterator iterator = this.lines.iterator();\n        while (iterator.hasNext()) {\n            TextLine line = (TextLine) iterator.next();\n            Size2D dimension = line.calculateDimensions(g2);\n            width = Math.max(width, dimension.getWidth());\n            height = height + dimension.getHeight();\n        }\n        return new Size2D(width, height);\n    }\n",
        "begin_line": 163,
        "end_line": 174,
        "comment": "\n     * Returns the width and height of the text block.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextBlock.calculateBounds#189",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.calculateBounds(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor, float, float, double)",
        "snippet": "    public Shape calculateBounds(Graphics2D g2, float anchorX, float anchorY, \n            TextBlockAnchor anchor, float rotateX, float rotateY, \n            double angle) {\n        \n        Size2D d = calculateDimensions(g2);\n        float[] offsets = calculateOffsets(anchor, d.getWidth(), d.getHeight());\n        Rectangle2D bounds = new Rectangle2D.Double(anchorX + offsets[0], \n                anchorY + offsets[1], d.getWidth(), d.getHeight());\n        Shape rotatedBounds = ShapeUtilities.rotateShape(bounds, angle, \n                rotateX, rotateY);\n        return rotatedBounds;   \n        \n    }\n",
        "begin_line": 189,
        "end_line": 201,
        "comment": "\n     * Returns the bounds of the text block.\n     * \n     * @param g2  the graphics device (<code>null</code> not permitted).\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the text block anchor (<code>null</code> not permitted).\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the y-coordinate for the rotation point.\n     * @param angle  the rotation angle.\n     * \n     * @return The bounds.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextBlock.draw#211",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor)",
        "snippet": "    public void draw(Graphics2D g2, float x, float y, TextBlockAnchor anchor) {\n        draw(g2, x, y, anchor, 0.0f, 0.0f, 0.0);\n    }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n     * Draws the text block at a specific location.\n     * \n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for the anchor point.\n     * @param y  the y-coordinate for the anchor point.\n     * @param anchor  the anchor point.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextBlock.draw#228",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor, float, float, double)",
        "snippet": "    public void draw(Graphics2D g2, float anchorX, float anchorY, \n                     TextBlockAnchor anchor, float rotateX, float rotateY, \n                     double angle) {\n    \n        Size2D d = calculateDimensions(g2);\n        float[] offsets = calculateOffsets(anchor, d.getWidth(), d.getHeight());\n        Iterator iterator = this.lines.iterator();\n        float yCursor = 0.0f;\n        while (iterator.hasNext()) {\n            TextLine line = (TextLine) iterator.next();\n            Size2D dimension = line.calculateDimensions(g2);\n            float lineOffset = 0.0f;\n            if (this.lineAlignment == HorizontalAlignment.CENTER) {\n                lineOffset = (float) (d.getWidth() - dimension.getWidth()) \n                    / 2.0f;   \n            }\n            else if (this.lineAlignment == HorizontalAlignment.RIGHT) {\n                lineOffset = (float) (d.getWidth() - dimension.getWidth());   \n            }\n            line.draw(g2, anchorX + offsets[0] + lineOffset, anchorY \n                    + offsets[1] + yCursor, TextAnchor.TOP_LEFT, rotateX, \n                    rotateY, angle);\n            yCursor = yCursor + (float) dimension.getHeight();\n        }\n        \n    }\n",
        "begin_line": 228,
        "end_line": 253,
        "comment": "\n     * Draws the text block, aligning it with the specified anchor point and \n     * rotating it about the specified rotation point.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the point on the text block that is aligned to the \n     *                anchor point.\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the x-coordinate for the rotation point.\n     * @param angle  the rotation (in radians).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextBlock.calculateOffsets#266",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.calculateOffsets(org.jfree.chart.text.TextBlockAnchor, double, double)",
        "snippet": "    private float[] calculateOffsets(TextBlockAnchor anchor, \n                                     double width, double height) {\n        float[] result = new float[2];\n        float xAdj = 0.0f;\n        float yAdj = 0.0f;\n\n        if (anchor == TextBlockAnchor.TOP_CENTER\n                || anchor == TextBlockAnchor.CENTER\n                || anchor == TextBlockAnchor.BOTTOM_CENTER) {\n                    \n            xAdj = (float) -width / 2.0f;\n            \n        }\n        else if (anchor == TextBlockAnchor.TOP_RIGHT\n                || anchor == TextBlockAnchor.CENTER_RIGHT\n                || anchor == TextBlockAnchor.BOTTOM_RIGHT) {\n                    \n            xAdj = (float) -width;\n            \n        }\n\n        if (anchor == TextBlockAnchor.TOP_LEFT\n                || anchor == TextBlockAnchor.TOP_CENTER\n                || anchor == TextBlockAnchor.TOP_RIGHT) {\n                    \n            yAdj = 0.0f;\n            \n        }\n        else if (anchor == TextBlockAnchor.CENTER_LEFT\n                || anchor == TextBlockAnchor.CENTER\n                || anchor == TextBlockAnchor.CENTER_RIGHT) {\n                    \n            yAdj = (float) -height / 2.0f;\n            \n        }\n        else if (anchor == TextBlockAnchor.BOTTOM_LEFT\n                || anchor == TextBlockAnchor.BOTTOM_CENTER\n                || anchor == TextBlockAnchor.BOTTOM_RIGHT) {\n                    \n            yAdj = (float) -height;\n            \n        }\n        result[0] = xAdj;\n        result[1] = yAdj;\n        return result;\n    }   \n",
        "begin_line": 266,
        "end_line": 311,
        "comment": "\n     * Calculates the x and y offsets required to align the text block with the\n     * specified anchor point.  This assumes that the top left of the text \n     * block is at (0.0, 0.0).\n     * \n     * @param anchor  the anchor position.\n     * @param width  the width of the text block.\n     * @param height  the height of the text block.\n     * \n     * @return The offsets (float[0] = x offset, float[1] = y offset).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "G2TextMeasurer.G2TextMeasurer#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/G2TextMeasurer.java",
        "class_name": "org.jfree.chart.text.G2TextMeasurer",
        "signature": "org.jfree.chart.text.G2TextMeasurer.G2TextMeasurer(java.awt.Graphics2D)",
        "snippet": "    public G2TextMeasurer(Graphics2D g2) {\n        this.g2 = g2;\n    }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "\n     * Creates a new text measurer.\n     * \n     * @param g2  the graphics device.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "G2TextMeasurer.getStringWidth#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/G2TextMeasurer.java",
        "class_name": "org.jfree.chart.text.G2TextMeasurer",
        "signature": "org.jfree.chart.text.G2TextMeasurer.getStringWidth(java.lang.String, int, int)",
        "snippet": "    public float getStringWidth(String text, int start, int end) {\n        FontMetrics fm = this.g2.getFontMetrics();\n        Rectangle2D bounds = TextUtilities.getTextBounds(text.substring(start, \n                end), this.g2, fm);\n        float result = (float) bounds.getWidth();\n        return result;\n    }\n",
        "begin_line": 76,
        "end_line": 82,
        "comment": "\n     * Returns the string width.\n     * \n     * @param text  the text.\n     * @param start  the index of the first character to measure.\n     * @param end  the index of the last character to measure.\n     * \n     * @return The string width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "JFreeChartResources.getContents#53",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/resources/JFreeChartResources.java",
        "class_name": "org.jfree.chart.resources.JFreeChartResources",
        "signature": "org.jfree.chart.resources.JFreeChartResources.getContents()",
        "snippet": "    public Object[][] getContents() {\n        return CONTENTS;\n    }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\r\n     * Returns the array of strings in the resource bundle.\r\n     *\r\n     * @return The resources.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "StatisticalBarRenderer.drawItem#188",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        "signature": "org.jfree.chart.renderer.category.StatisticalBarRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, int)",
        "snippet": "    public void drawItem(Graphics2D g2,\n                         CategoryItemRendererState state,\n                         Rectangle2D dataArea,\n                         CategoryPlot plot,\n                         CategoryAxis domainAxis,\n                         ValueAxis rangeAxis,\n                         CategoryDataset data,\n                         int row,\n                         int column,\n                         int pass) {\n\n        // defensive check\n        if (!(data instanceof StatisticalCategoryDataset)) {\n            throw new IllegalArgumentException(\n                \"Requires StatisticalCategoryDataset.\");\n        }\n        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n\n        PlotOrientation orientation = plot.getOrientation();\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                    rangeAxis, statData, row, column);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n                    statData, row, column);\n        }\n    }\n",
        "begin_line": 188,
        "end_line": 215,
        "comment": "\r\n     * Draws the bar with its standard deviation line range for a single \r\n     * (series, category) data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the data area.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param data  the data.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryItemRendererState.CategoryItemRendererState#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/CategoryItemRendererState.java",
        "class_name": "org.jfree.chart.renderer.category.CategoryItemRendererState",
        "signature": "org.jfree.chart.renderer.category.CategoryItemRendererState.CategoryItemRendererState(org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public CategoryItemRendererState(PlotRenderingInfo info) {\n        super(info);\n        this.barWidth = 0.0;\n        this.seriesRunningTotal = 0.0;\n    }\n",
        "begin_line": 68,
        "end_line": 72,
        "comment": "\r\n     * Creates a new object for recording temporary state information for a\r\n     * renderer.\r\n     * \r\n     * @param info  the plot rendering info (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryItemRendererState.getBarWidth#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/CategoryItemRendererState.java",
        "class_name": "org.jfree.chart.renderer.category.CategoryItemRendererState",
        "signature": "org.jfree.chart.renderer.category.CategoryItemRendererState.getBarWidth()",
        "snippet": "    public double getBarWidth() {\n        return this.barWidth;\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\r\n     * Returns the bar width.\r\n     * \r\n     * @return The bar width.\r\n     * \r\n     * @see #setBarWidth(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryItemRendererState.setBarWidth#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/CategoryItemRendererState.java",
        "class_name": "org.jfree.chart.renderer.category.CategoryItemRendererState",
        "signature": "org.jfree.chart.renderer.category.CategoryItemRendererState.setBarWidth(double)",
        "snippet": "    public void setBarWidth(double width) {\n        this.barWidth = width;\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\r\n     * Sets the bar width.  The renderer calculates this value and stores it \r\n     * here - it is not intended that users can manually set the bar width.\r\n     * \r\n     * @param width  the width.\r\n     * \r\n     * @see #getBarWidth()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BarRenderer.isDrawBarOutline#267",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.isDrawBarOutline()",
        "snippet": "    public boolean isDrawBarOutline() {\n        return this.drawBarOutline;    \n    }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "\r\n     * Returns a flag that controls whether or not bar outlines are drawn.\r\n     * \r\n     * @return A boolean.\r\n     * \r\n     * @see #setDrawBarOutline(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BarRenderer.getMaximumBarWidth#292",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.getMaximumBarWidth()",
        "snippet": "    public double getMaximumBarWidth() {\n        return this.maximumBarWidth;\n    }\n",
        "begin_line": 292,
        "end_line": 294,
        "comment": "\r\n     * Returns the maximum bar width, as a percentage of the available drawing \r\n     * space.\r\n     * \r\n     * @return The maximum bar width.\r\n     * \r\n     * @see #setMaximumBarWidth(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BarRenderer.getLowerClip#457",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.getLowerClip()",
        "snippet": "    public double getLowerClip() {\n        // TODO:  this attribute should be transferred to the renderer state.\n        return this.lowerClip;\n    }\n",
        "begin_line": 457,
        "end_line": 460,
        "comment": "\r\n     * Returns the lower clip value.  This value is recalculated in the \r\n     * initialise() method.\r\n     *\r\n     * @return The value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BarRenderer.getUpperClip#468",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.getUpperClip()",
        "snippet": "    public double getUpperClip() {\n        // TODO:  this attribute should be transferred to the renderer state.\n        return this.upperClip;\n    }\n",
        "begin_line": 468,
        "end_line": 471,
        "comment": "\r\n     * Returns the upper clip value.  This value is recalculated in the \r\n     * initialise() method.\r\n     *\r\n     * @return The value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BarRenderer.initialise#486",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, int, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public CategoryItemRendererState initialise(Graphics2D g2,\n                                                Rectangle2D dataArea,\n                                                CategoryPlot plot,\n                                                int rendererIndex,\n                                                PlotRenderingInfo info) {\n\n        CategoryItemRendererState state = super.initialise(g2, dataArea, plot, \n                rendererIndex, info);\n\n        // get the clipping values...\n        ValueAxis rangeAxis = plot.getRangeAxisForDataset(rendererIndex);\n        this.lowerClip = rangeAxis.getRange().getLowerBound();\n        this.upperClip = rangeAxis.getRange().getUpperBound();\n\n        // calculate the bar width\n        calculateBarWidth(plot, dataArea, rendererIndex, state);\n\n        return state;\n        \n    }\n",
        "begin_line": 486,
        "end_line": 505,
        "comment": "\r\n     * Initialises the renderer and returns a state object that will be passed \r\n     * to subsequent calls to the drawItem method.  This method gets called \r\n     * once at the start of the process of drawing a chart.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the data is to be plotted.\r\n     * @param plot  the plot.\r\n     * @param rendererIndex  the renderer index.\r\n     * @param info  collects chart rendering information for return to caller.\r\n     * \r\n     * @return The renderer state.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BarRenderer.calculateBarWidth#515",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateBarWidth(org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D, int, org.jfree.chart.renderer.category.CategoryItemRendererState)",
        "snippet": "    protected void calculateBarWidth(CategoryPlot plot, \n                                     Rectangle2D dataArea, \n                                     int rendererIndex,\n                                     CategoryItemRendererState state) {\n                                         \n        CategoryAxis domainAxis = getDomainAxis(plot, rendererIndex);\n        CategoryDataset dataset = plot.getDataset(rendererIndex);\n        if (dataset != null) {\n            int columns = dataset.getColumnCount();\n            int rows = dataset.getRowCount();\n            double space = 0.0;\n            PlotOrientation orientation = plot.getOrientation();\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                space = dataArea.getHeight();\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                space = dataArea.getWidth();\n            }\n            double maxWidth = space * getMaximumBarWidth();\n            double categoryMargin = 0.0;\n            double currentItemMargin = 0.0;\n            if (columns > 1) {\n                categoryMargin = domainAxis.getCategoryMargin();\n            }\n            if (rows > 1) {\n                currentItemMargin = getItemMargin();\n            }\n            double used = space * (1 - domainAxis.getLowerMargin() \n                                     - domainAxis.getUpperMargin()\n                                     - categoryMargin - currentItemMargin);\n            if ((rows * columns) > 0) {\n                state.setBarWidth(Math.min(used / (rows * columns), maxWidth));\n            }\n            else {\n                state.setBarWidth(Math.min(used, maxWidth));\n            }\n        }\n    }\n",
        "begin_line": 515,
        "end_line": 552,
        "comment": "\r\n     * Calculates the bar width and stores it in the renderer state.\r\n     * \r\n     * @param plot  the plot.\r\n     * @param dataArea  the data area.\r\n     * @param rendererIndex  the renderer index.\r\n     * @param state  the renderer state.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BarRenderer.findRangeBounds#639",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public Range findRangeBounds(CategoryDataset dataset) {\n        Range result = DatasetUtilities.findRangeBounds(dataset);\n        if (result != null) {\n            if (this.includeBaseInRange) {\n                result = Range.expandToInclude(result, this.base);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 639,
        "end_line": 647,
        "comment": "\r\n     * Returns the range of values the renderer requires to display all the \r\n     * items from the specified dataset.  This takes into account the range\r\n     * of values in the dataset, plus the flag that determines whether or not\r\n     * the base value for the bars should be included in the range.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * \r\n     * @return The range (or <code>null</code> if the dataset is \r\n     *         <code>null</code> or empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BarRenderer.getLegendItem#657",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.getLegendItem(int, int)",
        "snippet": "    public LegendItem getLegendItem(int datasetIndex, int series) {\n\n        CategoryPlot cp = getPlot();\n        if (cp == null) {\n            return null;\n        }\n\n        // check that a legend item needs to be displayed...\n        if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {\n            return null;\n        }\n\n        CategoryDataset dataset = cp.getDataset(datasetIndex);\n        String label = getLegendItemLabelGenerator().generateLabel(dataset, \n                series);\n        String description = label;\n        String toolTipText = null; \n        if (getLegendItemToolTipGenerator() != null) {\n            toolTipText = getLegendItemToolTipGenerator().generateLabel(\n                    dataset, series);   \n        }\n        String urlText = null;\n        if (getLegendItemURLGenerator() != null) {\n            urlText = getLegendItemURLGenerator().generateLabel(dataset, \n                    series);   \n        }\n        Shape shape = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);\n        Paint paint = lookupSeriesPaint(series);\n        Paint outlinePaint = lookupSeriesOutlinePaint(series);\n        Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n\n        LegendItem result = new LegendItem(label, description, toolTipText, \n                urlText, true, shape, true, paint, isDrawBarOutline(), \n                outlinePaint, outlineStroke, false, new Line2D.Float(), \n                new BasicStroke(1.0f), Color.black);\n        result.setDataset(dataset);\n        result.setDatasetIndex(datasetIndex);\n        result.setSeriesKey(dataset.getRowKey(series));\n        result.setSeriesIndex(series);\n        if (this.gradientPaintTransformer != null) {\n            result.setFillPaintTransformer(this.gradientPaintTransformer);\n        }\n        return result;\n    }\n",
        "begin_line": 657,
        "end_line": 700,
        "comment": "\r\n     * Returns a legend item for a series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The legend item (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.getPassCount#247",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getPassCount()",
        "snippet": "    public int getPassCount() {\n        return 1;\n    }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "\r\n     * Returns the number of passes through the dataset required by the\r\n     * renderer.  This method returns <code>1</code>, subclasses should\r\n     * override if they need more passes.\r\n     *\r\n     * @return The pass count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.getPlot#260",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getPlot()",
        "snippet": "    public CategoryPlot getPlot() {\n        return this.plot;\n    }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\r\n     * Returns the plot that the renderer has been assigned to (where\r\n     * <code>null</code> indicates that the renderer is not currently assigned\r\n     * to a plot).\r\n     *\r\n     * @return The plot (possibly <code>null</code>).\r\n     *\r\n     * @see #setPlot(CategoryPlot)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.setPlot#273",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setPlot(org.jfree.chart.plot.CategoryPlot)",
        "snippet": "    public void setPlot(CategoryPlot plot) {\n        if (plot == null) {\n            throw new IllegalArgumentException(\"Null 'plot' argument.\");\n        }\n        this.plot = plot;\n    }\n",
        "begin_line": 273,
        "end_line": 278,
        "comment": "\r\n     * Sets the plot that the renderer has been assigned to.  This method is\r\n     * usually called by the {@link CategoryPlot}, in normal usage you\r\n     * shouldn't need to call this method directly.\r\n     *\r\n     * @param plot  the plot (<code>null</code> not permitted).\r\n     *\r\n     * @see #getPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.getItemLabelGenerator#293",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemLabelGenerator(int, int)",
        "snippet": "    public CategoryItemLabelGenerator getItemLabelGenerator(int row,\n            int column) {\n        CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator)\n        this.itemLabelGeneratorList.get(row);\n        if (generator == null) {\n            generator = this.baseItemLabelGenerator;\n        }\n        return generator;\n    }\n",
        "begin_line": 293,
        "end_line": 301,
        "comment": "\r\n     * Returns the item label generator for a data item.  This implementation\r\n     * returns the series item label generator if one is defined, otherwise\r\n     * it returns the default item label generator (which may be \r\n     * <code>null</code>).\r\n     *\r\n     * @param row  the row index (zero based).\r\n     * @param column  the column index (zero based).\r\n     *\r\n     * @return The generator (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.getRowCount#694",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getRowCount()",
        "snippet": "    public int getRowCount() {\n        return this.rowCount;\n    }\n",
        "begin_line": 694,
        "end_line": 696,
        "comment": "\r\n     * Returns the number of rows in the dataset.  This value is updated in the\r\n     * {@link AbstractCategoryItemRenderer#initialise} method.\r\n     *\r\n     * @return The row count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.getColumnCount#704",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.columnCount;\n    }\n",
        "begin_line": 704,
        "end_line": 706,
        "comment": "\r\n     * Returns the number of columns in the dataset.  This value is updated in\r\n     * the {@link AbstractCategoryItemRenderer#initialise} method.\r\n     *\r\n     * @return The column count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.createState#720",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.createState(org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    protected CategoryItemRendererState createState(PlotRenderingInfo info) {\n        return new CategoryItemRendererState(info);\n    }\n",
        "begin_line": 720,
        "end_line": 722,
        "comment": "\r\n     * Creates a new state instance---this method is called from the\r\n     * {@link #initialise(Graphics2D, Rectangle2D, CategoryPlot, int,\r\n     * PlotRenderingInfo)} method.  Subclasses can override this method if\r\n     * they need to use a subclass of {@link CategoryItemRendererState}.\r\n     *\r\n     * @param info  collects plot rendering info (<code>null</code> permitted).\r\n     *\r\n     * @return The new state instance (never <code>null</code>).\r\n     *\r\n     * @since 1.0.5\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.initialise#739",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, int, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public CategoryItemRendererState initialise(Graphics2D g2,\n                                                Rectangle2D dataArea,\n                                                CategoryPlot plot,\n                                                int rendererIndex,\n                                                PlotRenderingInfo info) {\n\n        setPlot(plot);\n        CategoryDataset data = plot.getDataset(rendererIndex);\n        if (data != null) {\n            this.rowCount = data.getRowCount();\n            this.columnCount = data.getColumnCount();\n        }\n        else {\n            this.rowCount = 0;\n            this.columnCount = 0;\n        }\n        return createState(info);\n\n    }\n",
        "begin_line": 739,
        "end_line": 757,
        "comment": "\r\n     * Initialises the renderer and returns a state object that will be used\r\n     * for the remainder of the drawing process for a single chart.  The state\r\n     * object allows for the fact that the renderer may be used simultaneously\r\n     * by multiple threads (each thread will work with a separate state object).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the data area.\r\n     * @param plot  the plot.\r\n     * @param rendererIndex  the renderer index.\r\n     * @param info  an object for returning information about the structure of\r\n     *              the plot (<code>null</code> permitted).\r\n     *\r\n     * @return The renderer state.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.drawBackground#781",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawBackground(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawBackground(Graphics2D g2,\n                               CategoryPlot plot,\n                               Rectangle2D dataArea) {\n\n        plot.drawBackground(g2, dataArea);\n\n    }\n",
        "begin_line": 781,
        "end_line": 787,
        "comment": "\r\n     * Draws a background for the data area.  The default implementation just\r\n     * gets the plot to draw the background, but some renderers will override \r\n     * this behaviour.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plot  the plot.\r\n     * @param dataArea  the data area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.drawRangeGridline#868",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawRangeGridline(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D, double)",
        "snippet": "    public void drawRangeGridline(Graphics2D g2,\n                                  CategoryPlot plot,\n                                  ValueAxis axis,\n                                  Rectangle2D dataArea,\n                                  double value) {\n\n        Range range = axis.getRange();\n        if (!range.contains(value)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());\n        Line2D line = null;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            line = new Line2D.Double(v, dataArea.getMinY(), v,\n                    dataArea.getMaxY());\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            line = new Line2D.Double(dataArea.getMinX(), v,\n                    dataArea.getMaxX(), v);\n        }\n\n        Paint paint = plot.getRangeGridlinePaint();\n        if (paint == null) {\n            paint = CategoryPlot.DEFAULT_GRIDLINE_PAINT;\n        }\n        g2.setPaint(paint);\n\n        Stroke stroke = plot.getRangeGridlineStroke();\n        if (stroke == null) {\n            stroke = CategoryPlot.DEFAULT_GRIDLINE_STROKE;\n        }\n        g2.setStroke(stroke);\n\n        g2.draw(line);\n\n    }\n",
        "begin_line": 868,
        "end_line": 905,
        "comment": "\r\n     * Draws a grid line against the range axis.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plot  the plot.\r\n     * @param axis  the value axis.\r\n     * @param dataArea  the area for plotting data (not yet adjusted for any\r\n     *                  3D effect).\r\n     * @param value  the value at which the grid line should be drawn.\r\n     *\r\n     * @see #drawDomainGridline(Graphics2D, CategoryPlot, Rectangle2D, double)\r\n     *\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.drawRangeMarker#1005",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawRangeMarker(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.plot.Marker, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawRangeMarker(Graphics2D g2,\n                                CategoryPlot plot,\n                                ValueAxis axis,\n                                Marker marker,\n                                Rectangle2D dataArea) {\n\n        if (marker instanceof ValueMarker) {\n            ValueMarker vm = (ValueMarker) marker;\n            double value = vm.getValue();\n            Range range = axis.getRange();\n\n            if (!range.contains(value)) {\n                return;\n            }\n\n            final Composite savedComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n            PlotOrientation orientation = plot.getOrientation();\n            double v = axis.valueToJava2D(value, dataArea,\n                    plot.getRangeAxisEdge());\n            Line2D line = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                line = new Line2D.Double(v, dataArea.getMinY(), v,\n                        dataArea.getMaxY());\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                line = new Line2D.Double(dataArea.getMinX(), v,\n                        dataArea.getMaxX(), v);\n            }\n\n            g2.setPaint(marker.getPaint());\n            g2.setStroke(marker.getStroke());\n            g2.draw(line);\n\n            String label = marker.getLabel();\n            RectangleAnchor anchor = marker.getLabelAnchor();\n            if (label != null) {\n                Font labelFont = marker.getLabelFont();\n                g2.setFont(labelFont);\n                g2.setPaint(marker.getLabelPaint());\n                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\n                        g2, orientation, dataArea, line.getBounds2D(),\n                        marker.getLabelOffset(), LengthAdjustmentType.EXPAND,\n                        anchor);\n                TextUtilities.drawAlignedString(label, g2,\n                        (float) coordinates.getX(), (float) coordinates.getY(),\n                        marker.getLabelTextAnchor());\n            }\n            g2.setComposite(savedComposite);\n        }\n        else if (marker instanceof IntervalMarker) {\n            IntervalMarker im = (IntervalMarker) marker;\n            double start = im.getStartValue();\n            double end = im.getEndValue();\n            Range range = axis.getRange();\n            if (!(range.intersects(start, end))) {\n                return;\n            }\n\n            final Composite savedComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n            double start2d = axis.valueToJava2D(start, dataArea,\n                    plot.getRangeAxisEdge());\n            double end2d = axis.valueToJava2D(end, dataArea,\n                    plot.getRangeAxisEdge());\n            double low = Math.min(start2d, end2d);\n            double high = Math.max(start2d, end2d);\n\n            PlotOrientation orientation = plot.getOrientation();\n            Rectangle2D rect = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                // clip left and right bounds to data area\n                low = Math.max(low, dataArea.getMinX());\n                high = Math.min(high, dataArea.getMaxX());\n                rect = new Rectangle2D.Double(low,\n                        dataArea.getMinY(), high - low,\n                        dataArea.getHeight());\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                // clip top and bottom bounds to data area\n                low = Math.max(low, dataArea.getMinY());\n                high = Math.min(high, dataArea.getMaxY());\n                rect = new Rectangle2D.Double(dataArea.getMinX(),\n                        low, dataArea.getWidth(),\n                        high - low);\n            }\n            Paint p = marker.getPaint();\n            if (p instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) p;\n                GradientPaintTransformer t = im.getGradientPaintTransformer();\n                if (t != null) {\n                    gp = t.transform(gp, rect);\n                }\n                g2.setPaint(gp);\n            }\n            else {\n                g2.setPaint(p);\n            }\n            g2.fill(rect);\n\n            // now draw the outlines, if visible...\n            if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {\n                if (orientation == PlotOrientation.VERTICAL) {\n                    Line2D line = new Line2D.Double();\n                    double x0 = dataArea.getMinX();\n                    double x1 = dataArea.getMaxX();\n                    g2.setPaint(im.getOutlinePaint());\n                    g2.setStroke(im.getOutlineStroke());\n                    if (range.contains(start)) {\n                        line.setLine(x0, start2d, x1, start2d);\n                        g2.draw(line);\n                    }\n                    if (range.contains(end)) {\n                        line.setLine(x0, end2d, x1, end2d);\n                        g2.draw(line);\n                    }\n                }\n                else { // PlotOrientation.HORIZONTAL\n                    Line2D line = new Line2D.Double();\n                    double y0 = dataArea.getMinY();\n                    double y1 = dataArea.getMaxY();\n                    g2.setPaint(im.getOutlinePaint());\n                    g2.setStroke(im.getOutlineStroke());\n                    if (range.contains(start)) {\n                        line.setLine(start2d, y0, start2d, y1);\n                        g2.draw(line);\n                    }\n                    if (range.contains(end)) {\n                        line.setLine(end2d, y0, end2d, y1);\n                        g2.draw(line);\n                    }\n                }\n            }\n\n            String label = marker.getLabel();\n            RectangleAnchor anchor = marker.getLabelAnchor();\n            if (label != null) {\n                Font labelFont = marker.getLabelFont();\n                g2.setFont(labelFont);\n                g2.setPaint(marker.getLabelPaint());\n                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\n                        g2, orientation, dataArea, rect,\n                        marker.getLabelOffset(), marker.getLabelOffsetType(),\n                        anchor);\n                TextUtilities.drawAlignedString(label, g2,\n                        (float) coordinates.getX(), (float) coordinates.getY(),\n                        marker.getLabelTextAnchor());\n            }\n            g2.setComposite(savedComposite);\n        }\n    }\n",
        "begin_line": 1005,
        "end_line": 1159,
        "comment": "\r\n     * Draws a marker for the range axis.\r\n     *\r\n     * @param g2  the graphics device (not <code>null</code>).\r\n     * @param plot  the plot (not <code>null</code>).\r\n     * @param axis  the range axis (not <code>null</code>).\r\n     * @param marker  the marker to be drawn (not <code>null</code>).\r\n     * @param dataArea  the area inside the axes (not <code>null</code>).\r\n     *\r\n     * @see #drawDomainMarker(Graphics2D, CategoryPlot, CategoryAxis,\r\n     *     CategoryMarker, Rectangle2D)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.getDrawingSupplier#1361",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getDrawingSupplier()",
        "snippet": "    public DrawingSupplier getDrawingSupplier() {\n        DrawingSupplier result = null;\n        CategoryPlot cp = getPlot();\n        if (cp != null) {\n            result = cp.getDrawingSupplier();\n        }\n        return result;\n    }\n",
        "begin_line": 1361,
        "end_line": 1368,
        "comment": "\r\n     * Returns the drawing supplier from the plot.\r\n     *\r\n     * @return The drawing supplier (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.drawAnnotations#1427",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawAnnotations(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.util.Layer, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,\n            CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer,\n            PlotRenderingInfo info) {\n\n        Iterator iterator = null;\n        if (layer.equals(Layer.FOREGROUND)) {\n            iterator = this.foregroundAnnotations.iterator();\n        }\n        else if (layer.equals(Layer.BACKGROUND)) {\n            iterator = this.backgroundAnnotations.iterator();\n        }\n        else {\n            // should not get here\n            throw new RuntimeException(\"Unknown layer.\");\n        }\n        while (iterator.hasNext()) {\n            CategoryAnnotation annotation = (CategoryAnnotation) iterator.next();\n            annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis,\n                    0, info);\n        }\n\n    }\n",
        "begin_line": 1427,
        "end_line": 1448,
        "comment": "\r\n     * Draws all the annotations for the specified layer.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the data area.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param layer  the layer.\r\n     * @param info  the plot rendering info.\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.getDomainAxis#1540",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getDomainAxis(org.jfree.chart.plot.CategoryPlot, int)",
        "snippet": "    protected CategoryAxis getDomainAxis(CategoryPlot plot, int index) {\n        CategoryAxis result = plot.getDomainAxis(index);\n        if (result == null) {\n            result = plot.getDomainAxis();\n        }\n        return result;\n    }\n",
        "begin_line": 1540,
        "end_line": 1546,
        "comment": "\r\n     * Returns a domain axis for a plot.\r\n     *\r\n     * @param plot  the plot.\r\n     * @param index  the axis index.\r\n     *\r\n     * @return A domain axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.getLegendItemLabelGenerator#1601",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItemLabelGenerator()",
        "snippet": "    public CategorySeriesLabelGenerator getLegendItemLabelGenerator() {\n        return this.legendItemLabelGenerator;\n    }\n",
        "begin_line": 1601,
        "end_line": 1603,
        "comment": "\r\n     * Returns the legend item label generator.\r\n     *\r\n     * @return The label generator (never <code>null</code>).\r\n     *\r\n     * @see #setLegendItemLabelGenerator(CategorySeriesLabelGenerator)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.getLegendItemToolTipGenerator#1629",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItemToolTipGenerator()",
        "snippet": "    public CategorySeriesLabelGenerator getLegendItemToolTipGenerator() {\n        return this.legendItemToolTipGenerator;\n    }\n",
        "begin_line": 1629,
        "end_line": 1631,
        "comment": "\r\n     * Returns the legend item tool tip generator.\r\n     *\r\n     * @return The tool tip generator (possibly <code>null</code>).\r\n     *\r\n     * @see #setLegendItemToolTipGenerator(CategorySeriesLabelGenerator)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.getLegendItemURLGenerator#1654",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItemURLGenerator()",
        "snippet": "    public CategorySeriesLabelGenerator getLegendItemURLGenerator() {\n        return this.legendItemURLGenerator;\n    }\n",
        "begin_line": 1654,
        "end_line": 1656,
        "comment": "\r\n     * Returns the legend item URL generator.\r\n     *\r\n     * @return The URL generator (possibly <code>null</code>).\r\n     *\r\n     * @see #setLegendItemURLGenerator(CategorySeriesLabelGenerator)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RendererState.RendererState#64",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/RendererState.java",
        "class_name": "org.jfree.chart.renderer.RendererState",
        "signature": "org.jfree.chart.renderer.RendererState.RendererState(org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public RendererState(PlotRenderingInfo info) {\n        this.info = info;\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\r\n     * Creates a new state object.\r\n     * \r\n     * @param info  the plot rendering info.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RendererState.getEntityCollection#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/RendererState.java",
        "class_name": "org.jfree.chart.renderer.RendererState",
        "signature": "org.jfree.chart.renderer.RendererState.getEntityCollection()",
        "snippet": "    public EntityCollection getEntityCollection() {\n        EntityCollection result = null;\n        if (this.info != null) {\n            ChartRenderingInfo owner = this.info.getOwner();\n            if (owner != null) {\n                result = owner.getEntityCollection(); \n            }\n        }\n        return result;\n    }\n",
        "begin_line": 84,
        "end_line": 93,
        "comment": "\r\n     * A convenience method that returns a reference to the entity\r\n     * collection (may be <code>null</code>) being used to record\r\n     * chart entities.\r\n     * \r\n     * @return The entity collection (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractRenderer.isSeriesVisible#399",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible(int)",
        "snippet": "    public boolean isSeriesVisible(int series) {\n        boolean result = this.baseSeriesVisible;\n        Boolean b = this.seriesVisibleList.getBoolean(series);\n        if (b != null) {\n            result = b.booleanValue();   \n        }\n        return result;\n    }\n",
        "begin_line": 399,
        "end_line": 406,
        "comment": "\r\n     * Returns a boolean that indicates whether or not the specified series \r\n     * should be drawn.\r\n     * \r\n     * @param series  the series index.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractRenderer.isSeriesVisibleInLegend#502",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.isSeriesVisibleInLegend(int)",
        "snippet": "    public boolean isSeriesVisibleInLegend(int series) {\n        boolean result = this.baseSeriesVisibleInLegend;\n        Boolean b = this.seriesVisibleInLegendList.getBoolean(series);\n        if (b != null) {\n            result = b.booleanValue();   \n        }\n        return result;\n    }\n",
        "begin_line": 502,
        "end_line": 509,
        "comment": "\r\n     * Returns <code>true</code> if the series should be shown in the legend,\r\n     * and <code>false</code> otherwise.\r\n     * \r\n     * @param series  the series index.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractRenderer.getItemPaint#613",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemPaint(int, int)",
        "snippet": "    public Paint getItemPaint(int row, int column) {\n        return lookupSeriesPaint(row);\n    }\n",
        "begin_line": 613,
        "end_line": 615,
        "comment": "\r\n     * Returns the paint used to fill data items as they are drawn.\r\n     * <p>\r\n     * The default implementation passes control to the \r\n     * <code>getSeriesPaint</code> method. You can override this method if you \r\n     * require different behaviour.\r\n     *\r\n     * @param row  the row (or series) index (zero-based).\r\n     * @param column  the column (or category) index (zero-based).\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractRenderer.lookupSeriesPaint#626",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesPaint(int)",
        "snippet": "    public Paint lookupSeriesPaint(int series) {\n\n        // look up the paint list\n        Paint seriesPaint = this.paintList.getPaint(series);\n        if (seriesPaint == null && this.autoPopulateSeriesPaint) {\n            DrawingSupplier supplier = getDrawingSupplier();\n            if (supplier != null) {\n                seriesPaint = supplier.getNextPaint();\n                this.paintList.setPaint(series, seriesPaint);\n            }\n        }\n        if (seriesPaint == null) {\n            seriesPaint = this.basePaint;\n        }\n        return seriesPaint;\n\n    }\n",
        "begin_line": 626,
        "end_line": 642,
        "comment": "\r\n     * Returns the paint used to fill an item drawn by the renderer.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractRenderer.lookupSeriesOutlinePaint#935",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesOutlinePaint(int)",
        "snippet": "    public Paint lookupSeriesOutlinePaint(int series) {\n\n        // look up the paint table\n        Paint seriesOutlinePaint = this.outlinePaintList.getPaint(series);\n        if (seriesOutlinePaint == null && this.autoPopulateSeriesOutlinePaint) {\n            DrawingSupplier supplier = getDrawingSupplier();\n            if (supplier != null) {\n                seriesOutlinePaint = supplier.getNextOutlinePaint();\n                this.outlinePaintList.setPaint(series, seriesOutlinePaint);\n            }\n        }\n        if (seriesOutlinePaint == null) {\n            seriesOutlinePaint = this.baseOutlinePaint;\n        }\n        return seriesOutlinePaint;\n\n    }\n",
        "begin_line": 935,
        "end_line": 951,
        "comment": "\r\n     * Returns the paint used to outline an item drawn by the renderer.\r\n     *\r\n     * @param series  the series (zero-based index).\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractRenderer.lookupSeriesOutlineStroke#1228",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesOutlineStroke(int)",
        "snippet": "    public Stroke lookupSeriesOutlineStroke(int series) {\n\n        // look up the stroke table\n        Stroke result = this.outlineStrokeList.getStroke(series);\n        if (result == null && this.autoPopulateSeriesOutlineStroke) {\n            DrawingSupplier supplier = getDrawingSupplier();\n            if (supplier != null) {\n                result = supplier.getNextOutlineStroke();\n                this.outlineStrokeList.setStroke(series, result);\n            }\n        }\n        if (result == null) {\n            result = this.baseOutlineStroke;\n        }\n        return result;\n\n    }\n",
        "begin_line": 1228,
        "end_line": 1244,
        "comment": "\r\n     * Returns the stroke used to outline the items in a series.\r\n     *\r\n     * @param series  the series (zero-based index).\r\n     *\r\n     * @return The stroke (never <code>null</code>).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractRenderer.addChangeListener#2280",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.addChangeListener(org.jfree.chart.event.RendererChangeListener)",
        "snippet": "    public void addChangeListener(RendererChangeListener listener) {\n        if (listener == null) {\n            throw new IllegalArgumentException(\"Null 'listener' argument.\");   \n        }\n        this.listenerList.add(RendererChangeListener.class, listener);\n    }\n",
        "begin_line": 2280,
        "end_line": 2285,
        "comment": "\r\n     * Registers an object to receive notification of changes to the renderer.\r\n     *\r\n     * @param listener  the listener (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueMarker.ValueMarker#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
        "class_name": "org.jfree.chart.plot.ValueMarker",
        "signature": "org.jfree.chart.plot.ValueMarker.ValueMarker(double, java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)",
        "snippet": "    public ValueMarker(double value, Paint paint, Stroke stroke, \n                       Paint outlinePaint, Stroke outlineStroke, float alpha) {\n        super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n    }\n",
        "begin_line": 93,
        "end_line": 97,
        "comment": "\r\n     * Creates a new value marker.\r\n     * \r\n     * @param value  the value.\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param stroke  the stroke (<code>null</code> not permitted).\r\n     * @param outlinePaint  the outline paint (<code>null</code> permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> permitted).\r\n     * @param alpha  the alpha transparency.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueMarker.getValue#104",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
        "class_name": "org.jfree.chart.plot.ValueMarker",
        "signature": "org.jfree.chart.plot.ValueMarker.getValue()",
        "snippet": "    public double getValue() {\n        return this.value;\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\r\n     * Returns the value.\r\n     *\r\n     * @return The value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "PlotRenderingInfo.PlotRenderingInfo#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.PlotRenderingInfo(org.jfree.chart.ChartRenderingInfo)",
        "snippet": "    public PlotRenderingInfo(ChartRenderingInfo owner) {\n        this.owner = owner;        \n        this.dataArea = new Rectangle2D.Double();\n        this.subplotInfo = new java.util.ArrayList();    \n    }\n",
        "begin_line": 91,
        "end_line": 95,
        "comment": "\r\n     * Creates a new instance.\r\n     * \r\n     * @param owner  the owner (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "PlotRenderingInfo.getOwner#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.getOwner()",
        "snippet": "    public ChartRenderingInfo getOwner() {\n        return this.owner;\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\r\n     * Returns the owner (as specified in the constructor).\r\n     * \r\n     * @return The owner (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "PlotRenderingInfo.setPlotArea#125",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.setPlotArea(java.awt.geom.Rectangle2D)",
        "snippet": "    public void setPlotArea(Rectangle2D area) {\n        this.plotArea = area;\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\r\n     * Sets the plot area.\r\n     * \r\n     * @param area  the plot area (in Java2D space, <code>null</code> \r\n     *     permitted but discouraged)\r\n     * \r\n     * @see #getPlotArea()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "PlotRenderingInfo.setDataArea#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.setDataArea(java.awt.geom.Rectangle2D)",
        "snippet": "    public void setDataArea(Rectangle2D area) {\n        this.dataArea = area;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\r\n     * Sets the data area.\r\n     * \r\n     * @param area  the data area (in Java2D space, <code>null</code> permitted\r\n     *     but discouraged).\r\n     * \r\n     * @see #getDataArea()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "PlotOrientation.PlotOrientation#73",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "signature": "org.jfree.chart.plot.PlotOrientation.PlotOrientation(java.lang.String)",
        "snippet": "    private PlotOrientation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.Plot#288",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.Plot()",
        "snippet": "    protected Plot() {\n\n        this.parent = null;\n        this.insets = DEFAULT_INSETS;\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n        this.backgroundAlpha = DEFAULT_BACKGROUND_ALPHA;\n        this.backgroundImage = null;\n        this.outlineVisible = true;\n        this.outlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.outlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.foregroundAlpha = DEFAULT_FOREGROUND_ALPHA;\n\n        this.noDataMessage = null;\n        this.noDataMessageFont = new Font(\"SansSerif\", Font.PLAIN, 12);\n        this.noDataMessagePaint = Color.black;\n\n        this.drawingSupplier = new DefaultDrawingSupplier();\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 288,
        "end_line": 308,
        "comment": "\r\n     * Creates a new plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.getParent#436",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getParent()",
        "snippet": "    public Plot getParent() {\n        return this.parent;\n    }\n",
        "begin_line": 436,
        "end_line": 438,
        "comment": "\r\n     * Returns the parent plot (or <code>null</code> if this plot is not part \r\n     * of a combined plot).\r\n     *\r\n     * @return The parent plot.\r\n     * \r\n     * @see #setParent(Plot)\r\n     * @see #getRootPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.getInsets#492",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getInsets()",
        "snippet": "    public RectangleInsets getInsets() {\n        return this.insets;\n    }\n",
        "begin_line": 492,
        "end_line": 494,
        "comment": "\r\n     * Returns the insets for the plot area.\r\n     *\r\n     * @return The insets (never <code>null</code>).\r\n     * \r\n     * @see #setInsets(RectangleInsets)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.getDrawingSupplier#605",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getDrawingSupplier()",
        "snippet": "    public DrawingSupplier getDrawingSupplier() {\n        DrawingSupplier result = null;\n        Plot p = getParent();\n        if (p != null) {\n            result = p.getDrawingSupplier();\n        }\n        else {\n            result = this.drawingSupplier;\n        }\n        return result;\n    }\n",
        "begin_line": 605,
        "end_line": 615,
        "comment": "\r\n     * Returns the drawing supplier for the plot.\r\n     *\r\n     * @return The drawing supplier (possibly <code>null</code>).\r\n     * \r\n     * @see #setDrawingSupplier(DrawingSupplier)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.getForegroundAlpha#834",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getForegroundAlpha()",
        "snippet": "    public float getForegroundAlpha() {\n        return this.foregroundAlpha;\n    }\n",
        "begin_line": 834,
        "end_line": 836,
        "comment": "\r\n     * Returns the alpha-transparency for the plot foreground.\r\n     *\r\n     * @return The alpha-transparency.\r\n     * \r\n     * @see #setForegroundAlpha(float)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.addChangeListener#871",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.addChangeListener(org.jfree.chart.event.PlotChangeListener)",
        "snippet": "    public void addChangeListener(PlotChangeListener listener) {\n        this.listenerList.add(PlotChangeListener.class, listener);\n    }\n",
        "begin_line": 871,
        "end_line": 873,
        "comment": "\r\n     * Registers an object for notification of changes to the plot.\r\n     *\r\n     * @param listener  the object to be registered.\r\n     * \r\n     * @see #removeChangeListener(PlotChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.notifyListeners#891",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.notifyListeners(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void notifyListeners(PlotChangeEvent event) {\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == PlotChangeListener.class) {\n                ((PlotChangeListener) listeners[i + 1]).plotChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 891,
        "end_line": 898,
        "comment": "\r\n     * Notifies all registered listeners that the plot has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.fillBackground#963",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.fillBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation)",
        "snippet": "    protected void fillBackground(Graphics2D g2, Rectangle2D area, \n            PlotOrientation orientation) {\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        if (this.backgroundPaint == null) {\n            return;\n        }\n        Paint p = this.backgroundPaint;\n        if (p instanceof GradientPaint) {\n            GradientPaint gp = (GradientPaint) p;\n            if (orientation == PlotOrientation.VERTICAL) {\n                p = new GradientPaint((float) area.getCenterX(), \n                        (float) area.getMaxY(), gp.getColor1(), \n                        (float) area.getCenterX(), (float) area.getMinY(), \n                        gp.getColor2());\n            }\n            else if (orientation == PlotOrientation.HORIZONTAL) {\n                p = new GradientPaint((float) area.getMinX(), \n                        (float) area.getCenterY(), gp.getColor1(), \n                        (float) area.getMaxX(), (float) area.getCenterY(), \n                        gp.getColor2());\n            }\n        }            \n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                this.backgroundAlpha));\n        g2.setPaint(p);\n        g2.fill(area);\n        g2.setComposite(originalComposite);        \n    }\n",
        "begin_line": 963,
        "end_line": 993,
        "comment": "\r\n     * Fills the specified area with the background paint.  If the background\r\n     * paint is an instance of <code>GradientPaint</code>, the gradient will\r\n     * run in the direction suggested by the plot's orientation.\r\n     * \r\n     * @param g2  the graphics target.\r\n     * @param area  the plot area.\r\n     * @param orientation  the plot orientation (<code>null</code> not \r\n     *         permitted).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.drawBackgroundImage#1006",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.drawBackgroundImage(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawBackgroundImage(Graphics2D g2, Rectangle2D area) {\n        if (this.backgroundImage != null) {\n            Composite originalComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \n                    this.backgroundImageAlpha));\n            Rectangle2D dest = new Rectangle2D.Double(0.0, 0.0,\n                    this.backgroundImage.getWidth(null), \n                    this.backgroundImage.getHeight(null));\n            Align.align(dest, area, this.backgroundImageAlignment);\n            g2.drawImage(this.backgroundImage, (int) dest.getX(), \n                    (int) dest.getY(), (int) dest.getWidth() + 1, \n                    (int) dest.getHeight() + 1, null);\n            g2.setComposite(originalComposite);\n        }\n    }\n",
        "begin_line": 1006,
        "end_line": 1020,
        "comment": "\r\n     * Draws the background image (if there is one) aligned within the \r\n     * specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * \r\n     * @see #getBackgroundImage()\r\n     * @see #getBackgroundImageAlignment()\r\n     * @see #getBackgroundImageAlpha()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.resolveDomainAxisLocation#1305",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation, org.jfree.chart.plot.PlotOrientation)",
        "snippet": "    public static RectangleEdge resolveDomainAxisLocation(\n            AxisLocation location, PlotOrientation orientation) {\n        \n        if (location == null) {\n            throw new IllegalArgumentException(\"Null 'location' argument.\");   \n        }\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n\n        RectangleEdge result = null;\n        \n        if (location == AxisLocation.TOP_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.RIGHT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.TOP;\n            }\n        }\n        else if (location == AxisLocation.TOP_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.LEFT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.TOP;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.RIGHT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.LEFT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n        }\n        // the above should cover all the options...\n        if (result == null) {\n            throw new IllegalStateException(\"resolveDomainAxisLocation()\");\n        }\n        return result;\n        \n    }\n",
        "begin_line": 1305,
        "end_line": 1355,
        "comment": "\r\n     * Resolves a domain axis location for a given plot orientation.\r\n     *\r\n     * @param location  the location (<code>null</code> not permitted).\r\n     * @param orientation  the orientation (<code>null</code> not permitted).\r\n     *\r\n     * @return The edge (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Plot.resolveRangeAxisLocation#1365",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation, org.jfree.chart.plot.PlotOrientation)",
        "snippet": "    public static RectangleEdge resolveRangeAxisLocation(\n            AxisLocation location, PlotOrientation orientation) {\n\n        if (location == null) {\n            throw new IllegalArgumentException(\"Null 'location' argument.\");   \n        }\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n\n        RectangleEdge result = null;\n        \n        if (location == AxisLocation.TOP_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.TOP;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.RIGHT;\n            }\n        }\n        else if (location == AxisLocation.TOP_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.TOP;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.LEFT;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.RIGHT;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.LEFT;\n            }\n        }\n\n        // the above should cover all the options...\n        if (result == null) {\n            throw new IllegalStateException(\"resolveRangeAxisLocation()\");\n        }\n        return result;\n        \n    }\n",
        "begin_line": 1365,
        "end_line": 1416,
        "comment": "\r\n     * Resolves a range axis location for a given plot orientation.\r\n     *\r\n     * @param location  the location (<code>null</code> not permitted).\r\n     * @param orientation  the orientation (<code>null</code> not permitted).\r\n     *\r\n     * @return The edge (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Marker.Marker#172",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.Marker(java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)",
        "snippet": "    protected Marker(Paint paint, Stroke stroke, \n                     Paint outlinePaint, Stroke outlineStroke, \n                     float alpha) {\n\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (alpha < 0.0f || alpha > 1.0f)\n            throw new IllegalArgumentException(\n                    \"The 'alpha' value must be in the range 0.0f to 1.0f\");\n        \n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n        \n        this.labelFont = new Font(\"SansSerif\", Font.PLAIN, 9);\n        this.labelPaint = Color.black;\n        this.labelAnchor = RectangleAnchor.TOP_LEFT;\n        this.labelOffset = new RectangleInsets(3.0, 3.0, 3.0, 3.0);\n        this.labelOffsetType = LengthAdjustmentType.CONTRACT;\n        this.labelTextAnchor = TextAnchor.CENTER;\n        \n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 172,
        "end_line": 200,
        "comment": "\r\n     * Constructs a new marker.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param stroke  the stroke (<code>null</code> not permitted).\r\n     * @param outlinePaint  the outline paint (<code>null</code> permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> permitted).\r\n     * @param alpha  the alpha transparency (must be in the range 0.0f to \r\n     *     1.0f).\r\n     *     \r\n     * @throws IllegalArgumentException if <code>paint</code> or \r\n     *     <code>stroke</code> is <code>null</code>, or <code>alpha</code> is \r\n     *     not in the specified range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Marker.getPaint#209",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.getPaint()",
        "snippet": "    public Paint getPaint() {\n        return this.paint;\n    }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\r\n     * Returns the paint.\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @see #setPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Marker.getStroke#236",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.getStroke()",
        "snippet": "    public Stroke getStroke() {\n        return this.stroke;\n    }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\r\n     * Returns the stroke.\r\n     *\r\n     * @return The stroke (never <code>null</code>).\r\n     * \r\n     * @see #setStroke(Stroke)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Marker.getAlpha#311",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.getAlpha()",
        "snippet": "    public float getAlpha() {\n        return this.alpha;\n    }\n",
        "begin_line": 311,
        "end_line": 313,
        "comment": "\r\n     * Returns the alpha transparency.\r\n     *\r\n     * @return The alpha transparency.\r\n     * \r\n     * @see #setAlpha(float)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Marker.getLabel#344",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.getLabel()",
        "snippet": "    public String getLabel() {\n        return this.label;\n    }\n",
        "begin_line": 344,
        "end_line": 346,
        "comment": "\r\n     * Returns the label (if <code>null</code> no label is displayed).\r\n     *\r\n     * @return The label (possibly <code>null</code>).\r\n     * \r\n     * @see #setLabel(String)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Marker.getLabelAnchor#423",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.getLabelAnchor()",
        "snippet": "    public RectangleAnchor getLabelAnchor() {\n        return this.labelAnchor;\n    }\n",
        "begin_line": 423,
        "end_line": 425,
        "comment": "\r\n     * Returns the label anchor.  This defines the position of the label \r\n     * anchor, relative to the bounds of the marker.\r\n     *\r\n     * @return The label anchor (never <code>null</code>).\r\n     * \r\n     * @see #setLabelAnchor(RectangleAnchor)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Marker.addChangeListener#532",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.addChangeListener(org.jfree.chart.event.MarkerChangeListener)",
        "snippet": "    public void addChangeListener(MarkerChangeListener listener) {\n        this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n",
        "begin_line": 532,
        "end_line": 534,
        "comment": "\r\n     * Registers an object for notification of changes to the marker.\r\n     *\r\n     * @param listener  the object to be registered.\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#150",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier()",
        "snippet": "    public DefaultDrawingSupplier() {\n\n        this(DEFAULT_PAINT_SEQUENCE, DEFAULT_FILL_PAINT_SEQUENCE,\n             DEFAULT_OUTLINE_PAINT_SEQUENCE,\n             DEFAULT_STROKE_SEQUENCE,\n             DEFAULT_OUTLINE_STROKE_SEQUENCE,\n             DEFAULT_SHAPE_SEQUENCE);\n\n    }\n",
        "begin_line": 150,
        "end_line": 158,
        "comment": "\r\n     * Creates a new supplier, with default sequences for fill paint, outline \r\n     * paint, stroke and shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#196",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])",
        "snippet": "    public DefaultDrawingSupplier(Paint[] paintSequence, \n            Paint[] fillPaintSequence, Paint[] outlinePaintSequence,\n            Stroke[] strokeSequence, Stroke[] outlineStrokeSequence,\n            Shape[] shapeSequence) {\n\n        this.paintSequence = paintSequence;\n        this.fillPaintSequence = fillPaintSequence;\n        this.outlinePaintSequence = outlinePaintSequence;\n        this.strokeSequence = strokeSequence;\n        this.outlineStrokeSequence = outlineStrokeSequence;\n        this.shapeSequence = shapeSequence;\n    }\n",
        "begin_line": 196,
        "end_line": 207,
        "comment": "\r\n     * Creates a new supplier.\r\n     *\r\n     * @param paintSequence  the paint sequence.\r\n     * @param fillPaintSequence  the fill paint sequence.\r\n     * @param outlinePaintSequence  the outline paint sequence.\r\n     * @param strokeSequence  the stroke sequence.\r\n     * @param outlineStrokeSequence  the outline stroke sequence.\r\n     * @param shapeSequence  the shape sequence.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.getNextPaint#214",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextPaint()",
        "snippet": "    public Paint getNextPaint() {\n        Paint result \n            = this.paintSequence[this.paintIndex % this.paintSequence.length];\n        this.paintIndex++;\n        return result;\n    }\n",
        "begin_line": 214,
        "end_line": 219,
        "comment": "\r\n     * Returns the next paint in the sequence.\r\n     *\r\n     * @return The paint.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.createStandardSeriesShapes#289",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes()",
        "snippet": "    public static Shape[] createStandardSeriesShapes() {\n\n        Shape[] result = new Shape[10];\n\n        double size = 6.0;\n        double delta = size / 2.0;\n        int[] xpoints = null;\n        int[] ypoints = null;\n\n        // square\n        result[0] = new Rectangle2D.Double(-delta, -delta, size, size);\n        // circle\n        result[1] = new Ellipse2D.Double(-delta, -delta, size, size);\n\n        // up-pointing triangle\n        xpoints = intArray(0.0, delta, -delta);\n        ypoints = intArray(-delta, delta, delta);\n        result[2] = new Polygon(xpoints, ypoints, 3);\n\n        // diamond\n        xpoints = intArray(0.0, delta, 0.0, -delta);\n        ypoints = intArray(-delta, 0.0, delta, 0.0);\n        result[3] = new Polygon(xpoints, ypoints, 4);\n\n        // horizontal rectangle\n        result[4] = new Rectangle2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // down-pointing triangle\n        xpoints = intArray(-delta, +delta, 0.0);\n        ypoints = intArray(-delta, -delta, delta);\n        result[5] = new Polygon(xpoints, ypoints, 3);\n\n        // horizontal ellipse\n        result[6] = new Ellipse2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // right-pointing triangle\n        xpoints = intArray(-delta, delta, -delta);\n        ypoints = intArray(-delta, 0.0, delta);\n        result[7] = new Polygon(xpoints, ypoints, 3);\n\n        // vertical rectangle\n        result[8] = new Rectangle2D.Double(-delta / 2, -delta, size / 2, size);\n\n        // left-pointing triangle\n        xpoints = intArray(-delta, delta, delta);\n        ypoints = intArray(0.0, -delta, +delta);\n        result[9] = new Polygon(xpoints, ypoints, 3);\n\n        return result;\n\n    }\n",
        "begin_line": 289,
        "end_line": 339,
        "comment": "\r\n     * Creates an array of standard shapes to display for the items in series \r\n     * on charts.\r\n     *\r\n     * @return The array of shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.intArray#518",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c) {\n        return new int[] {(int) a, (int) b, (int) c};\n    }\n",
        "begin_line": 518,
        "end_line": 520,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     *\r\n     * @return int[3] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultDrawingSupplier.intArray#533",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c, double d) {\n        return new int[] {(int) a, (int) b, (int) c, (int) d};\n    }\n",
        "begin_line": 533,
        "end_line": 535,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     * @param d  t\r\n     *\r\n     * @return int[4] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "DatasetRenderingOrder.DatasetRenderingOrder#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.DatasetRenderingOrder(java.lang.String)",
        "snippet": "    private DatasetRenderingOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.CategoryPlot#433",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.CategoryPlot(org.jfree.data.category.CategoryDataset, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.renderer.category.CategoryItemRenderer)",
        "snippet": "    public CategoryPlot(CategoryDataset dataset,\n                        CategoryAxis domainAxis,\n                        ValueAxis rangeAxis,\n                        CategoryItemRenderer renderer) {\n\n        super();\n\n        this.orientation = PlotOrientation.VERTICAL;\n\n        // allocate storage for dataset, axes and renderers\n        this.domainAxes = new ObjectList();\n        this.domainAxisLocations = new ObjectList();\n        this.rangeAxes = new ObjectList();\n        this.rangeAxisLocations = new ObjectList();\n        \n        this.datasetToDomainAxisMap = new ObjectList();\n        this.datasetToRangeAxisMap = new ObjectList();\n\n        this.renderers = new ObjectList();\n\n        this.datasets = new ObjectList();\n        this.datasets.set(0, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n\n        this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0);\n\n        setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT, false);\n        setRangeAxisLocation(AxisLocation.TOP_OR_LEFT, false);\n\n        this.renderers.set(0, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n\n        this.domainAxes.set(0, domainAxis);\n        this.mapDatasetToDomainAxis(0, 0);\n        if (domainAxis != null) {\n            domainAxis.setPlot(this);\n            domainAxis.addChangeListener(this);\n        }\n        this.drawSharedDomainAxis = false;\n\n        this.rangeAxes.set(0, rangeAxis);\n        this.mapDatasetToRangeAxis(0, 0);\n        if (rangeAxis != null) {\n            rangeAxis.setPlot(this);\n            rangeAxis.addChangeListener(this);\n        }\n        \n        configureDomainAxes();\n        configureRangeAxes();\n\n        this.domainGridlinesVisible = DEFAULT_DOMAIN_GRIDLINES_VISIBLE;\n        this.domainGridlinePosition = CategoryAnchor.MIDDLE;\n        this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.rangeGridlinesVisible = DEFAULT_RANGE_GRIDLINES_VISIBLE;\n        this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.foregroundDomainMarkers = new HashMap();\n        this.backgroundDomainMarkers = new HashMap();\n        this.foregroundRangeMarkers = new HashMap();\n        this.backgroundRangeMarkers = new HashMap();\n\n        Marker baseline = new ValueMarker(0.0, new Color(0.8f, 0.8f, 0.8f, \n                0.5f), new BasicStroke(1.0f), new Color(0.85f, 0.85f, 0.95f, \n                0.5f), new BasicStroke(1.0f), 0.6f);\n        addRangeMarker(baseline, Layer.BACKGROUND);\n\n        this.anchorValue = 0.0;\n\n        this.rangeCrosshairVisible = DEFAULT_CROSSHAIR_VISIBLE;\n        this.rangeCrosshairValue = 0.0;\n        this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n        \n        this.annotations = new java.util.ArrayList();\n\n    }\n",
        "begin_line": 433,
        "end_line": 516,
        "comment": "\r\n     * Creates a new plot.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * @param domainAxis  the domain axis (<code>null</code> permitted).\r\n     * @param rangeAxis  the range axis (<code>null</code> permitted).\r\n     * @param renderer  the item renderer (<code>null</code> permitted).\r\n     *\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getOrientation#534",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getOrientation()",
        "snippet": "    public PlotOrientation getOrientation() {\n        return this.orientation;\n    }\n",
        "begin_line": 534,
        "end_line": 536,
        "comment": "\r\n     * Returns the orientation of the plot.\r\n     *\r\n     * @return The orientation of the plot (never <code>null</code>).\r\n     * \r\n     * @see #setOrientation(PlotOrientation)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDomainAxis#590",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxis()",
        "snippet": "    public CategoryAxis getDomainAxis() {\n        return getDomainAxis(0);\n    }\n",
        "begin_line": 590,
        "end_line": 592,
        "comment": "\r\n     * Returns the domain axis for the plot.  If the domain axis for this plot\r\n     * is <code>null</code>, then the method will return the parent plot's \r\n     * domain axis (if there is a parent plot).\r\n     *\r\n     * @return The domain axis (<code>null</code> permitted).\r\n     * \r\n     * @see #setDomainAxis(CategoryAxis)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDomainAxis#603",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxis(int)",
        "snippet": "    public CategoryAxis getDomainAxis(int index) {\n        CategoryAxis result = null;\n        if (index < this.domainAxes.size()) {\n            result = (CategoryAxis) this.domainAxes.get(index);\n        }\n        if (result == null) {\n            Plot parent = getParent();\n            if (parent instanceof CategoryPlot) {\n                CategoryPlot cp = (CategoryPlot) parent;\n                result = cp.getDomainAxis(index);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 603,
        "end_line": 616,
        "comment": "\r\n     * Returns a domain axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The axis (<code>null</code> possible).\r\n     * \r\n     * @see #setDomainAxis(int, CategoryAxis)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDomainAxisLocation#705",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisLocation()",
        "snippet": "    public AxisLocation getDomainAxisLocation() {\n        return getDomainAxisLocation(0);\n    }\n",
        "begin_line": 705,
        "end_line": 707,
        "comment": "\r\n     * Returns the domain axis location for the primary domain axis.\r\n     *\r\n     * @return The location (never <code>null</code>).\r\n     * \r\n     * @see #getRangeAxisLocation()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDomainAxisLocation#718",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisLocation(int)",
        "snippet": "    public AxisLocation getDomainAxisLocation(int index) {\n        AxisLocation result = null;\n        if (index < this.domainAxisLocations.size()) {\n            result = (AxisLocation) this.domainAxisLocations.get(index);\n        }\n        if (result == null) {\n            result = AxisLocation.getOpposite(getDomainAxisLocation(0));\n        }\n        return result;\n    }\n",
        "begin_line": 718,
        "end_line": 727,
        "comment": "\r\n     * Returns the location for a domain axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The location.\r\n     * \r\n     * @see #setDomainAxisLocation(int, AxisLocation)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.setDomainAxisLocation#750",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setDomainAxisLocation(AxisLocation location, boolean notify) {\n        // delegate...\n        setDomainAxisLocation(0, location, notify);\n    }\n",
        "begin_line": 750,
        "end_line": 753,
        "comment": "\r\n     * Sets the location of the domain axis and, if requested, sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param location  the axis location (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether listeners are notified.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.setDomainAxisLocation#783",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setDomainAxisLocation(int index, AxisLocation location, \n            boolean notify) {\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'location' for index 0 not permitted.\");\n        }\n        this.domainAxisLocations.set(index, location);\n        if (notify) {\n            notifyListeners(new PlotChangeEvent(this));\n        }\n    }\n",
        "begin_line": 783,
        "end_line": 793,
        "comment": "\r\n     * Sets the location for a domain axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     * \r\n     * @param index  the axis index.\r\n     * @param location  the location.\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @since 1.0.5\r\n     * \r\n     * @see #getDomainAxisLocation(int)\r\n     * @see #setRangeAxisLocation(int, AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDomainAxisEdge#801",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisEdge()",
        "snippet": "    public RectangleEdge getDomainAxisEdge() {\n        return getDomainAxisEdge(0);\n    }\n",
        "begin_line": 801,
        "end_line": 803,
        "comment": "\r\n     * Returns the domain axis edge.  This is derived from the axis location\r\n     * and the plot orientation.\r\n     *\r\n     * @return The edge (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDomainAxisEdge#812",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisEdge(int)",
        "snippet": "    public RectangleEdge getDomainAxisEdge(int index) {\n        RectangleEdge result = null;\n        AxisLocation location = getDomainAxisLocation(index);\n        if (location != null) {\n            result = Plot.resolveDomainAxisLocation(location, this.orientation);\n        }\n        else {\n            result = RectangleEdge.opposite(getDomainAxisEdge(0));\n        }\n        return result;\n    }\n",
        "begin_line": 812,
        "end_line": 822,
        "comment": "\r\n     * Returns the edge for a domain axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The edge (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.configureDomainAxes#851",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.configureDomainAxes()",
        "snippet": "    public void configureDomainAxes() {\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 851,
        "end_line": 858,
        "comment": "\r\n     * Configures the domain axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRangeAxis#867",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxis()",
        "snippet": "    public ValueAxis getRangeAxis() {\n        return getRangeAxis(0);\n    }\n",
        "begin_line": 867,
        "end_line": 869,
        "comment": "\r\n     * Returns the range axis for the plot.  If the range axis for this plot is\r\n     * null, then the method will return the parent plot's range axis (if there\r\n     * is a parent plot).\r\n     *\r\n     * @return The range axis (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRangeAxis#878",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxis(int)",
        "snippet": "    public ValueAxis getRangeAxis(int index) {\n        ValueAxis result = null;\n        if (index < this.rangeAxes.size()) {\n            result = (ValueAxis) this.rangeAxes.get(index);\n        }\n        if (result == null) {\n            Plot parent = getParent();\n            if (parent instanceof CategoryPlot) {\n                CategoryPlot cp = (CategoryPlot) parent;\n                result = cp.getRangeAxis(index);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 878,
        "end_line": 891,
        "comment": "\r\n     * Returns a range axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The axis (<code>null</code> possible).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRangeAxisLocation#997",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisLocation(int)",
        "snippet": "    public AxisLocation getRangeAxisLocation(int index) {\n        AxisLocation result = null;\n        if (index < this.rangeAxisLocations.size()) {\n            result = (AxisLocation) this.rangeAxisLocations.get(index);\n        }\n        if (result == null) {\n            result = AxisLocation.getOpposite(getRangeAxisLocation(0));\n        }\n        return result;\n    }\n",
        "begin_line": 997,
        "end_line": 1006,
        "comment": "\r\n     * Returns the location for a range axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The location.\r\n     * \r\n     * @see #setRangeAxisLocation(int, AxisLocation)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.setRangeAxisLocation#1031",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setRangeAxisLocation(AxisLocation location, boolean notify) {\n        setRangeAxisLocation(0, location, notify);\n    }\n",
        "begin_line": 1031,
        "end_line": 1033,
        "comment": "\r\n     * Sets the location of the range axis and, if requested, sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param location  the location (<code>null</code> not permitted).\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @see #setDomainAxisLocation(AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.setRangeAxisLocation#1060",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setRangeAxisLocation(int index, AxisLocation location, \n                                     boolean notify) {\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'location' for index 0 not permitted.\");\n        }\n        this.rangeAxisLocations.set(index, location);\n        if (notify) {\n            notifyListeners(new PlotChangeEvent(this));\n        }\n    }\n",
        "begin_line": 1060,
        "end_line": 1070,
        "comment": "\r\n     * Sets the location for a range axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     *\r\n     * @param index  the axis index.\r\n     * @param location  the location.\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @see #getRangeAxisLocation(int)\r\n     * @see #setDomainAxisLocation(int, AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRangeAxisEdge#1077",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisEdge()",
        "snippet": "    public RectangleEdge getRangeAxisEdge() {\n        return getRangeAxisEdge(0);\n    }\n",
        "begin_line": 1077,
        "end_line": 1079,
        "comment": "\r\n     * Returns the edge where the primary range axis is located.\r\n     *\r\n     * @return The edge (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRangeAxisEdge#1088",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisEdge(int)",
        "snippet": "    public RectangleEdge getRangeAxisEdge(int index) {\n        AxisLocation location = getRangeAxisLocation(index);\n        RectangleEdge result = Plot.resolveRangeAxisLocation(location, \n                this.orientation);\n        if (result == null) {\n            result = RectangleEdge.opposite(getRangeAxisEdge(0));\n        }\n        return result;\n    }\n",
        "begin_line": 1088,
        "end_line": 1096,
        "comment": "\r\n     * Returns the edge for a range axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The edge.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.configureRangeAxes#1125",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.configureRangeAxes()",
        "snippet": "    public void configureRangeAxes() {\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 1125,
        "end_line": 1132,
        "comment": "\r\n     * Configures the range axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDataset#1154",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDataset(int)",
        "snippet": "    public CategoryDataset getDataset(int index) {\n        CategoryDataset result = null;\n        if (this.datasets.size() > index) {\n            result = (CategoryDataset) this.datasets.get(index);\n        }\n        return result;\n    }\n",
        "begin_line": 1154,
        "end_line": 1160,
        "comment": "\r\n     * Returns the dataset at the given index.\r\n     *\r\n     * @param index  the dataset index.\r\n     *\r\n     * @return The dataset (possibly <code>null</code>).\r\n     * \r\n     * @see #setDataset(int, CategoryDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.mapDatasetToDomainAxis#1221",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis(int, int)",
        "snippet": "    public void mapDatasetToDomainAxis(int index, int axisIndex) {\n        this.datasetToDomainAxisMap.set(index, new Integer(axisIndex));  \n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));  \n    }\n",
        "begin_line": 1221,
        "end_line": 1225,
        "comment": "\r\n     * Maps a dataset to a particular domain axis.\r\n     * \r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index (zero-based).\r\n     * \r\n     * @see #getDomainAxisForDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDomainAxisForDataset#1237",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisForDataset(int)",
        "snippet": "    public CategoryAxis getDomainAxisForDataset(int index) {\n        CategoryAxis result = getDomainAxis();\n        Integer axisIndex = (Integer) this.datasetToDomainAxisMap.get(index);\n        if (axisIndex != null) {\n            result = getDomainAxis(axisIndex.intValue());\n        }\n        return result;    \n    }\n",
        "begin_line": 1237,
        "end_line": 1244,
        "comment": "\r\n     * Returns the domain axis for a dataset.  You can change the axis for a \r\n     * dataset using the {@link #mapDatasetToDomainAxis(int, int)} method.\r\n     * \r\n     * @param index  the dataset index.\r\n     * \r\n     * @return The domain axis.\r\n     * \r\n     * @see #mapDatasetToDomainAxis(int, int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.mapDatasetToRangeAxis#1254",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis(int, int)",
        "snippet": "    public void mapDatasetToRangeAxis(int index, int axisIndex) {\n        this.datasetToRangeAxisMap.set(index, new Integer(axisIndex));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));  \n    }\n",
        "begin_line": 1254,
        "end_line": 1258,
        "comment": "\r\n     * Maps a dataset to a particular range axis.\r\n     * \r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index (zero-based).\r\n     * \r\n     * @see #getRangeAxisForDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRangeAxisForDataset#1270",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisForDataset(int)",
        "snippet": "    public ValueAxis getRangeAxisForDataset(int index) {\n        ValueAxis result = getRangeAxis();\n        Integer axisIndex = (Integer) this.datasetToRangeAxisMap.get(index);\n        if (axisIndex != null) {\n            result = getRangeAxis(axisIndex.intValue());\n        }\n        return result;    \n    }\n",
        "begin_line": 1270,
        "end_line": 1277,
        "comment": "\r\n     * Returns the range axis for a dataset.  You can change the axis for a \r\n     * dataset using the {@link #mapDatasetToRangeAxis(int, int)} method.\r\n     * \r\n     * @param index  the dataset index.\r\n     * \r\n     * @return The range axis.\r\n     * \r\n     * @see #mapDatasetToRangeAxis(int, int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRenderer#1286",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRenderer()",
        "snippet": "    public CategoryItemRenderer getRenderer() {\n        return getRenderer(0);\n    }\n",
        "begin_line": 1286,
        "end_line": 1288,
        "comment": "\r\n     * Returns a reference to the renderer for the plot.\r\n     *\r\n     * @return The renderer.\r\n     * \r\n     * @see #setRenderer(CategoryItemRenderer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRenderer#1299",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRenderer(int)",
        "snippet": "    public CategoryItemRenderer getRenderer(int index) {\n        CategoryItemRenderer result = null;\n        if (this.renderers.size() > index) {\n            result = (CategoryItemRenderer) this.renderers.get(index);\n        }\n        return result;\n    }\n",
        "begin_line": 1299,
        "end_line": 1305,
        "comment": "\r\n     * Returns the renderer at the given index.\r\n     *\r\n     * @param index  the renderer index.\r\n     *\r\n     * @return The renderer (possibly <code>null</code>).\r\n     * \r\n     * @see #setRenderer(int, CategoryItemRenderer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRendererForDataset#1411",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRendererForDataset(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public CategoryItemRenderer getRendererForDataset(CategoryDataset dataset) {\n        CategoryItemRenderer result = null;\n        for (int i = 0; i < this.datasets.size(); i++) {\n            if (this.datasets.get(i) == dataset) {\n                result = (CategoryItemRenderer) this.renderers.get(i);   \n                break;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 1411,
        "end_line": 1420,
        "comment": "\r\n     * Returns the renderer for the specified dataset.  If the dataset doesn't\r\n     * belong to the plot, this method will return <code>null</code>.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * \r\n     * @return The renderer (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDatasetRenderingOrder#1441",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDatasetRenderingOrder()",
        "snippet": "    public DatasetRenderingOrder getDatasetRenderingOrder() {\n        return this.renderingOrder;\n    }\n",
        "begin_line": 1441,
        "end_line": 1443,
        "comment": "\r\n     * Returns the dataset rendering order.\r\n     *\r\n     * @return The order (never <code>null</code>).\r\n     * \r\n     * @see #setDatasetRenderingOrder(DatasetRenderingOrder)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.isDomainGridlinesVisible#1532",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.isDomainGridlinesVisible()",
        "snippet": "    public boolean isDomainGridlinesVisible() {\n        return this.domainGridlinesVisible;\n    }\n",
        "begin_line": 1532,
        "end_line": 1534,
        "comment": "\r\n     * Returns the flag that controls whether the domain grid-lines are visible.\r\n     *\r\n     * @return The <code>true</code> or <code>false</code>.\r\n     * \r\n     * @see #setDomainGridlinesVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.isRangeGridlinesVisible#1642",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.isRangeGridlinesVisible()",
        "snippet": "    public boolean isRangeGridlinesVisible() {\n        return this.rangeGridlinesVisible;\n    }\n",
        "begin_line": 1642,
        "end_line": 1644,
        "comment": "\r\n     * Returns the flag that controls whether the range grid-lines are visible.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #setRangeGridlinesVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRangeGridlineStroke#1669",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeGridlineStroke()",
        "snippet": "    public Stroke getRangeGridlineStroke() {\n        return this.rangeGridlineStroke;\n    }\n",
        "begin_line": 1669,
        "end_line": 1671,
        "comment": "\r\n     * Returns the stroke used to draw the grid-lines against the range axis.\r\n     *\r\n     * @return The stroke (never <code>null</code>).\r\n     * \r\n     * @see #setRangeGridlineStroke(Stroke)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRangeGridlinePaint#1696",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeGridlinePaint()",
        "snippet": "    public Paint getRangeGridlinePaint() {\n        return this.rangeGridlinePaint;\n    }\n",
        "begin_line": 1696,
        "end_line": 1698,
        "comment": "\r\n     * Returns the paint used to draw the grid-lines against the range axis.\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @see #setRangeGridlinePaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getLegendItems#1748",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getLegendItems()",
        "snippet": "    public LegendItemCollection getLegendItems() {\n        LegendItemCollection result = this.fixedLegendItems;\n        if (result == null) {\n            result = new LegendItemCollection();\n            // get the legend items for the datasets...\n            int count = this.datasets.size();\n            for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {\n                CategoryDataset dataset = getDataset(datasetIndex);\n                if (dataset != null) {\n                    CategoryItemRenderer renderer = getRenderer(datasetIndex);\n                    if (renderer != null) {\n                        int seriesCount = dataset.getRowCount();\n                        for (int i = 0; i < seriesCount; i++) {\n                            LegendItem item = renderer.getLegendItem(\n                                    datasetIndex, i);\n                            if (item != null) {\n                                result.add(item);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 1748,
        "end_line": 1772,
        "comment": "\r\n     * Returns the legend items for the plot.  By default, this method creates \r\n     * a legend item for each series in each of the datasets.  You can change \r\n     * this behaviour by overriding this method.\r\n     *\r\n     * @return The legend items.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.datasetChanged#1834",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    public void datasetChanged(DatasetChangeEvent event) {\n\n        int count = this.rangeAxes.size();\n        for (int axisIndex = 0; axisIndex < count; axisIndex++) {\n            ValueAxis yAxis = getRangeAxis(axisIndex);\n            if (yAxis != null) {\n                yAxis.configure();\n            }\n        }\n        if (getParent() != null) {\n            getParent().datasetChanged(event);\n        }\n        else {\n            PlotChangeEvent e = new PlotChangeEvent(this);\n            e.setType(ChartChangeEventType.DATASET_UPDATED);\n            notifyListeners(e);\n        }\n\n    }\n",
        "begin_line": 1834,
        "end_line": 1852,
        "comment": "\r\n     * Receives notification of a change to the plot's dataset.\r\n     * <P>\r\n     * The range axis bounds will be recalculated if necessary.\r\n     *\r\n     * @param event  information about the event (not used here).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDomainMarkers#1994",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainMarkers(int, org.jfree.chart.util.Layer)",
        "snippet": "    public Collection getDomainMarkers(int index, Layer layer) {\n        Collection result = null;\n        Integer key = new Integer(index);\n        if (layer == Layer.FOREGROUND) {\n            result = (Collection) this.foregroundDomainMarkers.get(key);\n        }    \n        else if (layer == Layer.BACKGROUND) {\n            result = (Collection) this.backgroundDomainMarkers.get(key);\n        }\n        if (result != null) {\n            result = Collections.unmodifiableCollection(result);\n        }\n        return result;\n    }\n",
        "begin_line": 1994,
        "end_line": 2007,
        "comment": "\r\n     * Returns a collection of domain markers for a particular renderer and \r\n     * layer.\r\n     * \r\n     * @param index  the renderer index.\r\n     * @param layer  the layer.\r\n     * \r\n     * @return A collection of markers (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.addRangeMarker#2067",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public void addRangeMarker(Marker marker, Layer layer) {\n        addRangeMarker(0, marker, layer);\n    }\n",
        "begin_line": 2067,
        "end_line": 2069,
        "comment": "\r\n     * Adds a marker for display against the range axis and sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.  Typically a marker \r\n     * will be drawn by the renderer as a line perpendicular to the range axis, \r\n     * however this is entirely up to the renderer.\r\n     *\r\n     * @param marker  the marker (<code>null</code> not permitted).\r\n     * @param layer  the layer (foreground or background) (<code>null</code> \r\n     *               not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.addRangeMarker#2081",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public void addRangeMarker(int index, Marker marker, Layer layer) {\n        Collection markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (Collection) this.foregroundRangeMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.foregroundRangeMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);\n        }\n        else if (layer == Layer.BACKGROUND) {\n            markers = (Collection) this.backgroundRangeMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.backgroundRangeMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);            \n        }\n        marker.addChangeListener(this);\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 2081,
        "end_line": 2103,
        "comment": "\r\n     * Adds a marker for display by a particular renderer.\r\n     * <P>\r\n     * Typically a marker will be drawn by the renderer as a line perpendicular\r\n     * to a range axis, however this is entirely up to the renderer.\r\n     *\r\n     * @param index  the renderer index.\r\n     * @param marker  the marker.\r\n     * @param layer  the layer.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getRangeMarkers#2155",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeMarkers(int, org.jfree.chart.util.Layer)",
        "snippet": "    public Collection getRangeMarkers(int index, Layer layer) {\n        Collection result = null;\n        Integer key = new Integer(index);\n        if (layer == Layer.FOREGROUND) {\n            result = (Collection) this.foregroundRangeMarkers.get(key);\n        }    \n        else if (layer == Layer.BACKGROUND) {\n            result = (Collection) this.backgroundRangeMarkers.get(key);\n        }\n        if (result != null) {\n            result = Collections.unmodifiableCollection(result);\n        }\n        return result;\n    }\n",
        "begin_line": 2155,
        "end_line": 2168,
        "comment": "\r\n     * Returns a collection of range markers for a particular renderer and \r\n     * layer.\r\n     * \r\n     * @param index  the renderer index.\r\n     * @param layer  the layer.\r\n     * \r\n     * @return A collection of markers (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.calculateDomainAxisSpace#2428",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.calculateDomainAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.AxisSpace)",
        "snippet": "    protected AxisSpace calculateDomainAxisSpace(Graphics2D g2, \n                                                 Rectangle2D plotArea, \n                                                 AxisSpace space) {\n                                                     \n        if (space == null) {\n            space = new AxisSpace();\n        }\n        \n        // reserve some space for the domain axis...\n        if (this.fixedDomainAxisSpace != null) {\n            if (this.orientation == PlotOrientation.HORIZONTAL) {\n                space.ensureAtLeast(\n                    this.fixedDomainAxisSpace.getLeft(), RectangleEdge.LEFT);\n                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), \n                        RectangleEdge.RIGHT);\n            }\n            else if (this.orientation == PlotOrientation.VERTICAL) {\n                space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), \n                        RectangleEdge.TOP);\n                space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), \n                        RectangleEdge.BOTTOM);\n            }\n        }\n        else {\n            // reserve space for the primary domain axis...\n            RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(\n                    getDomainAxisLocation(), this.orientation);\n            if (this.drawSharedDomainAxis) {\n                space = getDomainAxis().reserveSpace(g2, this, plotArea, \n                        domainEdge, space);\n            }\n            \n            // reserve space for any domain axes...\n            for (int i = 0; i < this.domainAxes.size(); i++) {\n                Axis xAxis = (Axis) this.domainAxes.get(i);\n                if (xAxis != null) {\n                    RectangleEdge edge = getDomainAxisEdge(i);\n                    space = xAxis.reserveSpace(g2, this, plotArea, edge, space);\n                }\n            }\n        }\n\n        return space;\n                                                     \n    }\n",
        "begin_line": 2428,
        "end_line": 2472,
        "comment": "\r\n     * Calculates the space required for the domain axis/axes.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param space  a carrier for the result (<code>null</code> permitted).\r\n     * \r\n     * @return The required space.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.calculateRangeAxisSpace#2483",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.calculateRangeAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.AxisSpace)",
        "snippet": "    protected AxisSpace calculateRangeAxisSpace(Graphics2D g2, \n                                                Rectangle2D plotArea, \n                                                AxisSpace space) {\n                                                  \n        if (space == null) {\n            space = new AxisSpace(); \n        }\n        \n        // reserve some space for the range axis...\n        if (this.fixedRangeAxisSpace != null) {\n            if (this.orientation == PlotOrientation.HORIZONTAL) {\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), \n                        RectangleEdge.TOP);\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), \n                        RectangleEdge.BOTTOM);\n            }\n            else if (this.orientation == PlotOrientation.VERTICAL) {\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), \n                        RectangleEdge.LEFT);\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), \n                        RectangleEdge.RIGHT);\n            }\n        }\n        else {\n            // reserve space for the range axes (if any)...\n            for (int i = 0; i < this.rangeAxes.size(); i++) {\n                Axis yAxis = (Axis) this.rangeAxes.get(i);\n                if (yAxis != null) {\n                    RectangleEdge edge = getRangeAxisEdge(i);\n                    space = yAxis.reserveSpace(g2, this, plotArea, edge, space);\n                }\n            }\n        }\n        return space;\n                                                    \n    }\n",
        "begin_line": 2483,
        "end_line": 2518,
        "comment": "\r\n     * Calculates the space required for the range axis/axes.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param space  a carrier for the result (<code>null</code> permitted).\r\n     * \r\n     * @return The required space.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.calculateAxisSpace#2528",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.calculateAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    protected AxisSpace calculateAxisSpace(Graphics2D g2, \n                                           Rectangle2D plotArea) {\n        AxisSpace space = new AxisSpace();\n        space = calculateRangeAxisSpace(g2, plotArea, space);\n        space = calculateDomainAxisSpace(g2, plotArea, space);\n        return space;\n    }\n",
        "begin_line": 2528,
        "end_line": 2534,
        "comment": "\r\n     * Calculates the space required for the axes.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     *\r\n     * @return The space required for the axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.draw#2552",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D area, \n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo state) {\n\n        // if the plot area is too small, just return...\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        // record the plot area...\n        if (state == null) {\n            // if the incoming state is null, no information will be passed\n            // back to the caller - but we create a temporary state to record\n            // the plot area, since that is used later by the axes\n            state = new PlotRenderingInfo(null);\n        }\n        state.setPlotArea(area);\n\n        // adjust the drawing area for the plot insets (if any)...\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        // calculate the data area...\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n\n        state.setDataArea(dataArea);\n\n        // if there is a renderer, it draws the background, otherwise use the \n        // default background...\n        if (getRenderer() != null) {\n            getRenderer().drawBackground(g2, this, dataArea);\n        }\n        else {\n            drawBackground(g2, dataArea);\n        }\n       \n        Map axisStateMap = drawAxes(g2, area, dataArea, state);\n\n        // don't let anyone draw outside the data area\n        Shape savedClip = g2.getClip();\n        g2.clip(dataArea);\n\n        drawDomainGridlines(g2, dataArea);\n\n        AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n        }\n        \n        // draw the markers...\n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawDomainMarkers(g2, dataArea, i, Layer.BACKGROUND);\n        }        \n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawRangeMarkers(g2, dataArea, i, Layer.BACKGROUND);\n        }\n\n        // now render data items...\n        boolean foundData = false;\n\n        // set up the alpha-transparency...\n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(\n                AlphaComposite.SRC_OVER, getForegroundAlpha()));\n\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        if (order == DatasetRenderingOrder.FORWARD) {\n\n            // draw background annotations\n            int datasetCount = this.datasets.size();\n            for (int i = 0; i < datasetCount; i++) {\n                CategoryItemRenderer r = getRenderer(i);\n                if (r != null) {\n                    CategoryAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,\n                            Layer.BACKGROUND, state);\n                }\n            }\n\n            for (int i = 0; i < datasetCount; i++) {\n                foundData = render(g2, dataArea, i, state) || foundData;\n            }\n\n            // draw foreground annotations\n            for (int i = 0; i < datasetCount; i++) {\n                CategoryItemRenderer r = getRenderer(i);\n                if (r != null) {\n                    CategoryAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,\n                            Layer.FOREGROUND, state);\n                }\n            }\n        }\n        else {  // DatasetRenderingOrder.REVERSE\n            \n            // draw background annotations\n            int datasetCount = this.datasets.size();\n            for (int i = datasetCount - 1; i >= 0; i--) {\n                CategoryItemRenderer r = getRenderer(i);\n                if (r != null) {\n                    CategoryAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,\n                            Layer.BACKGROUND, state);\n                }\n            }\n            \n            for (int i = this.datasets.size() - 1; i >= 0; i--) {\n                foundData = render(g2, dataArea, i, state) || foundData;   \n            }\n\n            // draw foreground annotations\n            for (int i = datasetCount - 1; i >= 0; i--) {\n                CategoryItemRenderer r = getRenderer(i);\n                if (r != null) {\n                    CategoryAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,\n                            Layer.FOREGROUND, state);\n                }\n            }\n        }\n        \n        // draw the foreground markers...\n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        // draw the plot's annotations (if any)...\n        drawAnnotations(g2, dataArea, state);\n\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        // draw range crosshair if required...\n        if (isRangeCrosshairVisible()) {\n            // FIXME: this doesn't handle multiple range axes\n            drawRangeCrosshair(g2, dataArea, getOrientation(), \n                    getRangeCrosshairValue(), getRangeAxis(),\n                    getRangeCrosshairStroke(), getRangeCrosshairPaint());\n        }\n\n        // draw an outline around the plot area...\n        if (getRenderer() != null) {\n            getRenderer().drawOutline(g2, this, dataArea);\n        }\n        else {\n            drawOutline(g2, dataArea);\n        }\n\n    }\n",
        "begin_line": 2552,
        "end_line": 2722,
        "comment": "\r\n     * Draws the plot on a Java 2D graphics device (such as the screen or a \r\n     * printer).\r\n     * <P>\r\n     * At your option, you may supply an instance of {@link PlotRenderingInfo}.\r\n     * If you do, it will be populated with information about the drawing,\r\n     * including various plot dimensions and tooltip info.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param area  the area within which the plot (including axes) should \r\n     *              be drawn.\r\n     * @param anchor  the anchor point (<code>null</code> permitted).\r\n     * @param parentState  the state from the parent plot, if there is one.\r\n     * @param state  collects info as the chart is drawn (possibly \r\n     *               <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.drawBackground#2734",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.drawBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawBackground(Graphics2D g2, Rectangle2D area) {\n        fillBackground(g2, area, this.orientation);\n        drawBackgroundImage(g2, area);\n    }\n",
        "begin_line": 2734,
        "end_line": 2737,
        "comment": "\r\n     * Draws the plot background (the background color and/or image).\r\n     * <P>\r\n     * This method will be called during the chart drawing process and is \r\n     * declared public so that it can be accessed by the renderers used by \r\n     * certain subclasses.  You shouldn't need to call this method directly.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param area  the area within which the plot should be drawn.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.drawAxes#2750",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.drawAxes(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    protected Map drawAxes(Graphics2D g2, \n                           Rectangle2D plotArea, \n                           Rectangle2D dataArea,\n                           PlotRenderingInfo plotState) {\n\n        AxisCollection axisCollection = new AxisCollection();\n\n        // add domain axes to lists...\n        for (int index = 0; index < this.domainAxes.size(); index++) {\n            CategoryAxis xAxis = (CategoryAxis) this.domainAxes.get(index);\n            if (xAxis != null) {\n                axisCollection.add(xAxis, getDomainAxisEdge(index));\n            }\n        }\n\n        // add range axes to lists...\n        for (int index = 0; index < this.rangeAxes.size(); index++) {\n            ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(index);\n            if (yAxis != null) {\n                axisCollection.add(yAxis, getRangeAxisEdge(index));\n            }\n        }\n\n        Map axisStateMap = new HashMap();\n        \n        // draw the top axes\n        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(\n                dataArea.getHeight());\n        Iterator iterator = axisCollection.getAxesAtTop().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, \n                        RectangleEdge.TOP, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n\n        // draw the bottom axes\n        cursor = dataArea.getMaxY() \n                 + this.axisOffset.calculateBottomOutset(dataArea.getHeight());\n        iterator = axisCollection.getAxesAtBottom().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea,\n                        RectangleEdge.BOTTOM, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n\n        // draw the left axes\n        cursor = dataArea.getMinX() \n                 - this.axisOffset.calculateLeftOutset(dataArea.getWidth());\n        iterator = axisCollection.getAxesAtLeft().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea,\n                        RectangleEdge.LEFT, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n\n        // draw the right axes\n        cursor = dataArea.getMaxX() \n                 + this.axisOffset.calculateRightOutset(dataArea.getWidth());\n        iterator = axisCollection.getAxesAtRight().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, \n                        RectangleEdge.RIGHT, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n        \n        return axisStateMap;\n        \n    }\n",
        "begin_line": 2750,
        "end_line": 2833,
        "comment": "\r\n     * A utility method for drawing the plot's axes.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param dataArea  the data area.\r\n     * @param plotState  collects information about the plot (<code>null</code>\r\n     *                   permitted).\r\n     * \r\n     * @return A map containing the axis states.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.render#2846",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.render(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public boolean render(Graphics2D g2, Rectangle2D dataArea, int index, \n                          PlotRenderingInfo info) {\n\n        boolean foundData = false;\n        CategoryDataset currentDataset = getDataset(index);\n        CategoryItemRenderer renderer = getRenderer(index);\n        CategoryAxis domainAxis = getDomainAxisForDataset(index);\n        ValueAxis rangeAxis = getRangeAxisForDataset(index);\n        boolean hasData = !DatasetUtilities.isEmptyOrNull(currentDataset);\n        if (hasData && renderer != null) {\n            \n            foundData = true;\n            CategoryItemRendererState state = renderer.initialise(g2, dataArea,\n                    this, index, info);\n            int columnCount = currentDataset.getColumnCount();\n            int rowCount = currentDataset.getRowCount();\n            int passCount = renderer.getPassCount();\n            for (int pass = 0; pass < passCount; pass++) {            \n                if (this.columnRenderingOrder == SortOrder.ASCENDING) {\n                    for (int column = 0; column < columnCount; column++) {\n                        if (this.rowRenderingOrder == SortOrder.ASCENDING) {\n                            for (int row = 0; row < rowCount; row++) {\n                                renderer.drawItem(g2, state, dataArea, this, \n                                        domainAxis, rangeAxis, currentDataset, \n                                        row, column, pass);\n                            }\n                        }\n                        else {\n                            for (int row = rowCount - 1; row >= 0; row--) {\n                                renderer.drawItem(g2, state, dataArea, this, \n                                        domainAxis, rangeAxis, currentDataset, \n                                        row, column, pass);\n                            }                        \n                        }\n                    }\n                }\n                else {\n                    for (int column = columnCount - 1; column >= 0; column--) {\n                        if (this.rowRenderingOrder == SortOrder.ASCENDING) {\n                            for (int row = 0; row < rowCount; row++) {\n                                renderer.drawItem(g2, state, dataArea, this, \n                                        domainAxis, rangeAxis, currentDataset, \n                                        row, column, pass);\n                            }\n                        }\n                        else {\n                            for (int row = rowCount - 1; row >= 0; row--) {\n                                renderer.drawItem(g2, state, dataArea, this, \n                                        domainAxis, rangeAxis, currentDataset, \n                                        row, column, pass);\n                            }                        \n                        }\n                    }\n                }\n            }\n        }\n        return foundData;\n        \n    }\n",
        "begin_line": 2846,
        "end_line": 2904,
        "comment": "\r\n     * Draws a representation of a dataset within the dataArea region using the\r\n     * appropriate renderer.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the region in which the data is to be drawn.\r\n     * @param index  the dataset and renderer index.\r\n     * @param info  an optional object for collection dimension information.\r\n     * \r\n     * @return A boolean that indicates whether or not real data was found.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.drawDomainGridlines#2914",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.drawDomainGridlines(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea) {\n\n        // draw the domain grid lines, if any...\n        if (isDomainGridlinesVisible()) {\n            CategoryAnchor anchor = getDomainGridlinePosition();\n            RectangleEdge domainAxisEdge = getDomainAxisEdge();\n            Stroke gridStroke = getDomainGridlineStroke();\n            Paint gridPaint = getDomainGridlinePaint();\n            if ((gridStroke != null) && (gridPaint != null)) {\n                // iterate over the categories\n                CategoryDataset data = getDataset();\n                if (data != null) {\n                    CategoryAxis axis = getDomainAxis();\n                    if (axis != null) {\n                        int columnCount = data.getColumnCount();\n                        for (int c = 0; c < columnCount; c++) {\n                            double xx = axis.getCategoryJava2DCoordinate(\n                                    anchor, c, columnCount, dataArea, \n                                    domainAxisEdge);\n                            CategoryItemRenderer renderer1 = getRenderer();\n                            if (renderer1 != null) {\n                                renderer1.drawDomainGridline(g2, this, \n                                        dataArea, xx);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 2914,
        "end_line": 2943,
        "comment": "\r\n     * Draws the gridlines for the plot.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area inside the axes.\r\n     * \r\n     * @see #drawRangeGridlines(Graphics2D, Rectangle2D, List)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.drawRangeGridlines#2954",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.drawRangeGridlines(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)",
        "snippet": "    protected void drawRangeGridlines(Graphics2D g2, Rectangle2D dataArea, \n                                      List ticks) {\n        // draw the range grid lines, if any...\n        if (isRangeGridlinesVisible()) {\n            Stroke gridStroke = getRangeGridlineStroke();\n            Paint gridPaint = getRangeGridlinePaint();\n            if ((gridStroke != null) && (gridPaint != null)) {\n                ValueAxis axis = getRangeAxis();\n                if (axis != null) {\n                    Iterator iterator = ticks.iterator();\n                    while (iterator.hasNext()) {\n                        ValueTick tick = (ValueTick) iterator.next();\n                        CategoryItemRenderer renderer1 = getRenderer();\n                        if (renderer1 != null) {\n                            renderer1.drawRangeGridline(g2, this, \n                                    getRangeAxis(), dataArea, tick.getValue());\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 2954,
        "end_line": 2975,
        "comment": "\r\n     * Draws the gridlines for the plot.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param ticks  the ticks.\r\n     * \r\n     * @see #drawDomainGridlines(Graphics2D, Rectangle2D)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.drawDomainMarkers#3008",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.drawDomainMarkers(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.util.Layer)",
        "snippet": "    protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea, \n                                     int index, Layer layer) {\n                                                 \n        CategoryItemRenderer r = getRenderer(index);\n        if (r == null) {\n            return;\n        }\n        \n        Collection markers = getDomainMarkers(index, layer);\n        CategoryAxis axis = getDomainAxisForDataset(index);\n        if (markers != null && axis != null) {\n            Iterator iterator = markers.iterator();\n            while (iterator.hasNext()) {\n                CategoryMarker marker = (CategoryMarker) iterator.next();\n                r.drawDomainMarker(g2, this, axis, marker, dataArea);\n            }\n        }\n        \n    }\n",
        "begin_line": 3008,
        "end_line": 3026,
        "comment": "\r\n     * Draws the domain markers (if any) for an axis and layer.  This method is \r\n     * typically called from within the draw() method.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the data area.\r\n     * @param index  the renderer index.\r\n     * @param layer  the layer (foreground or background).\r\n     * \r\n     * @see #drawRangeMarkers(Graphics2D, Rectangle2D, int, Layer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.drawRangeMarkers#3039",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.drawRangeMarkers(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.util.Layer)",
        "snippet": "    protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea, \n                                    int index, Layer layer) {\n                                                 \n        CategoryItemRenderer r = getRenderer(index);\n        if (r == null) {\n            return;\n        }\n        \n        Collection markers = getRangeMarkers(index, layer);\n        ValueAxis axis = getRangeAxisForDataset(index);\n        if (markers != null && axis != null) {\n            Iterator iterator = markers.iterator();\n            while (iterator.hasNext()) {\n                Marker marker = (Marker) iterator.next();\n                r.drawRangeMarker(g2, this, axis, marker, dataArea);\n            }\n        }\n        \n    }\n",
        "begin_line": 3039,
        "end_line": 3057,
        "comment": "\r\n     * Draws the range markers (if any) for an axis and layer.  This method is \r\n     * typically called from within the draw() method.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the data area.\r\n     * @param index  the renderer index.\r\n     * @param layer  the layer (foreground or background).\r\n     * \r\n     * @see #drawDomainMarkers(Graphics2D, Rectangle2D, int, Layer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getDataRange#3137",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDataRange(org.jfree.chart.axis.ValueAxis)",
        "snippet": "    public Range getDataRange(ValueAxis axis) {\n\n        Range result = null;\n        List mappedDatasets = new ArrayList();\n        \n        int rangeIndex = this.rangeAxes.indexOf(axis);\n        if (rangeIndex >= 0) {\n            mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex));\n        }\n        else if (axis == getRangeAxis()) {\n            mappedDatasets.addAll(datasetsMappedToRangeAxis(0));\n        }\n\n        // iterate through the datasets that map to the axis and get the union \n        // of the ranges.\n        Iterator iterator = mappedDatasets.iterator();\n        while (iterator.hasNext()) {\n            CategoryDataset d = (CategoryDataset) iterator.next();\n            CategoryItemRenderer r = getRendererForDataset(d);\n            if (r != null) {\n                result = Range.combine(result, r.findRangeBounds(d));\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 3137,
        "end_line": 3162,
        "comment": "\r\n     * Returns the range of data values that will be plotted against the range \r\n     * axis.  If the dataset is <code>null</code>, this method returns \r\n     * <code>null</code>.\r\n     *\r\n     * @param axis  the axis.\r\n     *\r\n     * @return The data range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.datasetsMappedToDomainAxis#3174",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetsMappedToDomainAxis(int)",
        "snippet": "    private List datasetsMappedToDomainAxis(int axisIndex) {\n        List result = new ArrayList();\n        for (int datasetIndex = 0; datasetIndex < this.datasets.size(); \n                datasetIndex++) {\n            Object dataset = this.datasets.get(datasetIndex);\n            if (dataset != null) {\n                Integer m = (Integer) this.datasetToDomainAxisMap.get(\n                        datasetIndex);\n                if (m == null) {  // a dataset with no mapping is assigned to \n                                  // axis 0\n                    if (axisIndex == 0) {\n                        result.add(dataset);\n                    }\n                }\n                else {\n                    if (m.intValue() == axisIndex) {\n                        result.add(dataset);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 3174,
        "end_line": 3196,
        "comment": "\r\n     * Returns a list of the datasets that are mapped to the axis with the\r\n     * specified index.\r\n     * \r\n     * @param axisIndex  the axis index.\r\n     * \r\n     * @return The list (possibly empty, but never <code>null</code>).\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.datasetsMappedToRangeAxis#3206",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetsMappedToRangeAxis(int)",
        "snippet": "    private List datasetsMappedToRangeAxis(int index) {\n        List result = new ArrayList();\n        for (int i = 0; i < this.datasets.size(); i++) {\n            Object dataset = this.datasets.get(i);\n            if (dataset != null) {\n                Integer m = (Integer) this.datasetToRangeAxisMap.get(i);\n                if (m == null) {  // a dataset with no mapping is assigned to \n                                  // axis 0\n                    if (index == 0) { \n                        result.add(dataset);\n                    }\n                }\n                else {\n                    if (m.intValue() == index) {\n                        result.add(dataset);\n                    }\n                }\n            }\n        }\n        return result;    \n    }\n",
        "begin_line": 3206,
        "end_line": 3226,
        "comment": "\r\n     * A utility method that returns a list of datasets that are mapped to a \r\n     * given range axis.\r\n     * \r\n     * @param index  the axis index.\r\n     * \r\n     * @return A list of datasets.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryPlot.getCategoriesForAxis#3323",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)",
        "snippet": "    public List getCategoriesForAxis(CategoryAxis axis) {\n        List result = new ArrayList();\n        int axisIndex = this.domainAxes.indexOf(axis);\n        List datasets = datasetsMappedToDomainAxis(axisIndex);\n        Iterator iterator = datasets.iterator();\n        while (iterator.hasNext()) {\n            CategoryDataset dataset = (CategoryDataset) iterator.next();\n            // add the unique categories from this dataset\n            for (int i = 0; i < dataset.getColumnCount(); i++) {\n                Comparable category = dataset.getColumnKey(i);\n                if (!result.contains(category)) {\n                    result.add(category);\n                }\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 3323,
        "end_line": 3339,
        "comment": "\r\n     * Returns a list of the categories that should be displayed for the\r\n     * specified axis.\r\n     * \r\n     * @param axis  the axis (<code>null</code> not permitted)\r\n     * \r\n     * @return The categories.\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.generateLabel#98",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.generateLabel(org.jfree.data.category.CategoryDataset, int)",
        "snippet": "    public String generateLabel(CategoryDataset dataset, int series) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        String label = MessageFormat.format(this.formatPattern, \n                createItemArray(dataset, series));\n        return label;\n    }\n",
        "begin_line": 98,
        "end_line": 105,
        "comment": "\r\n     * Generates a label for the specified series.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param series  the series.\r\n     * \r\n     * @return A series label.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.createItemArray#116",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.createItemArray(org.jfree.data.category.CategoryDataset, int)",
        "snippet": "    protected Object[] createItemArray(CategoryDataset dataset, int series) {\n        Object[] result = new Object[1];\n        result[0] = dataset.getRowKey(series).toString();\n        return result;\n    }\n",
        "begin_line": 116,
        "end_line": 120,
        "comment": "\r\n     * Creates the array of items that can be passed to the \r\n     * {@link MessageFormat} class for creating labels.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param series  the series (zero-based index).\r\n     *\r\n     * @return The items (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TitleChangeEvent.TitleChangeEvent#65",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/TitleChangeEvent.java",
        "class_name": "org.jfree.chart.event.TitleChangeEvent",
        "signature": "org.jfree.chart.event.TitleChangeEvent.TitleChangeEvent(org.jfree.chart.title.Title)",
        "snippet": "    public TitleChangeEvent(Title title) {\n        super(title);\n        this.title = title;\n    }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\r\n     * Default constructor.\r\n     *\r\n     * @param title  the chart title that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "PlotChangeEvent.PlotChangeEvent#65",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
        "class_name": "org.jfree.chart.event.PlotChangeEvent",
        "signature": "org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent(org.jfree.chart.plot.Plot)",
        "snippet": "    public PlotChangeEvent(Plot plot) {\n        super(plot);\n        this.plot = plot;\n    }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\r\n     * Creates a new PlotChangeEvent.\r\n     *\r\n     * @param plot  the plot that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ChartProgressEvent.ChartProgressEvent#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "signature": "org.jfree.chart.event.ChartProgressEvent.ChartProgressEvent(java.lang.Object, org.jfree.chart.JFreeChart, int, int)",
        "snippet": "    public ChartProgressEvent(Object source, JFreeChart chart, int type, \n                              int percent) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 77,
        "end_line": 82,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an \r\n     *                axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     * @param percent  the percentage of completion.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ChartChangeEvent.setType#132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.setType(org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public void setType(ChartChangeEventType type) {\n        this.type = type;\n    }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\r\n     * Sets the event type.\r\n     *\r\n     * @param type  the event type.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisChangeEvent.AxisChangeEvent#62",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/AxisChangeEvent.java",
        "class_name": "org.jfree.chart.event.AxisChangeEvent",
        "signature": "org.jfree.chart.event.AxisChangeEvent.AxisChangeEvent(org.jfree.chart.axis.Axis)",
        "snippet": "    public AxisChangeEvent(Axis axis) {\n        super(axis);\n        this.axis = axis;\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Creates a new AxisChangeEvent.\r\n     *\r\n     * @param axis  the axis that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleConstraint.RectangleConstraint#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.RectangleConstraint(double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType, double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType)",
        "snippet": "    public RectangleConstraint(double w, Range widthRange, \n                               LengthConstraintType widthConstraintType,\n                               double h, Range heightRange, \n                               LengthConstraintType heightConstraintType) {\n        if (widthConstraintType == null) {\n            throw new IllegalArgumentException(\"Null 'widthType' argument.\");\n        }\n        if (heightConstraintType == null) {\n            throw new IllegalArgumentException(\"Null 'heightType' argument.\"); \n        }\n        this.width = w;\n        this.widthRange = widthRange;\n        this.widthConstraintType = widthConstraintType;\n        this.height = h;\n        this.heightRange = heightRange;\n        this.heightConstraintType = heightConstraintType;\n    }\n",
        "begin_line": 148,
        "end_line": 164,
        "comment": "\r\n     * Creates a new constraint.\r\n     * \r\n     * @param w  the fixed or maximum width.\r\n     * @param widthRange  the width range.\r\n     * @param widthConstraintType  the width type.\r\n     * @param h  the fixed or maximum height.\r\n     * @param heightRange  the height range.\r\n     * @param heightConstraintType  the height type.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleConstraint.getWidth#171",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidth()",
        "snippet": "    public double getWidth() {\n        return this.width;\n    }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\r\n     * Returns the fixed width.\r\n     * \r\n     * @return The width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleConstraint.getWidthRange#180",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidthRange()",
        "snippet": "    public Range getWidthRange() {\n        return this.widthRange;   \n    }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": "\r\n     * Returns the width range.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleConstraint.getWidthConstraintType#189",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidthConstraintType()",
        "snippet": "    public LengthConstraintType getWidthConstraintType() {\n        return this.widthConstraintType;\n    }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "\r\n     * Returns the constraint type.\r\n     * \r\n     * @return The constraint type (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleConstraint.getHeight#198",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeight()",
        "snippet": "    public double getHeight() {\n        return this.height;\n    }\n",
        "begin_line": 198,
        "end_line": 200,
        "comment": "\r\n     * Returns the fixed height.\r\n     * \r\n     * @return The height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleConstraint.getHeightRange#207",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeightRange()",
        "snippet": "    public Range getHeightRange() {\n        return this.heightRange;   \n    }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\r\n     * Returns the width range.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleConstraint.getHeightConstraintType#216",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeightConstraintType()",
        "snippet": "    public LengthConstraintType getHeightConstraintType() {\n        return this.heightConstraintType;\n    }\n",
        "begin_line": 216,
        "end_line": 218,
        "comment": "\r\n     * Returns the constraint type.\r\n     * \r\n     * @return The constraint type (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LineBorder.LineBorder#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.LineBorder()",
        "snippet": "    public LineBorder() {\n        this(Color.black, new BasicStroke(1.0f), new RectangleInsets(1.0, 1.0, \n                1.0, 1.0));\n    }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "\r\n     * Creates a default border.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LineBorder.LineBorder#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.LineBorder(java.awt.Paint, java.awt.Stroke, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public LineBorder(Paint paint, Stroke stroke, RectangleInsets insets) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        this.paint = paint;\n        this.stroke = stroke;\n        this.insets = insets;\n    }  \n",
        "begin_line": 95,
        "end_line": 108,
        "comment": "\r\n     * Creates a new border with the specified color.\r\n     * \r\n     * @param paint  the color (<code>null</code> not permitted).\r\n     * @param stroke  the border stroke (<code>null</code> not permitted).\r\n     * @param insets  the insets (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LineBorder.getPaint#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.getPaint()",
        "snippet": "    public Paint getPaint() {\n        return this.paint;\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\r\n     * Returns the paint.\r\n     * \r\n     * @return The paint (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LineBorder.getInsets#124",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.getInsets()",
        "snippet": "    public RectangleInsets getInsets() {\n        return this.insets;\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\r\n     * Returns the insets.\r\n     * \r\n     * @return The insets (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LineBorder.getStroke#133",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.getStroke()",
        "snippet": "    public Stroke getStroke() {\n        return this.stroke;\n    }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "\r\n     * Returns the stroke.\r\n     * \r\n     * @return The stroke (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LineBorder.draw#143",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D area) {\n        double w = area.getWidth();\n        double h = area.getHeight();\n        // if the area has zero height or width, we shouldn't draw anything\n        if (w <= 0.0 || h <= 0.0) {\n            return;\n        }\n        double t = this.insets.calculateTopInset(h);\n        double b = this.insets.calculateBottomInset(h);\n        double l = this.insets.calculateLeftInset(w);\n        double r = this.insets.calculateRightInset(w);\n        double x = area.getX();\n        double y = area.getY();\n        double x0 = x + l / 2.0;\n        double x1 = x + w - r / 2.0;\n        double y0 = y + h - b / 2.0;\n        double y1 = y + t / 2.0;\n        g2.setPaint(getPaint());\n        g2.setStroke(getStroke());\n        Line2D line = new Line2D.Double();\n        if (t > 0.0) {\n            line.setLine(x0, y1, x1, y1);\n            g2.draw(line);\n        }\n        if (b > 0.0) {\n            line.setLine(x0, y0, x1, y0);\n            g2.draw(line);\n        }\n        if (l > 0.0) {\n            line.setLine(x0, y0, x0, y1);\n            g2.draw(line);\n        }\n        if (r > 0.0) {\n            line.setLine(x1, y0, x1, y1);\n            g2.draw(line);\n        }        \n    }    \n",
        "begin_line": 143,
        "end_line": 179,
        "comment": "\r\n     * Draws the border by filling in the reserved space (in black).\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LengthConstraintType.LengthConstraintType#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "signature": "org.jfree.chart.block.LengthConstraintType.LengthConstraintType(java.lang.String)",
        "snippet": "    private LengthConstraintType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LabelBlock.LabelBlock#132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "class_name": "org.jfree.chart.block.LabelBlock",
        "signature": "org.jfree.chart.block.LabelBlock.LabelBlock(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public LabelBlock(String text, Font font, Paint paint) {        \n        this.text = text;\n        this.paint = paint; \n        this.label = TextUtilities.createTextBlock(text, font, this.paint); \n        this.font = font;\n        this.toolTipText = null;\n        this.urlText = null;\n    }\n",
        "begin_line": 132,
        "end_line": 139,
        "comment": "\r\n     * Creates a new label block.\r\n     *\r\n     * @param text  the text for the label (<code>null</code> not permitted).\r\n     * @param font  the font (<code>null</code> not permitted).\r\n     * @param paint the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LabelBlock.arrange#247",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "class_name": "org.jfree.chart.block.LabelBlock",
        "signature": "org.jfree.chart.block.LabelBlock.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        g2.setFont(this.font);\n        Size2D s = this.label.calculateDimensions(g2);\n        return new Size2D(calculateTotalWidth(s.getWidth()), \n                calculateTotalHeight(s.getHeight()));\n    }\n",
        "begin_line": 247,
        "end_line": 252,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LabelBlock.draw#273",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "class_name": "org.jfree.chart.block.LabelBlock",
        "signature": "org.jfree.chart.block.LabelBlock.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        area = trimMargin(area);\n        drawBorder(g2, area);\n        area = trimBorder(area);\n        area = trimPadding(area);\n        \n        // check if we need to collect chart entities from the container\n        EntityBlockParams ebp = null;\n        StandardEntityCollection sec = null;\n        Shape entityArea = null;\n        if (params instanceof EntityBlockParams) {\n            ebp = (EntityBlockParams) params;\n            if (ebp.getGenerateEntities()) {\n                sec = new StandardEntityCollection();\n                entityArea = (Shape) area.clone();\n            }\n        }\n        g2.setPaint(this.paint);\n        g2.setFont(this.font);\n        this.label.draw(g2, (float) area.getX(), (float) area.getY(), \n                TextBlockAnchor.TOP_LEFT);\n        BlockResult result = null;\n        if (ebp != null && sec != null) {\n            if (this.toolTipText != null || this.urlText != null) {\n                ChartEntity entity = new ChartEntity(entityArea, \n                        this.toolTipText, this.urlText);   \n                sec.add(entity);\n                result = new BlockResult();\n                result.setEntityCollection(sec);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 273,
        "end_line": 305,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  ignored (<code>null</code> permitted).\r\n     * \r\n     * @return Always <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "FlowArrangement.FlowArrangement#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement()",
        "snippet": "    public FlowArrangement() {   \n        this(HorizontalAlignment.CENTER, VerticalAlignment.CENTER, 2.0, 2.0);\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "FlowArrangement.FlowArrangement#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement(org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, double, double)",
        "snippet": "    public FlowArrangement(HorizontalAlignment hAlign, VerticalAlignment vAlign,\n                           double hGap, double vGap) {   \n        this.horizontalAlignment = hAlign;\n        this.verticalAlignment = vAlign;\n        this.horizontalGap = hGap;\n        this.verticalGap = vGap;\n    }\n",
        "begin_line": 93,
        "end_line": 99,
        "comment": "\r\n     * Creates a new instance.\r\n     * \r\n     * @param hAlign  the horizontal alignment (currently ignored).\r\n     * @param vAlign  the vertical alignment (currently ignored).\r\n     * @param hGap  the horizontal gap.\r\n     * @param vGap  the vertical gap.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "FlowArrangement.add#109",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.add(org.jfree.chart.block.Block, java.lang.Object)",
        "snippet": "    public void add(Block block, Object key) {\n        // since the flow layout is relatively straightforward, \n        // no information needs to be recorded here\n    }\n",
        "begin_line": 109,
        "end_line": 112,
        "comment": "\r\n     * Adds a block to be managed by this instance.  This method is usually \r\n     * called by the {@link BlockContainer}, you shouldn't need to call it \r\n     * directly.\r\n     * \r\n     * @param block  the block.\r\n     * @param key  a key that controls the position of the block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "FlowArrangement.arrange#126",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint) {\n        \n        LengthConstraintType w = constraint.getWidthConstraintType();\n        LengthConstraintType h = constraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeNN(container, g2);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                return arrangeNF(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeFN(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                return arrangeFF(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                return arrangeFR(container, g2, constraint);  \n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeRN(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                return arrangeRF(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                return arrangeRR(container, g2, constraint);   \n            }\n        }\n        throw new RuntimeException(\"Unrecognised constraint type.\");\n        \n    }\n",
        "begin_line": 126,
        "end_line": 166,
        "comment": "\r\n     * Calculates and sets the bounds of all the items in the specified \r\n     * container, subject to the given constraint.  The <code>Graphics2D</code>\r\n     * can be used by some items (particularly items containing text) to \r\n     * calculate sizing parameters.\r\n     * \r\n     * @param container  the container whose items are being arranged.\r\n     * @param constraint  the size constraint.\r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The size of the container after arrangement of the contents.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "FlowArrangement.arrangeRR#281",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.arrangeRR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        // first arrange without constraints, and see if this fits within\n        // the required ranges...\n        Size2D s1 = arrangeNN(container, g2);\n        if (constraint.getWidthRange().contains(s1.width)) {\n            return s1;  // TODO: we didn't check the height yet\n        }\n        else {\n            RectangleConstraint c = constraint.toFixedWidth(\n                constraint.getWidthRange().getUpperBound()\n            );\n            return arrangeFR(container, g2, c);\n        }\n    }\n",
        "begin_line": 281,
        "end_line": 296,
        "comment": "\r\n     * Arranges the blocks with the overall width and height to fit within \r\n     * specified ranges.\r\n     * \r\n     * @param container  the container.\r\n     * @param constraint  the constraint.\r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The size after the arrangement.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "FlowArrangement.arrangeNN#358",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D)",
        "snippet": "    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        double x = 0.0;\n        double width = 0.0;\n        double maxHeight = 0.0;\n        List blocks = container.getBlocks();\n        int blockCount = blocks.size();\n        if (blockCount > 0) {\n            Size2D[] sizes = new Size2D[blocks.size()];\n            for (int i = 0; i < blocks.size(); i++) {\n                Block block = (Block) blocks.get(i);\n                sizes[i] = block.arrange(g2, RectangleConstraint.NONE);\n                width = width + sizes[i].getWidth();\n                maxHeight = Math.max(sizes[i].height, maxHeight);\n                block.setBounds(\n                    new Rectangle2D.Double(\n                        x, 0.0, sizes[i].width, sizes[i].height\n                    )\n                );\n                x = x + sizes[i].width + this.horizontalGap;\n            }\n            if (blockCount > 1) {\n                width = width + this.horizontalGap * (blockCount - 1);   \n            }\n            if (this.verticalAlignment != VerticalAlignment.TOP) {\n                for (int i = 0; i < blocks.size(); i++) {\n                    //Block b = (Block) blocks.get(i);\n                    if (this.verticalAlignment == VerticalAlignment.CENTER) {\n                        //TODO: shift block down by half\n                    }\n                    else if (this.verticalAlignment \n                            == VerticalAlignment.BOTTOM) {\n                        //TODO: shift block down to bottom\n                    }\n                }            \n            }\n        }\n        return new Size2D(width, maxHeight);\n    }\n",
        "begin_line": 358,
        "end_line": 395,
        "comment": "\r\n     * Arranges the blocks without any constraints.  This puts all blocks\r\n     * into a single row.\r\n     * \r\n     * @param container  the container.\r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The size after the arrangement.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "FlowArrangement.clear#416",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.clear()",
        "snippet": "    public void clear() {\n        // no action required.\n    }\n",
        "begin_line": 416,
        "end_line": 418,
        "comment": "\r\n     * Clears any cached information.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ColumnArrangement.ColumnArrangement#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "signature": "org.jfree.chart.block.ColumnArrangement.ColumnArrangement()",
        "snippet": "    public ColumnArrangement() {   \n    }\n",
        "begin_line": 80,
        "end_line": 81,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CenterArrangement.CenterArrangement#66",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/CenterArrangement.java",
        "class_name": "org.jfree.chart.block.CenterArrangement",
        "signature": "org.jfree.chart.block.CenterArrangement.CenterArrangement()",
        "snippet": "    public CenterArrangement() {   \n    }\n",
        "begin_line": 66,
        "end_line": 67,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CenterArrangement.add#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/CenterArrangement.java",
        "class_name": "org.jfree.chart.block.CenterArrangement",
        "signature": "org.jfree.chart.block.CenterArrangement.add(org.jfree.chart.block.Block, java.lang.Object)",
        "snippet": "    public void add(Block block, Object key) {\n        // since the flow layout is relatively straightforward, \n        // no information needs to be recorded here\n    }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "\r\n     * Adds a block to be managed by this instance.  This method is usually \r\n     * called by the {@link BlockContainer}, you shouldn't need to call it \r\n     * directly.\r\n     * \r\n     * @param block  the block.\r\n     * @param key  a key that controls the position of the block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CenterArrangement.arrange#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/CenterArrangement.java",
        "class_name": "org.jfree.chart.block.CenterArrangement",
        "signature": "org.jfree.chart.block.CenterArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint) {\n        \n        LengthConstraintType w = constraint.getWidthConstraintType();\n        LengthConstraintType h = constraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeNN(container, g2);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeFN(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeRN(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                return arrangeRF(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                return arrangeRR(container, g2, constraint);   \n            }\n        }\n        throw new IllegalArgumentException(\"Unknown LengthConstraintType.\");\n        \n    }\n",
        "begin_line": 94,
        "end_line": 134,
        "comment": "\r\n     * Calculates and sets the bounds of all the items in the specified \r\n     * container, subject to the given constraint.  The <code>Graphics2D</code>\r\n     * can be used by some items (particularly items containing text) to \r\n     * calculate sizing parameters.\r\n     * \r\n     * @param container  the container whose items are being arranged.\r\n     * @param g2  the graphics device.\r\n     * @param constraint  the size constraint.\r\n     * \r\n     * @return The size of the container after arrangement of the contents.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CenterArrangement.arrangeNN#284",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/CenterArrangement.java",
        "class_name": "org.jfree.chart.block.CenterArrangement",
        "signature": "org.jfree.chart.block.CenterArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D)",
        "snippet": "    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        List blocks = container.getBlocks();\n        Block b = (Block) blocks.get(0);\n        Size2D s = b.arrange(g2, RectangleConstraint.NONE);\n        b.setBounds(new Rectangle2D.Double(0.0, 0.0, s.width, s.height));\n        return new Size2D(s.width, s.height);  \n    }\n",
        "begin_line": 284,
        "end_line": 290,
        "comment": "\r\n     * Arranges the blocks without any constraints.  This puts all blocks\r\n     * into a single row.\r\n     * \r\n     * @param container  the container.\r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The size after the arrangement.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BorderArrangement.BorderArrangement#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.BorderArrangement()",
        "snippet": "    public BorderArrangement() {\n    }\n",
        "begin_line": 86,
        "end_line": 87,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BorderArrangement.add#96",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.add(org.jfree.chart.block.Block, java.lang.Object)",
        "snippet": "    public void add(Block block, Object key) {\n        \n        if (key == null) {\n            this.centerBlock = block;\n        }\n        else {\n            RectangleEdge edge = (RectangleEdge) key;\n            if (edge == RectangleEdge.TOP) {\n                this.topBlock = block;\n            }\n            else if (edge == RectangleEdge.BOTTOM) {\n                this.bottomBlock = block;\n            }\n            else if (edge == RectangleEdge.LEFT) {\n                this.leftBlock = block;\n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                this.rightBlock = block;\n            }\n        }\n    }\n",
        "begin_line": 96,
        "end_line": 116,
        "comment": "\r\n     * Adds a block to the arrangement manager at the specified edge.\r\n     * \r\n     * @param block  the block (<code>null</code> permitted).\r\n     * @param key  the edge (an instance of {@link RectangleEdge}) or \r\n     *             <code>null</code> for the center block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BorderArrangement.arrange#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(BlockContainer container, \n                          Graphics2D g2, \n                          RectangleConstraint constraint) {\n        RectangleConstraint contentConstraint \n            = container.toContentConstraint(constraint);\n        Size2D contentSize = null;\n        LengthConstraintType w = contentConstraint.getWidthConstraintType();\n        LengthConstraintType h = contentConstraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeNN(container, g2);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeFN(container, g2, constraint.getWidth());  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                contentSize = arrangeFF(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeFR(container, g2, constraint);  \n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeRR(\n                    container, constraint.getWidthRange(),\n                    constraint.getHeightRange(), g2\n                );  \n            }\n        }\n        return new Size2D(\n            container.calculateTotalWidth(contentSize.getWidth()),\n            container.calculateTotalHeight(contentSize.getHeight())\n        );\n    }\n",
        "begin_line": 128,
        "end_line": 176,
        "comment": "\r\n     * Arranges the items in the specified container, subject to the given \r\n     * constraint.\r\n     * \r\n     * @param container  the container.\r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint.\r\n     * \r\n     * @return The block size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BorderArrangement.arrangeNN#186",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D)",
        "snippet": "    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(\n                g2, RectangleConstraint.NONE\n            );\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(\n                g2, RectangleConstraint.NONE\n            );\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(\n                g2, RectangleConstraint.NONE\n            );\n            w[2] = size.width;\n            h[2] = size.height;\n       }\n        if (this.rightBlock != null) {\n            Size2D size = this.rightBlock.arrange(\n                g2, RectangleConstraint.NONE\n            );\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n        \n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n        \n        if (this.centerBlock != null) {\n            Size2D size = this.centerBlock.arrange(\n                g2, RectangleConstraint.NONE\n            );\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\n        double centerHeight = Math.max(h[2], Math.max(h[3], h[4]));\n        double height = h[0] + h[1] + centerHeight;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(\n                new Rectangle2D.Double(0.0, 0.0, width, h[0])\n            );\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(\n                new Rectangle2D.Double(0.0, height - h[1], width, h[1])\n            );\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(\n                new Rectangle2D.Double(0.0, h[0], w[2], centerHeight)\n            );\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(\n                new Rectangle2D.Double(width - w[3], h[0], w[3], centerHeight)\n            );\n        }\n        \n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(\n                new Rectangle2D.Double(\n                    w[2], h[0], width - w[2] - w[3], centerHeight\n                )\n            );\n        }\n        return new Size2D(width, height);\n    }\n",
        "begin_line": 186,
        "end_line": 260,
        "comment": "\r\n     * Performs an arrangement without constraints.\r\n     * \r\n     * @param container  the container.\r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The container size after the arrangement.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockResult.BlockResult#59",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockResult.java",
        "class_name": "org.jfree.chart.block.BlockResult",
        "signature": "org.jfree.chart.block.BlockResult.BlockResult()",
        "snippet": "    public BlockResult() {\n        this.entities = null;    \n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\r\n     * Creates a new result instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockParams.BlockParams#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "class_name": "org.jfree.chart.block.BlockParams",
        "signature": "org.jfree.chart.block.BlockParams.BlockParams()",
        "snippet": "    public BlockParams() {\n        this.translateX = 0.0;\n        this.translateY = 0.0;\n        this.generateEntities = false;    \n    }\n",
        "begin_line": 74,
        "end_line": 78,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockParams.getGenerateEntities#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "class_name": "org.jfree.chart.block.BlockParams",
        "signature": "org.jfree.chart.block.BlockParams.getGenerateEntities()",
        "snippet": "    public boolean getGenerateEntities() {\n        return this.generateEntities;   \n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\r\n     * Returns the flag that controls whether or not chart entities are \r\n     * generated.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockParams.setGenerateEntities#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "class_name": "org.jfree.chart.block.BlockParams",
        "signature": "org.jfree.chart.block.BlockParams.setGenerateEntities(boolean)",
        "snippet": "    public void setGenerateEntities(boolean generate) {\n        this.generateEntities = generate;   \n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\r\n     * Sets the flag that controls whether or not chart entities are generated.\r\n     * \r\n     * @param generate  the flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockContainer.BlockContainer#97",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.BlockContainer(org.jfree.chart.block.Arrangement)",
        "snippet": "    public BlockContainer(Arrangement arrangement) {\n        if (arrangement == null) {\n            throw new IllegalArgumentException(\"Null 'arrangement' argument.\");\n        }\n        this.arrangement = arrangement;\n        this.blocks = new ArrayList();\n    }    \n",
        "begin_line": 97,
        "end_line": 103,
        "comment": "\r\n     * Creates a new instance with the specified arrangement.\r\n     * \r\n     * @param arrangement  the arrangement manager (<code>null</code> not \r\n     *                     permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockContainer.setArrangement#119",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.setArrangement(org.jfree.chart.block.Arrangement)",
        "snippet": "    public void setArrangement(Arrangement arrangement) {\n        if (arrangement == null) {\n            throw new IllegalArgumentException(\"Null 'arrangement' argument.\");\n        }\n        this.arrangement = arrangement;   \n    }\n",
        "begin_line": 119,
        "end_line": 124,
        "comment": "\r\n     * Sets the arrangement (layout) manager.\r\n     * \r\n     * @param arrangement  the arrangement (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockContainer.isEmpty#132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.isEmpty()",
        "snippet": "    public boolean isEmpty() {\n        return this.blocks.isEmpty();   \n    }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\r\n     * Returns <code>true</code> if there are no blocks in the container, and\r\n     * <code>false</code> otherwise.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockContainer.getBlocks#142",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.getBlocks()",
        "snippet": "    public List getBlocks() {\n        return Collections.unmodifiableList(this.blocks);\n    }\n",
        "begin_line": 142,
        "end_line": 144,
        "comment": "\r\n     * Returns an unmodifiable list of the {@link Block} objects managed by \r\n     * this arrangement.\r\n     * \r\n     * @return A list of blocks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockContainer.add#151",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block)",
        "snippet": "    public void add(Block block) {\n        add(block, null);\n    }\n",
        "begin_line": 151,
        "end_line": 153,
        "comment": "\r\n     * Adds a block to the container.\r\n     * \r\n     * @param block  the block (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockContainer.add#161",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block, java.lang.Object)",
        "snippet": "    public void add(Block block, Object key) {\n        this.blocks.add(block);\n        this.arrangement.add(block, key);\n    }\n",
        "begin_line": 161,
        "end_line": 164,
        "comment": "\r\n     * Adds a block to the container.\r\n     * \r\n     * @param block  the block (<code>null</code> permitted).\r\n     * @param key  the key (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockContainer.clear#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.clear()",
        "snippet": "    public void clear() {\n        this.blocks.clear();\n        this.arrangement.clear();\n    }\n",
        "begin_line": 169,
        "end_line": 172,
        "comment": "\r\n     * Clears all the blocks from the container.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockContainer.arrange#183",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        return this.arrangement.arrange(this, g2, constraint);\n    }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockContainer.draw#207",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        // check if we need to collect chart entities from the container\n        EntityBlockParams ebp = null;\n        StandardEntityCollection sec = null;\n        if (params instanceof EntityBlockParams) {\n            ebp = (EntityBlockParams) params;\n            if (ebp.getGenerateEntities()) {\n                sec = new StandardEntityCollection();   \n            }\n        }\n        Rectangle2D contentArea = (Rectangle2D) area.clone();\n        contentArea = trimMargin(contentArea);\n        drawBorder(g2, contentArea);\n        contentArea = trimBorder(contentArea);\n        contentArea = trimPadding(contentArea);\n        Iterator iterator = this.blocks.iterator();\n        while (iterator.hasNext()) {\n            Block block = (Block) iterator.next();\n            Rectangle2D bounds = block.getBounds();\n            Rectangle2D drawArea = new Rectangle2D.Double(bounds.getX() \n                    + area.getX(), bounds.getY() + area.getY(), \n                    bounds.getWidth(), bounds.getHeight());\n            Object r = block.draw(g2, drawArea, params);\n            if (sec != null) {\n                if (r instanceof EntityBlockResult) {\n                    EntityBlockResult ebr = (EntityBlockResult) r;\n                    EntityCollection ec = ebr.getEntityCollection();\n                    sec.addAll(ec);\n                }\n            }\n        }\n        BlockResult result = null;\n        if (sec != null) {\n            result = new BlockResult();\n            result.setEntityCollection(sec);\n        }\n        return result;\n    }\n",
        "begin_line": 207,
        "end_line": 244,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  passed on to blocks within the container \r\n     *                (<code>null</code> permitted).\r\n     * \r\n     * @return An instance of {@link EntityBlockResult}, or <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockBorder.BlockBorder#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.BlockBorder(org.jfree.chart.util.RectangleInsets, java.awt.Paint)",
        "snippet": "    public BlockBorder(RectangleInsets insets, Paint paint) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");   \n        }\n        this.insets = insets;\n        this.paint = paint;\n    }\n",
        "begin_line": 130,
        "end_line": 139,
        "comment": "\r\n     * Creates a new border.\r\n     * \r\n     * @param insets  the border insets (<code>null</code> not permitted).\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockBorder.getInsets#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.getInsets()",
        "snippet": "    public RectangleInsets getInsets() {\n        return this.insets;\n    }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\r\n     * Returns the space reserved for the border.\r\n     * \r\n     * @return The space (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "BlockBorder.draw#165",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D area) {\n        // this default implementation will just fill the available\n        // border space with a single color\n        double t = this.insets.calculateTopInset(area.getHeight());\n        double b = this.insets.calculateBottomInset(area.getHeight());\n        double l = this.insets.calculateLeftInset(area.getWidth());\n        double r = this.insets.calculateRightInset(area.getWidth());\n        double x = area.getX();\n        double y = area.getY();\n        double w = area.getWidth();\n        double h = area.getHeight();\n        g2.setPaint(this.paint);\n        Rectangle2D rect = new Rectangle2D.Double();\n        if (t > 0.0) {\n            rect.setRect(x, y, w, t);\n            g2.fill(rect);\n        }\n        if (b > 0.0) {\n            rect.setRect(x, y + h - b, w, b);\n            g2.fill(rect);\n        }\n        if (l > 0.0) {\n            rect.setRect(x, y, l, h);\n            g2.fill(rect);\n        }\n        if (r > 0.0) {\n            rect.setRect(x + w - r, y, r, h);\n            g2.fill(rect);\n        }\n    }\n",
        "begin_line": 165,
        "end_line": 194,
        "comment": "\r\n     * Draws the border by filling in the reserved space.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.AbstractBlock#111",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.AbstractBlock()",
        "snippet": "    protected AbstractBlock() {\n        this.id = null;\n        this.width = 0.0;\n        this.height = 0.0;\n        this.bounds = new Rectangle2D.Float();\n        this.margin = RectangleInsets.ZERO_INSETS;\n        this.frame = BlockBorder.NONE; \n        this.padding = RectangleInsets.ZERO_INSETS;\n    }\n",
        "begin_line": 111,
        "end_line": 119,
        "comment": "\r\n     * Creates a new block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.setMargin#210",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setMargin(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setMargin(RectangleInsets margin) {\n        if (margin == null) {\n            throw new IllegalArgumentException(\"Null 'margin' argument.\");   \n        }\n        this.margin = margin;\n    }\n",
        "begin_line": 210,
        "end_line": 215,
        "comment": "\r\n     * Sets the margin (use {@link RectangleInsets#ZERO_INSETS} for no \r\n     * padding).\r\n     * \r\n     * @param margin  the margin (<code>null</code> not permitted).\r\n     * \r\n     * @see #getMargin()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.getFrame#240",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.getFrame()",
        "snippet": "    public BlockFrame getFrame() {\n        return this.frame;\n    }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\r\n     * Returns the current frame (border).\r\n     * \r\n     * @return The frame.\r\n     * \r\n     * @since 1.0.5\r\n     * @see #setFrame(BlockFrame)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.setFrame#252",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setFrame(org.jfree.chart.block.BlockFrame)",
        "snippet": "    public void setFrame(BlockFrame frame) {\n        if (frame == null) {\n            throw new IllegalArgumentException(\"Null 'frame' argument.\");   \n        }\n        this.frame = frame;\n    }\n",
        "begin_line": 252,
        "end_line": 257,
        "comment": "\r\n     * Sets the frame (or border).\r\n     * \r\n     * @param frame  the frame (<code>null</code> not permitted).\r\n     * \r\n     * @since 1.0.5\r\n     * @see #getFrame()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.setPadding#278",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setPadding(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setPadding(RectangleInsets padding) {\n        if (padding == null) {\n            throw new IllegalArgumentException(\"Null 'padding' argument.\");   \n        }\n        this.padding = padding;\n    }\n",
        "begin_line": 278,
        "end_line": 283,
        "comment": "\r\n     * Sets the padding (use {@link RectangleInsets#ZERO_INSETS} for no \r\n     * padding).\r\n     * \r\n     * @param padding  the padding (<code>null</code> not permitted).\r\n     * \r\n     * @see #getPadding()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.setPadding#293",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setPadding(double, double, double, double)",
        "snippet": "    public void setPadding(double top, double left, double bottom, \n                           double right) {\n        setPadding(new RectangleInsets(top, left, bottom, right));\n    }\n",
        "begin_line": 293,
        "end_line": 296,
        "comment": "\r\n     * Sets the padding.\r\n     * \r\n     * @param top  the top padding.\r\n     * @param left  the left padding.\r\n     * @param bottom  the bottom padding.\r\n     * @param right  the right padding.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.getBounds#355",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.getBounds()",
        "snippet": "    public Rectangle2D getBounds() {\n        return this.bounds;\n    }\n",
        "begin_line": 355,
        "end_line": 357,
        "comment": "\r\n     * Returns the current bounds of the block.\r\n     * \r\n     * @return The bounds.\r\n     * \r\n     * @see #setBounds(Rectangle2D)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.setBounds#366",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setBounds(java.awt.geom.Rectangle2D)",
        "snippet": "    public void setBounds(Rectangle2D bounds) {\n        if (bounds == null) {\n            throw new IllegalArgumentException(\"Null 'bounds' argument.\");\n        }\n        this.bounds = bounds;\n    }\n",
        "begin_line": 366,
        "end_line": 371,
        "comment": "\r\n     * Sets the bounds of the block.\r\n     * \r\n     * @param bounds  the bounds (<code>null</code> not permitted).\r\n     * \r\n     * @see #getBounds()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.trimToContentWidth#384",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentWidth(double)",
        "snippet": "    protected double trimToContentWidth(double fixedWidth) {\n        double result = this.margin.trimWidth(fixedWidth);\n        result = this.frame.getInsets().trimWidth(result);\n        result = this.padding.trimWidth(result);\n        return Math.max(result, 0.0);\n    }\n",
        "begin_line": 384,
        "end_line": 389,
        "comment": "\r\n     * Calculate the width available for content after subtracting \r\n     * the margin, border and padding space from the specified fixed \r\n     * width.\r\n     * \r\n     * @param fixedWidth  the fixed width.\r\n     * \r\n     * @return The available space.\r\n     * \r\n     * @see #trimToContentHeight(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.trimToContentHeight#402",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentHeight(double)",
        "snippet": "    protected double trimToContentHeight(double fixedHeight) {\n        double result = this.margin.trimHeight(fixedHeight);\n        result = this.frame.getInsets().trimHeight(result);\n        result = this.padding.trimHeight(result);\n        return Math.max(result, 0.0);\n    }\n",
        "begin_line": 402,
        "end_line": 407,
        "comment": "\r\n     * Calculate the height available for content after subtracting \r\n     * the margin, border and padding space from the specified fixed \r\n     * height.\r\n     * \r\n     * @param fixedHeight  the fixed height.\r\n     * \r\n     * @return The available space.\r\n     * \r\n     * @see #trimToContentWidth(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.toContentConstraint#417",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.toContentConstraint(org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    protected RectangleConstraint toContentConstraint(RectangleConstraint c) {\n        if (c == null) {\n            throw new IllegalArgumentException(\"Null 'c' argument.\");\n        }\n        if (c.equals(RectangleConstraint.NONE)) {\n            return c;\n        }\n        double w = c.getWidth();\n        Range wr = c.getWidthRange();\n        double h = c.getHeight();\n        Range hr = c.getHeightRange();\n        double ww = trimToContentWidth(w);\n        double hh = trimToContentHeight(h);\n        Range wwr = trimToContentWidth(wr);\n        Range hhr = trimToContentHeight(hr);\n        return new RectangleConstraint(\n            ww, wwr, c.getWidthConstraintType(), \n            hh, hhr, c.getHeightConstraintType()\n        );\n    }\n",
        "begin_line": 417,
        "end_line": 436,
        "comment": "\r\n     * Returns a constraint for the content of this block that will result in\r\n     * the bounds of the block matching the specified constraint.\r\n     * \r\n     * @param c  the outer constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The content constraint.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.trimToContentWidth#438",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentWidth(org.jfree.data.Range)",
        "snippet": "    private Range trimToContentWidth(Range r) {\n        if (r == null) {\n            return null;   \n        }\n        double lowerBound = 0.0;\n        double upperBound = Double.POSITIVE_INFINITY;\n        if (r.getLowerBound() > 0.0) {\n            lowerBound = trimToContentWidth(r.getLowerBound());   \n        }\n        if (r.getUpperBound() < Double.POSITIVE_INFINITY) {\n            upperBound = trimToContentWidth(r.getUpperBound());\n        }\n        return new Range(lowerBound, upperBound);\n    }\n",
        "begin_line": 438,
        "end_line": 451,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.trimToContentHeight#453",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentHeight(org.jfree.data.Range)",
        "snippet": "    private Range trimToContentHeight(Range r) {\n        if (r == null) {\n            return null;   \n        }\n        double lowerBound = 0.0;\n        double upperBound = Double.POSITIVE_INFINITY;\n        if (r.getLowerBound() > 0.0) {\n            lowerBound = trimToContentHeight(r.getLowerBound());   \n        }\n        if (r.getUpperBound() < Double.POSITIVE_INFINITY) {\n            upperBound = trimToContentHeight(r.getUpperBound());\n        }\n        return new Range(lowerBound, upperBound);\n    }\n",
        "begin_line": 453,
        "end_line": 466,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.calculateTotalWidth#475",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.calculateTotalWidth(double)",
        "snippet": "    protected double calculateTotalWidth(double contentWidth) {\n        double result = contentWidth;\n        result = this.padding.extendWidth(result);\n        result = this.frame.getInsets().extendWidth(result);\n        result = this.margin.extendWidth(result);\n        return result;\n    }\n",
        "begin_line": 475,
        "end_line": 481,
        "comment": "\r\n     * Adds the margin, border and padding to the specified content width.\r\n     * \r\n     * @param contentWidth  the content width.\r\n     * \r\n     * @return The adjusted width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.calculateTotalHeight#490",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.calculateTotalHeight(double)",
        "snippet": "    protected double calculateTotalHeight(double contentHeight) {\n        double result = contentHeight;\n        result = this.padding.extendHeight(result);\n        result = this.frame.getInsets().extendHeight(result);\n        result = this.margin.extendHeight(result);\n        return result;\n    }\n",
        "begin_line": 490,
        "end_line": 496,
        "comment": "\r\n     * Adds the margin, border and padding to the specified content height.\r\n     * \r\n     * @param contentHeight  the content height.\r\n     * \r\n     * @return The adjusted height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.trimMargin#506",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimMargin(java.awt.geom.Rectangle2D)",
        "snippet": "    protected Rectangle2D trimMargin(Rectangle2D area) {\n        // defer argument checking...\n        this.margin.trim(area);\n        return area;\n    }\n",
        "begin_line": 506,
        "end_line": 510,
        "comment": "\r\n     * Reduces the specified area by the amount of space consumed \r\n     * by the margin.\r\n     * \r\n     * @param area  the area (<code>null</code> not permitted).\r\n     * \r\n     * @return The trimmed area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.trimBorder#520",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimBorder(java.awt.geom.Rectangle2D)",
        "snippet": "    protected Rectangle2D trimBorder(Rectangle2D area) {\n        // defer argument checking...\n        this.frame.getInsets().trim(area);\n        return area;\n    }\n",
        "begin_line": 520,
        "end_line": 524,
        "comment": "\r\n     * Reduces the specified area by the amount of space consumed \r\n     * by the border.\r\n     * \r\n     * @param area  the area (<code>null</code> not permitted).\r\n     * \r\n     * @return The trimmed area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.trimPadding#534",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimPadding(java.awt.geom.Rectangle2D)",
        "snippet": "    protected Rectangle2D trimPadding(Rectangle2D area) {\n        // defer argument checking...\n        this.padding.trim(area);\n        return area;\n    }\n",
        "begin_line": 534,
        "end_line": 538,
        "comment": "\r\n     * Reduces the specified area by the amount of space consumed \r\n     * by the padding.\r\n     * \r\n     * @param area  the area (<code>null</code> not permitted).\r\n     * \r\n     * @return The trimmed area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractBlock.drawBorder#546",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.drawBorder(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    protected void drawBorder(Graphics2D g2, Rectangle2D area) {\n        this.frame.draw(g2, area);\n    }\n",
        "begin_line": 546,
        "end_line": 548,
        "comment": "\r\n     * Draws the border around the perimeter of the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueTick.ValueTick#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueTick.java",
        "class_name": "org.jfree.chart.axis.ValueTick",
        "signature": "org.jfree.chart.axis.ValueTick.ValueTick(double, java.lang.String, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public ValueTick(double value, String label, \n                     TextAnchor textAnchor, TextAnchor rotationAnchor, \n                     double angle) {\n                          \n        this(TickType.MAJOR, value, label, textAnchor, rotationAnchor, angle);\n        this.value = value;\n        \n    }\n",
        "begin_line": 75,
        "end_line": 82,
        "comment": "\r\n     * Creates a new value tick.\r\n     * \r\n     * @param value  the value.\r\n     * @param label  the label.\r\n     * @param textAnchor  the part of the label that is aligned to the anchor \r\n     *                    point.\r\n     * @param rotationAnchor  defines the rotation point relative to the label.\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueTick.ValueTick#97",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueTick.java",
        "class_name": "org.jfree.chart.axis.ValueTick",
        "signature": "org.jfree.chart.axis.ValueTick.ValueTick(org.jfree.chart.axis.TickType, double, java.lang.String, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public ValueTick(TickType tickType, double value, String label, \n                     TextAnchor textAnchor, TextAnchor rotationAnchor, \n                     double angle) {\n                          \n        super(label, textAnchor, rotationAnchor, angle);\n        this.value = value;\n        this.tickType = tickType;   \n    }    \n",
        "begin_line": 97,
        "end_line": 104,
        "comment": "\r\n     * Creates a new value tick.\r\n     * \r\n     * @param tickType  the tick type (major or minor).\r\n     * @param value  the value.\r\n     * @param label  the label.\r\n     * @param textAnchor  the part of the label that is aligned to the anchor \r\n     *                    point.\r\n     * @param rotationAnchor  defines the rotation point relative to the label.\r\n     * @param angle  the rotation angle (in radians).\r\n     * \r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueTick.getValue#111",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueTick.java",
        "class_name": "org.jfree.chart.axis.ValueTick",
        "signature": "org.jfree.chart.axis.ValueTick.getValue()",
        "snippet": "    public double getValue() {\n        return this.value;\n    }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "\r\n     * Returns the value.\r\n     * \r\n     * @return The value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueTick.getTickType#122",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueTick.java",
        "class_name": "org.jfree.chart.axis.ValueTick",
        "signature": "org.jfree.chart.axis.ValueTick.getTickType()",
        "snippet": "    public TickType getTickType() {\n        return this.tickType;\n    }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\r\n     * Returns the tick type (major or minor).\r\n     * \r\n     * @return The tick type.\r\n     *\r\n     * @since 1.0.7\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.ValueAxis#262",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.ValueAxis(java.lang.String, org.jfree.chart.axis.TickUnitSource)",
        "snippet": "    protected ValueAxis(String label, TickUnitSource standardTickUnits) {\n\n        super(label);\n\n        this.positiveArrowVisible = false;\n        this.negativeArrowVisible = false;\n\n        this.range = DEFAULT_RANGE;\n        this.autoRange = DEFAULT_AUTO_RANGE;\n        this.defaultAutoRange = DEFAULT_RANGE;\n\n        this.inverted = DEFAULT_INVERTED;\n        this.autoRangeMinimumSize = DEFAULT_AUTO_RANGE_MINIMUM_SIZE;\n\n        this.lowerMargin = DEFAULT_LOWER_MARGIN;\n        this.upperMargin = DEFAULT_UPPER_MARGIN;\n\n        this.fixedAutoRange = 0.0;\n\n        this.autoTickUnitSelection = DEFAULT_AUTO_TICK_UNIT_SELECTION;\n        this.standardTickUnits = standardTickUnits;\n        \n        Polygon p1 = new Polygon();\n        p1.addPoint(0, 0);\n        p1.addPoint(-2, 2);\n        p1.addPoint(2, 2);\n        \n        this.upArrow = p1;\n\n        Polygon p2 = new Polygon();\n        p2.addPoint(0, 0);\n        p2.addPoint(-2, -2);\n        p2.addPoint(2, -2);\n\n        this.downArrow = p2;\n\n        Polygon p3 = new Polygon();\n        p3.addPoint(0, 0);\n        p3.addPoint(-2, -2);\n        p3.addPoint(-2, 2);\n        \n        this.rightArrow = p3;\n\n        Polygon p4 = new Polygon();\n        p4.addPoint(0, 0);\n        p4.addPoint(2, -2);\n        p4.addPoint(2, 2);\n\n        this.leftArrow = p4;\n        \n        this.verticalTickLabels = false;\n        \n    }\n",
        "begin_line": 262,
        "end_line": 314,
        "comment": "\r\n     * Constructs a value axis.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     * @param standardTickUnits  the source for standard tick units \r\n     *                           (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.isVerticalTickLabels#324",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.isVerticalTickLabels()",
        "snippet": "    public boolean isVerticalTickLabels() {\n        return this.verticalTickLabels;\n    }\n",
        "begin_line": 324,
        "end_line": 326,
        "comment": "\r\n     * Returns <code>true</code> if the tick labels should be rotated (to \r\n     * vertical), and <code>false</code> otherwise.\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     * \r\n     * @see #setVerticalTickLabels(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.drawAxisLine#521",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.drawAxisLine(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected void drawAxisLine(Graphics2D g2, double cursor,\n                                Rectangle2D dataArea, RectangleEdge edge) {\n        Line2D axisLine = null;\n        if (edge == RectangleEdge.TOP) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.LEFT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        g2.setPaint(getAxisLinePaint());\n        g2.setStroke(getAxisLineStroke());\n        g2.draw(axisLine);\n        \n        boolean drawUpOrRight = false;  \n        boolean drawDownOrLeft = false;\n        if (this.positiveArrowVisible) {\n            if (this.inverted) {\n                drawDownOrLeft = true;   \n            }\n            else {\n                drawUpOrRight = true;   \n            }\n        }\n        if (this.negativeArrowVisible) {\n            if (this.inverted) {\n                drawUpOrRight = true;   \n            }\n            else {\n                drawDownOrLeft = true;   \n            }\n        }\n        if (drawUpOrRight) {\n            double x = 0.0;\n            double y = 0.0;\n            Shape arrow = null;\n            if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {\n                x = dataArea.getMaxX();\n                y = cursor;\n                arrow = this.rightArrow; \n            }\n            else if (edge == RectangleEdge.LEFT \n                    || edge == RectangleEdge.RIGHT) {\n                x = cursor;\n                y = dataArea.getMinY();\n                arrow = this.upArrow; \n            }\n\n            // draw the arrow...\n            AffineTransform transformer = new AffineTransform();\n            transformer.setToTranslation(x, y);\n            Shape shape = transformer.createTransformedShape(arrow);\n            g2.fill(shape);\n            g2.draw(shape);\n        }\n        \n        if (drawDownOrLeft) {\n            double x = 0.0;\n            double y = 0.0;\n            Shape arrow = null;\n            if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {\n                x = dataArea.getMinX();\n                y = cursor;\n                arrow = this.leftArrow; \n            }\n            else if (edge == RectangleEdge.LEFT \n                    || edge == RectangleEdge.RIGHT) {\n                x = cursor;\n                y = dataArea.getMaxY();\n                arrow = this.downArrow; \n            }\n\n            // draw the arrow...\n            AffineTransform transformer = new AffineTransform();\n            transformer.setToTranslation(x, y);\n            Shape shape = transformer.createTransformedShape(arrow);\n            g2.fill(shape);\n            g2.draw(shape);\n        }\n        \n    }\n",
        "begin_line": 521,
        "end_line": 610,
        "comment": "\r\n     * Draws an axis line at the current cursor position and edge.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param cursor  the cursor position.\r\n     * @param dataArea  the data area.\r\n     * @param edge  the edge.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.calculateAnchorPoint#622",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.calculateAnchorPoint(org.jfree.chart.axis.ValueTick, double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected float[] calculateAnchorPoint(ValueTick tick, \n                                           double cursor, \n                                           Rectangle2D dataArea, \n                                           RectangleEdge edge) {\n    \n        RectangleInsets insets = getTickLabelInsets();\n        float[] result = new float[2];\n        if (edge == RectangleEdge.TOP) {\n            result[0] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n            result[1] = (float) (cursor - insets.getBottom() - 2.0);\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            result[0] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n            result[1] = (float) (cursor + insets.getTop() + 2.0); \n        }\n        else if (edge == RectangleEdge.LEFT) {\n            result[0] = (float) (cursor - insets.getLeft() - 2.0);    \n            result[1] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            result[0] = (float) (cursor + insets.getRight() + 2.0);    \n            result[1] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n        }\n        return result;\n    }\n",
        "begin_line": 622,
        "end_line": 646,
        "comment": "\r\n     * Calculates the anchor point for a tick label.\r\n     * \r\n     * @param tick  the tick.\r\n     * @param cursor  the cursor.\r\n     * @param dataArea  the data area.\r\n     * @param edge  the edge on which the axis is drawn.\r\n     * \r\n     * @return The x and y coordinates of the anchor point.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.drawTickMarksAndLabels#660",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.drawTickMarksAndLabels(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    protected AxisState drawTickMarksAndLabels(Graphics2D g2, double cursor,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo info) {\n                                              \n        AxisState state = new AxisState(cursor);\n\n        if (isAxisLineVisible()) {\n            drawAxisLine(g2, cursor, dataArea, edge);\n        }\n\n        double ol = getTickMarkOutsideLength();\n        double il = getTickMarkInsideLength();\n\n        List ticks = refreshTicks(g2, state, dataArea, edge);\n        state.setTicks(ticks);\n        g2.setFont(getTickLabelFont());\n        Iterator iterator = ticks.iterator();\n        while (iterator.hasNext()) {\n            ValueTick tick = (ValueTick) iterator.next();\n            if (isTickLabelsVisible()) {\n                g2.setPaint(getTickLabelPaint());\n                float[] anchorPoint = calculateAnchorPoint(tick, cursor, \n                        dataArea, edge);\n                TextUtilities.drawRotatedString(tick.getText(), g2, \n                        anchorPoint[0], anchorPoint[1], tick.getTextAnchor(), \n                        tick.getAngle(), tick.getRotationAnchor());\n            }\n\n            if (isTickMarksVisible() && tick.getTickType().equals(TickType.MAJOR)) {\n                float xx = (float) valueToJava2D(tick.getValue(), dataArea, \n                        edge);\n                Line2D mark = null;\n                g2.setStroke(getTickMarkStroke());\n                g2.setPaint(getTickMarkPaint());\n                if (edge == RectangleEdge.LEFT) {\n                    mark = new Line2D.Double(cursor - ol, xx, cursor + il, xx);\n                }\n                else if (edge == RectangleEdge.RIGHT) {\n                    mark = new Line2D.Double(cursor + ol, xx, cursor - il, xx);\n                }\n                else if (edge == RectangleEdge.TOP) {\n                    mark = new Line2D.Double(xx, cursor - ol, xx, cursor + il);\n                }\n                else if (edge == RectangleEdge.BOTTOM) {\n                    mark = new Line2D.Double(xx, cursor + ol, xx, cursor - il);\n                }\n                g2.draw(mark);\n            }\n        }\n        \n        // need to work out the space used by the tick labels...\n        // so we can update the cursor...\n        double used = 0.0;\n        if (isTickLabelsVisible()) {\n            if (edge == RectangleEdge.LEFT) {\n                used += findMaximumTickLabelWidth(ticks, g2, plotArea, \n                        isVerticalTickLabels());  \n                state.cursorLeft(used);      \n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                used = findMaximumTickLabelWidth(ticks, g2, plotArea, \n                        isVerticalTickLabels());\n                state.cursorRight(used);      \n            }\n            else if (edge == RectangleEdge.TOP) {\n                used = findMaximumTickLabelHeight(ticks, g2, plotArea, \n                        isVerticalTickLabels());\n                state.cursorUp(used);\n            }\n            else if (edge == RectangleEdge.BOTTOM) {\n                used = findMaximumTickLabelHeight(ticks, g2, plotArea, \n                        isVerticalTickLabels());\n                state.cursorDown(used);\n            }\n        }\n       \n        return state;\n    }\n",
        "begin_line": 660,
        "end_line": 737,
        "comment": "\r\n     * Draws the axis line, tick marks and tick mark labels.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param cursor  the cursor.\r\n     * @param plotArea  the plot area.\r\n     * @param dataArea  the data area.\r\n     * @param edge  the edge that the axis is aligned with.\r\n     * @param info  the plot rendering info.\r\n     * \r\n     * @return The width or height used to draw the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.reserveSpace#751",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.reserveSpace(java.awt.Graphics2D, org.jfree.chart.plot.Plot, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisSpace)",
        "snippet": "    public AxisSpace reserveSpace(Graphics2D g2, Plot plot,\n                                  Rectangle2D plotArea, \n                                  RectangleEdge edge, AxisSpace space) {\n\n        // create a new space object if one wasn't supplied...\n        if (space == null) {\n            space = new AxisSpace();\n        }\n        \n        // if the axis is not visible, no additional space is required...\n        if (!isVisible()) {\n            return space;\n        }\n\n        // if the axis has a fixed dimension, return it...\n        double dimension = getFixedDimension();\n        if (dimension > 0.0) {\n            space.ensureAtLeast(dimension, edge);\n        }\n\n        // calculate the max size of the tick labels (if visible)...\n        double tickLabelHeight = 0.0;\n        double tickLabelWidth = 0.0;\n        if (isTickLabelsVisible()) {\n            g2.setFont(getTickLabelFont());\n            List ticks = refreshTicks(g2, new AxisState(), plotArea, edge);\n            if (RectangleEdge.isTopOrBottom(edge)) {\n                tickLabelHeight = findMaximumTickLabelHeight(ticks, g2, \n                        plotArea, isVerticalTickLabels());\n            }\n            else if (RectangleEdge.isLeftOrRight(edge)) {\n                tickLabelWidth = findMaximumTickLabelWidth(ticks, g2, plotArea,\n                        isVerticalTickLabels());\n            }\n        }\n\n        // get the axis label size and update the space object...\n        Rectangle2D labelEnclosure = getLabelEnclosure(g2, edge);\n        double labelHeight = 0.0;\n        double labelWidth = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            labelHeight = labelEnclosure.getHeight();\n            space.add(labelHeight + tickLabelHeight, edge);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            labelWidth = labelEnclosure.getWidth();\n            space.add(labelWidth + tickLabelWidth, edge);\n        }\n\n        return space;\n\n    }\n",
        "begin_line": 751,
        "end_line": 802,
        "comment": "\r\n     * Returns the space required to draw the axis.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plot  the plot that the axis belongs to.\r\n     * @param plotArea  the area within which the plot should be drawn.\r\n     * @param edge  the axis location.\r\n     * @param space  the space already reserved (for other axes).\r\n     *\r\n     * @return The space required to draw the axis (including pre-reserved \r\n     *         space).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.isInverted#901",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.isInverted()",
        "snippet": "    public boolean isInverted() {\n        return this.inverted;\n    }\n",
        "begin_line": 901,
        "end_line": 903,
        "comment": "\r\n     * Returns a flag that controls the direction of values on the axis.\r\n     * <P>\r\n     * For a regular axis, values increase from left to right (for a horizontal\r\n     * axis) and bottom to top (for a vertical axis).  When the axis is\r\n     * 'inverted', the values increase in the opposite direction.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #setInverted(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.isAutoRange#930",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.isAutoRange()",
        "snippet": "    public boolean isAutoRange() {\n        return this.autoRange;\n    }\n",
        "begin_line": 930,
        "end_line": 932,
        "comment": "\r\n     * Returns the flag that controls whether or not the axis range is \r\n     * automatically adjusted to fit the data values.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #setAutoRange(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.getAutoRangeMinimumSize#976",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getAutoRangeMinimumSize()",
        "snippet": "    public double getAutoRangeMinimumSize() {\n        return this.autoRangeMinimumSize;\n    }\n",
        "begin_line": 976,
        "end_line": 978,
        "comment": "\r\n     * Returns the minimum size allowed for the axis range when it is \r\n     * automatically calculated.\r\n     *\r\n     * @return The minimum range.\r\n     * \r\n     * @see #setAutoRangeMinimumSize(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.getLowerMargin#1060",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getLowerMargin()",
        "snippet": "    public double getLowerMargin() {\n        return this.lowerMargin;\n    }\n",
        "begin_line": 1060,
        "end_line": 1062,
        "comment": "\r\n     * Returns the lower margin for the axis, expressed as a percentage of the \r\n     * axis range.  This controls the space added to the lower end of the axis \r\n     * when the axis range is automatically calculated (it is ignored when the \r\n     * axis range is set explicitly). The default value is 0.05 (five percent).\r\n     *\r\n     * @return The lower margin.\r\n     *\r\n     * @see #setLowerMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.getUpperMargin#1093",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getUpperMargin()",
        "snippet": "    public double getUpperMargin() {\n        return this.upperMargin;\n    }\n",
        "begin_line": 1093,
        "end_line": 1095,
        "comment": "\r\n     * Returns the upper margin for the axis, expressed as a percentage of the \r\n     * axis range.  This controls the space added to the lower end of the axis \r\n     * when the axis range is automatically calculated (it is ignored when the \r\n     * axis range is set explicitly). The default value is 0.05 (five percent).\r\n     *\r\n     * @return The upper margin.\r\n     *\r\n     * @see #setUpperMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.getFixedAutoRange#1123",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getFixedAutoRange()",
        "snippet": "    public double getFixedAutoRange() {\n        return this.fixedAutoRange;\n    }\n",
        "begin_line": 1123,
        "end_line": 1125,
        "comment": "\r\n     * Returns the fixed auto range.\r\n     *\r\n     * @return The length.\r\n     * \r\n     * @see #setFixedAutoRange(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.getRange#1205",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getRange()",
        "snippet": "    public Range getRange() {\n        return this.range;\n    }\n",
        "begin_line": 1205,
        "end_line": 1207,
        "comment": "\r\n     * Returns the range for the axis.\r\n     *\r\n     * @return The axis range (never <code>null</code>).\r\n     * \r\n     * @see #setRange(Range)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.setRange#1236",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setRange(org.jfree.data.Range, boolean, boolean)",
        "snippet": "    public void setRange(Range range, boolean turnOffAutoRange, \n                         boolean notify) {\n        if (range == null) {\n            throw new IllegalArgumentException(\"Null 'range' argument.\");\n        }\n        if (turnOffAutoRange) {\n            this.autoRange = false;\n        }\n        this.range = range;\n        if (notify) {\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n",
        "begin_line": 1236,
        "end_line": 1248,
        "comment": "\r\n     * Sets the range for the axis, if requested, sends an \r\n     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect, \r\n     * the auto-range flag is set to <code>false</code> (optional).\r\n     *\r\n     * @param range  the range (<code>null</code> not permitted).\r\n     * @param turnOffAutoRange  a flag that controls whether or not the auto \r\n     *                          range is turned off.         \r\n     * @param notify  a flag that controls whether or not listeners are \r\n     *                notified.\r\n     *                \r\n     * @see #getRange()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.isAutoTickUnitSelection#1330",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.isAutoTickUnitSelection()",
        "snippet": "    public boolean isAutoTickUnitSelection() {\n        return this.autoTickUnitSelection;\n    }\n",
        "begin_line": 1330,
        "end_line": 1332,
        "comment": "\r\n     * Returns a flag indicating whether or not the tick unit is automatically\r\n     * selected from a range of standard tick units.\r\n     *\r\n     * @return A flag indicating whether or not the tick unit is automatically\r\n     *         selected.\r\n     *         \r\n     * @see #setAutoTickUnitSelection(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.getStandardTickUnits#1373",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getStandardTickUnits()",
        "snippet": "    public TickUnitSource getStandardTickUnits() {\n        return this.standardTickUnits;\n    }\n",
        "begin_line": 1373,
        "end_line": 1375,
        "comment": "\r\n     * Returns the source for obtaining standard tick units for the axis.\r\n     *\r\n     * @return The source (possibly <code>null</code>).\r\n     * \r\n     * @see #setStandardTickUnits(TickUnitSource)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.lengthToJava2D#1421",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.lengthToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public double lengthToJava2D(double length, Rectangle2D area, \n                                 RectangleEdge edge) {\n        double zero = valueToJava2D(0.0, area, edge);\n        double l = valueToJava2D(length, area, edge);\n        return Math.abs(l - zero);\n    }\n",
        "begin_line": 1421,
        "end_line": 1426,
        "comment": "\r\n     * Converts a length in data coordinates into the corresponding length in \r\n     * Java2D coordinates.\r\n     * \r\n     * @param length  the length.\r\n     * @param area  the plot area.\r\n     * @param edge  the edge along which the axis lies.\r\n     * \r\n     * @return The length in Java2D coordinates.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TickUnits.TickUnits#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.TickUnits()",
        "snippet": "    public TickUnits() {\n        this.tickUnits = new ArrayList();\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\r\n     * Constructs a new collection of tick units.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TickUnits.add#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.add(org.jfree.chart.axis.TickUnit)",
        "snippet": "    public void add(TickUnit unit) {\n        if (unit == null) {\n            throw new NullPointerException(\"Null 'unit' argument.\");\n        }\n        this.tickUnits.add(unit);\n        Collections.sort(this.tickUnits);\n    }\n",
        "begin_line": 91,
        "end_line": 97,
        "comment": "\r\n     * Adds a tick unit to the collection.  The tick units are maintained in \r\n     * ascending order.\r\n     *\r\n     * @param unit  the tick unit to add (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TickUnits.getCeilingTickUnit#153",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.getCeilingTickUnit(org.jfree.chart.axis.TickUnit)",
        "snippet": "    public TickUnit getCeilingTickUnit(TickUnit unit) {\n\n        int index = Collections.binarySearch(this.tickUnits, unit);\n        if (index >= 0) {\n            return (TickUnit) this.tickUnits.get(index);\n        }\n        else {\n            index = -(index + 1);\n            return (TickUnit) this.tickUnits.get(Math.min(index, \n                    this.tickUnits.size() - 1));\n        }\n\n    }\n",
        "begin_line": 153,
        "end_line": 165,
        "comment": "\r\n     * Returns the tick unit in the collection that is greater than or equal\r\n     * to (in size) the specified unit.\r\n     *\r\n     * @param unit  the unit.\r\n     *\r\n     * @return A unit from the collection.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TickUnits.getCeilingTickUnit#175",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.getCeilingTickUnit(double)",
        "snippet": "    public TickUnit getCeilingTickUnit(double size) {\n        return getCeilingTickUnit(new NumberTickUnit(size, \n                NumberFormat.getInstance()));\n    }\n",
        "begin_line": 175,
        "end_line": 178,
        "comment": "\r\n     * Returns the tick unit in the collection that is greater than or equal\r\n     * to the specified size.\r\n     *\r\n     * @param size  the size.\r\n     *\r\n     * @return A unit from the collection.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TickUnit.TickUnit#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.TickUnit(double)",
        "snippet": "    public TickUnit(double size) {\n        this.size = size;\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\r\n     * Constructs a new tick unit.\r\n     *\r\n     * @param size  the tick unit size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TickUnit.getSize#107",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.getSize()",
        "snippet": "    public double getSize() {\n        return this.size;\n    }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\r\n     * Returns the size of the tick unit.\r\n     *\r\n     * @return The size of the tick unit.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TickUnit.compareTo#144",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object object) {\n\n        if (object instanceof TickUnit) {\n            TickUnit other = (TickUnit) object;\n            if (this.size > other.getSize()) {\n                return 1;\n            }\n            else if (this.size < other.getSize()) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            return -1;\n        }\n\n    }\n",
        "begin_line": 144,
        "end_line": 162,
        "comment": "\r\n     * Compares this tick unit to an arbitrary object.\r\n     *\r\n     * @param object  the object to compare against.\r\n     *\r\n     * @return <code>1</code> if the size of the other object is less than this,\r\n     *      <code>0</code> if both have the same size and <code>-1</code> this\r\n     *      size is less than the others.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TickType.TickType#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickType.java",
        "class_name": "org.jfree.chart.axis.TickType",
        "signature": "org.jfree.chart.axis.TickType.TickType(java.lang.String)",
        "snippet": "    private TickType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "TickType.equals#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickType.java",
        "class_name": "org.jfree.chart.axis.TickType",
        "signature": "org.jfree.chart.axis.TickType.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof TickType)) {\n            return false;\n        }\n\n        TickType that = (TickType) obj;\n        if (!this.name.equals(that.name)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 90,
        "end_line": 103,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tick.Tick#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "class_name": "org.jfree.chart.axis.Tick",
        "signature": "org.jfree.chart.axis.Tick.Tick(java.lang.String, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public Tick(String text, TextAnchor textAnchor, TextAnchor rotationAnchor, \n                double angle) {\n        if (textAnchor == null) {\n            throw new IllegalArgumentException(\"Null 'textAnchor' argument.\");\n        }\n        if (rotationAnchor == null) {\n            throw new IllegalArgumentException(\n                \"Null 'rotationAnchor' argument.\"\n            );   \n        }\n        this.text = text;\n        this.textAnchor = textAnchor;\n        this.rotationAnchor = rotationAnchor;\n        this.angle = angle;\n    }\n",
        "begin_line": 85,
        "end_line": 99,
        "comment": "\r\n     * Creates a new tick.\r\n     *\r\n     * @param text  the formatted version of the tick value.\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     * @param rotationAnchor  the rotation anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param angle  the angle. \r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tick.getText#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "class_name": "org.jfree.chart.axis.Tick",
        "signature": "org.jfree.chart.axis.Tick.getText()",
        "snippet": "    public String getText() {\n        return this.text;\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\r\n     * Returns the text version of the tick value.\r\n     *\r\n     * @return A string (possibly <code>null</code>;\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tick.getTextAnchor#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "class_name": "org.jfree.chart.axis.Tick",
        "signature": "org.jfree.chart.axis.Tick.getTextAnchor()",
        "snippet": "    public TextAnchor getTextAnchor() {\n        return this.textAnchor;\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\r\n     * Returns the text anchor.\r\n     * \r\n     * @return The text anchor (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tick.getRotationAnchor#125",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "class_name": "org.jfree.chart.axis.Tick",
        "signature": "org.jfree.chart.axis.Tick.getRotationAnchor()",
        "snippet": "    public TextAnchor getRotationAnchor() {\n        return this.rotationAnchor;\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\r\n     * Returns the text anchor that defines the point around which the label is\r\n     * rotated.\r\n     * \r\n     * @return A text anchor (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Tick.getAngle#134",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "class_name": "org.jfree.chart.axis.Tick",
        "signature": "org.jfree.chart.axis.Tick.getAngle()",
        "snippet": "    public double getAngle() {\n        return this.angle;\n    }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\r\n     * Returns the angle.\r\n     * \r\n     * @return The angle.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberTickUnit.NumberTickUnit#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "signature": "org.jfree.chart.axis.NumberTickUnit.NumberTickUnit(double, java.text.NumberFormat)",
        "snippet": "    public NumberTickUnit(double size, NumberFormat formatter) {\n        super(size);\n        if (formatter == null) {\n            throw new IllegalArgumentException(\"Null 'formatter' argument.\");\n        }\n        this.formatter = formatter;\n    }\n",
        "begin_line": 83,
        "end_line": 89,
        "comment": "\r\n     * Creates a new number tick unit.\r\n     *\r\n     * @param size  the size of the tick unit.\r\n     * @param formatter  a number formatter for the tick unit (<code>null</code>\r\n     *                   not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberTickUnit.valueToString#117",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "signature": "org.jfree.chart.axis.NumberTickUnit.valueToString(double)",
        "snippet": "    public String valueToString(double value) {\n        return this.formatter.format(value);\n    }\n",
        "begin_line": 117,
        "end_line": 119,
        "comment": "\r\n     * Converts a value to a string.\r\n     *\r\n     * @param value  the value.\r\n     *\r\n     * @return The formatted string.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberTick.NumberTick#67",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberTick.java",
        "class_name": "org.jfree.chart.axis.NumberTick",
        "signature": "org.jfree.chart.axis.NumberTick.NumberTick(java.lang.Number, java.lang.String, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public NumberTick(Number number, String label,\n                      TextAnchor textAnchor, \n                      TextAnchor rotationAnchor, double angle) {\n                        \n        super(number.doubleValue(), label, textAnchor, rotationAnchor, angle);\n        this.number = number;\n            \n    }\n",
        "begin_line": 67,
        "end_line": 74,
        "comment": "\r\n     * Creates a new tick.\r\n     * \r\n     * @param number  the number (<code>null</code> not permitted).\r\n     * @param label  the label.\r\n     * @param textAnchor  the part of the label that is aligned with the anchor \r\n     *                    point.\r\n     * @param rotationAnchor  defines the rotation point relative to the text.\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.NumberAxis#197",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.NumberAxis(java.lang.String)",
        "snippet": "    public NumberAxis(String label) {\n        super(label, NumberAxis.createStandardTickUnits());\n        this.rangeType = RangeType.FULL;\n        this.autoRangeIncludesZero = DEFAULT_AUTO_RANGE_INCLUDES_ZERO;\n        this.autoRangeStickyZero = DEFAULT_AUTO_RANGE_STICKY_ZERO;\n        this.tickUnit = DEFAULT_TICK_UNIT;\n        this.numberFormatOverride = null;\n        this.markerBand = null;\n    }\n",
        "begin_line": 197,
        "end_line": 205,
        "comment": "\r\n     * Constructs a number axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.getAutoRangeIncludesZero#239",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getAutoRangeIncludesZero()",
        "snippet": "    public boolean getAutoRangeIncludesZero() {\n        return this.autoRangeIncludesZero;\n    }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "\r\n     * Returns the flag that indicates whether or not the automatic axis range\r\n     * (if indeed it is determined automatically) is forced to include zero.\r\n     *\r\n     * @return The flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.getAutoRangeStickyZero#274",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getAutoRangeStickyZero()",
        "snippet": "    public boolean getAutoRangeStickyZero() {\n        return this.autoRangeStickyZero;\n    }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": "\r\n     * Returns a flag that affects the auto-range when zero falls outside the\r\n     * data range but inside the margins defined for the axis.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #setAutoRangeStickyZero(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.getTickUnit#309",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getTickUnit()",
        "snippet": "    public NumberTickUnit getTickUnit() {\n        return this.tickUnit;\n    }\n",
        "begin_line": 309,
        "end_line": 311,
        "comment": "\r\n     * Returns the tick unit for the axis.  \r\n     * <p>\r\n     * Note: if the <code>autoTickUnitSelection</code> flag is \r\n     * <code>true</code> the tick unit may be changed while the axis is being \r\n     * drawn, so in that case the return value from this method may be\r\n     * irrelevant if the method is called before the axis has been drawn.\r\n     *\r\n     * @return The tick unit for the axis.\r\n     * \r\n     * @see #setTickUnit(NumberTickUnit)\r\n     * @see ValueAxis#isAutoTickUnitSelection()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.setTickUnit#341",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.setTickUnit(org.jfree.chart.axis.NumberTickUnit, boolean, boolean)",
        "snippet": "    public void setTickUnit(NumberTickUnit unit, boolean notify, \n                            boolean turnOffAutoSelect) {\n\n        if (unit == null) {\n            throw new IllegalArgumentException(\"Null 'unit' argument.\");   \n        }\n        this.tickUnit = unit;\n        if (turnOffAutoSelect) {\n            setAutoTickUnitSelection(false, false);\n        }\n        if (notify) {\n            notifyListeners(new AxisChangeEvent(this));\n        }\n\n    }\n",
        "begin_line": 341,
        "end_line": 355,
        "comment": "\r\n     * Sets the tick unit for the axis and, if requested, sends an \r\n     * {@link AxisChangeEvent} to all registered listeners.  In addition, an \r\n     * option is provided to turn off the \"auto-select\" feature for tick units \r\n     * (you can restore it using the \r\n     * {@link ValueAxis#setAutoTickUnitSelection(boolean)} method).\r\n     *\r\n     * @param unit  the new tick unit (<code>null</code> not permitted).\r\n     * @param notify  notify listeners?\r\n     * @param turnOffAutoSelect  turn off the auto-tick selection?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.getNumberFormatOverride#365",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getNumberFormatOverride()",
        "snippet": "    public NumberFormat getNumberFormatOverride() {\n        return this.numberFormatOverride;\n    }\n",
        "begin_line": 365,
        "end_line": 367,
        "comment": "\r\n     * Returns the number format override.  If this is non-null, then it will \r\n     * be used to format the numbers on the axis.\r\n     *\r\n     * @return The number formatter (possibly <code>null</code>).\r\n     * \r\n     * @see #setNumberFormatOverride(NumberFormat)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.configure#412",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.configure()",
        "snippet": "    public void configure() {\n        if (isAutoRange()) {\n            autoAdjustRange();\n        }\n    }\n",
        "begin_line": 412,
        "end_line": 416,
        "comment": "\r\n     * Configures the axis to work with the specified plot.  If the axis has\r\n     * auto-scaling, then sets the maximum and minimum values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.autoAdjustRange#421",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.autoAdjustRange()",
        "snippet": "    protected void autoAdjustRange() {\n\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n            \n            double upper = r.getUpperBound();\n            double lower = r.getLowerBound();\n            if (this.rangeType == RangeType.POSITIVE) {\n                lower = Math.max(0.0, lower);\n                upper = Math.max(0.0, upper);\n            }\n            else if (this.rangeType == RangeType.NEGATIVE) {\n                lower = Math.min(0.0, lower);\n                upper = Math.min(0.0, upper);                   \n            }\n            \n            if (getAutoRangeIncludesZero()) {\n                lower = Math.min(lower, 0.0);\n                upper = Math.max(upper, 0.0);\n            }\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = upper - fixedAutoRange;\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                    if (lower == upper) { // see bug report 1549218\n                        double adjust = Math.abs(lower) / 10.0;\n                        lower = lower - adjust;\n                        upper = upper + adjust;\n                    }\n                    if (this.rangeType == RangeType.POSITIVE) {\n                        if (lower < 0.0) {\n                            upper = upper - lower;\n                            lower = 0.0;\n                        }\n                    }\n                    else if (this.rangeType == RangeType.NEGATIVE) {\n                        if (upper > 0.0) {\n                            lower = lower - upper;\n                            upper = 0.0;\n                        }\n                    }\n                }\n\n                if (getAutoRangeStickyZero()) {\n                    if (upper <= 0.0) {\n                        upper = Math.min(0.0, upper + getUpperMargin() * range);\n                    }\n                    else {\n                        upper = upper + getUpperMargin() * range;\n                    }\n                    if (lower >= 0.0) {\n                        lower = Math.max(0.0, lower - getLowerMargin() * range);\n                    }\n                    else {\n                        lower = lower - getLowerMargin() * range;\n                    }\n                }\n                else {\n                    upper = upper + getUpperMargin() * range;\n                    lower = lower - getLowerMargin() * range;\n                }\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }\n",
        "begin_line": 421,
        "end_line": 507,
        "comment": "\r\n     * Rescales the axis to ensure that all data is visible.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.valueToJava2D#523",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.valueToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public double valueToJava2D(double value, Rectangle2D area, \n                                RectangleEdge edge) {\n        \n        Range range = getRange();\n        double axisMin = range.getLowerBound();\n        double axisMax = range.getUpperBound();\n\n        double min = 0.0;\n        double max = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            min = area.getX();\n            max = area.getMaxX();\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            max = area.getMinY();\n            min = area.getMaxY();\n        }\n        if (isInverted()) {\n            return max \n                   - ((value - axisMin) / (axisMax - axisMin)) * (max - min);\n        }\n        else {\n            return min \n                   + ((value - axisMin) / (axisMax - axisMin)) * (max - min);\n        }\n\n    }\n",
        "begin_line": 523,
        "end_line": 549,
        "comment": "\r\n     * Converts a data value to a coordinate in Java2D space, assuming that the\r\n     * axis runs along one edge of the specified dataArea.\r\n     * <p>\r\n     * Note that it is possible for the coordinate to fall outside the plotArea.\r\n     *\r\n     * @param value  the data value.\r\n     * @param area  the area for plotting the data.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The Java2D coordinate.\r\n     * \r\n     * @see #java2DToValue(double, Rectangle2D, RectangleEdge)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.calculateLowestVisibleTickValue#598",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.calculateLowestVisibleTickValue()",
        "snippet": "    protected double calculateLowestVisibleTickValue() {\n\n        double unit = getTickUnit().getSize();\n        double index = Math.ceil(getRange().getLowerBound() / unit);\n        return index * unit;\n\n    }\n",
        "begin_line": 598,
        "end_line": 604,
        "comment": "\r\n     * Calculates the value of the lowest visible tick on the axis.\r\n     *\r\n     * @return The value of the lowest visible tick on the axis.\r\n     * \r\n     * @see #calculateHighestVisibleTickValue()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.calculateVisibleTickCount#626",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.calculateVisibleTickCount()",
        "snippet": "    protected int calculateVisibleTickCount() {\n\n        double unit = getTickUnit().getSize();\n        Range range = getRange();\n        return (int) (Math.floor(range.getUpperBound() / unit)\n                      - Math.ceil(range.getLowerBound() / unit) + 1);\n\n    }\n",
        "begin_line": 626,
        "end_line": 633,
        "comment": "\r\n     * Calculates the number of visible ticks.\r\n     *\r\n     * @return The number of visible ticks on the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.draw#651",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public AxisState draw(Graphics2D g2, \n                          double cursor,\n                          Rectangle2D plotArea, \n                          Rectangle2D dataArea, \n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState) {\n\n        AxisState state = null;\n        // if the axis is not visible, don't draw it...\n        if (!isVisible()) {\n            state = new AxisState(cursor);\n            // even though the axis is not visible, we need ticks for the \n            // gridlines...\n            List ticks = refreshTicks(g2, state, dataArea, edge); \n            state.setTicks(ticks);\n            return state;\n        }\n\n        // draw the tick marks and labels...\n        state = drawTickMarksAndLabels(g2, cursor, plotArea, dataArea, edge,\n                plotState);\n\n//        // draw the marker band (if there is one)...\n//        if (getMarkerBand() != null) {\n//            if (edge == RectangleEdge.BOTTOM) {\n//                cursor = cursor - getMarkerBand().getHeight(g2);\n//            }\n//            getMarkerBand().draw(g2, plotArea, dataArea, 0, cursor);\n//        }\n        \n        // draw the axis label...\n        state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state,\n                plotState);\n\n        return state;\n        \n    }\n",
        "begin_line": 651,
        "end_line": 687,
        "comment": "\r\n     * Draws the axis on a Java 2D graphics device (such as the screen or a \r\n     * printer).\r\n     *\r\n     * @param g2  the graphics device (<code>null</code> not permitted).\r\n     * @param cursor  the cursor location.\r\n     * @param plotArea  the area within which the axes and data should be drawn\r\n     *                  (<code>null</code> not permitted).\r\n     * @param dataArea  the area within which the data should be drawn \r\n     *                  (<code>null</code> not permitted).\r\n     * @param edge  the location of the axis (<code>null</code> not permitted).\r\n     * @param plotState  collects information about the plot \r\n     *                   (<code>null</code> permitted).\r\n     * \r\n     * @return The axis state (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.createStandardTickUnits#701",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.createStandardTickUnits()",
        "snippet": "    public static TickUnitSource createStandardTickUnits() {\n\n        TickUnits units = new TickUnits();\n        DecimalFormat df0 = new DecimalFormat(\"0.00000000\");\n        DecimalFormat df1 = new DecimalFormat(\"0.0000000\");\n        DecimalFormat df2 = new DecimalFormat(\"0.000000\");\n        DecimalFormat df3 = new DecimalFormat(\"0.00000\");\n        DecimalFormat df4 = new DecimalFormat(\"0.0000\");\n        DecimalFormat df5 = new DecimalFormat(\"0.000\");\n        DecimalFormat df6 = new DecimalFormat(\"0.00\");\n        DecimalFormat df7 = new DecimalFormat(\"0.0\");\n        DecimalFormat df8 = new DecimalFormat(\"#,##0\");\n        DecimalFormat df9 = new DecimalFormat(\"#,###,##0\");\n        DecimalFormat df10 = new DecimalFormat(\"#,###,###,##0\");\n        \n        // we can add the units in any order, the TickUnits collection will \n        // sort them...\n        units.add(new NumberTickUnit(0.0000001, df1));\n        units.add(new NumberTickUnit(0.000001, df2));\n        units.add(new NumberTickUnit(0.00001, df3));\n        units.add(new NumberTickUnit(0.0001, df4));\n        units.add(new NumberTickUnit(0.001, df5));\n        units.add(new NumberTickUnit(0.01, df6));\n        units.add(new NumberTickUnit(0.1, df7));\n        units.add(new NumberTickUnit(1, df8));\n        units.add(new NumberTickUnit(10, df8));\n        units.add(new NumberTickUnit(100, df8));\n        units.add(new NumberTickUnit(1000, df8));\n        units.add(new NumberTickUnit(10000, df8));\n        units.add(new NumberTickUnit(100000, df8));\n        units.add(new NumberTickUnit(1000000, df9));\n        units.add(new NumberTickUnit(10000000, df9));\n        units.add(new NumberTickUnit(100000000, df9));\n        units.add(new NumberTickUnit(1000000000, df10));\n        units.add(new NumberTickUnit(10000000000.0, df10));\n        units.add(new NumberTickUnit(100000000000.0, df10));\n        \n        units.add(new NumberTickUnit(0.00000025, df0));\n        units.add(new NumberTickUnit(0.0000025, df1));\n        units.add(new NumberTickUnit(0.000025, df2));\n        units.add(new NumberTickUnit(0.00025, df3));\n        units.add(new NumberTickUnit(0.0025, df4));\n        units.add(new NumberTickUnit(0.025, df5));\n        units.add(new NumberTickUnit(0.25, df6));\n        units.add(new NumberTickUnit(2.5, df7));\n        units.add(new NumberTickUnit(25, df8));\n        units.add(new NumberTickUnit(250, df8));\n        units.add(new NumberTickUnit(2500, df8));\n        units.add(new NumberTickUnit(25000, df8));\n        units.add(new NumberTickUnit(250000, df8));\n        units.add(new NumberTickUnit(2500000, df9));\n        units.add(new NumberTickUnit(25000000, df9));\n        units.add(new NumberTickUnit(250000000, df9));\n        units.add(new NumberTickUnit(2500000000.0, df10));\n        units.add(new NumberTickUnit(25000000000.0, df10));\n        units.add(new NumberTickUnit(250000000000.0, df10));\n\n        units.add(new NumberTickUnit(0.0000005, df1));\n        units.add(new NumberTickUnit(0.000005, df2));\n        units.add(new NumberTickUnit(0.00005, df3));\n        units.add(new NumberTickUnit(0.0005, df4));\n        units.add(new NumberTickUnit(0.005, df5));\n        units.add(new NumberTickUnit(0.05, df6));\n        units.add(new NumberTickUnit(0.5, df7));\n        units.add(new NumberTickUnit(5L, df8));\n        units.add(new NumberTickUnit(50L, df8));\n        units.add(new NumberTickUnit(500L, df8));\n        units.add(new NumberTickUnit(5000L, df8));\n        units.add(new NumberTickUnit(50000L, df8));\n        units.add(new NumberTickUnit(500000L, df8));\n        units.add(new NumberTickUnit(5000000L, df9));\n        units.add(new NumberTickUnit(50000000L, df9));\n        units.add(new NumberTickUnit(500000000L, df9));\n        units.add(new NumberTickUnit(5000000000L, df10));\n        units.add(new NumberTickUnit(50000000000L, df10));\n        units.add(new NumberTickUnit(500000000000L, df10));\n\n        return units;\n\n    }\n",
        "begin_line": 701,
        "end_line": 780,
        "comment": "\r\n     * Creates the standard tick units.\r\n     * <P>\r\n     * If you don't like these defaults, create your own instance of TickUnits\r\n     * and then pass it to the setStandardTickUnits() method in the\r\n     * NumberAxis class.\r\n     *\r\n     * @return The standard tick units.\r\n     * \r\n     * @see #setStandardTickUnits(TickUnitSource)\r\n     * @see #createIntegerTickUnits()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.selectAutoTickUnit#1047",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.selectAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected void selectAutoTickUnit(Graphics2D g2,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge) {\n\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            selectHorizontalAutoTickUnit(g2, dataArea, edge);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            selectVerticalAutoTickUnit(g2, dataArea, edge);\n        }\n\n    }\n",
        "begin_line": 1047,
        "end_line": 1058,
        "comment": "\r\n     * Selects an appropriate tick value for the axis.  The strategy is to\r\n     * display as many ticks as possible (selected from an array of 'standard'\r\n     * tick units) without the labels overlapping.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area defined by the axes.\r\n     * @param edge  the axis location.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.refreshTicks#1146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public List refreshTicks(Graphics2D g2, \n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            result = refreshTicksHorizontal(g2, dataArea, edge);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            result = refreshTicksVertical(g2, dataArea, edge);\n        }\n        return result;\n\n    }\n",
        "begin_line": 1146,
        "end_line": 1160,
        "comment": "\r\n     * Calculates the positions of the tick labels for the axis, storing the \r\n     * results in the tick label list (ready for drawing).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the axis state.\r\n     * @param dataArea  the area in which the plot should be drawn.\r\n     * @param edge  the location of the axis.\r\n     * \r\n     * @return A list of ticks.\r\n     *\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberAxis.hashCode#1369",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.hashCode()",
        "snippet": "    public int hashCode() {\n        if (getLabel() != null) {\n            return getLabel().hashCode();\n        }\n        else {\n            return 0;\n        }\n    }\n",
        "begin_line": 1369,
        "end_line": 1376,
        "comment": "\r\n     * Returns a hash code for this object.\r\n     * \r\n     * @return A hash code.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryTick.CategoryTick#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "signature": "org.jfree.chart.axis.CategoryTick.CategoryTick(java.lang.Comparable, org.jfree.chart.text.TextBlock, org.jfree.chart.text.TextBlockAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public CategoryTick(Comparable category,\n                        TextBlock label,\n                        TextBlockAnchor labelAnchor,\n                        TextAnchor rotationAnchor,\n                        double angle) {\n                            \n        super(\"\", TextAnchor.CENTER, rotationAnchor, angle);\n        this.category = category;\n        this.label = label;\n        this.labelAnchor = labelAnchor;\n        \n    }\n",
        "begin_line": 75,
        "end_line": 86,
        "comment": "\r\n     * Creates a new tick.\r\n     * \r\n     * @param category  the category.\r\n     * @param label  the label.\r\n     * @param labelAnchor  the label anchor.\r\n     * @param rotationAnchor  the rotation anchor.\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryTick.getCategory#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "signature": "org.jfree.chart.axis.CategoryTick.getCategory()",
        "snippet": "    public Comparable getCategory() {\n        return this.category;\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\r\n     * Returns the category.\r\n     * \r\n     * @return The category.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryTick.getLabel#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "signature": "org.jfree.chart.axis.CategoryTick.getLabel()",
        "snippet": "    public TextBlock getLabel() {\n        return this.label;\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\r\n     * Returns the label.\r\n     * \r\n     * @return The label.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelWidthType.CategoryLabelWidthType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.CategoryLabelWidthType(java.lang.String)",
        "snippet": "    private CategoryLabelWidthType(String name) {\n        if (name == null) {\n            throw new IllegalArgumentException(\"Null 'name' argument.\");   \n        }\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 79,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPositions.createUpRotationLabelPositions#149",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(double)",
        "snippet": "    public static CategoryLabelPositions createUpRotationLabelPositions(\n            double angle) {\n        return new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.BOTTOM_LEFT, \n                TextAnchor.BOTTOM_LEFT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.TOP_RIGHT, \n                TextAnchor.TOP_RIGHT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.BOTTOM_RIGHT, \n                TextAnchor.BOTTOM_RIGHT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.TOP_LEFT, \n                TextAnchor.TOP_LEFT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ) // RIGHT\n        );\n    }\n",
        "begin_line": 149,
        "end_line": 173,
        "comment": "\r\n     * Creates a new instance where the category labels angled upwards by the \r\n     * specified amount.\r\n     * \r\n     * @param angle  the rotation angle (should be < Math.PI / 2.0).\r\n     * \r\n     * @return A category label position specification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPositions.createDownRotationLabelPositions#183",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions(double)",
        "snippet": "    public static CategoryLabelPositions createDownRotationLabelPositions(\n            double angle) {\n        return new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.BOTTOM_RIGHT, \n                TextAnchor.BOTTOM_RIGHT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.TOP_LEFT, \n                TextAnchor.TOP_LEFT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.TOP_RIGHT, \n                TextAnchor.TOP_RIGHT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.BOTTOM_LEFT, \n                TextAnchor.BOTTOM_LEFT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ) // RIGHT\n        );\n    }\n",
        "begin_line": 183,
        "end_line": 207,
        "comment": "\r\n     * Creates a new instance where the category labels angled downwards by the\r\n     * specified amount.\r\n     * \r\n     * @param angle  the rotation angle (should be < Math.PI / 2.0).\r\n     * \r\n     * @return A category label position specification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPositions.CategoryLabelPositions#255",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.CategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition)",
        "snippet": "    public CategoryLabelPositions(CategoryLabelPosition top,\n                                  CategoryLabelPosition bottom,\n                                  CategoryLabelPosition left,\n                                  CategoryLabelPosition right) {\n        \n        if (top == null) {\n            throw new IllegalArgumentException(\"Null 'top' argument.\");\n        }\n        if (bottom == null) {\n            throw new IllegalArgumentException(\"Null 'bottom' argument.\");\n        }\n        if (left == null) {\n            throw new IllegalArgumentException(\"Null 'left' argument.\");\n        }\n        if (right == null) {\n            throw new IllegalArgumentException(\"Null 'right' argument.\");\n        }\n        \n        this.positionForAxisAtTop = top;\n        this.positionForAxisAtBottom = bottom;\n        this.positionForAxisAtLeft = left;\n        this.positionForAxisAtRight = right;\n    \n    }\n",
        "begin_line": 255,
        "end_line": 278,
        "comment": "\r\n     * Creates a new position specification.\r\n     * \r\n     * @param top  the label position info used when an axis is at the top \r\n     *             (<code>null</code> not permitted).\r\n     * @param bottom  the label position info used when an axis is at the \r\n     *                bottom (<code>null</code> not permitted).\r\n     * @param left  the label position info used when an axis is at the left \r\n     *              (<code>null</code> not permitted).\r\n     * @param right  the label position info used when an axis is at the right \r\n     *               (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPositions.getLabelPosition#288",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.getLabelPosition(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public CategoryLabelPosition getLabelPosition(RectangleEdge edge) {\n        CategoryLabelPosition result = null;\n        if (edge == RectangleEdge.TOP) {\n            result = this.positionForAxisAtTop;\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            result = this.positionForAxisAtBottom;\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            result = this.positionForAxisAtLeft;\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            result = this.positionForAxisAtRight;\n        }\n        return result;\n    }\n",
        "begin_line": 288,
        "end_line": 303,
        "comment": "\r\n     * Returns the category label position specification for an axis at the \r\n     * given location.\r\n     * \r\n     * @param edge  the axis location.\r\n     * \r\n     * @return The category label position specification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPosition.CategoryLabelPosition#103",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.CategoryLabelPosition(org.jfree.chart.util.RectangleAnchor, org.jfree.chart.text.TextBlockAnchor)",
        "snippet": "    public CategoryLabelPosition(RectangleAnchor categoryAnchor, \n                                 TextBlockAnchor labelAnchor) {\n        // argument checking delegated...\n        this(categoryAnchor, labelAnchor, TextAnchor.CENTER, 0.0, \n                CategoryLabelWidthType.CATEGORY, 0.95f);\n    }\n",
        "begin_line": 103,
        "end_line": 108,
        "comment": "\r\n     * Creates a new category label position record.\r\n     * \r\n     * @param categoryAnchor  the category anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param labelAnchor  the label anchor (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPosition.CategoryLabelPosition#120",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.CategoryLabelPosition(org.jfree.chart.util.RectangleAnchor, org.jfree.chart.text.TextBlockAnchor, org.jfree.chart.axis.CategoryLabelWidthType, float)",
        "snippet": "    public CategoryLabelPosition(RectangleAnchor categoryAnchor, \n                                 TextBlockAnchor labelAnchor,\n                                 CategoryLabelWidthType widthType,\n                                 float widthRatio) {\n        // argument checking delegated...\n        this(categoryAnchor, labelAnchor, TextAnchor.CENTER, 0.0, widthType, \n                widthRatio);\n    }\n",
        "begin_line": 120,
        "end_line": 127,
        "comment": "\r\n     * Creates a new category label position record.\r\n     * \r\n     * @param categoryAnchor  the category anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param labelAnchor  the label anchor (<code>null</code> not permitted).\r\n     * @param widthType  the width type (<code>null</code> not permitted).\r\n     * @param widthRatio  the maximum label width as a percentage (of the \r\n     *                    category space or the range space).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPosition.CategoryLabelPosition#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.CategoryLabelPosition(org.jfree.chart.util.RectangleAnchor, org.jfree.chart.text.TextBlockAnchor, org.jfree.chart.text.TextAnchor, double, org.jfree.chart.axis.CategoryLabelWidthType, float)",
        "snippet": "    public CategoryLabelPosition(RectangleAnchor categoryAnchor, \n                                 TextBlockAnchor labelAnchor,\n                                 TextAnchor rotationAnchor,\n                                 double angle,\n                                 CategoryLabelWidthType widthType,\n                                 float widthRatio) {\n        \n        if (categoryAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'categoryAnchor' argument.\");\n        }\n        if (labelAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'labelAnchor' argument.\");\n        }\n        if (rotationAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'rotationAnchor' argument.\");\n        }\n        if (widthType == null) {\n            throw new IllegalArgumentException(\"Null 'widthType' argument.\");   \n        }\n        \n        this.categoryAnchor = categoryAnchor;\n        this.labelAnchor = labelAnchor;\n        this.rotationAnchor = rotationAnchor;\n        this.angle = angle;\n        this.widthType = widthType;\n        this.widthRatio = widthRatio;\n    \n    }\n",
        "begin_line": 145,
        "end_line": 175,
        "comment": "\r\n     * Creates a new position record.  The item label anchor is a point \r\n     * relative to the data item (dot, bar or other visual item) on a chart.  \r\n     * The item label is aligned by aligning the text anchor with the item \r\n     * label anchor.\r\n     * \r\n     * @param categoryAnchor  the category anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param labelAnchor  the label anchor (<code>null</code> not permitted).\r\n     * @param rotationAnchor  the rotation anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param angle  the rotation angle (<code>null</code> not permitted).\r\n     * @param widthType  the width type (<code>null</code> not permitted).\r\n     * @param widthRatio  the maximum label width as a percentage (of the \r\n     *                    category space or the range space).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPosition.getCategoryAnchor#182",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getCategoryAnchor()",
        "snippet": "    public RectangleAnchor getCategoryAnchor() {\n        return this.categoryAnchor;\n    }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\r\n     * Returns the item label anchor.\r\n     * \r\n     * @return The item label anchor (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPosition.getLabelAnchor#191",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getLabelAnchor()",
        "snippet": "    public TextBlockAnchor getLabelAnchor() {\n        return this.labelAnchor;\n    }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\r\n     * Returns the text block anchor.\r\n     * \r\n     * @return The text block anchor (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPosition.getRotationAnchor#200",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getRotationAnchor()",
        "snippet": "    public TextAnchor getRotationAnchor() {\n        return this.rotationAnchor;\n    }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\r\n     * Returns the rotation anchor point.\r\n     * \r\n     * @return The rotation anchor point (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPosition.getAngle#209",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getAngle()",
        "snippet": "    public double getAngle() {\n        return this.angle;\n    }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\r\n     * Returns the angle of rotation for the label.\r\n     * \r\n     * @return The angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPosition.getWidthType#218",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getWidthType()",
        "snippet": "    public CategoryLabelWidthType getWidthType() {\n        return this.widthType;   \n    }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\r\n     * Returns the width calculation type.\r\n     * \r\n     * @return The width calculation type (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryLabelPosition.getWidthRatio#227",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getWidthRatio()",
        "snippet": "    public float getWidthRatio() {\n        return this.widthRatio;   \n    }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\r\n     * Returns the ratio used to calculate the maximum category label width.\r\n     * \r\n     * @return The ratio.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.CategoryAxis#195",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.CategoryAxis(java.lang.String)",
        "snippet": "    public CategoryAxis(String label) {\n\n        super(label);\n\n        this.lowerMargin = DEFAULT_AXIS_MARGIN;\n        this.upperMargin = DEFAULT_AXIS_MARGIN;\n        this.categoryMargin = DEFAULT_CATEGORY_MARGIN;\n        this.maximumCategoryLabelLines = 1;\n        this.maximumCategoryLabelWidthRatio = 0.0f;\n        \n        setTickMarksVisible(false);  // not supported by this axis type yet\n        \n        this.categoryLabelPositionOffset = 4;\n        this.categoryLabelPositions = CategoryLabelPositions.STANDARD;\n        this.tickLabelFontMap = new HashMap();\n        this.tickLabelPaintMap = new HashMap();\n        this.categoryLabelToolTips = new HashMap();\n        \n    }\n",
        "begin_line": 195,
        "end_line": 213,
        "comment": "\r\n     * Constructs a category axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.getLowerMargin#223",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getLowerMargin()",
        "snippet": "    public double getLowerMargin() {\n        return this.lowerMargin;\n    }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\r\n     * Returns the lower margin for the axis.\r\n     *\r\n     * @return The margin.\r\n     * \r\n     * @see #getUpperMargin()\r\n     * @see #setLowerMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.getUpperMargin#249",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getUpperMargin()",
        "snippet": "    public double getUpperMargin() {\n        return this.upperMargin;\n    }\n",
        "begin_line": 249,
        "end_line": 251,
        "comment": "\r\n     * Returns the upper margin for the axis.\r\n     *\r\n     * @return The margin.\r\n     * \r\n     * @see #getLowerMargin()\r\n     * @see #setUpperMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.getCategoryMargin#274",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getCategoryMargin()",
        "snippet": "    public double getCategoryMargin() {\n        return this.categoryMargin;\n    }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": "\r\n     * Returns the category margin.\r\n     *\r\n     * @return The margin.\r\n     * \r\n     * @see #setCategoryMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.getTickLabelFont#403",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getTickLabelFont(java.lang.Comparable)",
        "snippet": "    public Font getTickLabelFont(Comparable category) {\n        if (category == null) {\n            throw new IllegalArgumentException(\"Null 'category' argument.\");\n        }\n        Font result = (Font) this.tickLabelFontMap.get(category);\n        // if there is no specific font, use the general one...\n        if (result == null) {\n            result = getTickLabelFont();\n        }\n        return result;\n    }\n",
        "begin_line": 403,
        "end_line": 413,
        "comment": "\r\n     * Returns the font for the tick label for the given category.\r\n     * \r\n     * @param category  the category (<code>null</code> not permitted).\r\n     * \r\n     * @return The font (never <code>null</code>).\r\n     * \r\n     * @see #setTickLabelFont(Comparable, Font)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.getTickLabelPaint#446",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getTickLabelPaint(java.lang.Comparable)",
        "snippet": "    public Paint getTickLabelPaint(Comparable category) {\n        if (category == null) {\n            throw new IllegalArgumentException(\"Null 'category' argument.\");\n        }\n        Paint result = (Paint) this.tickLabelPaintMap.get(category);\n        // if there is no specific paint, use the general one...\n        if (result == null) {\n            result = getTickLabelPaint();\n        }\n        return result;\n    }\n",
        "begin_line": 446,
        "end_line": 456,
        "comment": "\r\n     * Returns the paint for the tick label for the given category.\r\n     * \r\n     * @param category  the category (<code>null</code> not permitted).\r\n     * \r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @see #setTickLabelPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.getCategoryStart#588",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getCategoryStart(int, int, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public double getCategoryStart(int category, int categoryCount, \n                                   Rectangle2D area,\n                                   RectangleEdge edge) {\n\n        double result = 0.0;\n        if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) {\n            result = area.getX() + area.getWidth() * getLowerMargin();\n        }\n        else if ((edge == RectangleEdge.LEFT) \n                || (edge == RectangleEdge.RIGHT)) {\n            result = area.getMinY() + area.getHeight() * getLowerMargin();\n        }\n\n        double categorySize = calculateCategorySize(categoryCount, area, edge);\n        double categoryGapWidth = calculateCategoryGapSize(categoryCount, area,\n                edge);\n\n        result = result + category * (categorySize + categoryGapWidth);\n        return result;\n        \n    }\n",
        "begin_line": 588,
        "end_line": 608,
        "comment": "\r\n     * Returns the starting coordinate for the specified category.\r\n     *\r\n     * @param category  the category.\r\n     * @param categoryCount  the number of categories.\r\n     * @param area  the data area.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The coordinate.\r\n     * \r\n     * @see #getCategoryMiddle(int, int, Rectangle2D, RectangleEdge)\r\n     * @see #getCategoryEnd(int, int, Rectangle2D, RectangleEdge)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.getCategoryEnd#644",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getCategoryEnd(int, int, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public double getCategoryEnd(int category, int categoryCount, \n                                 Rectangle2D area, RectangleEdge edge) {\n\n        return getCategoryStart(category, categoryCount, area, edge)\n               + calculateCategorySize(categoryCount, area, edge);\n\n    }\n",
        "begin_line": 644,
        "end_line": 650,
        "comment": "\r\n     * Returns the end coordinate for the specified category.\r\n     *\r\n     * @param category  the category.\r\n     * @param categoryCount  the number of categories.\r\n     * @param area  the data area.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The coordinate.\r\n     * \r\n     * @see #getCategoryStart(int, int, Rectangle2D, RectangleEdge)\r\n     * @see #getCategoryMiddle(int, int, Rectangle2D, RectangleEdge)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.calculateCategorySize#662",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.calculateCategorySize(int, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected double calculateCategorySize(int categoryCount, Rectangle2D area,\n                                           RectangleEdge edge) {\n\n        double result = 0.0;\n        double available = 0.0;\n\n        if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) {\n            available = area.getWidth();\n        }\n        else if ((edge == RectangleEdge.LEFT) \n                || (edge == RectangleEdge.RIGHT)) {\n            available = area.getHeight();\n        }\n        if (categoryCount > 1) {\n            result = available * (1 - getLowerMargin() - getUpperMargin() \n                     - getCategoryMargin());\n            result = result / categoryCount;\n        }\n        else {\n            result = available * (1 - getLowerMargin() - getUpperMargin());\n        }\n        return result;\n\n    }\n",
        "begin_line": 662,
        "end_line": 685,
        "comment": "\r\n     * Calculates the size (width or height, depending on the location of the \r\n     * axis) of a category.\r\n     *\r\n     * @param categoryCount  the number of categories.\r\n     * @param area  the area within which the categories will be drawn.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The category size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.calculateCategoryGapSize#697",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.calculateCategoryGapSize(int, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected double calculateCategoryGapSize(int categoryCount, \n                                              Rectangle2D area,\n                                              RectangleEdge edge) {\n\n        double result = 0.0;\n        double available = 0.0;\n\n        if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) {\n            available = area.getWidth();\n        }\n        else if ((edge == RectangleEdge.LEFT) \n                || (edge == RectangleEdge.RIGHT)) {\n            available = area.getHeight();\n        }\n\n        if (categoryCount > 1) {\n            result = available * getCategoryMargin() / (categoryCount - 1);\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 697,
        "end_line": 718,
        "comment": "\r\n     * Calculates the size (width or height, depending on the location of the \r\n     * axis) of a category gap.\r\n     *\r\n     * @param categoryCount  the number of categories.\r\n     * @param area  the area within which the categories will be drawn.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The category gap width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.reserveSpace#731",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.reserveSpace(java.awt.Graphics2D, org.jfree.chart.plot.Plot, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisSpace)",
        "snippet": "    public AxisSpace reserveSpace(Graphics2D g2, Plot plot, \n                                  Rectangle2D plotArea, \n                                  RectangleEdge edge, AxisSpace space) {\n\n        // create a new space object if one wasn't supplied...\n        if (space == null) {\n            space = new AxisSpace();\n        }\n        \n        // if the axis is not visible, no additional space is required...\n        if (!isVisible()) {\n            return space;\n        }\n\n        // calculate the max size of the tick labels (if visible)...\n        double tickLabelHeight = 0.0;\n        double tickLabelWidth = 0.0;\n        if (isTickLabelsVisible()) {\n            g2.setFont(getTickLabelFont());\n            AxisState state = new AxisState();\n            // we call refresh ticks just to get the maximum width or height\n            refreshTicks(g2, state, plotArea, edge);\n            if (edge == RectangleEdge.TOP) {\n                tickLabelHeight = state.getMax();\n            }\n            else if (edge == RectangleEdge.BOTTOM) {\n                tickLabelHeight = state.getMax();\n            }\n            else if (edge == RectangleEdge.LEFT) {\n                tickLabelWidth = state.getMax(); \n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                tickLabelWidth = state.getMax(); \n            }\n        }\n        \n        // get the axis label size and update the space object...\n        Rectangle2D labelEnclosure = getLabelEnclosure(g2, edge);\n        double labelHeight = 0.0;\n        double labelWidth = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            labelHeight = labelEnclosure.getHeight();\n            space.add(labelHeight + tickLabelHeight \n                    + this.categoryLabelPositionOffset, edge);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            labelWidth = labelEnclosure.getWidth();\n            space.add(labelWidth + tickLabelWidth \n                    + this.categoryLabelPositionOffset, edge);\n        }\n        return space;\n\n    }\n",
        "begin_line": 731,
        "end_line": 783,
        "comment": "\r\n     * Estimates the space required for the axis, given a specific drawing area.\r\n     *\r\n     * @param g2  the graphics device (used to obtain font information).\r\n     * @param plot  the plot that the axis belongs to.\r\n     * @param plotArea  the area within which the axis should be drawn.\r\n     * @param edge  the axis location (top or bottom).\r\n     * @param space  the space already reserved.\r\n     *\r\n     * @return The space required to draw the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.configure#788",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.configure()",
        "snippet": "    public void configure() {\n        // nothing required\n    }\n",
        "begin_line": 788,
        "end_line": 790,
        "comment": "\r\n     * Configures the axis against the current plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.draw#808",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public AxisState draw(Graphics2D g2, \n                          double cursor, \n                          Rectangle2D plotArea, \n                          Rectangle2D dataArea,\n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState) {\n        \n        // if the axis is not visible, don't draw it...\n        if (!isVisible()) {\n            return new AxisState(cursor);\n        }\n        \n        if (isAxisLineVisible()) {\n            drawAxisLine(g2, cursor, dataArea, edge);\n        }\n\n        // draw the category labels and axis label\n        AxisState state = new AxisState(cursor);\n        state = drawCategoryLabels(g2, plotArea, dataArea, edge, state, \n                plotState);\n        state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state,\n                plotState);\n    \n        return state;\n\n    }\n",
        "begin_line": 808,
        "end_line": 833,
        "comment": "\r\n     * Draws the axis on a Java 2D graphics device (such as the screen or a \r\n     * printer).\r\n     *\r\n     * @param g2  the graphics device (<code>null</code> not permitted).\r\n     * @param cursor  the cursor location.\r\n     * @param plotArea  the area within which the axis should be drawn \r\n     *                  (<code>null</code> not permitted).\r\n     * @param dataArea  the area within which the plot is being drawn \r\n     *                  (<code>null</code> not permitted).\r\n     * @param edge  the location of the axis (<code>null</code> not permitted).\r\n     * @param plotState  collects information about the plot \r\n     *                   (<code>null</code> permitted).\r\n     * \r\n     * @return The axis state (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.drawCategoryLabels#851",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.drawCategoryLabels(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisState, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    protected AxisState drawCategoryLabels(Graphics2D g2,\n                                           Rectangle2D plotArea,\n                                           Rectangle2D dataArea,\n                                           RectangleEdge edge,\n                                           AxisState state,\n                                           PlotRenderingInfo plotState) {\n\n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n\n        if (isTickLabelsVisible()) {       \n            List ticks = refreshTicks(g2, state, plotArea, edge);       \n            state.setTicks(ticks);        \n          \n            int categoryIndex = 0;\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                \n                CategoryTick tick = (CategoryTick) iterator.next();\n                g2.setFont(getTickLabelFont(tick.getCategory()));\n                g2.setPaint(getTickLabelPaint(tick.getCategory()));\n\n                CategoryLabelPosition position \n                        = this.categoryLabelPositions.getLabelPosition(edge);\n                double x0 = 0.0;\n                double x1 = 0.0;\n                double y0 = 0.0;\n                double y1 = 0.0;\n                if (edge == RectangleEdge.TOP) {\n                    x0 = getCategoryStart(categoryIndex, ticks.size(), \n                            dataArea, edge);\n                    x1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, \n                            edge);\n                    y1 = state.getCursor() - this.categoryLabelPositionOffset;\n                    y0 = y1 - state.getMax();\n                }\n                else if (edge == RectangleEdge.BOTTOM) {\n                    x0 = getCategoryStart(categoryIndex, ticks.size(), \n                            dataArea, edge);\n                    x1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, \n                            edge); \n                    y0 = state.getCursor() + this.categoryLabelPositionOffset;\n                    y1 = y0 + state.getMax();\n                }\n                else if (edge == RectangleEdge.LEFT) {\n                    y0 = getCategoryStart(categoryIndex, ticks.size(), \n                            dataArea, edge);\n                    y1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, \n                            edge);\n                    x1 = state.getCursor() - this.categoryLabelPositionOffset;\n                    x0 = x1 - state.getMax();\n                }\n                else if (edge == RectangleEdge.RIGHT) {\n                    y0 = getCategoryStart(categoryIndex, ticks.size(), \n                            dataArea, edge);\n                    y1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, \n                            edge);\n                    x0 = state.getCursor() + this.categoryLabelPositionOffset;\n                    x1 = x0 - state.getMax();\n                }\n                Rectangle2D area = new Rectangle2D.Double(x0, y0, (x1 - x0), \n                        (y1 - y0));\n                Point2D anchorPoint = RectangleAnchor.coordinates(area, \n                        position.getCategoryAnchor());\n                TextBlock block = tick.getLabel();\n                block.draw(g2, (float) anchorPoint.getX(), \n                        (float) anchorPoint.getY(), position.getLabelAnchor(), \n                        (float) anchorPoint.getX(), (float) anchorPoint.getY(), \n                        position.getAngle());\n                Shape bounds = block.calculateBounds(g2, \n                        (float) anchorPoint.getX(), (float) anchorPoint.getY(), \n                        position.getLabelAnchor(), (float) anchorPoint.getX(), \n                        (float) anchorPoint.getY(), position.getAngle());\n                if (plotState != null && plotState.getOwner() != null) {\n                    EntityCollection entities \n                            = plotState.getOwner().getEntityCollection();\n                    if (entities != null) {\n                        String tooltip = getCategoryLabelToolTip(\n                                tick.getCategory());\n                        entities.add(new CategoryLabelEntity(tick.getCategory(),\n                                bounds, tooltip, null));\n                    }\n                }\n                categoryIndex++;\n            }\n\n            if (edge.equals(RectangleEdge.TOP)) {\n                double h = state.getMax() + this.categoryLabelPositionOffset;\n                state.cursorUp(h);\n            }\n            else if (edge.equals(RectangleEdge.BOTTOM)) {\n                double h = state.getMax() + this.categoryLabelPositionOffset;\n                state.cursorDown(h);\n            }\n            else if (edge == RectangleEdge.LEFT) {\n                double w = state.getMax() + this.categoryLabelPositionOffset;\n                state.cursorLeft(w);\n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                double w = state.getMax() + this.categoryLabelPositionOffset;\n                state.cursorRight(w);\n            }\n        }\n        return state;\n    }\n",
        "begin_line": 851,
        "end_line": 956,
        "comment": "\r\n     * Draws the category labels and returns the updated axis state.\r\n     *\r\n     * @param g2  the graphics device (<code>null</code> not permitted).\r\n     * @param plotArea  the plot area (<code>null</code> not permitted).\r\n     * @param dataArea  the area inside the axes (<code>null</code> not \r\n     *                  permitted).\r\n     * @param edge  the axis location (<code>null</code> not permitted).\r\n     * @param state  the axis state (<code>null</code> not permitted).\r\n     * @param plotState  collects information about the plot (<code>null</code>\r\n     *                   permitted).\r\n     * \r\n     * @return The updated axis state (never <code>null</code>).\r\n     * \r\n     * @since 1.0.2\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.refreshTicks#968",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public List refreshTicks(Graphics2D g2, \n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n        \n        // sanity check for data area...\n        if (dataArea.getHeight() <= 0.0 || dataArea.getWidth() < 0.0) {\n            return ticks;\n        }\n\n        CategoryPlot plot = (CategoryPlot) getPlot();\n        List categories = plot.getCategoriesForAxis(this);\n        double max = 0.0;\n                \n        if (categories != null) {\n            CategoryLabelPosition position \n                    = this.categoryLabelPositions.getLabelPosition(edge);\n            float r = this.maximumCategoryLabelWidthRatio;\n            if (r <= 0.0) {\n                r = position.getWidthRatio();   \n            }\n                  \n            float l = 0.0f;\n            if (position.getWidthType() == CategoryLabelWidthType.CATEGORY) {\n                l = (float) calculateCategorySize(categories.size(), dataArea, \n                        edge);  \n            }\n            else {\n                if (RectangleEdge.isLeftOrRight(edge)) {\n                    l = (float) dataArea.getWidth();   \n                }\n                else {\n                    l = (float) dataArea.getHeight();   \n                }\n            }\n            int categoryIndex = 0;\n            Iterator iterator = categories.iterator();\n            while (iterator.hasNext()) {\n                Comparable category = (Comparable) iterator.next();\n                TextBlock label = createLabel(category, l * r, edge, g2);\n                if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {\n                    max = Math.max(max, calculateTextBlockHeight(label, \n                            position, g2));\n                }\n                else if (edge == RectangleEdge.LEFT \n                        || edge == RectangleEdge.RIGHT) {\n                    max = Math.max(max, calculateTextBlockWidth(label, \n                            position, g2));\n                }\n                Tick tick = new CategoryTick(category, label, \n                        position.getLabelAnchor(), position.getRotationAnchor(), \n                        position.getAngle());\n                ticks.add(tick);\n                categoryIndex = categoryIndex + 1;\n            }\n        }\n        state.setMax(max);\n        return ticks;\n        \n    }\n",
        "begin_line": 968,
        "end_line": 1029,
        "comment": "\r\n     * Creates a temporary list of ticks that can be used when drawing the axis.\r\n     *\r\n     * @param g2  the graphics device (used to get font measurements).\r\n     * @param state  the axis state.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param edge  the location of the axis.\r\n     * \r\n     * @return A list of ticks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.createLabel#1041",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.createLabel(java.lang.Comparable, float, org.jfree.chart.util.RectangleEdge, java.awt.Graphics2D)",
        "snippet": "    protected TextBlock createLabel(Comparable category, float width, \n                                    RectangleEdge edge, Graphics2D g2) {\n        TextBlock label = TextUtilities.createTextBlock(category.toString(), \n                getTickLabelFont(category), getTickLabelPaint(category), width,\n                this.maximumCategoryLabelLines, new G2TextMeasurer(g2));  \n        return label; \n    }\n",
        "begin_line": 1041,
        "end_line": 1047,
        "comment": "\r\n     * Creates a label.\r\n     *\r\n     * @param category  the category.\r\n     * @param width  the available width. \r\n     * @param edge  the edge on which the axis appears.\r\n     * @param g2  the graphics device.\r\n     *\r\n     * @return A label.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAxis.hashCode#1173",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.hashCode()",
        "snippet": "    public int hashCode() {\n        if (getLabel() != null) {\n            return getLabel().hashCode();\n        }\n        else {\n            return 0;\n        }\n    }\n",
        "begin_line": 1173,
        "end_line": 1180,
        "comment": "\r\n     * Returns a hash code for this object.\r\n     * \r\n     * @return A hash code.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "CategoryAnchor.CategoryAnchor#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "signature": "org.jfree.chart.axis.CategoryAnchor.CategoryAnchor(java.lang.String)",
        "snippet": "    private CategoryAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisState.AxisState#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.AxisState()",
        "snippet": "    public AxisState() {\n        this(0.0);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\r\n     * Creates a new axis state.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisState.AxisState#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.AxisState(double)",
        "snippet": "    public AxisState(double cursor) {\n        this.cursor = cursor;\n        this.ticks = new java.util.ArrayList();\n    }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "\r\n     * Creates a new axis state.\r\n     * \r\n     * @param cursor  the cursor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisState.getCursor#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.getCursor()",
        "snippet": "    public double getCursor() {\n        return this.cursor;\n    }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\r\n     * Returns the cursor position.\r\n     * \r\n     * @return The cursor position.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisState.cursorLeft#147",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.cursorLeft(double)",
        "snippet": "    public void cursorLeft(double units) {\n        this.cursor = this.cursor - units;\n    }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\r\n     * Moves the cursor left by the specified number of Java 2D units.\r\n     * \r\n     * @param units  the units.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisState.getTicks#165",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.getTicks()",
        "snippet": "    public List getTicks() {\n        return this.ticks;\n    }\n",
        "begin_line": 165,
        "end_line": 167,
        "comment": "\r\n     * Returns the list of ticks.\r\n     * \r\n     * @return The list of ticks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisState.setTicks#174",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.setTicks(java.util.List)",
        "snippet": "    public void setTicks(List ticks) {\n        this.ticks = ticks;\n    }\n",
        "begin_line": 174,
        "end_line": 176,
        "comment": "\r\n     * Sets the list of ticks.\r\n     * \r\n     * @param ticks  the ticks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisState.getMax#183",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.getMax()",
        "snippet": "    public double getMax() {\n        return this.max;\n    }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\r\n     * Returns the maximum width/height.\r\n     * \r\n     * @return The maximum width/height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisState.setMax#192",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.setMax(double)",
        "snippet": "    public void setMax(double max) {\n        this.max = max;\n    }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\r\n     * Sets the maximum width/height.\r\n     * \r\n     * @param max the maximum width/height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisSpace.AxisSpace#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "signature": "org.jfree.chart.axis.AxisSpace.AxisSpace()",
        "snippet": "    public AxisSpace() {\n        this.top = 0.0;\n        this.bottom = 0.0;\n        this.left = 0.0;\n        this.right = 0.0;\n    }\n",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\r\n     * Creates a new axis space record.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisSpace.add#166",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "signature": "org.jfree.chart.axis.AxisSpace.add(double, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public void add(double space, RectangleEdge edge) {\n        if (edge == null) {\n            throw new IllegalArgumentException(\"Null 'edge' argument.\");\n        }\n        if (edge == RectangleEdge.TOP) {     \n            this.top += space;\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            this.bottom += space;\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            this.left += space;\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            this.right += space;\n        }\n        else {\n            throw new IllegalStateException(\"Unrecognised 'edge' argument.\");\n        }\n    }\n",
        "begin_line": 166,
        "end_line": 185,
        "comment": "\r\n     * Adds space to the top, bottom, left or right edge of the plot area.\r\n     * \r\n     * @param space  the space (in Java2D units).\r\n     * @param edge  the edge (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisSpace.shrink#242",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "signature": "org.jfree.chart.axis.AxisSpace.shrink(java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public Rectangle2D shrink(Rectangle2D area, Rectangle2D result) {\n        if (result == null) {\n            result = new Rectangle2D.Double();\n        }\n        result.setRect(\n            area.getX() + this.left, \n            area.getY() + this.top,\n            area.getWidth() - this.left - this.right,\n            area.getHeight() - this.top - this.bottom\n        );\n        return result;\n    }\n",
        "begin_line": 242,
        "end_line": 253,
        "comment": "\r\n     * Shrinks an area by the space attributes.\r\n     * \r\n     * @param area  the area to shrink.\r\n     * @param result  an optional carrier for the result.\r\n     * \r\n     * @return The result.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisLocation.AxisLocation#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "signature": "org.jfree.chart.axis.AxisLocation.AxisLocation(java.lang.String)",
        "snippet": "    private AxisLocation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisCollection.AxisCollection#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "signature": "org.jfree.chart.axis.AxisCollection.AxisCollection()",
        "snippet": "    public AxisCollection() {\n        this.axesAtTop = new java.util.ArrayList();\n        this.axesAtBottom = new java.util.ArrayList();\n        this.axesAtLeft = new java.util.ArrayList();\n        this.axesAtRight = new java.util.ArrayList();\n    }\n",
        "begin_line": 71,
        "end_line": 76,
        "comment": "\r\n     * Creates a new empty collection.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisCollection.getAxesAtTop#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "signature": "org.jfree.chart.axis.AxisCollection.getAxesAtTop()",
        "snippet": "    public List getAxesAtTop() {\n        return this.axesAtTop;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\r\n     * Returns a list of the axes (if any) that need to be drawn at the top of \r\n     * the plot area.\r\n     * \r\n     * @return A list of axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisCollection.getAxesAtBottom#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "signature": "org.jfree.chart.axis.AxisCollection.getAxesAtBottom()",
        "snippet": "   public List getAxesAtBottom() {\n        return this.axesAtBottom;\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\r\n    * Returns a list of the axes (if any) that need to be drawn at the bottom \r\n    * of the plot area.\r\n    * \r\n    * @return A list of axes.\r\n    ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisCollection.getAxesAtLeft#104",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "signature": "org.jfree.chart.axis.AxisCollection.getAxesAtLeft()",
        "snippet": "    public List getAxesAtLeft() {\n        return this.axesAtLeft;\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\r\n     * Returns a list of the axes (if any) that need to be drawn at the left \r\n     * of the plot area.\r\n     * \r\n     * @return A list of axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisCollection.getAxesAtRight#114",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "signature": "org.jfree.chart.axis.AxisCollection.getAxesAtRight()",
        "snippet": "    public List getAxesAtRight() {\n        return this.axesAtRight;    \n    }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "\r\n    * Returns a list of the axes (if any) that need to be drawn at the right \r\n    * of the plot area.\r\n    * \r\n    * @return A list of axes.\r\n    ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisCollection.add#125",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "signature": "org.jfree.chart.axis.AxisCollection.add(org.jfree.chart.axis.Axis, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public void add(Axis axis, RectangleEdge edge) {\n        if (axis == null) {\n            throw new IllegalArgumentException(\"Null 'axis' argument.\");   \n        }\n        if (edge == null) {\n            throw new IllegalArgumentException(\"Null 'edge' argument.\");   \n        }\n        if (edge == RectangleEdge.TOP) {\n            this.axesAtTop.add(axis);\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            this.axesAtBottom.add(axis);\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            this.axesAtLeft.add(axis);\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            this.axesAtRight.add(axis);\n        }\n    }\n",
        "begin_line": 125,
        "end_line": 144,
        "comment": "\r\n     * Adds an axis to the collection.\r\n     * \r\n     * @param axis  the axis (<code>null</code> not permitted).\r\n     * @param edge  the edge of the plot that the axis should be drawn on \r\n     *              (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.Axis#273",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.Axis(java.lang.String)",
        "snippet": "    protected Axis(String label) {\n\n        this.label = label;\n        this.visible = DEFAULT_AXIS_VISIBLE;\n        this.labelFont = DEFAULT_AXIS_LABEL_FONT;\n        this.labelPaint = DEFAULT_AXIS_LABEL_PAINT;\n        this.labelInsets = DEFAULT_AXIS_LABEL_INSETS;\n        this.labelAngle = 0.0;\n        this.labelToolTip = null;\n        this.labelURL = null;\n        \n        this.axisLineVisible = true;\n        this.axisLinePaint = DEFAULT_AXIS_LINE_PAINT;\n        this.axisLineStroke = DEFAULT_AXIS_LINE_STROKE;\n        \n        this.tickLabelsVisible = DEFAULT_TICK_LABELS_VISIBLE;\n        this.tickLabelFont = DEFAULT_TICK_LABEL_FONT;\n        this.tickLabelPaint = DEFAULT_TICK_LABEL_PAINT;\n        this.tickLabelInsets = DEFAULT_TICK_LABEL_INSETS;\n        \n        this.tickMarksVisible = DEFAULT_TICK_MARKS_VISIBLE;\n        this.tickMarkStroke = DEFAULT_TICK_MARK_STROKE;\n        this.tickMarkPaint = DEFAULT_TICK_MARK_PAINT;\n        this.tickMarkInsideLength = DEFAULT_TICK_MARK_INSIDE_LENGTH;\n        this.tickMarkOutsideLength = DEFAULT_TICK_MARK_OUTSIDE_LENGTH;\n\n        this.plot = null;\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 273,
        "end_line": 303,
        "comment": "\r\n     * Constructs an axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.isVisible#313",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.isVisible()",
        "snippet": "    public boolean isVisible() {\n        return this.visible;\n    }\n",
        "begin_line": 313,
        "end_line": 315,
        "comment": "\r\n     * Returns <code>true</code> if the axis is visible, and \r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @return A boolean.\r\n     * \r\n     * @see #setVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getLabel#341",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabel()",
        "snippet": "    public String getLabel() {\n        return this.label;\n    }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "\r\n     * Returns the label for the axis.\r\n     *\r\n     * @return The label for the axis (<code>null</code> possible).\r\n     * \r\n     * @see #getLabelFont()\r\n     * @see #getLabelPaint()\r\n     * @see #setLabel(String)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getLabelFont#380",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabelFont()",
        "snippet": "    public Font getLabelFont() {\n        return this.labelFont;\n    }\n",
        "begin_line": 380,
        "end_line": 382,
        "comment": "\r\n     * Returns the font for the axis label.\r\n     *\r\n     * @return The font (never <code>null</code>).\r\n     * \r\n     * @see #setLabelFont(Font)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getLabelPaint#409",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabelPaint()",
        "snippet": "    public Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n",
        "begin_line": 409,
        "end_line": 411,
        "comment": "\r\n     * Returns the color/shade used to draw the axis label.\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @see #setLabelPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getLabelInsets#437",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabelInsets()",
        "snippet": "    public RectangleInsets getLabelInsets() {\n        return this.labelInsets;\n    }\n",
        "begin_line": 437,
        "end_line": 439,
        "comment": "\r\n     * Returns the insets for the label (that is, the amount of blank space\r\n     * that should be left around the label).\r\n     *\r\n     * @return The label insets (never <code>null</code>).\r\n     * \r\n     * @see #setLabelInsets(RectangleInsets)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getLabelAngle#466",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabelAngle()",
        "snippet": "    public double getLabelAngle() {\n        return this.labelAngle;\n    }\n",
        "begin_line": 466,
        "end_line": 468,
        "comment": "\r\n     * Returns the angle of the axis label.\r\n     *\r\n     * @return The angle (in radians).\r\n     * \r\n     * @see #setLabelAngle(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.isAxisLineVisible#548",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.isAxisLineVisible()",
        "snippet": "    public boolean isAxisLineVisible() {\n        return this.axisLineVisible;\n    }\n",
        "begin_line": 548,
        "end_line": 550,
        "comment": "\r\n     * A flag that controls whether or not the axis line is drawn.\r\n     * \r\n     * @return A boolean.\r\n     * \r\n     * @see #getAxisLinePaint()\r\n     * @see #getAxisLineStroke()\r\n     * @see #setAxisLineVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getAxisLinePaint#574",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getAxisLinePaint()",
        "snippet": "    public Paint getAxisLinePaint() {\n        return this.axisLinePaint;\n    }\n",
        "begin_line": 574,
        "end_line": 576,
        "comment": "\r\n     * Returns the paint used to draw the axis line.\r\n     * \r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @see #setAxisLinePaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getAxisLineStroke#601",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getAxisLineStroke()",
        "snippet": "    public Stroke getAxisLineStroke() {\n        return this.axisLineStroke;\n    }\n",
        "begin_line": 601,
        "end_line": 603,
        "comment": "\r\n     * Returns the stroke used to draw the axis line.\r\n     * \r\n     * @return The stroke (never <code>null</code>).\r\n     * \r\n     * @see #setAxisLineStroke(Stroke)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.isTickLabelsVisible#630",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.isTickLabelsVisible()",
        "snippet": "    public boolean isTickLabelsVisible() {\n        return this.tickLabelsVisible;\n    }\n",
        "begin_line": 630,
        "end_line": 632,
        "comment": "\r\n     * Returns a flag indicating whether or not the tick labels are visible.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #getTickLabelFont()\r\n     * @see #getTickLabelPaint()\r\n     * @see #setTickLabelsVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getTickLabelFont#661",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickLabelFont()",
        "snippet": "    public Font getTickLabelFont() {\n        return this.tickLabelFont;\n    }\n",
        "begin_line": 661,
        "end_line": 663,
        "comment": "\r\n     * Returns the font used for the tick labels (if showing).\r\n     *\r\n     * @return The font (never <code>null</code>).\r\n     * \r\n     * @see #setTickLabelFont(Font)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getTickLabelPaint#693",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickLabelPaint()",
        "snippet": "    public Paint getTickLabelPaint() {\n        return this.tickLabelPaint;\n    }\n",
        "begin_line": 693,
        "end_line": 695,
        "comment": "\r\n     * Returns the color/shade used for the tick labels.\r\n     *\r\n     * @return The paint used for the tick labels.\r\n     * \r\n     * @see #setTickLabelPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getTickLabelInsets#720",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickLabelInsets()",
        "snippet": "    public RectangleInsets getTickLabelInsets() {\n        return this.tickLabelInsets;\n    }\n",
        "begin_line": 720,
        "end_line": 722,
        "comment": "\r\n     * Returns the insets for the tick labels.\r\n     *\r\n     * @return The insets (never <code>null</code>).\r\n     * \r\n     * @see #setTickLabelInsets(RectangleInsets)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.isTickMarksVisible#751",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.isTickMarksVisible()",
        "snippet": "    public boolean isTickMarksVisible() {\n        return this.tickMarksVisible;\n    }\n",
        "begin_line": 751,
        "end_line": 753,
        "comment": "\r\n     * Returns the flag that indicates whether or not the tick marks are\r\n     * showing.\r\n     *\r\n     * @return The flag that indicates whether or not the tick marks are \r\n     *         showing.\r\n     *         \r\n     * @see #setTickMarksVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.setTickMarksVisible#763",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setTickMarksVisible(boolean)",
        "snippet": "    public void setTickMarksVisible(boolean flag) {\n        if (flag != this.tickMarksVisible) {\n            this.tickMarksVisible = flag;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n",
        "begin_line": 763,
        "end_line": 768,
        "comment": "\r\n     * Sets the flag that indicates whether or not the tick marks are showing\r\n     * and sends an {@link AxisChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     * \r\n     * @see #isTickMarksVisible()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getTickMarkInsideLength#778",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickMarkInsideLength()",
        "snippet": "    public float getTickMarkInsideLength() {\n        return this.tickMarkInsideLength;\n    }\n",
        "begin_line": 778,
        "end_line": 780,
        "comment": "\r\n     * Returns the inside length of the tick marks.\r\n     *\r\n     * @return The length.\r\n     * \r\n     * @see #getTickMarkOutsideLength()\r\n     * @see #setTickMarkInsideLength(float)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getTickMarkOutsideLength#803",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickMarkOutsideLength()",
        "snippet": "    public float getTickMarkOutsideLength() {\n        return this.tickMarkOutsideLength;\n    }\n",
        "begin_line": 803,
        "end_line": 805,
        "comment": "\r\n     * Returns the outside length of the tick marks.\r\n     *\r\n     * @return The length.\r\n     * \r\n     * @see #getTickMarkInsideLength()\r\n     * @see #setTickMarkOutsideLength(float)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getTickMarkStroke#827",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickMarkStroke()",
        "snippet": "    public Stroke getTickMarkStroke() {\n        return this.tickMarkStroke;\n    }\n",
        "begin_line": 827,
        "end_line": 829,
        "comment": "\r\n     * Returns the stroke used to draw tick marks.\r\n     *\r\n     * @return The stroke (never <code>null</code>).\r\n     * \r\n     * @see #setTickMarkStroke(Stroke)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getTickMarkPaint#856",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickMarkPaint()",
        "snippet": "    public Paint getTickMarkPaint() {\n        return this.tickMarkPaint;\n    }\n",
        "begin_line": 856,
        "end_line": 858,
        "comment": "\r\n     * Returns the paint used to draw tick marks (if they are showing).\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @see #setTickMarkPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getPlot#885",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getPlot()",
        "snippet": "    public Plot getPlot() {\n        return this.plot;\n    }\n",
        "begin_line": 885,
        "end_line": 887,
        "comment": "\r\n     * Returns the plot that the axis is assigned to.  This method will return \r\n     * <code>null</code> if the axis is not currently assigned to a plot.\r\n     *\r\n     * @return The plot that the axis is assigned to (possibly \r\n     *         <code>null</code>).\r\n     *         \r\n     * @see #setPlot(Plot)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.setPlot#898",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setPlot(org.jfree.chart.plot.Plot)",
        "snippet": "    public void setPlot(Plot plot) {\n        this.plot = plot;\n        configure();\n    }\n",
        "begin_line": 898,
        "end_line": 901,
        "comment": "\r\n     * Sets a reference to the plot that the axis is assigned to.\r\n     * <P>\r\n     * This method is used internally, you shouldn't need to call it yourself.\r\n     *\r\n     * @param plot  the plot.\r\n     * \r\n     * @see #getPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getFixedDimension#910",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getFixedDimension()",
        "snippet": "    public double getFixedDimension() {\n        return this.fixedDimension;\n    }\n",
        "begin_line": 910,
        "end_line": 912,
        "comment": "\r\n     * Returns the fixed dimension for the axis.\r\n     *\r\n     * @return The fixed dimension.\r\n     * \r\n     * @see #setFixedDimension(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.addChangeListener#999",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.addChangeListener(org.jfree.chart.event.AxisChangeListener)",
        "snippet": "    public void addChangeListener(AxisChangeListener listener) {\n        this.listenerList.add(AxisChangeListener.class, listener);\n    }\n",
        "begin_line": 999,
        "end_line": 1001,
        "comment": "\r\n     * Registers an object for notification of changes to the axis.\r\n     *\r\n     * @param listener  the object that is being registered.\r\n     * \r\n     * @see #removeChangeListener(AxisChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.notifyListeners#1034",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.notifyListeners(org.jfree.chart.event.AxisChangeEvent)",
        "snippet": "    protected void notifyListeners(AxisChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == AxisChangeListener.class) {\n                ((AxisChangeListener) listeners[i + 1]).axisChanged(event);\n            }\n        }\n\n    }\n",
        "begin_line": 1034,
        "end_line": 1043,
        "comment": "\r\n     * Notifies all registered listeners that the axis has changed.\r\n     * The AxisChangeEvent provides information about the change.\r\n     *\r\n     * @param event  information about the change to the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.getLabelEnclosure#1054",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabelEnclosure(java.awt.Graphics2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected Rectangle2D getLabelEnclosure(Graphics2D g2, RectangleEdge edge) {\n\n        Rectangle2D result = new Rectangle2D.Double();\n        String axisLabel = getLabel();\n        if (axisLabel != null && !axisLabel.equals(\"\")) {\n            FontMetrics fm = g2.getFontMetrics(getLabelFont());\n            Rectangle2D bounds = TextUtilities.getTextBounds(axisLabel, g2, fm);\n            RectangleInsets insets = getLabelInsets();\n            bounds = insets.createOutsetRectangle(bounds);\n            double angle = getLabelAngle();\n            if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {\n                angle = angle - Math.PI / 2.0;\n            }\n            double x = bounds.getCenterX();\n            double y = bounds.getCenterY();\n            AffineTransform transformer \n                = AffineTransform.getRotateInstance(angle, x, y);\n            Shape labelBounds = transformer.createTransformedShape(bounds);\n            result = labelBounds.getBounds2D();\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 1054,
        "end_line": 1077,
        "comment": "\r\n     * Returns a rectangle that encloses the axis label.  This is typically \r\n     * used for layout purposes (it gives the maximum dimensions of the label).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param edge  the edge of the plot area along which the axis is measuring.\r\n     *\r\n     * @return The enclosing rectangle.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.drawLabel#1092",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.drawLabel(java.lang.String, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisState, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    protected AxisState drawLabel(String label, Graphics2D g2, \n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n            AxisState state, PlotRenderingInfo plotState) {\n\n        // it is unlikely that 'state' will be null, but check anyway...\n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n        \n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n        Shape hotspot = null;\n        \n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) dataArea.getCenterX();\n            float labely = (float) (state.getCursor() - insets.getBottom() \n                    - h / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) dataArea.getCenterX();\n            float labely = (float) (state.getCursor() + insets.getTop() \n                    + h / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) (state.getCursor() - insets.getRight() \n                    - w / 2.0);\n            float labely = (float) dataArea.getCenterY();\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                    TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0, \n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) (state.getCursor() \n                            + insets.getLeft() + w / 2.0);\n            float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                    / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                    TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                    + insets.getRight());\n\n        }\n        if (plotState != null && hotspot != null) {\n            ChartRenderingInfo owner = plotState.getOwner();\n            if (owner != null) {\n                EntityCollection entities = owner.getEntityCollection();\n                if (entities != null) {\n                    entities.add(new AxisLabelEntity(this, hotspot, \n                            this.labelToolTip, this.labelURL));\n                }\n            }\n        }\n        return state;\n\n    }\n",
        "begin_line": 1092,
        "end_line": 1202,
        "comment": "\r\n     * Draws the axis label.\r\n     *\r\n     * @param label  the label text.\r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param edge  the location of the axis.\r\n     * @param state  the axis state (<code>null</code> not permitted).\r\n     * @param plotState  the plot state (<code>null</code> permitted).\r\n     *\r\n     * @return Information about the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "Axis.drawAxisLine#1212",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.drawAxisLine(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected void drawAxisLine(Graphics2D g2, double cursor,\n            Rectangle2D dataArea, RectangleEdge edge) {\n        \n        Line2D axisLine = null;\n        if (edge == RectangleEdge.TOP) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.LEFT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        g2.setPaint(this.axisLinePaint);\n        g2.setStroke(this.axisLineStroke);\n        g2.draw(axisLine);\n        \n    }\n",
        "begin_line": 1212,
        "end_line": 1236,
        "comment": "\r\n     * Draws an axis line at the current cursor position and edge.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param cursor  the cursor position.\r\n     * @param dataArea  the data area.\r\n     * @param edge  the edge.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItemCollection.LegendItemCollection#67",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.LegendItemCollection()",
        "snippet": "    public LegendItemCollection() {\n        this.items = new java.util.ArrayList();\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\r\n     * Constructs a new legend item collection, initially empty.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItemCollection.add#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.add(org.jfree.chart.LegendItem)",
        "snippet": "    public void add(LegendItem item) {\n        this.items.add(item);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Adds a legend item to the collection.\r\n     *\r\n     * @param item  the item to add.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItemCollection.get#96",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.get(int)",
        "snippet": "    public LegendItem get(int index) {\n        return (LegendItem) this.items.get(index);\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\r\n     * Returns a legend item from the collection.\r\n     *\r\n     * @param index  the legend item index (zero-based).\r\n     *\r\n     * @return The legend item.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItemCollection.getItemCount#105",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.items.size();\n    }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "\r\n     * Returns the number of legend items in the collection.\r\n     *\r\n     * @return The item count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.LegendItem#285",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.LegendItem(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.awt.Shape, boolean, java.awt.Paint, boolean, java.awt.Paint, java.awt.Stroke, boolean, java.awt.Shape, java.awt.Stroke, java.awt.Paint)",
        "snippet": "    public LegendItem(String label, String description,\n                      String toolTipText, String urlText,\n                      boolean shapeVisible, Shape shape,\n                      boolean shapeFilled, Paint fillPaint, \n                      boolean shapeOutlineVisible, Paint outlinePaint,\n                      Stroke outlineStroke,\n                      boolean lineVisible, Shape line,\n                      Stroke lineStroke, Paint linePaint) {\n        \n        if (label == null) {\n            throw new IllegalArgumentException(\"Null 'label' argument.\");   \n        }\n        if (fillPaint == null) {\n            throw new IllegalArgumentException(\"Null 'fillPaint' argument.\");   \n        }\n        if (lineStroke == null) {\n            throw new IllegalArgumentException(\"Null 'lineStroke' argument.\");\n        }\n        if (outlinePaint == null) {\n            throw new IllegalArgumentException(\"Null 'outlinePaint' argument.\");\n        }\n        if (outlineStroke == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'outlineStroke' argument.\");   \n        }\n        this.label = label;\n        this.attributedLabel = null;\n        this.description = description;\n        this.shapeVisible = shapeVisible;\n        this.shape = shape;\n        this.shapeFilled = shapeFilled;\n        this.fillPaint = fillPaint;\n        this.fillPaintTransformer = new StandardGradientPaintTransformer();\n        this.shapeOutlineVisible = shapeOutlineVisible;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.lineVisible = lineVisible;\n        this.line = line;\n        this.lineStroke = lineStroke;\n        this.linePaint = linePaint;\n        this.toolTipText = toolTipText;\n        this.urlText = urlText;\n    }\n",
        "begin_line": 285,
        "end_line": 327,
        "comment": "\r\n     * Creates a new legend item.\r\n     *\r\n     * @param label  the label (<code>null</code> not permitted).\r\n     * @param description  the description (not currently used, \r\n     *        <code>null</code> permitted).\r\n     * @param toolTipText  the tool tip text (<code>null</code> permitted).\r\n     * @param urlText  the URL text (<code>null</code> permitted).\r\n     * @param shapeVisible  a flag that controls whether or not the shape is \r\n     *                      displayed.\r\n     * @param shape  the shape (<code>null</code> permitted).\r\n     * @param shapeFilled  a flag that controls whether or not the shape is \r\n     *                     filled.\r\n     * @param fillPaint  the fill paint (<code>null</code> not permitted).\r\n     * @param shapeOutlineVisible  a flag that controls whether or not the \r\n     *                             shape is outlined.\r\n     * @param outlinePaint  the outline paint (<code>null</code> not permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> not \r\n     *                       permitted).\r\n     * @param lineVisible  a flag that controls whether or not the line is \r\n     *                     visible.\r\n     * @param line  the line.\r\n     * @param lineStroke  the stroke (<code>null</code> not permitted).\r\n     * @param linePaint  the line paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getDataset#508",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getDataset()",
        "snippet": "    public Dataset getDataset() {\n        return this.dataset;\n    }\n",
        "begin_line": 508,
        "end_line": 510,
        "comment": "\r\n     * Returns the dataset.\r\n     * \r\n     * @return The dataset.\r\n     * \r\n     * @since 1.0.6\r\n     * \r\n     * @see #setDatasetIndex(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.setDataset#519",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.setDataset(org.jfree.data.general.Dataset)",
        "snippet": "    public void setDataset(Dataset dataset) {\n        this.dataset = dataset;\n    }\n",
        "begin_line": 519,
        "end_line": 521,
        "comment": "\r\n     * Sets the dataset.\r\n     * \r\n     * @param dataset  the dataset.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.setDatasetIndex#546",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.setDatasetIndex(int)",
        "snippet": "    public void setDatasetIndex(int index) {\n        this.datasetIndex = index;\n    }\n",
        "begin_line": 546,
        "end_line": 548,
        "comment": "\r\n     * Sets the dataset index for this legend item.\r\n     * \r\n     * @param index  the index.\r\n     * \r\n     * @since 1.0.2\r\n     * \r\n     * @see #getDatasetIndex()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getSeriesKey#559",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getSeriesKey()",
        "snippet": "    public Comparable getSeriesKey() {\n        return this.seriesKey;\n    }\n",
        "begin_line": 559,
        "end_line": 561,
        "comment": "\r\n     * Returns the series key.\r\n     * \r\n     * @return The series key.\r\n     * \r\n     * @since 1.0.6\r\n     * \r\n     * @see #setSeriesKey(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.setSeriesKey#570",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.setSeriesKey(java.lang.Comparable)",
        "snippet": "    public void setSeriesKey(Comparable key) {\n        this.seriesKey = key;\n    }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "\r\n     * Sets the series key.\r\n     * \r\n     * @param key  the series key.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.setSeriesIndex#592",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.setSeriesIndex(int)",
        "snippet": "    public void setSeriesIndex(int index) {\n        this.series = index;\n    }\n",
        "begin_line": 592,
        "end_line": 594,
        "comment": "\r\n     * Sets the series index for this legend item.\r\n     * \r\n     * @param index  the index.\r\n     * \r\n     * @since 1.0.2\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getLabel#601",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getLabel()",
        "snippet": "    public String getLabel() {\n        return this.label;\n    }\n",
        "begin_line": 601,
        "end_line": 603,
        "comment": "\r\n     * Returns the label.\r\n     *\r\n     * @return The label (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getToolTipText#628",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getToolTipText()",
        "snippet": "    public String getToolTipText() {\n        return this.toolTipText;   \n    }\n",
        "begin_line": 628,
        "end_line": 630,
        "comment": "\r\n     * Returns the tool tip text.\r\n     * \r\n     * @return The tool tip text (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getURLText#637",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getURLText()",
        "snippet": "    public String getURLText() {\n        return this.urlText; \n    }\n",
        "begin_line": 637,
        "end_line": 639,
        "comment": "\r\n     * Returns the URL text.\r\n     * \r\n     * @return The URL text (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.isShapeVisible#646",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.isShapeVisible()",
        "snippet": "    public boolean isShapeVisible() {\n        return this.shapeVisible;\n    }\n",
        "begin_line": 646,
        "end_line": 648,
        "comment": "\r\n     * Returns a flag that indicates whether or not the shape is visible.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getShape#656",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getShape()",
        "snippet": "    public Shape getShape() {\n        return this.shape;\n    }\n",
        "begin_line": 656,
        "end_line": 658,
        "comment": "\r\n     * Returns the shape used to label the series represented by this legend \r\n     * item.\r\n     *\r\n     * @return The shape (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.isShapeFilled#665",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.isShapeFilled()",
        "snippet": "    public boolean isShapeFilled() {\n        return this.shapeFilled;\n    }\n",
        "begin_line": 665,
        "end_line": 667,
        "comment": "\r\n     * Returns a flag that controls whether or not the shape is filled.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getFillPaint#674",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getFillPaint()",
        "snippet": "    public Paint getFillPaint() {\n        return this.fillPaint;\n    }\n",
        "begin_line": 674,
        "end_line": 676,
        "comment": "\r\n     * Returns the fill paint.\r\n     *\r\n     * @return The fill paint (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.isShapeOutlineVisible#684",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.isShapeOutlineVisible()",
        "snippet": "    public boolean isShapeOutlineVisible() {\n        return this.shapeOutlineVisible;\n    }\n",
        "begin_line": 684,
        "end_line": 686,
        "comment": "\r\n     * Returns the flag that controls whether or not the shape outline\r\n     * is visible.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getLineStroke#693",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getLineStroke()",
        "snippet": "    public Stroke getLineStroke() {\n        return this.lineStroke;\n    }\n",
        "begin_line": 693,
        "end_line": 695,
        "comment": "\r\n     * Returns the line stroke for the series.\r\n     *\r\n     * @return The stroke (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getLinePaint#702",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getLinePaint()",
        "snippet": "    public Paint getLinePaint() {\n        return this.linePaint;\n    }\n",
        "begin_line": 702,
        "end_line": 704,
        "comment": "\r\n     * Returns the paint used for lines.\r\n     * \r\n     * @return The paint.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getOutlinePaint#711",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getOutlinePaint()",
        "snippet": "    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n",
        "begin_line": 711,
        "end_line": 713,
        "comment": "\r\n     * Returns the outline paint.\r\n     *\r\n     * @return The outline paint (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getOutlineStroke#720",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getOutlineStroke()",
        "snippet": "    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n",
        "begin_line": 720,
        "end_line": 722,
        "comment": "\r\n     * Returns the outline stroke.\r\n     *\r\n     * @return The outline stroke (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.isLineVisible#729",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.isLineVisible()",
        "snippet": "    public boolean isLineVisible() {\n        return this.lineVisible;\n    }\n",
        "begin_line": 729,
        "end_line": 731,
        "comment": "\r\n     * Returns a flag that indicates whether or not the line is visible.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getLine#738",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getLine()",
        "snippet": "    public Shape getLine() {\n        return this.line;\n    }\n",
        "begin_line": 738,
        "end_line": 740,
        "comment": "\r\n     * Returns the line.\r\n     * \r\n     * @return The line.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.getFillPaintTransformer#752",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getFillPaintTransformer()",
        "snippet": "    public GradientPaintTransformer getFillPaintTransformer() {\n        return this.fillPaintTransformer;\n    }\n",
        "begin_line": 752,
        "end_line": 754,
        "comment": "\r\n     * Returns the transformer used when the fill paint is an instance of \r\n     * <code>GradientPaint</code>.\r\n     * \r\n     * @return The transformer (never <code>null</code>).\r\n     * \r\n     * @since 1.0.4\r\n     * \r\n     * @see #setFillPaintTransformer(GradientPaintTransformer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "LegendItem.setFillPaintTransformer#766",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)",
        "snippet": "    public void setFillPaintTransformer(GradientPaintTransformer transformer) {\n        if (transformer == null) { \n            throw new IllegalArgumentException(\"Null 'transformer' attribute.\");\n        }\n        this.fillPaintTransformer = transformer;\n    }\n",
        "begin_line": 766,
        "end_line": 771,
        "comment": "\r\n     * Sets the transformer used when the fill paint is an instance of \r\n     * <code>GradientPaint</code>.\r\n     * \r\n     * @param transformer  the transformer (<code>null</code> not permitted).\r\n     * \r\n     * @since 1.0.4\r\n     * \r\n     * @see #getFillPaintTransformer()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "JFreeChart.JFreeChart#326",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.JFreeChart(org.jfree.chart.plot.Plot)",
        "snippet": "    public JFreeChart(Plot plot) {\n        this(null, null, plot, true);\n    }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "\r\n     * Creates a new chart based on the supplied plot.  The chart will have\r\n     * a legend added automatically, but no title (although you can easily add\r\n     * one later).  \r\n     * <br><br>\r\n     * Note that the  {@link ChartFactory} class contains a range \r\n     * of static methods that will return ready-made charts, and often this\r\n     * is a more convenient way to create charts than using this constructor.\r\n     *\r\n     * @param plot  the plot (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "JFreeChart.JFreeChart#363",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.JFreeChart(java.lang.String, java.awt.Font, org.jfree.chart.plot.Plot, boolean)",
        "snippet": "    public JFreeChart(String title, Font titleFont, Plot plot, \n                      boolean createLegend) {\n\n        if (plot == null) {\n            throw new NullPointerException(\"Null 'plot' argument.\");\n        }\n\n        // create storage for listeners...\n        this.progressListeners = new EventListenerList();\n        this.changeListeners = new EventListenerList();\n        this.notify = true;  // default is to notify listeners when the \n                             // chart changes\n\n        this.renderingHints = new RenderingHints(\n                RenderingHints.KEY_ANTIALIASING, \n                RenderingHints.VALUE_ANTIALIAS_ON);\n\n        this.borderVisible = false;\n        this.borderStroke = new BasicStroke(1.0f);\n        this.borderPaint = Color.black;\n\n        this.padding = RectangleInsets.ZERO_INSETS;\n        \n        this.plot = plot;\n        plot.addChangeListener(this);\n\n        this.subtitles = new ArrayList();\n\n        // create a legend, if requested...\n        if (createLegend) {\n            LegendTitle legend = new LegendTitle(this.plot);\n            legend.setMargin(new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n            legend.setFrame(new LineBorder());\n            legend.setBackgroundPaint(Color.white);\n            legend.setPosition(RectangleEdge.BOTTOM);\n            this.subtitles.add(legend);\n            legend.addChangeListener(this);\n        }\n\n        // add the chart title, if one has been specified...\n        if (title != null) {\n            if (titleFont == null) {\n                titleFont = DEFAULT_TITLE_FONT;\n            }\n            this.title = new TextTitle(title, titleFont);\n            this.title.addChangeListener(this);\n        }\n\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n\n        this.backgroundImage = DEFAULT_BACKGROUND_IMAGE;\n        this.backgroundImageAlignment = DEFAULT_BACKGROUND_IMAGE_ALIGNMENT;\n        this.backgroundImageAlpha = DEFAULT_BACKGROUND_IMAGE_ALPHA;\n\n    }\n",
        "begin_line": 363,
        "end_line": 417,
        "comment": "\r\n     * Creates a new chart with the given title and plot.  The \r\n     * <code>createLegend</code> argument specifies whether or not a legend\r\n     * should be added to the chart.  \r\n     * <br><br>\r\n     * Note that the  {@link ChartFactory} class contains a range \r\n     * of static methods that will return ready-made charts, and often this\r\n     * is a more convenient way to create charts than using this constructor.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param titleFont  the font for displaying the chart title \r\n     *                   (<code>null</code> permitted).\r\n     * @param plot  controller of the visual representation of the data \r\n     *              (<code>null</code> not permitted).\r\n     * @param createLegend  a flag indicating whether or not a legend should   \r\n     *                      be created for the chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "JFreeChart.isBorderVisible#456",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.isBorderVisible()",
        "snippet": "    public boolean isBorderVisible() {\n        return this.borderVisible;\n    }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": "\r\n     * Returns a flag that controls whether or not a border is drawn around the\r\n     * outside of the chart.\r\n     *\r\n     * @return A boolean.\r\n     * \r\n     * @see #setBorderVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "JFreeChart.draw#1132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)",
        "snippet": "    public void draw(Graphics2D g2, \n                     Rectangle2D chartArea, Point2D anchor, \n                     ChartRenderingInfo info) {\n\n        notifyListeners(new ChartProgressEvent(this, this, \n                ChartProgressEvent.DRAWING_STARTED, 0));\n\n        // record the chart area, if info is requested...\n        if (info != null) {\n            info.clear();\n            info.setChartArea(chartArea);\n        }\n\n        // ensure no drawing occurs outside chart area...\n        Shape savedClip = g2.getClip();\n        g2.clip(chartArea);\n\n        g2.addRenderingHints(this.renderingHints);\n\n        // draw the chart background...\n        if (this.backgroundPaint != null) {\n            g2.setPaint(this.backgroundPaint);\n            g2.fill(chartArea);\n        }\n\n        if (this.backgroundImage != null) {\n            Composite originalComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \n                    this.backgroundImageAlpha));\n            Rectangle2D dest = new Rectangle2D.Double(0.0, 0.0, \n                    this.backgroundImage.getWidth(null), \n                    this.backgroundImage.getHeight(null));\n            Align.align(dest, chartArea, this.backgroundImageAlignment);\n            g2.drawImage(this.backgroundImage, (int) dest.getX(), \n                    (int) dest.getY(), (int) dest.getWidth(), \n                    (int) dest.getHeight(), null);\n            g2.setComposite(originalComposite);\n        }\n\n        if (isBorderVisible()) {\n            Paint paint = getBorderPaint();\n            Stroke stroke = getBorderStroke();\n            if (paint != null && stroke != null) {\n                Rectangle2D borderArea = new Rectangle2D.Double(\n                        chartArea.getX(), chartArea.getY(), \n                        chartArea.getWidth() - 1.0, chartArea.getHeight() \n                        - 1.0);\n                g2.setPaint(paint);\n                g2.setStroke(stroke);\n                g2.draw(borderArea);\n            }\n        }\n\n        // draw the title and subtitles...\n        Rectangle2D nonTitleArea = new Rectangle2D.Double();\n        nonTitleArea.setRect(chartArea);\n        this.padding.trim(nonTitleArea);\n        \n        EntityCollection entities = null;\n        if (info != null) {\n            entities = info.getEntityCollection();   \n        }\n        if (this.title != null) {\n            EntityCollection e = drawTitle(this.title, g2, nonTitleArea, \n                    (entities != null));\n            if (e != null) {\n                entities.addAll(e);   \n            }\n        }\n\n        Iterator iterator = this.subtitles.iterator();\n        while (iterator.hasNext()) {\n            Title currentTitle = (Title) iterator.next();\n            EntityCollection e = drawTitle(currentTitle, g2, nonTitleArea, \n                    (entities != null));\n            if (e != null) {\n                entities.addAll(e);   \n            }\n        }\n\n        Rectangle2D plotArea = nonTitleArea;\n \n        // draw the plot (axes and data visualisation)\n        PlotRenderingInfo plotInfo = null;\n        if (info != null) {\n            plotInfo = info.getPlotInfo();\n        }\n        this.plot.draw(g2, plotArea, anchor, null, plotInfo);\n\n        g2.setClip(savedClip);\n\n        notifyListeners(new ChartProgressEvent(this, this, \n                ChartProgressEvent.DRAWING_FINISHED, 100));\n    }\n",
        "begin_line": 1132,
        "end_line": 1225,
        "comment": "\r\n     * Draws the chart on a Java 2D graphics device (such as the screen or a\r\n     * printer).\r\n     * <P>\r\n     * This method is the focus of the entire JFreeChart library.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param chartArea  the area within which the chart should be drawn.\r\n     * @param anchor  the anchor point (in Java2D space) for the chart \r\n     *                (<code>null</code> permitted).\r\n     * @param info  records info about the drawing (null means collect no info).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "JFreeChart.createAlignedRectangle2D#1237",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.createAlignedRectangle2D(org.jfree.chart.util.Size2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment)",
        "snippet": "    private Rectangle2D createAlignedRectangle2D(Size2D dimensions, \n            Rectangle2D frame, HorizontalAlignment hAlign, \n            VerticalAlignment vAlign) {\n        double x = Double.NaN;\n        double y = Double.NaN;\n        if (hAlign == HorizontalAlignment.LEFT) {\n            x = frame.getX();   \n        }\n        else if (hAlign == HorizontalAlignment.CENTER) {\n            x = frame.getCenterX() - (dimensions.width / 2.0);   \n        }\n        else if (hAlign == HorizontalAlignment.RIGHT) {\n            x = frame.getMaxX() - dimensions.width;   \n        }\n        if (vAlign == VerticalAlignment.TOP) {\n            y = frame.getY();   \n        }\n        else if (vAlign == VerticalAlignment.CENTER) {\n            y = frame.getCenterY() - (dimensions.height / 2.0);   \n        }\n        else if (vAlign == VerticalAlignment.BOTTOM) {\n            y = frame.getMaxY() - dimensions.height;   \n        }\n        \n        return new Rectangle2D.Double(x, y, dimensions.width, \n                dimensions.height);\n    }\n",
        "begin_line": 1237,
        "end_line": 1263,
        "comment": "\r\n     * Creates a rectangle that is aligned to the frame.\r\n     * \r\n     * @param dimensions\r\n     * @param frame\r\n     * @param hAlign\r\n     * @param vAlign\r\n     * \r\n     * @return A rectangle.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "JFreeChart.drawTitle#1279",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.drawTitle(org.jfree.chart.title.Title, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)",
        "snippet": "    protected EntityCollection drawTitle(Title t, Graphics2D g2, \n                                         Rectangle2D area, boolean entities) {\n\n        if (t == null) {\n            throw new IllegalArgumentException(\"Null 't' argument.\");   \n        }\n        if (area == null) {\n            throw new IllegalArgumentException(\"Null 'area' argument.\");   \n        }\n        Rectangle2D titleArea = new Rectangle2D.Double();\n        RectangleEdge position = t.getPosition();\n        double ww = area.getWidth();\n        if (ww <= 0.0) {\n            return null;\n        }\n        double hh = area.getHeight();\n        if (hh <= 0.0) {\n            return null;\n        }\n        RectangleConstraint constraint = new RectangleConstraint(ww, \n                new Range(0.0, ww), LengthConstraintType.RANGE, hh, \n                new Range(0.0, hh), LengthConstraintType.RANGE);\n        Object retValue = null;\n        BlockParams p = new BlockParams();\n        p.setGenerateEntities(entities);\n        if (position == RectangleEdge.TOP) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    t.getHorizontalAlignment(), VerticalAlignment.TOP);\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX(), Math.min(area.getY() + size.height, \n                    area.getMaxY()), area.getWidth(), Math.max(area.getHeight()\n                    - size.height, 0));\n        }\n        else if (position == RectangleEdge.BOTTOM) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    t.getHorizontalAlignment(), VerticalAlignment.BOTTOM);\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX(), area.getY(), area.getWidth(), \n                    area.getHeight() - size.height);\n        }\n        else if (position == RectangleEdge.RIGHT) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    HorizontalAlignment.RIGHT, t.getVerticalAlignment());\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX(), area.getY(), area.getWidth() \n                    - size.width, area.getHeight());\n        }\n\n        else if (position == RectangleEdge.LEFT) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    HorizontalAlignment.LEFT, t.getVerticalAlignment());\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX() + size.width, area.getY(), area.getWidth() \n                    - size.width, area.getHeight());\n        }\n        else {\n            throw new RuntimeException(\"Unrecognised title position.\");\n        }\n        EntityCollection result = null;\n        if (retValue instanceof EntityBlockResult) {\n            EntityBlockResult ebr = (EntityBlockResult) retValue;\n            result = ebr.getEntityCollection();\n        }\n        return result;   \n    }\n",
        "begin_line": 1279,
        "end_line": 1347,
        "comment": "\r\n     * Draws a title.  The title should be drawn at the top, bottom, left or \r\n     * right of the specified area, and the area should be updated to reflect \r\n     * the amount of space used by the title.\r\n     *\r\n     * @param t  the title (<code>null</code> not permitted).\r\n     * @param g2  the graphics device (<code>null</code> not permitted).\r\n     * @param area  the chart area, excluding any existing titles \r\n     *              (<code>null</code> not permitted).\r\n     * @param entities  a flag that controls whether or not an entity \r\n     *                  collection is returned for the title.\r\n     * \r\n     * @return An entity collection for the title (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "JFreeChart.createBufferedImage#1371",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.createBufferedImage(int, int, org.jfree.chart.ChartRenderingInfo)",
        "snippet": "    public BufferedImage createBufferedImage(int width, int height, \n                                             ChartRenderingInfo info) {\n        return createBufferedImage(width, height, BufferedImage.TYPE_INT_RGB, \n                info);\n    }\n",
        "begin_line": 1371,
        "end_line": 1375,
        "comment": "\r\n     * Creates and returns a buffered image into which the chart has been drawn.\r\n     *\r\n     * @param width  the width.\r\n     * @param height  the height.\r\n     * @param info  carries back chart state information (<code>null</code> \r\n     *              permitted).\r\n     *\r\n     * @return A buffered image.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "JFreeChart.createBufferedImage#1388",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.createBufferedImage(int, int, int, org.jfree.chart.ChartRenderingInfo)",
        "snippet": "    public BufferedImage createBufferedImage(int width, int height, \n                                             int imageType, \n                                             ChartRenderingInfo info) {\n        BufferedImage image = new BufferedImage(width, height, imageType);\n        Graphics2D g2 = image.createGraphics();\n        draw(g2, new Rectangle2D.Double(0, 0, width, height), null, info);\n        g2.dispose();\n        return image;\n    }\n",
        "begin_line": 1388,
        "end_line": 1396,
        "comment": "\r\n     * Creates and returns a buffered image into which the chart has been drawn.\r\n     *\r\n     * @param width  the width.\r\n     * @param height  the height.\r\n     * @param imageType  the image type.\r\n     * @param info  carries back chart state information (<code>null</code> \r\n     *              permitted).\r\n     *\r\n     * @return A buffered image.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "JFreeChart.notifyListeners#1537",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartProgressEvent)",
        "snippet": "    protected void notifyListeners(ChartProgressEvent event) {\n\n        Object[] listeners = this.progressListeners.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == ChartProgressListener.class) {\n                ((ChartProgressListener) listeners[i + 1]).chartProgress(event);\n            }\n        }\n\n    }\n",
        "begin_line": 1537,
        "end_line": 1546,
        "comment": "\r\n     * Sends a {@link ChartProgressEvent} to all registered listeners.\r\n     *\r\n     * @param event  information about the event that triggered the \r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ChartColor.createDefaultPaintArray#151",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "class_name": "org.jfree.chart.ChartColor",
        "signature": "org.jfree.chart.ChartColor.createDefaultPaintArray()",
        "snippet": "    public static Paint[] createDefaultPaintArray() {\n\n        return new Paint[] {\n            new Color(0xFF, 0x55, 0x55),\n            new Color(0x55, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0x55),\n            new Color(0xFF, 0xFF, 0x55),\n            new Color(0xFF, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0xFF),\n            Color.pink,\n            Color.gray,\n            ChartColor.DARK_RED,\n            ChartColor.DARK_BLUE,\n            ChartColor.DARK_GREEN,\n            ChartColor.DARK_YELLOW,\n            ChartColor.DARK_MAGENTA,\n            ChartColor.DARK_CYAN,\n            Color.darkGray,\n            ChartColor.LIGHT_RED,\n            ChartColor.LIGHT_BLUE,\n            ChartColor.LIGHT_GREEN,\n            ChartColor.LIGHT_YELLOW,\n            ChartColor.LIGHT_MAGENTA,\n            ChartColor.LIGHT_CYAN,\n            Color.lightGray,\n            ChartColor.VERY_DARK_RED,\n            ChartColor.VERY_DARK_BLUE,\n            ChartColor.VERY_DARK_GREEN,\n            ChartColor.VERY_DARK_YELLOW,\n            ChartColor.VERY_DARK_MAGENTA,\n            ChartColor.VERY_DARK_CYAN,\n            ChartColor.VERY_LIGHT_RED,\n            ChartColor.VERY_LIGHT_BLUE,\n            ChartColor.VERY_LIGHT_GREEN,\n            ChartColor.VERY_LIGHT_YELLOW,\n            ChartColor.VERY_LIGHT_MAGENTA,\n            ChartColor.VERY_LIGHT_CYAN\n        };\n    }\n",
        "begin_line": 151,
        "end_line": 189,
        "comment": "\r\n     * Convenience method to return an array of <code>Paint</code> objects that\r\n     * represent the pre-defined colors in the <code>Color<code> and \r\n     * <code>ChartColor</code> objects.\r\n     *\r\n     * @return An array of objects with the <code>Paint</code> interface.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8944
        },
        "num_failing_tests": 4
    },
    {
        "name": "ChartChangeEventType.ChartChangeEventType#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String)",
        "snippet": "    private ChartChangeEventType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 4
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#70",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object)",
        "snippet": "    public ChartChangeEvent(Object source) {\n        this(source, null, ChartChangeEventType.GENERAL);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, \r\n     *                an axis etc.)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 4
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public ChartChangeEvent(Object source, JFreeChart chart, \n                            ChartChangeEventType type) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 93,
        "end_line": 98,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an\r\n                      axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 4
    },
    {
        "name": "StatisticalBarRenderer.drawHorizontalItem#230",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        "signature": "org.jfree.chart.renderer.category.StatisticalBarRenderer.drawHorizontalItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.statistics.StatisticalCategoryDataset, int, int)",
        "snippet": "    protected void drawHorizontalItem(Graphics2D g2,\n                                      CategoryItemRendererState state,\n                                      Rectangle2D dataArea,\n                                      CategoryPlot plot,\n                                      CategoryAxis domainAxis,\n                                      ValueAxis rangeAxis,\n                                      StatisticalCategoryDataset dataset,\n                                      int row,\n                                      int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        // BAR Y\n        double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                dataArea, xAxisLocation);\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectY = rectY + row * state.getBarWidth();\n        }\n\n        // BAR X\n        Number meanValue = dataset.getMeanValue(row, column);\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n            if (value >= uclip) {\n                return; // bar is not visible\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else { // cases 9, 10, 11 and 12\n            if (value <= lclip) {\n                return; // bar is not visible\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n                yAxisLocation);\n        double rectX = Math.min(transY2, transY1);\n\n        double rectHeight = state.getBarWidth();\n        double rectWidth = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n                rectHeight);\n        Paint seriesPaint = getItemPaint(row, column);\n        g2.setPaint(seriesPaint);\n        g2.fill(bar);\n        if (isDrawBarOutline() && state.getBarWidth() > 3) {\n            g2.setStroke(getItemStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        // standard deviation lines\n            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);  \n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));   \n            }\n        \n            Line2D line = null;\n            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, \n                                     highVal, rectY + rectHeight / 2.0d);\n            g2.draw(line);\n            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, \n                                     highVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n                                     lowVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n        \n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n                    (value < 0.0));\n        }        \n\n        // add an item entity, if this information is being collected\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n\n    }\n",
        "begin_line": 230,
        "end_line": 358,
        "comment": "\r\n     * Draws an item for a plot with a horizontal orientation.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the data area.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the data.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setOrientation#546",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setOrientation(org.jfree.chart.plot.PlotOrientation)",
        "snippet": "    public void setOrientation(PlotOrientation orientation) {\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        this.orientation = orientation;\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 546,
        "end_line": 552,
        "comment": "\r\n     * Sets the orientation for the plot and sends a {@link PlotChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param orientation  the orientation (<code>null</code> not permitted).\r\n     * \r\n     * @see #getOrientation()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.findMaximumTickLabelHeight#815",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.findMaximumTickLabelHeight(java.util.List, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)",
        "snippet": "    protected double findMaximumTickLabelHeight(List ticks,\n                                                Graphics2D g2, \n                                                Rectangle2D drawArea, \n                                                boolean vertical) {\n                                                    \n        RectangleInsets insets = getTickLabelInsets();\n        Font font = getTickLabelFont();\n        double maxHeight = 0.0;\n        if (vertical) {\n            FontMetrics fm = g2.getFontMetrics(font);\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                Tick tick = (Tick) iterator.next();\n                Rectangle2D labelBounds = TextUtilities.getTextBounds(\n                        tick.getText(), g2, fm);\n                if (labelBounds.getWidth() + insets.getTop() \n                        + insets.getBottom() > maxHeight) {\n                    maxHeight = labelBounds.getWidth() \n                                + insets.getTop() + insets.getBottom();\n                }\n            }\n        }\n        else {\n            LineMetrics metrics = font.getLineMetrics(\"ABCxyz\", \n                    g2.getFontRenderContext());\n            maxHeight = metrics.getHeight() \n                        + insets.getTop() + insets.getBottom();\n        }\n        return maxHeight;\n        \n    }\n",
        "begin_line": 815,
        "end_line": 845,
        "comment": "\r\n     * A utility method for determining the height of the tallest tick label.\r\n     *\r\n     * @param ticks  the ticks.\r\n     * @param g2  the graphics device.\r\n     * @param drawArea  the area within which the plot and axes should be drawn.\r\n     * @param vertical  a flag that indicates whether or not the tick labels \r\n     *                  are 'vertical'.\r\n     *\r\n     * @return The height of the tallest tick label.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.estimateMaximumTickLabelWidth#999",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.estimateMaximumTickLabelWidth(java.awt.Graphics2D, org.jfree.chart.axis.TickUnit)",
        "snippet": "    protected double estimateMaximumTickLabelWidth(Graphics2D g2, \n                                                   TickUnit unit) {\n\n        RectangleInsets tickLabelInsets = getTickLabelInsets();\n        double result = tickLabelInsets.getLeft() + tickLabelInsets.getRight();\n\n        if (isVerticalTickLabels()) {\n            // all tick labels have the same width (equal to the height of the \n            // font)...\n            FontRenderContext frc = g2.getFontRenderContext();\n            LineMetrics lm = getTickLabelFont().getLineMetrics(\"0\", frc);\n            result += lm.getHeight();\n        }\n        else {\n            // look at lower and upper bounds...\n            FontMetrics fm = g2.getFontMetrics(getTickLabelFont());\n            Range range = getRange();\n            double lower = range.getLowerBound();\n            double upper = range.getUpperBound();\n            String lowerStr = \"\";\n            String upperStr = \"\";\n            NumberFormat formatter = getNumberFormatOverride();\n            if (formatter != null) {\n                lowerStr = formatter.format(lower);\n                upperStr = formatter.format(upper);\n            }\n            else {\n                lowerStr = unit.valueToString(lower);\n                upperStr = unit.valueToString(upper);                \n            }\n            double w1 = fm.stringWidth(lowerStr);\n            double w2 = fm.stringWidth(upperStr);\n            result += Math.max(w1, w2);\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 999,
        "end_line": 1036,
        "comment": "\r\n     * Estimates the maximum width of the tick labels, assuming the specified \r\n     * tick unit is used.\r\n     * <P>\r\n     * Rather than computing the string bounds of every tick on the axis, we \r\n     * just look at two values: the lower bound and the upper bound for the \r\n     * axis.  These two values will usually be representative.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param unit  the tick unit to use for calculation.\r\n     *\r\n     * @return The estimated maximum width of the tick labels.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.selectHorizontalAutoTickUnit#1069",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.selectHorizontalAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "   protected void selectHorizontalAutoTickUnit(Graphics2D g2,\n                                               Rectangle2D dataArea,\n                                               RectangleEdge edge) {\n\n        double tickLabelWidth = estimateMaximumTickLabelWidth(\n            g2, getTickUnit()\n        );\n\n        // start with the current tick unit...\n        TickUnitSource tickUnits = getStandardTickUnits();\n        TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit());\n        double unit1Width = lengthToJava2D(unit1.getSize(), dataArea, edge);\n\n        // then extrapolate...\n        double guess = (tickLabelWidth / unit1Width) * unit1.getSize();\n\n        NumberTickUnit unit2 \n            = (NumberTickUnit) tickUnits.getCeilingTickUnit(guess);\n        double unit2Width = lengthToJava2D(unit2.getSize(), dataArea, edge);\n\n        tickLabelWidth = estimateMaximumTickLabelWidth(g2, unit2);\n        if (tickLabelWidth > unit2Width) {\n            unit2 = (NumberTickUnit) tickUnits.getLargerTickUnit(unit2);\n        }\n\n        setTickUnit(unit2, false, false);\n\n    }\n",
        "begin_line": 1069,
        "end_line": 1096,
        "comment": "\r\n     * Selects an appropriate tick value for the axis.  The strategy is to\r\n     * display as many ticks as possible (selected from an array of 'standard'\r\n     * tick units) without the labels overlapping.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area defined by the axes.\r\n     * @param edge  the axis location.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.refreshTicksHorizontal#1172",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.refreshTicksHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected List refreshTicksHorizontal(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n        \n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n                TextAnchor anchor = null;\n                TextAnchor rotationAnchor = null;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n\n                Tick tick = new NumberTick(new Double(currentTickValue), \n                        tickLabel, anchor, rotationAnchor, angle);\n                result.add(tick);\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 1172,
        "end_line": 1231,
        "comment": "\r\n     * Calculates the positions of the tick labels for the axis, storing the \r\n     * results in the tick label list (ready for drawing).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the data should be drawn.\r\n     * @param edge  the location of the axis.\r\n     * \r\n     * @return A list of ticks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAxis.calculateTextBlockWidth#1058",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.calculateTextBlockWidth(org.jfree.chart.text.TextBlock, org.jfree.chart.axis.CategoryLabelPosition, java.awt.Graphics2D)",
        "snippet": "    protected double calculateTextBlockWidth(TextBlock block, \n                                             CategoryLabelPosition position, \n                                             Graphics2D g2) {\n                                                    \n        RectangleInsets insets = getTickLabelInsets();\n        Size2D size = block.calculateDimensions(g2);\n        Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(), \n                size.getHeight());\n        Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(),\n                0.0f, 0.0f);\n        double w = rotatedBox.getBounds2D().getWidth() + insets.getTop() \n                + insets.getBottom();\n        return w;\n        \n    }\n",
        "begin_line": 1058,
        "end_line": 1072,
        "comment": "\r\n     * A utility method for determining the width of a text block.\r\n     *\r\n     * @param block  the text block.\r\n     * @param position  the position.\r\n     * @param g2  the graphics device.\r\n     *\r\n     * @return The width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "AxisState.cursorUp#129",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.cursorUp(double)",
        "snippet": "    public void cursorUp(double units) {\n        this.cursor = this.cursor - units;\n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\r\n     * Moves the cursor up by the specified number of Java 2D units.\r\n     * \r\n     * @param units  the units.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrokeList.StrokeList#59",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.StrokeList()",
        "snippet": "    public StrokeList() {\n        super();\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "StandardGradientPaintTransformer.StandardGradientPaintTransformer#70",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StandardGradientPaintTransformer.java",
        "class_name": "org.jfree.chart.util.StandardGradientPaintTransformer",
        "signature": "org.jfree.chart.util.StandardGradientPaintTransformer.StandardGradientPaintTransformer()",
        "snippet": "    public StandardGradientPaintTransformer() {\n        this(GradientPaintTransformType.VERTICAL);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Creates a new transformer with the type \n     * {@link GradientPaintTransformType#VERTICAL}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "StandardGradientPaintTransformer.StandardGradientPaintTransformer#79",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StandardGradientPaintTransformer.java",
        "class_name": "org.jfree.chart.util.StandardGradientPaintTransformer",
        "signature": "org.jfree.chart.util.StandardGradientPaintTransformer.StandardGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformType)",
        "snippet": "    public StandardGradientPaintTransformer(GradientPaintTransformType type) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Null 'type' argument.\");\n        }\n        this.type = type;\n    }\n",
        "begin_line": 79,
        "end_line": 84,
        "comment": "\n     * Creates a new transformer with the specified type.\n     * \n     * @param type  the transform type (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "ShapeList.ShapeList#59",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.ShapeList()",
        "snippet": "    public ShapeList() {\n        super();\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "PaintList.PaintList#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.PaintList()",
        "snippet": "    public PaintList() {\n        super();\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectList.ObjectList#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.ObjectList()",
        "snippet": "    public ObjectList() {\n    }\n",
        "begin_line": 60,
        "end_line": 61,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "GradientPaintTransformType.GradientPaintTransformType#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.GradientPaintTransformType(java.lang.String)",
        "snippet": "    private GradientPaintTransformType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "BooleanList.BooleanList#62",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "class_name": "org.jfree.chart.util.BooleanList",
        "signature": "org.jfree.chart.util.BooleanList.BooleanList()",
        "snippet": "    public BooleanList() {\n    }\n",
        "begin_line": 62,
        "end_line": 63,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList()",
        "snippet": "    protected AbstractObjectList() {\n        this(DEFAULT_INITIAL_CAPACITY);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Creates a new list with the default initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity) {\n        this (initialCapacity, initialCapacity);\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity, int increment) {\n        this.objects = new Object[initialCapacity];\n        this.increment = increment;\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\n     * Creates a new list.\n     * \n     * @param initialCapacity  the initial capacity.\n     * @param increment  the increment.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractObjectList.size#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.size()",
        "snippet": "    public int size() {\n        return this.size;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Returns the size of the list.\n     *\n     * @return The size of the list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextAnchor.TextAnchor#126",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String)",
        "snippet": "    private TextAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "StatisticalBarRenderer.StatisticalBarRenderer#114",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        "signature": "org.jfree.chart.renderer.category.StatisticalBarRenderer.StatisticalBarRenderer()",
        "snippet": "    public StatisticalBarRenderer() {\n        super();\n        this.errorIndicatorPaint = Color.gray;\n        this.errorIndicatorStroke = new BasicStroke(0.5f);\n    }\n",
        "begin_line": 114,
        "end_line": 118,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "BarRenderer.BarRenderer#194",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.BarRenderer()",
        "snippet": "    public BarRenderer() {\n        super();\n        this.base = 0.0;\n        this.includeBaseInRange = true;\n        this.itemMargin = DEFAULT_ITEM_MARGIN;\n        this.drawBarOutline = false;\n        this.maximumBarWidth = 1.0;  \n            // 100 percent, so it will not apply unless changed\n        this.positiveItemLabelPositionFallback = null;\n        this.negativeItemLabelPositionFallback = null;\n        this.gradientPaintTransformer = new StandardGradientPaintTransformer();\n        this.minimumBarLength = 0.0;\n    }\n",
        "begin_line": 194,
        "end_line": 206,
        "comment": "\r\n     * Creates a new bar renderer with default settings.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractCategoryItemRenderer.AbstractCategoryItemRenderer#230",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.AbstractCategoryItemRenderer()",
        "snippet": "    protected AbstractCategoryItemRenderer() {\n        this.itemLabelGeneratorList = new ObjectList();\n        this.toolTipGeneratorList = new ObjectList();\n        this.urlGeneratorList = new ObjectList();\n        this.legendItemLabelGenerator\n                = new StandardCategorySeriesLabelGenerator();\n        this.backgroundAnnotations = new ArrayList();\n        this.foregroundAnnotations = new ArrayList();\n    }\n",
        "begin_line": 230,
        "end_line": 238,
        "comment": "\r\n     * Creates a new renderer with no tool tip generator and no URL generator.\r\n     * The defaults (no tool tip or URL generators) have been chosen to\r\n     * minimise the processing required to generate a default chart.  If you\r\n     * require tool tips or URLs, then you can easily add the required\r\n     * generators.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractRenderer.AbstractRenderer#313",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.AbstractRenderer()",
        "snippet": "    public AbstractRenderer() {\n\n        this.seriesVisibleList = new BooleanList();\n        this.baseSeriesVisible = true;\n\n        this.seriesVisibleInLegendList = new BooleanList();\n        this.baseSeriesVisibleInLegend = true;\n\n        this.paintList = new PaintList();\n        this.basePaint = DEFAULT_PAINT;\n        this.autoPopulateSeriesPaint = true;\n\n        this.fillPaintList = new PaintList();\n        this.baseFillPaint = Color.white;\n        this.autoPopulateSeriesFillPaint = false;\n\n        this.outlinePaintList = new PaintList();\n        this.baseOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.autoPopulateSeriesOutlinePaint = false;\n\n        this.strokeList = new StrokeList();\n        this.baseStroke = DEFAULT_STROKE;\n        this.autoPopulateSeriesStroke = false;\n\n        this.outlineStrokeList = new StrokeList();\n        this.baseOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.autoPopulateSeriesOutlineStroke = false;\n\n        this.shapeList = new ShapeList();\n        this.baseShape = DEFAULT_SHAPE;\n        this.autoPopulateSeriesShape = true;\n\n        this.itemLabelsVisibleList = new BooleanList();\n        this.baseItemLabelsVisible = false;\n\n        this.itemLabelFontList = new ObjectList();\n        this.baseItemLabelFont = new Font(\"SansSerif\", Font.PLAIN, 10);\n\n        this.itemLabelPaintList = new PaintList();\n        this.baseItemLabelPaint = Color.black;\n\n        this.positiveItemLabelPositionList = new ObjectList();\n        this.basePositiveItemLabelPosition = new ItemLabelPosition(\n                ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER);\n        \n        this.negativeItemLabelPositionList = new ObjectList();\n        this.baseNegativeItemLabelPosition = new ItemLabelPosition(\n                ItemLabelAnchor.OUTSIDE6, TextAnchor.TOP_CENTER);\n\n        this.createEntitiesList = new BooleanList();\n        this.baseCreateEntities = true;\n        \n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 313,
        "end_line": 367,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator()",
        "snippet": "    public StandardCategorySeriesLabelGenerator() {\n        this(DEFAULT_LABEL_FORMAT);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Creates a default series label generator (uses \r\n     * {@link #DEFAULT_LABEL_FORMAT}).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator(java.lang.String)",
        "snippet": "    public StandardCategorySeriesLabelGenerator(String format) {\n        if (format == null) {\n            throw new IllegalArgumentException(\"Null 'format' argument.\");\n        }\n        this.formatPattern = format;\n    }\n",
        "begin_line": 83,
        "end_line": 88,
        "comment": "\r\n     * Creates a new series label generator.\r\n     * \r\n     * @param format  the format pattern (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "ItemLabelPosition.ItemLabelPosition#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor)",
        "snippet": "    public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor, \n                             TextAnchor textAnchor) {\n        this(itemLabelAnchor, textAnchor, TextAnchor.CENTER, 0.0);    \n    }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "\r\n     * Creates a new position record (with zero rotation).\r\n     * \r\n     * @param itemLabelAnchor  the item label anchor (<code>null</code> not \r\n     *                         permitted).\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "ItemLabelPosition.ItemLabelPosition#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor, \n                             TextAnchor textAnchor,\n                             TextAnchor rotationAnchor,\n                             double angle) {\n              \n        if (itemLabelAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'itemLabelAnchor' argument.\");\n        }\n        if (textAnchor == null) {\n            throw new IllegalArgumentException(\"Null 'textAnchor' argument.\");\n        }\n        if (rotationAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'rotationAnchor' argument.\");\n        }\n        \n        this.itemLabelAnchor = itemLabelAnchor;\n        this.textAnchor = textAnchor;\n        this.rotationAnchor = rotationAnchor;\n        this.angle = angle;\n    \n    }\n",
        "begin_line": 108,
        "end_line": 130,
        "comment": "\r\n     * Creates a new position record.  The item label anchor is a point \r\n     * relative to the data item (dot, bar or other visual item) on a chart.  \r\n     * The item label is aligned by aligning the text anchor with the \r\n     * item label anchor.\r\n     * \r\n     * @param itemLabelAnchor  the item label anchor (<code>null</code> not \r\n     *                         permitted).\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     * @param rotationAnchor  the rotation anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "ItemLabelAnchor.ItemLabelAnchor#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.ItemLabelAnchor(java.lang.String)",
        "snippet": "    private ItemLabelAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 4
    },
    {
        "name": "StatisticalBarRenderer.drawVerticalItem#373",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        "signature": "org.jfree.chart.renderer.category.StatisticalBarRenderer.drawVerticalItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.statistics.StatisticalCategoryDataset, int, int)",
        "snippet": "    protected void drawVerticalItem(Graphics2D g2,\n                                    CategoryItemRendererState state,\n                                    Rectangle2D dataArea,\n                                    CategoryPlot plot,\n                                    CategoryAxis domainAxis,\n                                    ValueAxis rangeAxis,\n                                    StatisticalCategoryDataset dataset,\n                                    int row,\n                                    int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        // BAR X\n        double rectX = domainAxis.getCategoryStart(\n            column, getColumnCount(), dataArea, xAxisLocation\n        );\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectX = rectX + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectX = rectX + row * state.getBarWidth();\n        }\n\n        // BAR Y\n        Number meanValue = dataset.getMeanValue(row, column);\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n            if (value >= uclip) {\n                return; // bar is not visible\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else { // cases 9, 10, 11 and 12\n            if (value <= lclip) {\n                return; // bar is not visible\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n                yAxisLocation);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth = state.getBarWidth();\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n                rectHeight);\n        Paint seriesPaint = getItemPaint(row, column);\n        g2.setPaint(seriesPaint);\n        g2.fill(bar);\n        if (isDrawBarOutline() && state.getBarWidth() > 3) {\n            g2.setStroke(getItemStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        // standard deviation lines\n            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);  \n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));   \n            }\n            Line2D line = null;\n            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal,\n                                     rectX + rectWidth / 2.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, lowVal);\n            g2.draw(line);\n        \n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n                    (value < 0.0));\n        }        \n\n        // add an item entity, if this information is being collected\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n",
        "begin_line": 373,
        "end_line": 500,
        "comment": "\r\n     * Draws an item for a plot with a vertical orientation.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the data area.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the data.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.findMaximumTickLabelWidth#858",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.findMaximumTickLabelWidth(java.util.List, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)",
        "snippet": "    protected double findMaximumTickLabelWidth(List ticks, \n                                               Graphics2D g2, \n                                               Rectangle2D drawArea, \n                                               boolean vertical) {\n                                                   \n        RectangleInsets insets = getTickLabelInsets();\n        Font font = getTickLabelFont();\n        double maxWidth = 0.0;\n        if (!vertical) {\n            FontMetrics fm = g2.getFontMetrics(font);\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                Tick tick = (Tick) iterator.next();\n                Rectangle2D labelBounds = TextUtilities.getTextBounds(\n                        tick.getText(), g2, fm);\n                if (labelBounds.getWidth() + insets.getLeft() \n                        + insets.getRight() > maxWidth) {\n                    maxWidth = labelBounds.getWidth() \n                               + insets.getLeft() + insets.getRight();\n                }\n            }\n        }\n        else {\n            LineMetrics metrics = font.getLineMetrics(\"ABCxyz\", \n                    g2.getFontRenderContext());\n            maxWidth = metrics.getHeight() \n                       + insets.getTop() + insets.getBottom();\n        }\n        return maxWidth;\n        \n    }\n",
        "begin_line": 858,
        "end_line": 888,
        "comment": "\r\n     * A utility method for determining the width of the widest tick label.\r\n     *\r\n     * @param ticks  the ticks.\r\n     * @param g2  the graphics device.\r\n     * @param drawArea  the area within which the plot and axes should be drawn.\r\n     * @param vertical  a flag that indicates whether or not the tick labels \r\n     *                  are 'vertical'.\r\n     *\r\n     * @return The width of the tallest tick label.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.estimateMaximumTickLabelHeight#974",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.estimateMaximumTickLabelHeight(java.awt.Graphics2D)",
        "snippet": "    protected double estimateMaximumTickLabelHeight(Graphics2D g2) {\n\n        RectangleInsets tickLabelInsets = getTickLabelInsets();\n        double result = tickLabelInsets.getTop() + tickLabelInsets.getBottom();\n        \n        Font tickLabelFont = getTickLabelFont();\n        FontRenderContext frc = g2.getFontRenderContext();\n        result += tickLabelFont.getLineMetrics(\"123\", frc).getHeight();\n        return result;\n        \n    }\n",
        "begin_line": 974,
        "end_line": 984,
        "comment": "\r\n     * Estimates the maximum tick label height.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The maximum height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.selectVerticalAutoTickUnit#1107",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.selectVerticalAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected void selectVerticalAutoTickUnit(Graphics2D g2, \n                                              Rectangle2D dataArea, \n                                              RectangleEdge edge) {\n\n        double tickLabelHeight = estimateMaximumTickLabelHeight(g2);\n\n        // start with the current tick unit...\n        TickUnitSource tickUnits = getStandardTickUnits();\n        TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit());\n        double unitHeight = lengthToJava2D(unit1.getSize(), dataArea, edge);\n\n        // then extrapolate...\n        double guess = (tickLabelHeight / unitHeight) * unit1.getSize();\n        \n        NumberTickUnit unit2 \n            = (NumberTickUnit) tickUnits.getCeilingTickUnit(guess);\n        double unit2Height = lengthToJava2D(unit2.getSize(), dataArea, edge);\n\n        tickLabelHeight = estimateMaximumTickLabelHeight(g2);\n        if (tickLabelHeight > unit2Height) {\n            unit2 = (NumberTickUnit) tickUnits.getLargerTickUnit(unit2);\n        }\n\n        setTickUnit(unit2, false, false);\n\n    }\n",
        "begin_line": 1107,
        "end_line": 1132,
        "comment": "\r\n     * Selects an appropriate tick value for the axis.  The strategy is to\r\n     * display as many ticks as possible (selected from an array of 'standard'\r\n     * tick units) without the labels overlapping.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the plot should be drawn.\r\n     * @param edge  the axis location.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberAxis.refreshTicksVertical#1244",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.refreshTicksVertical(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected List refreshTicksVertical(Graphics2D g2,\n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n        result.clear();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n\n                TextAnchor anchor = null;\n                TextAnchor rotationAnchor = null;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    if (edge == RectangleEdge.LEFT) { \n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n\n                Tick tick = new NumberTick(\n                    new Double(currentTickValue), tickLabel, anchor, \n                    rotationAnchor, angle\n                );\n                result.add(tick);\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 1244,
        "end_line": 1308,
        "comment": "\r\n     * Calculates the positions of the tick labels for the axis, storing the \r\n     * results in the tick label list (ready for drawing).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the plot should be drawn.\r\n     * @param edge  the location of the axis.\r\n     * \r\n     * @return A list of ticks.\r\n     *\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAxis.calculateTextBlockHeight#1083",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.calculateTextBlockHeight(org.jfree.chart.text.TextBlock, org.jfree.chart.axis.CategoryLabelPosition, java.awt.Graphics2D)",
        "snippet": "    protected double calculateTextBlockHeight(TextBlock block, \n                                              CategoryLabelPosition position, \n                                              Graphics2D g2) {\n                                                    \n        RectangleInsets insets = getTickLabelInsets();\n        Size2D size = block.calculateDimensions(g2);\n        Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(), \n                size.getHeight());\n        Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(),\n                0.0f, 0.0f);\n        double h = rotatedBox.getBounds2D().getHeight() \n                   + insets.getTop() + insets.getBottom();\n        return h;\n        \n    }\n",
        "begin_line": 1083,
        "end_line": 1097,
        "comment": "\r\n     * A utility method for determining the height of a text block.\r\n     *\r\n     * @param block  the text block.\r\n     * @param position  the label position.\r\n     * @param g2  the graphics device.\r\n     *\r\n     * @return The height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "AxisState.cursorDown#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.cursorDown(double)",
        "snippet": "    public void cursorDown(double units) {\n        this.cursor = this.cursor + units;\n    }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\r\n     * Moves the cursor down by the specified number of Java 2D units.\r\n     * \r\n     * @param units  the units.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "TickUnits.getLargerTickUnit#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.getLargerTickUnit(org.jfree.chart.axis.TickUnit)",
        "snippet": "    public TickUnit getLargerTickUnit(TickUnit unit) {\n\n        int index = Collections.binarySearch(this.tickUnits, unit);\n        if (index >= 0) {\n            index = index + 1;\n        }\n        else {\n            index = -index;\n        }\n\n        return (TickUnit) this.tickUnits.get(Math.min(index, \n                this.tickUnits.size() - 1));\n\n    }\n",
        "begin_line": 130,
        "end_line": 143,
        "comment": "\r\n     * Returns a tick unit that is larger than the supplied unit.\r\n     *\r\n     * @param unit   the unit.\r\n     *\r\n     * @return A tick unit that is larger than the supplied unit.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    }
]