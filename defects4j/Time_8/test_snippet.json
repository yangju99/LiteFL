[
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-d407f6c9-cf8d-4f6d-bfdd-3e56136acab0.getPermissions(java.security.CodeSource)",
        "snippet": "            public PermissionCollection getPermissions(CodeSource codesource) {\n                Permissions p = new Permissions();\n                p.add(new AllPermission());  // enable everything\n                return p;\n            }\n",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 108,col 17)-(line 108,col 50)",
            "(line 109,col 17)-(line 109,col 43)",
            "(line 110,col 17)-(line 110,col 25)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-b1a45cdd-f985-45cc-bc01-7d61a2378811.refresh()",
        "snippet": "            public void refresh() {\n            }\n",
        "begin_line": 112,
        "end_line": 113,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-11cbb49e-b40d-49cf-97bb-7a3eb52a8e6e.implies(java.security.ProtectionDomain, java.security.Permission)",
        "snippet": "            public boolean implies(ProtectionDomain domain, Permission permission) {\n                if (permission instanceof JodaTimePermission) {\n                    return false;\n                }\n                return true;\n//                return super.implies(domain, permission);\n            }\n",
        "begin_line": 114,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 115,col 17)-(line 117,col 17)",
            "(line 118,col 17)-(line 118,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-e427a5c9-2cf0-4d3c-a1e6-f85945dc04c9.getPermissions(java.security.CodeSource)",
        "snippet": "            public PermissionCollection getPermissions(CodeSource codesource) {\n                Permissions p = new Permissions();\n                p.add(new AllPermission());  // enable everything\n                return p;\n            }\n",
        "begin_line": 123,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 124,col 17)-(line 124,col 50)",
            "(line 125,col 17)-(line 125,col 43)",
            "(line 126,col 17)-(line 126,col 25)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-45eea3cc-e028-4e0a-8a44-2b5f322b3165.refresh()",
        "snippet": "            public void refresh() {\n            }\n",
        "begin_line": 128,
        "end_line": 129,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestDateTimeZone.class);\n    }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.TestDateTimeZone(java.lang.String)",
        "snippet": "    public TestDateTimeZone(String name) {\n        super(name);\n    }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        locale = Locale.getDefault();\n        zone = DateTimeZone.getDefault();\n        Locale.setDefault(Locale.UK);\n    }\n",
        "begin_line": 148,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 37)",
            "(line 150,col 9)-(line 150,col 41)",
            "(line 151,col 9)-(line 151,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        Locale.setDefault(locale);\n        DateTimeZone.setDefault(zone);\n    }\n",
        "begin_line": 154,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 34)",
            "(line 156,col 9)-(line 156,col 38)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testDefault()",
        "snippet": "    public void testDefault() {\n        assertNotNull(DateTimeZone.getDefault());\n        \n        DateTimeZone.setDefault(PARIS);\n        assertSame(PARIS, DateTimeZone.getDefault());\n        \n        try {\n            DateTimeZone.setDefault(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 160,
        "end_line": 170,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 49)",
            "(line 163,col 9)-(line 163,col 39)",
            "(line 164,col 9)-(line 164,col 53)",
            "(line 166,col 9)-(line 169,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testDefaultSecurity()",
        "snippet": "    public void testDefaultSecurity() {\n        if (OLD_JDK) {\n            return;\n        }\n        try {\n            Policy.setPolicy(RESTRICT);\n            System.setSecurityManager(new SecurityManager());\n            DateTimeZone.setDefault(PARIS);\n            fail();\n        } catch (SecurityException ex) {\n            // ok\n        } finally {\n            System.setSecurityManager(null);\n            Policy.setPolicy(ALLOW);\n        }\n    }\n",
        "begin_line": 172,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 175,col 9)",
            "(line 176,col 9)-(line 186,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForID_String()",
        "snippet": "    public void testForID_String() {\n        assertEquals(DateTimeZone.getDefault(), DateTimeZone.forID((String) null));\n        \n        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n        assertEquals(\"Europe/London\", zone.getID());\n        \n        zone = DateTimeZone.forID(\"UTC\");\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forID(\"+00:00\");\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forID(\"+00\");\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forID(\"+01:23\");\n        assertEquals(\"+01:23\", zone.getID());\n        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n                zone.getOffset(TEST_TIME_SUMMER));\n        \n        zone = DateTimeZone.forID(\"-02:00\");\n        assertEquals(\"-02:00\", zone.getID());\n        assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR),\n                zone.getOffset(TEST_TIME_SUMMER));\n        \n        zone = DateTimeZone.forID(\"-07:05:34.0\");\n        assertEquals(\"-07:05:34\", zone.getID());\n        assertEquals((-7L * DateTimeConstants.MILLIS_PER_HOUR) +\n                    (-5L * DateTimeConstants.MILLIS_PER_MINUTE) +\n                    (-34L * DateTimeConstants.MILLIS_PER_SECOND),\n                    zone.getOffset(TEST_TIME_SUMMER));\n        \n        try {\n            DateTimeZone.forID(\"SST\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forID(\"europe/london\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forID(\"Europe/UK\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forID(\"+\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forID(\"+0\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 190,
        "end_line": 242,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 83)",
            "(line 193,col 9)-(line 193,col 64)",
            "(line 194,col 9)-(line 194,col 52)",
            "(line 196,col 9)-(line 196,col 41)",
            "(line 197,col 9)-(line 197,col 43)",
            "(line 199,col 9)-(line 199,col 44)",
            "(line 200,col 9)-(line 200,col 43)",
            "(line 202,col 9)-(line 202,col 41)",
            "(line 203,col 9)-(line 203,col 43)",
            "(line 205,col 9)-(line 205,col 44)",
            "(line 206,col 9)-(line 206,col 45)",
            "(line 207,col 9)-(line 208,col 50)",
            "(line 210,col 9)-(line 210,col 44)",
            "(line 211,col 9)-(line 211,col 45)",
            "(line 212,col 9)-(line 213,col 50)",
            "(line 215,col 9)-(line 215,col 49)",
            "(line 216,col 9)-(line 216,col 48)",
            "(line 217,col 9)-(line 220,col 54)",
            "(line 222,col 9)-(line 225,col 48)",
            "(line 226,col 9)-(line 229,col 48)",
            "(line 230,col 9)-(line 233,col 48)",
            "(line 234,col 9)-(line 237,col 48)",
            "(line 238,col 9)-(line 241,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForID_String_old()",
        "snippet": "    public void testForID_String_old() {\n        Map<String, String> map = new LinkedHashMap<String, String>();\n        map.put(\"GMT\", \"UTC\");\n        map.put(\"WET\", \"WET\");\n        map.put(\"CET\", \"CET\");\n        map.put(\"MET\", \"CET\");\n        map.put(\"ECT\", \"CET\");\n        map.put(\"EET\", \"EET\");\n        map.put(\"MIT\", \"Pacific/Apia\");\n        map.put(\"HST\", \"Pacific/Honolulu\");\n        map.put(\"AST\", \"America/Anchorage\");\n        map.put(\"PST\", \"America/Los_Angeles\");\n        map.put(\"MST\", \"America/Denver\");\n        map.put(\"PNT\", \"America/Phoenix\");\n        map.put(\"CST\", \"America/Chicago\");\n        map.put(\"EST\", \"America/New_York\");\n        map.put(\"IET\", \"America/Indiana/Indianapolis\");\n        map.put(\"PRT\", \"America/Puerto_Rico\");\n        map.put(\"CNT\", \"America/St_Johns\");\n        map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n        map.put(\"BET\", \"America/Sao_Paulo\");\n        map.put(\"ART\", \"Africa/Cairo\");\n        map.put(\"CAT\", \"Africa/Harare\");\n        map.put(\"EAT\", \"Africa/Addis_Ababa\");\n        map.put(\"NET\", \"Asia/Yerevan\");\n        map.put(\"PLT\", \"Asia/Karachi\");\n        map.put(\"IST\", \"Asia/Kolkata\");\n        map.put(\"BST\", \"Asia/Dhaka\");\n        map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n        map.put(\"CTT\", \"Asia/Shanghai\");\n        map.put(\"JST\", \"Asia/Tokyo\");\n        map.put(\"ACT\", \"Australia/Darwin\");\n        map.put(\"AET\", \"Australia/Sydney\");\n        map.put(\"SST\", \"Pacific/Guadalcanal\");\n        map.put(\"NST\", \"Pacific/Auckland\");\n        for (String key : map.keySet()) {\n            String value = map.get(key);\n            TimeZone juZone = TimeZone.getTimeZone(key);\n            DateTimeZone zone = DateTimeZone.forTimeZone(juZone);\n            assertEquals(value, zone.getID());\n//            System.out.println(juZone);\n//            System.out.println(juZone.getDisplayName());\n//            System.out.println(zone);\n//            System.out.println(\"------\");\n        }\n    }\n",
        "begin_line": 244,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 70)",
            "(line 246,col 9)-(line 246,col 30)",
            "(line 247,col 9)-(line 247,col 30)",
            "(line 248,col 9)-(line 248,col 30)",
            "(line 249,col 9)-(line 249,col 30)",
            "(line 250,col 9)-(line 250,col 30)",
            "(line 251,col 9)-(line 251,col 30)",
            "(line 252,col 9)-(line 252,col 39)",
            "(line 253,col 9)-(line 253,col 43)",
            "(line 254,col 9)-(line 254,col 44)",
            "(line 255,col 9)-(line 255,col 46)",
            "(line 256,col 9)-(line 256,col 41)",
            "(line 257,col 9)-(line 257,col 42)",
            "(line 258,col 9)-(line 258,col 42)",
            "(line 259,col 9)-(line 259,col 43)",
            "(line 260,col 9)-(line 260,col 55)",
            "(line 261,col 9)-(line 261,col 46)",
            "(line 262,col 9)-(line 262,col 43)",
            "(line 263,col 9)-(line 263,col 57)",
            "(line 264,col 9)-(line 264,col 44)",
            "(line 265,col 9)-(line 265,col 39)",
            "(line 266,col 9)-(line 266,col 40)",
            "(line 267,col 9)-(line 267,col 45)",
            "(line 268,col 9)-(line 268,col 39)",
            "(line 269,col 9)-(line 269,col 39)",
            "(line 270,col 9)-(line 270,col 39)",
            "(line 271,col 9)-(line 271,col 37)",
            "(line 272,col 9)-(line 272,col 43)",
            "(line 273,col 9)-(line 273,col 40)",
            "(line 274,col 9)-(line 274,col 37)",
            "(line 275,col 9)-(line 275,col 43)",
            "(line 276,col 9)-(line 276,col 43)",
            "(line 277,col 9)-(line 277,col 46)",
            "(line 278,col 9)-(line 278,col 43)",
            "(line 279,col 9)-(line 288,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForOffsetHours_int()",
        "snippet": "    public void testForOffsetHours_int() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0));\n        assertEquals(DateTimeZone.forID(\"+03:00\"), DateTimeZone.forOffsetHours(3));\n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHours(-2));\n        try {\n            DateTimeZone.forOffsetHours(999999);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }        \n",
        "begin_line": 292,
        "end_line": 300,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 71)",
            "(line 294,col 9)-(line 294,col 83)",
            "(line 295,col 9)-(line 295,col 84)",
            "(line 296,col 9)-(line 299,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int()",
        "snippet": "    public void testForOffsetHoursMinutes_int_int() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n        assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n        \n        assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));\n        assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));\n        assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));\n        assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));\n        \n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));\n        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));\n        \n        assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }        \n",
        "begin_line": 303,
        "end_line": 339,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 81)",
            "(line 305,col 9)-(line 305,col 95)",
            "(line 307,col 9)-(line 307,col 94)",
            "(line 308,col 9)-(line 308,col 93)",
            "(line 309,col 9)-(line 312,col 48)",
            "(line 314,col 9)-(line 314,col 94)",
            "(line 315,col 9)-(line 315,col 93)",
            "(line 316,col 9)-(line 316,col 95)",
            "(line 318,col 9)-(line 318,col 94)",
            "(line 319,col 9)-(line 319,col 96)",
            "(line 320,col 9)-(line 320,col 95)",
            "(line 322,col 9)-(line 322,col 96)",
            "(line 323,col 9)-(line 326,col 48)",
            "(line 327,col 9)-(line 330,col 48)",
            "(line 331,col 9)-(line 334,col 48)",
            "(line 335,col 9)-(line 338,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForOffsetMillis_int()",
        "snippet": "    public void testForOffsetMillis_int() {\n        assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0));\n        assertEquals(DateTimeZone.forID(\"+23:59:59.999\"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1));\n        assertEquals(DateTimeZone.forID(\"+03:00\"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000));\n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000));\n        assertEquals(DateTimeZone.forID(\"-23:59:59.999\"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1));\n        assertEquals(DateTimeZone.forID(\"+04:45:17.045\"),\n                DateTimeZone.forOffsetMillis(\n                        4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45));\n    }        \n",
        "begin_line": 342,
        "end_line": 351,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 70)",
            "(line 344,col 9)-(line 344,col 115)",
            "(line 345,col 9)-(line 345,col 101)",
            "(line 346,col 9)-(line 346,col 102)",
            "(line 347,col 9)-(line 347,col 116)",
            "(line 348,col 9)-(line 350,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForTimeZone_TimeZone()",
        "snippet": "    public void testForTimeZone_TimeZone() {\n        assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null));\n        \n        DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"Europe/London\"));\n        assertEquals(\"Europe/London\", zone.getID());\n        assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"UTC\")));\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"+00:00\"));\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00:00\"));\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00:00\"));\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00\"));\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+01:23\"));\n        assertEquals(\"+01:23\", zone.getID());\n        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n                zone.getOffset(TEST_TIME_SUMMER));\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+1:23\"));\n        assertEquals(\"+01:23\", zone.getID());\n        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n                zone.getOffset(TEST_TIME_SUMMER));\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT-02:00\"));\n        assertEquals(\"-02:00\", zone.getID());\n        assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+2\"));\n        assertEquals(\"+02:00\", zone.getID());\n        assertEquals((2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"EST\"));\n        assertEquals(\"America/New_York\", zone.getID());\n    }\n",
        "begin_line": 354,
        "end_line": 393,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 91)",
            "(line 357,col 9)-(line 357,col 92)",
            "(line 358,col 9)-(line 358,col 52)",
            "(line 359,col 9)-(line 359,col 92)",
            "(line 361,col 9)-(line 361,col 72)",
            "(line 362,col 9)-(line 362,col 43)",
            "(line 364,col 9)-(line 364,col 75)",
            "(line 365,col 9)-(line 365,col 43)",
            "(line 367,col 9)-(line 367,col 75)",
            "(line 368,col 9)-(line 368,col 43)",
            "(line 370,col 9)-(line 370,col 72)",
            "(line 371,col 9)-(line 371,col 43)",
            "(line 373,col 9)-(line 373,col 75)",
            "(line 374,col 9)-(line 374,col 45)",
            "(line 375,col 9)-(line 376,col 50)",
            "(line 378,col 9)-(line 378,col 74)",
            "(line 379,col 9)-(line 379,col 45)",
            "(line 380,col 9)-(line 381,col 50)",
            "(line 383,col 9)-(line 383,col 75)",
            "(line 384,col 9)-(line 384,col 45)",
            "(line 385,col 9)-(line 385,col 98)",
            "(line 387,col 9)-(line 387,col 71)",
            "(line 388,col 9)-(line 388,col 45)",
            "(line 389,col 9)-(line 389,col 97)",
            "(line 391,col 9)-(line 391,col 69)",
            "(line 392,col 9)-(line 392,col 55)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testTimeZoneConversion()",
        "snippet": "    public void testTimeZoneConversion() {\n        TimeZone jdkTimeZone = TimeZone.getTimeZone(\"GMT-10\");\n        assertEquals(\"GMT-10:00\", jdkTimeZone.getID());\n        \n        DateTimeZone jodaTimeZone = DateTimeZone.forTimeZone(jdkTimeZone);\n        assertEquals(\"-10:00\", jodaTimeZone.getID());\n        assertEquals(jdkTimeZone.getRawOffset(), jodaTimeZone.getOffset(0L));\n        \n        TimeZone convertedTimeZone = jodaTimeZone.toTimeZone();\n        assertEquals(\"GMT-10:00\", jdkTimeZone.getID());\n        \n        assertEquals(jdkTimeZone.getID(), convertedTimeZone.getID());\n        assertEquals(jdkTimeZone.getRawOffset(), convertedTimeZone.getRawOffset());\n    }\n",
        "begin_line": 395,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 62)",
            "(line 397,col 9)-(line 397,col 55)",
            "(line 399,col 9)-(line 399,col 74)",
            "(line 400,col 9)-(line 400,col 53)",
            "(line 401,col 9)-(line 401,col 77)",
            "(line 403,col 9)-(line 403,col 63)",
            "(line 404,col 9)-(line 404,col 55)",
            "(line 406,col 9)-(line 406,col 69)",
            "(line 407,col 9)-(line 407,col 83)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetAvailableIDs()",
        "snippet": "    public void testGetAvailableIDs() {\n        assertTrue(DateTimeZone.getAvailableIDs().contains(\"UTC\"));\n    }\n",
        "begin_line": 411,
        "end_line": 413,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testProvider()",
        "snippet": "    public void testProvider() {\n        try {\n            assertNotNull(DateTimeZone.getProvider());\n        \n            Provider provider = DateTimeZone.getProvider();\n            DateTimeZone.setProvider(null);\n            assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass());\n        \n            try {\n                DateTimeZone.setProvider(new MockNullIDSProvider());\n                fail();\n            } catch (IllegalArgumentException ex) {}\n            try {\n                DateTimeZone.setProvider(new MockEmptyIDSProvider());\n                fail();\n            } catch (IllegalArgumentException ex) {}\n            try {\n                DateTimeZone.setProvider(new MockNoUTCProvider());\n                fail();\n            } catch (IllegalArgumentException ex) {}\n            try {\n                DateTimeZone.setProvider(new MockBadUTCProvider());\n                fail();\n            } catch (IllegalArgumentException ex) {}\n        \n            Provider prov = new MockOKProvider();\n            DateTimeZone.setProvider(prov);\n            assertSame(prov, DateTimeZone.getProvider());\n            assertEquals(2, DateTimeZone.getAvailableIDs().size());\n            assertTrue(DateTimeZone.getAvailableIDs().contains(\"UTC\"));\n            assertTrue(DateTimeZone.getAvailableIDs().contains(\"Europe/London\"));\n        } finally {\n            DateTimeZone.setProvider(null);\n            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n        }\n        \n        try {\n            System.setProperty(\"org.joda.time.DateTimeZone.Provider\", \"org.joda.time.tz.UTCProvider\");\n            DateTimeZone.setProvider(null);\n            assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass());\n        } finally {\n            System.getProperties().remove(\"org.joda.time.DateTimeZone.Provider\");\n            DateTimeZone.setProvider(null);\n            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n        }\n        \n        PrintStream syserr = System.err;\n        try {\n            System.setProperty(\"org.joda.time.DateTimeZone.Provider\", \"xxx\");\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            System.setErr(new PrintStream(baos));\n            \n            DateTimeZone.setProvider(null);\n            \n            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n            String str = new String(baos.toByteArray());\n            assertTrue(str.indexOf(\"java.lang.ClassNotFoundException\") >= 0);\n        } finally {\n            System.setErr(syserr);\n            System.getProperties().remove(\"org.joda.time.DateTimeZone.Provider\");\n            DateTimeZone.setProvider(null);\n            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n        }\n    }\n",
        "begin_line": 416,
        "end_line": 479,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 417,col 9)-(line 450,col 9)",
            "(line 452,col 9)-(line 460,col 9)",
            "(line 462,col 9)-(line 462,col 40)",
            "(line 463,col 9)-(line 478,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testProviderSecurity()",
        "snippet": "    public void testProviderSecurity() {\n        if (OLD_JDK) {\n            return;\n        }\n        try {\n            Policy.setPolicy(RESTRICT);\n            System.setSecurityManager(new SecurityManager());\n            DateTimeZone.setProvider(new MockOKProvider());\n            fail();\n        } catch (SecurityException ex) {\n            // ok\n        } finally {\n            System.setSecurityManager(null);\n            Policy.setPolicy(ALLOW);\n        }\n    }\n",
        "begin_line": 481,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 482,col 9)-(line 484,col 9)",
            "(line 485,col 9)-(line 495,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockNullIDSProvider.getAvailableIDs()",
        "snippet": "        public Set getAvailableIDs() {\n            return null;\n        }\n",
        "begin_line": 499,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 500,col 13)-(line 500,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockNullIDSProvider.getZone(java.lang.String)",
        "snippet": "        public DateTimeZone getZone(String id) {\n            return null;\n        }\n",
        "begin_line": 502,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 503,col 13)-(line 503,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockEmptyIDSProvider.getAvailableIDs()",
        "snippet": "        public Set getAvailableIDs() {\n            return new HashSet();\n        }\n",
        "begin_line": 507,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 508,col 13)-(line 508,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockEmptyIDSProvider.getZone(java.lang.String)",
        "snippet": "        public DateTimeZone getZone(String id) {\n            return null;\n        }\n",
        "begin_line": 510,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 511,col 13)-(line 511,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockNoUTCProvider.getAvailableIDs()",
        "snippet": "        public Set getAvailableIDs() {\n            Set set = new HashSet();\n            set.add(\"Europe/London\");\n            return set;\n        }\n",
        "begin_line": 515,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 516,col 13)-(line 516,col 36)",
            "(line 517,col 13)-(line 517,col 37)",
            "(line 518,col 13)-(line 518,col 23)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockNoUTCProvider.getZone(java.lang.String)",
        "snippet": "        public DateTimeZone getZone(String id) {\n            return null;\n        }\n",
        "begin_line": 520,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 521,col 13)-(line 521,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockBadUTCProvider.getAvailableIDs()",
        "snippet": "        public Set getAvailableIDs() {\n            Set set = new HashSet();\n            set.add(\"UTC\");\n            set.add(\"Europe/London\");\n            return set;\n        }\n",
        "begin_line": 525,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 526,col 13)-(line 526,col 36)",
            "(line 527,col 13)-(line 527,col 27)",
            "(line 528,col 13)-(line 528,col 37)",
            "(line 529,col 13)-(line 529,col 23)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockBadUTCProvider.getZone(java.lang.String)",
        "snippet": "        public DateTimeZone getZone(String id) {\n            return null;\n        }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 532,col 13)-(line 532,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockOKProvider.getAvailableIDs()",
        "snippet": "        public Set getAvailableIDs() {\n            Set set = new HashSet();\n            set.add(\"UTC\");\n            set.add(\"Europe/London\");\n            return set;\n        }\n",
        "begin_line": 536,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 537,col 13)-(line 537,col 36)",
            "(line 538,col 13)-(line 538,col 27)",
            "(line 539,col 13)-(line 539,col 37)",
            "(line 540,col 13)-(line 540,col 23)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockOKProvider.getZone(java.lang.String)",
        "snippet": "        public DateTimeZone getZone(String id) {\n            return DateTimeZone.UTC;\n        }\n",
        "begin_line": 542,
        "end_line": 544,
        "comment": "",
        "child_ranges": [
            "(line 543,col 13)-(line 543,col 36)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testNameProvider()",
        "snippet": "    public void testNameProvider() {\n        try {\n            assertNotNull(DateTimeZone.getNameProvider());\n        \n            NameProvider provider = DateTimeZone.getNameProvider();\n            DateTimeZone.setNameProvider(null);\n            assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass());\n        \n            provider = new MockOKButNullNameProvider();\n            DateTimeZone.setNameProvider(provider);\n            assertSame(provider, DateTimeZone.getNameProvider());\n            \n            assertEquals(\"+00:00\", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER));\n            assertEquals(\"+00:00\", DateTimeZone.UTC.getName(TEST_TIME_SUMMER));\n        } finally {\n            DateTimeZone.setNameProvider(null);\n        }\n        \n        try {\n            System.setProperty(\"org.joda.time.DateTimeZone.NameProvider\", \"org.joda.time.tz.DefaultNameProvider\");\n            DateTimeZone.setNameProvider(null);\n            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n        } finally {\n            System.getProperties().remove(\"org.joda.time.DateTimeZone.NameProvider\");\n            DateTimeZone.setNameProvider(null);\n            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n        }\n        \n        PrintStream syserr = System.err;\n        try {\n            System.setProperty(\"org.joda.time.DateTimeZone.NameProvider\", \"xxx\");\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            System.setErr(new PrintStream(baos));\n            \n            DateTimeZone.setNameProvider(null);\n            \n            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n            String str = new String(baos.toByteArray());\n            assertTrue(str.indexOf(\"java.lang.ClassNotFoundException\") >= 0);\n        } finally {\n            System.setErr(syserr);\n            System.getProperties().remove(\"org.joda.time.DateTimeZone.NameProvider\");\n            DateTimeZone.setNameProvider(null);\n            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n        }\n    }        \n",
        "begin_line": 548,
        "end_line": 593,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 549,col 9)-(line 564,col 9)",
            "(line 566,col 9)-(line 574,col 9)",
            "(line 576,col 9)-(line 576,col 40)",
            "(line 577,col 9)-(line 592,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testNameProviderSecurity()",
        "snippet": "    public void testNameProviderSecurity() {\n        if (OLD_JDK) {\n            return;\n        }\n        try {\n            Policy.setPolicy(RESTRICT);\n            System.setSecurityManager(new SecurityManager());\n            DateTimeZone.setNameProvider(new MockOKButNullNameProvider());\n            fail();\n        } catch (SecurityException ex) {\n            // ok\n        } finally {\n            System.setSecurityManager(null);\n            Policy.setPolicy(ALLOW);\n        }\n    }\n",
        "begin_line": 595,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 596,col 9)-(line 598,col 9)",
            "(line 599,col 9)-(line 609,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockOKButNullNameProvider.getShortName(java.util.Locale, java.lang.String, java.lang.String)",
        "snippet": "        public String getShortName(Locale locale, String id, String nameKey) {\n            return null;\n        }\n",
        "begin_line": 613,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 614,col 13)-(line 614,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockOKButNullNameProvider.getName(java.util.Locale, java.lang.String, java.lang.String)",
        "snippet": "        public String getName(Locale locale, String id, String nameKey) {\n            return null;\n        }\n",
        "begin_line": 616,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 617,col 13)-(line 617,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertEquals(1, DateTimeZone.class.getDeclaredConstructors().length);\n        assertTrue(Modifier.isProtected(DateTimeZone.class.getDeclaredConstructors()[0].getModifiers()));\n        try {\n            new DateTimeZone(null) {\n                public String getNameKey(long instant) {\n                    return null;\n                }\n                public int getOffset(long instant) {\n                    return 0;\n                }\n                public int getStandardOffset(long instant) {\n                    return 0;\n                }\n                public boolean isFixed() {\n                    return false;\n                }\n                public long nextTransition(long instant) {\n                    return 0;\n                }\n                public long previousTransition(long instant) {\n                    return 0;\n                }\n                public boolean equals(Object object) {\n                    return false;\n                }\n            };\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 622,
        "end_line": 650,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 623,col 9)-(line 623,col 77)",
            "(line 624,col 9)-(line 624,col 105)",
            "(line 625,col 9)-(line 649,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-cc9a4801-7622-41af-9d94-552ecb95ab9e.getNameKey(long)",
        "snippet": "                public String getNameKey(long instant) {\n                    return null;\n                }\n",
        "begin_line": 627,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 628,col 21)-(line 628,col 32)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-9f4d224f-f689-43c4-9b8f-ca8746d93583.getOffset(long)",
        "snippet": "                public int getOffset(long instant) {\n                    return 0;\n                }\n",
        "begin_line": 630,
        "end_line": 632,
        "comment": "",
        "child_ranges": [
            "(line 631,col 21)-(line 631,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-7df6d15b-f049-402a-a6b4-982bb03d129b.getStandardOffset(long)",
        "snippet": "                public int getStandardOffset(long instant) {\n                    return 0;\n                }\n",
        "begin_line": 633,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 634,col 21)-(line 634,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-3ca0f4ae-6ef3-452e-8f05-99001d0e8a85.isFixed()",
        "snippet": "                public boolean isFixed() {\n                    return false;\n                }\n",
        "begin_line": 636,
        "end_line": 638,
        "comment": "",
        "child_ranges": [
            "(line 637,col 21)-(line 637,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-d79e91df-fba6-40e8-9c12-1b33827fdce5.nextTransition(long)",
        "snippet": "                public long nextTransition(long instant) {\n                    return 0;\n                }\n",
        "begin_line": 639,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 640,col 21)-(line 640,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-0b1d8b1a-2a6e-4721-b5f3-d135653b94d7.previousTransition(long)",
        "snippet": "                public long previousTransition(long instant) {\n                    return 0;\n                }\n",
        "begin_line": 642,
        "end_line": 644,
        "comment": "",
        "child_ranges": [
            "(line 643,col 21)-(line 643,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-d3202a43-9a40-49c7-acde-902dc19083d9.equals(java.lang.Object)",
        "snippet": "                public boolean equals(Object object) {\n                    return false;\n                }\n",
        "begin_line": 645,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 646,col 21)-(line 646,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetID()",
        "snippet": "    public void testGetID() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(\"Europe/Paris\", zone.getID());\n    }\n",
        "begin_line": 653,
        "end_line": 656,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 654,col 9)-(line 654,col 63)",
            "(line 655,col 9)-(line 655,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetNameKey()",
        "snippet": "    public void testGetNameKey() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n        assertEquals(\"BST\", zone.getNameKey(TEST_TIME_SUMMER));\n        assertEquals(\"GMT\", zone.getNameKey(TEST_TIME_WINTER));\n    }\n",
        "begin_line": 658,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 659,col 9)-(line 659,col 64)",
            "(line 660,col 9)-(line 660,col 63)",
            "(line 661,col 9)-(line 661,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetShortName()",
        "snippet": "    public void testGetShortName() {}\n",
        "begin_line": 675,
        "end_line": 675,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetShortName_berlin()",
        "snippet": "    public void testGetShortName_berlin() {}\n",
        "begin_line": 684,
        "end_line": 684,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetShortNameProviderName()",
        "snippet": "    public void testGetShortNameProviderName() {\n        assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, \"Europe/London\", \"BST\"));\n        assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, \"BST\"));\n        assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, \"Europe/London\", null));\n        assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null));\n    }\n",
        "begin_line": 699,
        "end_line": 704,
        "comment": "",
        "child_ranges": [
            "(line 700,col 9)-(line 700,col 102)",
            "(line 701,col 9)-(line 701,col 101)",
            "(line 702,col 9)-(line 702,col 111)",
            "(line 703,col 9)-(line 703,col 90)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetShortNameNullKey()",
        "snippet": "    public void testGetShortNameNullKey() {\n        DateTimeZone zone = new MockDateTimeZone(\"Europe/London\");\n        assertEquals(\"Europe/London\", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));\n    }\n",
        "begin_line": 706,
        "end_line": 709,
        "comment": "",
        "child_ranges": [
            "(line 707,col 9)-(line 707,col 66)",
            "(line 708,col 9)-(line 708,col 91)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetName()",
        "snippet": "    public void testGetName() {}\n",
        "begin_line": 711,
        "end_line": 711,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetName_berlin()",
        "snippet": "    public void testGetName_berlin() {}\n",
        "begin_line": 720,
        "end_line": 720,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetNameProviderName()",
        "snippet": "    public void testGetNameProviderName() {\n        assertEquals(null, DateTimeZone.getNameProvider().getName(null, \"Europe/London\", \"BST\"));\n        assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, null, \"BST\"));\n        assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, \"Europe/London\", null));\n        assertEquals(null, DateTimeZone.getNameProvider().getName(null, null, null));\n    }\n",
        "begin_line": 735,
        "end_line": 740,
        "comment": "",
        "child_ranges": [
            "(line 736,col 9)-(line 736,col 97)",
            "(line 737,col 9)-(line 737,col 96)",
            "(line 738,col 9)-(line 738,col 106)",
            "(line 739,col 9)-(line 739,col 85)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetNameNullKey()",
        "snippet": "    public void testGetNameNullKey() {\n        DateTimeZone zone = new MockDateTimeZone(\"Europe/London\");\n        assertEquals(\"Europe/London\", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));\n    }\n",
        "begin_line": 742,
        "end_line": 745,
        "comment": "",
        "child_ranges": [
            "(line 743,col 9)-(line 743,col 66)",
            "(line 744,col 9)-(line 744,col 86)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.MockDateTimeZone(java.lang.String)",
        "snippet": "        public MockDateTimeZone(String id) {\n            super(id);\n        }\n",
        "begin_line": 748,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 749,col 13)-(line 749,col 22)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.getNameKey(long)",
        "snippet": "        public String getNameKey(long instant) {\n            return null;  // null\n        }\n",
        "begin_line": 751,
        "end_line": 753,
        "comment": "",
        "child_ranges": [
            "(line 752,col 13)-(line 752,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.getOffset(long)",
        "snippet": "        public int getOffset(long instant) {\n            return 0;\n        }\n",
        "begin_line": 754,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 755,col 13)-(line 755,col 21)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.getStandardOffset(long)",
        "snippet": "        public int getStandardOffset(long instant) {\n            return 0;\n        }\n",
        "begin_line": 757,
        "end_line": 759,
        "comment": "",
        "child_ranges": [
            "(line 758,col 13)-(line 758,col 21)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.isFixed()",
        "snippet": "        public boolean isFixed() {\n            return false;\n        }\n",
        "begin_line": 760,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 761,col 13)-(line 761,col 25)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.nextTransition(long)",
        "snippet": "        public long nextTransition(long instant) {\n            return 0;\n        }\n",
        "begin_line": 763,
        "end_line": 765,
        "comment": "",
        "child_ranges": [
            "(line 764,col 13)-(line 764,col 21)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.previousTransition(long)",
        "snippet": "        public long previousTransition(long instant) {\n            return 0;\n        }\n",
        "begin_line": 766,
        "end_line": 768,
        "comment": "",
        "child_ranges": [
            "(line 767,col 13)-(line 767,col 21)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object object) {\n            return false;\n        }\n",
        "begin_line": 769,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 770,col 13)-(line 770,col 25)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetOffset_long()",
        "snippet": "    public void testGetOffset_long() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));\n        \n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));\n        \n        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));\n        \n        assertEquals(false, zone.isStandardOffset(TEST_TIME_SUMMER));\n        assertEquals(true, zone.isStandardOffset(TEST_TIME_WINTER));\n    }\n",
        "begin_line": 775,
        "end_line": 788,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 776,col 9)-(line 776,col 63)",
            "(line 777,col 9)-(line 777,col 95)",
            "(line 778,col 9)-(line 778,col 95)",
            "(line 780,col 9)-(line 780,col 103)",
            "(line 781,col 9)-(line 781,col 103)",
            "(line 783,col 9)-(line 783,col 104)",
            "(line 784,col 9)-(line 784,col 104)",
            "(line 786,col 9)-(line 786,col 69)",
            "(line 787,col 9)-(line 787,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetOffset_RI()",
        "snippet": "    public void testGetOffset_RI() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));\n        \n        assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));\n    }\n",
        "begin_line": 790,
        "end_line": 796,
        "comment": "",
        "child_ranges": [
            "(line 791,col 9)-(line 791,col 63)",
            "(line 792,col 9)-(line 792,col 108)",
            "(line 793,col 9)-(line 793,col 108)",
            "(line 795,col 9)-(line 795,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetOffsetFixed()",
        "snippet": "    public void testGetOffsetFixed() {\n        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));\n        \n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));\n        \n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));\n        \n        assertEquals(true, zone.isStandardOffset(TEST_TIME_SUMMER));\n        assertEquals(true, zone.isStandardOffset(TEST_TIME_WINTER));\n    }\n",
        "begin_line": 798,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 799,col 9)-(line 799,col 57)",
            "(line 800,col 9)-(line 800,col 95)",
            "(line 801,col 9)-(line 801,col 95)",
            "(line 803,col 9)-(line 803,col 103)",
            "(line 804,col 9)-(line 804,col 103)",
            "(line 806,col 9)-(line 806,col 104)",
            "(line 807,col 9)-(line 807,col 104)",
            "(line 809,col 9)-(line 809,col 68)",
            "(line 810,col 9)-(line 810,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetOffsetFixed_RI()",
        "snippet": "    public void testGetOffsetFixed_RI() {\n        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));\n        \n        assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));\n    }\n",
        "begin_line": 813,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 814,col 9)-(line 814,col 57)",
            "(line 815,col 9)-(line 815,col 108)",
            "(line 816,col 9)-(line 816,col 108)",
            "(line 818,col 9)-(line 818,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetMillisKeepLocal()",
        "snippet": "    public void testGetMillisKeepLocal() {\n        long millisLondon = TEST_TIME_SUMMER;\n        long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR;\n        \n        assertEquals(millisLondon, LONDON.getMillisKeepLocal(LONDON, millisLondon));\n        assertEquals(millisParis, LONDON.getMillisKeepLocal(LONDON, millisParis));\n        assertEquals(millisLondon, PARIS.getMillisKeepLocal(PARIS, millisLondon));\n        assertEquals(millisParis, PARIS.getMillisKeepLocal(PARIS, millisParis));\n        \n        assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon));\n        assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis));\n        \n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(LONDON);\n            assertEquals(millisLondon, PARIS.getMillisKeepLocal(null, millisParis));\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }\n",
        "begin_line": 822,
        "end_line": 841,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 823,col 9)-(line 823,col 45)",
            "(line 824,col 9)-(line 824,col 85)",
            "(line 826,col 9)-(line 826,col 84)",
            "(line 827,col 9)-(line 827,col 82)",
            "(line 828,col 9)-(line 828,col 82)",
            "(line 829,col 9)-(line 829,col 80)",
            "(line 831,col 9)-(line 831,col 82)",
            "(line 832,col 9)-(line 832,col 82)",
            "(line 834,col 9)-(line 834,col 54)",
            "(line 835,col 9)-(line 840,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testIsFixed()",
        "snippet": "    public void testIsFixed() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(false, zone.isFixed());\n        assertEquals(true, DateTimeZone.UTC.isFixed());\n    }\n",
        "begin_line": 844,
        "end_line": 848,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 845,col 9)-(line 845,col 63)",
            "(line 846,col 9)-(line 846,col 44)",
            "(line 847,col 9)-(line 847,col 55)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testTransitionFixed()",
        "snippet": "    public void testTransitionFixed() {\n        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n        assertEquals(TEST_TIME_SUMMER, zone.nextTransition(TEST_TIME_SUMMER));\n        assertEquals(TEST_TIME_WINTER, zone.nextTransition(TEST_TIME_WINTER));\n        assertEquals(TEST_TIME_SUMMER, zone.previousTransition(TEST_TIME_SUMMER));\n        assertEquals(TEST_TIME_WINTER, zone.previousTransition(TEST_TIME_WINTER));\n    }\n",
        "begin_line": 851,
        "end_line": 857,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 852,col 9)-(line 852,col 57)",
            "(line 853,col 9)-(line 853,col 78)",
            "(line 854,col 9)-(line 854,col 78)",
            "(line 855,col 9)-(line 855,col 82)",
            "(line 856,col 9)-(line 856,col 82)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testIsLocalDateTimeGap_Berlin()",
        "snippet": "    public void testIsLocalDateTimeGap_Berlin() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Berlin\");\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0)));\n        \n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30)));  // before overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30)));  // overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30)));  // after overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34)));\n    }\n",
        "begin_line": 894,
        "end_line": 908,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 895,col 9)-(line 895,col 64)",
            "(line 896,col 9)-(line 896,col 91)",
            "(line 897,col 9)-(line 897,col 100)",
            "(line 898,col 9)-(line 898,col 90)",
            "(line 899,col 9)-(line 899,col 91)",
            "(line 900,col 9)-(line 900,col 99)",
            "(line 901,col 9)-(line 901,col 91)",
            "(line 902,col 9)-(line 902,col 91)",
            "(line 904,col 9)-(line 904,col 93)",
            "(line 905,col 9)-(line 905,col 93)",
            "(line 906,col 9)-(line 906,col 93)",
            "(line 907,col 9)-(line 907,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testIsLocalDateTimeGap_NewYork()",
        "snippet": "    public void testIsLocalDateTimeGap_NewYork() {\n        DateTimeZone zone = DateTimeZone.forID(\"America/New_York\");\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 1, 0)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 1, 59, 59, 99)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 0)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 30)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 59, 59, 99)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 3, 0)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 4, 0)));\n        \n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 0, 30)));  // before overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 1, 30)));  // overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 2, 30)));  // after overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34)));\n    }\n",
        "begin_line": 911,
        "end_line": 925,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 912,col 9)-(line 912,col 67)",
            "(line 913,col 9)-(line 913,col 91)",
            "(line 914,col 9)-(line 914,col 100)",
            "(line 915,col 9)-(line 915,col 90)",
            "(line 916,col 9)-(line 916,col 91)",
            "(line 917,col 9)-(line 917,col 99)",
            "(line 918,col 9)-(line 918,col 91)",
            "(line 919,col 9)-(line 919,col 91)",
            "(line 921,col 9)-(line 921,col 92)",
            "(line 922,col 9)-(line 922,col 92)",
            "(line 923,col 9)-(line 923,col 92)",
            "(line 924,col 9)-(line 924,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testToTimeZone()",
        "snippet": "    public void testToTimeZone() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        TimeZone tz = zone.toTimeZone();\n        assertEquals(\"Europe/Paris\", tz.getID());\n    }\n",
        "begin_line": 928,
        "end_line": 932,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 929,col 9)-(line 929,col 63)",
            "(line 930,col 9)-(line 930,col 40)",
            "(line 931,col 9)-(line 931,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testEqualsHashCode()",
        "snippet": "    public void testEqualsHashCode() {\n        DateTimeZone zone1 = DateTimeZone.forID(\"Europe/Paris\");\n        DateTimeZone zone2 = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(true, zone1.equals(zone1));\n        assertEquals(true, zone1.equals(zone2));\n        assertEquals(true, zone2.equals(zone1));\n        assertEquals(true, zone2.equals(zone2));\n        assertEquals(true, zone1.hashCode() == zone2.hashCode());\n        \n        DateTimeZone zone3 = DateTimeZone.forID(\"Europe/London\");\n        assertEquals(true, zone3.equals(zone3));\n        assertEquals(false, zone1.equals(zone3));\n        assertEquals(false, zone2.equals(zone3));\n        assertEquals(false, zone3.equals(zone1));\n        assertEquals(false, zone3.equals(zone2));\n        assertEquals(false, zone1.hashCode() == zone3.hashCode());\n        assertEquals(true, zone3.hashCode() == zone3.hashCode());\n        \n        DateTimeZone zone4 = DateTimeZone.forID(\"+01:00\");\n        assertEquals(true, zone4.equals(zone4));\n        assertEquals(false, zone1.equals(zone4));\n        assertEquals(false, zone2.equals(zone4));\n        assertEquals(false, zone3.equals(zone4));\n        assertEquals(false, zone4.equals(zone1));\n        assertEquals(false, zone4.equals(zone2));\n        assertEquals(false, zone4.equals(zone3));\n        assertEquals(false, zone1.hashCode() == zone4.hashCode());\n        assertEquals(true, zone4.hashCode() == zone4.hashCode());\n        \n        DateTimeZone zone5 = DateTimeZone.forID(\"+02:00\");\n        assertEquals(true, zone5.equals(zone5));\n        assertEquals(false, zone1.equals(zone5));\n        assertEquals(false, zone2.equals(zone5));\n        assertEquals(false, zone3.equals(zone5));\n        assertEquals(false, zone4.equals(zone5));\n        assertEquals(false, zone5.equals(zone1));\n        assertEquals(false, zone5.equals(zone2));\n        assertEquals(false, zone5.equals(zone3));\n        assertEquals(false, zone5.equals(zone4));\n        assertEquals(false, zone1.hashCode() == zone5.hashCode());\n        assertEquals(true, zone5.hashCode() == zone5.hashCode());\n    }\n",
        "begin_line": 935,
        "end_line": 976,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 936,col 9)-(line 936,col 64)",
            "(line 937,col 9)-(line 937,col 64)",
            "(line 938,col 9)-(line 938,col 48)",
            "(line 939,col 9)-(line 939,col 48)",
            "(line 940,col 9)-(line 940,col 48)",
            "(line 941,col 9)-(line 941,col 48)",
            "(line 942,col 9)-(line 942,col 65)",
            "(line 944,col 9)-(line 944,col 65)",
            "(line 945,col 9)-(line 945,col 48)",
            "(line 946,col 9)-(line 946,col 49)",
            "(line 947,col 9)-(line 947,col 49)",
            "(line 948,col 9)-(line 948,col 49)",
            "(line 949,col 9)-(line 949,col 49)",
            "(line 950,col 9)-(line 950,col 66)",
            "(line 951,col 9)-(line 951,col 65)",
            "(line 953,col 9)-(line 953,col 58)",
            "(line 954,col 9)-(line 954,col 48)",
            "(line 955,col 9)-(line 955,col 49)",
            "(line 956,col 9)-(line 956,col 49)",
            "(line 957,col 9)-(line 957,col 49)",
            "(line 958,col 9)-(line 958,col 49)",
            "(line 959,col 9)-(line 959,col 49)",
            "(line 960,col 9)-(line 960,col 49)",
            "(line 961,col 9)-(line 961,col 66)",
            "(line 962,col 9)-(line 962,col 65)",
            "(line 964,col 9)-(line 964,col 58)",
            "(line 965,col 9)-(line 965,col 48)",
            "(line 966,col 9)-(line 966,col 49)",
            "(line 967,col 9)-(line 967,col 49)",
            "(line 968,col 9)-(line 968,col 49)",
            "(line 969,col 9)-(line 969,col 49)",
            "(line 970,col 9)-(line 970,col 49)",
            "(line 971,col 9)-(line 971,col 49)",
            "(line 972,col 9)-(line 972,col 49)",
            "(line 973,col 9)-(line 973,col 49)",
            "(line 974,col 9)-(line 974,col 66)",
            "(line 975,col 9)-(line 975,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testToString()",
        "snippet": "    public void testToString() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(\"Europe/Paris\", zone.toString());\n        assertEquals(\"UTC\", DateTimeZone.UTC.toString());\n    }\n",
        "begin_line": 979,
        "end_line": 983,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 980,col 9)-(line 980,col 63)",
            "(line 981,col 9)-(line 981,col 54)",
            "(line 982,col 9)-(line 982,col 57)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testSerialization1()",
        "snippet": "    public void testSerialization1() throws Exception {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(zone);\n        byte[] bytes = baos.toByteArray();\n        oos.close();\n        \n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        DateTimeZone result = (DateTimeZone) ois.readObject();\n        ois.close();\n        \n        assertSame(zone, result);\n    }\n",
        "begin_line": 986,
        "end_line": 1001,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 987,col 9)-(line 987,col 63)",
            "(line 989,col 9)-(line 989,col 65)",
            "(line 990,col 9)-(line 990,col 62)",
            "(line 991,col 9)-(line 991,col 30)",
            "(line 992,col 9)-(line 992,col 42)",
            "(line 993,col 9)-(line 993,col 20)",
            "(line 995,col 9)-(line 995,col 68)",
            "(line 996,col 9)-(line 996,col 60)",
            "(line 997,col 9)-(line 997,col 62)",
            "(line 998,col 9)-(line 998,col 20)",
            "(line 1000,col 9)-(line 1000,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testSerialization2()",
        "snippet": "    public void testSerialization2() throws Exception {\n        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(zone);\n        byte[] bytes = baos.toByteArray();\n        oos.close();\n        \n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        DateTimeZone result = (DateTimeZone) ois.readObject();\n        ois.close();\n        \n        assertSame(zone, result);\n    }\n",
        "begin_line": 1004,
        "end_line": 1019,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1005,col 9)-(line 1005,col 57)",
            "(line 1007,col 9)-(line 1007,col 65)",
            "(line 1008,col 9)-(line 1008,col 62)",
            "(line 1009,col 9)-(line 1009,col 30)",
            "(line 1010,col 9)-(line 1010,col 42)",
            "(line 1011,col 9)-(line 1011,col 20)",
            "(line 1013,col 9)-(line 1013,col 68)",
            "(line 1014,col 9)-(line 1014,col 60)",
            "(line 1015,col 9)-(line 1015,col 62)",
            "(line 1016,col 9)-(line 1016,col 20)",
            "(line 1018,col 9)-(line 1018,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testCommentParse()",
        "snippet": "    public void testCommentParse() throws Exception {\n        // A bug in ZoneInfoCompiler's handling of comments broke Europe/Athens\n        // after 1980. This test is included to make sure it doesn't break again.\n\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Athens\");\n        DateTime dt = new DateTime(2005, 5, 5, 20, 10, 15, 0, zone);\n        assertEquals(1115313015000L, dt.getMillis());\n    }\n",
        "begin_line": 1021,
        "end_line": 1028,
        "comment": "",
        "child_ranges": [
            "(line 1025,col 9)-(line 1025,col 64)",
            "(line 1026,col 9)-(line 1026,col 68)",
            "(line 1027,col 9)-(line 1027,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testPatchedNameKeysLondon()",
        "snippet": "    public void testPatchedNameKeysLondon() throws Exception {\n        // the tz database does not have unique name keys [1716305]\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n        \n        DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0);\n        String str1 = zone.getName(now.getMillis());\n        String str2 = zone.getName(now.plusMonths(6).getMillis());\n        assertEquals(false, str1.equals(str2));\n    }\n",
        "begin_line": 1030,
        "end_line": 1038,
        "comment": "",
        "child_ranges": [
            "(line 1032,col 9)-(line 1032,col 64)",
            "(line 1034,col 9)-(line 1034,col 60)",
            "(line 1035,col 9)-(line 1035,col 52)",
            "(line 1036,col 9)-(line 1036,col 66)",
            "(line 1037,col 9)-(line 1037,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testPatchedNameKeysSydney()",
        "snippet": "    public void testPatchedNameKeysSydney() throws Exception {\n        // the tz database does not have unique name keys [1716305]\n        DateTimeZone zone = DateTimeZone.forID(\"Australia/Sydney\");\n        \n        DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0);\n        String str1 = zone.getName(now.getMillis());\n        String str2 = zone.getName(now.plusMonths(6).getMillis());\n        assertEquals(false, str1.equals(str2));\n    }\n",
        "begin_line": 1040,
        "end_line": 1048,
        "comment": "",
        "child_ranges": [
            "(line 1042,col 9)-(line 1042,col 67)",
            "(line 1044,col 9)-(line 1044,col 60)",
            "(line 1045,col 9)-(line 1045,col 52)",
            "(line 1046,col 9)-(line 1046,col 66)",
            "(line 1047,col 9)-(line 1047,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testPatchedNameKeysSydneyHistoric()",
        "snippet": "    public void testPatchedNameKeysSydneyHistoric() throws Exception {\n        // the tz database does not have unique name keys [1716305]\n        DateTimeZone zone = DateTimeZone.forID(\"Australia/Sydney\");\n        \n        DateTime now = new DateTime(1996, 1, 1, 0, 0, 0, 0);\n        String str1 = zone.getName(now.getMillis());\n        String str2 = zone.getName(now.plusMonths(6).getMillis());\n        assertEquals(false, str1.equals(str2));\n    }\n",
        "begin_line": 1050,
        "end_line": 1058,
        "comment": "",
        "child_ranges": [
            "(line 1052,col 9)-(line 1052,col 67)",
            "(line 1054,col 9)-(line 1054,col 60)",
            "(line 1055,col 9)-(line 1055,col 52)",
            "(line 1056,col 9)-(line 1056,col 66)",
            "(line 1057,col 9)-(line 1057,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testPatchedNameKeysGazaHistoric()",
        "snippet": "    public void testPatchedNameKeysGazaHistoric() throws Exception {\n        // the tz database does not have unique name keys [1716305]\n        DateTimeZone zone = DateTimeZone.forID(\"Africa/Johannesburg\");\n        \n        DateTime now = new DateTime(1943, 1, 1, 0, 0, 0, 0);\n        String str1 = zone.getName(now.getMillis());\n        String str2 = zone.getName(now.plusMonths(6).getMillis());\n        assertEquals(false, str1.equals(str2));\n    }\n",
        "begin_line": 1060,
        "end_line": 1068,
        "comment": "",
        "child_ranges": [
            "(line 1062,col 9)-(line 1062,col 70)",
            "(line 1064,col 9)-(line 1064,col 60)",
            "(line 1065,col 9)-(line 1065,col 52)",
            "(line 1066,col 9)-(line 1066,col 66)",
            "(line 1067,col 9)-(line 1067,col 47)"
        ]
    }
]