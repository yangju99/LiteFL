[
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestPartial_Basics.class);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 55)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.TestPartial_Basics(java.lang.String)",
        "snippet": "    public TestPartial_Basics(String name) {\n        super(name);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        zone = DateTimeZone.getDefault();\n        DateTimeZone.setDefault(LONDON);\n    }\n",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 59)",
            "(line 80,col 9)-(line 80,col 41)",
            "(line 81,col 9)-(line 81,col 40)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(zone);\n        zone = null;\n    }\n",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 47)",
            "(line 86,col 9)-(line 86,col 38)",
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testGet()",
        "snippet": "    public void testGet() {\n        Partial test = createHourMinPartial();\n        assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));\n        assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));\n        try {\n            test.get(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            test.get(DateTimeFieldType.secondOfMinute());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 91,
        "end_line": 103,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 46)",
            "(line 93,col 9)-(line 93,col 66)",
            "(line 94,col 9)-(line 94,col 69)",
            "(line 95,col 9)-(line 98,col 48)",
            "(line 99,col 9)-(line 102,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testSize()",
        "snippet": "    public void testSize() {\n        Partial test = createHourMinPartial();\n        assertEquals(2, test.size());\n    }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 46)",
            "(line 107,col 9)-(line 107,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testGetFieldType()",
        "snippet": "    public void testGetFieldType() {\n        Partial test = createHourMinPartial();\n        assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));\n        assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));\n        try {\n            test.getFieldType(-1);\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            test.getFieldType(2);\n        } catch (IndexOutOfBoundsException ex) {}\n    }\n",
        "begin_line": 110,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 46)",
            "(line 112,col 9)-(line 112,col 72)",
            "(line 113,col 9)-(line 113,col 75)",
            "(line 114,col 9)-(line 116,col 49)",
            "(line 117,col 9)-(line 119,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testGetFieldTypes()",
        "snippet": "    public void testGetFieldTypes() {\n        Partial test = createHourMinPartial();\n        DateTimeFieldType[] fields = test.getFieldTypes();\n        assertEquals(2, fields.length);\n        assertSame(DateTimeFieldType.hourOfDay(), fields[0]);\n        assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);\n        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n    }\n",
        "begin_line": 122,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 46)",
            "(line 124,col 9)-(line 124,col 58)",
            "(line 125,col 9)-(line 125,col 39)",
            "(line 126,col 9)-(line 126,col 61)",
            "(line 127,col 9)-(line 127,col 64)",
            "(line 128,col 9)-(line 128,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testGetField()",
        "snippet": "    public void testGetField() {\n        Partial test = createHourMinPartial(COPTIC_PARIS);\n        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0));\n        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1));\n        try {\n            test.getField(-1);\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            test.getField(5);\n        } catch (IndexOutOfBoundsException ex) {}\n    }\n",
        "begin_line": 131,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 58)",
            "(line 133,col 9)-(line 133,col 84)",
            "(line 134,col 9)-(line 134,col 87)",
            "(line 135,col 9)-(line 137,col 49)",
            "(line 138,col 9)-(line 140,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testGetFields()",
        "snippet": "    public void testGetFields() {\n        Partial test = createHourMinPartial(COPTIC_PARIS);\n        DateTimeField[] fields = test.getFields();\n        assertEquals(2, fields.length);\n        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), fields[0]);\n        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), fields[1]);\n        assertNotSame(test.getFields(), test.getFields());\n    }\n",
        "begin_line": 143,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 58)",
            "(line 145,col 9)-(line 145,col 50)",
            "(line 146,col 9)-(line 146,col 39)",
            "(line 147,col 9)-(line 147,col 77)",
            "(line 148,col 9)-(line 148,col 80)",
            "(line 149,col 9)-(line 149,col 58)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testGetValue()",
        "snippet": "    public void testGetValue() {\n        Partial test = createHourMinPartial(COPTIC_PARIS);\n        assertEquals(10, test.getValue(0));\n        assertEquals(20, test.getValue(1));\n        try {\n            test.getValue(-1);\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            test.getValue(2);\n        } catch (IndexOutOfBoundsException ex) {}\n    }\n",
        "begin_line": 152,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 58)",
            "(line 154,col 9)-(line 154,col 43)",
            "(line 155,col 9)-(line 155,col 43)",
            "(line 156,col 9)-(line 158,col 49)",
            "(line 159,col 9)-(line 161,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testGetValues()",
        "snippet": "    public void testGetValues() {\n        Partial test = createHourMinPartial(COPTIC_PARIS);\n        int[] values = test.getValues();\n        assertEquals(2, values.length);\n        assertEquals(10, values[0]);\n        assertEquals(20, values[1]);\n        assertNotSame(test.getValues(), test.getValues());\n    }\n",
        "begin_line": 164,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 58)",
            "(line 166,col 9)-(line 166,col 40)",
            "(line 167,col 9)-(line 167,col 39)",
            "(line 168,col 9)-(line 168,col 36)",
            "(line 169,col 9)-(line 169,col 36)",
            "(line 170,col 9)-(line 170,col 58)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testIsSupported()",
        "snippet": "    public void testIsSupported() {\n        Partial test = createHourMinPartial(COPTIC_PARIS);\n        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));\n        assertEquals(false, test.isSupported(DateTimeFieldType.secondOfMinute()));\n        assertEquals(false, test.isSupported(DateTimeFieldType.millisOfSecond()));\n        assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));\n    }\n",
        "begin_line": 173,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 58)",
            "(line 175,col 9)-(line 175,col 76)",
            "(line 176,col 9)-(line 176,col 79)",
            "(line 177,col 9)-(line 177,col 82)",
            "(line 178,col 9)-(line 178,col 82)",
            "(line 179,col 9)-(line 179,col 78)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testEqualsHashCode()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    public void testEqualsHashCode() {\n        Partial test1 = createHourMinPartial(COPTIC_PARIS);\n        Partial test2 = createHourMinPartial(COPTIC_PARIS);\n        assertEquals(true, test1.equals(test2));\n        assertEquals(true, test2.equals(test1));\n        assertEquals(true, test1.equals(test1));\n        assertEquals(true, test2.equals(test2));\n        assertEquals(true, test1.hashCode() == test2.hashCode());\n        assertEquals(true, test1.hashCode() == test1.hashCode());\n        assertEquals(true, test2.hashCode() == test2.hashCode());\n        \n        Partial test3 = createHourMinPartial2(COPTIC_PARIS);\n        assertEquals(false, test1.equals(test3));\n        assertEquals(false, test2.equals(test3));\n        assertEquals(false, test3.equals(test1));\n        assertEquals(false, test3.equals(test2));\n        assertEquals(false, test1.hashCode() == test3.hashCode());\n        assertEquals(false, test2.hashCode() == test3.hashCode());\n        \n        assertEquals(false, test1.equals(\"Hello\"));\n        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n        assertEquals(new TimeOfDay(10, 20, 30, 40), createTODPartial(ISO_UTC));\n    }\n",
        "begin_line": 182,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 59)",
            "(line 185,col 9)-(line 185,col 59)",
            "(line 186,col 9)-(line 186,col 48)",
            "(line 187,col 9)-(line 187,col 48)",
            "(line 188,col 9)-(line 188,col 48)",
            "(line 189,col 9)-(line 189,col 48)",
            "(line 190,col 9)-(line 190,col 65)",
            "(line 191,col 9)-(line 191,col 65)",
            "(line 192,col 9)-(line 192,col 65)",
            "(line 194,col 9)-(line 194,col 60)",
            "(line 195,col 9)-(line 195,col 49)",
            "(line 196,col 9)-(line 196,col 49)",
            "(line 197,col 9)-(line 197,col 49)",
            "(line 198,col 9)-(line 198,col 49)",
            "(line 199,col 9)-(line 199,col 66)",
            "(line 200,col 9)-(line 200,col 66)",
            "(line 202,col 9)-(line 202,col 51)",
            "(line 203,col 9)-(line 203,col 70)",
            "(line 204,col 9)-(line 204,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testCompareTo()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    public void testCompareTo() {\n        Partial test1 = createHourMinPartial();\n        Partial test1a = createHourMinPartial();\n        assertEquals(0, test1.compareTo(test1a));\n        assertEquals(0, test1a.compareTo(test1));\n        assertEquals(0, test1.compareTo(test1));\n        assertEquals(0, test1a.compareTo(test1a));\n        \n        Partial test2 = createHourMinPartial2(ISO_UTC);\n        assertEquals(-1, test1.compareTo(test2));\n        assertEquals(+1, test2.compareTo(test1));\n        \n        Partial test3 = createHourMinPartial2(COPTIC_UTC);\n        assertEquals(-1, test1.compareTo(test3));\n        assertEquals(+1, test3.compareTo(test1));\n        assertEquals(0, test3.compareTo(test2));\n        \n        assertEquals(0, new TimeOfDay(10, 20, 30, 40).compareTo(createTODPartial(ISO_UTC)));\n        \n        try {\n            test1.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n//        try {\n//            test1.compareTo(new Date());\n//            fail();\n//        } catch (ClassCastException ex) {}\n        try {\n            test1.compareTo(new YearMonthDay());\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            createTODPartial(ISO_UTC).without(DateTimeFieldType.hourOfDay()).compareTo(new YearMonthDay());\n            fail();\n        } catch (ClassCastException ex) {}\n    }\n",
        "begin_line": 208,
        "end_line": 244,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 47)",
            "(line 211,col 9)-(line 211,col 48)",
            "(line 212,col 9)-(line 212,col 49)",
            "(line 213,col 9)-(line 213,col 49)",
            "(line 214,col 9)-(line 214,col 48)",
            "(line 215,col 9)-(line 215,col 50)",
            "(line 217,col 9)-(line 217,col 55)",
            "(line 218,col 9)-(line 218,col 49)",
            "(line 219,col 9)-(line 219,col 49)",
            "(line 221,col 9)-(line 221,col 58)",
            "(line 222,col 9)-(line 222,col 49)",
            "(line 223,col 9)-(line 223,col 49)",
            "(line 224,col 9)-(line 224,col 48)",
            "(line 226,col 9)-(line 226,col 92)",
            "(line 228,col 9)-(line 231,col 44)",
            "(line 236,col 9)-(line 239,col 42)",
            "(line 240,col 9)-(line 243,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testIsEqual_TOD()",
        "snippet": "    public void testIsEqual_TOD() {\n        Partial test1 = createHourMinPartial();\n        Partial test1a = createHourMinPartial();\n        assertEquals(true, test1.isEqual(test1a));\n        assertEquals(true, test1a.isEqual(test1));\n        assertEquals(true, test1.isEqual(test1));\n        assertEquals(true, test1a.isEqual(test1a));\n        \n        Partial test2 = createHourMinPartial2(ISO_UTC);\n        assertEquals(false, test1.isEqual(test2));\n        assertEquals(false, test2.isEqual(test1));\n        \n        Partial test3 = createHourMinPartial2(COPTIC_UTC);\n        assertEquals(false, test1.isEqual(test3));\n        assertEquals(false, test3.isEqual(test1));\n        assertEquals(true, test3.isEqual(test2));\n        \n        try {\n            createHourMinPartial().isEqual(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 247,
        "end_line": 268,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 47)",
            "(line 249,col 9)-(line 249,col 48)",
            "(line 250,col 9)-(line 250,col 50)",
            "(line 251,col 9)-(line 251,col 50)",
            "(line 252,col 9)-(line 252,col 49)",
            "(line 253,col 9)-(line 253,col 51)",
            "(line 255,col 9)-(line 255,col 55)",
            "(line 256,col 9)-(line 256,col 50)",
            "(line 257,col 9)-(line 257,col 50)",
            "(line 259,col 9)-(line 259,col 58)",
            "(line 260,col 9)-(line 260,col 50)",
            "(line 261,col 9)-(line 261,col 50)",
            "(line 262,col 9)-(line 262,col 49)",
            "(line 264,col 9)-(line 267,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testIsBefore_TOD()",
        "snippet": "    public void testIsBefore_TOD() {\n        Partial test1 = createHourMinPartial();\n        Partial test1a = createHourMinPartial();\n        assertEquals(false, test1.isBefore(test1a));\n        assertEquals(false, test1a.isBefore(test1));\n        assertEquals(false, test1.isBefore(test1));\n        assertEquals(false, test1a.isBefore(test1a));\n        \n        Partial test2 = createHourMinPartial2(ISO_UTC);\n        assertEquals(true, test1.isBefore(test2));\n        assertEquals(false, test2.isBefore(test1));\n        \n        Partial test3 = createHourMinPartial2(COPTIC_UTC);\n        assertEquals(true, test1.isBefore(test3));\n        assertEquals(false, test3.isBefore(test1));\n        assertEquals(false, test3.isBefore(test2));\n        \n        try {\n            createHourMinPartial().isBefore(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 271,
        "end_line": 292,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 272,col 9)-(line 272,col 47)",
            "(line 273,col 9)-(line 273,col 48)",
            "(line 274,col 9)-(line 274,col 52)",
            "(line 275,col 9)-(line 275,col 52)",
            "(line 276,col 9)-(line 276,col 51)",
            "(line 277,col 9)-(line 277,col 53)",
            "(line 279,col 9)-(line 279,col 55)",
            "(line 280,col 9)-(line 280,col 50)",
            "(line 281,col 9)-(line 281,col 51)",
            "(line 283,col 9)-(line 283,col 58)",
            "(line 284,col 9)-(line 284,col 50)",
            "(line 285,col 9)-(line 285,col 51)",
            "(line 286,col 9)-(line 286,col 51)",
            "(line 288,col 9)-(line 291,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testIsAfter_TOD()",
        "snippet": "    public void testIsAfter_TOD() {\n        Partial test1 = createHourMinPartial();\n        Partial test1a = createHourMinPartial();\n        assertEquals(false, test1.isAfter(test1a));\n        assertEquals(false, test1a.isAfter(test1));\n        assertEquals(false, test1.isAfter(test1));\n        assertEquals(false, test1a.isAfter(test1a));\n        \n        Partial test2 = createHourMinPartial2(ISO_UTC);\n        assertEquals(false, test1.isAfter(test2));\n        assertEquals(true, test2.isAfter(test1));\n        \n        Partial test3 = createHourMinPartial2(COPTIC_UTC);\n        assertEquals(false, test1.isAfter(test3));\n        assertEquals(true, test3.isAfter(test1));\n        assertEquals(false, test3.isAfter(test2));\n        \n        try {\n            createHourMinPartial().isAfter(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 295,
        "end_line": 316,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 47)",
            "(line 297,col 9)-(line 297,col 48)",
            "(line 298,col 9)-(line 298,col 51)",
            "(line 299,col 9)-(line 299,col 51)",
            "(line 300,col 9)-(line 300,col 50)",
            "(line 301,col 9)-(line 301,col 52)",
            "(line 303,col 9)-(line 303,col 55)",
            "(line 304,col 9)-(line 304,col 50)",
            "(line 305,col 9)-(line 305,col 49)",
            "(line 307,col 9)-(line 307,col 58)",
            "(line 308,col 9)-(line 308,col 50)",
            "(line 309,col 9)-(line 309,col 49)",
            "(line 310,col 9)-(line 310,col 50)",
            "(line 312,col 9)-(line 315,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithChronologyRetainFields_Chrono()",
        "snippet": "    public void testWithChronologyRetainFields_Chrono() {\n        Partial base = createHourMinPartial(COPTIC_PARIS);\n        Partial test = base.withChronologyRetainFields(BUDDHIST_TOKYO);\n        check(base, 10, 20);\n        assertEquals(COPTIC_UTC, base.getChronology());\n        check(test, 10, 20);\n        assertEquals(BUDDHIST_UTC, test.getChronology());\n    }\n",
        "begin_line": 319,
        "end_line": 326,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 58)",
            "(line 321,col 9)-(line 321,col 71)",
            "(line 322,col 9)-(line 322,col 28)",
            "(line 323,col 9)-(line 323,col 55)",
            "(line 324,col 9)-(line 324,col 28)",
            "(line 325,col 9)-(line 325,col 57)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithChronologyRetainFields_sameChrono()",
        "snippet": "    public void testWithChronologyRetainFields_sameChrono() {\n        Partial base = createHourMinPartial(COPTIC_PARIS);\n        Partial test = base.withChronologyRetainFields(COPTIC_TOKYO);\n        assertSame(base, test);\n    }\n",
        "begin_line": 328,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 58)",
            "(line 330,col 9)-(line 330,col 69)",
            "(line 331,col 9)-(line 331,col 31)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithChronologyRetainFields_nullChrono()",
        "snippet": "    public void testWithChronologyRetainFields_nullChrono() {\n        Partial base = createHourMinPartial(COPTIC_PARIS);\n        Partial test = base.withChronologyRetainFields(null);\n        check(base, 10, 20);\n        assertEquals(COPTIC_UTC, base.getChronology());\n        check(test, 10, 20);\n        assertEquals(ISO_UTC, test.getChronology());\n    }\n",
        "begin_line": 334,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 58)",
            "(line 336,col 9)-(line 336,col 61)",
            "(line 337,col 9)-(line 337,col 28)",
            "(line 338,col 9)-(line 338,col 55)",
            "(line 339,col 9)-(line 339,col 28)",
            "(line 340,col 9)-(line 340,col 52)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith1()",
        "snippet": "    public void testWith1() {\n        Partial test = createHourMinPartial();\n        Partial result = test.with(DateTimeFieldType.hourOfDay(), 15);\n        check(test, 10, 20);\n        check(result, 15, 20);\n    }\n",
        "begin_line": 344,
        "end_line": 349,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 46)",
            "(line 346,col 9)-(line 346,col 70)",
            "(line 347,col 9)-(line 347,col 28)",
            "(line 348,col 9)-(line 348,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith2()",
        "snippet": "    public void testWith2() {\n        Partial test = createHourMinPartial();\n        try {\n            test.with(null, 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n",
        "begin_line": 351,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 352,col 9)-(line 352,col 46)",
            "(line 353,col 9)-(line 356,col 48)",
            "(line 357,col 9)-(line 357,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith3()",
        "snippet": "    public void testWith3() {\n        Partial test = createHourMinPartial();\n        try {\n            test.with(DateTimeFieldType.clockhourOfDay(), 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n",
        "begin_line": 360,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 361,col 9)-(line 361,col 46)",
            "(line 362,col 9)-(line 365,col 48)",
            "(line 366,col 9)-(line 366,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith3a()",
        "snippet": "    public void testWith3a() {\n        Partial test = createHourMinPartial();\n        Partial result = test.with(DateTimeFieldType.secondOfMinute(), 15);\n        check(test, 10, 20);\n        assertEquals(3, result.size());\n        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));\n        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));\n        assertEquals(true, result.isSupported(DateTimeFieldType.secondOfMinute()));\n        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));\n        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(1));\n        assertEquals(DateTimeFieldType.secondOfMinute(), result.getFieldType(2));\n        assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));\n        assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));\n        assertEquals(15, result.get(DateTimeFieldType.secondOfMinute()));\n    }\n",
        "begin_line": 369,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 46)",
            "(line 371,col 9)-(line 371,col 75)",
            "(line 372,col 9)-(line 372,col 28)",
            "(line 373,col 9)-(line 373,col 39)",
            "(line 374,col 9)-(line 374,col 78)",
            "(line 375,col 9)-(line 375,col 81)",
            "(line 376,col 9)-(line 376,col 83)",
            "(line 377,col 9)-(line 377,col 76)",
            "(line 378,col 9)-(line 378,col 79)",
            "(line 379,col 9)-(line 379,col 81)",
            "(line 380,col 9)-(line 380,col 68)",
            "(line 381,col 9)-(line 381,col 71)",
            "(line 382,col 9)-(line 382,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith3b()",
        "snippet": "    public void testWith3b() {\n        Partial test = createHourMinPartial();\n        Partial result = test.with(DateTimeFieldType.minuteOfDay(), 15);\n        check(test, 10, 20);\n        assertEquals(3, result.size());\n        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));\n        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfDay()));\n        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));\n        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));\n        assertEquals(DateTimeFieldType.minuteOfDay(), result.getFieldType(1));\n        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(2));\n        assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));\n        assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));\n        assertEquals(15, result.get(DateTimeFieldType.minuteOfDay()));\n    }\n",
        "begin_line": 385,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 46)",
            "(line 387,col 9)-(line 387,col 72)",
            "(line 388,col 9)-(line 388,col 28)",
            "(line 389,col 9)-(line 389,col 39)",
            "(line 390,col 9)-(line 390,col 78)",
            "(line 391,col 9)-(line 391,col 80)",
            "(line 392,col 9)-(line 392,col 81)",
            "(line 393,col 9)-(line 393,col 76)",
            "(line 394,col 9)-(line 394,col 78)",
            "(line 395,col 9)-(line 395,col 79)",
            "(line 396,col 9)-(line 396,col 68)",
            "(line 397,col 9)-(line 397,col 71)",
            "(line 398,col 9)-(line 398,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith3c()",
        "snippet": "    public void testWith3c() {\n        Partial test = createHourMinPartial();\n        Partial result = test.with(DateTimeFieldType.dayOfMonth(), 15);\n        check(test, 10, 20);\n        assertEquals(3, result.size());\n        assertEquals(true, result.isSupported(DateTimeFieldType.dayOfMonth()));\n        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));\n        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));\n        assertEquals(DateTimeFieldType.dayOfMonth(), result.getFieldType(0));\n        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(1));\n        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(2));\n        assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));\n        assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));\n        assertEquals(15, result.get(DateTimeFieldType.dayOfMonth()));\n    }\n",
        "begin_line": 401,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 402,col 9)-(line 402,col 46)",
            "(line 403,col 9)-(line 403,col 71)",
            "(line 404,col 9)-(line 404,col 28)",
            "(line 405,col 9)-(line 405,col 39)",
            "(line 406,col 9)-(line 406,col 79)",
            "(line 407,col 9)-(line 407,col 78)",
            "(line 408,col 9)-(line 408,col 81)",
            "(line 409,col 9)-(line 409,col 77)",
            "(line 410,col 9)-(line 410,col 76)",
            "(line 411,col 9)-(line 411,col 79)",
            "(line 412,col 9)-(line 412,col 68)",
            "(line 413,col 9)-(line 413,col 71)",
            "(line 414,col 9)-(line 414,col 69)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith3d()",
        "snippet": "    public void testWith3d() {\n        Partial test = new Partial(DateTimeFieldType.year(), 2005);\n        Partial result = test.with(DateTimeFieldType.monthOfYear(), 6);\n        assertEquals(2, result.size());\n        assertEquals(2005, result.get(DateTimeFieldType.year()));\n        assertEquals(6, result.get(DateTimeFieldType.monthOfYear()));\n    }        \n",
        "begin_line": 417,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 418,col 9)-(line 418,col 67)",
            "(line 419,col 9)-(line 419,col 71)",
            "(line 420,col 9)-(line 420,col 39)",
            "(line 421,col 9)-(line 421,col 65)",
            "(line 422,col 9)-(line 422,col 69)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith3e()",
        "snippet": "    public void testWith3e() {\n        Partial test = new Partial(DateTimeFieldType.era(), 1);\n        Partial result = test.with(DateTimeFieldType.halfdayOfDay(), 0);\n        assertEquals(2, result.size());\n        assertEquals(1, result.get(DateTimeFieldType.era()));\n        assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay()));\n        assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n        assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay()));\n    }        \n",
        "begin_line": 425,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 63)",
            "(line 427,col 9)-(line 427,col 72)",
            "(line 428,col 9)-(line 428,col 39)",
            "(line 429,col 9)-(line 429,col 61)",
            "(line 430,col 9)-(line 430,col 70)",
            "(line 431,col 9)-(line 431,col 65)",
            "(line 432,col 9)-(line 432,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith3f()",
        "snippet": "    public void testWith3f() {\n        Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0);\n        Partial result = test.with(DateTimeFieldType.era(), 1);\n        assertEquals(2, result.size());\n        assertEquals(1, result.get(DateTimeFieldType.era()));\n        assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay()));\n        assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n        assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay()));\n    }        \n",
        "begin_line": 435,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 436,col 9)-(line 436,col 72)",
            "(line 437,col 9)-(line 437,col 63)",
            "(line 438,col 9)-(line 438,col 39)",
            "(line 439,col 9)-(line 439,col 61)",
            "(line 440,col 9)-(line 440,col 70)",
            "(line 441,col 9)-(line 441,col 65)",
            "(line 442,col 9)-(line 442,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith4()",
        "snippet": "    public void testWith4() {\n        Partial test = createHourMinPartial();\n        Partial result = test.with(DateTimeFieldType.hourOfDay(), 10);\n        assertSame(test, result);\n    }\n",
        "begin_line": 445,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 446,col 9)-(line 446,col 46)",
            "(line 447,col 9)-(line 447,col 70)",
            "(line 448,col 9)-(line 448,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith_baseHasNoRange()",
        "snippet": "    public void testWith_baseHasNoRange() {\n        Partial test = new Partial(DateTimeFieldType.year(), 1);\n        Partial result = test.with(DateTimeFieldType.hourOfDay(), 10);\n        assertEquals(2, result.size());\n        assertEquals(0, result.indexOf(DateTimeFieldType.year()));\n        assertEquals(1, result.indexOf(DateTimeFieldType.hourOfDay()));\n    }\n",
        "begin_line": 451,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 64)",
            "(line 453,col 9)-(line 453,col 70)",
            "(line 454,col 9)-(line 454,col 39)",
            "(line 455,col 9)-(line 455,col 66)",
            "(line 456,col 9)-(line 456,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith_argHasNoRange()",
        "snippet": "    public void testWith_argHasNoRange() {\n        Partial test = new Partial(DateTimeFieldType.hourOfDay(), 1);\n        Partial result = test.with(DateTimeFieldType.year(), 10);\n        assertEquals(2, result.size());\n        assertEquals(0, result.indexOf(DateTimeFieldType.year()));\n        assertEquals(1, result.indexOf(DateTimeFieldType.hourOfDay()));\n    }\n",
        "begin_line": 459,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 460,col 9)-(line 460,col 69)",
            "(line 461,col 9)-(line 461,col 65)",
            "(line 462,col 9)-(line 462,col 39)",
            "(line 463,col 9)-(line 463,col 66)",
            "(line 464,col 9)-(line 464,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange()",
        "snippet": "    public void testWith_baseAndArgHaveNoRange() {\n        Partial test = new Partial(DateTimeFieldType.year(), 1);\n        Partial result = test.with(DateTimeFieldType.era(), 1);\n        assertEquals(2, result.size());\n        assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n        assertEquals(1, result.indexOf(DateTimeFieldType.year()));\n    }\n",
        "begin_line": 467,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 468,col 9)-(line 468,col 64)",
            "(line 469,col 9)-(line 469,col 63)",
            "(line 470,col 9)-(line 470,col 39)",
            "(line 471,col 9)-(line 471,col 65)",
            "(line 472,col 9)-(line 472,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithout1()",
        "snippet": "    public void testWithout1() {\n        Partial test = createHourMinPartial();\n        Partial result = test.without(DateTimeFieldType.year());\n        check(test, 10, 20);\n        check(result, 10, 20);\n    }\n",
        "begin_line": 476,
        "end_line": 481,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 477,col 9)-(line 477,col 46)",
            "(line 478,col 9)-(line 478,col 64)",
            "(line 479,col 9)-(line 479,col 28)",
            "(line 480,col 9)-(line 480,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithout2()",
        "snippet": "    public void testWithout2() {\n        Partial test = createHourMinPartial();\n        Partial result = test.without((DateTimeFieldType) null);\n        check(test, 10, 20);\n        check(result, 10, 20);\n    }\n",
        "begin_line": 483,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 484,col 9)-(line 484,col 46)",
            "(line 485,col 9)-(line 485,col 64)",
            "(line 486,col 9)-(line 486,col 28)",
            "(line 487,col 9)-(line 487,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithout3()",
        "snippet": "    public void testWithout3() {\n        Partial test = createHourMinPartial();\n        Partial result = test.without(DateTimeFieldType.hourOfDay());\n        check(test, 10, 20);\n        assertEquals(1, result.size());\n        assertEquals(false, result.isSupported(DateTimeFieldType.hourOfDay()));\n        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));\n        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(0));\n    }\n",
        "begin_line": 490,
        "end_line": 498,
        "comment": "",
        "child_ranges": [
            "(line 491,col 9)-(line 491,col 46)",
            "(line 492,col 9)-(line 492,col 69)",
            "(line 493,col 9)-(line 493,col 28)",
            "(line 494,col 9)-(line 494,col 39)",
            "(line 495,col 9)-(line 495,col 79)",
            "(line 496,col 9)-(line 496,col 81)",
            "(line 497,col 9)-(line 497,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithout4()",
        "snippet": "    public void testWithout4() {\n        Partial test = createHourMinPartial();\n        Partial result = test.without(DateTimeFieldType.minuteOfHour());\n        check(test, 10, 20);\n        assertEquals(1, result.size());\n        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));\n        assertEquals(false, result.isSupported(DateTimeFieldType.minuteOfHour()));\n        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));\n    }\n",
        "begin_line": 500,
        "end_line": 508,
        "comment": "",
        "child_ranges": [
            "(line 501,col 9)-(line 501,col 46)",
            "(line 502,col 9)-(line 502,col 72)",
            "(line 503,col 9)-(line 503,col 28)",
            "(line 504,col 9)-(line 504,col 39)",
            "(line 505,col 9)-(line 505,col 78)",
            "(line 506,col 9)-(line 506,col 82)",
            "(line 507,col 9)-(line 507,col 76)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithout5()",
        "snippet": "    public void testWithout5() {\n        Partial test = new Partial(DateTimeFieldType.hourOfDay(), 12);\n        Partial result = test.without(DateTimeFieldType.hourOfDay());\n        assertEquals(0, result.size());\n        assertEquals(false, result.isSupported(DateTimeFieldType.hourOfDay()));\n    }\n",
        "begin_line": 510,
        "end_line": 515,
        "comment": "",
        "child_ranges": [
            "(line 511,col 9)-(line 511,col 70)",
            "(line 512,col 9)-(line 512,col 69)",
            "(line 513,col 9)-(line 513,col 39)",
            "(line 514,col 9)-(line 514,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithField1()",
        "snippet": "    public void testWithField1() {\n        Partial test = createHourMinPartial();\n        Partial result = test.withField(DateTimeFieldType.hourOfDay(), 15);\n        check(test, 10, 20);\n        check(result, 15, 20);\n    }\n",
        "begin_line": 518,
        "end_line": 523,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 519,col 9)-(line 519,col 46)",
            "(line 520,col 9)-(line 520,col 75)",
            "(line 521,col 9)-(line 521,col 28)",
            "(line 522,col 9)-(line 522,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithField2()",
        "snippet": "    public void testWithField2() {\n        Partial test = createHourMinPartial();\n        try {\n            test.withField(null, 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n",
        "begin_line": 525,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 526,col 9)-(line 526,col 46)",
            "(line 527,col 9)-(line 530,col 48)",
            "(line 531,col 9)-(line 531,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithField3()",
        "snippet": "    public void testWithField3() {\n        Partial test = createHourMinPartial();\n        try {\n            test.withField(DateTimeFieldType.dayOfMonth(), 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n",
        "begin_line": 534,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 535,col 9)-(line 535,col 46)",
            "(line 536,col 9)-(line 539,col 48)",
            "(line 540,col 9)-(line 540,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithField4()",
        "snippet": "    public void testWithField4() {\n        Partial test = createHourMinPartial();\n        Partial result = test.withField(DateTimeFieldType.hourOfDay(), 10);\n        assertSame(test, result);\n    }\n",
        "begin_line": 543,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 544,col 9)-(line 544,col 46)",
            "(line 545,col 9)-(line 545,col 75)",
            "(line 546,col 9)-(line 546,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAdded1()",
        "snippet": "    public void testWithFieldAdded1() {\n        Partial test = createHourMinPartial();\n        Partial result = test.withFieldAdded(DurationFieldType.hours(), 6);\n        \n        assertEquals(createHourMinPartial(), test);\n        check(test, 10, 20);\n        check(result, 16, 20);\n    }\n",
        "begin_line": 550,
        "end_line": 557,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 551,col 9)-(line 551,col 46)",
            "(line 552,col 9)-(line 552,col 75)",
            "(line 554,col 9)-(line 554,col 51)",
            "(line 555,col 9)-(line 555,col 28)",
            "(line 556,col 9)-(line 556,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAdded2()",
        "snippet": "    public void testWithFieldAdded2() {\n        Partial test = createHourMinPartial();\n        try {\n            test.withFieldAdded(null, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n",
        "begin_line": 559,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 46)",
            "(line 561,col 9)-(line 564,col 48)",
            "(line 565,col 9)-(line 565,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAdded3()",
        "snippet": "    public void testWithFieldAdded3() {\n        Partial test = createHourMinPartial();\n        try {\n            test.withFieldAdded(null, 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n",
        "begin_line": 568,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 569,col 9)-(line 569,col 46)",
            "(line 570,col 9)-(line 573,col 48)",
            "(line 574,col 9)-(line 574,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAdded4()",
        "snippet": "    public void testWithFieldAdded4() {\n        Partial test = createHourMinPartial();\n        Partial result = test.withFieldAdded(DurationFieldType.hours(), 0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 577,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 578,col 9)-(line 578,col 46)",
            "(line 579,col 9)-(line 579,col 75)",
            "(line 580,col 9)-(line 580,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAdded5()",
        "snippet": "    public void testWithFieldAdded5() {\n        Partial test = createHourMinPartial();\n        try {\n            test.withFieldAdded(DurationFieldType.days(), 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n",
        "begin_line": 583,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 584,col 9)-(line 584,col 46)",
            "(line 585,col 9)-(line 588,col 48)",
            "(line 589,col 9)-(line 589,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAdded6()",
        "snippet": "    public void testWithFieldAdded6() {\n        Partial test = createHourMinPartial();\n        try {\n            test.withFieldAdded(DurationFieldType.hours(), 16);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        check(test, 10, 20);\n    }\n",
        "begin_line": 592,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 593,col 9)-(line 593,col 46)",
            "(line 594,col 9)-(line 599,col 9)",
            "(line 600,col 9)-(line 600,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAdded7()",
        "snippet": "    public void testWithFieldAdded7() {\n        Partial test = createHourMinPartial(23, 59, ISO_UTC);\n        try {\n            test.withFieldAdded(DurationFieldType.minutes(), 1);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        check(test, 23, 59);\n        \n        test = createHourMinPartial(23, 59, ISO_UTC);\n        try {\n            test.withFieldAdded(DurationFieldType.hours(), 1);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        check(test, 23, 59);\n    }\n",
        "begin_line": 603,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 604,col 9)-(line 604,col 61)",
            "(line 605,col 9)-(line 610,col 9)",
            "(line 611,col 9)-(line 611,col 28)",
            "(line 613,col 9)-(line 613,col 53)",
            "(line 614,col 9)-(line 619,col 9)",
            "(line 620,col 9)-(line 620,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAdded8()",
        "snippet": "    public void testWithFieldAdded8() {\n        Partial test = createHourMinPartial(0, 0, ISO_UTC);\n        try {\n            test.withFieldAdded(DurationFieldType.minutes(), -1);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        check(test, 0, 0);\n        \n        test = createHourMinPartial(0, 0, ISO_UTC);\n        try {\n            test.withFieldAdded(DurationFieldType.hours(), -1);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        check(test, 0, 0);\n    }\n",
        "begin_line": 623,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 624,col 9)-(line 624,col 59)",
            "(line 625,col 9)-(line 630,col 9)",
            "(line 631,col 9)-(line 631,col 26)",
            "(line 633,col 9)-(line 633,col 51)",
            "(line 634,col 9)-(line 639,col 9)",
            "(line 640,col 9)-(line 640,col 26)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAddWrapped1()",
        "snippet": "    public void testWithFieldAddWrapped1() {\n        Partial test = createHourMinPartial();\n        Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 6);\n        \n        assertEquals(createHourMinPartial(), test);\n        check(test, 10, 20);\n        check(result, 16, 20);\n    }\n",
        "begin_line": 644,
        "end_line": 651,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 645,col 9)-(line 645,col 46)",
            "(line 646,col 9)-(line 646,col 80)",
            "(line 648,col 9)-(line 648,col 51)",
            "(line 649,col 9)-(line 649,col 28)",
            "(line 650,col 9)-(line 650,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAddWrapped2()",
        "snippet": "    public void testWithFieldAddWrapped2() {\n        Partial test = createHourMinPartial();\n        try {\n            test.withFieldAddWrapped(null, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n",
        "begin_line": 653,
        "end_line": 660,
        "comment": "",
        "child_ranges": [
            "(line 654,col 9)-(line 654,col 46)",
            "(line 655,col 9)-(line 658,col 48)",
            "(line 659,col 9)-(line 659,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAddWrapped3()",
        "snippet": "    public void testWithFieldAddWrapped3() {\n        Partial test = createHourMinPartial();\n        try {\n            test.withFieldAddWrapped(null, 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n",
        "begin_line": 662,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 663,col 9)-(line 663,col 46)",
            "(line 664,col 9)-(line 667,col 48)",
            "(line 668,col 9)-(line 668,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAddWrapped4()",
        "snippet": "    public void testWithFieldAddWrapped4() {\n        Partial test = createHourMinPartial();\n        Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 671,
        "end_line": 675,
        "comment": "",
        "child_ranges": [
            "(line 672,col 9)-(line 672,col 46)",
            "(line 673,col 9)-(line 673,col 80)",
            "(line 674,col 9)-(line 674,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAddWrapped5()",
        "snippet": "    public void testWithFieldAddWrapped5() {\n        Partial test = createHourMinPartial();\n        try {\n            test.withFieldAddWrapped(DurationFieldType.days(), 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n",
        "begin_line": 677,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 678,col 9)-(line 678,col 46)",
            "(line 679,col 9)-(line 682,col 48)",
            "(line 683,col 9)-(line 683,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAddWrapped6()",
        "snippet": "    public void testWithFieldAddWrapped6() {\n        Partial test = createHourMinPartial();\n        Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 16);\n        \n        assertEquals(createHourMinPartial(), test);\n        check(test, 10, 20);\n        check(result, 2, 20);\n    }\n",
        "begin_line": 686,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 687,col 9)-(line 687,col 46)",
            "(line 688,col 9)-(line 688,col 81)",
            "(line 690,col 9)-(line 690,col 51)",
            "(line 691,col 9)-(line 691,col 28)",
            "(line 692,col 9)-(line 692,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAddWrapped7()",
        "snippet": "    public void testWithFieldAddWrapped7() {\n        Partial test = createHourMinPartial(23, 59, ISO_UTC);\n        Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), 1);\n        check(test, 23, 59);\n        check(result, 0, 0);\n        \n        test = createHourMinPartial(23, 59, ISO_UTC);\n        result = test.withFieldAddWrapped(DurationFieldType.hours(), 1);\n        check(test, 23, 59);\n        check(result, 0, 59);\n    }\n",
        "begin_line": 695,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 696,col 9)-(line 696,col 61)",
            "(line 697,col 9)-(line 697,col 82)",
            "(line 698,col 9)-(line 698,col 28)",
            "(line 699,col 9)-(line 699,col 28)",
            "(line 701,col 9)-(line 701,col 53)",
            "(line 702,col 9)-(line 702,col 72)",
            "(line 703,col 9)-(line 703,col 28)",
            "(line 704,col 9)-(line 704,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testWithFieldAddWrapped8()",
        "snippet": "    public void testWithFieldAddWrapped8() {\n        Partial test = createHourMinPartial(0, 0, ISO_UTC);\n        Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), -1);\n        check(test, 0, 0);\n        check(result, 23, 59);\n        \n        test = createHourMinPartial(0, 0, ISO_UTC);\n        result = test.withFieldAddWrapped(DurationFieldType.hours(), -1);\n        check(test, 0, 0);\n        check(result, 23, 0);\n    }\n",
        "begin_line": 707,
        "end_line": 717,
        "comment": "",
        "child_ranges": [
            "(line 708,col 9)-(line 708,col 59)",
            "(line 709,col 9)-(line 709,col 83)",
            "(line 710,col 9)-(line 710,col 26)",
            "(line 711,col 9)-(line 711,col 30)",
            "(line 713,col 9)-(line 713,col 51)",
            "(line 714,col 9)-(line 714,col 73)",
            "(line 715,col 9)-(line 715,col 26)",
            "(line 716,col 9)-(line 716,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testPlus_RP()",
        "snippet": "    public void testPlus_RP() {\n        Partial test = createHourMinPartial(BUDDHIST_LONDON);\n        Partial result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n        check(test, 10, 20);\n        check(result, 15, 26);\n        \n        result = test.plus((ReadablePeriod) null);\n        assertSame(test, result);\n    }\n",
        "begin_line": 720,
        "end_line": 728,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 721,col 9)-(line 721,col 61)",
            "(line 722,col 9)-(line 722,col 71)",
            "(line 723,col 9)-(line 723,col 28)",
            "(line 724,col 9)-(line 724,col 30)",
            "(line 726,col 9)-(line 726,col 50)",
            "(line 727,col 9)-(line 727,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testMinus_RP()",
        "snippet": "    public void testMinus_RP() {\n        Partial test = createHourMinPartial(BUDDHIST_LONDON);\n        Partial result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n        check(test, 10, 20);\n        check(result, 9, 19);\n        \n        result = test.minus((ReadablePeriod) null);\n        assertSame(test, result);\n    }\n",
        "begin_line": 731,
        "end_line": 739,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 732,col 9)-(line 732,col 61)",
            "(line 733,col 9)-(line 733,col 72)",
            "(line 734,col 9)-(line 734,col 28)",
            "(line 735,col 9)-(line 735,col 29)",
            "(line 737,col 9)-(line 737,col 51)",
            "(line 738,col 9)-(line 738,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testToDateTime_RI()",
        "snippet": "    public void testToDateTime_RI() {\n        Partial base = createHourMinPartial(COPTIC_PARIS);\n        DateTime dt = new DateTime(0L); // LONDON zone\n        assertEquals(\"1970-01-01T01:00:00.000+01:00\", dt.toString());\n        \n        DateTime test = base.toDateTime(dt);\n        check(base, 10, 20);\n        assertEquals(\"1970-01-01T01:00:00.000+01:00\", dt.toString());\n        assertEquals(\"1970-01-01T10:20:00.000+01:00\", test.toString());\n    }\n",
        "begin_line": 742,
        "end_line": 751,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 743,col 9)-(line 743,col 58)",
            "(line 744,col 9)-(line 744,col 39)",
            "(line 745,col 9)-(line 745,col 69)",
            "(line 747,col 9)-(line 747,col 44)",
            "(line 748,col 9)-(line 748,col 28)",
            "(line 749,col 9)-(line 749,col 69)",
            "(line 750,col 9)-(line 750,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testToDateTime_nullRI()",
        "snippet": "    public void testToDateTime_nullRI() {\n        Partial base = createHourMinPartial(1, 2, ISO_UTC);\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n        \n        DateTime test = base.toDateTime((ReadableInstant) null);\n        check(base, 1, 2);\n        assertEquals(\"1970-01-02T01:02:07.008+01:00\", test.toString());\n    }\n",
        "begin_line": 753,
        "end_line": 760,
        "comment": "",
        "child_ranges": [
            "(line 754,col 9)-(line 754,col 59)",
            "(line 755,col 9)-(line 755,col 56)",
            "(line 757,col 9)-(line 757,col 64)",
            "(line 758,col 9)-(line 758,col 26)",
            "(line 759,col 9)-(line 759,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testProperty()",
        "snippet": "    public void testProperty() {\n        Partial test = createHourMinPartial();\n        assertNotNull(test.property(DateTimeFieldType.hourOfDay()));\n        assertNotNull(test.property(DateTimeFieldType.minuteOfHour()));\n        try {\n            test.property(DateTimeFieldType.secondOfDay());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            test.property(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 763,
        "end_line": 775,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 764,col 9)-(line 764,col 46)",
            "(line 765,col 9)-(line 765,col 68)",
            "(line 766,col 9)-(line 766,col 71)",
            "(line 767,col 9)-(line 770,col 48)",
            "(line 771,col 9)-(line 774,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testSerialization()",
        "snippet": "    public void testSerialization() throws Exception {\n        Partial test = createHourMinPartial(COPTIC_PARIS);\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(test);\n        byte[] bytes = baos.toByteArray();\n        oos.close();\n        \n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        Partial result = (Partial) ois.readObject();\n        ois.close();\n        \n        assertEquals(test, result);\n        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n        assertEquals(test.getChronology(), result.getChronology());\n    }\n",
        "begin_line": 778,
        "end_line": 796,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 779,col 9)-(line 779,col 58)",
            "(line 781,col 9)-(line 781,col 65)",
            "(line 782,col 9)-(line 782,col 62)",
            "(line 783,col 9)-(line 783,col 30)",
            "(line 784,col 9)-(line 784,col 42)",
            "(line 785,col 9)-(line 785,col 20)",
            "(line 787,col 9)-(line 787,col 68)",
            "(line 788,col 9)-(line 788,col 60)",
            "(line 789,col 9)-(line 789,col 52)",
            "(line 790,col 9)-(line 790,col 20)",
            "(line 792,col 9)-(line 792,col 35)",
            "(line 793,col 9)-(line 793,col 72)",
            "(line 794,col 9)-(line 794,col 72)",
            "(line 795,col 9)-(line 795,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testGetFormatter1()",
        "snippet": "    public void testGetFormatter1() {\n        Partial test = new Partial(DateTimeFieldType.year(), 2005);\n        assertEquals(\"2005\", test.getFormatter().print(test));\n        \n        test = test.with(DateTimeFieldType.monthOfYear(), 6);\n        assertEquals(\"2005-06\", test.getFormatter().print(test));\n        \n        test = test.with(DateTimeFieldType.dayOfMonth(), 25);\n        assertEquals(\"2005-06-25\", test.getFormatter().print(test));\n        \n        test = test.without(DateTimeFieldType.monthOfYear());\n        assertEquals(\"2005--25\", test.getFormatter().print(test));\n    }\n",
        "begin_line": 799,
        "end_line": 811,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 800,col 9)-(line 800,col 67)",
            "(line 801,col 9)-(line 801,col 62)",
            "(line 803,col 9)-(line 803,col 61)",
            "(line 804,col 9)-(line 804,col 65)",
            "(line 806,col 9)-(line 806,col 61)",
            "(line 807,col 9)-(line 807,col 68)",
            "(line 809,col 9)-(line 809,col 61)",
            "(line 810,col 9)-(line 810,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testGetFormatter2()",
        "snippet": "    public void testGetFormatter2() {\n        Partial test = new Partial();\n        assertEquals(null, test.getFormatter());\n        \n        test = test.with(DateTimeFieldType.era(), 1);\n        assertEquals(null, test.getFormatter());\n        \n        test = test.with(DateTimeFieldType.halfdayOfDay(), 0);\n        assertEquals(null, test.getFormatter());\n    }\n",
        "begin_line": 813,
        "end_line": 822,
        "comment": "",
        "child_ranges": [
            "(line 814,col 9)-(line 814,col 37)",
            "(line 815,col 9)-(line 815,col 48)",
            "(line 817,col 9)-(line 817,col 53)",
            "(line 818,col 9)-(line 818,col 48)",
            "(line 820,col 9)-(line 820,col 62)",
            "(line 821,col 9)-(line 821,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testGetFormatter3()",
        "snippet": "    public void testGetFormatter3() {\n        Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5);\n        assertEquals(\"-W-5\", test.getFormatter().print(test));\n        \n        // contrast with testToString5\n        test = test.with(DateTimeFieldType.dayOfMonth(), 13);\n        assertEquals(\"---13\", test.getFormatter().print(test));\n    }\n",
        "begin_line": 824,
        "end_line": 831,
        "comment": "",
        "child_ranges": [
            "(line 825,col 9)-(line 825,col 69)",
            "(line 826,col 9)-(line 826,col 62)",
            "(line 829,col 9)-(line 829,col 61)",
            "(line 830,col 9)-(line 830,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testToString1()",
        "snippet": "    public void testToString1() {\n        Partial test = createHourMinPartial();\n        assertEquals(\"10:20\", test.toString());\n    }\n",
        "begin_line": 834,
        "end_line": 837,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 835,col 9)-(line 835,col 46)",
            "(line 836,col 9)-(line 836,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testToString2()",
        "snippet": "    public void testToString2() {\n        Partial test = new Partial();\n        assertEquals(\"[]\", test.toString());\n    }\n",
        "begin_line": 839,
        "end_line": 842,
        "comment": "",
        "child_ranges": [
            "(line 840,col 9)-(line 840,col 37)",
            "(line 841,col 9)-(line 841,col 44)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testToString3()",
        "snippet": "    public void testToString3() {\n        Partial test = new Partial(DateTimeFieldType.year(), 2005);\n        assertEquals(\"2005\", test.toString());\n        \n        test = test.with(DateTimeFieldType.monthOfYear(), 6);\n        assertEquals(\"2005-06\", test.toString());\n        \n        test = test.with(DateTimeFieldType.dayOfMonth(), 25);\n        assertEquals(\"2005-06-25\", test.toString());\n        \n        test = test.without(DateTimeFieldType.monthOfYear());\n        assertEquals(\"2005--25\", test.toString());\n    }\n",
        "begin_line": 844,
        "end_line": 856,
        "comment": "",
        "child_ranges": [
            "(line 845,col 9)-(line 845,col 67)",
            "(line 846,col 9)-(line 846,col 46)",
            "(line 848,col 9)-(line 848,col 61)",
            "(line 849,col 9)-(line 849,col 49)",
            "(line 851,col 9)-(line 851,col 61)",
            "(line 852,col 9)-(line 852,col 52)",
            "(line 854,col 9)-(line 854,col 61)",
            "(line 855,col 9)-(line 855,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testToString4()",
        "snippet": "    public void testToString4() {\n        Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5);\n        assertEquals(\"-W-5\", test.toString());\n        \n        test = test.with(DateTimeFieldType.dayOfMonth(), 13);\n        assertEquals(\"[dayOfMonth=13, dayOfWeek=5]\", test.toString());\n    }\n",
        "begin_line": 858,
        "end_line": 864,
        "comment": "",
        "child_ranges": [
            "(line 859,col 9)-(line 859,col 69)",
            "(line 860,col 9)-(line 860,col 46)",
            "(line 862,col 9)-(line 862,col 61)",
            "(line 863,col 9)-(line 863,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testToString5()",
        "snippet": "    public void testToString5() {\n        Partial test = new Partial(DateTimeFieldType.era(), 1);\n        assertEquals(\"[era=1]\", test.toString());\n        \n        test = test.with(DateTimeFieldType.halfdayOfDay(), 0);\n        assertEquals(\"[era=1, halfdayOfDay=0]\", test.toString());\n    }\n",
        "begin_line": 866,
        "end_line": 872,
        "comment": "",
        "child_ranges": [
            "(line 867,col 9)-(line 867,col 63)",
            "(line 868,col 9)-(line 868,col 49)",
            "(line 870,col 9)-(line 870,col 62)",
            "(line 871,col 9)-(line 871,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testToString_String()",
        "snippet": "    public void testToString_String() {\n        Partial test = createHourMinPartial();\n        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(\"yyyy HH\"));\n        assertEquals(\"10:20\", test.toString((String) null));\n    }\n",
        "begin_line": 875,
        "end_line": 879,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 876,col 9)-(line 876,col 46)",
            "(line 877,col 9)-(line 877,col 78)",
            "(line 878,col 9)-(line 878,col 60)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testToString_String_Locale()",
        "snippet": "    public void testToString_String_Locale() {\n        Partial test = createHourMinPartial();\n        assertEquals(\"10 20\", test.toString(\"H m\", Locale.ENGLISH));\n        assertEquals(\"10:20\", test.toString(null, Locale.ENGLISH));\n        assertEquals(\"10 20\", test.toString(\"H m\", null));\n        assertEquals(\"10:20\", test.toString(null, null));\n    }\n",
        "begin_line": 882,
        "end_line": 888,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 883,col 9)-(line 883,col 46)",
            "(line 884,col 9)-(line 884,col 68)",
            "(line 885,col 9)-(line 885,col 67)",
            "(line 886,col 9)-(line 886,col 58)",
            "(line 887,col 9)-(line 887,col 57)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.testToString_DTFormatter()",
        "snippet": "    public void testToString_DTFormatter() {\n        Partial test = createHourMinPartial();\n        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n        assertEquals(\"10:20\", test.toString((DateTimeFormatter) null));\n    }\n",
        "begin_line": 891,
        "end_line": 895,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 892,col 9)-(line 892,col 46)",
            "(line 893,col 9)-(line 893,col 105)",
            "(line 894,col 9)-(line 894,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.createHourMinPartial()",
        "snippet": "    private Partial createHourMinPartial() {\n        return createHourMinPartial(ISO_UTC);\n    }\n",
        "begin_line": 898,
        "end_line": 900,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 899,col 9)-(line 899,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.createHourMinPartial(org.joda.time.Chronology)",
        "snippet": "    private Partial createHourMinPartial(Chronology chrono) {\n        return createHourMinPartial(10, 20, chrono);\n    }\n",
        "begin_line": 902,
        "end_line": 904,
        "comment": "",
        "child_ranges": [
            "(line 903,col 9)-(line 903,col 52)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.createHourMinPartial2(org.joda.time.Chronology)",
        "snippet": "    private Partial createHourMinPartial2(Chronology chrono) {\n        return createHourMinPartial(15, 20, chrono);\n    }\n",
        "begin_line": 906,
        "end_line": 908,
        "comment": "",
        "child_ranges": [
            "(line 907,col 9)-(line 907,col 52)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.createHourMinPartial(int, int, org.joda.time.Chronology)",
        "snippet": "    private Partial createHourMinPartial(int hour, int min, Chronology chrono) {\n        return new Partial(\n            new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour()},\n            new int[] {hour, min},\n            chrono);\n    }\n",
        "begin_line": 910,
        "end_line": 915,
        "comment": "",
        "child_ranges": [
            "(line 911,col 9)-(line 914,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.createTODPartial(org.joda.time.Chronology)",
        "snippet": "    private Partial createTODPartial(Chronology chrono) {\n        return new Partial(\n            new DateTimeFieldType[] {\n                    DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),\n                    DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},\n            new int[] {10, 20, 30, 40},\n            chrono);\n    }\n",
        "begin_line": 917,
        "end_line": 924,
        "comment": "",
        "child_ranges": [
            "(line 918,col 9)-(line 923,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Basics.java",
        "signature": "org.joda.time.TestPartial_Basics.check(org.joda.time.Partial, int, int)",
        "snippet": "    private void check(Partial test, int hour, int min) {\n        assertEquals(test.toString(), hour, test.get(DateTimeFieldType.hourOfDay()));\n        assertEquals(test.toString(), min, test.get(DateTimeFieldType.minuteOfHour()));\n    }\n",
        "begin_line": 926,
        "end_line": 929,
        "comment": "",
        "child_ranges": [
            "(line 927,col 9)-(line 927,col 85)",
            "(line 928,col 9)-(line 928,col 87)"
        ]
    }
]