[
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.simplex",
        "snippet": "    protected RealPointValuePair[] simplex;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Simplex. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.f",
        "snippet": "    private MultivariateRealFunction f;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " Objective function. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.checker",
        "snippet": "    private RealConvergenceChecker checker;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Convergence checker. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.iterations",
        "snippet": "    private int iterations;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Number of iterations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.evaluations",
        "snippet": "    private int evaluations;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Number of evaluations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.startConfiguration",
        "snippet": "    private double[][] startConfiguration;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " Start simplex configuration. "
    },
    {
        "class_name": "org.apache.commons.math.MaxIterationsExceededException",
        "src_path": "src/main/java/org/apache/commons/math/MaxIterationsExceededException.java",
        "signature": "org.apache.commons.math.MaxIterationsExceededException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7821226672760574694L;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MaxIterationsExceededException",
        "src_path": "src/main/java/org/apache/commons/math/MaxIterationsExceededException.java",
        "signature": "org.apache.commons.math.MaxIterationsExceededException.maxIterations",
        "snippet": "    private final int maxIterations;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.MathException",
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "signature": "org.apache.commons.math.MathException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -9004610152740737812L;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathException",
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "signature": "org.apache.commons.math.MathException.pattern",
        "snippet": "    private final String pattern;",
        "begin_line": 44,
        "end_line": 44,
        "comment": "\n     * Pattern used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.MathException",
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "signature": "org.apache.commons.math.MathException.arguments",
        "snippet": "    private final Object[] arguments;",
        "begin_line": 49,
        "end_line": 49,
        "comment": "\n     * Arguments used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.ConvergenceException",
        "src_path": "src/main/java/org/apache/commons/math/ConvergenceException.java",
        "signature": "org.apache.commons.math.ConvergenceException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4883703247677159141L;",
        "begin_line": 28,
        "end_line": 28,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.DEFAULT_RELATIVE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Default relative threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.DEFAULT_ABSOLUTE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Default absolute threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.relativeThreshold",
        "snippet": "    private final double relativeThreshold;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Relative tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.absoluteThreshold",
        "snippet": "    private final double absoluteThreshold;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Absolute tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1003888396256744753L;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.point",
        "snippet": "    private final double[] point;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Point coordinates. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.value",
        "snippet": "    private final double value;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Value of the objective function at the point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectional",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectional.khi",
        "snippet": "    private final double khi;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Expansion coefficient. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectional",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectional.gamma",
        "snippet": "    private final double gamma;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Contraction coefficient. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.OptimizationException",
        "src_path": "src/main/java/org/apache/commons/math/optimization/OptimizationException.java",
        "signature": "org.apache.commons.math.optimization.OptimizationException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -357696069587075016L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    }
]