[
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testFunctionEvaluationExceptions()",
        "snippet": "  @Test\n  public void testFunctionEvaluationExceptions() {\n      MultivariateRealFunction wrong =\n          new MultivariateRealFunction() {\n            private static final long serialVersionUID = 4751314470965489371L;\n            public double value(double[] x) throws FunctionEvaluationException {\n                if (x[0] < 0) {\n                    throw new FunctionEvaluationException(x, \"{0}\", \"oops\");\n                } else if (x[0] > 1) {\n                    throw new FunctionEvaluationException(new RuntimeException(\"oops\"), x);\n                } else {\n                    return x[0] * (1 - x[0]);\n                }\n            }\n      };\n      try {\n          MultiDirectional optimizer = new MultiDirectional(0.9, 1.9);\n          optimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { -1.0 });\n          Assert.fail(\"an exception should have been thrown\");\n      } catch (FunctionEvaluationException ce) {\n          // expected behavior\n          Assert.assertNull(ce.getCause());\n      } catch (Exception e) {\n          Assert.fail(\"wrong exception caught: \" + e.getMessage());\n      } \n      try {\n          MultiDirectional optimizer = new MultiDirectional(0.9, 1.9);\n          optimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { +2.0 });\n          Assert.fail(\"an exception should have been thrown\");\n      } catch (FunctionEvaluationException ce) {\n          // expected behavior\n          Assert.assertNotNull(ce.getCause());\n      } catch (Exception e) {\n          Assert.fail(\"wrong exception caught: \" + e.getMessage());\n      } \n  }\n",
        "begin_line": 32,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 34,col 7)-(line 46,col 8)",
            "(line 47,col 7)-(line 56,col 7)",
            "(line 57,col 7)-(line 66,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.Anonymous-1d283c3a-e535-44dc-98cc-203ad20227e4.value(double[])",
        "snippet": "            public double value(double[] x) throws FunctionEvaluationException {\n                if (x[0] < 0) {\n                    throw new FunctionEvaluationException(x, \"{0}\", \"oops\");\n                } else if (x[0] > 1) {\n                    throw new FunctionEvaluationException(new RuntimeException(\"oops\"), x);\n                } else {\n                    return x[0] * (1 - x[0]);\n                }\n            }\n",
        "begin_line": 37,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 38,col 17)-(line 44,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMinimizeMaximize()",
        "snippet": "  @Test\n  public void testMinimizeMaximize()\n      throws FunctionEvaluationException, ConvergenceException {\n\n      // the following function has 4 local extrema:\n      final double xM        = -3.841947088256863675365;\n      final double yM        = -1.391745200270734924416;\n      final double xP        =  0.2286682237349059125691;\n      final double yP        = -yM;\n      final double valueXmYm =  0.2373295333134216789769; // local  maximum\n      final double valueXmYp = -valueXmYm;                // local  minimum\n      final double valueXpYm = -0.7290400707055187115322; // global minimum\n      final double valueXpYp = -valueXpYm;                // global maximum\n      MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {\n          private static final long serialVersionUID = -7039124064449091152L;\n          public double value(double[] variables) throws FunctionEvaluationException {\n              final double x = variables[0];\n              final double y = variables[1];\n              return ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));\n          }\n      };\n\n      MultiDirectional optimizer = new MultiDirectional();\n      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));\n      optimizer.setMaxIterations(200);\n      optimizer.setStartConfiguration(new double[] { 0.2, 0.2 });\n      RealPointValuePair optimum;\n\n      // minimization\n      optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });\n      Assert.assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);\n      Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);\n      Assert.assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);\n      Assert.assertTrue(optimizer.getEvaluations() > 120);\n      Assert.assertTrue(optimizer.getEvaluations() < 150);\n\n      optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });\n      Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);\n      Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);\n      Assert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);              \n      Assert.assertTrue(optimizer.getEvaluations() > 120);\n      Assert.assertTrue(optimizer.getEvaluations() < 150);\n\n      // maximization\n      optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });\n      Assert.assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);\n      Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);\n      Assert.assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);\n      Assert.assertTrue(optimizer.getEvaluations() > 120);\n      Assert.assertTrue(optimizer.getEvaluations() < 150);\n\n      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));\n      optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });\n      Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);\n      Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);\n      Assert.assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);\n      Assert.assertTrue(optimizer.getEvaluations() > 180);\n      Assert.assertTrue(optimizer.getEvaluations() < 220);\n\n  }\n",
        "begin_line": 69,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 74,col 7)-(line 74,col 56)",
            "(line 75,col 7)-(line 75,col 56)",
            "(line 76,col 7)-(line 76,col 57)",
            "(line 77,col 7)-(line 77,col 35)",
            "(line 78,col 7)-(line 78,col 57)",
            "(line 79,col 7)-(line 79,col 42)",
            "(line 80,col 7)-(line 80,col 57)",
            "(line 81,col 7)-(line 81,col 42)",
            "(line 82,col 7)-(line 89,col 8)",
            "(line 91,col 7)-(line 91,col 58)",
            "(line 92,col 7)-(line 92,col 86)",
            "(line 93,col 7)-(line 93,col 38)",
            "(line 94,col 7)-(line 94,col 65)",
            "(line 95,col 7)-(line 95,col 33)",
            "(line 98,col 7)-(line 98,col 93)",
            "(line 99,col 7)-(line 99,col 68)",
            "(line 100,col 7)-(line 100,col 68)",
            "(line 101,col 7)-(line 101,col 69)",
            "(line 102,col 7)-(line 102,col 58)",
            "(line 103,col 7)-(line 103,col 58)",
            "(line 105,col 7)-(line 105,col 91)",
            "(line 106,col 7)-(line 106,col 68)",
            "(line 107,col 7)-(line 107,col 68)",
            "(line 108,col 7)-(line 108,col 69)",
            "(line 109,col 7)-(line 109,col 58)",
            "(line 110,col 7)-(line 110,col 58)",
            "(line 113,col 7)-(line 113,col 95)",
            "(line 114,col 7)-(line 114,col 68)",
            "(line 115,col 7)-(line 115,col 68)",
            "(line 116,col 7)-(line 116,col 69)",
            "(line 117,col 7)-(line 117,col 58)",
            "(line 118,col 7)-(line 118,col 58)",
            "(line 120,col 7)-(line 120,col 86)",
            "(line 121,col 7)-(line 121,col 91)",
            "(line 122,col 7)-(line 122,col 68)",
            "(line 123,col 7)-(line 123,col 68)",
            "(line 124,col 7)-(line 124,col 69)",
            "(line 125,col 7)-(line 125,col 58)",
            "(line 126,col 7)-(line 126,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.Anonymous-a8ceca20-7099-4dcc-a43c-c54495cc2d98.value(double[])",
        "snippet": "          public double value(double[] variables) throws FunctionEvaluationException {\n              final double x = variables[0];\n              final double y = variables[1];\n              return ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));\n          }\n",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 15)-(line 85,col 44)",
            "(line 86,col 15)-(line 86,col 44)",
            "(line 87,col 15)-(line 87,col 124)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testRosenbrock()",
        "snippet": "  @Test\n  public void testRosenbrock()\n    throws FunctionEvaluationException, ConvergenceException {\n\n    MultivariateRealFunction rosenbrock =\n      new MultivariateRealFunction() {\n        private static final long serialVersionUID = -9044950469615237490L;\n        public double value(double[] x) throws FunctionEvaluationException {\n          ++count;\n          double a = x[1] - x[0] * x[0];\n          double b = 1.0 - x[0];\n          return 100 * a * a + b * b;\n        }\n      };\n\n    count = 0;\n    MultiDirectional optimizer = new MultiDirectional();\n    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));\n    optimizer.setMaxIterations(100);\n    optimizer.setStartConfiguration(new double[][] {\n            { -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }\n    });\n    RealPointValuePair optimum =\n        optimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });\n\n    Assert.assertEquals(count, optimizer.getEvaluations());\n    Assert.assertTrue(optimizer.getEvaluations() > 50);\n    Assert.assertTrue(optimizer.getEvaluations() < 100);\n    Assert.assertTrue(optimum.getValue() > 1.0e-2);\n\n  }\n",
        "begin_line": 130,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 143,col 8)",
            "(line 145,col 5)-(line 145,col 14)",
            "(line 146,col 5)-(line 146,col 56)",
            "(line 147,col 5)-(line 147,col 78)",
            "(line 148,col 5)-(line 148,col 36)",
            "(line 149,col 5)-(line 151,col 7)",
            "(line 152,col 5)-(line 153,col 86)",
            "(line 155,col 5)-(line 155,col 59)",
            "(line 156,col 5)-(line 156,col 55)",
            "(line 157,col 5)-(line 157,col 56)",
            "(line 158,col 5)-(line 158,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.Anonymous-6617151c-43ae-4b41-9bf8-a9b33e803769.value(double[])",
        "snippet": "        public double value(double[] x) throws FunctionEvaluationException {\n          ++count;\n          double a = x[1] - x[0] * x[0];\n          double b = 1.0 - x[0];\n          return 100 * a * a + b * b;\n        }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 138,col 11)-(line 138,col 18)",
            "(line 139,col 11)-(line 139,col 40)",
            "(line 140,col 11)-(line 140,col 32)",
            "(line 141,col 11)-(line 141,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testPowell()",
        "snippet": "  @Test\n  public void testPowell()\n    throws FunctionEvaluationException, ConvergenceException {\n\n    MultivariateRealFunction powell =\n      new MultivariateRealFunction() {\n        private static final long serialVersionUID = -832162886102041840L;\n        public double value(double[] x) throws FunctionEvaluationException {\n          ++count;\n          double a = x[0] + 10 * x[1];\n          double b = x[2] - x[3];\n          double c = x[1] - 2 * x[2];\n          double d = x[0] - x[3];\n          return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;\n        }\n      };\n\n    count = 0;\n    MultiDirectional optimizer = new MultiDirectional();\n    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));\n    optimizer.setMaxIterations(1000);\n    RealPointValuePair optimum =\n      optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });\n    Assert.assertEquals(count, optimizer.getEvaluations());\n    Assert.assertTrue(optimizer.getEvaluations() > 800);\n    Assert.assertTrue(optimizer.getEvaluations() < 900);\n    Assert.assertTrue(optimum.getValue() > 1.0e-2);\n\n  }\n",
        "begin_line": 162,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 177,col 8)",
            "(line 179,col 5)-(line 179,col 14)",
            "(line 180,col 5)-(line 180,col 56)",
            "(line 181,col 5)-(line 181,col 80)",
            "(line 182,col 5)-(line 182,col 37)",
            "(line 183,col 5)-(line 184,col 90)",
            "(line 185,col 5)-(line 185,col 59)",
            "(line 186,col 5)-(line 186,col 56)",
            "(line 187,col 5)-(line 187,col 56)",
            "(line 188,col 5)-(line 188,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.Anonymous-b83ccce5-8cfc-4db3-bce3-2dcc1b9eeeae.value(double[])",
        "snippet": "        public double value(double[] x) throws FunctionEvaluationException {\n          ++count;\n          double a = x[0] + 10 * x[1];\n          double b = x[2] - x[3];\n          double c = x[1] - 2 * x[2];\n          double d = x[0] - x[3];\n          return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;\n        }\n",
        "begin_line": 169,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 170,col 11)-(line 170,col 18)",
            "(line 171,col 11)-(line 171,col 38)",
            "(line 172,col 11)-(line 172,col 33)",
            "(line 173,col 11)-(line 173,col 37)",
            "(line 174,col 11)-(line 174,col 33)",
            "(line 175,col 11)-(line 175,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283()",
        "snippet": "  @Test\n  public void testMath283()\n      throws FunctionEvaluationException, OptimizationException {\n      // fails because MultiDirectional.iterateSimplex is looping forever\n      // the while(true) should be replaced with a convergence check\n      MultiDirectional multiDirectional = new MultiDirectional();\n      multiDirectional.setMaxIterations(100);\n      multiDirectional.setMaxEvaluations(1000);\n\n      final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);\n\n      RealPointValuePair estimate = multiDirectional.optimize(function,\n                                    GoalType.MAXIMIZE, function.getMaximumPosition());\n\n      final double EPSILON = 1e-5;\n\n      final double expectedMaximum = function.getMaximum();\n      final double actualMaximum = estimate.getValue();\n      Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);\n\n      final double[] expectedPosition = function.getMaximumPosition();\n      final double[] actualPosition = estimate.getPoint();\n      Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );\n      Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );\n      \n  }\n",
        "begin_line": 192,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 197,col 7)-(line 197,col 65)",
            "(line 198,col 7)-(line 198,col 45)",
            "(line 199,col 7)-(line 199,col 47)",
            "(line 201,col 7)-(line 201,col 64)",
            "(line 203,col 7)-(line 204,col 86)",
            "(line 206,col 7)-(line 206,col 34)",
            "(line 208,col 7)-(line 208,col 59)",
            "(line 209,col 7)-(line 209,col 55)",
            "(line 210,col 7)-(line 210,col 67)",
            "(line 212,col 7)-(line 212,col 70)",
            "(line 213,col 7)-(line 213,col 58)",
            "(line 214,col 7)-(line 214,col 76)",
            "(line 215,col 7)-(line 215,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.Gaussian2D.Gaussian2D(double, double, double)",
        "snippet": "      public Gaussian2D(double xOpt, double yOpt, double std) {\n          maximumPosition = new double[] { xOpt, yOpt };\n          this.std = std;\n      }\n",
        "begin_line": 225,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 226,col 11)-(line 226,col 56)",
            "(line 227,col 11)-(line 227,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.Gaussian2D.getMaximum()",
        "snippet": "      public double getMaximum() {\n          return value(maximumPosition);\n      }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 231,col 11)-(line 231,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.Gaussian2D.getMaximumPosition()",
        "snippet": "      public double[] getMaximumPosition() {\n          return maximumPosition.clone();\n      }\n",
        "begin_line": 234,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 235,col 11)-(line 235,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.Gaussian2D.value(double[])",
        "snippet": "      public double value(double[] point) {\n          final double x = point[0], y = point[1];\n          final double twoS2 = 2.0 * std * std;\n          return 1.0 / (twoS2 * Math.PI) * Math.exp(-(x * x + y * y) / twoS2);\n      }\n",
        "begin_line": 238,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 239,col 11)-(line 239,col 50)",
            "(line 240,col 11)-(line 240,col 47)",
            "(line 241,col 11)-(line 241,col 78)"
        ]
    }
]