[
    {
        "name": "MultiDirectional.MultiDirectional#45",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectional",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectional.MultiDirectional()",
        "snippet": "    public MultiDirectional() {\n        this.khi   = 2.0;\n        this.gamma = 0.5;\n    }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": " Build a multi-directional optimizer with default coefficients.\n     * <p>The default values are 2.0 for khi and 0.5 for gamma.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "MultiDirectional.iterateSimplex#60",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectional",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectional.iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>)",
        "snippet": "    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n\n            // check convergence\n                return;\n            }\n\n        }\n\n    }\n",
        "begin_line": 60,
        "end_line": 99,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.direct.DirectSearchOptimizer": " Compute the next simplex of the algorithm.\n     * @param comparator comparator to use to sort simplex vertices from best to worst\n     * @exception FunctionEvaluationException if the function cannot be evaluated at\n     * some point\n     * @exception OptimizationException if the algorithm fails to converge\n     * @exception IllegalArgumentException if the start point dimension is wrong\n     "
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "MultiDirectional.evaluateNewSimplex#110",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectional",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectional.evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[], double, java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>)",
        "snippet": "    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n                                              final double coeff,\n                                              final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n\n        final double[] xSmallest = original[0].getPointRef();\n        final int n = xSmallest.length;\n\n        // create the linearly transformed simplex\n        simplex = new RealPointValuePair[n + 1];\n        simplex[0] = original[0];\n        for (int i = 1; i <= n; ++i) {\n            final double[] xOriginal    = original[i].getPointRef();\n            final double[] xTransformed = new double[n];\n            for (int j = 0; j < n; ++j) {\n                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);\n            }\n            simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);\n        }\n\n        // evaluate it\n        evaluateSimplex(comparator);\n        return simplex[0];\n\n    }\n",
        "begin_line": 110,
        "end_line": 134,
        "comment": " Compute and evaluate a new simplex.\n     * @param original original simplex (to be preserved)\n     * @param coeff linear coefficient\n     * @param comparator comparator to use to sort simplex vertices from best to poorest\n     * @return best point in the transformed simplex\n     * @exception FunctionEvaluationException if the function cannot be evaluated at\n     * some point\n     * @exception OptimizationException if the maximal number of evaluations is exceeded\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "DirectSearchOptimizer.compare#276",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.Anonymous-36ca80e0-4967-4dc0-be7d-7e5f3a6bc695.compare(org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair)",
        "snippet": "                public int compare(final RealPointValuePair o1,\n                                   final RealPointValuePair o2) {\n                    final double v1 = o1.getValue();\n                    final double v2 = o2.getValue();\n                    return (goalType == GoalType.MINIMIZE) ?\n                            Double.compare(v1, v2) : Double.compare(v2, v1);\n                }\n",
        "begin_line": 276,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "DirectSearchOptimizer.setStartConfiguration#138",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setStartConfiguration(double[])",
        "snippet": "    public void setStartConfiguration(final double[] steps)\n        throws IllegalArgumentException {\n        // only the relative position of the n final vertices with respect\n        // to the first one are stored\n        final int n = steps.length;\n        startConfiguration = new double[n][n];\n        for (int i = 0; i < n; ++i) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; ++j) {\n                if (steps[j] == 0.0) {\n                    throw MathRuntimeException.createIllegalArgumentException(\n                            \"equals vertices {0} and {1} in simplex configuration\",\n                            j, j + 1);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }\n",
        "begin_line": 138,
        "end_line": 155,
        "comment": " Set start configuration for simplex.\n     * <p>The start configuration for simplex is built from a box parallel to\n     * the canonical axes of the space. The simplex is the subset of vertices\n     * of a box parallel to the canonical axes. It is built as the path followed\n     * while traveling from one vertex of the box to the diagonally opposite\n     * vertex moving only along the box edges. The first vertex of the box will\n     * be located at the start point of the optimization.</p>\n     * <p>As an example, in dimension 3 a simplex has 4 vertices. Setting the\n     * steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the\n     * start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }.\n     * The first vertex would be set to the start point at (1, 1, 1) and the\n     * last vertex would be set to the diagonally opposite vertex at (2, 11, 3).</p>\n     * @param steps steps along the canonical axes representing box edges,\n     * they may be negative but not null\n     * @exception IllegalArgumentException if one step is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "DirectSearchOptimizer.optimize#259",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.optimize(org.apache.commons.math.analysis.MultivariateRealFunction, org.apache.commons.math.optimization.GoalType, double[])",
        "snippet": "    public RealPointValuePair optimize(final MultivariateRealFunction f,\n                                         final GoalType goalType,\n                                         final double[] startPoint)\n        throws FunctionEvaluationException, OptimizationException,\n        IllegalArgumentException {\n\n        if (startConfiguration == null) {\n            // no initial configuration has been set up for simplex\n            // build a default one from a unit hypercube\n            final double[] unit = new double[startPoint.length];\n            Arrays.fill(unit, 1.0);\n            setStartConfiguration(unit);\n        }\n\n        this.f = f;\n        final Comparator<RealPointValuePair> comparator =\n            new Comparator<RealPointValuePair>() {\n                public int compare(final RealPointValuePair o1,\n                                   final RealPointValuePair o2) {\n                    final double v1 = o1.getValue();\n                    final double v2 = o2.getValue();\n                    return (goalType == GoalType.MINIMIZE) ?\n                            Double.compare(v1, v2) : Double.compare(v2, v1);\n                }\n            };\n\n        // initialize search\n        iterations  = 0;\n        evaluations = 0;\n        buildSimplex(startPoint);\n        evaluateSimplex(comparator);\n\n        RealPointValuePair[] previous = new RealPointValuePair[simplex.length];\n        while (true) {\n\n            if (iterations > 0) {\n                boolean converged = true;\n                for (int i = 0; i < simplex.length; ++i) {\n                    converged &= checker.converged(iterations, previous[i], simplex[i]);\n                }\n                if (converged) {\n                    // we have found an optimum\n                    return simplex[0];\n                }\n            }\n\n            // we still need to search\n            System.arraycopy(simplex, 0, previous, 0, simplex.length);\n            iterateSimplex(comparator);\n\n        }\n\n    }\n",
        "begin_line": 259,
        "end_line": 311,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.MultivariateRealOptimizer": " Optimizes an objective function.\n     * @param f objective function\n     * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}\n     * or {@link GoalType#MINIMIZE}\n     * @param startPoint the start point for optimization\n     * @return the point/value pair giving the optimal value for objective function\n     * @exception FunctionEvaluationException if the objective function throws one during\n     * the search\n     * @exception OptimizationException if the algorithm failed to converge\n     * @exception IllegalArgumentException if the start point dimension is wrong\n     "
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "DirectSearchOptimizer.incrementIterationsCounter#317",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.incrementIterationsCounter()",
        "snippet": "    protected void incrementIterationsCounter()\n        throws OptimizationException {\n        if (++iterations > maxIterations) {\n            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));\n        }\n    }\n",
        "begin_line": 317,
        "end_line": 322,
        "comment": " Increment the iterations counter by 1.\n     * @exception OptimizationException if the maximal number\n     * of iterations is exceeded\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "DirectSearchOptimizer.evaluateSimplex#388",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.evaluateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>)",
        "snippet": "    protected void evaluateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n\n        // evaluate the objective function at all non-evaluated simplex points\n        for (int i = 0; i < simplex.length; ++i) {\n            final RealPointValuePair vertex = simplex[i];\n            final double[] point = vertex.getPointRef();\n            if (Double.isNaN(vertex.getValue())) {\n                simplex[i] = new RealPointValuePair(point, evaluate(point), false);\n            }\n        }\n\n        // sort the simplex from best to worst\n        Arrays.sort(simplex, comparator);\n\n    }\n",
        "begin_line": 388,
        "end_line": 403,
        "comment": " Evaluate all the non-evaluated points of the simplex.\n     * @param comparator comparator to use to sort simplex vertices from best to worst\n     * @exception FunctionEvaluationException if no value can be computed for the parameters\n     * @exception OptimizationException if the maximal number of evaluations is exceeded\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealPointValuePair.RealPointValuePair#60",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double, boolean)",
        "snippet": "    public RealPointValuePair(final double[] point, final double value,\n                                final boolean copyArray) {\n        this.point = copyArray ? point.clone() : point;\n        this.value  = value;\n    }\n",
        "begin_line": 60,
        "end_line": 64,
        "comment": " Build a point/objective function value pair.\n     * @param point point coordinates (the built instance will store\n     * a copy of the array, not the array passed as argument)\n     * @param value value of an objective function at the point\n     * @param copyArray if true, the input array will be copied, otherwise\n     * it will be referenced\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealPointValuePair.getPoint#69",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.getPoint()",
        "snippet": "    public double[] getPoint() {\n        return point.clone();\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": " Get the point.\n     * @return a copy of the stored point\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "OptimizationException.OptimizationException#49",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/OptimizationException.java",
        "class_name": "org.apache.commons.math.optimization.OptimizationException",
        "signature": "org.apache.commons.math.optimization.OptimizationException.OptimizationException(java.lang.Throwable)",
        "snippet": "    public OptimizationException(Throwable cause) {\n        super(cause);\n    }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "\n     * Create an exception with a given root cause.\n     * @param cause  the exception or error that caused this exception to be thrown\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "MaxIterationsExceededException.MaxIterationsExceededException#42",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/MaxIterationsExceededException.java",
        "class_name": "org.apache.commons.math.MaxIterationsExceededException",
        "signature": "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)",
        "snippet": "    public MaxIterationsExceededException(final int maxIterations) {\n        super(\"Maximal number of iterations ({0}) exceeded\", maxIterations);\n        this.maxIterations = maxIterations;\n    }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n     * Constructs an exception with specified formatted detail message.\n     * Message formatting is delegated to {@link java.text.MessageFormat}.\n     * @param maxIterations maximal number of iterations allowed\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathException.getMessage#165",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.getMessage(java.util.Locale)",
        "snippet": "    public String getMessage(Locale locale) {\n        return buildMessage(locale, pattern, arguments);\n    }\n",
        "begin_line": 165,
        "end_line": 167,
        "comment": " Gets the message in a specified locale.\n     *\n     * @param locale Locale in which the message should be translated\n     * \n     * @return localized message\n     * @since 1.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathException.getLocalizedMessage#170",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.getLocalizedMessage()",
        "snippet": "    @Override\n    public String getLocalizedMessage() {\n        return getMessage(Locale.getDefault());\n    }\n",
        "begin_line": 170,
        "end_line": 173,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Exception": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ConvergenceException.ConvergenceException#44",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/ConvergenceException.java",
        "class_name": "org.apache.commons.math.ConvergenceException",
        "signature": "org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.String, java.lang.Object...)",
        "snippet": "    public ConvergenceException(String pattern, Object ... arguments) {\n        super(pattern, arguments);\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "\n     * Constructs an exception with specified formatted detail message.\n     * Message formatting is delegated to {@link java.text.MessageFormat}.\n     * @param pattern format specifier\n     * @param arguments format arguments\n     * @since 1.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ConvergenceException.ConvergenceException#52",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/ConvergenceException.java",
        "class_name": "org.apache.commons.math.ConvergenceException",
        "signature": "org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.Throwable)",
        "snippet": "    public ConvergenceException(Throwable cause) {\n        super(cause);\n    }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n     * Create an exception with a given root cause.\n     * @param cause  the exception or error that caused this exception to be thrown\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "DirectSearchOptimizer.DirectSearchOptimizer#116",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.DirectSearchOptimizer()",
        "snippet": "    protected DirectSearchOptimizer() {\n        setConvergenceChecker(new SimpleScalarValueChecker());\n        setMaxIterations(Integer.MAX_VALUE);\n        setMaxEvaluations(Integer.MAX_VALUE);\n    }\n",
        "begin_line": 116,
        "end_line": 120,
        "comment": " Simple constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "DirectSearchOptimizer.setMaxIterations#219",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setMaxIterations(int)",
        "snippet": "    public void setMaxIterations(int maxIterations) {\n        this.maxIterations = maxIterations;\n    }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.MultivariateRealOptimizer": " Set the maximal number of iterations of the algorithm.\n     * @param maxIterations maximal number of algorithm iterations\n     "
        },
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "DirectSearchOptimizer.setMaxEvaluations#229",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setMaxEvaluations(int)",
        "snippet": "    public void setMaxEvaluations(int maxEvaluations) {\n        this.maxEvaluations = maxEvaluations;\n    }\n",
        "begin_line": 229,
        "end_line": 231,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.MultivariateRealOptimizer": " Set the maximal number of functions evaluations.\n     * @param maxEvaluations maximal number of function evaluations\n     "
        },
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "DirectSearchOptimizer.setConvergenceChecker#249",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setConvergenceChecker(org.apache.commons.math.optimization.RealConvergenceChecker)",
        "snippet": "    public void setConvergenceChecker(RealConvergenceChecker checker) {\n        this.checker = checker;\n    }\n",
        "begin_line": 249,
        "end_line": 251,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.MultivariateRealOptimizer": " Set the convergence checker.\n     * @param checker object to use to check for convergence\n     "
        },
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "DirectSearchOptimizer.evaluate#343",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.evaluate(double[])",
        "snippet": "    protected double evaluate(final double[] x)\n        throws FunctionEvaluationException, IllegalArgumentException {\n        if (++evaluations > maxEvaluations) {\n            throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),\n                                                  x);\n        }\n        return f.value(x);\n    }\n",
        "begin_line": 343,
        "end_line": 350,
        "comment": " Evaluate the objective function on one point.\n     * <p>A side effect of this method is to count the number of\n     * function evaluations</p>\n     * @param x point on which the objective function should be evaluated\n     * @return objective function value at the given point\n     * @exception FunctionEvaluationException if no value can be computed for the\n     * parameters or if the maximal number of evaluations is exceeded\n     * @exception IllegalArgumentException if the start point dimension is wrong\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "DirectSearchOptimizer.buildSimplex#357",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.buildSimplex(double[])",
        "snippet": "    private void buildSimplex(final double[] startPoint)\n        throws IllegalArgumentException {\n\n        final int n = startPoint.length;\n        if (n != startConfiguration.length) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                    \"dimension mismatch {0} != {1}\",\n                    n, startConfiguration.length);\n        }\n\n        // set first vertex\n        simplex = new RealPointValuePair[n + 1];\n        simplex[0] = new RealPointValuePair(startPoint, Double.NaN);\n\n        // set remaining vertices\n        for (int i = 0; i < n; ++i) {\n            final double[] confI   = startConfiguration[i];\n            final double[] vertexI = new double[n];\n            for (int k = 0; k < n; ++k) {\n                vertexI[k] = startPoint[k] + confI[k];\n            }\n            simplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);\n        }\n\n    }\n",
        "begin_line": 357,
        "end_line": 381,
        "comment": " Build an initial simplex.\n     * @param startPoint the start point for optimization\n     * @exception IllegalArgumentException if the start point does not match\n     * simplex dimension\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "SimpleScalarValueChecker.SimpleScalarValueChecker#50",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.SimpleScalarValueChecker()",
        "snippet": "    public SimpleScalarValueChecker() {\n        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;\n        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;\n    }\n",
        "begin_line": 50,
        "end_line": 53,
        "comment": " Build an instance with default threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealPointValuePair.RealPointValuePair#48",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double)",
        "snippet": "    public RealPointValuePair(final double[] point, final double value) {\n        this.point = point.clone();\n        this.value  = value;\n    }\n",
        "begin_line": 48,
        "end_line": 51,
        "comment": " Build a point/objective function value pair.\n     * @param point point coordinates (the built instance will store\n     * a copy of the array, not the array passed as argument)\n     * @param value value of an objective function at the point\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealPointValuePair.getPointRef#78",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.getPointRef()",
        "snippet": "    public double[] getPointRef() {\n        return point;\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": " Get a reference to the point.\n     * <p>This method is provided as a convenience to avoid copying\n     * the array, the elements of the array should <em>not</em> be modified.</p>\n     * @return a reference to the internal array storing the point\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "RealPointValuePair.getValue#85",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.getValue()",
        "snippet": "    public double getValue() {\n        return value;\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": " Get the value of the objective function.\n     * @return the stored value of the objective function\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "MathException.translate#58",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale)",
        "snippet": "    private static String translate(String s, Locale locale) {\n        try {\n            ResourceBundle bundle =\n                    ResourceBundle.getBundle(\"org.apache.commons.math.MessagesResources\", locale);\n            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                // the value of the resource is the translated string\n                return bundle.getString(s);\n            }\n            \n        } catch (MissingResourceException mre) {\n            // do nothing here\n        }\n\n        // the locale is not supported or the resource is unknown\n        // don't translate and fall back to using the string as is\n        return s;\n\n    }\n",
        "begin_line": 58,
        "end_line": 75,
        "comment": "\n     * Translate a string to a given locale.\n     * @param s string to translate\n     * @param locale locale into which to translate the string\n     * @return translated string or original string\n     * for unsupported locales or unknown strings\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathException.buildMessage#84",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.buildMessage(java.util.Locale, java.lang.String, java.lang.Object...)",
        "snippet": "    private static String buildMessage(Locale locale, String pattern, Object ... arguments) {\n        return (pattern == null) ? \"\" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        \n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Builds a message string by from a pattern and its arguments.\n     * @param locale Locale in which the message should be translated\n     * @param pattern format specifier\n     * @param arguments format arguments\n     * @return a message string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathException.MathException#105",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object...)",
        "snippet": "    public MathException(String pattern, Object ... arguments) {\n      super(buildMessage(Locale.US, pattern, arguments));\n      this.pattern   = pattern;\n      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n    }\n",
        "begin_line": 105,
        "end_line": 109,
        "comment": "\n     * Constructs a new <code>MathException</code> with specified\n     * formatted detail message.\n     * Message formatting is delegated to {@link java.text.MessageFormat}.\n     * @param pattern format specifier\n     * @param arguments format arguments\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathException.MathException#118",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.MathException(java.lang.Throwable)",
        "snippet": "    public MathException(Throwable rootCause) {\n        super(rootCause);\n        this.pattern   = getMessage();\n        this.arguments = new Object[0];\n    }\n",
        "begin_line": 118,
        "end_line": 122,
        "comment": "\n     * Constructs a new <code>MathException</code> with specified\n     * nested <code>Throwable</code> root cause.\n     *\n     * @param rootCause  the exception or error that caused this exception\n     *                   to be thrown.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "DirectSearchOptimizer.getEvaluations#244",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.getEvaluations()",
        "snippet": "    public int getEvaluations() {\n        return evaluations;\n    }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.MultivariateRealOptimizer": " Get the number of evaluations of the objective function.\n     * <p>\n     * The number of evaluations corresponds to the last call to the\n     * {@link #optimize(MultivariateRealFunction, GoalType, double[]) optimize}\n     * method. It is 0 if the method has not been called yet.\n     * </p>\n     * @return number of evaluations of the objective function\n     "
        },
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleScalarValueChecker.SimpleScalarValueChecker#64",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.SimpleScalarValueChecker(double, double)",
        "snippet": "    public SimpleScalarValueChecker(final double relativeThreshold,\n                                 final double absoluteThreshold) {\n        this.relativeThreshold = relativeThreshold;\n        this.absoluteThreshold = absoluteThreshold;\n    }\n",
        "begin_line": 64,
        "end_line": 68,
        "comment": " Build an instance with a specified threshold.\n     * <p>\n     * In order to perform only relative checks, the absolute tolerance\n     * must be set to a negative value. In order to perform only absolute\n     * checks, the relative tolerance must be set to a negative value.\n     * </p>\n     * @param relativeThreshold relative tolerance threshold\n     * @param absoluteThreshold absolute tolerance threshold\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleScalarValueChecker.converged#71",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.converged(int, org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair)",
        "snippet": "    public boolean converged(final int iteration,\n                             final RealPointValuePair previous,\n                             final RealPointValuePair current) {\n        final double p          = previous.getValue();\n        final double c          = current.getValue();\n        final double difference = Math.abs(p - c);\n        final double size       = Math.max(Math.abs(p), Math.abs(c));\n        return (difference <= (size * relativeThreshold)) || (difference <= absoluteThreshold);\n    }\n",
        "begin_line": 71,
        "end_line": 79,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.RealConvergenceChecker": " Check if the optimization algorithm has converged considering the last points.\n   * <p>\n   * This method may be called several time from the same algorithm iteration with\n   * different points. This can be detected by checking the iteration number at each\n   * call if needed. Each time this method is called, the previous and current point\n   * correspond to points with the same role at each iteration, so they can be\n   * compared. As an example, simplex-based algorithms call this method for all\n   * points of the simplex, not only for the best or worst ones.\n   * </p>\n   * @param iteration index of current iteration\n   * @param previous point from previous iteration\n   * @param current point from current iteration\n   * @return true if the algorithm is considered to have converged\n   "
        },
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    }
]