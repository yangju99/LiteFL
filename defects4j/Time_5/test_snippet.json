[
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestPeriod_Basics.class);\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 54)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.TestPeriod_Basics(java.lang.String)",
        "snippet": "    public TestPeriod_Basics(String name) {\n        super(name);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        originalDateTimeZone = DateTimeZone.getDefault();\n        originalTimeZone = TimeZone.getDefault();\n        originalLocale = Locale.getDefault();\n        DateTimeZone.setDefault(LONDON);\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Locale.setDefault(Locale.UK);\n    }\n",
        "begin_line": 87,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 59)",
            "(line 89,col 9)-(line 89,col 57)",
            "(line 90,col 9)-(line 90,col 49)",
            "(line 91,col 9)-(line 91,col 45)",
            "(line 92,col 9)-(line 92,col 40)",
            "(line 93,col 9)-(line 93,col 67)",
            "(line 94,col 9)-(line 94,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(originalDateTimeZone);\n        TimeZone.setDefault(originalTimeZone);\n        Locale.setDefault(originalLocale);\n        originalDateTimeZone = null;\n        originalTimeZone = null;\n        originalLocale = null;\n    }\n",
        "begin_line": 97,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 47)",
            "(line 99,col 9)-(line 99,col 54)",
            "(line 100,col 9)-(line 100,col 46)",
            "(line 101,col 9)-(line 101,col 42)",
            "(line 102,col 9)-(line 102,col 36)",
            "(line 103,col 9)-(line 103,col 32)",
            "(line 104,col 9)-(line 104,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testTest()",
        "snippet": "    public void testTest() {\n        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n    }\n",
        "begin_line": 108,
        "end_line": 112,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 88)",
            "(line 110,col 9)-(line 110,col 85)",
            "(line 111,col 9)-(line 111,col 85)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testGetPeriodType()",
        "snippet": "    public void testGetPeriodType() {\n        Period test = new Period(0L);\n        assertEquals(PeriodType.standard(), test.getPeriodType());\n    }\n",
        "begin_line": 115,
        "end_line": 118,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 37)",
            "(line 117,col 9)-(line 117,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testGetMethods()",
        "snippet": "    public void testGetMethods() {\n        Period test = new Period(0L);\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n    }\n",
        "begin_line": 120,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 37)",
            "(line 122,col 9)-(line 122,col 41)",
            "(line 123,col 9)-(line 123,col 42)",
            "(line 124,col 9)-(line 124,col 41)",
            "(line 125,col 9)-(line 125,col 40)",
            "(line 126,col 9)-(line 126,col 41)",
            "(line 127,col 9)-(line 127,col 43)",
            "(line 128,col 9)-(line 128,col 43)",
            "(line 129,col 9)-(line 129,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testValueIndexMethods()",
        "snippet": "    public void testValueIndexMethods() {\n        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n        assertEquals(6, test.size());\n        assertEquals(1, test.getValue(0));\n        assertEquals(4, test.getValue(1));\n        assertEquals(5, test.getValue(2));\n        assertEquals(6, test.getValue(3));\n        assertEquals(7, test.getValue(4));\n        assertEquals(8, test.getValue(5));\n        assertEquals(true, Arrays.equals(new int[] {1, 4, 5, 6, 7, 8}, test.getValues()));\n    }\n",
        "begin_line": 132,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 83)",
            "(line 134,col 9)-(line 134,col 37)",
            "(line 135,col 9)-(line 135,col 42)",
            "(line 136,col 9)-(line 136,col 42)",
            "(line 137,col 9)-(line 137,col 42)",
            "(line 138,col 9)-(line 138,col 42)",
            "(line 139,col 9)-(line 139,col 42)",
            "(line 140,col 9)-(line 140,col 42)",
            "(line 141,col 9)-(line 141,col 90)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testTypeIndexMethods()",
        "snippet": "    public void testTypeIndexMethods() {\n        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n        assertEquals(6, test.size());\n        assertEquals(DurationFieldType.years(), test.getFieldType(0));\n        assertEquals(DurationFieldType.days(), test.getFieldType(1));\n        assertEquals(DurationFieldType.hours(), test.getFieldType(2));\n        assertEquals(DurationFieldType.minutes(), test.getFieldType(3));\n        assertEquals(DurationFieldType.seconds(), test.getFieldType(4));\n        assertEquals(DurationFieldType.millis(), test.getFieldType(5));\n        assertEquals(true, Arrays.equals(new DurationFieldType[] {\n            DurationFieldType.years(), DurationFieldType.days(), DurationFieldType.hours(),\n            DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis()},\n            test.getFieldTypes()));\n    }\n",
        "begin_line": 144,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 83)",
            "(line 146,col 9)-(line 146,col 37)",
            "(line 147,col 9)-(line 147,col 70)",
            "(line 148,col 9)-(line 148,col 69)",
            "(line 149,col 9)-(line 149,col 70)",
            "(line 150,col 9)-(line 150,col 72)",
            "(line 151,col 9)-(line 151,col 72)",
            "(line 152,col 9)-(line 152,col 71)",
            "(line 153,col 9)-(line 156,col 35)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testIsSupported()",
        "snippet": "    public void testIsSupported() {\n        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n        assertEquals(true, test.isSupported(DurationFieldType.years()));\n        assertEquals(false, test.isSupported(DurationFieldType.months()));\n        assertEquals(false, test.isSupported(DurationFieldType.weeks()));\n        assertEquals(true, test.isSupported(DurationFieldType.days()));\n        assertEquals(true, test.isSupported(DurationFieldType.hours()));\n        assertEquals(true, test.isSupported(DurationFieldType.minutes()));\n        assertEquals(true, test.isSupported(DurationFieldType.seconds()));\n        assertEquals(true, test.isSupported(DurationFieldType.millis()));\n    }        \n",
        "begin_line": 159,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 83)",
            "(line 161,col 9)-(line 161,col 72)",
            "(line 162,col 9)-(line 162,col 74)",
            "(line 163,col 9)-(line 163,col 73)",
            "(line 164,col 9)-(line 164,col 71)",
            "(line 165,col 9)-(line 165,col 72)",
            "(line 166,col 9)-(line 166,col 74)",
            "(line 167,col 9)-(line 167,col 74)",
            "(line 168,col 9)-(line 168,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n        assertEquals(0, test.indexOf(DurationFieldType.years()));\n        assertEquals(-1, test.indexOf(DurationFieldType.months()));\n        assertEquals(-1, test.indexOf(DurationFieldType.weeks()));\n        assertEquals(1, test.indexOf(DurationFieldType.days()));\n        assertEquals(2, test.indexOf(DurationFieldType.hours()));\n        assertEquals(3, test.indexOf(DurationFieldType.minutes()));\n        assertEquals(4, test.indexOf(DurationFieldType.seconds()));\n        assertEquals(5, test.indexOf(DurationFieldType.millis()));\n    }\n",
        "begin_line": 171,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 83)",
            "(line 173,col 9)-(line 173,col 65)",
            "(line 174,col 9)-(line 174,col 67)",
            "(line 175,col 9)-(line 175,col 66)",
            "(line 176,col 9)-(line 176,col 64)",
            "(line 177,col 9)-(line 177,col 65)",
            "(line 178,col 9)-(line 178,col 67)",
            "(line 179,col 9)-(line 179,col 67)",
            "(line 180,col 9)-(line 180,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testGet()",
        "snippet": "    public void testGet() {\n        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n        assertEquals(1, test.get(DurationFieldType.years()));\n        assertEquals(0, test.get(DurationFieldType.months()));\n        assertEquals(0, test.get(DurationFieldType.weeks()));\n        assertEquals(4, test.get(DurationFieldType.days()));\n        assertEquals(5, test.get(DurationFieldType.hours()));\n        assertEquals(6, test.get(DurationFieldType.minutes()));\n        assertEquals(7, test.get(DurationFieldType.seconds()));\n        assertEquals(8, test.get(DurationFieldType.millis()));\n    }\n",
        "begin_line": 183,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 83)",
            "(line 185,col 9)-(line 185,col 61)",
            "(line 186,col 9)-(line 186,col 62)",
            "(line 187,col 9)-(line 187,col 61)",
            "(line 188,col 9)-(line 188,col 60)",
            "(line 189,col 9)-(line 189,col 61)",
            "(line 190,col 9)-(line 190,col 63)",
            "(line 191,col 9)-(line 191,col 63)",
            "(line 192,col 9)-(line 192,col 62)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testEqualsHashCode()",
        "snippet": "    public void testEqualsHashCode() {\n        Period test1 = new Period(123L);\n        Period test2 = new Period(123L);\n        assertEquals(true, test1.equals(test2));\n        assertEquals(true, test2.equals(test1));\n        assertEquals(true, test1.equals(test1));\n        assertEquals(true, test2.equals(test2));\n        assertEquals(true, test1.hashCode() == test2.hashCode());\n        assertEquals(true, test1.hashCode() == test1.hashCode());\n        assertEquals(true, test2.hashCode() == test2.hashCode());\n        \n        Period test3 = new Period(321L);\n        assertEquals(false, test1.equals(test3));\n        assertEquals(false, test2.equals(test3));\n        assertEquals(false, test3.equals(test1));\n        assertEquals(false, test3.equals(test2));\n        assertEquals(false, test1.hashCode() == test3.hashCode());\n        assertEquals(false, test2.hashCode() == test3.hashCode());\n        \n        assertEquals(false, test1.equals(\"Hello\"));\n        assertEquals(true, test1.equals(new MockPeriod(123L)));\n        assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime())));\n    }\n",
        "begin_line": 195,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 40)",
            "(line 197,col 9)-(line 197,col 40)",
            "(line 198,col 9)-(line 198,col 48)",
            "(line 199,col 9)-(line 199,col 48)",
            "(line 200,col 9)-(line 200,col 48)",
            "(line 201,col 9)-(line 201,col 48)",
            "(line 202,col 9)-(line 202,col 65)",
            "(line 203,col 9)-(line 203,col 65)",
            "(line 204,col 9)-(line 204,col 65)",
            "(line 206,col 9)-(line 206,col 40)",
            "(line 207,col 9)-(line 207,col 49)",
            "(line 208,col 9)-(line 208,col 49)",
            "(line 209,col 9)-(line 209,col 49)",
            "(line 210,col 9)-(line 210,col 49)",
            "(line 211,col 9)-(line 211,col 66)",
            "(line 212,col 9)-(line 212,col 66)",
            "(line 214,col 9)-(line 214,col 51)",
            "(line 215,col 9)-(line 215,col 63)",
            "(line 216,col 9)-(line 216,col 82)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.MockPeriod.MockPeriod(long)",
        "snippet": "        public MockPeriod(long value) {\n            super(value, null, null);\n        }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 222,col 13)-(line 222,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testSerialization()",
        "snippet": "    public void testSerialization() throws Exception {\n        Period test = new Period(123L);\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(test);\n        byte[] bytes = baos.toByteArray();\n        oos.close();\n        \n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        Period result = (Period) ois.readObject();\n        ois.close();\n        \n        assertEquals(test, result);\n    }\n",
        "begin_line": 227,
        "end_line": 242,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 39)",
            "(line 230,col 9)-(line 230,col 65)",
            "(line 231,col 9)-(line 231,col 62)",
            "(line 232,col 9)-(line 232,col 30)",
            "(line 233,col 9)-(line 233,col 42)",
            "(line 234,col 9)-(line 234,col 20)",
            "(line 236,col 9)-(line 236,col 68)",
            "(line 237,col 9)-(line 237,col 60)",
            "(line 238,col 9)-(line 238,col 50)",
            "(line 239,col 9)-(line 239,col 20)",
            "(line 241,col 9)-(line 241,col 35)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToString()",
        "snippet": "    public void testToString() {\n        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", test.toString());\n        \n        test = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"PT0S\", test.toString());\n        \n        test = new Period(12345L);\n        assertEquals(\"PT12.345S\", test.toString());\n    }\n",
        "begin_line": 470,
        "end_line": 479,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 471,col 9)-(line 471,col 57)",
            "(line 472,col 9)-(line 472,col 62)",
            "(line 474,col 9)-(line 474,col 50)",
            "(line 475,col 9)-(line 475,col 46)",
            "(line 477,col 9)-(line 477,col 34)",
            "(line 478,col 9)-(line 478,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToString_PeriodFormatter()",
        "snippet": "    public void testToString_PeriodFormatter() {\n        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        assertEquals(\"1 year, 2 months, 3 weeks, 4 days, 5 hours, 6 minutes, 7 seconds and 8 milliseconds\", test.toString(PeriodFormat.getDefault()));\n        \n        test = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0 milliseconds\", test.toString(PeriodFormat.getDefault()));\n    }\n",
        "begin_line": 482,
        "end_line": 488,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 483,col 9)-(line 483,col 57)",
            "(line 484,col 9)-(line 484,col 150)",
            "(line 486,col 9)-(line 486,col 50)",
            "(line 487,col 9)-(line 487,col 81)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToString_nullPeriodFormatter()",
        "snippet": "    public void testToString_nullPeriodFormatter() {\n        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", test.toString((PeriodFormatter) null));\n    }\n",
        "begin_line": 490,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 491,col 9)-(line 491,col 57)",
            "(line 492,col 9)-(line 492,col 84)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToPeriod()",
        "snippet": "    public void testToPeriod() {\n        Period test = new Period(123L);\n        Period result = test.toPeriod();\n        assertSame(test, result);\n    }\n",
        "begin_line": 496,
        "end_line": 500,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 497,col 9)-(line 497,col 39)",
            "(line 498,col 9)-(line 498,col 40)",
            "(line 499,col 9)-(line 499,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToMutablePeriod()",
        "snippet": "    public void testToMutablePeriod() {\n        Period test = new Period(123L);\n        MutablePeriod result = test.toMutablePeriod();\n        assertEquals(test, result);\n    }\n",
        "begin_line": 502,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 503,col 9)-(line 503,col 39)",
            "(line 504,col 9)-(line 504,col 54)",
            "(line 505,col 9)-(line 505,col 35)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToDurationFrom()",
        "snippet": "    public void testToDurationFrom() {\n        Period test = new Period(123L);\n        assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L)));\n    }\n",
        "begin_line": 514,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 515,col 9)-(line 515,col 39)",
            "(line 516,col 9)-(line 516,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToDurationTo()",
        "snippet": "    public void testToDurationTo() {\n        Period test = new Period(123L);\n        assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L)));\n    }\n",
        "begin_line": 519,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 520,col 9)-(line 520,col 39)",
            "(line 521,col 9)-(line 521,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithPeriodType1()",
        "snippet": "    public void testWithPeriodType1() {\n        Period test = new Period(123L);\n        Period result = test.withPeriodType(PeriodType.standard());\n        assertSame(test, result);\n    }\n",
        "begin_line": 525,
        "end_line": 529,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 526,col 9)-(line 526,col 39)",
            "(line 527,col 9)-(line 527,col 67)",
            "(line 528,col 9)-(line 528,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithPeriodType2()",
        "snippet": "    public void testWithPeriodType2() {\n        Period test = new Period(3123L);\n        Period result = test.withPeriodType(PeriodType.dayTime());\n        assertEquals(3, result.getSeconds());\n        assertEquals(123, result.getMillis());\n        assertEquals(PeriodType.dayTime(), result.getPeriodType());\n    }\n",
        "begin_line": 531,
        "end_line": 537,
        "comment": "",
        "child_ranges": [
            "(line 532,col 9)-(line 532,col 40)",
            "(line 533,col 9)-(line 533,col 66)",
            "(line 534,col 9)-(line 534,col 45)",
            "(line 535,col 9)-(line 535,col 46)",
            "(line 536,col 9)-(line 536,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithPeriodType3()",
        "snippet": "    public void testWithPeriodType3() {\n        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n        try {\n            test.withPeriodType(PeriodType.dayTime());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 539,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 540,col 9)-(line 540,col 80)",
            "(line 541,col 9)-(line 544,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithPeriodType4()",
        "snippet": "    public void testWithPeriodType4() {\n        Period test = new Period(3123L);\n        Period result = test.withPeriodType(null);\n        assertEquals(3, result.getSeconds());\n        assertEquals(123, result.getMillis());\n        assertEquals(PeriodType.standard(), result.getPeriodType());\n    }\n",
        "begin_line": 547,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 548,col 9)-(line 548,col 40)",
            "(line 549,col 9)-(line 549,col 50)",
            "(line 550,col 9)-(line 550,col 45)",
            "(line 551,col 9)-(line 551,col 46)",
            "(line 552,col 9)-(line 552,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithPeriodType5()",
        "snippet": "    public void testWithPeriodType5() {\n        Period test = new Period(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.standard());\n        Period result = test.withPeriodType(PeriodType.yearMonthDayTime());\n        assertEquals(PeriodType.yearMonthDayTime(), result.getPeriodType());\n        assertEquals(1, result.getYears());\n        assertEquals(2, result.getMonths());\n        assertEquals(0, result.getWeeks());\n        assertEquals(4, result.getDays());\n        assertEquals(5, result.getHours());\n        assertEquals(6, result.getMinutes());\n        assertEquals(7, result.getSeconds());\n        assertEquals(8, result.getMillis());\n    }\n",
        "begin_line": 555,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 556,col 9)-(line 556,col 80)",
            "(line 557,col 9)-(line 557,col 75)",
            "(line 558,col 9)-(line 558,col 76)",
            "(line 559,col 9)-(line 559,col 43)",
            "(line 560,col 9)-(line 560,col 44)",
            "(line 561,col 9)-(line 561,col 43)",
            "(line 562,col 9)-(line 562,col 42)",
            "(line 563,col 9)-(line 563,col 43)",
            "(line 564,col 9)-(line 564,col 45)",
            "(line 565,col 9)-(line 565,col 45)",
            "(line 566,col 9)-(line 566,col 44)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithFields1()",
        "snippet": "    public void testWithFields1() {\n        Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        Period test2 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis());\n        Period result = test1.withFields(test2);\n        \n        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1);\n        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test2);\n        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 9), result);\n    }\n",
        "begin_line": 570,
        "end_line": 578,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 571,col 9)-(line 571,col 58)",
            "(line 572,col 9)-(line 572,col 79)",
            "(line 573,col 9)-(line 573,col 48)",
            "(line 575,col 9)-(line 575,col 64)",
            "(line 576,col 9)-(line 576,col 85)",
            "(line 577,col 9)-(line 577,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithFields2()",
        "snippet": "    public void testWithFields2() {\n        Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        Period test2 = null;\n        Period result = test1.withFields(test2);\n        \n        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1);\n        assertSame(test1, result);\n    }\n",
        "begin_line": 580,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 581,col 9)-(line 581,col 58)",
            "(line 582,col 9)-(line 582,col 28)",
            "(line 583,col 9)-(line 583,col 48)",
            "(line 585,col 9)-(line 585,col 64)",
            "(line 586,col 9)-(line 586,col 34)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithFields3()",
        "snippet": "    public void testWithFields3() {\n        Period test1 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis());\n        Period test2 = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        try {\n            test1.withFields(test2);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test1);\n        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test2);\n    }\n",
        "begin_line": 589,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 590,col 9)-(line 590,col 79)",
            "(line 591,col 9)-(line 591,col 58)",
            "(line 592,col 9)-(line 595,col 48)",
            "(line 596,col 9)-(line 596,col 85)",
            "(line 597,col 9)-(line 597,col 64)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithField1()",
        "snippet": "    public void testWithField1() {\n        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        Period result = test.withField(DurationFieldType.years(), 6);\n        \n        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test);\n        assertEquals(new Period(6, 2, 3, 4, 5, 6, 7, 8), result);\n    }\n",
        "begin_line": 601,
        "end_line": 607,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 602,col 9)-(line 602,col 57)",
            "(line 603,col 9)-(line 603,col 69)",
            "(line 605,col 9)-(line 605,col 63)",
            "(line 606,col 9)-(line 606,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithField2()",
        "snippet": "    public void testWithField2() {\n        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        try {\n            test.withField(null, 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 609,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 610,col 9)-(line 610,col 57)",
            "(line 611,col 9)-(line 614,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithField3()",
        "snippet": "    public void testWithField3() {\n        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n        try {\n            test.withField(DurationFieldType.years(), 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 617,
        "end_line": 623,
        "comment": "",
        "child_ranges": [
            "(line 618,col 9)-(line 618,col 76)",
            "(line 619,col 9)-(line 622,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithField4()",
        "snippet": "    public void testWithField4() {\n        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n        Period result = test.withField(DurationFieldType.years(), 0);\n        assertEquals(test, result);\n    }\n",
        "begin_line": 625,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 626,col 9)-(line 626,col 76)",
            "(line 627,col 9)-(line 627,col 69)",
            "(line 628,col 9)-(line 628,col 35)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithFieldAdded1()",
        "snippet": "    public void testWithFieldAdded1() {\n        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        Period result = test.withFieldAdded(DurationFieldType.years(), 6);\n        \n        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test);\n        assertEquals(new Period(7, 2, 3, 4, 5, 6, 7, 8), result);\n    }\n",
        "begin_line": 632,
        "end_line": 638,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 633,col 9)-(line 633,col 57)",
            "(line 634,col 9)-(line 634,col 74)",
            "(line 636,col 9)-(line 636,col 63)",
            "(line 637,col 9)-(line 637,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithFieldAdded2()",
        "snippet": "    public void testWithFieldAdded2() {\n        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        try {\n            test.withFieldAdded(null, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 640,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 641,col 9)-(line 641,col 57)",
            "(line 642,col 9)-(line 645,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithFieldAdded3()",
        "snippet": "    public void testWithFieldAdded3() {\n        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n        try {\n            test.withFieldAdded(DurationFieldType.years(), 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 648,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 649,col 9)-(line 649,col 76)",
            "(line 650,col 9)-(line 653,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWithFieldAdded4()",
        "snippet": "    public void testWithFieldAdded4() {\n        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n        Period result = test.withFieldAdded(DurationFieldType.years(), 0);\n        assertEquals(test, result);\n    }\n",
        "begin_line": 656,
        "end_line": 660,
        "comment": "",
        "child_ranges": [
            "(line 657,col 9)-(line 657,col 76)",
            "(line 658,col 9)-(line 658,col 74)",
            "(line 659,col 9)-(line 659,col 35)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testPeriodStatics()",
        "snippet": "    public void testPeriodStatics() {\n        Period test;\n        test = Period.years(1);\n        assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n        test = Period.months(1);\n        assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n        test = Period.weeks(1);\n        assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard()));\n        test = Period.days(1);\n        assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard()));\n        test = Period.hours(1);\n        assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard()));\n        test = Period.minutes(1);\n        assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard()));\n        test = Period.seconds(1);\n        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard()));\n        test = Period.millis(1);\n        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard()));\n    }\n",
        "begin_line": 663,
        "end_line": 681,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 664,col 9)-(line 664,col 20)",
            "(line 665,col 9)-(line 665,col 31)",
            "(line 666,col 9)-(line 666,col 86)",
            "(line 667,col 9)-(line 667,col 32)",
            "(line 668,col 9)-(line 668,col 86)",
            "(line 669,col 9)-(line 669,col 31)",
            "(line 670,col 9)-(line 670,col 86)",
            "(line 671,col 9)-(line 671,col 30)",
            "(line 672,col 9)-(line 672,col 86)",
            "(line 673,col 9)-(line 673,col 31)",
            "(line 674,col 9)-(line 674,col 86)",
            "(line 675,col 9)-(line 675,col 33)",
            "(line 676,col 9)-(line 676,col 86)",
            "(line 677,col 9)-(line 677,col 33)",
            "(line 678,col 9)-(line 678,col 86)",
            "(line 679,col 9)-(line 679,col 32)",
            "(line 680,col 9)-(line 680,col 86)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testWith()",
        "snippet": "    public void testWith() {\n        Period test;\n        test = Period.years(5).withYears(1);\n        assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n        test = Period.months(5).withMonths(1);\n        assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n        test = Period.weeks(5).withWeeks(1);\n        assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard()));\n        test = Period.days(5).withDays(1);\n        assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard()));\n        test = Period.hours(5).withHours(1);\n        assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard()));\n        test = Period.minutes(5).withMinutes(1);\n        assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard()));\n        test = Period.seconds(5).withSeconds(1);\n        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard()));\n        test = Period.millis(5).withMillis(1);\n        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard()));\n        \n        test = new Period(0L, PeriodType.millis());\n        try {\n            test.withYears(1);\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }\n",
        "begin_line": 684,
        "end_line": 708,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 685,col 9)-(line 685,col 20)",
            "(line 686,col 9)-(line 686,col 44)",
            "(line 687,col 9)-(line 687,col 86)",
            "(line 688,col 9)-(line 688,col 46)",
            "(line 689,col 9)-(line 689,col 86)",
            "(line 690,col 9)-(line 690,col 44)",
            "(line 691,col 9)-(line 691,col 86)",
            "(line 692,col 9)-(line 692,col 42)",
            "(line 693,col 9)-(line 693,col 86)",
            "(line 694,col 9)-(line 694,col 44)",
            "(line 695,col 9)-(line 695,col 86)",
            "(line 696,col 9)-(line 696,col 48)",
            "(line 697,col 9)-(line 697,col 86)",
            "(line 698,col 9)-(line 698,col 48)",
            "(line 699,col 9)-(line 699,col 86)",
            "(line 700,col 9)-(line 700,col 46)",
            "(line 701,col 9)-(line 701,col 86)",
            "(line 703,col 9)-(line 703,col 51)",
            "(line 704,col 9)-(line 707,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testPlus()",
        "snippet": "    public void testPlus() {\n        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days());\n        \n        Period test = base.plus((ReadablePeriod) null);\n        assertSame(base, test);\n        \n        test = base.plus(Period.years(10));\n        assertEquals(11, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(3, test.getWeeks());\n        assertEquals(4, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n        \n        test = base.plus(Years.years(10));\n        assertEquals(11, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(3, test.getWeeks());\n        assertEquals(4, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n        \n        test = base.plus(Period.days(10));\n        assertEquals(1, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(3, test.getWeeks());\n        assertEquals(14, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n        \n        test = baseDaysOnly.plus(Period.years(0));\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(10, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n        \n        test = baseDaysOnly.plus(baseDaysOnly);\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(20, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n        \n        try {\n            baseDaysOnly.plus(Period.years(1));\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        try {\n            Period.days(Integer.MAX_VALUE).plus(Period.days(1));\n            fail();\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            Period.days(Integer.MIN_VALUE).plus(Period.days(-1));\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 711,
        "end_line": 782,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 712,col 9)-(line 712,col 57)",
            "(line 713,col 9)-(line 713,col 85)",
            "(line 715,col 9)-(line 715,col 55)",
            "(line 716,col 9)-(line 716,col 31)",
            "(line 718,col 9)-(line 718,col 43)",
            "(line 719,col 9)-(line 719,col 42)",
            "(line 720,col 9)-(line 720,col 42)",
            "(line 721,col 9)-(line 721,col 41)",
            "(line 722,col 9)-(line 722,col 40)",
            "(line 723,col 9)-(line 723,col 41)",
            "(line 724,col 9)-(line 724,col 43)",
            "(line 725,col 9)-(line 725,col 43)",
            "(line 726,col 9)-(line 726,col 42)",
            "(line 728,col 9)-(line 728,col 42)",
            "(line 729,col 9)-(line 729,col 42)",
            "(line 730,col 9)-(line 730,col 42)",
            "(line 731,col 9)-(line 731,col 41)",
            "(line 732,col 9)-(line 732,col 40)",
            "(line 733,col 9)-(line 733,col 41)",
            "(line 734,col 9)-(line 734,col 43)",
            "(line 735,col 9)-(line 735,col 43)",
            "(line 736,col 9)-(line 736,col 42)",
            "(line 738,col 9)-(line 738,col 42)",
            "(line 739,col 9)-(line 739,col 41)",
            "(line 740,col 9)-(line 740,col 42)",
            "(line 741,col 9)-(line 741,col 41)",
            "(line 742,col 9)-(line 742,col 41)",
            "(line 743,col 9)-(line 743,col 41)",
            "(line 744,col 9)-(line 744,col 43)",
            "(line 745,col 9)-(line 745,col 43)",
            "(line 746,col 9)-(line 746,col 42)",
            "(line 748,col 9)-(line 748,col 50)",
            "(line 749,col 9)-(line 749,col 41)",
            "(line 750,col 9)-(line 750,col 42)",
            "(line 751,col 9)-(line 751,col 41)",
            "(line 752,col 9)-(line 752,col 41)",
            "(line 753,col 9)-(line 753,col 41)",
            "(line 754,col 9)-(line 754,col 43)",
            "(line 755,col 9)-(line 755,col 43)",
            "(line 756,col 9)-(line 756,col 42)",
            "(line 758,col 9)-(line 758,col 47)",
            "(line 759,col 9)-(line 759,col 41)",
            "(line 760,col 9)-(line 760,col 42)",
            "(line 761,col 9)-(line 761,col 41)",
            "(line 762,col 9)-(line 762,col 41)",
            "(line 763,col 9)-(line 763,col 41)",
            "(line 764,col 9)-(line 764,col 43)",
            "(line 765,col 9)-(line 765,col 43)",
            "(line 766,col 9)-(line 766,col 42)",
            "(line 768,col 9)-(line 771,col 53)",
            "(line 773,col 9)-(line 776,col 43)",
            "(line 778,col 9)-(line 781,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testMinus()",
        "snippet": "    public void testMinus() {\n        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days());\n        \n        Period test = base.minus((ReadablePeriod) null);\n        assertSame(base, test);\n        \n        test = base.minus(Period.years(10));\n        assertEquals(-9, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(3, test.getWeeks());\n        assertEquals(4, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n        \n        test = base.minus(Years.years(10));\n        assertEquals(-9, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(3, test.getWeeks());\n        assertEquals(4, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n        \n        test = base.minus(Period.days(10));\n        assertEquals(1, test.getYears());\n        assertEquals(2, test.getMonths());\n        assertEquals(3, test.getWeeks());\n        assertEquals(-6, test.getDays());\n        assertEquals(5, test.getHours());\n        assertEquals(6, test.getMinutes());\n        assertEquals(7, test.getSeconds());\n        assertEquals(8, test.getMillis());\n        \n        test = baseDaysOnly.minus(Period.years(0));\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(10, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n        \n        test = baseDaysOnly.minus(baseDaysOnly);\n        assertEquals(0, test.getYears());\n        assertEquals(0, test.getMonths());\n        assertEquals(0, test.getWeeks());\n        assertEquals(0, test.getDays());\n        assertEquals(0, test.getHours());\n        assertEquals(0, test.getMinutes());\n        assertEquals(0, test.getSeconds());\n        assertEquals(0, test.getMillis());\n        \n        try {\n            baseDaysOnly.minus(Period.years(1));\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        try {\n            Period.days(Integer.MAX_VALUE).minus(Period.days(-1));\n            fail();\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            Period.days(Integer.MIN_VALUE).minus(Period.days(1));\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 785,
        "end_line": 856,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 786,col 9)-(line 786,col 57)",
            "(line 787,col 9)-(line 787,col 85)",
            "(line 789,col 9)-(line 789,col 56)",
            "(line 790,col 9)-(line 790,col 31)",
            "(line 792,col 9)-(line 792,col 44)",
            "(line 793,col 9)-(line 793,col 42)",
            "(line 794,col 9)-(line 794,col 42)",
            "(line 795,col 9)-(line 795,col 41)",
            "(line 796,col 9)-(line 796,col 40)",
            "(line 797,col 9)-(line 797,col 41)",
            "(line 798,col 9)-(line 798,col 43)",
            "(line 799,col 9)-(line 799,col 43)",
            "(line 800,col 9)-(line 800,col 42)",
            "(line 802,col 9)-(line 802,col 43)",
            "(line 803,col 9)-(line 803,col 42)",
            "(line 804,col 9)-(line 804,col 42)",
            "(line 805,col 9)-(line 805,col 41)",
            "(line 806,col 9)-(line 806,col 40)",
            "(line 807,col 9)-(line 807,col 41)",
            "(line 808,col 9)-(line 808,col 43)",
            "(line 809,col 9)-(line 809,col 43)",
            "(line 810,col 9)-(line 810,col 42)",
            "(line 812,col 9)-(line 812,col 43)",
            "(line 813,col 9)-(line 813,col 41)",
            "(line 814,col 9)-(line 814,col 42)",
            "(line 815,col 9)-(line 815,col 41)",
            "(line 816,col 9)-(line 816,col 41)",
            "(line 817,col 9)-(line 817,col 41)",
            "(line 818,col 9)-(line 818,col 43)",
            "(line 819,col 9)-(line 819,col 43)",
            "(line 820,col 9)-(line 820,col 42)",
            "(line 822,col 9)-(line 822,col 51)",
            "(line 823,col 9)-(line 823,col 41)",
            "(line 824,col 9)-(line 824,col 42)",
            "(line 825,col 9)-(line 825,col 41)",
            "(line 826,col 9)-(line 826,col 41)",
            "(line 827,col 9)-(line 827,col 41)",
            "(line 828,col 9)-(line 828,col 43)",
            "(line 829,col 9)-(line 829,col 43)",
            "(line 830,col 9)-(line 830,col 42)",
            "(line 832,col 9)-(line 832,col 48)",
            "(line 833,col 9)-(line 833,col 41)",
            "(line 834,col 9)-(line 834,col 42)",
            "(line 835,col 9)-(line 835,col 41)",
            "(line 836,col 9)-(line 836,col 40)",
            "(line 837,col 9)-(line 837,col 41)",
            "(line 838,col 9)-(line 838,col 43)",
            "(line 839,col 9)-(line 839,col 43)",
            "(line 840,col 9)-(line 840,col 42)",
            "(line 842,col 9)-(line 845,col 53)",
            "(line 847,col 9)-(line 850,col 43)",
            "(line 852,col 9)-(line 855,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testPlusFields()",
        "snippet": "    public void testPlusFields() {\n        Period test;\n        test = Period.years(1).plusYears(1);\n        assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n        test = Period.months(1).plusMonths(1);\n        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n        test = Period.weeks(1).plusWeeks(1);\n        assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n        test = Period.days(1).plusDays(1);\n        assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test);\n        test = Period.hours(1).plusHours(1);\n        assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test);\n        test = Period.minutes(1).plusMinutes(1);\n        assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test);\n        test = Period.seconds(1).plusSeconds(1);\n        assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test);\n        test = Period.millis(1).plusMillis(1);\n        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test);\n        \n        test = new Period(0L, PeriodType.millis());\n        try {\n            test.plusYears(1);\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }\n",
        "begin_line": 859,
        "end_line": 883,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 860,col 9)-(line 860,col 20)",
            "(line 861,col 9)-(line 861,col 44)",
            "(line 862,col 9)-(line 862,col 86)",
            "(line 863,col 9)-(line 863,col 46)",
            "(line 864,col 9)-(line 864,col 86)",
            "(line 865,col 9)-(line 865,col 44)",
            "(line 866,col 9)-(line 866,col 86)",
            "(line 867,col 9)-(line 867,col 42)",
            "(line 868,col 9)-(line 868,col 86)",
            "(line 869,col 9)-(line 869,col 44)",
            "(line 870,col 9)-(line 870,col 86)",
            "(line 871,col 9)-(line 871,col 48)",
            "(line 872,col 9)-(line 872,col 86)",
            "(line 873,col 9)-(line 873,col 48)",
            "(line 874,col 9)-(line 874,col 86)",
            "(line 875,col 9)-(line 875,col 46)",
            "(line 876,col 9)-(line 876,col 86)",
            "(line 878,col 9)-(line 878,col 51)",
            "(line 879,col 9)-(line 882,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testPlusFieldsZero()",
        "snippet": "    public void testPlusFieldsZero() {\n        Period test, result;\n        test = Period.years(1);\n        result = test.plusYears(0);\n        assertSame(test, result);\n        test = Period.months(1);\n        result = test.plusMonths(0);\n        assertSame(test, result);\n        test = Period.weeks(1);\n        result = test.plusWeeks(0);\n        assertSame(test, result);\n        test = Period.days(1);\n        result = test.plusDays(0);\n        assertSame(test, result);\n        test = Period.hours(1);\n        result = test.plusHours(0);\n        assertSame(test, result);\n        test = Period.minutes(1);\n        result = test.plusMinutes(0);\n        assertSame(test, result);\n        test = Period.seconds(1);\n        result = test.plusSeconds(0);\n        assertSame(test, result);\n        test = Period.millis(1);\n        result = test.plusMillis(0);\n        assertSame(test, result);\n    }\n",
        "begin_line": 885,
        "end_line": 911,
        "comment": "",
        "child_ranges": [
            "(line 886,col 9)-(line 886,col 28)",
            "(line 887,col 9)-(line 887,col 31)",
            "(line 888,col 9)-(line 888,col 35)",
            "(line 889,col 9)-(line 889,col 33)",
            "(line 890,col 9)-(line 890,col 32)",
            "(line 891,col 9)-(line 891,col 36)",
            "(line 892,col 9)-(line 892,col 33)",
            "(line 893,col 9)-(line 893,col 31)",
            "(line 894,col 9)-(line 894,col 35)",
            "(line 895,col 9)-(line 895,col 33)",
            "(line 896,col 9)-(line 896,col 30)",
            "(line 897,col 9)-(line 897,col 34)",
            "(line 898,col 9)-(line 898,col 33)",
            "(line 899,col 9)-(line 899,col 31)",
            "(line 900,col 9)-(line 900,col 35)",
            "(line 901,col 9)-(line 901,col 33)",
            "(line 902,col 9)-(line 902,col 33)",
            "(line 903,col 9)-(line 903,col 37)",
            "(line 904,col 9)-(line 904,col 33)",
            "(line 905,col 9)-(line 905,col 33)",
            "(line 906,col 9)-(line 906,col 37)",
            "(line 907,col 9)-(line 907,col 33)",
            "(line 908,col 9)-(line 908,col 32)",
            "(line 909,col 9)-(line 909,col 36)",
            "(line 910,col 9)-(line 910,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testMinusFields()",
        "snippet": "    public void testMinusFields() {\n        Period test;\n        test = Period.years(3).minusYears(1);\n        assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n        test = Period.months(3).minusMonths(1);\n        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n        test = Period.weeks(3).minusWeeks(1);\n        assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n        test = Period.days(3).minusDays(1);\n        assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test);\n        test = Period.hours(3).minusHours(1);\n        assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test);\n        test = Period.minutes(3).minusMinutes(1);\n        assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test);\n        test = Period.seconds(3).minusSeconds(1);\n        assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test);\n        test = Period.millis(3).minusMillis(1);\n        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test);\n        \n        test = new Period(0L, PeriodType.millis());\n        try {\n            test.minusYears(1);\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }\n",
        "begin_line": 913,
        "end_line": 937,
        "comment": "",
        "child_ranges": [
            "(line 914,col 9)-(line 914,col 20)",
            "(line 915,col 9)-(line 915,col 45)",
            "(line 916,col 9)-(line 916,col 86)",
            "(line 917,col 9)-(line 917,col 47)",
            "(line 918,col 9)-(line 918,col 86)",
            "(line 919,col 9)-(line 919,col 45)",
            "(line 920,col 9)-(line 920,col 86)",
            "(line 921,col 9)-(line 921,col 43)",
            "(line 922,col 9)-(line 922,col 86)",
            "(line 923,col 9)-(line 923,col 45)",
            "(line 924,col 9)-(line 924,col 86)",
            "(line 925,col 9)-(line 925,col 49)",
            "(line 926,col 9)-(line 926,col 86)",
            "(line 927,col 9)-(line 927,col 49)",
            "(line 928,col 9)-(line 928,col 86)",
            "(line 929,col 9)-(line 929,col 47)",
            "(line 930,col 9)-(line 930,col 86)",
            "(line 932,col 9)-(line 932,col 51)",
            "(line 933,col 9)-(line 936,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testMultipliedBy()",
        "snippet": "    public void testMultipliedBy() {\n        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        \n        Period test = base.multipliedBy(1);\n        assertSame(base, test);\n        \n        test = base.multipliedBy(0);\n        assertEquals(Period.ZERO, test);\n        \n        test = base.multipliedBy(2);\n        assertEquals(2, test.getYears());\n        assertEquals(4, test.getMonths());\n        assertEquals(6, test.getWeeks());\n        assertEquals(8, test.getDays());\n        assertEquals(10, test.getHours());\n        assertEquals(12, test.getMinutes());\n        assertEquals(14, test.getSeconds());\n        assertEquals(16, test.getMillis());\n        \n        test = base.multipliedBy(3);\n        assertEquals(3, test.getYears());\n        assertEquals(6, test.getMonths());\n        assertEquals(9, test.getWeeks());\n        assertEquals(12, test.getDays());\n        assertEquals(15, test.getHours());\n        assertEquals(18, test.getMinutes());\n        assertEquals(21, test.getSeconds());\n        assertEquals(24, test.getMillis());\n        \n        test = base.multipliedBy(-4);\n        assertEquals(-4, test.getYears());\n        assertEquals(-8, test.getMonths());\n        assertEquals(-12, test.getWeeks());\n        assertEquals(-16, test.getDays());\n        assertEquals(-20, test.getHours());\n        assertEquals(-24, test.getMinutes());\n        assertEquals(-28, test.getSeconds());\n        assertEquals(-32, test.getMillis());\n        \n        try {\n            Period.days(Integer.MAX_VALUE).multipliedBy(2);\n            fail();\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            Period.days(Integer.MIN_VALUE).multipliedBy(2);\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 940,
        "end_line": 988,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 941,col 9)-(line 941,col 57)",
            "(line 943,col 9)-(line 943,col 43)",
            "(line 944,col 9)-(line 944,col 31)",
            "(line 946,col 9)-(line 946,col 36)",
            "(line 947,col 9)-(line 947,col 40)",
            "(line 949,col 9)-(line 949,col 36)",
            "(line 950,col 9)-(line 950,col 41)",
            "(line 951,col 9)-(line 951,col 42)",
            "(line 952,col 9)-(line 952,col 41)",
            "(line 953,col 9)-(line 953,col 40)",
            "(line 954,col 9)-(line 954,col 42)",
            "(line 955,col 9)-(line 955,col 44)",
            "(line 956,col 9)-(line 956,col 44)",
            "(line 957,col 9)-(line 957,col 43)",
            "(line 959,col 9)-(line 959,col 36)",
            "(line 960,col 9)-(line 960,col 41)",
            "(line 961,col 9)-(line 961,col 42)",
            "(line 962,col 9)-(line 962,col 41)",
            "(line 963,col 9)-(line 963,col 41)",
            "(line 964,col 9)-(line 964,col 42)",
            "(line 965,col 9)-(line 965,col 44)",
            "(line 966,col 9)-(line 966,col 44)",
            "(line 967,col 9)-(line 967,col 43)",
            "(line 969,col 9)-(line 969,col 37)",
            "(line 970,col 9)-(line 970,col 42)",
            "(line 971,col 9)-(line 971,col 43)",
            "(line 972,col 9)-(line 972,col 43)",
            "(line 973,col 9)-(line 973,col 42)",
            "(line 974,col 9)-(line 974,col 43)",
            "(line 975,col 9)-(line 975,col 45)",
            "(line 976,col 9)-(line 976,col 45)",
            "(line 977,col 9)-(line 977,col 44)",
            "(line 979,col 9)-(line 982,col 43)",
            "(line 984,col 9)-(line 987,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNegated()",
        "snippet": "    public void testNegated() {\n        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n        \n        Period test = Period.ZERO.negated();\n        assertEquals(Period.ZERO, test);\n        \n        test = base.negated();\n        assertEquals(-1, test.getYears());\n        assertEquals(-2, test.getMonths());\n        assertEquals(-3, test.getWeeks());\n        assertEquals(-4, test.getDays());\n        assertEquals(-5, test.getHours());\n        assertEquals(-6, test.getMinutes());\n        assertEquals(-7, test.getSeconds());\n        assertEquals(-8, test.getMillis());\n        \n        test = Period.days(Integer.MAX_VALUE).negated();\n        assertEquals(-Integer.MAX_VALUE, test.getDays());\n        \n        try {\n            Period.days(Integer.MIN_VALUE).negated();\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 991,
        "end_line": 1014,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 992,col 9)-(line 992,col 57)",
            "(line 994,col 9)-(line 994,col 44)",
            "(line 995,col 9)-(line 995,col 40)",
            "(line 997,col 9)-(line 997,col 30)",
            "(line 998,col 9)-(line 998,col 42)",
            "(line 999,col 9)-(line 999,col 43)",
            "(line 1000,col 9)-(line 1000,col 42)",
            "(line 1001,col 9)-(line 1001,col 41)",
            "(line 1002,col 9)-(line 1002,col 42)",
            "(line 1003,col 9)-(line 1003,col 44)",
            "(line 1004,col 9)-(line 1004,col 44)",
            "(line 1005,col 9)-(line 1005,col 43)",
            "(line 1007,col 9)-(line 1007,col 56)",
            "(line 1008,col 9)-(line 1008,col 57)",
            "(line 1010,col 9)-(line 1013,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardWeeks()",
        "snippet": "    public void testToStandardWeeks() {\n        Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8);\n        assertEquals(3, test.toStandardWeeks().getWeeks());\n        \n        test = new Period(0, 0, 3, 7, 0, 0, 0, 0);\n        assertEquals(4, test.toStandardWeeks().getWeeks());\n        \n        test = new Period(0, 0, 0, 6, 23, 59, 59, 1000);\n        assertEquals(1, test.toStandardWeeks().getWeeks());\n        \n        test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0);\n        assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks());\n        \n        test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n        long intMax = Integer.MAX_VALUE;\n        BigInteger expected = BigInteger.valueOf(intMax);\n        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));\n        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));\n        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR));\n        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY));\n        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK));\n        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);\n        assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks());\n        \n        test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);\n        try {\n            test.toStandardWeeks();\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1017,
        "end_line": 1046,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1018,col 9)-(line 1018,col 57)",
            "(line 1019,col 9)-(line 1019,col 59)",
            "(line 1021,col 9)-(line 1021,col 50)",
            "(line 1022,col 9)-(line 1022,col 59)",
            "(line 1024,col 9)-(line 1024,col 56)",
            "(line 1025,col 9)-(line 1025,col 59)",
            "(line 1027,col 9)-(line 1027,col 66)",
            "(line 1028,col 9)-(line 1028,col 75)",
            "(line 1030,col 9)-(line 1030,col 130)",
            "(line 1031,col 9)-(line 1031,col 40)",
            "(line 1032,col 9)-(line 1032,col 57)",
            "(line 1033,col 9)-(line 1033,col 98)",
            "(line 1034,col 9)-(line 1034,col 98)",
            "(line 1035,col 9)-(line 1035,col 96)",
            "(line 1036,col 9)-(line 1036,col 95)",
            "(line 1037,col 9)-(line 1037,col 90)",
            "(line 1038,col 9)-(line 1038,col 79)",
            "(line 1039,col 9)-(line 1039,col 78)",
            "(line 1041,col 9)-(line 1041,col 66)",
            "(line 1042,col 9)-(line 1045,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardWeeks_years()",
        "snippet": "    public void testToStandardWeeks_years() {\n        Period test = Period.years(1);\n        try {\n            test.toStandardWeeks();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(-1);\n        try {\n            test.toStandardWeeks();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(0);\n        assertEquals(0, test.toStandardWeeks().getWeeks());\n    }\n",
        "begin_line": 1048,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 9)-(line 1049,col 38)",
            "(line 1050,col 9)-(line 1053,col 53)",
            "(line 1055,col 9)-(line 1055,col 32)",
            "(line 1056,col 9)-(line 1059,col 53)",
            "(line 1061,col 9)-(line 1061,col 31)",
            "(line 1062,col 9)-(line 1062,col 59)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardWeeks_months()",
        "snippet": "    public void testToStandardWeeks_months() {\n        Period test = Period.months(1);\n        try {\n            test.toStandardWeeks();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(-1);\n        try {\n            test.toStandardWeeks();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(0);\n        assertEquals(0, test.toStandardWeeks().getWeeks());\n    }\n",
        "begin_line": 1065,
        "end_line": 1080,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 9)-(line 1066,col 39)",
            "(line 1067,col 9)-(line 1070,col 53)",
            "(line 1072,col 9)-(line 1072,col 33)",
            "(line 1073,col 9)-(line 1076,col 53)",
            "(line 1078,col 9)-(line 1078,col 32)",
            "(line 1079,col 9)-(line 1079,col 59)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardDays()",
        "snippet": "    public void testToStandardDays() {\n        Period test = new Period(0, 0, 0, 4, 5, 6, 7, 8);\n        assertEquals(4, test.toStandardDays().getDays());\n        \n        test = new Period(0, 0, 1, 4, 0, 0, 0, 0);\n        assertEquals(11, test.toStandardDays().getDays());\n        \n        test = new Period(0, 0, 0, 0, 23, 59, 59, 1000);\n        assertEquals(1, test.toStandardDays().getDays());\n        \n        test = new Period(0, 0, 0, Integer.MAX_VALUE, 0, 0, 0, 0);\n        assertEquals(Integer.MAX_VALUE, test.toStandardDays().getDays());\n        \n        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n        long intMax = Integer.MAX_VALUE;\n        BigInteger expected = BigInteger.valueOf(intMax);\n        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));\n        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));\n        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR));\n        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY));\n        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);\n        assertEquals(expected.longValue(), test.toStandardDays().getDays());\n        \n        test = new Period(0, 0, 0, Integer.MAX_VALUE, 24, 0, 0, 0);\n        try {\n            test.toStandardDays();\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1083,
        "end_line": 1111,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1084,col 9)-(line 1084,col 57)",
            "(line 1085,col 9)-(line 1085,col 57)",
            "(line 1087,col 9)-(line 1087,col 50)",
            "(line 1088,col 9)-(line 1088,col 58)",
            "(line 1090,col 9)-(line 1090,col 56)",
            "(line 1091,col 9)-(line 1091,col 57)",
            "(line 1093,col 9)-(line 1093,col 66)",
            "(line 1094,col 9)-(line 1094,col 73)",
            "(line 1096,col 9)-(line 1096,col 114)",
            "(line 1097,col 9)-(line 1097,col 40)",
            "(line 1098,col 9)-(line 1098,col 57)",
            "(line 1099,col 9)-(line 1099,col 98)",
            "(line 1100,col 9)-(line 1100,col 98)",
            "(line 1101,col 9)-(line 1101,col 96)",
            "(line 1102,col 9)-(line 1102,col 89)",
            "(line 1103,col 9)-(line 1103,col 79)",
            "(line 1104,col 9)-(line 1104,col 76)",
            "(line 1106,col 9)-(line 1106,col 67)",
            "(line 1107,col 9)-(line 1110,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardDays_years()",
        "snippet": "    public void testToStandardDays_years() {\n        Period test = Period.years(1);\n        try {\n            test.toStandardDays();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(-1);\n        try {\n            test.toStandardDays();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(0);\n        assertEquals(0, test.toStandardDays().getDays());\n    }\n",
        "begin_line": 1113,
        "end_line": 1128,
        "comment": "",
        "child_ranges": [
            "(line 1114,col 9)-(line 1114,col 38)",
            "(line 1115,col 9)-(line 1118,col 53)",
            "(line 1120,col 9)-(line 1120,col 32)",
            "(line 1121,col 9)-(line 1124,col 53)",
            "(line 1126,col 9)-(line 1126,col 31)",
            "(line 1127,col 9)-(line 1127,col 57)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardDays_months()",
        "snippet": "    public void testToStandardDays_months() {\n        Period test = Period.months(1);\n        try {\n            test.toStandardDays();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(-1);\n        try {\n            test.toStandardDays();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(0);\n        assertEquals(0, test.toStandardDays().getDays());\n    }\n",
        "begin_line": 1130,
        "end_line": 1145,
        "comment": "",
        "child_ranges": [
            "(line 1131,col 9)-(line 1131,col 39)",
            "(line 1132,col 9)-(line 1135,col 53)",
            "(line 1137,col 9)-(line 1137,col 33)",
            "(line 1138,col 9)-(line 1141,col 53)",
            "(line 1143,col 9)-(line 1143,col 32)",
            "(line 1144,col 9)-(line 1144,col 57)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardHours()",
        "snippet": "    public void testToStandardHours() {\n        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n        assertEquals(5, test.toStandardHours().getHours());\n        \n        test = new Period(0, 0, 0, 1, 5, 0, 0, 0);\n        assertEquals(29, test.toStandardHours().getHours());\n        \n        test = new Period(0, 0, 0, 0, 0, 59, 59, 1000);\n        assertEquals(1, test.toStandardHours().getHours());\n        \n        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 0, 0, 0);\n        assertEquals(Integer.MAX_VALUE, test.toStandardHours().getHours());\n        \n        test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n        long intMax = Integer.MAX_VALUE;\n        BigInteger expected = BigInteger.valueOf(intMax);\n        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));\n        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));\n        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR));\n        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);\n        assertEquals(expected.longValue(), test.toStandardHours().getHours());\n        \n        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 60, 0, 0);\n        try {\n            test.toStandardHours();\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1148,
        "end_line": 1175,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1149,col 9)-(line 1149,col 57)",
            "(line 1150,col 9)-(line 1150,col 59)",
            "(line 1152,col 9)-(line 1152,col 50)",
            "(line 1153,col 9)-(line 1153,col 60)",
            "(line 1155,col 9)-(line 1155,col 55)",
            "(line 1156,col 9)-(line 1156,col 59)",
            "(line 1158,col 9)-(line 1158,col 66)",
            "(line 1159,col 9)-(line 1159,col 75)",
            "(line 1161,col 9)-(line 1161,col 98)",
            "(line 1162,col 9)-(line 1162,col 40)",
            "(line 1163,col 9)-(line 1163,col 57)",
            "(line 1164,col 9)-(line 1164,col 98)",
            "(line 1165,col 9)-(line 1165,col 98)",
            "(line 1166,col 9)-(line 1166,col 90)",
            "(line 1167,col 9)-(line 1167,col 79)",
            "(line 1168,col 9)-(line 1168,col 78)",
            "(line 1170,col 9)-(line 1170,col 67)",
            "(line 1171,col 9)-(line 1174,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardHours_years()",
        "snippet": "    public void testToStandardHours_years() {\n        Period test = Period.years(1);\n        try {\n            test.toStandardHours();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(-1);\n        try {\n            test.toStandardHours();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(0);\n        assertEquals(0, test.toStandardHours().getHours());\n    }\n",
        "begin_line": 1177,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1178,col 9)-(line 1178,col 38)",
            "(line 1179,col 9)-(line 1182,col 53)",
            "(line 1184,col 9)-(line 1184,col 32)",
            "(line 1185,col 9)-(line 1188,col 53)",
            "(line 1190,col 9)-(line 1190,col 31)",
            "(line 1191,col 9)-(line 1191,col 59)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardHours_months()",
        "snippet": "    public void testToStandardHours_months() {\n        Period test = Period.months(1);\n        try {\n            test.toStandardHours();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(-1);\n        try {\n            test.toStandardHours();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(0);\n        assertEquals(0, test.toStandardHours().getHours());\n    }\n",
        "begin_line": 1194,
        "end_line": 1209,
        "comment": "",
        "child_ranges": [
            "(line 1195,col 9)-(line 1195,col 39)",
            "(line 1196,col 9)-(line 1199,col 53)",
            "(line 1201,col 9)-(line 1201,col 33)",
            "(line 1202,col 9)-(line 1205,col 53)",
            "(line 1207,col 9)-(line 1207,col 32)",
            "(line 1208,col 9)-(line 1208,col 59)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardMinutes()",
        "snippet": "    public void testToStandardMinutes() {\n        Period test = new Period(0, 0, 0, 0, 0, 6, 7, 8);\n        assertEquals(6, test.toStandardMinutes().getMinutes());\n        \n        test = new Period(0, 0, 0, 0, 1, 6, 0, 0);\n        assertEquals(66, test.toStandardMinutes().getMinutes());\n        \n        test = new Period(0, 0, 0, 0, 0, 0, 59, 1000);\n        assertEquals(1, test.toStandardMinutes().getMinutes());\n        \n        test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, 0, 0);\n        assertEquals(Integer.MAX_VALUE, test.toStandardMinutes().getMinutes());\n        \n        test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);\n        long intMax = Integer.MAX_VALUE;\n        BigInteger expected = BigInteger.valueOf(intMax);\n        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));\n        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_MINUTE));\n        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);\n        assertEquals(expected.longValue(), test.toStandardMinutes().getMinutes());\n        \n        test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, 60, 0);\n        try {\n            test.toStandardMinutes();\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1212,
        "end_line": 1238,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1213,col 9)-(line 1213,col 57)",
            "(line 1214,col 9)-(line 1214,col 63)",
            "(line 1216,col 9)-(line 1216,col 50)",
            "(line 1217,col 9)-(line 1217,col 64)",
            "(line 1219,col 9)-(line 1219,col 54)",
            "(line 1220,col 9)-(line 1220,col 63)",
            "(line 1222,col 9)-(line 1222,col 66)",
            "(line 1223,col 9)-(line 1223,col 79)",
            "(line 1225,col 9)-(line 1225,col 82)",
            "(line 1226,col 9)-(line 1226,col 40)",
            "(line 1227,col 9)-(line 1227,col 57)",
            "(line 1228,col 9)-(line 1228,col 98)",
            "(line 1229,col 9)-(line 1229,col 92)",
            "(line 1230,col 9)-(line 1230,col 79)",
            "(line 1231,col 9)-(line 1231,col 82)",
            "(line 1233,col 9)-(line 1233,col 67)",
            "(line 1234,col 9)-(line 1237,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardMinutes_years()",
        "snippet": "    public void testToStandardMinutes_years() {\n        Period test = Period.years(1);\n        try {\n            test.toStandardMinutes();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(-1);\n        try {\n            test.toStandardMinutes();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(0);\n        assertEquals(0, test.toStandardMinutes().getMinutes());\n    }\n",
        "begin_line": 1240,
        "end_line": 1255,
        "comment": "",
        "child_ranges": [
            "(line 1241,col 9)-(line 1241,col 38)",
            "(line 1242,col 9)-(line 1245,col 53)",
            "(line 1247,col 9)-(line 1247,col 32)",
            "(line 1248,col 9)-(line 1251,col 53)",
            "(line 1253,col 9)-(line 1253,col 31)",
            "(line 1254,col 9)-(line 1254,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardMinutes_months()",
        "snippet": "    public void testToStandardMinutes_months() {\n        Period test = Period.months(1);\n        try {\n            test.toStandardMinutes();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(-1);\n        try {\n            test.toStandardMinutes();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(0);\n        assertEquals(0, test.toStandardMinutes().getMinutes());\n    }\n",
        "begin_line": 1257,
        "end_line": 1272,
        "comment": "",
        "child_ranges": [
            "(line 1258,col 9)-(line 1258,col 39)",
            "(line 1259,col 9)-(line 1262,col 53)",
            "(line 1264,col 9)-(line 1264,col 33)",
            "(line 1265,col 9)-(line 1268,col 53)",
            "(line 1270,col 9)-(line 1270,col 32)",
            "(line 1271,col 9)-(line 1271,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardSeconds()",
        "snippet": "    public void testToStandardSeconds() {\n        Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8);\n        assertEquals(7, test.toStandardSeconds().getSeconds());\n        \n        test = new Period(0, 0, 0, 0, 0, 1, 3, 0);\n        assertEquals(63, test.toStandardSeconds().getSeconds());\n        \n        test = new Period(0, 0, 0, 0, 0, 0, 0, 1000);\n        assertEquals(1, test.toStandardSeconds().getSeconds());\n        \n        test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0);\n        assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds());\n        \n        test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE);\n        long expected = 20;\n        expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND;\n        assertEquals(expected, test.toStandardSeconds().getSeconds());\n        \n        test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000);\n        try {\n            test.toStandardSeconds();\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1275,
        "end_line": 1298,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1276,col 9)-(line 1276,col 57)",
            "(line 1277,col 9)-(line 1277,col 63)",
            "(line 1279,col 9)-(line 1279,col 50)",
            "(line 1280,col 9)-(line 1280,col 64)",
            "(line 1282,col 9)-(line 1282,col 53)",
            "(line 1283,col 9)-(line 1283,col 63)",
            "(line 1285,col 9)-(line 1285,col 66)",
            "(line 1286,col 9)-(line 1286,col 79)",
            "(line 1288,col 9)-(line 1288,col 67)",
            "(line 1289,col 9)-(line 1289,col 27)",
            "(line 1290,col 9)-(line 1290,col 85)",
            "(line 1291,col 9)-(line 1291,col 70)",
            "(line 1293,col 9)-(line 1293,col 69)",
            "(line 1294,col 9)-(line 1297,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardSeconds_years()",
        "snippet": "    public void testToStandardSeconds_years() {\n        Period test = Period.years(1);\n        try {\n            test.toStandardSeconds();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(-1);\n        try {\n            test.toStandardSeconds();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(0);\n        assertEquals(0, test.toStandardSeconds().getSeconds());\n    }\n",
        "begin_line": 1300,
        "end_line": 1315,
        "comment": "",
        "child_ranges": [
            "(line 1301,col 9)-(line 1301,col 38)",
            "(line 1302,col 9)-(line 1305,col 53)",
            "(line 1307,col 9)-(line 1307,col 32)",
            "(line 1308,col 9)-(line 1311,col 53)",
            "(line 1313,col 9)-(line 1313,col 31)",
            "(line 1314,col 9)-(line 1314,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardSeconds_months()",
        "snippet": "    public void testToStandardSeconds_months() {\n        Period test = Period.months(1);\n        try {\n            test.toStandardSeconds();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(-1);\n        try {\n            test.toStandardSeconds();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(0);\n        assertEquals(0, test.toStandardSeconds().getSeconds());\n    }\n",
        "begin_line": 1317,
        "end_line": 1332,
        "comment": "",
        "child_ranges": [
            "(line 1318,col 9)-(line 1318,col 39)",
            "(line 1319,col 9)-(line 1322,col 53)",
            "(line 1324,col 9)-(line 1324,col 33)",
            "(line 1325,col 9)-(line 1328,col 53)",
            "(line 1330,col 9)-(line 1330,col 32)",
            "(line 1331,col 9)-(line 1331,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardDuration()",
        "snippet": "    public void testToStandardDuration() {\n        Period test = new Period(0, 0, 0, 0, 0, 0, 0, 8);\n        assertEquals(8, test.toStandardDuration().getMillis());\n        \n        test = new Period(0, 0, 0, 0, 0, 0, 1, 20);\n        assertEquals(1020, test.toStandardDuration().getMillis());\n        \n        test = new Period(0, 0, 0, 0, 0, 0, 0, Integer.MAX_VALUE);\n        assertEquals(Integer.MAX_VALUE, test.toStandardDuration().getMillis());\n        \n        test = new Period(0, 0, 0, 0, 0, 10, 20, Integer.MAX_VALUE);\n        long expected = Integer.MAX_VALUE;\n        expected += 10L * ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n        expected += 20L * ((long) DateTimeConstants.MILLIS_PER_SECOND);\n        assertEquals(expected, test.toStandardDuration().getMillis());\n        \n        // proof that overflow does not occur\n        BigInteger intMax = BigInteger.valueOf(Integer.MAX_VALUE);\n        BigInteger exp = intMax;\n        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_SECOND)));\n        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_MINUTE)));\n        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR)));\n        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY)));\n        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)));\n        assertTrue(exp.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);\n//        test = new Period(0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n//        try {\n//            test.toStandardDuration();\n//            fail();\n//        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1335,
        "end_line": 1365,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1336,col 9)-(line 1336,col 57)",
            "(line 1337,col 9)-(line 1337,col 63)",
            "(line 1339,col 9)-(line 1339,col 51)",
            "(line 1340,col 9)-(line 1340,col 66)",
            "(line 1342,col 9)-(line 1342,col 66)",
            "(line 1343,col 9)-(line 1343,col 79)",
            "(line 1345,col 9)-(line 1345,col 68)",
            "(line 1346,col 9)-(line 1346,col 42)",
            "(line 1347,col 9)-(line 1347,col 71)",
            "(line 1348,col 9)-(line 1348,col 71)",
            "(line 1349,col 9)-(line 1349,col 70)",
            "(line 1352,col 9)-(line 1352,col 66)",
            "(line 1353,col 9)-(line 1353,col 32)",
            "(line 1354,col 9)-(line 1354,col 96)",
            "(line 1355,col 9)-(line 1355,col 96)",
            "(line 1356,col 9)-(line 1356,col 94)",
            "(line 1357,col 9)-(line 1357,col 93)",
            "(line 1358,col 9)-(line 1358,col 94)",
            "(line 1359,col 9)-(line 1359,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardDuration_years()",
        "snippet": "    public void testToStandardDuration_years() {\n        Period test = Period.years(1);\n        try {\n            test.toStandardDuration();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(-1);\n        try {\n            test.toStandardDuration();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.years(0);\n        assertEquals(0, test.toStandardDuration().getMillis());\n    }\n",
        "begin_line": 1367,
        "end_line": 1382,
        "comment": "",
        "child_ranges": [
            "(line 1368,col 9)-(line 1368,col 38)",
            "(line 1369,col 9)-(line 1372,col 53)",
            "(line 1374,col 9)-(line 1374,col 32)",
            "(line 1375,col 9)-(line 1378,col 53)",
            "(line 1380,col 9)-(line 1380,col 31)",
            "(line 1381,col 9)-(line 1381,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testToStandardDuration_months()",
        "snippet": "    public void testToStandardDuration_months() {\n        Period test = Period.months(1);\n        try {\n            test.toStandardDuration();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(-1);\n        try {\n            test.toStandardDuration();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        \n        test = Period.months(0);\n        assertEquals(0, test.toStandardDuration().getMillis());\n    }\n",
        "begin_line": 1384,
        "end_line": 1399,
        "comment": "",
        "child_ranges": [
            "(line 1385,col 9)-(line 1385,col 39)",
            "(line 1386,col 9)-(line 1389,col 53)",
            "(line 1391,col 9)-(line 1391,col 33)",
            "(line 1392,col 9)-(line 1395,col 53)",
            "(line 1397,col 9)-(line 1397,col 32)",
            "(line 1398,col 9)-(line 1398,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_yearMonth1()",
        "snippet": "    public void testNormalizedStandard_yearMonth1() {\n        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard();\n        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n        assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result);\n    }\n",
        "begin_line": 1402,
        "end_line": 1407,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1403,col 9)-(line 1403,col 58)",
            "(line 1404,col 9)-(line 1404,col 50)",
            "(line 1405,col 9)-(line 1405,col 64)",
            "(line 1406,col 9)-(line 1406,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_yearMonth2()",
        "snippet": "    public void testNormalizedStandard_yearMonth2() {\n        Period test = new Period(Integer.MAX_VALUE, 15, 0, 0, 0, 0, 0, 0);\n        try {\n            test.normalizedStandard();\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1409,
        "end_line": 1415,
        "comment": "",
        "child_ranges": [
            "(line 1410,col 9)-(line 1410,col 74)",
            "(line 1411,col 9)-(line 1414,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_weekDay1()",
        "snippet": "    public void testNormalizedStandard_weekDay1() {\n        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);\n        Period result = test.normalizedStandard();\n        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);\n        assertEquals(new Period(0, 0, 2, 5, 0, 0, 0, 0), result);\n    }\n",
        "begin_line": 1417,
        "end_line": 1422,
        "comment": "",
        "child_ranges": [
            "(line 1418,col 9)-(line 1418,col 58)",
            "(line 1419,col 9)-(line 1419,col 50)",
            "(line 1420,col 9)-(line 1420,col 64)",
            "(line 1421,col 9)-(line 1421,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_weekDay2()",
        "snippet": "    public void testNormalizedStandard_weekDay2() {\n        Period test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);\n        try {\n            test.normalizedStandard();\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1424,
        "end_line": 1430,
        "comment": "",
        "child_ranges": [
            "(line 1425,col 9)-(line 1425,col 73)",
            "(line 1426,col 9)-(line 1429,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_yearMonthWeekDay()",
        "snippet": "    public void testNormalizedStandard_yearMonthWeekDay() {\n        Period test = new Period(1, 15, 1, 12, 0, 0, 0, 0);\n        Period result = test.normalizedStandard();\n        assertEquals(new Period(1, 15, 1, 12, 0, 0, 0, 0), test);\n        assertEquals(new Period(2, 3, 2, 5, 0, 0, 0, 0), result);\n    }\n",
        "begin_line": 1432,
        "end_line": 1437,
        "comment": "",
        "child_ranges": [
            "(line 1433,col 9)-(line 1433,col 59)",
            "(line 1434,col 9)-(line 1434,col 50)",
            "(line 1435,col 9)-(line 1435,col 65)",
            "(line 1436,col 9)-(line 1436,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_yearMonthDay()",
        "snippet": "    public void testNormalizedStandard_yearMonthDay() {\n        Period test = new Period(1, 15, 0, 36, 0, 0, 0, 0);\n        Period result = test.normalizedStandard();\n        assertEquals(new Period(1, 15, 0, 36, 0, 0, 0, 0), test);\n        assertEquals(new Period(2, 3, 5, 1, 0, 0, 0, 0), result);\n    }\n",
        "begin_line": 1439,
        "end_line": 1444,
        "comment": "",
        "child_ranges": [
            "(line 1440,col 9)-(line 1440,col 59)",
            "(line 1441,col 9)-(line 1441,col 50)",
            "(line 1442,col 9)-(line 1442,col 65)",
            "(line 1443,col 9)-(line 1443,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_negative()",
        "snippet": "    public void testNormalizedStandard_negative() {\n        Period test = new Period(0, 0, 0, 0, 2, -10, 0, 0);\n        Period result = test.normalizedStandard();\n        assertEquals(new Period(0, 0, 0, 0, 2, -10, 0, 0), test);\n        assertEquals(new Period(0, 0, 0, 0, 1, 50, 0, 0), result);\n    }\n",
        "begin_line": 1446,
        "end_line": 1451,
        "comment": "",
        "child_ranges": [
            "(line 1447,col 9)-(line 1447,col 59)",
            "(line 1448,col 9)-(line 1448,col 50)",
            "(line 1449,col 9)-(line 1449,col 65)",
            "(line 1450,col 9)-(line 1450,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_fullNegative()",
        "snippet": "    public void testNormalizedStandard_fullNegative() {\n        Period test = new Period(0, 0, 0, 0, 1, -70, 0, 0);\n        Period result = test.normalizedStandard();\n        assertEquals(new Period(0, 0, 0, 0, 1, -70, 0, 0), test);\n        assertEquals(new Period(0, 0, 0, 0, 0, -10, 0, 0), result);\n    }\n",
        "begin_line": 1453,
        "end_line": 1458,
        "comment": "",
        "child_ranges": [
            "(line 1454,col 9)-(line 1454,col 59)",
            "(line 1455,col 9)-(line 1455,col 50)",
            "(line 1456,col 9)-(line 1456,col 65)",
            "(line 1457,col 9)-(line 1457,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_yearMonth1()",
        "snippet": "    public void testNormalizedStandard_periodType_yearMonth1() {\n        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard((PeriodType) null);\n        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n        assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result);\n    }\n",
        "begin_line": 1461,
        "end_line": 1466,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1462,col 9)-(line 1462,col 58)",
            "(line 1463,col 9)-(line 1463,col 67)",
            "(line 1464,col 9)-(line 1464,col 64)",
            "(line 1465,col 9)-(line 1465,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_yearMonth2()",
        "snippet": "    public void testNormalizedStandard_periodType_yearMonth2() {\n        Period test = new Period(Integer.MAX_VALUE, 15, 0, 0, 0, 0, 0, 0);\n        try {\n            test.normalizedStandard((PeriodType) null);\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1468,
        "end_line": 1474,
        "comment": "",
        "child_ranges": [
            "(line 1469,col 9)-(line 1469,col 74)",
            "(line 1470,col 9)-(line 1473,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_yearMonth3()",
        "snippet": "    public void testNormalizedStandard_periodType_yearMonth3() {\n        Period test = new Period(1, 15, 3, 4, 0, 0, 0, 0);\n        try {\n            test.normalizedStandard(PeriodType.dayTime());\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }\n",
        "begin_line": 1476,
        "end_line": 1482,
        "comment": "",
        "child_ranges": [
            "(line 1477,col 9)-(line 1477,col 58)",
            "(line 1478,col 9)-(line 1481,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_weekDay1()",
        "snippet": "    public void testNormalizedStandard_periodType_weekDay1() {\n        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);\n        Period result = test.normalizedStandard((PeriodType) null);\n        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);\n        assertEquals(new Period(0, 0, 2, 5, 0, 0, 0, 0), result);\n    }\n",
        "begin_line": 1484,
        "end_line": 1489,
        "comment": "",
        "child_ranges": [
            "(line 1485,col 9)-(line 1485,col 58)",
            "(line 1486,col 9)-(line 1486,col 67)",
            "(line 1487,col 9)-(line 1487,col 64)",
            "(line 1488,col 9)-(line 1488,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_weekDay2()",
        "snippet": "    public void testNormalizedStandard_periodType_weekDay2() {\n        Period test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);\n        try {\n            test.normalizedStandard((PeriodType) null);\n            fail();\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1491,
        "end_line": 1497,
        "comment": "",
        "child_ranges": [
            "(line 1492,col 9)-(line 1492,col 73)",
            "(line 1493,col 9)-(line 1496,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_weekDay3()",
        "snippet": "    public void testNormalizedStandard_periodType_weekDay3() {\n        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.dayTime());\n        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);\n        assertEquals(new Period(0, 0, 0, 19, 0, 0, 0, 0, PeriodType.dayTime()), result);\n    }\n",
        "begin_line": 1499,
        "end_line": 1504,
        "comment": "",
        "child_ranges": [
            "(line 1500,col 9)-(line 1500,col 58)",
            "(line 1501,col 9)-(line 1501,col 70)",
            "(line 1502,col 9)-(line 1502,col 64)",
            "(line 1503,col 9)-(line 1503,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_yearMonthWeekDay()",
        "snippet": "    public void testNormalizedStandard_periodType_yearMonthWeekDay() {\n        Period test = new Period(1, 15, 1, 12, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.yearMonthDayTime());\n        assertEquals(new Period(1, 15, 1, 12, 0, 0, 0, 0), test);\n        assertEquals(new Period(2, 3, 0, 19, 0, 0, 0, 0, PeriodType.yearMonthDayTime()), result);\n    }\n",
        "begin_line": 1506,
        "end_line": 1511,
        "comment": "",
        "child_ranges": [
            "(line 1507,col 9)-(line 1507,col 59)",
            "(line 1508,col 9)-(line 1508,col 79)",
            "(line 1509,col 9)-(line 1509,col 65)",
            "(line 1510,col 9)-(line 1510,col 97)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_yearMonthDay()",
        "snippet": "    public void testNormalizedStandard_periodType_yearMonthDay() {\n        Period test = new Period(1, 15, 0, 36, 27, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.yearMonthDayTime());\n        assertEquals(new Period(1, 15, 0, 36, 27, 0, 0, 0), test);\n        assertEquals(new Period(2, 3, 0, 37, 3, 0, 0, 0, PeriodType.yearMonthDayTime()), result);\n    }\n",
        "begin_line": 1513,
        "end_line": 1518,
        "comment": "",
        "child_ranges": [
            "(line 1514,col 9)-(line 1514,col 60)",
            "(line 1515,col 9)-(line 1515,col 79)",
            "(line 1516,col 9)-(line 1516,col 66)",
            "(line 1517,col 9)-(line 1517,col 97)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months1()",
        "snippet": "    public void testNormalizedStandard_periodType_months1() {\n        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.months());\n        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n        assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n    }\n",
        "begin_line": 1520,
        "end_line": 1525,
        "comment": "",
        "child_ranges": [
            "(line 1521,col 9)-(line 1521,col 58)",
            "(line 1522,col 9)-(line 1522,col 69)",
            "(line 1523,col 9)-(line 1523,col 64)",
            "(line 1524,col 9)-(line 1524,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months2()",
        "snippet": "    public void testNormalizedStandard_periodType_months2() {\n        Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.months());\n        assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);\n        assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n    }\n",
        "begin_line": 1527,
        "end_line": 1532,
        "comment": "",
        "child_ranges": [
            "(line 1528,col 9)-(line 1528,col 59)",
            "(line 1529,col 9)-(line 1529,col 69)",
            "(line 1530,col 9)-(line 1530,col 65)",
            "(line 1531,col 9)-(line 1531,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months3()",
        "snippet": "    public void testNormalizedStandard_periodType_months3() {\n        Period test = new Period(0, 4, 0, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.months());\n        assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0), test);\n        assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n    }\n",
        "begin_line": 1534,
        "end_line": 1539,
        "comment": "",
        "child_ranges": [
            "(line 1535,col 9)-(line 1535,col 57)",
            "(line 1536,col 9)-(line 1536,col 69)",
            "(line 1537,col 9)-(line 1537,col 63)",
            "(line 1538,col 9)-(line 1538,col 86)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_years()",
        "snippet": "    public void testNormalizedStandard_periodType_years() {\n        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n        try {\n            test.normalizedStandard(PeriodType.years());\n            fail();\n        } catch (UnsupportedOperationException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 1541,
        "end_line": 1549,
        "comment": "",
        "child_ranges": [
            "(line 1542,col 9)-(line 1542,col 58)",
            "(line 1543,col 9)-(line 1548,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPeriod_Basics",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "signature": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks()",
        "snippet": "    public void testNormalizedStandard_periodType_monthsWeeks() {\n        PeriodType type = PeriodType.forFields(new DurationFieldType[]{\n                        DurationFieldType.months(),\n                        DurationFieldType.weeks(),\n                        DurationFieldType.days()});\n        Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(type);\n        assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);\n        assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);\n    }\n",
        "begin_line": 1551,
        "end_line": 1560,
        "comment": "",
        "child_ranges": [
            "(line 1552,col 9)-(line 1555,col 51)",
            "(line 1556,col 9)-(line 1556,col 57)",
            "(line 1557,col 9)-(line 1557,col 54)",
            "(line 1558,col 9)-(line 1558,col 63)",
            "(line 1559,col 9)-(line 1559,col 72)"
        ]
    }
]