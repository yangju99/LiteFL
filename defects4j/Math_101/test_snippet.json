[
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatTest.getDecimalCharacter()",
        "snippet": "    protected char getDecimalCharacter() {\n        return '.';\n    }\n",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatTest.getLocale()",
        "snippet": "    protected Locale getLocale() {\n        return Locale.US;\n    }\n",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.FrenchComplexFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java",
        "signature": "org.apache.commons.math.complex.FrenchComplexFormatTest.getDecimalCharacter()",
        "snippet": "    protected char getDecimalCharacter() {\n        return ',';\n    }\n",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.FrenchComplexFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java",
        "signature": "org.apache.commons.math.complex.FrenchComplexFormatTest.getLocale()",
        "snippet": "    protected Locale getLocale() {\n        return Locale.FRENCH;\n    }\n",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.getLocale()",
        "snippet": "    protected abstract Locale getLocale();\n",
        "begin_line": 32,
        "end_line": 32,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()",
        "snippet": "    protected abstract char getDecimalCharacter();\n",
        "begin_line": 34,
        "end_line": 34,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        complexFormat = ComplexFormat.getInstance(getLocale());\n        complexFormatJ = ComplexFormat.getInstance(getLocale());\n        complexFormatJ.setImaginaryCharacter(\"j\");\n    }\n",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 63)",
            "(line 38,col 9)-(line 38,col 64)",
            "(line 39,col 9)-(line 39,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleNoDecimals()",
        "snippet": "    public void testSimpleNoDecimals() {\n        Complex c = new Complex(1, 1);\n        String expected = \"1 + 1i\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 38)",
            "(line 44,col 9)-(line 44,col 35)",
            "(line 45,col 9)-(line 45,col 48)",
            "(line 46,col 9)-(line 46,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimals()",
        "snippet": "    public void testSimpleWithDecimals() {\n        Complex c = new Complex(1.23, 1.43);\n        String expected = \"1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 44)",
            "(line 51,col 9)-(line 51,col 97)",
            "(line 52,col 9)-(line 52,col 48)",
            "(line 53,col 9)-(line 53,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimalsTrunc()",
        "snippet": "    public void testSimpleWithDecimalsTrunc() {\n        Complex c = new Complex(1.2323, 1.4343);\n        String expected = \"1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 56,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 48)",
            "(line 58,col 9)-(line 58,col 97)",
            "(line 59,col 9)-(line 59,col 48)",
            "(line 60,col 9)-(line 60,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeReal()",
        "snippet": "    public void testNegativeReal() {\n        Complex c = new Complex(-1.2323, 1.4343);\n        String expected = \"-1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 63,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 49)",
            "(line 65,col 9)-(line 65,col 98)",
            "(line 66,col 9)-(line 66,col 48)",
            "(line 67,col 9)-(line 67,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeImaginary()",
        "snippet": "    public void testNegativeImaginary() {\n        Complex c = new Complex(1.2323, -1.4343);\n        String expected = \"1\" + getDecimalCharacter() + \"23 - 1\" + getDecimalCharacter() + \"43i\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 70,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 49)",
            "(line 72,col 9)-(line 72,col 97)",
            "(line 73,col 9)-(line 73,col 48)",
            "(line 74,col 9)-(line 74,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeBoth()",
        "snippet": "    public void testNegativeBoth() {\n        Complex c = new Complex(-1.2323, -1.4343);\n        String expected = \"-1\" + getDecimalCharacter() + \"23 - 1\" + getDecimalCharacter() + \"43i\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 77,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 50)",
            "(line 79,col 9)-(line 79,col 98)",
            "(line 80,col 9)-(line 80,col 48)",
            "(line 81,col 9)-(line 81,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroReal()",
        "snippet": "    public void testZeroReal() {\n        Complex c = new Complex(0.0, -1.4343);\n        String expected = \"0 - 1\" + getDecimalCharacter() + \"43i\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 84,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 46)",
            "(line 86,col 9)-(line 86,col 66)",
            "(line 87,col 9)-(line 87,col 48)",
            "(line 88,col 9)-(line 88,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroImaginary()",
        "snippet": "    public void testZeroImaginary() {\n        Complex c = new Complex(30.233, 0);\n        String expected = \"30\" + getDecimalCharacter() + \"23\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 43)",
            "(line 93,col 9)-(line 93,col 62)",
            "(line 94,col 9)-(line 94,col 48)",
            "(line 95,col 9)-(line 95,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testDifferentImaginaryChar()",
        "snippet": "    public void testDifferentImaginaryChar() {\n        Complex c = new Complex(1, 1);\n        String expected = \"1 + 1j\";\n        String actual = complexFormatJ.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 98,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 38)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testStaticFormatComplex()",
        "snippet": "    public void testStaticFormatComplex() {\n        Locale defaultLocal = Locale.getDefault();\n        Locale.setDefault(getLocale());\n        \n        Complex c = new Complex(232.222, -342.33);\n        String expected = \"232\" + getDecimalCharacter() + \"22 - 342\" + getDecimalCharacter() + \"33i\";\n        String actual = ComplexFormat.formatComplex(c); \n        assertEquals(expected, actual);\n        \n        Locale.setDefault(defaultLocal);\n    }\n",
        "begin_line": 105,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 50)",
            "(line 107,col 9)-(line 107,col 39)",
            "(line 109,col 9)-(line 109,col 50)",
            "(line 110,col 9)-(line 110,col 101)",
            "(line 111,col 9)-(line 111,col 55)",
            "(line 112,col 9)-(line 112,col 39)",
            "(line 114,col 9)-(line 114,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNan()",
        "snippet": "    public void testNan() {\n        Complex c = new Complex(Double.NaN, Double.NaN);\n        String expected = \"(NaN) + (NaN)i\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 117,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 56)",
            "(line 119,col 9)-(line 119,col 43)",
            "(line 120,col 9)-(line 120,col 48)",
            "(line 121,col 9)-(line 121,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPositiveInfinity()",
        "snippet": "    public void testPositiveInfinity() {\n        Complex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n        String expected = \"(Infinity) + (Infinity)i\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 84)",
            "(line 126,col 9)-(line 126,col 53)",
            "(line 127,col 9)-(line 127,col 48)",
            "(line 128,col 9)-(line 128,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeInfinity()",
        "snippet": "    public void testNegativeInfinity() {\n        Complex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n        String expected = \"(-Infinity) - (Infinity)i\";\n        String actual = complexFormat.format(c); \n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 131,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 84)",
            "(line 133,col 9)-(line 133,col 54)",
            "(line 134,col 9)-(line 134,col 48)",
            "(line 135,col 9)-(line 135,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleNoDecimals()",
        "snippet": "    public void testParseSimpleNoDecimals() {\n        String source = \"1 + 1i\";\n        Complex expected = new Complex(1, 1);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 138,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 33)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 146,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimals()",
        "snippet": "    public void testParseSimpleWithDecimals() {\n        String source = \"1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n        Complex expected = new Complex(1.23, 1.43);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 149,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 95)",
            "(line 151,col 9)-(line 151,col 51)",
            "(line 152,col 9)-(line 157,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimalsTrunc()",
        "snippet": "    public void testParseSimpleWithDecimalsTrunc() {\n        String source = \"1\" + getDecimalCharacter() + \"2323 + 1\" + getDecimalCharacter() + \"4343i\";\n        Complex expected = new Complex(1.2323, 1.4343);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 160,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 99)",
            "(line 162,col 9)-(line 162,col 55)",
            "(line 163,col 9)-(line 168,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeReal()",
        "snippet": "    public void testParseNegativeReal() {\n        String source = \"-1\" + getDecimalCharacter() + \"2323 + 1\" + getDecimalCharacter() + \"4343i\";\n        Complex expected = new Complex(-1.2323, 1.4343);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 171,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 100)",
            "(line 173,col 9)-(line 173,col 56)",
            "(line 174,col 9)-(line 179,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeImaginary()",
        "snippet": "    public void testParseNegativeImaginary() {\n        String source = \"1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343i\";\n        Complex expected = new Complex(1.2323, -1.4343);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 182,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 99)",
            "(line 184,col 9)-(line 184,col 56)",
            "(line 185,col 9)-(line 190,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeBoth()",
        "snippet": "    public void testParseNegativeBoth() {\n        String source = \"-1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343i\";\n        Complex expected = new Complex(-1.2323, -1.4343);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 193,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 100)",
            "(line 195,col 9)-(line 195,col 57)",
            "(line 196,col 9)-(line 201,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroReal()",
        "snippet": "    public void testParseZeroReal() {\n        String source = \"0\" + getDecimalCharacter() + \"0 - 1\" + getDecimalCharacter() + \"4343i\";\n        Complex expected = new Complex(0.0, -1.4343);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 204,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 96)",
            "(line 206,col 9)-(line 206,col 53)",
            "(line 207,col 9)-(line 212,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroImaginary()",
        "snippet": "    public void testParseZeroImaginary() {\n        String source = \"-1\" + getDecimalCharacter() + \"2323\";\n        Complex expected = new Complex(-1.2323, 0);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 215,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 62)",
            "(line 217,col 9)-(line 217,col 51)",
            "(line 218,col 9)-(line 223,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseDifferentImaginaryChar()",
        "snippet": "    public void testParseDifferentImaginaryChar() {\n        String source = \"-1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343j\";\n        Complex expected = new Complex(-1.2323, -1.4343);\n        try {\n            Complex actual = (Complex)complexFormatJ.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 226,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 100)",
            "(line 228,col 9)-(line 228,col 57)",
            "(line 229,col 9)-(line 234,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNan()",
        "snippet": "    public void testParseNan() {\n        String source = \"(NaN) + (NaN)i\";\n        Complex expected = new Complex(Double.NaN, Double.NaN);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 237,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 41)",
            "(line 239,col 9)-(line 239,col 63)",
            "(line 240,col 9)-(line 245,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParsePositiveInfinity()",
        "snippet": "    public void testParsePositiveInfinity() {\n        String source = \"(Infinity) + (Infinity)i\";\n        Complex expected = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 248,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 51)",
            "(line 250,col 9)-(line 250,col 91)",
            "(line 251,col 9)-(line 256,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPaseNegativeInfinity()",
        "snippet": "    public void testPaseNegativeInfinity() {\n        String source = \"(-Infinity) - (Infinity)i\";\n        Complex expected = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n        try {\n            Complex actual = (Complex)complexFormat.parseObject(source); \n            assertEquals(expected, actual);\n        } catch (ParseException ex) {\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 259,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 52)",
            "(line 261,col 9)-(line 261,col 91)",
            "(line 262,col 9)-(line 267,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testConstructorSingleFormat()",
        "snippet": "    public void testConstructorSingleFormat() {\n        NumberFormat nf = NumberFormat.getInstance();\n        ComplexFormat cf = new ComplexFormat(nf);\n        assertNotNull(cf);\n        assertEquals(nf, cf.getRealFormat());\n    }\n",
        "begin_line": 270,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 53)",
            "(line 272,col 9)-(line 272,col 49)",
            "(line 273,col 9)-(line 273,col 26)",
            "(line 274,col 9)-(line 274,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetImaginaryFormat()",
        "snippet": "    public void testGetImaginaryFormat() {\n        NumberFormat nf = NumberFormat.getInstance();\n        ComplexFormat cf = new ComplexFormat();\n        \n        assertNotSame(nf, cf.getImaginaryFormat());\n        cf.setImaginaryFormat(nf);\n        assertSame(nf, cf.getImaginaryFormat());\n    }\n",
        "begin_line": 277,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 278,col 9)-(line 278,col 53)",
            "(line 279,col 9)-(line 279,col 47)",
            "(line 281,col 9)-(line 281,col 51)",
            "(line 282,col 9)-(line 282,col 34)",
            "(line 283,col 9)-(line 283,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryFormatNull()",
        "snippet": "    public void testSetImaginaryFormatNull() {\n        try {\n            ComplexFormat cf = new ComplexFormat();\n            cf.setImaginaryFormat(null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 286,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 293,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetRealFormatNull()",
        "snippet": "    public void testSetRealFormatNull() {\n        try {\n            ComplexFormat cf = new ComplexFormat();\n            cf.setRealFormat(null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 296,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 303,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetRealFormat()",
        "snippet": "    public void testGetRealFormat() {\n        NumberFormat nf = NumberFormat.getInstance();\n        ComplexFormat cf = new ComplexFormat();\n        \n        assertNotSame(nf, cf.getRealFormat());\n        cf.setRealFormat(nf);\n        assertSame(nf, cf.getRealFormat());\n    }\n",
        "begin_line": 306,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 53)",
            "(line 308,col 9)-(line 308,col 47)",
            "(line 310,col 9)-(line 310,col 46)",
            "(line 311,col 9)-(line 311,col 29)",
            "(line 312,col 9)-(line 312,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryCharacterNull()",
        "snippet": "    public void testSetImaginaryCharacterNull() {\n        try {\n            ComplexFormat cf = new ComplexFormat();\n            cf.setImaginaryCharacter(null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 315,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 322,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryCharacterEmpty()",
        "snippet": "    public void testSetImaginaryCharacterEmpty() {\n        try {\n            ComplexFormat cf = new ComplexFormat();\n            cf.setImaginaryCharacter(\"\");\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 325,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 326,col 9)-(line 332,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatNumber()",
        "snippet": "    public void testFormatNumber() {\n        ComplexFormat cf = ComplexFormat.getInstance(getLocale());\n        Double pi = new Double(Math.PI);\n        String text = cf.format(pi);\n        assertEquals(\"3\" + getDecimalCharacter() + \"14\", text);\n    }\n",
        "begin_line": 335,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 66)",
            "(line 337,col 9)-(line 337,col 40)",
            "(line 338,col 9)-(line 338,col 36)",
            "(line 339,col 9)-(line 339,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatObject()",
        "snippet": "    public void testFormatObject() {\n        try {\n            ComplexFormat cf = new ComplexFormat();\n            Object object = new Object();\n            cf.format(object);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 342,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 350,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormatAbstractTest",
        "child_classes": [
            "org.apache.commons.math.complex.FrenchComplexFormatTest",
            "org.apache.commons.math.complex.ComplexFormatTest"
        ],
        "src_path": "src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java",
        "signature": "org.apache.commons.math.complex.ComplexFormatAbstractTest.testForgottenImaginaryCharacter()",
        "snippet": "    public void testForgottenImaginaryCharacter() {\n        ParsePosition pos = new ParsePosition(0);\n        assertNull(new ComplexFormat().parse(\"1 + 1\", pos));\n        assertEquals(5, pos.getErrorIndex());\n    }\n",
        "begin_line": 353,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 49)",
            "(line 355,col 9)-(line 355,col 60)",
            "(line 356,col 9)-(line 356,col 45)"
        ]
    }
]