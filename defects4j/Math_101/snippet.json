[
    {
        "name": "ComplexFormat.parse#320",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.parse(java.lang.String, java.text.ParsePosition)",
        "snippet": "    public Complex parse(String source, ParsePosition pos) {\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse real\n        Number re = parseNumber(source, getRealFormat(), pos);\n        if (re == null) {\n            // invalid real number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse sign\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        int sign = 0;\n        switch (c) {\n        case 0 :\n            // no sign\n            // return real only complex number\n            return new Complex(re.doubleValue(), 0.0);\n        case '-' :\n            sign = -1;\n            break;\n        case '+' :\n            sign = 1;\n            break;\n        default :\n            // invalid sign\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse imaginary\n        Number im = parseNumber(source, getRealFormat(), pos);\n        if (im == null) {\n            // invalid imaginary number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse imaginary character\n        int n = getImaginaryCharacter().length();\n        startIndex = pos.getIndex();\n        int endIndex = startIndex + n;\n        if (\n            source.substring(startIndex, endIndex).compareTo(\n            getImaginaryCharacter()) != 0) {\n            // set index back to initial, error index should be the start index\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n        pos.setIndex(endIndex);\n\n        return new Complex(re.doubleValue(), im.doubleValue() * sign);\n    }\n",
        "begin_line": 320,
        "end_line": 389,
        "comment": "\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Complex} object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.ComplexFormat#57",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()",
        "snippet": "    public ComplexFormat() {\n        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * Create an instance with the default imaginary character, 'i', and the\n     * default number format for both real and imaginary parts.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.getDefaultNumberFormat#236",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.getDefaultNumberFormat()",
        "snippet": "    private static NumberFormat getDefaultNumberFormat() {\n        return getDefaultNumberFormat(Locale.getDefault());\n    }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance()} with the only customizing is the\n     * maximum number of fraction digits, which is set to 2.  \n     * @return the default number format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.parseAndIgnoreWhitespace#398",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.parseAndIgnoreWhitespace(java.lang.String, java.text.ParsePosition)",
        "snippet": "    private void parseAndIgnoreWhitespace(String source, ParsePosition pos) {\n        parseNextCharacter(source, pos);\n        pos.setIndex(pos.getIndex() - 1);\n    }\n",
        "begin_line": 398,
        "end_line": 401,
        "comment": "\n     * Parses <code>source</code> until a non-whitespace character is found.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.  On output, <code>pos</code>\n     *        holds the index of the next non-whitespace character.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.parseNextCharacter#410",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.parseNextCharacter(java.lang.String, java.text.ParsePosition)",
        "snippet": "    private char parseNextCharacter(String source, ParsePosition pos) {\n         int index = pos.getIndex();\n         int n = source.length();\n         char ret = 0;\n\n         if (index < n) {\n             char c;\n             do {\n                 c = source.charAt(index++);\n             } while (Character.isWhitespace(c) && index < n);\n             pos.setIndex(index);\n         \n             if (index < n) {\n                 ret = c;\n             }\n         }\n         \n         return ret;\n    }\n",
        "begin_line": 410,
        "end_line": 428,
        "comment": "\n     * Parses <code>source</code> until a non-whitespace character is found.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the first non-whitespace character.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.parseNumber#470",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.parseNumber(java.lang.String, java.text.NumberFormat, java.text.ParsePosition)",
        "snippet": "    private Number parseNumber(String source, NumberFormat format, ParsePosition pos) {\n        int startIndex = pos.getIndex();\n        Number number = format.parse(source, pos);\n        int endIndex = pos.getIndex();\n        \n        // check for error parsing number\n        if (startIndex == endIndex) {\n            // try parsing special numbers\n            double[] special = {Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY};\n            for (int i = 0; i < special.length; ++i) {\n                number = parseNumber(source, special[i], pos);\n                if (number != null) {\n                    break;\n                }\n            }\n        }\n        \n        return number;\n    }\n",
        "begin_line": 470,
        "end_line": 488,
        "comment": "\n     * Parses <code>source</code> for a number.  This method can parse normal,\n     * numeric values as well as special values.  These special values include\n     * Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY.\n     *\n     * @param source the string to parse\n     * @param format the number format used to parse normal, numeric values.\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed number.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.getImaginaryCharacter#257",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.getImaginaryCharacter()",
        "snippet": "    public String getImaginaryCharacter() {\n        return imaginaryCharacter;\n    }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "\n     * Access the imaginaryCharacter.\n     * @return the imaginaryCharacter.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.getRealFormat#291",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.getRealFormat()",
        "snippet": "    public NumberFormat getRealFormat() {\n        return realFormat;\n    }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n     * Access the realFormat.\n     * @return the realFormat.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1857
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.ComplexFormat#66",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(java.text.NumberFormat)",
        "snippet": "    public ComplexFormat(NumberFormat format) {\n        this(DEFAULT_IMAGINARY_CHARACTER, format);\n    }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Create an instance with a custom number format for both real and\n     * imaginary parts.\n     * @param format the custom format for both real and imaginary parts.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.ComplexFormat#96",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(java.lang.String, java.text.NumberFormat)",
        "snippet": "    public ComplexFormat(String imaginaryCharacter, NumberFormat format) {\n        this(imaginaryCharacter, format, (NumberFormat)format.clone());\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\n     * Create an instance with a custom imaginary character, and a custom number\n     * format for both real and imaginary parts.\n     * @param imaginaryCharacter The custom imaginary character.\n     * @param format the custom format for both real and imaginary parts.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.ComplexFormat#108",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    public ComplexFormat(String imaginaryCharacter, NumberFormat realFormat,\n            NumberFormat imaginaryFormat) {\n        super();\n        setImaginaryCharacter(imaginaryCharacter);\n        setImaginaryFormat(imaginaryFormat);\n        setRealFormat(realFormat);\n    }\n",
        "begin_line": 108,
        "end_line": 114,
        "comment": "\n     * Create an instance with a custom imaginary character, a custom number\n     * format for the real part, and a custom number format for the imaginary\n     * part.\n     * @param imaginaryCharacter The custom imaginary character.\n     * @param realFormat the custom format for the real part.\n     * @param imaginaryFormat the custom format for the imaginary part.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.getDefaultNumberFormat#247",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.getDefaultNumberFormat(java.util.Locale)",
        "snippet": "    private static NumberFormat getDefaultNumberFormat(Locale locale) {\n        NumberFormat nf = NumberFormat.getInstance(locale);\n        nf.setMaximumFractionDigits(2);\n        return nf;\n    }\n",
        "begin_line": 247,
        "end_line": 251,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance(java.util.Locale)} with the only\n     * customizing is the maximum number of fraction digits, which is set to 2.  \n     * @param locale the specific locale used by the format.\n     * @return the default number format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.getInstance#282",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.getInstance(java.util.Locale)",
        "snippet": "    public static ComplexFormat getInstance(Locale locale) {\n        NumberFormat f = getDefaultNumberFormat(locale);\n        return new ComplexFormat(f);\n    }\n",
        "begin_line": 282,
        "end_line": 285,
        "comment": "\n     * Returns the default complex format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @return the complex format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.setImaginaryCharacter#507",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.setImaginaryCharacter(java.lang.String)",
        "snippet": "    public void setImaginaryCharacter(String imaginaryCharacter) {\n        if (imaginaryCharacter == null || imaginaryCharacter.length() == 0) {\n            throw new IllegalArgumentException(\n                \"imaginaryCharacter must be a non-empty string.\");\n        }\n        this.imaginaryCharacter = imaginaryCharacter;\n    }\n",
        "begin_line": 507,
        "end_line": 513,
        "comment": "\n     * Modify the imaginaryCharacter.\n     * @param imaginaryCharacter The new imaginaryCharacter value.\n     * @throws IllegalArgumentException if <code>imaginaryCharacter</code> is\n     *         <code>null</code> or an empty string.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.setImaginaryFormat#521",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.setImaginaryFormat(java.text.NumberFormat)",
        "snippet": "    public void setImaginaryFormat(NumberFormat imaginaryFormat) {\n        if (imaginaryFormat == null) {\n            throw new IllegalArgumentException(\n                \"imaginaryFormat can not be null.\");\n        }\n        this.imaginaryFormat = imaginaryFormat;\n    }\n",
        "begin_line": 521,
        "end_line": 527,
        "comment": "\n     * Modify the imaginaryFormat.\n     * @param imaginaryFormat The new imaginaryFormat value.\n     * @throws IllegalArgumentException if <code>imaginaryFormat</code> is\n     *         <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComplexFormat.setRealFormat#535",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "signature": "org.apache.commons.math.complex.ComplexFormat.setRealFormat(java.text.NumberFormat)",
        "snippet": "    public void setRealFormat(NumberFormat realFormat) {\n        if (realFormat == null) {\n            throw new IllegalArgumentException(\n                \"realFormat can not be null.\");\n        }\n        this.realFormat = realFormat;\n    }\n",
        "begin_line": 535,
        "end_line": 541,
        "comment": "\n     * Modify the realFormat.\n     * @param realFormat The new realFormat value.\n     * @throws IllegalArgumentException if <code>realFormat</code> is\n     *         <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    }
]