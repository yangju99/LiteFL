[
    {
        "name": "XYSeries.addOrUpdate#526",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.addOrUpdate(double, double)",
        "snippet": "    public XYDataItem addOrUpdate(double x, double y) {\n        return addOrUpdate(new Double(x), new Double(y));\n    }\n",
        "begin_line": 526,
        "end_line": 528,
        "comment": "\r\n     * Adds or updates an item in the series and sends a\r\n     * {@link SeriesChangeEvent} to all registered listeners.\r\n     *\r\n     * @param x  the x-value.\r\n     * @param y  the y-value.\r\n     *\r\n     * @return The item that was overwritten, if any.\r\n     *\r\n     * @since 1.0.10\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYSeries.addOrUpdate#540",
        "is_bug": true,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.addOrUpdate(java.lang.Number, java.lang.Number)",
        "snippet": "    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        // if we get to here, we know that duplicate X values are not permitted\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            // if the series is sorted, the negative index is a result from\n            // Collections.binarySearch() and tells us where to insert the\n            // new item...otherwise it will be just -1 and we should just\n            // append the value to the list...\n            if (this.autoSort) {\n                this.data.add(-index - 1, new XYDataItem(x, y));\n            }\n            else {\n                this.data.add(new XYDataItem(x, y));\n            }\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }\n",
        "begin_line": 540,
        "end_line": 576,
        "comment": "\r\n     * Adds or updates an item in the series and sends a\r\n     * {@link SeriesChangeEvent} to all registered listeners.\r\n     *\r\n     * @param x  the x-value (<code>null</code> not permitted).\r\n     * @param y  the y-value (<code>null</code> permitted).\r\n     *\r\n     * @return A copy of the overwritten data item, or <code>null</code> if no\r\n     *         item was overwritten.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYSeries.indexOf#588",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.indexOf(java.lang.Number)",
        "snippet": "    public int indexOf(Number x) {\n        if (this.autoSort) {\n            return Collections.binarySearch(this.data, new XYDataItem(x, null));\n        }\n        else {\n            for (int i = 0; i < this.data.size(); i++) {\n                XYDataItem item = (XYDataItem) this.data.get(i);\n                if (item.getX().equals(x)) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n    }\n",
        "begin_line": 588,
        "end_line": 601,
        "comment": "\r\n     * Returns the index of the item with the specified x-value, or a negative\r\n     * index if the series does not contain an item with that x-value.  Be\r\n     * aware that for an unsorted series, the index is found by iterating\r\n     * through all items in the series.\r\n     *\r\n     * @param x  the x-value (<code>null</code> not permitted).\r\n     *\r\n     * @return The index.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYDataItem.compareTo#173",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "class_name": "org.jfree.data.xy.XYDataItem",
        "signature": "org.jfree.data.xy.XYDataItem.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object o1) {\n\n        int result;\n\n        // CASE 1 : Comparing to another TimeSeriesDataPair object\n        // -------------------------------------------------------\n        if (o1 instanceof XYDataItem) {\n            XYDataItem dataItem = (XYDataItem) o1;\n            double compare = this.x.doubleValue()\n                             - dataItem.getX().doubleValue();\n            if (compare > 0.0) {\n                result = 1;\n            }\n            else {\n                if (compare < 0.0) {\n                    result = -1;\n                }\n                else {\n                    result = 0;\n                }\n            }\n        }\n\n        // CASE 2 : Comparing to a general object\n        // ---------------------------------------------\n        else {\n            // consider time periods to be ordered after general objects\n            result = 1;\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 173,
        "end_line": 205,
        "comment": "\r\n     * Returns an integer indicating the order of this object relative to\r\n     * another object.\r\n     * <P>\r\n     * For the order we consider only the x-value:\r\n     * negative == \"less-than\", zero == \"equal\", positive == \"greater-than\".\r\n     *\r\n     * @param o1  the object being compared to.\r\n     *\r\n     * @return An integer indicating the order of this data pair object\r\n     *      relative to another object.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYDataItem.getX#95",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "class_name": "org.jfree.data.xy.XYDataItem",
        "signature": "org.jfree.data.xy.XYDataItem.getX()",
        "snippet": "    public Number getX() {\n        return this.x;\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\r\n     * Returns the x-value.\r\n     *\r\n     * @return The x-value (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0985
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYDataItem.XYDataItem#72",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYDataItem.java",
        "class_name": "org.jfree.data.xy.XYDataItem",
        "signature": "org.jfree.data.xy.XYDataItem.XYDataItem(java.lang.Number, java.lang.Number)",
        "snippet": "    public XYDataItem(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n        this.x = x;\n        this.y = y;\n    }\n",
        "begin_line": 72,
        "end_line": 78,
        "comment": "\r\n     * Constructs a new data item.\r\n     *\r\n     * @param x  the x-value (<code>null</code> NOT permitted).\r\n     * @param y  the y-value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYSeries.getItemCount#185",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.data.size();\n    }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "\r\n     * Returns the number of items in the series.\r\n     *\r\n     * @return The item count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0928
        },
        "num_failing_tests": 1
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#60",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.general.SeriesChangeEvent",
        "signature": "org.jfree.data.general.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object)",
        "snippet": "    public SeriesChangeEvent(Object source) {\n        super(source);\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\r\n     * Constructs a new event.\r\n     *\r\n     * @param source  the source of the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0917
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.fireSeriesChanged#312",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.fireSeriesChanged()",
        "snippet": "    public void fireSeriesChanged() {\n        if (this.notify) {\n            notifyListeners(new SeriesChangeEvent(this));\n        }\n    }\n",
        "begin_line": 312,
        "end_line": 316,
        "comment": "\r\n     * General method for signalling to registered listeners that the series\r\n     * has been changed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0917
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.notifyListeners#324",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.notifyListeners(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    protected void notifyListeners(SeriesChangeEvent event) {\n\n        Object[] listenerList = this.listeners.getListenerList();\n        for (int i = listenerList.length - 2; i >= 0; i -= 2) {\n            if (listenerList[i] == SeriesChangeListener.class) {\n                ((SeriesChangeListener) listenerList[i + 1]).seriesChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 324,
        "end_line": 334,
        "comment": "\r\n     * Sends a change event to all registered listeners.\r\n     *\r\n     * @param event  contains information about the event that triggered the\r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0917
        },
        "num_failing_tests": 1
    },
    {
        "name": "XYSeries.XYSeries#150",
        "is_bug": false,
        "src_path": "source/org/jfree/data/xy/XYSeries.java",
        "class_name": "org.jfree.data.xy.XYSeries",
        "signature": "org.jfree.data.xy.XYSeries.XYSeries(java.lang.Comparable, boolean, boolean)",
        "snippet": "    public XYSeries(Comparable key,\n                    boolean autoSort,\n                    boolean allowDuplicateXValues) {\n        super(key);\n        this.data = new java.util.ArrayList();\n        this.autoSort = autoSort;\n        this.allowDuplicateXValues = allowDuplicateXValues;\n    }\n",
        "begin_line": 150,
        "end_line": 157,
        "comment": "\r\n     * Constructs a new xy-series that contains no data.  You can specify\r\n     * whether or not duplicate x-values are allowed for the series.\r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     * @param autoSort  a flag that controls whether or not the items in the\r\n     *                  series are sorted.\r\n     * @param allowDuplicateXValues  a flag that controls whether duplicate\r\n     *                               x-values are allowed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0902
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#101",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable)",
        "snippet": "    protected Series(Comparable key) {\n        this(key, null);\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\r\n     * Creates a new series with the specified key.\r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#111",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable, java.lang.String)",
        "snippet": "    protected Series(Comparable key, String description) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        this.key = key;\n        this.description = description;\n        this.listeners = new EventListenerList();\n        this.propertyChangeSupport = new PropertyChangeSupport(this);\n        this.notify = true;\n    }\n",
        "begin_line": 111,
        "end_line": 120,
        "comment": "\r\n     * Creates a new series with the specified key and description.\r\n     *\r\n     * @param key  the series key (<code>null</code> NOT permitted).\r\n     * @param description  the series description (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    }
]