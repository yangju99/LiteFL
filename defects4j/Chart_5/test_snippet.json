[
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(XYSeriesTests.class);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.XYSeriesTests(java.lang.String)",
        "snippet": "    public XYSeriesTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testEquals()",
        "snippet": "    public void testEquals() {\n\n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = new XYSeries(\"Series\");\n        s2.add(1.0, 1.1);\n        assertTrue(s1.equals(s2));\n        assertTrue(s2.equals(s1));\n\n        s1.setKey(\"Series X\");\n        assertFalse(s1.equals(s2));\n\n        s2.setKey(\"Series X\");\n        assertTrue(s1.equals(s2));\n\n    }\n",
        "begin_line": 90,
        "end_line": 105,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 45)",
            "(line 93,col 9)-(line 93,col 25)",
            "(line 94,col 9)-(line 94,col 45)",
            "(line 95,col 9)-(line 95,col 25)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 99,col 30)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 102,col 9)-(line 102,col 30)",
            "(line 103,col 9)-(line 103,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testHashCode()",
        "snippet": "    public void testHashCode() {\n        XYSeries s1 = new XYSeries(\"Test\");\n        XYSeries s2 = new XYSeries(\"Test\");\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(1.0, 500.0);\n        s2.add(1.0, 500.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(2.0, null);\n        s2.add(2.0, null);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(5.0, 111.0);\n        s2.add(5.0, 111.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n\n        s1.add(9.0, 1.0);\n        s2.add(9.0, 1.0);\n        assertEquals(s1, s2);\n        assertEquals(s1.hashCode(), s2.hashCode());\n    }\n",
        "begin_line": 110,
        "end_line": 135,
        "comment": "\n     * Some simple checks for the hashCode() method.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 43)",
            "(line 112,col 9)-(line 112,col 43)",
            "(line 113,col 9)-(line 113,col 29)",
            "(line 114,col 9)-(line 114,col 51)",
            "(line 116,col 9)-(line 116,col 27)",
            "(line 117,col 9)-(line 117,col 27)",
            "(line 118,col 9)-(line 118,col 29)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 121,col 9)-(line 121,col 26)",
            "(line 122,col 9)-(line 122,col 26)",
            "(line 123,col 9)-(line 123,col 29)",
            "(line 124,col 9)-(line 124,col 51)",
            "(line 126,col 9)-(line 126,col 27)",
            "(line 127,col 9)-(line 127,col 27)",
            "(line 128,col 9)-(line 128,col 29)",
            "(line 129,col 9)-(line 129,col 51)",
            "(line 131,col 9)-(line 131,col 25)",
            "(line 132,col 9)-(line 132,col 25)",
            "(line 133,col 9)-(line 133,col 29)",
            "(line 134,col 9)-(line 134,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testCloning()",
        "snippet": "    public void testCloning() {\n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = null;\n        try {\n            s2 = (XYSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n    }\n",
        "begin_line": 140,
        "end_line": 153,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 45)",
            "(line 142,col 9)-(line 142,col 25)",
            "(line 143,col 9)-(line 143,col 27)",
            "(line 144,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 29)",
            "(line 151,col 9)-(line 151,col 51)",
            "(line 152,col 9)-(line 152,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 100.0);\n        s1.add(2.0, null);\n        s1.add(3.0, 200.0);\n        XYSeries s2 = null;\n        try {\n            s2 = (XYSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1.equals(s2));\n\n        // check independence\n        s2.add(4.0, 300.0);\n        assertFalse(s1.equals(s2));\n        s1.add(4.0, 300.0);\n        assertTrue(s1.equals(s2));\n    }\n",
        "begin_line": 158,
        "end_line": 177,
        "comment": "\n     * Another test of the clone() method.\n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 41)",
            "(line 160,col 9)-(line 160,col 27)",
            "(line 161,col 9)-(line 161,col 26)",
            "(line 162,col 9)-(line 162,col 27)",
            "(line 163,col 9)-(line 163,col 27)",
            "(line 164,col 9)-(line 169,col 9)",
            "(line 170,col 9)-(line 170,col 34)",
            "(line 173,col 9)-(line 173,col 27)",
            "(line 174,col 9)-(line 174,col 35)",
            "(line 175,col 9)-(line 175,col 27)",
            "(line 176,col 9)-(line 176,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testCloning3()",
        "snippet": "    public void testCloning3() {\n        XYSeries s1 = new XYSeries(\"S1\");\n        XYSeries s2 = null;\n        try {\n            s2 = (XYSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1.equals(s2));\n\n        // check independence\n        s2.add(4.0, 300.0);\n        assertFalse(s1.equals(s2));\n        s1.add(4.0, 300.0);\n        assertTrue(s1.equals(s2));\n    }\n",
        "begin_line": 182,
        "end_line": 198,
        "comment": "\n     * Another test of the clone() method.\n     ",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 41)",
            "(line 184,col 9)-(line 184,col 27)",
            "(line 185,col 9)-(line 190,col 9)",
            "(line 191,col 9)-(line 191,col 34)",
            "(line 194,col 9)-(line 194,col 27)",
            "(line 195,col 9)-(line 195,col 35)",
            "(line 196,col 9)-(line 196,col 27)",
            "(line 197,col 9)-(line 197,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        XYSeries s1 = new XYSeries(\"Series\");\n        s1.add(1.0, 1.1);\n        XYSeries s2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (XYSeries) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(s1, s2);\n\n    }\n",
        "begin_line": 203,
        "end_line": 225,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 45)",
            "(line 206,col 9)-(line 206,col 25)",
            "(line 207,col 9)-(line 207,col 27)",
            "(line 209,col 9)-(line 222,col 9)",
            "(line 223,col 9)-(line 223,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        XYSeries s1 = new XYSeries(\"Series 1\");\n        s1.add(1.0, 1.0);\n        s1.add(2.0, 2.0);\n        s1.add(3.0, 3.0);\n        assertEquals(0, s1.indexOf(new Double(1.0)));\n    }\n",
        "begin_line": 230,
        "end_line": 236,
        "comment": "\n     * Simple test for the indexOf() method.\n     ",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 47)",
            "(line 232,col 9)-(line 232,col 25)",
            "(line 233,col 9)-(line 233,col 25)",
            "(line 234,col 9)-(line 234,col 25)",
            "(line 235,col 9)-(line 235,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testIndexOf2()",
        "snippet": "    public void testIndexOf2() {\n        XYSeries s1 = new XYSeries(\"Series 1\", false, true);\n        s1.add(1.0, 1.0);\n        s1.add(3.0, 3.0);\n        s1.add(2.0, 2.0);\n        assertEquals(0, s1.indexOf(new Double(1.0)));\n        assertEquals(1, s1.indexOf(new Double(3.0)));\n        assertEquals(2, s1.indexOf(new Double(2.0)));\n    }\n",
        "begin_line": 241,
        "end_line": 249,
        "comment": "\n     * A check for the indexOf() method for an unsorted series.\n     ",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 60)",
            "(line 243,col 9)-(line 243,col 25)",
            "(line 244,col 9)-(line 244,col 25)",
            "(line 245,col 9)-(line 245,col 25)",
            "(line 246,col 9)-(line 246,col 53)",
            "(line 247,col 9)-(line 247,col 53)",
            "(line 248,col 9)-(line 248,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testRemove()",
        "snippet": "    public void testRemove() {\n\n        XYSeries s1 = new XYSeries(\"Series 1\");\n        s1.add(1.0, 1.0);\n        s1.add(2.0, 2.0);\n        s1.add(3.0, 3.0);\n\n        assertEquals(3, s1.getItemCount());\n        s1.remove(new Double(2.0));\n        assertEquals(new Double(3.0), s1.getX(1));\n\n        s1.remove(0);\n        assertEquals(new Double(3.0), s1.getX(0));\n\n    }\n",
        "begin_line": 254,
        "end_line": 268,
        "comment": "\n     * Simple test for the remove() method.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 47)",
            "(line 257,col 9)-(line 257,col 25)",
            "(line 258,col 9)-(line 258,col 25)",
            "(line 259,col 9)-(line 259,col 25)",
            "(line 261,col 9)-(line 261,col 43)",
            "(line 262,col 9)-(line 262,col 35)",
            "(line 263,col 9)-(line 263,col 50)",
            "(line 265,col 9)-(line 265,col 21)",
            "(line 266,col 9)-(line 266,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testAdditionOfDuplicateXValues()",
        "snippet": "    public void testAdditionOfDuplicateXValues() {\n        XYSeries s1 = new XYSeries(\"Series 1\");\n        s1.add(1.0, 1.0);\n        s1.add(2.0, 2.0);\n        s1.add(2.0, 3.0);\n        s1.add(2.0, 4.0);\n        s1.add(3.0, 5.0);\n        assertEquals(1.0, s1.getY(0).doubleValue(), EPSILON);\n        assertEquals(2.0, s1.getY(1).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getY(2).doubleValue(), EPSILON);\n        assertEquals(4.0, s1.getY(3).doubleValue(), EPSILON);\n        assertEquals(5.0, s1.getY(4).doubleValue(), EPSILON);\n    }\n",
        "begin_line": 276,
        "end_line": 288,
        "comment": "\n     * When items are added with duplicate x-values, we expect them to remain\n     * in the order they were added.\n     ",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 47)",
            "(line 278,col 9)-(line 278,col 25)",
            "(line 279,col 9)-(line 279,col 25)",
            "(line 280,col 9)-(line 280,col 25)",
            "(line 281,col 9)-(line 281,col 25)",
            "(line 282,col 9)-(line 282,col 25)",
            "(line 283,col 9)-(line 283,col 61)",
            "(line 284,col 9)-(line 284,col 61)",
            "(line 285,col 9)-(line 285,col 61)",
            "(line 286,col 9)-(line 286,col 61)",
            "(line 287,col 9)-(line 287,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testUpdate()",
        "snippet": "    public void testUpdate() {\n        XYSeries series = new XYSeries(\"S1\");\n        series.add(new Integer(1), new Integer(2));\n        assertEquals(new Integer(2), series.getY(0));\n        series.update(new Integer(1), new Integer(3));\n        assertEquals(new Integer(3), series.getY(0));\n        try {\n            series.update(new Integer(2), new Integer(99));\n            assertTrue(false);\n        }\n        catch (SeriesException e) {\n            // got the required exception\n        }\n    }\n",
        "begin_line": 293,
        "end_line": 306,
        "comment": "\n     * Some checks for the update(Number, Number) method.\n     ",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 45)",
            "(line 295,col 9)-(line 295,col 51)",
            "(line 296,col 9)-(line 296,col 53)",
            "(line 297,col 9)-(line 297,col 54)",
            "(line 298,col 9)-(line 298,col 53)",
            "(line 299,col 9)-(line 305,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testUpdate2()",
        "snippet": "    public void testUpdate2() {\n       XYSeries series = new XYSeries(\"Series\", false, true);\n       series.add(5.0, 55.0);\n       series.add(4.0, 44.0);\n       series.add(6.0, 66.0);\n       series.update(new Double(4.0), new Double(99.0));\n       assertEquals(new Double(99.0), series.getY(1));\n    }\n",
        "begin_line": 311,
        "end_line": 318,
        "comment": "\n     * Some checks for the update() method for an unsorted series.\n     ",
        "child_ranges": [
            "(line 312,col 8)-(line 312,col 61)",
            "(line 313,col 8)-(line 313,col 29)",
            "(line 314,col 8)-(line 314,col 29)",
            "(line 315,col 8)-(line 315,col 29)",
            "(line 316,col 8)-(line 316,col 56)",
            "(line 317,col 8)-(line 317,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testAddOrUpdate()",
        "snippet": "    public void testAddOrUpdate() {\n        XYSeries series = new XYSeries(\"S1\", true, false);\n        XYDataItem old = series.addOrUpdate(new Long(1), new Long(2));\n        assertTrue(old == null);\n        assertEquals(1, series.getItemCount());\n        assertEquals(new Long(2), series.getY(0));\n\n        old = series.addOrUpdate(new Long(2), new Long(3));\n        assertTrue(old == null);\n        assertEquals(2, series.getItemCount());\n        assertEquals(new Long(3), series.getY(1));\n\n        old = series.addOrUpdate(new Long(1), new Long(99));\n        assertEquals(new XYDataItem(new Long(1), new Long(2)), old);\n        assertEquals(2, series.getItemCount());\n        assertEquals(new Long(99), series.getY(0));\n        assertEquals(new Long(3), series.getY(1));\n    }\n",
        "begin_line": 323,
        "end_line": 340,
        "comment": "\n     * Some checks for the addOrUpdate() method.\n     ",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 58)",
            "(line 325,col 9)-(line 325,col 70)",
            "(line 326,col 9)-(line 326,col 32)",
            "(line 327,col 9)-(line 327,col 47)",
            "(line 328,col 9)-(line 328,col 50)",
            "(line 330,col 9)-(line 330,col 59)",
            "(line 331,col 9)-(line 331,col 32)",
            "(line 332,col 9)-(line 332,col 47)",
            "(line 333,col 9)-(line 333,col 50)",
            "(line 335,col 9)-(line 335,col 60)",
            "(line 336,col 9)-(line 336,col 68)",
            "(line 337,col 9)-(line 337,col 47)",
            "(line 338,col 9)-(line 338,col 51)",
            "(line 339,col 9)-(line 339,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testAddOrUpdate2()",
        "snippet": "    public void testAddOrUpdate2() {\n        XYSeries series = new XYSeries(\"Series\", false, false);\n        series.add(5.0, 5.5);\n        series.add(6.0, 6.6);\n        series.add(3.0, 3.3);\n        series.add(4.0, 4.4);\n        series.add(2.0, 2.2);\n        series.add(1.0, 1.1);\n        series.addOrUpdate(new Double(3.0), new Double(33.3));\n        series.addOrUpdate(new Double(2.0), new Double(22.2));\n        assertEquals(33.3, series.getY(2).doubleValue(), EPSILON);\n        assertEquals(22.2, series.getY(4).doubleValue(), EPSILON);\n    }\n",
        "begin_line": 345,
        "end_line": 357,
        "comment": "\n     * Some checks for the addOrUpdate() method for an UNSORTED series.\n     ",
        "child_ranges": [
            "(line 346,col 9)-(line 346,col 63)",
            "(line 347,col 9)-(line 347,col 29)",
            "(line 348,col 9)-(line 348,col 29)",
            "(line 349,col 9)-(line 349,col 29)",
            "(line 350,col 9)-(line 350,col 29)",
            "(line 351,col 9)-(line 351,col 29)",
            "(line 352,col 9)-(line 352,col 29)",
            "(line 353,col 9)-(line 353,col 62)",
            "(line 354,col 9)-(line 354,col 62)",
            "(line 355,col 9)-(line 355,col 66)",
            "(line 356,col 9)-(line 356,col 66)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testAddOrUpdate3()",
        "snippet": "    public void testAddOrUpdate3() {\n        XYSeries series = new XYSeries(\"Series\", false, true);\n        series.addOrUpdate(1.0, 1.0);\n        series.addOrUpdate(1.0, 2.0);\n        series.addOrUpdate(1.0, 3.0);\n        assertEquals(new Double(1.0), series.getY(0));\n        assertEquals(new Double(2.0), series.getY(1));\n        assertEquals(new Double(3.0), series.getY(2));\n        assertEquals(3, series.getItemCount());\n    }\n",
        "begin_line": 362,
        "end_line": 371,
        "comment": "\n     * Another test for the addOrUpdate() method.\n     ",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 62)",
            "(line 364,col 9)-(line 364,col 37)",
            "(line 365,col 9)-(line 365,col 37)",
            "(line 366,col 9)-(line 366,col 37)",
            "(line 367,col 9)-(line 367,col 54)",
            "(line 368,col 9)-(line 368,col 54)",
            "(line 369,col 9)-(line 369,col 54)",
            "(line 370,col 9)-(line 370,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testAdd()",
        "snippet": "    public void testAdd() {\n        XYSeries series = new XYSeries(\"Series\", false, true);\n        series.add(5.0, 5.50);\n        series.add(5.1, 5.51);\n        series.add(6.0, 6.6);\n        series.add(3.0, 3.3);\n        series.add(4.0, 4.4);\n        series.add(2.0, 2.2);\n        series.add(1.0, 1.1);\n        assertEquals(5.5, series.getY(0).doubleValue(), EPSILON);\n        assertEquals(5.51, series.getY(1).doubleValue(), EPSILON);\n        assertEquals(6.6, series.getY(2).doubleValue(), EPSILON);\n        assertEquals(3.3, series.getY(3).doubleValue(), EPSILON);\n        assertEquals(4.4, series.getY(4).doubleValue(), EPSILON);\n        assertEquals(2.2, series.getY(5).doubleValue(), EPSILON);\n        assertEquals(1.1, series.getY(6).doubleValue(), EPSILON);\n    }\n",
        "begin_line": 376,
        "end_line": 392,
        "comment": "\n     * Some checks for the add() method for an UNSORTED series.\n     ",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 62)",
            "(line 378,col 9)-(line 378,col 30)",
            "(line 379,col 9)-(line 379,col 30)",
            "(line 380,col 9)-(line 380,col 29)",
            "(line 381,col 9)-(line 381,col 29)",
            "(line 382,col 9)-(line 382,col 29)",
            "(line 383,col 9)-(line 383,col 29)",
            "(line 384,col 9)-(line 384,col 29)",
            "(line 385,col 9)-(line 385,col 65)",
            "(line 386,col 9)-(line 386,col 66)",
            "(line 387,col 9)-(line 387,col 65)",
            "(line 388,col 9)-(line 388,col 65)",
            "(line 389,col 9)-(line 389,col 65)",
            "(line 390,col 9)-(line 390,col 65)",
            "(line 391,col 9)-(line 391,col 65)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testSetMaximumItemCount()",
        "snippet": "    public void testSetMaximumItemCount() {\n        XYSeries s1 = new XYSeries(\"S1\");\n        assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount());\n        s1.setMaximumItemCount(2);\n        assertEquals(2, s1.getMaximumItemCount());\n        s1.add(1.0, 1.1);\n        s1.add(2.0, 2.2);\n        s1.add(3.0, 3.3);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);\n    }\n",
        "begin_line": 397,
        "end_line": 407,
        "comment": "\n     * A simple check that the maximumItemCount attribute is working.\n     ",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 41)",
            "(line 399,col 9)-(line 399,col 66)",
            "(line 400,col 9)-(line 400,col 34)",
            "(line 401,col 9)-(line 401,col 50)",
            "(line 402,col 9)-(line 402,col 25)",
            "(line 403,col 9)-(line 403,col 25)",
            "(line 404,col 9)-(line 404,col 25)",
            "(line 405,col 9)-(line 405,col 61)",
            "(line 406,col 9)-(line 406,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testSetMaximumItemCount2()",
        "snippet": "    public void testSetMaximumItemCount2() {\n        XYSeries s1 = new XYSeries(\"S1\");\n        s1.add(1.0, 1.1);\n        s1.add(2.0, 2.2);\n        s1.add(3.0, 3.3);\n        s1.setMaximumItemCount(2);\n        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);\n        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);\n    }\n",
        "begin_line": 412,
        "end_line": 420,
        "comment": "\n     * Check that the maximum item count can be applied retrospectively.\n     ",
        "child_ranges": [
            "(line 413,col 9)-(line 413,col 41)",
            "(line 414,col 9)-(line 414,col 25)",
            "(line 415,col 9)-(line 415,col 25)",
            "(line 416,col 9)-(line 416,col 25)",
            "(line 417,col 9)-(line 417,col 34)",
            "(line 418,col 9)-(line 418,col 61)",
            "(line 419,col 9)-(line 419,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testToArray()",
        "snippet": "    public void testToArray() {\n        XYSeries s = new XYSeries(\"S1\");\n        double[][] array = s.toArray();\n        assertEquals(2, array.length);\n        assertEquals(0, array[0].length);\n        assertEquals(0, array[1].length);\n\n        s.add(1.0, 2.0);\n        array = s.toArray();\n        assertEquals(1, array[0].length);\n        assertEquals(1, array[1].length);\n        assertEquals(2, array.length);\n        assertEquals(1.0, array[0][0], EPSILON);\n        assertEquals(2.0, array[1][0], EPSILON);\n\n        s.add(2.0, null);\n        array = s.toArray();\n        assertEquals(2, array.length);\n        assertEquals(2, array[0].length);\n        assertEquals(2, array[1].length);\n        assertEquals(2.0, array[0][1], EPSILON);\n        assertTrue(Double.isNaN(array[1][1]));\n    }\n",
        "begin_line": 425,
        "end_line": 447,
        "comment": "\n     * Some checks for the toArray() method.\n     ",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 40)",
            "(line 427,col 9)-(line 427,col 39)",
            "(line 428,col 9)-(line 428,col 38)",
            "(line 429,col 9)-(line 429,col 41)",
            "(line 430,col 9)-(line 430,col 41)",
            "(line 432,col 9)-(line 432,col 24)",
            "(line 433,col 9)-(line 433,col 28)",
            "(line 434,col 9)-(line 434,col 41)",
            "(line 435,col 9)-(line 435,col 41)",
            "(line 436,col 9)-(line 436,col 38)",
            "(line 437,col 9)-(line 437,col 48)",
            "(line 438,col 9)-(line 438,col 48)",
            "(line 440,col 9)-(line 440,col 25)",
            "(line 441,col 9)-(line 441,col 28)",
            "(line 442,col 9)-(line 442,col 38)",
            "(line 443,col 9)-(line 443,col 41)",
            "(line 444,col 9)-(line 444,col 41)",
            "(line 445,col 9)-(line 445,col 48)",
            "(line 446,col 9)-(line 446,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testToArrayExample()",
        "snippet": "    public void testToArrayExample() {\n        XYSeries s = new XYSeries(\"S\");\n        s.add(1.0, 11.0);\n        s.add(2.0, 22.0);\n        s.add(3.5, 35.0);\n        s.add(5.0, null);\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        dataset.addSeries(\"S\", s.toArray());\n        assertEquals(1, dataset.getSeriesCount());\n        assertEquals(4, dataset.getItemCount(0));\n        assertEquals(\"S\", dataset.getSeriesKey(0));\n        assertEquals(1.0, dataset.getXValue(0, 0), EPSILON);\n        assertEquals(2.0, dataset.getXValue(0, 1), EPSILON);\n        assertEquals(3.5, dataset.getXValue(0, 2), EPSILON);\n        assertEquals(5.0, dataset.getXValue(0, 3), EPSILON);\n        assertEquals(11.0, dataset.getYValue(0, 0), EPSILON);\n        assertEquals(22.0, dataset.getYValue(0, 1), EPSILON);\n        assertEquals(35.0, dataset.getYValue(0, 2), EPSILON);\n        assertTrue(Double.isNaN(dataset.getYValue(0, 3)));\n    }\n",
        "begin_line": 452,
        "end_line": 471,
        "comment": "\n     * Some checks for an example using the toArray() method.\n     ",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 39)",
            "(line 454,col 9)-(line 454,col 25)",
            "(line 455,col 9)-(line 455,col 25)",
            "(line 456,col 9)-(line 456,col 25)",
            "(line 457,col 9)-(line 457,col 25)",
            "(line 458,col 9)-(line 458,col 58)",
            "(line 459,col 9)-(line 459,col 44)",
            "(line 460,col 9)-(line 460,col 50)",
            "(line 461,col 9)-(line 461,col 49)",
            "(line 462,col 9)-(line 462,col 51)",
            "(line 463,col 9)-(line 463,col 60)",
            "(line 464,col 9)-(line 464,col 60)",
            "(line 465,col 9)-(line 465,col 60)",
            "(line 466,col 9)-(line 466,col 60)",
            "(line 467,col 9)-(line 467,col 61)",
            "(line 468,col 9)-(line 468,col 61)",
            "(line 469,col 9)-(line 469,col 61)",
            "(line 470,col 9)-(line 470,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.xy.junit.XYSeriesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "signature": "org.jfree.data.xy.junit.XYSeriesTests.testBug1955483()",
        "snippet": "    public void testBug1955483() {\n        XYSeries series = new XYSeries(\"Series\", true, true);\n        series.addOrUpdate(1.0, 1.0);\n        series.addOrUpdate(1.0, 2.0);\n        assertEquals(new Double(1.0), series.getY(0));\n        assertEquals(new Double(2.0), series.getY(1));\n        assertEquals(2, series.getItemCount());\n    }\n",
        "begin_line": 476,
        "end_line": 483,
        "comment": "\n     * Another test for the addOrUpdate() method.\n     ",
        "child_ranges": [
            "(line 477,col 9)-(line 477,col 61)",
            "(line 478,col 9)-(line 478,col 37)",
            "(line 479,col 9)-(line 479,col 37)",
            "(line 480,col 9)-(line 480,col 54)",
            "(line 481,col 9)-(line 481,col 54)",
            "(line 482,col 9)-(line 482,col 47)"
        ]
    }
]