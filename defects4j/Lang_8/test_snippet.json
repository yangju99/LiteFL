[
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormat_PrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormat_PrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormat_PrinterTest.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    @Override\n    protected DatePrinter getInstance(String format, TimeZone timeZone, Locale locale) {\n        return FastDateFormat.getInstance(format, timeZone, locale);\n    }\n",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.getInstance(java.lang.String)",
        "snippet": "        DatePrinter getInstance(String format) {\n        return getInstance(format, TimeZone.getDefault(), Locale.getDefault());\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.getDateInstance(int, java.util.Locale)",
        "snippet": "    private DatePrinter getDateInstance(int dateStyle, Locale locale) {\n        return getInstance(FormatCache.getPatternForStyle(dateStyle, null, locale), TimeZone.getDefault(), Locale.getDefault());\n    }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 128)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.getInstance(java.lang.String, java.util.Locale)",
        "snippet": "    private DatePrinter getInstance(String format, Locale locale) {\n        return getInstance(format, TimeZone.getDefault(), locale);\n    }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.getInstance(java.lang.String, java.util.TimeZone)",
        "snippet": "    private DatePrinter getInstance(String format, TimeZone timeZone) {\n        return getInstance(format, timeZone, Locale.getDefault());\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected DatePrinter getInstance(String format, TimeZone timeZone, Locale locale) {\n        return new FastDatePrinter(format, timeZone, locale);\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Override this method in derived tests to change the construction of instances\n     * @param format\n     * @param timeZone\n     * @param locale\n     * @return\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testFormat()",
        "snippet": "    @Test\n    public void testFormat() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(NEW_YORK);\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            DatePrinter fdf = getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            assertEquals(sdf.format(date1), fdf.format(date1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\n\n            fdf = getInstance(\"Z\");\n            assertEquals(\"-0500\", fdf.format(date1));\n            assertEquals(\"-0500\", fdf.format(cal1));\n            assertEquals(\"-0500\", fdf.format(millis1));\n\n            assertEquals(\"-0400\", fdf.format(date2));\n            assertEquals(\"-0400\", fdf.format(cal2));\n            assertEquals(\"-0400\", fdf.format(millis2));\n\n            fdf = getInstance(\"ZZ\");\n            assertEquals(\"-05:00\", fdf.format(date1));\n            assertEquals(\"-05:00\", fdf.format(cal1));\n            assertEquals(\"-05:00\", fdf.format(millis1));\n\n            assertEquals(\"-04:00\", fdf.format(date2));\n            assertEquals(\"-04:00\", fdf.format(cal2));\n            assertEquals(\"-04:00\", fdf.format(millis2));\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));\n            assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }\n",
        "begin_line": 73,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 55)",
            "(line 76,col 9)-(line 76,col 57)",
            "(line 77,col 9)-(line 126,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales()",
        "snippet": "    @Test\n    public void testShortDateStyleWithLocales() {\n        Locale usLocale = Locale.US;\n        Locale swedishLocale = new Locale(\"sv\", \"SE\");\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004, 1, 3);\n        DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale);\n        assertEquals(\"2/3/04\", fdf.format(cal));\n\n        fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale);\n        assertEquals(\"2004-02-03\", fdf.format(cal));\n\n    }\n",
        "begin_line": 132,
        "end_line": 144,
        "comment": "\n     * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}.\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 36)",
            "(line 135,col 9)-(line 135,col 54)",
            "(line 136,col 9)-(line 136,col 46)",
            "(line 137,col 9)-(line 137,col 28)",
            "(line 138,col 9)-(line 138,col 74)",
            "(line 139,col 9)-(line 139,col 48)",
            "(line 141,col 9)-(line 141,col 67)",
            "(line 142,col 9)-(line 142,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testLowYearPadding()",
        "snippet": "    @Test\n    public void testLowYearPadding() {\n        Calendar cal = Calendar.getInstance();\n        DatePrinter format = getInstance(YYYY_MM_DD);\n\n        cal.set(1,0,1);\n        assertEquals(\"0001/01/01\", format.format(cal));\n        cal.set(10,0,1);\n        assertEquals(\"0010/01/01\", format.format(cal));\n        cal.set(100,0,1);\n        assertEquals(\"0100/01/01\", format.format(cal));\n        cal.set(999,0,1);\n        assertEquals(\"0999/01/01\", format.format(cal));\n    }\n",
        "begin_line": 149,
        "end_line": 162,
        "comment": "\n     * Tests that pre-1000AD years get padded with yyyy\n     ",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 46)",
            "(line 152,col 9)-(line 152,col 53)",
            "(line 154,col 9)-(line 154,col 23)",
            "(line 155,col 9)-(line 155,col 55)",
            "(line 156,col 9)-(line 156,col 24)",
            "(line 157,col 9)-(line 157,col 55)",
            "(line 158,col 9)-(line 158,col 25)",
            "(line 159,col 9)-(line 159,col 55)",
            "(line 160,col 9)-(line 160,col 25)",
            "(line 161,col 9)-(line 161,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testMilleniumBug()",
        "snippet": "    @Test\n    public void testMilleniumBug() {\n        Calendar cal = Calendar.getInstance();\n        DatePrinter format = getInstance(\"dd.MM.yyyy\");\n\n        cal.set(1000,0,1);\n        assertEquals(\"01.01.1000\", format.format(cal));\n    }\n",
        "begin_line": 166,
        "end_line": 173,
        "comment": "\n     * Show Bug #39410 is solved\n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 46)",
            "(line 169,col 9)-(line 169,col 55)",
            "(line 171,col 9)-(line 171,col 26)",
            "(line 172,col 9)-(line 172,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testSimpleDate()",
        "snippet": "    @Test\n    public void testSimpleDate() {\n        Calendar cal = Calendar.getInstance();\n        DatePrinter format = getInstance(YYYY_MM_DD);\n\n        cal.set(2004,11,31);\n        assertEquals(\"2004/12/31\", format.format(cal));\n        cal.set(999,11,31);\n        assertEquals(\"0999/12/31\", format.format(cal));\n        cal.set(1,2,2);\n        assertEquals(\"0001/03/02\", format.format(cal));\n    }\n",
        "begin_line": 179,
        "end_line": 190,
        "comment": "\n     * testLowYearPadding showed that the date was buggy\n     * This test confirms it, getting 366 back as a date\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 46)",
            "(line 182,col 9)-(line 182,col 53)",
            "(line 184,col 9)-(line 184,col 28)",
            "(line 185,col 9)-(line 185,col 55)",
            "(line 186,col 9)-(line 186,col 27)",
            "(line 187,col 9)-(line 187,col 55)",
            "(line 188,col 9)-(line 188,col 23)",
            "(line 189,col 9)-(line 189,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testLang303()",
        "snippet": "    @Test\n    public void testLang303() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004, 11, 31);\n\n        DatePrinter format = getInstance(YYYY_MM_DD);\n        String output = format.format(cal);\n\n        format = SerializationUtils.deserialize(SerializationUtils.serialize((Serializable) format));\n        assertEquals(output, format.format(cal));\n    }\n",
        "begin_line": 192,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 46)",
            "(line 195,col 9)-(line 195,col 30)",
            "(line 197,col 9)-(line 197,col 53)",
            "(line 198,col 9)-(line 198,col 43)",
            "(line 200,col 9)-(line 200,col 101)",
            "(line 201,col 9)-(line 201,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testLang538()",
        "snippet": "    @Test\n    public void testLang538() {\n        // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)\n        // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone\n        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));\n        cal.clear();\n        cal.set(2009, 9, 16, 8, 42, 16);\n\n        DatePrinter format = getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));\n        assertEquals(\"dateTime\", \"2009-10-16T16:42:16.000Z\", format.format(cal.getTime()));\n        assertEquals(\"dateTime\", \"2009-10-16T08:42:16.000Z\", format.format(cal));\n    }\n",
        "begin_line": 204,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 85)",
            "(line 209,col 9)-(line 209,col 20)",
            "(line 210,col 9)-(line 210,col 40)",
            "(line 212,col 9)-(line 212,col 102)",
            "(line 213,col 9)-(line 213,col 91)",
            "(line 214,col 9)-(line 214,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testLang645()",
        "snippet": "    @Test\n    public void testLang645() {\n        Locale locale = new Locale(\"sv\", \"SE\");\n\n        Calendar cal = Calendar.getInstance();\n        cal.set(2010, 0, 1, 12, 0, 0);\n        Date d = cal.getTime();\n\n        DatePrinter fdf = getInstance(\"EEEE', week 'ww\", locale);\n\n        assertEquals(\"fredag, week 53\", fdf.format(d));\n    }\n",
        "begin_line": 217,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 47)",
            "(line 221,col 9)-(line 221,col 46)",
            "(line 222,col 9)-(line 222,col 38)",
            "(line 223,col 9)-(line 223,col 31)",
            "(line 225,col 9)-(line 225,col 65)",
            "(line 227,col 9)-(line 227,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testEquals()",
        "snippet": "    @Test\n    public void testEquals() {\n        DatePrinter printer1= getInstance(YYYY_MM_DD);\n        DatePrinter printer2= getInstance(YYYY_MM_DD);\n\n        assertEquals(printer1, printer2);\n        assertEquals(printer1.hashCode(), printer2.hashCode());        \n\n        assertFalse(printer1.equals(new Object()));\n    }\n",
        "begin_line": 230,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 54)",
            "(line 233,col 9)-(line 233,col 54)",
            "(line 235,col 9)-(line 235,col 41)",
            "(line 236,col 9)-(line 236,col 63)",
            "(line 238,col 9)-(line 238,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testToStringContainsName()",
        "snippet": "    @Test\n    public void testToStringContainsName() {\n        DatePrinter printer= getInstance(YYYY_MM_DD);\n        assertTrue(printer.toString().startsWith(\"FastDate\"));\n    }\n",
        "begin_line": 241,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 53)",
            "(line 244,col 9)-(line 244,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testPatternMatches()",
        "snippet": "    @Test\n    public void testPatternMatches() {\n        DatePrinter printer= getInstance(YYYY_MM_DD);\n        assertEquals(YYYY_MM_DD, printer.getPattern());\n    }\n",
        "begin_line": 247,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 53)",
            "(line 250,col 9)-(line 250,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testLocaleMatches()",
        "snippet": "    @Test\n    public void testLocaleMatches() {\n        DatePrinter printer= getInstance(YYYY_MM_DD, SWEDEN);\n        assertEquals(SWEDEN, printer.getLocale());\n    }\n",
        "begin_line": 253,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 61)",
            "(line 256,col 9)-(line 256,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testTimeZoneMatches()",
        "snippet": "    @Test\n    public void testTimeZoneMatches() {\n        DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK);\n        assertEquals(NEW_YORK, printer.getTimeZone());\n    }\n",
        "begin_line": 259,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 63)",
            "(line 262,col 9)-(line 262,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDatePrinterTest",
        "child_classes": [
            "org.apache.commons.lang3.time.FastDateFormat_PrinterTest"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",
        "signature": "org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected()",
        "snippet": "    @Test\n    public void testCalendarTimezoneRespected() {\n        String[] availableZones = TimeZone.getAvailableIDs();\n        TimeZone currentZone = TimeZone.getDefault();\n        \n        TimeZone anotherZone = null;\n        for (String zone : availableZones) {\n            if (!zone.equals(currentZone.getID())) {\n                anotherZone = TimeZone.getTimeZone(zone);\n            }\n        }\n        \n        assertNotNull(\"Cannot find another timezone\", anotherZone);\n        \n        final String pattern = \"h:mma z\";\n        final Calendar cal = Calendar.getInstance(anotherZone);\n        \n        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n        sdf.setTimeZone(anotherZone);\n        String expectedValue = sdf.format(cal.getTime());\n        String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n        assertEquals(expectedValue, actualValue);\n    }\n",
        "begin_line": 265,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 61)",
            "(line 268,col 9)-(line 268,col 53)",
            "(line 270,col 9)-(line 270,col 36)",
            "(line 271,col 9)-(line 275,col 9)",
            "(line 277,col 9)-(line 277,col 67)",
            "(line 279,col 9)-(line 279,col 41)",
            "(line 280,col 9)-(line 280,col 63)",
            "(line 282,col 9)-(line 282,col 61)",
            "(line 283,col 9)-(line 283,col 37)",
            "(line 284,col 9)-(line 284,col 57)",
            "(line 285,col 9)-(line 285,col 77)",
            "(line 286,col 9)-(line 286,col 49)"
        ]
    }
]