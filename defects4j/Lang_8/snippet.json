[
    {
        "name": "FastDatePrinter.appendTo#1002",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TwelveHourField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            int value = calendar.get(Calendar.HOUR);\n            if (value == 0) {\n                value = calendar.getLeastMaximum(Calendar.HOUR) + 1;\n            }\n            mRule.appendTo(buffer, value);\n        }\n",
        "begin_line": 1002,
        "end_line": 1009,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": "\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     ",
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.FastDatePrinter.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.isNumber#568",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.TextStrategy.isNumber()",
        "snippet": "        @Override\n        public boolean isNumber() {\n            return false;\n        }\n",
        "begin_line": 568,
        "end_line": 571,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.FastDateParser.Strategy": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.DateParser": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.appendTo#1132",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            if (zone.useDaylightTime()\n                    && calendar.get(Calendar.DST_OFFSET) != 0) {\n                buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));\n            } else {\n                buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));\n            }\n        }\n",
        "begin_line": 1132,
        "end_line": 1140,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": "\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     ",
            "org.apache.commons.lang3.time.FastDatePrinter.Rule": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.equals#1236",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj instanceof TimeZoneDisplayKey) {\n                TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;\n                return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);\n            }\n            return false;\n        }\n",
        "begin_line": 1236,
        "end_line": 1249,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.appendTo#730",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.UnpaddedNumberField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        @Override\n        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 10) {\n                buffer.append((char)(value + '0'));\n            } else if (value < 100) {\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            } else {\n                buffer.append(Integer.toString(value));\n            }\n        }\n",
        "begin_line": 730,
        "end_line": 740,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.FastDatePrinter.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.TimeZoneNameRule#1109",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule.TimeZoneNameRule(java.util.TimeZone, java.util.Locale, int)",
        "snippet": "        TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n            mLocale = locale;\n            mStyle = style;\n            zone = timeZone;\n            \n            mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n            mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n        }\n",
        "begin_line": 1109,
        "end_line": 1116,
        "comment": "\n         * Constructs an instance of {@code TimeZoneNameRule} with the specified properties.\n         *\n         * @param timeZone the time zone\n         * @param locale the locale\n         * @param style the style\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.estimateLength#1121",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule.estimateLength()",
        "snippet": "        @Override\n        public int estimateLength() {\n            // We have no access to the Calendar object that will be passed to\n            // appendTo so base estimate on the TimeZone passed to the\n            // constructor\n            return Math.max(mStandard.length(), mDaylight.length());\n        }\n",
        "begin_line": 1121,
        "end_line": 1127,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "org.apache.commons.lang3.time.FastDatePrinter.Rule": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.TimeZoneDisplayKey#1215",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey.TimeZoneDisplayKey(java.util.TimeZone, boolean, int, java.util.Locale)",
        "snippet": "        TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale) {\n            mTimeZone = timeZone;\n            if (daylight) {\n                style |= 0x80000000;\n            }\n            mStyle = style;\n            mLocale = locale;\n        }\n",
        "begin_line": 1215,
        "end_line": 1223,
        "comment": "\n         * Constructs an instance of {@code TimeZoneDisplayKey} with the specified properties.\n         *\n         * @param timeZone the time zone\n         * @param daylight adjust the style for daylight saving time if {@code true}\n         * @param style the timezone style\n         * @param locale the timezone locale\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.hashCode#1228",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();\n        }\n",
        "begin_line": 1228,
        "end_line": 1231,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.appendTo#690",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TextField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            buffer.append(mValues[calendar.get(mField)]);\n        }\n",
        "begin_line": 690,
        "end_line": 693,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": "\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     ",
            "org.apache.commons.lang3.time.FastDatePrinter.Rule": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.parsePattern#167",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.parsePattern()",
        "snippet": "    protected List<Rule> parsePattern() {\n        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n        List<Rule> rules = new ArrayList<Rule>();\n\n        String[] ERAs = symbols.getEras();\n        String[] months = symbols.getMonths();\n        String[] shortMonths = symbols.getShortMonths();\n        String[] weekdays = symbols.getWeekdays();\n        String[] shortWeekdays = symbols.getShortWeekdays();\n        String[] AmPmStrings = symbols.getAmPmStrings();\n\n        int length = mPattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i = 0; i < length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(mPattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n\n            Rule rule;\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }\n",
        "begin_line": 167,
        "end_line": 288,
        "comment": "\n     * <p>Returns a list of Rules given a pattern.</p>\n     *\n     * @return a {@code List} of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.getTimeZoneDisplay#1078",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.getTimeZoneDisplay(java.util.TimeZone, boolean, int, java.util.Locale)",
        "snippet": "    static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {\n        TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);\n        String value = cTimeZoneDisplayCache.get(key);\n        if (value == null) {\n            // This is a very slow call, so cache the results.\n            value = tz.getDisplayName(daylight, style, locale);\n            String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);\n            if (prior != null) {\n                value= prior;\n            }\n        }\n        return value;\n    }\n",
        "begin_line": 1078,
        "end_line": 1090,
        "comment": "\n     * <p>Gets the time zone display name, using a cache for performance.</p>\n     *\n     * @param tz  the zone to query\n     * @param daylight  true if daylight savings\n     * @param style  the style to use {@code TimeZone.LONG} or {@code TimeZone.SHORT}\n     * @param locale  the locale to use\n     * @return the textual name of the time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.TwelveHourField#987",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TwelveHourField.TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter.NumberRule)",
        "snippet": "        TwelveHourField(NumberRule rule) {\n            mRule = rule;\n        }\n",
        "begin_line": 987,
        "end_line": 989,
        "comment": "\n         * Constructs an instance of {@code TwelveHourField} with the specified\n         * {@code NumberRule}.\n         *\n         * @param rule the rule\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.343
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.estimateLength#994",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TwelveHourField.estimateLength()",
        "snippet": "        @Override\n        public int estimateLength() {\n            return mRule.estimateLength();\n        }\n",
        "begin_line": 994,
        "end_line": 997,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.FastDatePrinter.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.343
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.getStrategy#418",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.getStrategy(java.lang.String, java.util.Calendar)",
        "snippet": "    private Strategy getStrategy(String formatField, Calendar definingCalendar) {\n        switch(formatField.charAt(0)) {\n        case '\\'':\n            if(formatField.length()>2) {\n                formatField= formatField.substring(1, formatField.length()-1);\n            }\n            //$FALL-THROUGH$\n        default:\n            return new CopyQuotedStrategy(formatField);\n        case 'D':\n            return DAY_OF_YEAR_STRATEGY;\n        case 'E':\n            return getLocaleSpecificStrategy(Calendar.DAY_OF_WEEK, definingCalendar);\n        case 'F':\n            return DAY_OF_WEEK_IN_MONTH_STRATEGY;\n        case 'G':\n            return getLocaleSpecificStrategy(Calendar.ERA, definingCalendar);\n        case 'H':\n            return MODULO_HOUR_OF_DAY_STRATEGY;\n        case 'K':\n            return HOUR_STRATEGY;\n        case 'M':\n            return formatField.length()>=3 ?getLocaleSpecificStrategy(Calendar.MONTH, definingCalendar) :NUMBER_MONTH_STRATEGY;\n        case 'S':\n            return MILLISECOND_STRATEGY;\n        case 'W':\n            return WEEK_OF_MONTH_STRATEGY;\n        case 'a':\n            return getLocaleSpecificStrategy(Calendar.AM_PM, definingCalendar);\n        case 'd':\n            return DAY_OF_MONTH_STRATEGY;\n        case 'h':\n            return MODULO_HOUR_STRATEGY;\n        case 'k':\n            return HOUR_OF_DAY_STRATEGY;\n        case 'm':\n            return MINUTE_STRATEGY;\n        case 's':\n            return SECOND_STRATEGY;\n        case 'w':\n            return WEEK_OF_YEAR_STRATEGY;\n        case 'y':\n            return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;\n        case 'Z':\n        case 'z':\n        \treturn getLocaleSpecificStrategy(Calendar.ZONE_OFFSET, definingCalendar);\n        }\n    }\n",
        "begin_line": 418,
        "end_line": 465,
        "comment": "\n     * Obtain a Strategy given a field from a SimpleDateFormat pattern\n     * @param formatField A sub-sequence of the SimpleDateFormat pattern\n     * @param definingCalendar The calendar to obtain the short and long values\n     * @return The Strategy that will handle parsing for the field\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.343
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.UnpaddedNumberField#707",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.UnpaddedNumberField.UnpaddedNumberField(int)",
        "snippet": "        UnpaddedNumberField(int field) {\n            mField = field;\n        }\n",
        "begin_line": 707,
        "end_line": 709,
        "comment": "\n         * Constructs an instance of {@code UnpadedNumberField} with the specified field.\n         *\n         * @param field the field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2828
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.estimateLength#714",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.UnpaddedNumberField.estimateLength()",
        "snippet": "        @Override\n        public int estimateLength() {\n            return 4;\n        }\n",
        "begin_line": 714,
        "end_line": 717,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.FastDatePrinter.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.2828
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.selectNumberRule#356",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.selectNumberRule(int, int)",
        "snippet": "    protected NumberRule selectNumberRule(int field, int padding) {\n        switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }\n    }\n",
        "begin_line": 356,
        "end_line": 365,
        "comment": "\n     * <p>Gets an appropriate rule for the padding required.</p>\n     *\n     * @param field  the field to get a rule for\n     * @param padding  the padding required\n     * @return a new rule with the correct padding\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2828
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.format#418",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar)",
        "snippet": "    @Override\n    public String format(Calendar calendar) {\n        return printer.format(calendar);\n    }\n",
        "begin_line": 418,
        "end_line": 421,
        "comment": "\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2325
        },
        "num_failing_tests": 2
    },
    {
        "name": "FormatCache.getInstance#69",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
        "class_name": "org.apache.commons.lang3.time.FormatCache",
        "signature": "org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public F getInstance(String pattern, TimeZone timeZone, Locale locale) {\n        if (pattern == null) {\n            throw new NullPointerException(\"pattern must not be null\");\n        }\n        if (timeZone == null) {\n            timeZone = TimeZone.getDefault();\n        }\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        MultipartKey key = new MultipartKey(pattern, timeZone, locale);\n        F format = cInstanceCache.get(key);\n        if (format == null) {           \n            format = createInstance(pattern, timeZone, locale);\n            F previousValue= cInstanceCache.putIfAbsent(key, format);\n            if (previousValue != null) {\n                // another thread snuck in and did the same work\n                // we should return the instance that is in ConcurrentMap\n                format= previousValue;              \n            }\n        }\n        return format;\n    }\n",
        "begin_line": 69,
        "end_line": 91,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  the non-null time zone\n     * @param locale  the non-null locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2265
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.getInstance#118",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String)",
        "snippet": "    public static FastDateFormat getInstance(String pattern) {\n        return cache.getInstance(pattern, null, null);\n    }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2265
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.format#413",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.format(java.util.Calendar)",
        "snippet": "    @Override\n    public String format(Calendar calendar) {\n        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n    }\n",
        "begin_line": 413,
        "end_line": 416,
        "comment": " (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.format#439",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.format(java.util.Calendar, java.lang.StringBuffer)",
        "snippet": "    @Override\n    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        return applyRules(calendar, buf);\n    }\n",
        "begin_line": 439,
        "end_line": 442,
        "comment": " (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar, java.lang.StringBuffer)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.appendTo#614",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            buffer.append(mValue);\n        }\n",
        "begin_line": 614,
        "end_line": 617,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": "\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     ",
            "org.apache.commons.lang3.time.FastDatePrinter.Rule": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.appendTo#878",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(mField));\n        }\n",
        "begin_line": 878,
        "end_line": 881,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": "\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     ",
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.FastDatePrinter.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.appendTo#886",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TwoDigitNumberField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        @Override\n        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 100) {\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            } else {\n                buffer.append(Integer.toString(value));\n            }\n        }\n",
        "begin_line": 886,
        "end_line": 894,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.FastDatePrinter.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.applyRules#452",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.applyRules(java.util.Calendar, java.lang.StringBuffer)",
        "snippet": "    protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {\n        for (Rule rule : mRules) {\n            rule.appendTo(buf, calendar);\n        }\n        return buf;\n    }\n",
        "begin_line": 452,
        "end_line": 457,
        "comment": "\n     * <p>Performs the formatting by applying the rules to the\n     * specified calendar.</p>\n     *\n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.TimeZoneStrategy#686",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.TimeZoneStrategy.TimeZoneStrategy(java.util.Locale)",
        "snippet": "        TimeZoneStrategy(Locale locale) {\n            for(String id : TimeZone.getAvailableIDs()) {\n                if(id.startsWith(\"GMT\")) {\n                    continue;\n                }\n                TimeZone tz= TimeZone.getTimeZone(id);\n                tzNames.put(tz.getDisplayName(false, TimeZone.SHORT, locale), tz);\n                tzNames.put(tz.getDisplayName(false, TimeZone.LONG, locale), tz);\n                if(tz.useDaylightTime()) {\n                    tzNames.put(tz.getDisplayName(true, TimeZone.SHORT, locale), tz);\n                    tzNames.put(tz.getDisplayName(true, TimeZone.LONG, locale), tz);\n                }\n            }\n            StringBuilder sb= new StringBuilder();\n            sb.append(\"(GMT[+\\\\-]\\\\d{0,1}\\\\d{2}|[+\\\\-]\\\\d{2}:?\\\\d{2}|\");\n            for(String id : tzNames.keySet()) {\n                escapeRegex(sb, id, false).append('|');\n            }\n            sb.setCharAt(sb.length()-1, ')');\n            validTimeZoneChars= sb.toString();\n        }\n",
        "begin_line": 686,
        "end_line": 706,
        "comment": "\n         * Construct a Strategy that parses a TimeZone\n         * @param locale The Locale\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.addRegex#719",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.TimeZoneStrategy.addRegex(org.apache.commons.lang3.time.FastDateParser, java.lang.StringBuilder)",
        "snippet": "        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            regex.append(validTimeZoneChars);\n            return true;\n        }\n",
        "begin_line": 719,
        "end_line": 723,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.FastDateParser.Strategy": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.DateParser": null
        },
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.TextStrategy#560",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.TextStrategy.TextStrategy(int, java.util.Calendar, java.util.Locale)",
        "snippet": "        TextStrategy(int field, Calendar definingCalendar, Locale locale) {\n            this.field= field;\n            this.keyValues= getDisplayNames(field, definingCalendar, locale);\n        }\n",
        "begin_line": 560,
        "end_line": 563,
        "comment": "\n         * Construct a Strategy that parses a Text field\n         * @param field The Calendar field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.addRegex#576",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.TextStrategy.addRegex(org.apache.commons.lang3.time.FastDateParser, java.lang.StringBuilder)",
        "snippet": "        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            regex.append('(');\n            for(String textKeyValue : keyValues.keySet()) {\n                escapeRegex(regex, textKeyValue, false).append('|');\n            }\n            regex.setCharAt(regex.length()-1, ')');\n            return true;\n        }\n",
        "begin_line": 576,
        "end_line": 584,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.FastDateParser.Strategy": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.DateParser": null
        },
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.escapeRegex#299",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.escapeRegex(java.lang.StringBuilder, java.lang.String, boolean)",
        "snippet": "    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n        regex.append(\"\\\\Q\");\n        for(int i= 0; i<value.length(); ++i) {\n            char c= value.charAt(i);\n            switch(c) {\n            case '\\'':\n                if(unquote) {\n                    if(++i==value.length()) {\n                        return regex;\n                    }\n                    c= value.charAt(i);\n                }\n                break;\n            case '\\\\':\n                if(++i==value.length()) {\n                    break;\n                }                \n                /*\n                 * If we have found \\E, we replace it with \\E\\\\E\\Q, i.e. we stop the quoting,\n                 * quote the \\ in \\E, then restart the quoting.\n                 * \n                 * Otherwise we just output the two characters.\n                 * In each case the initial \\ needs to be output and the final char is done at the end\n                 */\n                regex.append(c); // we always want the original \\\n                c = value.charAt(i); // Is it followed by E ?\n                if (c == 'E') { // \\E detected\n                  regex.append(\"E\\\\\\\\E\\\\\"); // see comment above\n                  c = 'Q'; // appended below\n                }\n                break;\n            }\n            regex.append(c);\n        }\n        regex.append(\"\\\\E\");\n        return regex;\n    }\n",
        "begin_line": 299,
        "end_line": 335,
        "comment": "\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @param unquote If true, replace two success quotes ('') with single quote (')\n     * @return The <code>StringBuilder</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.getDisplayNames#345",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.getDisplayNames(int, java.util.Calendar, java.util.Locale)",
        "snippet": "    private static Map<String, Integer> getDisplayNames(int field, Calendar definingCalendar, Locale locale) {\n        return definingCalendar.getDisplayNames(field, Calendar.ALL_STYLES, locale);\n    }\n",
        "begin_line": 345,
        "end_line": 347,
        "comment": "\n     * Get the short and long values displayed for a field\n     * @param field The field of interest\n     * @param definingCalendar The calendar to obtain the short and long values\n     * @param locale The locale of display names\n     * @return A Map of the field key / value pairs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.TextField#667",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TextField.TextField(int, java.lang.String[])",
        "snippet": "        TextField(int field, String[] values) {\n            mField = field;\n            mValues = values;\n        }\n",
        "begin_line": 667,
        "end_line": 670,
        "comment": "\n         * Constructs an instance of {@code TextField}\n         * with the specified field and values.\n         *\n         * @param field the field\n         * @param values the field values\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1857
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.estimateLength#675",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TextField.estimateLength()",
        "snippet": "        @Override\n        public int estimateLength() {\n            int max = 0;\n            for (int i=mValues.length; --i >= 0; ) {\n                int len = mValues[i].length();\n                if (len > max) {\n                    max = len;\n                }\n            }\n            return max;\n        }\n",
        "begin_line": 675,
        "end_line": 685,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "org.apache.commons.lang3.time.FastDatePrinter.Rule": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.1857
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.getCache#475",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.getCache(int)",
        "snippet": "    private static ConcurrentMap<Locale, Strategy> getCache(int field) {\n    \tsynchronized(caches) {\n    \t\tif(caches[field]==null) {\n    \t\t\tcaches[field]= new ConcurrentHashMap<Locale,Strategy>(3);\n    \t\t}\n    \t\treturn caches[field];\n    \t}\n    }\n",
        "begin_line": 475,
        "end_line": 482,
        "comment": "\n     * Get a cache of Strategies for a particular field\n     * @param field The Calendar field\n     * @return a cache of Locale to Strategy\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.getLocaleSpecificStrategy#491",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.getLocaleSpecificStrategy(int, java.util.Calendar)",
        "snippet": "    private Strategy getLocaleSpecificStrategy(int field, Calendar definingCalendar) {\n    \tConcurrentMap<Locale,Strategy> cache = getCache(field);\n    \tStrategy strategy= cache.get(Integer.valueOf(field));\n        if(strategy==null) {\n        \tstrategy= field==Calendar.ZONE_OFFSET\n        \t\t\t? new TimeZoneStrategy(locale)\n        \t\t\t: new TextStrategy(field, definingCalendar, locale);\n            Strategy inCache= cache.putIfAbsent(locale, strategy);\n            if(inCache!=null) {\n                return inCache;\n            }\n        }\n        return strategy;\n    }\n",
        "begin_line": 491,
        "end_line": 504,
        "comment": "\n     * Construct a Strategy that parses a Text field\n     * @param locale The Locale of the TimeZone to parse\n     * @param field The Calendar field\n     * @param definingCalendar The calendar to obtain the short and long values\n     * @return a TextStrategy for the field and Locale\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.isNumber#523",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy.isNumber()",
        "snippet": "        @Override\n        public boolean isNumber() {\n            char c= formatField.charAt(0);\n            if(c=='\\'') {\n                c= formatField.charAt(1);\n            }\n            return Character.isDigit(c);\n        }\n",
        "begin_line": 523,
        "end_line": 530,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.FastDateParser.Strategy": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.DateParser": null
        },
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.init#108",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.init()",
        "snippet": "    private void init() {\n        Calendar definingCalendar = Calendar.getInstance(timeZone, locale);\n\t\tthisYear= definingCalendar.get(Calendar.YEAR);\n\n        StringBuilder regex= new StringBuilder();\n        List<Strategy> collector = new ArrayList<Strategy>();\n\n        Matcher patternMatcher= formatPattern.matcher(pattern);\n        if(!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\n                    \"Illegal pattern character '\" + pattern.charAt(patternMatcher.regionStart()) + \"'\");\n        }\n\n        currentFormatField= patternMatcher.group();\n        Strategy currentStrategy= getStrategy(currentFormatField, definingCalendar);\n        for(;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!patternMatcher.lookingAt()) {\n                nextStrategy = null;\n                break;\n            }\n            String nextFormatField= patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField, definingCalendar);\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n        }\n        if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {\n            throw new IllegalArgumentException(\"Failed to parse \\\"\"+pattern+\"\\\" ; gave up at index \"+patternMatcher.regionStart());\n        }\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField= null;\n        strategies= collector.toArray(new Strategy[collector.size()]);\n        parsePattern= Pattern.compile(regex.toString());\n    }\n",
        "begin_line": 108,
        "end_line": 146,
        "comment": "\n     * Initialize derived fields from defining fields.\n     * This is called from constructor and from readObject (de-serialization)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.TwoDigitNumberField#863",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TwoDigitNumberField.TwoDigitNumberField(int)",
        "snippet": "        TwoDigitNumberField(int field) {\n            mField = field;\n        }\n",
        "begin_line": 863,
        "end_line": 865,
        "comment": "\n         * Constructs an instance of {@code TwoDigitNumberField} with the specified field.\n         *\n         * @param field the field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.estimateLength#870",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.TwoDigitNumberField.estimateLength()",
        "snippet": "        @Override\n        public int estimateLength() {\n            return 2;\n        }\n",
        "begin_line": 870,
        "end_line": 873,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.FastDatePrinter.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.CopyQuotedStrategy#516",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy.CopyQuotedStrategy(java.lang.String)",
        "snippet": "        CopyQuotedStrategy(String formatField) {\n            this.formatField= formatField;\n        }\n",
        "begin_line": 516,
        "end_line": 518,
        "comment": "\n         * Construct a Strategy that ensures the formatField has literal text\n         * @param formatField The literal text to match\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.addRegex#535",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy.addRegex(org.apache.commons.lang3.time.FastDateParser, java.lang.StringBuilder)",
        "snippet": "        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            escapeRegex(regex, formatField, true);\n            return false;\n        }\n",
        "begin_line": 535,
        "end_line": 539,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.FastDateParser.Strategy": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.DateParser": null
        },
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.addRegex#631",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.NumberStrategy.addRegex(org.apache.commons.lang3.time.FastDateParser, java.lang.StringBuilder)",
        "snippet": "        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            if(parser.isNextNumber()) {\n                regex.append(\"(\\\\p{IsNd}{\").append(parser.getFieldWidth()).append(\"}+)\");\n            }\n            else {\n                regex.append(\"(\\\\p{IsNd}++)\");\n            }\n            return true;\n        }\n",
        "begin_line": 631,
        "end_line": 640,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.FastDateParser.Strategy": null,
            "java.io.Serializable": null,
            "org.apache.commons.lang3.time.DateParser": null
        },
        "susp": {
            "ochiai_susp": 0.1499
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.FastDateParser#97",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.FastDateParser(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDateParser(String pattern, TimeZone timeZone, Locale locale) {\n        this.pattern = pattern;\n        this.timeZone = timeZone;\n        this.locale = locale;\n        init();\n    }\n",
        "begin_line": 97,
        "end_line": 102,
        "comment": "\n     * <p>Constructs a new FastDateParser.</p>\n     *\n     * @param pattern non-null {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone non-null time zone to use\n     * @param locale non-null locale\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1499
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.isNextNumber#366",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.isNextNumber()",
        "snippet": "    boolean isNextNumber() {\n        return nextStrategy!=null && nextStrategy.isNumber();\n    }\n",
        "begin_line": 366,
        "end_line": 368,
        "comment": "\n     * Is the next field a number?\n     * @return true, if next field will be a number\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1499
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.createInstance#89",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.Anonymous-8374acab-e83a-4f2b-8402-2a476c511507.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "        @Override\n        protected FastDateFormat createInstance(String pattern, TimeZone timeZone, Locale locale) {\n            return new FastDateFormat(pattern, timeZone, locale);\n        }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1499
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.FastDateFormat#368",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang3.time.FastDateFormat",
        "signature": "org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n        printer= new FastDatePrinter(pattern, timeZone, locale);\n        parser= new FastDateParser(pattern, timeZone, locale);\n    }\n",
        "begin_line": 368,
        "end_line": 371,
        "comment": "\n     * <p>Constructs a new FastDateFormat.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n     * @param timeZone  non-null time zone to use\n     * @param locale  non-null locale to use\n     * @throws NullPointerException if pattern, timeZone, or locale is null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1499
        },
        "num_failing_tests": 2
    },
    {
        "name": "FormatCache.MultipartKey#179",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
        "class_name": "org.apache.commons.lang3.time.FormatCache",
        "signature": "org.apache.commons.lang3.time.FormatCache.MultipartKey.MultipartKey(java.lang.Object...)",
        "snippet": "        public MultipartKey(Object... keys) {\n            this.keys = keys;\n        }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "\n         * Constructs an instance of <code>MultipartKey</code> to hold the specified objects.\n         * @param keys the set of objects that make up the key.  Each key may be null.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1491
        },
        "num_failing_tests": 2
    },
    {
        "name": "FormatCache.hashCode#197",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
        "class_name": "org.apache.commons.lang3.time.FormatCache",
        "signature": "org.apache.commons.lang3.time.FormatCache.MultipartKey.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            if(hashCode==0) {\n                int rc= 0;\n                for(Object key : keys) {\n                    if(key!=null) {\n                        rc= rc*7 + key.hashCode();\n                    }\n                }\n                hashCode= rc;\n            }\n            return hashCode;\n        }\n",
        "begin_line": 197,
        "end_line": 209,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1491
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateParser.NumberStrategy#616",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "class_name": "org.apache.commons.lang3.time.FastDateParser",
        "signature": "org.apache.commons.lang3.time.FastDateParser.NumberStrategy.NumberStrategy(int)",
        "snippet": "        NumberStrategy(int field) {\n             this.field= field;\n        }\n",
        "begin_line": 616,
        "end_line": 618,
        "comment": "\n         * Construct a Strategy that parses a Number field\n         * @param field The Calendar field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1491
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.parseToken#297",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.parseToken(java.lang.String, int[])",
        "snippet": "    protected String parseToken(String pattern, int[] indexRef) {\n        StringBuilder buf = new StringBuilder();\n\n        int i = indexRef[0];\n        int length = pattern.length();\n\n        char c = pattern.charAt(i);\n        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n            // Scan a run of the same character, which indicates a time\n            // pattern.\n            buf.append(c);\n\n            while (i + 1 < length) {\n                char peek = pattern.charAt(i + 1);\n                if (peek == c) {\n                    buf.append(c);\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } else {\n            // This will identify token as text.\n            buf.append('\\'');\n\n            boolean inLiteral = false;\n\n            for (; i < length; i++) {\n                c = pattern.charAt(i);\n\n                if (c == '\\'') {\n                    if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n                        // '' is treated as escaped '\n                        i++;\n                        buf.append(c);\n                    } else {\n                        inLiteral = !inLiteral;\n                    }\n                } else if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {\n                    i--;\n                    break;\n                } else {\n                    buf.append(c);\n                }\n            }\n        }\n\n        indexRef[0] = i;\n        return buf.toString();\n    }\n",
        "begin_line": 297,
        "end_line": 347,
        "comment": "\n     * <p>Performs the parsing of tokens.</p>\n     *\n     * @param pattern  the pattern\n     * @param indexRef  index references\n     * @return parsed token\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1451
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.CharacterLiteral#599",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.CharacterLiteral.CharacterLiteral(char)",
        "snippet": "        CharacterLiteral(char value) {\n            mValue = value;\n        }\n",
        "begin_line": 599,
        "end_line": 601,
        "comment": "\n         * Constructs a new instance of {@code CharacterLiteral}\n         * to hold the specified value.\n         *\n         * @param value the character literal\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.estimateLength#606",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.CharacterLiteral.estimateLength()",
        "snippet": "        @Override\n        public int estimateLength() {\n            return 1;\n        }\n",
        "begin_line": 606,
        "end_line": 609,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang3.time.DatePrinter": null,
            "org.apache.commons.lang3.time.FastDatePrinter.Rule": null,
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.FastDatePrinter#136",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.FastDatePrinter(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {\n        mPattern = pattern;\n        mTimeZone = timeZone;\n        mLocale = locale;\n\n        init();\n    }\n",
        "begin_line": 136,
        "end_line": 142,
        "comment": "\n     * <p>Constructs a new FastDatePrinter.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n     * @param timeZone  non-null time zone to use\n     * @param locale  non-null locale to use\n     * @throws NullPointerException if pattern, timeZone, or locale is null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.14
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDatePrinter.init#147",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "class_name": "org.apache.commons.lang3.time.FastDatePrinter",
        "signature": "org.apache.commons.lang3.time.FastDatePrinter.init()",
        "snippet": "    private void init() {\n        List<Rule> rulesList = parsePattern();\n        mRules = rulesList.toArray(new Rule[rulesList.size()]);\n\n        int len = 0;\n        for (int i=mRules.length; --i >= 0; ) {\n            len += mRules[i].estimateLength();\n        }\n\n        mMaxLengthEstimate = len;\n    }\n",
        "begin_line": 147,
        "end_line": 157,
        "comment": "\n     * <p>Initializes the instance for first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.14
        },
        "num_failing_tests": 2
    }
]