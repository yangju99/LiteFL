[
    {
        "name": "StringUtils.join#3255",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "class_name": "org.apache.commons.lang3.StringUtils",
        "signature": "org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char)",
        "snippet": "    public static String join(Object[] array, char separator) {\n        if (array == null) {\n            return null;\n        }\n\n        return join(array, separator, 0, array.length);\n    }\n",
        "begin_line": 3255,
        "end_line": 3261,
        "comment": "\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringUtils.join#3289",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "class_name": "org.apache.commons.lang3.StringUtils",
        "signature": "org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char, int, int)",
        "snippet": "    public static String join(Object[] array, char separator, int startIndex, int endIndex) {\n        if (array == null) {\n            return null;\n        }\n        int noOfItems = (endIndex - startIndex);\n        if (noOfItems <= 0) {\n            return EMPTY;\n        }\n        \n        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n\n        for (int i = startIndex; i < endIndex; i++) {\n            if (i > startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] != null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }\n",
        "begin_line": 3289,
        "end_line": 3309,
        "comment": "\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringUtils.join#3229",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "class_name": "org.apache.commons.lang3.StringUtils",
        "signature": "org.apache.commons.lang3.StringUtils.join(T...)",
        "snippet": "    public static <T> String join(T... elements) {\n        return join(elements, null);\n    }\n",
        "begin_line": 3229,
        "end_line": 3231,
        "comment": "\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No separator is added to the joined String.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null)            = null\n     * StringUtils.join([])              = \"\"\n     * StringUtils.join([null])          = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"]) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"]) = \"a\"\n     * </pre>\n     *\n     * @param <T> the specific type of values to join together\n     * @param elements  the values to join together, may be null\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     * @since 3.0 Changed signature to use varargs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringUtils.join#3334",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "class_name": "org.apache.commons.lang3.StringUtils",
        "signature": "org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String)",
        "snippet": "    public static String join(Object[] array, String separator) {\n        if (array == null) {\n            return null;\n        }\n        return join(array, separator, 0, array.length);\n    }\n",
        "begin_line": 3334,
        "end_line": 3339,
        "comment": "\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, {@code null} if null array input\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringUtils.join#3368",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "class_name": "org.apache.commons.lang3.StringUtils",
        "signature": "org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String, int, int)",
        "snippet": "    public static String join(Object[] array, String separator, int startIndex, int endIndex) {\n        if (array == null) {\n            return null;\n        }\n        if (separator == null) {\n            separator = EMPTY;\n        }\n\n        // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator))\n        //           (Assuming that all Strings are roughly equally long)\n        int noOfItems = (endIndex - startIndex);\n        if (noOfItems <= 0) {\n            return EMPTY;\n        }\n\n        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n\n        for (int i = startIndex; i < endIndex; i++) {\n            if (i > startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] != null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }\n",
        "begin_line": 3368,
        "end_line": 3394,
        "comment": "\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, {@code null} if null array input\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    }
]