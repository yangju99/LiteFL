[
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.Anonymous-acc37658-f40d-4610-b550-6e30a4c88f7c.toString()",
        "snippet": "    \t\t@Override\n    \t\tpublic String toString() {\n    \t\t\treturn null;\n    \t\t}\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 8)-(line 74,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.StringUtilsTest(java.lang.String)",
        "snippet": "    public StringUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new StringUtils());\n        Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers()));\n    }\n",
        "begin_line": 99,
        "end_line": 106,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 41)",
            "(line 101,col 9)-(line 101,col 76)",
            "(line 102,col 9)-(line 102,col 37)",
            "(line 103,col 9)-(line 103,col 70)",
            "(line 104,col 9)-(line 104,col 80)",
            "(line 105,col 9)-(line 105,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCaseFunctions()",
        "snippet": "    public void testCaseFunctions() {\n        assertEquals(null, StringUtils.upperCase(null));\n        assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH));\n        assertEquals(null, StringUtils.lowerCase(null));\n        assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH));\n        assertEquals(null, StringUtils.capitalize(null));\n        assertEquals(null, StringUtils.uncapitalize(null));\n\n        assertEquals(\"capitalize(empty-string) failed\",\n                     \"\", StringUtils.capitalize(\"\") );\n        assertEquals(\"capitalize(single-char-string) failed\",\n                \"X\", StringUtils.capitalize(\"x\") );\n        \n        assertEquals(\"uncapitalize(String) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n        assertEquals(\"uncapitalize(empty-string) failed\",\n                     \"\", StringUtils.uncapitalize(\"\") );\n        assertEquals(\"uncapitalize(single-char-string) failed\",\n                \"x\", StringUtils.uncapitalize(\"X\") );\n                     \n        // reflection type of tests: Sentences.\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                     SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );\n\n        // reflection type of tests: One word.\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                     FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );\n\n        assertEquals(\"upperCase(String) failed\",\n                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\") );\n        assertEquals(\"upperCase(empty-string) failed\",\n                     \"\", StringUtils.upperCase(\"\") );\n        assertEquals(\"lowerCase(String) failed\",\n                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\") );\n        assertEquals(\"lowerCase(empty-string) failed\",\n                     \"\", StringUtils.lowerCase(\"\") );\n\n        assertEquals(\"upperCase(String, Locale) failed\",\n                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\", Locale.ENGLISH) );\n        assertEquals(\"upperCase(empty-string, Locale) failed\",\n                     \"\", StringUtils.upperCase(\"\", Locale.ENGLISH) );\n        assertEquals(\"lowerCase(String, Locale) failed\",\n                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\", Locale.ENGLISH) );\n        assertEquals(\"lowerCase(empty-string, Locale) failed\",\n                     \"\", StringUtils.lowerCase(\"\", Locale.ENGLISH) );\n    }\n",
        "begin_line": 109,
        "end_line": 158,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 56)",
            "(line 111,col 9)-(line 111,col 72)",
            "(line 112,col 9)-(line 112,col 56)",
            "(line 113,col 9)-(line 113,col 72)",
            "(line 114,col 9)-(line 114,col 57)",
            "(line 115,col 9)-(line 115,col 59)",
            "(line 117,col 9)-(line 118,col 54)",
            "(line 119,col 9)-(line 120,col 51)",
            "(line 122,col 9)-(line 123,col 68)",
            "(line 124,col 9)-(line 125,col 56)",
            "(line 126,col 9)-(line 127,col 53)",
            "(line 130,col 9)-(line 131,col 104)",
            "(line 132,col 9)-(line 133,col 100)",
            "(line 136,col 9)-(line 137,col 94)",
            "(line 138,col 9)-(line 139,col 90)",
            "(line 141,col 9)-(line 142,col 81)",
            "(line 143,col 9)-(line 144,col 53)",
            "(line 145,col 9)-(line 146,col 81)",
            "(line 147,col 9)-(line 148,col 53)",
            "(line 150,col 9)-(line 151,col 97)",
            "(line 152,col 9)-(line 153,col 69)",
            "(line 154,col 9)-(line 155,col 97)",
            "(line 156,col 9)-(line 157,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSwapCase_String()",
        "snippet": "    public void testSwapCase_String() {\n        assertEquals(null, StringUtils.swapCase(null));\n        assertEquals(\"\", StringUtils.swapCase(\"\"));\n        assertEquals(\"  \", StringUtils.swapCase(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n        assertEquals(\"I AM HERE 123\", StringUtils.swapCase(\"i am here 123\") );\n        assertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\") );\n        assertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\") );\n        assertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\") );\n        \n        String test = \"This String contains a TitleCase character: \\u01C8\";\n        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n        assertEquals(expect, WordUtils.swapCase(test));\n    }\n",
        "begin_line": 160,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 55)",
            "(line 162,col 9)-(line 162,col 51)",
            "(line 163,col 9)-(line 163,col 55)",
            "(line 165,col 9)-(line 165,col 52)",
            "(line 166,col 9)-(line 166,col 52)",
            "(line 167,col 9)-(line 167,col 78)",
            "(line 168,col 9)-(line 168,col 78)",
            "(line 169,col 9)-(line 169,col 78)",
            "(line 170,col 9)-(line 170,col 78)",
            "(line 172,col 9)-(line 172,col 75)",
            "(line 173,col 9)-(line 173,col 77)",
            "(line 174,col 9)-(line 174,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_Objects()",
        "snippet": "    public void testJoin_Objects() {\n        assertEquals(\"abc\", StringUtils.join(\"a\", \"b\", \"c\"));\n        assertEquals(\"a\",   StringUtils.join(null, \"\", \"a\"));\n        assertEquals(null,  StringUtils.join((Object[])null));\n    }\n",
        "begin_line": 178,
        "end_line": 182,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 61)",
            "(line 180,col 9)-(line 180,col 61)",
            "(line 181,col 9)-(line 181,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray()",
        "snippet": "    public void testJoin_Objectarray() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast\n        // test additional varargs calls\n        assertEquals(\"\", StringUtils.join()); // empty array\n        assertEquals(\"\", StringUtils.join((Object) null)); // => new Object[]{null}\n\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));\n        assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n        assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));\n        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\n        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\n    }\n",
        "begin_line": 184,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 62)",
            "(line 188,col 9)-(line 188,col 45)",
            "(line 189,col 9)-(line 189,col 58)",
            "(line 191,col 9)-(line 191,col 61)",
            "(line 192,col 9)-(line 192,col 60)",
            "(line 193,col 9)-(line 193,col 68)",
            "(line 194,col 9)-(line 194,col 76)",
            "(line 195,col 9)-(line 195,col 74)",
            "(line 196,col 9)-(line 196,col 64)",
            "(line 197,col 9)-(line 197,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayChar()",
        "snippet": "    public void testJoin_ArrayChar() {\n        assertEquals(null, StringUtils.join((Object[]) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n    }\n",
        "begin_line": 200,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 67)",
            "(line 202,col 9)-(line 202,col 83)",
            "(line 203,col 9)-(line 203,col 77)",
            "(line 204,col 9)-(line 204,col 82)",
            "(line 205,col 9)-(line 205,col 81)",
            "(line 207,col 9)-(line 207,col 97)",
            "(line 208,col 9)-(line 208,col 74)",
            "(line 209,col 9)-(line 209,col 78)",
            "(line 210,col 9)-(line 210,col 76)",
            "(line 211,col 9)-(line 211,col 72)",
            "(line 212,col 9)-(line 212,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayString()",
        "snippet": "    public void testJoin_ArrayString() {\n        assertEquals(null, StringUtils.join((Object[]) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, \"\"));\n        \n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST, null));\n        \n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, null));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, \"\"));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));\n        assertEquals(\",,foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));\n        assertEquals(\"foo,2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, \"/\", 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"\", StringUtils.join(MIXED_ARRAY_LIST, \"\", 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 2, 1));\n    }\n",
        "begin_line": 215,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 68)",
            "(line 217,col 9)-(line 217,col 74)",
            "(line 218,col 9)-(line 218,col 72)",
            "(line 220,col 9)-(line 220,col 66)",
            "(line 222,col 9)-(line 222,col 67)",
            "(line 223,col 9)-(line 223,col 65)",
            "(line 224,col 9)-(line 224,col 72)",
            "(line 226,col 9)-(line 226,col 73)",
            "(line 227,col 9)-(line 227,col 77)",
            "(line 228,col 9)-(line 228,col 76)",
            "(line 230,col 9)-(line 230,col 97)",
            "(line 231,col 9)-(line 231,col 95)",
            "(line 232,col 9)-(line 232,col 74)",
            "(line 233,col 9)-(line 233,col 76)",
            "(line 234,col 9)-(line 234,col 72)",
            "(line 235,col 9)-(line 235,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorChar()",
        "snippet": "    public void testJoin_IteratorChar() {\n        assertEquals(null, StringUtils.join((Iterator<?>) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), 'x'));\n    }\n",
        "begin_line": 238,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 70)",
            "(line 240,col 9)-(line 240,col 109)",
            "(line 241,col 9)-(line 241,col 102)",
            "(line 242,col 9)-(line 242,col 103)",
            "(line 243,col 9)-(line 243,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorString()",
        "snippet": "    public void testJoin_IteratorString() {\n        assertEquals(null, StringUtils.join((Iterator<?>) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\n        \n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));\n        \n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n    }\n",
        "begin_line": 246,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 71)",
            "(line 248,col 9)-(line 248,col 100)",
            "(line 249,col 9)-(line 249,col 98)",
            "(line 250,col 9)-(line 250,col 92)",
            "(line 251,col 9)-(line 251,col 93)",
            "(line 253,col 9)-(line 253,col 92)",
            "(line 255,col 9)-(line 255,col 93)",
            "(line 256,col 9)-(line 256,col 91)",
            "(line 257,col 9)-(line 257,col 98)",
            "(line 259,col 9)-(line 259,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableChar()",
        "snippet": "    public void testJoin_IterableChar() {\n        assertEquals(null, StringUtils.join((Iterable<?>) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\n    }\n",
        "begin_line": 262,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 70)",
            "(line 264,col 9)-(line 264,col 98)",
            "(line 265,col 9)-(line 265,col 91)",
            "(line 266,col 9)-(line 266,col 92)",
            "(line 267,col 9)-(line 267,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableString()",
        "snippet": "    public void testJoin_IterableString() {\n        assertEquals(null, StringUtils.join((Iterable<?>) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n    }\n",
        "begin_line": 270,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 71)",
            "(line 272,col 9)-(line 272,col 89)",
            "(line 273,col 9)-(line 273,col 87)",
            "(line 274,col 9)-(line 274,col 81)",
            "(line 275,col 9)-(line 275,col 82)",
            "(line 277,col 9)-(line 277,col 81)",
            "(line 279,col 9)-(line 279,col 82)",
            "(line 280,col 9)-(line 280,col 80)",
            "(line 281,col 9)-(line 281,col 87)",
            "(line 283,col 9)-(line 283,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_String()",
        "snippet": "    public void testSplit_String() {\n        assertEquals(null, StringUtils.split(null));\n        assertEquals(0, StringUtils.split(\"\").length);\n        \n        String str = \"a b  .c\";\n        String[] res = StringUtils.split(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n        \n        str = \" a \";\n        res = StringUtils.split(str);\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n        \n        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res = StringUtils.split(str);\n        assertEquals(2, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);                       \n    }\n",
        "begin_line": 286,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 52)",
            "(line 288,col 9)-(line 288,col 54)",
            "(line 290,col 9)-(line 290,col 31)",
            "(line 291,col 9)-(line 291,col 46)",
            "(line 292,col 9)-(line 292,col 36)",
            "(line 293,col 9)-(line 293,col 34)",
            "(line 294,col 9)-(line 294,col 34)",
            "(line 295,col 9)-(line 295,col 35)",
            "(line 297,col 9)-(line 297,col 20)",
            "(line 298,col 9)-(line 298,col 37)",
            "(line 299,col 9)-(line 299,col 36)",
            "(line 300,col 9)-(line 300,col 34)",
            "(line 302,col 9)-(line 302,col 60)",
            "(line 303,col 9)-(line 303,col 37)",
            "(line 304,col 9)-(line 304,col 36)",
            "(line 305,col 9)-(line 305,col 34)",
            "(line 306,col 9)-(line 306,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringChar()",
        "snippet": "    public void testSplit_StringChar() {\n        assertEquals(null, StringUtils.split(null, '.'));\n        assertEquals(0, StringUtils.split(\"\", '.').length);\n\n        String str = \"a.b.. c\";\n        String[] res = StringUtils.split(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n            \n        str = \".a.\";\n        res = StringUtils.split(str, '.');\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n        \n        str = \"a b c\";\n        res = StringUtils.split(str,' ');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n    }\n",
        "begin_line": 309,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 57)",
            "(line 311,col 9)-(line 311,col 59)",
            "(line 313,col 9)-(line 313,col 31)",
            "(line 314,col 9)-(line 314,col 51)",
            "(line 315,col 9)-(line 315,col 36)",
            "(line 316,col 9)-(line 316,col 34)",
            "(line 317,col 9)-(line 317,col 34)",
            "(line 318,col 9)-(line 318,col 35)",
            "(line 320,col 9)-(line 320,col 20)",
            "(line 321,col 9)-(line 321,col 42)",
            "(line 322,col 9)-(line 322,col 36)",
            "(line 323,col 9)-(line 323,col 34)",
            "(line 325,col 9)-(line 325,col 22)",
            "(line 326,col 9)-(line 326,col 41)",
            "(line 327,col 9)-(line 327,col 36)",
            "(line 328,col 9)-(line 328,col 34)",
            "(line 329,col 9)-(line 329,col 34)",
            "(line 330,col 9)-(line 330,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt()",
        "snippet": "    public void testSplit_StringString_StringStringInt() {\n        assertEquals(null, StringUtils.split(null, \".\"));\n        assertEquals(null, StringUtils.split(null, \".\", 3));\n        \n        assertEquals(0, StringUtils.split(\"\", \".\").length);\n        assertEquals(0, StringUtils.split(\"\", \".\", 3).length);\n        \n        innerTestSplit('.', \".\", ' ');\n        innerTestSplit('.', \".\", ',');\n        innerTestSplit('.', \".,\", 'x');\n        for (int i = 0; i < WHITESPACE.length(); i++) {\n            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n        \n        String[] results;\n        String[] expectedResults = {\"ab\", \"de fg\"};\n        results = StringUtils.split(\"ab   de fg\", null, 2);\n        assertEquals(expectedResults.length, results.length);\n        for (int i = 0; i < expectedResults.length; i++) {\n            assertEquals(expectedResults[i], results[i]);\n        }\n        \n        String[] expectedResults2 = {\"ab\", \"cd:ef\"};\n        results = StringUtils.split(\"ab:cd:ef\",\":\", 2);\n        assertEquals(expectedResults2.length, results.length);\n        for (int i = 0; i < expectedResults2.length; i++) {\n            assertEquals(expectedResults2[i], results[i]);\n        }\n    }\n",
        "begin_line": 333,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 57)",
            "(line 335,col 9)-(line 335,col 60)",
            "(line 337,col 9)-(line 337,col 59)",
            "(line 338,col 9)-(line 338,col 62)",
            "(line 340,col 9)-(line 340,col 38)",
            "(line 341,col 9)-(line 341,col 38)",
            "(line 342,col 9)-(line 342,col 39)",
            "(line 343,col 9)-(line 348,col 9)",
            "(line 350,col 9)-(line 350,col 25)",
            "(line 351,col 9)-(line 351,col 51)",
            "(line 352,col 9)-(line 352,col 59)",
            "(line 353,col 9)-(line 353,col 61)",
            "(line 354,col 9)-(line 356,col 9)",
            "(line 358,col 9)-(line 358,col 52)",
            "(line 359,col 9)-(line 359,col 55)",
            "(line 360,col 9)-(line 360,col 62)",
            "(line 361,col 9)-(line 363,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplit(char, java.lang.String, char)",
        "snippet": "    private void innerTestSplit(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.split(str, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.split(str2, sepStr);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, \"a\", res[0]);\n\n        res = StringUtils.split(str, sepStr, -1);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 0);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.split(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n",
        "begin_line": 366,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 367,col 9)-(line 368,col 91)",
            "(line 370,col 9)-(line 370,col 89)",
            "(line 371,col 9)-(line 371,col 21)",
            "(line 373,col 9)-(line 373,col 45)",
            "(line 374,col 9)-(line 374,col 41)",
            "(line 375,col 9)-(line 375,col 39)",
            "(line 376,col 9)-(line 376,col 39)",
            "(line 377,col 9)-(line 377,col 49)",
            "(line 379,col 9)-(line 379,col 56)",
            "(line 380,col 9)-(line 380,col 46)",
            "(line 381,col 9)-(line 381,col 41)",
            "(line 382,col 9)-(line 382,col 39)",
            "(line 384,col 9)-(line 384,col 49)",
            "(line 385,col 9)-(line 385,col 41)",
            "(line 386,col 9)-(line 386,col 39)",
            "(line 387,col 9)-(line 387,col 39)",
            "(line 388,col 9)-(line 388,col 49)",
            "(line 390,col 9)-(line 390,col 48)",
            "(line 391,col 9)-(line 391,col 41)",
            "(line 392,col 9)-(line 392,col 39)",
            "(line 393,col 9)-(line 393,col 39)",
            "(line 394,col 9)-(line 394,col 49)",
            "(line 396,col 9)-(line 396,col 48)",
            "(line 397,col 9)-(line 397,col 41)",
            "(line 398,col 9)-(line 398,col 39)",
            "(line 400,col 9)-(line 400,col 48)",
            "(line 401,col 9)-(line 401,col 41)",
            "(line 402,col 9)-(line 402,col 39)",
            "(line 403,col 9)-(line 403,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean()",
        "snippet": "    public void testSplitByWholeString_StringStringBoolean() {\n        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\" ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\" ).length ) ;\n\n        String stringToSplitOnNulls = \"ab   de fg\" ;\n        String[] splitOnNullExpectedResults = { \"ab\", \"de\", \"fg\" } ;\n\n        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null ) ;\n        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n        }\n\n        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiously\" ;\n\n        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\" ) ;\n        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n        }\n\n        String[] splitWithMultipleSeparatorExpectedResults = {\"ab\", \"cd\", \"ef\"};\n        String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator(\"ab:cd::ef\", \":\");\n        assertEquals( splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length );\n        for( int i = 0; i < splitWithMultipleSeparatorExpectedResults.length ; i++ ) {\n            assertEquals( splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i] ) ;\n        }\n    }\n",
        "begin_line": 406,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 407,col 9)-(line 407,col 78)",
            "(line 409,col 9)-(line 409,col 80)",
            "(line 411,col 9)-(line 411,col 52)",
            "(line 412,col 9)-(line 412,col 68)",
            "(line 414,col 9)-(line 414,col 103)",
            "(line 415,col 9)-(line 415,col 86)",
            "(line 416,col 9)-(line 418,col 9)",
            "(line 420,col 9)-(line 420,col 86)",
            "(line 422,col 9)-(line 422,col 84)",
            "(line 423,col 9)-(line 423,col 123)",
            "(line 424,col 9)-(line 424,col 90)",
            "(line 425,col 9)-(line 427,col 9)",
            "(line 429,col 9)-(line 429,col 80)",
            "(line 430,col 9)-(line 430,col 98)",
            "(line 431,col 9)-(line 431,col 108)",
            "(line 432,col 9)-(line 434,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt()",
        "snippet": "    public void testSplitByWholeString_StringStringBooleanInt() {\n        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\", 3 ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\", 3 ).length ) ;\n\n        String stringToSplitOnNulls = \"ab   de fg\" ;\n        String[] splitOnNullExpectedResults = { \"ab\", \"de fg\" } ;\n        //String[] splitOnNullExpectedResults = { \"ab\", \"de\" } ;\n\n        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ;\n        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n        }\n\n        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiouslyaeiouyabstemiously\" ;\n\n        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiouslyaeiouyabstemiously\" } ;\n        //String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\", 2 ) ;\n        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i++ ) {\n            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n        }\n    }\n",
        "begin_line": 437,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 81)",
            "(line 440,col 9)-(line 440,col 83)",
            "(line 442,col 9)-(line 442,col 52)",
            "(line 443,col 9)-(line 443,col 65)",
            "(line 446,col 9)-(line 446,col 106)",
            "(line 447,col 9)-(line 447,col 86)",
            "(line 448,col 9)-(line 450,col 9)",
            "(line 452,col 9)-(line 452,col 104)",
            "(line 454,col 9)-(line 454,col 102)",
            "(line 456,col 9)-(line 456,col 126)",
            "(line 457,col 9)-(line 457,col 90)",
            "(line 458,col 9)-(line 460,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeSeparatorPreserveAllTokens_StringStringInt()",
        "snippet": "    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {\n        assertEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, \".\", -1 ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( \"\", \".\", -1 ).length ) ;\n\n        // test whitespace\n        String input = \"ab   de fg\" ;\n        String[] expected = new String[] { \"ab\", \"\", \"\", \"de\", \"fg\" } ;\n\n        String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter singlechar\n        input = \"1::2:::3::::4\";\n        expected = new String[] { \"1\", \"\", \"2\", \"\", \"\", \"3\", \"\", \"\", \"\", \"4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter multichar\n        input = \"1::2:::3::::4\";\n        expected = new String[] { \"1\", \"2\", \":3\", \"\", \"4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \"::\", -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter char with max\n        input = \"1::2::3:4\";\n        expected = new String[] { \"1\", \"\", \"2\", \":3:4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", 4 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n    }\n",
        "begin_line": 463,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 99)",
            "(line 466,col 9)-(line 466,col 101)",
            "(line 469,col 9)-(line 469,col 37)",
            "(line 470,col 9)-(line 470,col 71)",
            "(line 472,col 9)-(line 472,col 97)",
            "(line 473,col 9)-(line 473,col 56)",
            "(line 474,col 9)-(line 476,col 9)",
            "(line 479,col 9)-(line 479,col 32)",
            "(line 480,col 9)-(line 480,col 79)",
            "(line 482,col 9)-(line 482,col 87)",
            "(line 483,col 9)-(line 483,col 56)",
            "(line 484,col 9)-(line 486,col 9)",
            "(line 489,col 9)-(line 489,col 32)",
            "(line 490,col 9)-(line 490,col 60)",
            "(line 492,col 9)-(line 492,col 88)",
            "(line 493,col 9)-(line 493,col 56)",
            "(line 494,col 9)-(line 496,col 9)",
            "(line 499,col 9)-(line 499,col 28)",
            "(line 500,col 9)-(line 500,col 57)",
            "(line 502,col 9)-(line 502,col 86)",
            "(line 503,col 9)-(line 503,col 56)",
            "(line 504,col 9)-(line 506,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_String()",
        "snippet": "    public void testSplitPreserveAllTokens_String() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\n        \n        String str = \"abc def\";\n        String[] res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(2, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"def\", res[1]);\n        \n        str = \"abc  def\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"def\", res[2]);\n        \n        str = \" abc \";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"abc\", res[1]);\n        assertEquals(\"\", res[2]);\n        \n        str = \"a b .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n        \n        str = \" a b .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\".c\", res[3]);\n        \n        str = \"a  b  .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\".c\", res[4]);\n        \n        str = \" a  \";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str = \" a  b\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"b\", res[3]);\n\n        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(WHITESPACE.length() + 1, res.length);\n        assertEquals(\"a\", res[0]);\n        for(int i = 1; i < WHITESPACE.length()-1; i++)\n        {\n          assertEquals(\"\", res[i]);\n        }\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[WHITESPACE.length()]);                       \n    }\n",
        "begin_line": 509,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 510,col 9)-(line 510,col 69)",
            "(line 511,col 9)-(line 511,col 71)",
            "(line 513,col 9)-(line 513,col 31)",
            "(line 514,col 9)-(line 514,col 63)",
            "(line 515,col 9)-(line 515,col 36)",
            "(line 516,col 9)-(line 516,col 36)",
            "(line 517,col 9)-(line 517,col 36)",
            "(line 519,col 9)-(line 519,col 25)",
            "(line 520,col 9)-(line 520,col 54)",
            "(line 521,col 9)-(line 521,col 36)",
            "(line 522,col 9)-(line 522,col 36)",
            "(line 523,col 9)-(line 523,col 33)",
            "(line 524,col 9)-(line 524,col 36)",
            "(line 526,col 9)-(line 526,col 22)",
            "(line 527,col 9)-(line 527,col 54)",
            "(line 528,col 9)-(line 528,col 36)",
            "(line 529,col 9)-(line 529,col 33)",
            "(line 530,col 9)-(line 530,col 36)",
            "(line 531,col 9)-(line 531,col 33)",
            "(line 533,col 9)-(line 533,col 23)",
            "(line 534,col 9)-(line 534,col 54)",
            "(line 535,col 9)-(line 535,col 36)",
            "(line 536,col 9)-(line 536,col 34)",
            "(line 537,col 9)-(line 537,col 34)",
            "(line 538,col 9)-(line 538,col 35)",
            "(line 540,col 9)-(line 540,col 24)",
            "(line 541,col 9)-(line 541,col 54)",
            "(line 542,col 9)-(line 542,col 36)",
            "(line 543,col 9)-(line 543,col 33)",
            "(line 544,col 9)-(line 544,col 34)",
            "(line 545,col 9)-(line 545,col 34)",
            "(line 546,col 9)-(line 546,col 35)",
            "(line 548,col 9)-(line 548,col 25)",
            "(line 549,col 9)-(line 549,col 54)",
            "(line 550,col 9)-(line 550,col 36)",
            "(line 551,col 9)-(line 551,col 34)",
            "(line 552,col 9)-(line 552,col 33)",
            "(line 553,col 9)-(line 553,col 34)",
            "(line 554,col 9)-(line 554,col 33)",
            "(line 555,col 9)-(line 555,col 35)",
            "(line 557,col 9)-(line 557,col 21)",
            "(line 558,col 9)-(line 558,col 54)",
            "(line 559,col 9)-(line 559,col 36)",
            "(line 560,col 9)-(line 560,col 33)",
            "(line 561,col 9)-(line 561,col 34)",
            "(line 562,col 9)-(line 562,col 33)",
            "(line 563,col 9)-(line 563,col 33)",
            "(line 565,col 9)-(line 565,col 22)",
            "(line 566,col 9)-(line 566,col 54)",
            "(line 567,col 9)-(line 567,col 36)",
            "(line 568,col 9)-(line 568,col 33)",
            "(line 569,col 9)-(line 569,col 34)",
            "(line 570,col 9)-(line 570,col 33)",
            "(line 571,col 9)-(line 571,col 34)",
            "(line 573,col 9)-(line 573,col 60)",
            "(line 574,col 9)-(line 574,col 54)",
            "(line 575,col 9)-(line 575,col 58)",
            "(line 576,col 9)-(line 576,col 34)",
            "(line 577,col 9)-(line 580,col 9)",
            "(line 581,col 9)-(line 581,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringChar()",
        "snippet": "    public void testSplitPreserveAllTokens_StringChar() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", '.').length);\n\n        String str = \"a.b. c\";\n        String[] res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n            \n        str = \"a.b.. c\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\" c\", res[3]);\n\n        str = \".a.\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n       \n        str = \".a..\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n        \n        str = \"..a.\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"\", res[3]);\n        \n        str = \"..a\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        \n        str = \"a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n\n        str = \"a  b  c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"c\", res[4]);\n        \n        str = \" a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"c\", res[3]);\n\n        str = \"  a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"b\", res[3]);\n        assertEquals(\"c\", res[4]);\n\n        str = \"a b c \";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str = \"a b c  \";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"\", res[3]);\n\n        // Match example in javadoc\n        {\n          String[] results;\n          String[] expectedResults = {\"a\", \"\", \"b\", \"c\"};\n          results = StringUtils.splitPreserveAllTokens(\"a..b.c\",'.');\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n    }\n",
        "begin_line": 584,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 74)",
            "(line 586,col 9)-(line 586,col 76)",
            "(line 588,col 9)-(line 588,col 30)",
            "(line 589,col 9)-(line 589,col 68)",
            "(line 590,col 9)-(line 590,col 36)",
            "(line 591,col 9)-(line 591,col 34)",
            "(line 592,col 9)-(line 592,col 34)",
            "(line 593,col 9)-(line 593,col 35)",
            "(line 595,col 9)-(line 595,col 24)",
            "(line 596,col 9)-(line 596,col 59)",
            "(line 597,col 9)-(line 597,col 36)",
            "(line 598,col 9)-(line 598,col 34)",
            "(line 599,col 9)-(line 599,col 34)",
            "(line 600,col 9)-(line 600,col 33)",
            "(line 601,col 9)-(line 601,col 35)",
            "(line 603,col 9)-(line 603,col 20)",
            "(line 604,col 9)-(line 604,col 59)",
            "(line 605,col 9)-(line 605,col 36)",
            "(line 606,col 9)-(line 606,col 33)",
            "(line 607,col 9)-(line 607,col 34)",
            "(line 608,col 9)-(line 608,col 33)",
            "(line 610,col 9)-(line 610,col 21)",
            "(line 611,col 9)-(line 611,col 59)",
            "(line 612,col 9)-(line 612,col 36)",
            "(line 613,col 9)-(line 613,col 33)",
            "(line 614,col 9)-(line 614,col 34)",
            "(line 615,col 9)-(line 615,col 33)",
            "(line 616,col 9)-(line 616,col 33)",
            "(line 618,col 9)-(line 618,col 21)",
            "(line 619,col 9)-(line 619,col 59)",
            "(line 620,col 9)-(line 620,col 36)",
            "(line 621,col 9)-(line 621,col 33)",
            "(line 622,col 9)-(line 622,col 33)",
            "(line 623,col 9)-(line 623,col 34)",
            "(line 624,col 9)-(line 624,col 33)",
            "(line 626,col 9)-(line 626,col 20)",
            "(line 627,col 9)-(line 627,col 59)",
            "(line 628,col 9)-(line 628,col 36)",
            "(line 629,col 9)-(line 629,col 33)",
            "(line 630,col 9)-(line 630,col 33)",
            "(line 631,col 9)-(line 631,col 34)",
            "(line 633,col 9)-(line 633,col 22)",
            "(line 634,col 9)-(line 634,col 58)",
            "(line 635,col 9)-(line 635,col 36)",
            "(line 636,col 9)-(line 636,col 34)",
            "(line 637,col 9)-(line 637,col 34)",
            "(line 638,col 9)-(line 638,col 34)",
            "(line 640,col 9)-(line 640,col 24)",
            "(line 641,col 9)-(line 641,col 58)",
            "(line 642,col 9)-(line 642,col 36)",
            "(line 643,col 9)-(line 643,col 34)",
            "(line 644,col 9)-(line 644,col 33)",
            "(line 645,col 9)-(line 645,col 34)",
            "(line 646,col 9)-(line 646,col 33)",
            "(line 647,col 9)-(line 647,col 34)",
            "(line 649,col 9)-(line 649,col 23)",
            "(line 650,col 9)-(line 650,col 58)",
            "(line 651,col 9)-(line 651,col 36)",
            "(line 652,col 9)-(line 652,col 33)",
            "(line 653,col 9)-(line 653,col 34)",
            "(line 654,col 9)-(line 654,col 34)",
            "(line 655,col 9)-(line 655,col 34)",
            "(line 657,col 9)-(line 657,col 24)",
            "(line 658,col 9)-(line 658,col 58)",
            "(line 659,col 9)-(line 659,col 36)",
            "(line 660,col 9)-(line 660,col 33)",
            "(line 661,col 9)-(line 661,col 33)",
            "(line 662,col 9)-(line 662,col 34)",
            "(line 663,col 9)-(line 663,col 34)",
            "(line 664,col 9)-(line 664,col 34)",
            "(line 666,col 9)-(line 666,col 23)",
            "(line 667,col 9)-(line 667,col 58)",
            "(line 668,col 9)-(line 668,col 36)",
            "(line 669,col 9)-(line 669,col 34)",
            "(line 670,col 9)-(line 670,col 34)",
            "(line 671,col 9)-(line 671,col 34)",
            "(line 672,col 9)-(line 672,col 33)",
            "(line 674,col 9)-(line 674,col 24)",
            "(line 675,col 9)-(line 675,col 58)",
            "(line 676,col 9)-(line 676,col 36)",
            "(line 677,col 9)-(line 677,col 34)",
            "(line 678,col 9)-(line 678,col 34)",
            "(line 679,col 9)-(line 679,col 34)",
            "(line 680,col 9)-(line 680,col 33)",
            "(line 681,col 9)-(line 681,col 33)",
            "(line 684,col 9)-(line 692,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt()",
        "snippet": "    public void testSplitPreserveAllTokens_StringString_StringStringInt() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\"));\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\", 3));\n        \n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\").length);\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\", 3).length);\n        \n        innerTestSplitPreserveAllTokens('.', \".\", ' ');\n        innerTestSplitPreserveAllTokens('.', \".\", ',');\n        innerTestSplitPreserveAllTokens('.', \".,\", 'x');\n        for (int i = 0; i < WHITESPACE.length(); i++) {\n            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"  de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"::de:fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::de:fg\", \":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"\", \" de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"\", \"\", \"de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] expectedResults = {\"ab\", \"cd:ef\"};\n          String[] results;\n          results = StringUtils.splitPreserveAllTokens(\"ab:cd:ef\",\":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \":cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab::cd:ef\",\":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"\", \":cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 3);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 4);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results;\n          String[] expectedResults = {\"\", \"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\":ab:::cd:ef\",\":\", 5);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results;\n          String[] expectedResults = {\"\", \"\", \"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"::ab:::cd:ef\",\":\", 6);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n    }\n",
        "begin_line": 695,
        "end_line": 822,
        "comment": "",
        "child_ranges": [
            "(line 696,col 9)-(line 696,col 74)",
            "(line 697,col 9)-(line 697,col 77)",
            "(line 699,col 9)-(line 699,col 76)",
            "(line 700,col 9)-(line 700,col 79)",
            "(line 702,col 9)-(line 702,col 55)",
            "(line 703,col 9)-(line 703,col 55)",
            "(line 704,col 9)-(line 704,col 56)",
            "(line 705,col 9)-(line 710,col 9)",
            "(line 712,col 9)-(line 720,col 9)",
            "(line 722,col 9)-(line 730,col 9)",
            "(line 732,col 9)-(line 740,col 9)",
            "(line 742,col 9)-(line 750,col 9)",
            "(line 752,col 9)-(line 760,col 9)",
            "(line 762,col 9)-(line 770,col 9)",
            "(line 772,col 9)-(line 780,col 9)",
            "(line 782,col 9)-(line 790,col 9)",
            "(line 792,col 9)-(line 800,col 9)",
            "(line 802,col 9)-(line 810,col 9)",
            "(line 812,col 9)-(line 820,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplitPreserveAllTokens(char, java.lang.String, char)",
        "snippet": "    private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.splitPreserveAllTokens(str, sepStr);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.splitPreserveAllTokens(str2, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"\", res[0]);\n        assertEquals(msg, \"a\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n\n        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n",
        "begin_line": 824,
        "end_line": 867,
        "comment": "",
        "child_ranges": [
            "(line 825,col 9)-(line 826,col 91)",
            "(line 828,col 9)-(line 828,col 89)",
            "(line 829,col 9)-(line 829,col 21)",
            "(line 831,col 9)-(line 831,col 62)",
            "(line 832,col 9)-(line 832,col 41)",
            "(line 833,col 9)-(line 833,col 39)",
            "(line 834,col 9)-(line 834,col 39)",
            "(line 835,col 9)-(line 835,col 38)",
            "(line 836,col 9)-(line 836,col 49)",
            "(line 838,col 9)-(line 838,col 56)",
            "(line 839,col 9)-(line 839,col 63)",
            "(line 840,col 9)-(line 840,col 41)",
            "(line 841,col 9)-(line 841,col 38)",
            "(line 842,col 9)-(line 842,col 39)",
            "(line 843,col 9)-(line 843,col 38)",
            "(line 845,col 9)-(line 845,col 66)",
            "(line 846,col 9)-(line 846,col 41)",
            "(line 847,col 9)-(line 847,col 39)",
            "(line 848,col 9)-(line 848,col 39)",
            "(line 849,col 9)-(line 849,col 38)",
            "(line 850,col 9)-(line 850,col 49)",
            "(line 852,col 9)-(line 852,col 65)",
            "(line 853,col 9)-(line 853,col 41)",
            "(line 854,col 9)-(line 854,col 39)",
            "(line 855,col 9)-(line 855,col 39)",
            "(line 856,col 9)-(line 856,col 38)",
            "(line 857,col 9)-(line 857,col 49)",
            "(line 859,col 9)-(line 859,col 65)",
            "(line 860,col 9)-(line 860,col 41)",
            "(line 861,col 9)-(line 861,col 39)",
            "(line 863,col 9)-(line 863,col 65)",
            "(line 864,col 9)-(line 864,col 41)",
            "(line 865,col 9)-(line 865,col 39)",
            "(line 866,col 9)-(line 866,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterType()",
        "snippet": "    public void testSplitByCharacterType() {\n        assertNull(StringUtils.splitByCharacterType(null));\n        assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n        \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n        \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n        \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                StringUtils.splitByCharacterType(\"number5\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"B\", \"ar\" },\n                StringUtils.splitByCharacterType(\"fooBar\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"B\", \"ar\" },\n                StringUtils.splitByCharacterType(\"foo200Bar\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ASFR\", \"ules\" },\n                StringUtils.splitByCharacterType(\"ASFRules\")));\n    }\n",
        "begin_line": 869,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 870,col 9)-(line 870,col 59)",
            "(line 871,col 9)-(line 871,col 69)",
            "(line 873,col 9)-(line 874,col 63)",
            "(line 876,col 9)-(line 877,col 65)",
            "(line 879,col 9)-(line 880,col 63)",
            "(line 882,col 9)-(line 883,col 62)",
            "(line 885,col 9)-(line 886,col 61)",
            "(line 888,col 9)-(line 889,col 64)",
            "(line 891,col 9)-(line 892,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase()",
        "snippet": "    public void testSplitByCharacterTypeCamelCase() {\n        assertNull(StringUtils.splitByCharacterTypeCamelCase(null));\n        assertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n                \"ef\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"number5\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"Bar\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"Bar\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ASF\", \"Rules\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\n    }\n",
        "begin_line": 895,
        "end_line": 919,
        "comment": "",
        "child_ranges": [
            "(line 896,col 9)-(line 896,col 68)",
            "(line 897,col 9)-(line 897,col 78)",
            "(line 899,col 9)-(line 900,col 80)",
            "(line 902,col 9)-(line 903,col 82)",
            "(line 905,col 9)-(line 906,col 80)",
            "(line 908,col 9)-(line 909,col 71)",
            "(line 911,col 9)-(line 912,col 70)",
            "(line 914,col 9)-(line 915,col 73)",
            "(line 917,col 9)-(line 918,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDeleteWhitespace_String()",
        "snippet": "    public void testDeleteWhitespace_String() {\n        assertEquals(null, StringUtils.deleteWhitespace(null));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n        // Note: u-2007 and u-000A both cause problems in the source code\n        // it should ignore 2007 but delete 000A\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n        assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n    }\n",
        "begin_line": 921,
        "end_line": 932,
        "comment": "",
        "child_ranges": [
            "(line 922,col 9)-(line 922,col 63)",
            "(line 923,col 9)-(line 923,col 59)",
            "(line 924,col 9)-(line 924,col 92)",
            "(line 925,col 9)-(line 925,col 83)",
            "(line 926,col 9)-(line 926,col 115)",
            "(line 929,col 9)-(line 929,col 98)",
            "(line 930,col 9)-(line 930,col 83)",
            "(line 931,col 9)-(line 931,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLang623()",
        "snippet": "    public void testLang623() {\n        assertEquals(\"t\", StringUtils.replaceChars(\"\\u00DE\", '\\u00DE', 't'));\n        assertEquals(\"t\", StringUtils.replaceChars(\"\\u00FE\", '\\u00FE', 't'));\n    }\n",
        "begin_line": 934,
        "end_line": 937,
        "comment": "",
        "child_ranges": [
            "(line 935,col 9)-(line 935,col 77)",
            "(line 936,col 9)-(line 936,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringString()",
        "snippet": "    public void testReplace_StringStringString() {\n        assertEquals(null, StringUtils.replace(null, null, null));\n        assertEquals(null, StringUtils.replace(null, null, \"any\"));\n        assertEquals(null, StringUtils.replace(null, \"any\", null));\n        assertEquals(null, StringUtils.replace(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, null));\n\n        assertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\n        assertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\n        assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n    }\n",
        "begin_line": 939,
        "end_line": 958,
        "comment": "",
        "child_ranges": [
            "(line 940,col 9)-(line 940,col 66)",
            "(line 941,col 9)-(line 941,col 67)",
            "(line 942,col 9)-(line 942,col 67)",
            "(line 943,col 9)-(line 943,col 68)",
            "(line 945,col 9)-(line 945,col 62)",
            "(line 946,col 9)-(line 946,col 63)",
            "(line 947,col 9)-(line 947,col 63)",
            "(line 948,col 9)-(line 948,col 64)",
            "(line 950,col 9)-(line 950,col 67)",
            "(line 951,col 9)-(line 951,col 69)",
            "(line 952,col 9)-(line 952,col 67)",
            "(line 953,col 9)-(line 953,col 68)",
            "(line 955,col 9)-(line 955,col 70)",
            "(line 956,col 9)-(line 956,col 82)",
            "(line 957,col 9)-(line 957,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringStringInt()",
        "snippet": "    public void testReplace_StringStringStringInt() {\n        assertEquals(null, StringUtils.replace(null, null, null, 2));\n        assertEquals(null, StringUtils.replace(null, null, \"any\", 2));\n        assertEquals(null, StringUtils.replace(null, \"any\", null, 2));\n        assertEquals(null, StringUtils.replace(null, \"any\", \"any\", 2));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\", 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\", 2));\n        \n        String str = new String(new char[] {'o', 'o', 'f', 'o', 'o'});\n        assertSame(str, StringUtils.replace(str, \"x\", \"\", -1));\n        \n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -1));\n        assertEquals(\"oofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 0));\n        assertEquals(\"ofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1));\n        assertEquals(\"foo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 2));\n        assertEquals(\"fo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 3));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 4));\n        \n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -5));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1000));\n    }\n",
        "begin_line": 960,
        "end_line": 983,
        "comment": "",
        "child_ranges": [
            "(line 961,col 9)-(line 961,col 69)",
            "(line 962,col 9)-(line 962,col 70)",
            "(line 963,col 9)-(line 963,col 70)",
            "(line 964,col 9)-(line 964,col 71)",
            "(line 966,col 9)-(line 966,col 65)",
            "(line 967,col 9)-(line 967,col 66)",
            "(line 968,col 9)-(line 968,col 66)",
            "(line 969,col 9)-(line 969,col 67)",
            "(line 971,col 9)-(line 971,col 70)",
            "(line 972,col 9)-(line 972,col 63)",
            "(line 974,col 9)-(line 974,col 69)",
            "(line 975,col 9)-(line 975,col 72)",
            "(line 976,col 9)-(line 976,col 71)",
            "(line 977,col 9)-(line 977,col 70)",
            "(line 978,col 9)-(line 978,col 69)",
            "(line 979,col 9)-(line 979,col 68)",
            "(line 981,col 9)-(line 981,col 69)",
            "(line 982,col 9)-(line 982,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString()",
        "snippet": "    public void testReplaceOnce_StringStringString() {\n        assertEquals(null, StringUtils.replaceOnce(null, null, null));\n        assertEquals(null, StringUtils.replaceOnce(null, null, \"any\"));\n        assertEquals(null, StringUtils.replaceOnce(null, \"any\", null));\n        assertEquals(null, StringUtils.replaceOnce(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, null));\n\n        assertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\n    }\n",
        "begin_line": 985,
        "end_line": 1002,
        "comment": "",
        "child_ranges": [
            "(line 986,col 9)-(line 986,col 70)",
            "(line 987,col 9)-(line 987,col 71)",
            "(line 988,col 9)-(line 988,col 71)",
            "(line 989,col 9)-(line 989,col 72)",
            "(line 991,col 9)-(line 991,col 66)",
            "(line 992,col 9)-(line 992,col 67)",
            "(line 993,col 9)-(line 993,col 67)",
            "(line 994,col 9)-(line 994,col 68)",
            "(line 996,col 9)-(line 996,col 71)",
            "(line 997,col 9)-(line 997,col 73)",
            "(line 998,col 9)-(line 998,col 71)",
            "(line 999,col 9)-(line 999,col 72)",
            "(line 1001,col 9)-(line 1001,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray()",
        "snippet": "    public void testReplace_StringStringArrayStringArray() {\n\n        \n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEach(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEach(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null),\"aba\");\n\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"dcte\");\n        //JAVADOC TESTS END\n\n        assertEquals(\"bcc\", StringUtils.replaceEach(\"abc\", new String[]{\"a\", \"b\"}, new String[]{\"b\", \"c\"}));\n        assertEquals(\"q651.506bera\", StringUtils.replaceEach(\"d216.102oren\",\n            new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \n                \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \n                \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \n                \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"},\n            new String[]{\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \n                \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\", \n                \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \n                \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\"}));\n\n        // Test null safety inside arrays - LANG-552\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{null}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\", \"b\"}, new String[]{\"c\", null}),\"cbc\");\n    }\n",
        "begin_line": 1007,
        "end_line": 1038,
        "comment": "\n     * Test method for 'StringUtils.replaceEach(String, String[], String[])'\n     ",
        "child_ranges": [
            "(line 1011,col 9)-(line 1011,col 88)",
            "(line 1012,col 9)-(line 1012,col 91)",
            "(line 1013,col 9)-(line 1013,col 71)",
            "(line 1014,col 9)-(line 1014,col 80)",
            "(line 1015,col 9)-(line 1015,col 80)",
            "(line 1016,col 9)-(line 1016,col 84)",
            "(line 1018,col 9)-(line 1018,col 94)",
            "(line 1019,col 9)-(line 1019,col 98)",
            "(line 1020,col 9)-(line 1020,col 111)",
            "(line 1021,col 9)-(line 1021,col 111)",
            "(line 1024,col 9)-(line 1024,col 108)",
            "(line 1025,col 9)-(line 1033,col 93)",
            "(line 1036,col 9)-(line 1036,col 98)",
            "(line 1037,col 9)-(line 1037,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean()",
        "snippet": "    public void testReplace_StringStringArrayStringArrayBoolean() {\n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEachRepeatedly(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"tcte\");\n\n        try {\n            StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"});\n            fail(\"Should be a circular reference\");\n        } catch (IllegalStateException e) {}\n\n        //JAVADOC TESTS END\n\n    }\n",
        "begin_line": 1043,
        "end_line": 1064,
        "comment": "\n     * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])'\n     ",
        "child_ranges": [
            "(line 1045,col 9)-(line 1045,col 98)",
            "(line 1046,col 9)-(line 1046,col 101)",
            "(line 1047,col 9)-(line 1047,col 81)",
            "(line 1048,col 9)-(line 1048,col 90)",
            "(line 1049,col 9)-(line 1049,col 90)",
            "(line 1050,col 9)-(line 1050,col 90)",
            "(line 1052,col 9)-(line 1052,col 104)",
            "(line 1053,col 9)-(line 1053,col 108)",
            "(line 1054,col 9)-(line 1054,col 121)",
            "(line 1055,col 9)-(line 1055,col 121)",
            "(line 1057,col 9)-(line 1060,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringCharChar()",
        "snippet": "    public void testReplaceChars_StringCharChar() {\n        assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", 'b', 'z'));\n        assertEquals(\"azcza\", StringUtils.replaceChars(\"abcba\", 'b', 'z'));\n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", 'x', 'z'));\n    }\n",
        "begin_line": 1066,
        "end_line": 1071,
        "comment": "",
        "child_ranges": [
            "(line 1067,col 9)-(line 1067,col 69)",
            "(line 1068,col 9)-(line 1068,col 65)",
            "(line 1069,col 9)-(line 1069,col 75)",
            "(line 1070,col 9)-(line 1070,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringStringString()",
        "snippet": "    public void testReplaceChars_StringStringString() {\n        assertEquals(null, StringUtils.replaceChars(null, null, null));\n        assertEquals(null, StringUtils.replaceChars(null, \"\", null));\n        assertEquals(null, StringUtils.replaceChars(null, \"a\", null));\n        assertEquals(null, StringUtils.replaceChars(null, null, \"\"));\n        assertEquals(null, StringUtils.replaceChars(null, null, \"x\"));\n        \n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"a\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"\"));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"x\"));\n\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"x\"));\n        \n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"x\"));\n        \n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", null));\n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", \"\"));\n        assertEquals(\"axc\", StringUtils.replaceChars(\"abc\", \"b\", \"x\"));\n        \n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n        \n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        assertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        \n        // Javadoc examples:\n        assertEquals(\"jelly\", StringUtils.replaceChars(\"hello\", \"ho\", \"jy\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n        \n        // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454\n        assertEquals(\"bcc\", StringUtils.replaceChars(\"abc\", \"ab\", \"bc\"));\n        assertEquals(\"q651.506bera\", StringUtils.replaceChars(\"d216.102oren\",\n            \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\",\n            \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n    }\n",
        "begin_line": 1073,
        "end_line": 1116,
        "comment": "",
        "child_ranges": [
            "(line 1074,col 9)-(line 1074,col 71)",
            "(line 1075,col 9)-(line 1075,col 69)",
            "(line 1076,col 9)-(line 1076,col 70)",
            "(line 1077,col 9)-(line 1077,col 69)",
            "(line 1078,col 9)-(line 1078,col 70)",
            "(line 1080,col 9)-(line 1080,col 67)",
            "(line 1081,col 9)-(line 1081,col 65)",
            "(line 1082,col 9)-(line 1082,col 66)",
            "(line 1083,col 9)-(line 1083,col 65)",
            "(line 1084,col 9)-(line 1084,col 66)",
            "(line 1086,col 9)-(line 1086,col 73)",
            "(line 1087,col 9)-(line 1087,col 71)",
            "(line 1088,col 9)-(line 1088,col 72)",
            "(line 1090,col 9)-(line 1090,col 71)",
            "(line 1091,col 9)-(line 1091,col 69)",
            "(line 1092,col 9)-(line 1092,col 70)",
            "(line 1094,col 9)-(line 1094,col 71)",
            "(line 1095,col 9)-(line 1095,col 69)",
            "(line 1096,col 9)-(line 1096,col 71)",
            "(line 1098,col 9)-(line 1098,col 77)",
            "(line 1099,col 9)-(line 1099,col 75)",
            "(line 1100,col 9)-(line 1100,col 78)",
            "(line 1102,col 9)-(line 1102,col 75)",
            "(line 1103,col 9)-(line 1103,col 73)",
            "(line 1106,col 9)-(line 1106,col 77)",
            "(line 1107,col 9)-(line 1107,col 77)",
            "(line 1108,col 9)-(line 1108,col 75)",
            "(line 1109,col 9)-(line 1109,col 78)",
            "(line 1112,col 9)-(line 1112,col 73)",
            "(line 1113,col 9)-(line 1115,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testOverlay_StringStringIntInt()",
        "snippet": "    public void testOverlay_StringStringIntInt() {\n        assertEquals(null, StringUtils.overlay(null, null, 2, 4));\n        assertEquals(null, StringUtils.overlay(null, null, -2, -4));\n        \n        assertEquals(\"\", StringUtils.overlay(\"\", null, 0, 0));\n        assertEquals(\"\", StringUtils.overlay(\"\", \"\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 2, 4));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", -2, -4));\n        \n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 4, 2));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 4, 2));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2));\n        \n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4));\n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, -2));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 10));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 4));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\n    }\n",
        "begin_line": 1118,
        "end_line": 1143,
        "comment": "",
        "child_ranges": [
            "(line 1119,col 9)-(line 1119,col 66)",
            "(line 1120,col 9)-(line 1120,col 68)",
            "(line 1122,col 9)-(line 1122,col 62)",
            "(line 1123,col 9)-(line 1123,col 60)",
            "(line 1124,col 9)-(line 1124,col 68)",
            "(line 1125,col 9)-(line 1125,col 68)",
            "(line 1126,col 9)-(line 1126,col 70)",
            "(line 1128,col 9)-(line 1128,col 72)",
            "(line 1129,col 9)-(line 1129,col 72)",
            "(line 1130,col 9)-(line 1130,col 70)",
            "(line 1131,col 9)-(line 1131,col 70)",
            "(line 1132,col 9)-(line 1132,col 78)",
            "(line 1133,col 9)-(line 1133,col 78)",
            "(line 1135,col 9)-(line 1135,col 77)",
            "(line 1136,col 9)-(line 1136,col 77)",
            "(line 1137,col 9)-(line 1137,col 82)",
            "(line 1138,col 9)-(line 1138,col 82)",
            "(line 1139,col 9)-(line 1139,col 79)",
            "(line 1140,col 9)-(line 1140,col 79)",
            "(line 1141,col 9)-(line 1141,col 81)",
            "(line 1142,col 9)-(line 1142,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt()",
        "snippet": "    public void testRepeat_StringInt() {\n        assertEquals(null, StringUtils.repeat(null, 2));\n        assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", 3));\n        assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\n        assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\n        assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n        String str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }\n",
        "begin_line": 1145,
        "end_line": 1155,
        "comment": "",
        "child_ranges": [
            "(line 1146,col 9)-(line 1146,col 56)",
            "(line 1147,col 9)-(line 1147,col 54)",
            "(line 1148,col 9)-(line 1148,col 52)",
            "(line 1149,col 9)-(line 1149,col 56)",
            "(line 1150,col 9)-(line 1150,col 60)",
            "(line 1151,col 9)-(line 1151,col 64)",
            "(line 1152,col 9)-(line 1152,col 52)",
            "(line 1153,col 9)-(line 1153,col 42)",
            "(line 1154,col 9)-(line 1154,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt()",
        "snippet": "    public void testRepeat_StringStringInt() {\n        assertEquals(null, StringUtils.repeat(null, null, 2));\n        assertEquals(null, StringUtils.repeat(null, \"x\", 2));\n        assertEquals(\"\", StringUtils.repeat(\"\", null, 2));\n\n        assertEquals(\"\", StringUtils.repeat(\"ab\", \"\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", \"\", 2));\n\n        assertEquals(\"xx\", StringUtils.repeat(\"\", \"x\", 3));\n\n        assertEquals(\"?, ?, ?\", StringUtils.repeat(\"?\", \", \", 3));\n    }\n",
        "begin_line": 1157,
        "end_line": 1168,
        "comment": "",
        "child_ranges": [
            "(line 1158,col 9)-(line 1158,col 62)",
            "(line 1159,col 9)-(line 1159,col 61)",
            "(line 1160,col 9)-(line 1160,col 58)",
            "(line 1162,col 9)-(line 1162,col 58)",
            "(line 1163,col 9)-(line 1163,col 56)",
            "(line 1165,col 9)-(line 1165,col 59)",
            "(line 1167,col 9)-(line 1167,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testChop()",
        "snippet": "    public void testChop() {\n\n        String[][] chopCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n            { \"foo\", \"fo\"},\n            { \"foo\\nfoo\", \"foo\\nfo\" },\n            { \"\\n\", \"\" },\n            { \"\\r\", \"\" },\n            { \"\\r\\n\", \"\" },\n            { null, null },\n            { \"\", \"\" },\n            { \"a\", \"\" },\n        };\n        for (int i = 0; i < chopCases.length; i++) {\n            String original = chopCases[i][0];\n            String expectedResult = chopCases[i][1];\n            assertEquals(\"chop(String) failed\",\n                    expectedResult, StringUtils.chop(original));\n        }\n    }\n",
        "begin_line": 1170,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1172,col 9)-(line 1185,col 10)",
            "(line 1186,col 9)-(line 1191,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testChomp()",
        "snippet": "    public void testChomp() {\n\n        String[][] chompCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP },\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n            { FOO_UNCAP, FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n            { FOO_UNCAP + \"\\r\\n\\r\\n\", FOO_UNCAP + \"\\r\\n\" },\n            { \"foo\\nfoo\", \"foo\\nfoo\" },\n            { \"foo\\n\\rfoo\", \"foo\\n\\rfoo\" },\n            { \"\\n\", \"\" },\n            { \"\\r\", \"\" },\n            { \"a\", \"a\" },\n            { \"\\r\\n\", \"\" },\n            { \"\", \"\" },\n            { null, null },\n            { FOO_UNCAP + \"\\n\\r\", FOO_UNCAP + \"\\n\"}\n        };\n        for (int i = 0; i < chompCases.length; i++) {\n            String original = chompCases[i][0];\n            String expectedResult = chompCases[i][1];\n            assertEquals(\"chomp(String) failed\",\n                    expectedResult, StringUtils.chomp(original));\n        }\n\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foobar\", \"bar\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"baz\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foo\", \"foooo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, null));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \" \", StringUtils.chomp(\" foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo \", StringUtils.chomp(\"foo \", \"foo\"));\n    }\n",
        "begin_line": 1194,
        "end_line": 1249,
        "comment": "",
        "child_ranges": [
            "(line 1196,col 9)-(line 1213,col 10)",
            "(line 1214,col 9)-(line 1219,col 9)",
            "(line 1221,col 9)-(line 1222,col 59)",
            "(line 1223,col 9)-(line 1224,col 62)",
            "(line 1225,col 9)-(line 1226,col 58)",
            "(line 1227,col 9)-(line 1228,col 59)",
            "(line 1229,col 9)-(line 1230,col 61)",
            "(line 1231,col 9)-(line 1232,col 50)",
            "(line 1233,col 9)-(line 1234,col 49)",
            "(line 1235,col 9)-(line 1236,col 47)",
            "(line 1237,col 9)-(line 1238,col 54)",
            "(line 1239,col 9)-(line 1240,col 53)",
            "(line 1241,col 9)-(line 1242,col 51)",
            "(line 1243,col 9)-(line 1244,col 53)",
            "(line 1245,col 9)-(line 1246,col 55)",
            "(line 1247,col 9)-(line 1248,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt()",
        "snippet": "    public void testRightPad_StringInt() {\n        assertEquals(null, StringUtils.rightPad(null, 5));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\n    }\n",
        "begin_line": 1252,
        "end_line": 1258,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1253,col 9)-(line 1253,col 58)",
            "(line 1254,col 9)-(line 1254,col 59)",
            "(line 1255,col 9)-(line 1255,col 62)",
            "(line 1256,col 9)-(line 1256,col 60)",
            "(line 1257,col 9)-(line 1257,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar()",
        "snippet": "    public void testRightPad_StringIntChar() {\n        assertEquals(null, StringUtils.rightPad(null, 5, ' '));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, ' '));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, ' '));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, ' '));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, ' '));\n        assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\n        String str = StringUtils.rightPad(\"aaa\", 10000, 'a');  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }\n",
        "begin_line": 1260,
        "end_line": 1270,
        "comment": "",
        "child_ranges": [
            "(line 1261,col 9)-(line 1261,col 63)",
            "(line 1262,col 9)-(line 1262,col 64)",
            "(line 1263,col 9)-(line 1263,col 67)",
            "(line 1264,col 9)-(line 1264,col 65)",
            "(line 1265,col 9)-(line 1265,col 66)",
            "(line 1266,col 9)-(line 1266,col 67)",
            "(line 1267,col 9)-(line 1267,col 61)",
            "(line 1268,col 9)-(line 1268,col 42)",
            "(line 1269,col 9)-(line 1269,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntString()",
        "snippet": "    public void testRightPad_StringIntString() {\n        assertEquals(null, StringUtils.rightPad(null, 5, \"-+\"));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\n        assertEquals(null, StringUtils.rightPad(null, 8, null));\n        assertEquals(\"abc-+-+\", StringUtils.rightPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"abc-+~\", StringUtils.rightPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, null));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \"\"));\n    }\n",
        "begin_line": 1272,
        "end_line": 1283,
        "comment": "",
        "child_ranges": [
            "(line 1273,col 9)-(line 1273,col 64)",
            "(line 1274,col 9)-(line 1274,col 64)",
            "(line 1275,col 9)-(line 1275,col 64)",
            "(line 1276,col 9)-(line 1276,col 70)",
            "(line 1277,col 9)-(line 1277,col 70)",
            "(line 1278,col 9)-(line 1278,col 69)",
            "(line 1279,col 9)-(line 1279,col 65)",
            "(line 1280,col 9)-(line 1280,col 66)",
            "(line 1281,col 9)-(line 1281,col 68)",
            "(line 1282,col 9)-(line 1282,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringInt()",
        "snippet": "    public void testLeftPad_StringInt() {\n        assertEquals(null, StringUtils.leftPad(null, 5));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\n    }\n",
        "begin_line": 1286,
        "end_line": 1291,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1287,col 9)-(line 1287,col 57)",
            "(line 1288,col 9)-(line 1288,col 58)",
            "(line 1289,col 9)-(line 1289,col 61)",
            "(line 1290,col 9)-(line 1290,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar()",
        "snippet": "    public void testLeftPad_StringIntChar() {\n        assertEquals(null, StringUtils.leftPad(null, 5, ' '));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, ' '));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, ' '));\n        assertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, 'x'));\n        assertEquals(\"\\uffff\\uffffabc\", StringUtils.leftPad(\"abc\", 5, '\\uffff'));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\n        String str = StringUtils.leftPad(\"aaa\", 10000, 'a');  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }\n",
        "begin_line": 1293,
        "end_line": 1303,
        "comment": "",
        "child_ranges": [
            "(line 1294,col 9)-(line 1294,col 62)",
            "(line 1295,col 9)-(line 1295,col 63)",
            "(line 1296,col 9)-(line 1296,col 66)",
            "(line 1297,col 9)-(line 1297,col 66)",
            "(line 1298,col 9)-(line 1298,col 81)",
            "(line 1299,col 9)-(line 1299,col 64)",
            "(line 1300,col 9)-(line 1300,col 60)",
            "(line 1301,col 9)-(line 1301,col 42)",
            "(line 1302,col 9)-(line 1302,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntString()",
        "snippet": "    public void testLeftPad_StringIntString() {\n        assertEquals(null, StringUtils.leftPad(null, 5, \"-+\"));\n        assertEquals(null, StringUtils.leftPad(null, 5, null));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, \" \"));\n        assertEquals(\"-+-+abc\", StringUtils.leftPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"-+~abc\", StringUtils.leftPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, null));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n    }\n",
        "begin_line": 1305,
        "end_line": 1316,
        "comment": "",
        "child_ranges": [
            "(line 1306,col 9)-(line 1306,col 63)",
            "(line 1307,col 9)-(line 1307,col 63)",
            "(line 1308,col 9)-(line 1308,col 63)",
            "(line 1309,col 9)-(line 1309,col 69)",
            "(line 1310,col 9)-(line 1310,col 69)",
            "(line 1311,col 9)-(line 1311,col 68)",
            "(line 1312,col 9)-(line 1312,col 64)",
            "(line 1313,col 9)-(line 1313,col 65)",
            "(line 1314,col 9)-(line 1314,col 67)",
            "(line 1315,col 9)-(line 1315,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLengthString()",
        "snippet": "    public void testLengthString() {\n        assertEquals(0, StringUtils.length(null));\n        assertEquals(0, StringUtils.length(\"\"));\n        assertEquals(0, StringUtils.length(StringUtils.EMPTY));\n        assertEquals(1, StringUtils.length(\"A\"));\n        assertEquals(1, StringUtils.length(\" \"));\n        assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n    }\n",
        "begin_line": 1318,
        "end_line": 1325,
        "comment": "",
        "child_ranges": [
            "(line 1319,col 9)-(line 1319,col 50)",
            "(line 1320,col 9)-(line 1320,col 48)",
            "(line 1321,col 9)-(line 1321,col 63)",
            "(line 1322,col 9)-(line 1322,col 49)",
            "(line 1323,col 9)-(line 1323,col 49)",
            "(line 1324,col 9)-(line 1324,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLengthStringBuffer()",
        "snippet": "    public void testLengthStringBuffer() {\n        assertEquals(0, StringUtils.length(new StringBuffer(\"\")));\n        assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY)));\n        assertEquals(1, StringUtils.length(new StringBuffer(\"A\")));\n        assertEquals(1, StringUtils.length(new StringBuffer(\" \")));\n        assertEquals(8, StringUtils.length(new StringBuffer(\"ABCDEFGH\")));\n    }\n",
        "begin_line": 1327,
        "end_line": 1333,
        "comment": "",
        "child_ranges": [
            "(line 1328,col 9)-(line 1328,col 66)",
            "(line 1329,col 9)-(line 1329,col 81)",
            "(line 1330,col 9)-(line 1330,col 67)",
            "(line 1331,col 9)-(line 1331,col 67)",
            "(line 1332,col 9)-(line 1332,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLengthStringBuilder()",
        "snippet": "    public void testLengthStringBuilder() {\n        assertEquals(0, StringUtils.length(new StringBuilder(\"\")));\n        assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY)));\n        assertEquals(1, StringUtils.length(new StringBuilder(\"A\")));\n        assertEquals(1, StringUtils.length(new StringBuilder(\" \")));\n        assertEquals(8, StringUtils.length(new StringBuilder(\"ABCDEFGH\")));\n    }\n",
        "begin_line": 1335,
        "end_line": 1341,
        "comment": "",
        "child_ranges": [
            "(line 1336,col 9)-(line 1336,col 67)",
            "(line 1337,col 9)-(line 1337,col 82)",
            "(line 1338,col 9)-(line 1338,col 68)",
            "(line 1339,col 9)-(line 1339,col 68)",
            "(line 1340,col 9)-(line 1340,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLength_CharBuffer()",
        "snippet": "    public void testLength_CharBuffer() {\n        assertEquals(0, StringUtils.length(CharBuffer.wrap(\"\")));\n        assertEquals(1, StringUtils.length(CharBuffer.wrap(\"A\")));\n        assertEquals(1, StringUtils.length(CharBuffer.wrap(\" \")));\n        assertEquals(8, StringUtils.length(CharBuffer.wrap(\"ABCDEFGH\")));\n    }\n",
        "begin_line": 1343,
        "end_line": 1348,
        "comment": "",
        "child_ranges": [
            "(line 1344,col 9)-(line 1344,col 65)",
            "(line 1345,col 9)-(line 1345,col 66)",
            "(line 1346,col 9)-(line 1346,col 66)",
            "(line 1347,col 9)-(line 1347,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringInt()",
        "snippet": "    public void testCenter_StringInt() {\n        assertEquals(null, StringUtils.center(null, -1));\n        assertEquals(null, StringUtils.center(null, 4));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n    }\n",
        "begin_line": 1351,
        "end_line": 1363,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1352,col 9)-(line 1352,col 57)",
            "(line 1353,col 9)-(line 1353,col 56)",
            "(line 1354,col 9)-(line 1354,col 56)",
            "(line 1355,col 9)-(line 1355,col 56)",
            "(line 1356,col 9)-(line 1356,col 57)",
            "(line 1357,col 9)-(line 1357,col 56)",
            "(line 1358,col 9)-(line 1358,col 56)",
            "(line 1359,col 9)-(line 1359,col 58)",
            "(line 1360,col 9)-(line 1360,col 60)",
            "(line 1361,col 9)-(line 1361,col 57)",
            "(line 1362,col 9)-(line 1362,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntChar()",
        "snippet": "    public void testCenter_StringIntChar() {\n        assertEquals(null, StringUtils.center(null, -1, ' '));\n        assertEquals(null, StringUtils.center(null, 4, ' '));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, ' '));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, ' '));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, ' '));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, ' '));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5, ' '));\n        assertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, 'x'));\n    }\n",
        "begin_line": 1365,
        "end_line": 1378,
        "comment": "",
        "child_ranges": [
            "(line 1366,col 9)-(line 1366,col 62)",
            "(line 1367,col 9)-(line 1367,col 61)",
            "(line 1368,col 9)-(line 1368,col 61)",
            "(line 1369,col 9)-(line 1369,col 61)",
            "(line 1370,col 9)-(line 1370,col 62)",
            "(line 1371,col 9)-(line 1371,col 61)",
            "(line 1372,col 9)-(line 1372,col 61)",
            "(line 1373,col 9)-(line 1373,col 63)",
            "(line 1374,col 9)-(line 1374,col 65)",
            "(line 1375,col 9)-(line 1375,col 62)",
            "(line 1376,col 9)-(line 1376,col 63)",
            "(line 1377,col 9)-(line 1377,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString()",
        "snippet": "    public void testCenter_StringIntString() {\n        assertEquals(null, StringUtils.center(null, 4, null));\n        assertEquals(null, StringUtils.center(null, -1, \" \"));\n        assertEquals(null, StringUtils.center(null, 4, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n        assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n        assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, null));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, \"\"));\n    }\n",
        "begin_line": 1380,
        "end_line": 1396,
        "comment": "",
        "child_ranges": [
            "(line 1381,col 9)-(line 1381,col 62)",
            "(line 1382,col 9)-(line 1382,col 62)",
            "(line 1383,col 9)-(line 1383,col 61)",
            "(line 1384,col 9)-(line 1384,col 61)",
            "(line 1385,col 9)-(line 1385,col 61)",
            "(line 1386,col 9)-(line 1386,col 62)",
            "(line 1387,col 9)-(line 1387,col 61)",
            "(line 1388,col 9)-(line 1388,col 61)",
            "(line 1389,col 9)-(line 1389,col 63)",
            "(line 1390,col 9)-(line 1390,col 65)",
            "(line 1391,col 9)-(line 1391,col 62)",
            "(line 1392,col 9)-(line 1392,col 63)",
            "(line 1393,col 9)-(line 1393,col 66)",
            "(line 1394,col 9)-(line 1394,col 68)",
            "(line 1395,col 9)-(line 1395,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReverse_String()",
        "snippet": "    public void testReverse_String() {\n        assertEquals(null, StringUtils.reverse(null) );\n        assertEquals(\"\", StringUtils.reverse(\"\") );\n        assertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\") );\n    }\n",
        "begin_line": 1399,
        "end_line": 1403,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1400,col 9)-(line 1400,col 55)",
            "(line 1401,col 9)-(line 1401,col 51)",
            "(line 1402,col 9)-(line 1402,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar()",
        "snippet": "    public void testReverseDelimited_StringChar() {\n        assertEquals(null, StringUtils.reverseDelimited(null, '.') );\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n        assertEquals(\"c.b.a\", StringUtils.reverseDelimited(\"a.b.c\", '.') );\n        assertEquals(\"a b c\", StringUtils.reverseDelimited(\"a b c\", '.') );\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n    }\n",
        "begin_line": 1405,
        "end_line": 1411,
        "comment": "",
        "child_ranges": [
            "(line 1406,col 9)-(line 1406,col 69)",
            "(line 1407,col 9)-(line 1407,col 65)",
            "(line 1408,col 9)-(line 1408,col 75)",
            "(line 1409,col 9)-(line 1409,col 75)",
            "(line 1410,col 9)-(line 1410,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_String()",
        "snippet": "    public void testDefault_String() {\n        assertEquals(\"\", StringUtils.defaultString(null));\n        assertEquals(\"\", StringUtils.defaultString(\"\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\"));\n    }\n",
        "begin_line": 1414,
        "end_line": 1418,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1415,col 9)-(line 1415,col 58)",
            "(line 1416,col 9)-(line 1416,col 56)",
            "(line 1417,col 9)-(line 1417,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_StringString()",
        "snippet": "    public void testDefault_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultString(null, \"NULL\"));\n        assertEquals(\"\", StringUtils.defaultString(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"NULL\"));\n    }\n",
        "begin_line": 1420,
        "end_line": 1424,
        "comment": "",
        "child_ranges": [
            "(line 1421,col 9)-(line 1421,col 70)",
            "(line 1422,col 9)-(line 1422,col 64)",
            "(line 1423,col 9)-(line 1423,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringString()",
        "snippet": "    public void testDefaultIfEmpty_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(null, \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\n        assertNull(StringUtils.defaultIfEmpty(\"\", null));\n        // Tests compatibility for the API return type\n        String s = StringUtils.defaultIfEmpty(\"abc\", \"NULL\");\n        assertEquals(\"abc\", s);\n    }\n",
        "begin_line": 1426,
        "end_line": 1434,
        "comment": "",
        "child_ranges": [
            "(line 1427,col 9)-(line 1427,col 71)",
            "(line 1428,col 9)-(line 1428,col 69)",
            "(line 1429,col 9)-(line 1429,col 71)",
            "(line 1430,col 9)-(line 1430,col 57)",
            "(line 1432,col 9)-(line 1432,col 61)",
            "(line 1433,col 9)-(line 1433,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringString()",
        "snippet": "    public void testDefaultIfBlank_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(null, \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(\"\", \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(\" \", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(\"abc\", \"NULL\"));\n        assertNull(StringUtils.defaultIfBlank(\"\", null));\n        // Tests compatibility for the API return type\n        String s = StringUtils.defaultIfBlank(\"abc\", \"NULL\");\n        assertEquals(\"abc\", s);\n    }\n",
        "begin_line": 1436,
        "end_line": 1445,
        "comment": "",
        "child_ranges": [
            "(line 1437,col 9)-(line 1437,col 71)",
            "(line 1438,col 9)-(line 1438,col 69)",
            "(line 1439,col 9)-(line 1439,col 70)",
            "(line 1440,col 9)-(line 1440,col 71)",
            "(line 1441,col 9)-(line 1441,col 57)",
            "(line 1443,col 9)-(line 1443,col 61)",
            "(line 1444,col 9)-(line 1444,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringBuilders()",
        "snippet": "    public void testDefaultIfEmpty_StringBuilders() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfEmpty(new StringBuilder(\"\"), null));\n        // Tests compatibility for the API return type\n        StringBuilder s = StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1447,
        "end_line": 1454,
        "comment": "",
        "child_ranges": [
            "(line 1448,col 9)-(line 1448,col 118)",
            "(line 1449,col 9)-(line 1449,col 120)",
            "(line 1450,col 9)-(line 1450,col 76)",
            "(line 1452,col 9)-(line 1452,col 106)",
            "(line 1453,col 9)-(line 1453,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringBuilders()",
        "snippet": "    public void testDefaultIfBlank_StringBuilders() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\" \"), new StringBuilder(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfBlank(new StringBuilder(\"\"), null));\n        // Tests compatibility for the API return type\n        StringBuilder s = StringUtils.defaultIfBlank(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1456,
        "end_line": 1464,
        "comment": "",
        "child_ranges": [
            "(line 1457,col 9)-(line 1457,col 118)",
            "(line 1458,col 9)-(line 1458,col 119)",
            "(line 1459,col 9)-(line 1459,col 120)",
            "(line 1460,col 9)-(line 1460,col 76)",
            "(line 1462,col 9)-(line 1462,col 106)",
            "(line 1463,col 9)-(line 1463,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringBuffers()",
        "snippet": "    public void testDefaultIfEmpty_StringBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfEmpty(new StringBuffer(\"\"), null));\n        // Tests compatibility for the API return type\n        StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1466,
        "end_line": 1473,
        "comment": "",
        "child_ranges": [
            "(line 1467,col 9)-(line 1467,col 116)",
            "(line 1468,col 9)-(line 1468,col 118)",
            "(line 1469,col 9)-(line 1469,col 75)",
            "(line 1471,col 9)-(line 1471,col 103)",
            "(line 1472,col 9)-(line 1472,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringBuffers()",
        "snippet": "    public void testDefaultIfBlank_StringBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\" \"), new StringBuffer(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfBlank(new StringBuffer(\"\"), null));\n        // Tests compatibility for the API return type\n        StringBuffer s = StringUtils.defaultIfBlank(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1475,
        "end_line": 1483,
        "comment": "",
        "child_ranges": [
            "(line 1476,col 9)-(line 1476,col 116)",
            "(line 1477,col 9)-(line 1477,col 117)",
            "(line 1478,col 9)-(line 1478,col 118)",
            "(line 1479,col 9)-(line 1479,col 75)",
            "(line 1481,col 9)-(line 1481,col 103)",
            "(line 1482,col 9)-(line 1482,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_CharBuffers()",
        "snippet": "    public void testDefaultIfEmpty_CharBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), null));\n        // Tests compatibility for the API return type\n        CharBuffer s = StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1485,
        "end_line": 1492,
        "comment": "",
        "child_ranges": [
            "(line 1486,col 9)-(line 1486,col 114)",
            "(line 1487,col 9)-(line 1487,col 116)",
            "(line 1488,col 9)-(line 1488,col 74)",
            "(line 1490,col 9)-(line 1490,col 99)",
            "(line 1491,col 9)-(line 1491,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_CharBuffers()",
        "snippet": "    public void testDefaultIfBlank_CharBuffers() {\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\" \"), CharBuffer.wrap(\"NULL\")).toString());\n        assertEquals(\"abc\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\n        assertNull(StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), null));\n        // Tests compatibility for the API return type\n        CharBuffer s = StringUtils.defaultIfBlank(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\n        assertEquals(\"abc\", s.toString());\n    }\n",
        "begin_line": 1494,
        "end_line": 1502,
        "comment": "",
        "child_ranges": [
            "(line 1495,col 9)-(line 1495,col 114)",
            "(line 1496,col 9)-(line 1496,col 115)",
            "(line 1497,col 9)-(line 1497,col 116)",
            "(line 1498,col 9)-(line 1498,col 74)",
            "(line 1500,col 9)-(line 1500,col 99)",
            "(line 1501,col 9)-(line 1501,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringInt()",
        "snippet": "    public void testAbbreviate_StringInt() {\n        assertEquals(null, StringUtils.abbreviate(null, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 10));\n        assertEquals(\"short\", StringUtils.abbreviate(\"short\", 10));\n        assertEquals(\"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n\n        String raspberry = \"raspberry peach\";\n        assertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n        assertEquals(\"abc...\", StringUtils.abbreviate(\"abcdefg\", 6));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 7));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 8));\n        assertEquals(\"a...\", StringUtils.abbreviate(\"abcdefg\", 4));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\n        \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abc\", 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }              \n    }\n",
        "begin_line": 1505,
        "end_line": 1528,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1506,col 9)-(line 1506,col 61)",
            "(line 1507,col 9)-(line 1507,col 57)",
            "(line 1508,col 9)-(line 1508,col 67)",
            "(line 1509,col 9)-(line 1509,col 134)",
            "(line 1511,col 9)-(line 1511,col 45)",
            "(line 1512,col 9)-(line 1512,col 78)",
            "(line 1513,col 9)-(line 1513,col 87)",
            "(line 1514,col 9)-(line 1514,col 87)",
            "(line 1515,col 9)-(line 1515,col 69)",
            "(line 1516,col 9)-(line 1516,col 70)",
            "(line 1517,col 9)-(line 1517,col 70)",
            "(line 1518,col 9)-(line 1518,col 67)",
            "(line 1519,col 9)-(line 1519,col 56)",
            "(line 1521,col 9)-(line 1527,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringIntInt()",
        "snippet": "    public void testAbbreviate_StringIntInt() {\n        assertEquals(null, StringUtils.abbreviate(null, 10, 12));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n        \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abcdefghij\", 0, 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }      \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abcdefghij\", 5, 6);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }      \n        \n\n        String raspberry = \"raspberry peach\";\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n\n        assertEquals(null, StringUtils.abbreviate(null, 7, 14));\n        assertAbbreviateWithOffset(\"abcdefg...\", -1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 0, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 2, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 3, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 4, 10);\n        assertAbbreviateWithOffset(\"...fghi...\", 5, 10);\n        assertAbbreviateWithOffset(\"...ghij...\", 6, 10);\n        assertAbbreviateWithOffset(\"...hijk...\", 7, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 8, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 9, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 11, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 12, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 13, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 14, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 15, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 16, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", Integer.MAX_VALUE, 10);\n    }\n",
        "begin_line": 1530,
        "end_line": 1575,
        "comment": "",
        "child_ranges": [
            "(line 1531,col 9)-(line 1531,col 65)",
            "(line 1532,col 9)-(line 1532,col 60)",
            "(line 1533,col 9)-(line 1533,col 60)",
            "(line 1535,col 9)-(line 1541,col 9)",
            "(line 1542,col 9)-(line 1548,col 9)",
            "(line 1551,col 9)-(line 1551,col 45)",
            "(line 1552,col 9)-(line 1552,col 83)",
            "(line 1554,col 9)-(line 1554,col 64)",
            "(line 1555,col 9)-(line 1555,col 57)",
            "(line 1556,col 9)-(line 1556,col 56)",
            "(line 1557,col 9)-(line 1557,col 56)",
            "(line 1558,col 9)-(line 1558,col 56)",
            "(line 1559,col 9)-(line 1559,col 56)",
            "(line 1560,col 9)-(line 1560,col 56)",
            "(line 1561,col 9)-(line 1561,col 56)",
            "(line 1562,col 9)-(line 1562,col 56)",
            "(line 1563,col 9)-(line 1563,col 56)",
            "(line 1564,col 9)-(line 1564,col 56)",
            "(line 1565,col 9)-(line 1565,col 56)",
            "(line 1566,col 9)-(line 1566,col 57)",
            "(line 1567,col 9)-(line 1567,col 57)",
            "(line 1568,col 9)-(line 1568,col 57)",
            "(line 1569,col 9)-(line 1569,col 57)",
            "(line 1570,col 9)-(line 1570,col 57)",
            "(line 1571,col 9)-(line 1571,col 57)",
            "(line 1572,col 9)-(line 1572,col 57)",
            "(line 1573,col 9)-(line 1573,col 57)",
            "(line 1574,col 9)-(line 1574,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.assertAbbreviateWithOffset(java.lang.String, int, int)",
        "snippet": "    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\n        String abcdefghijklmno = \"abcdefghijklmno\";\n        String message = \"abbreviate(String,int,int) failed\";\n        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n        if (offset >= 0 && offset < abcdefghijklmno.length()) {\n            assertTrue(message + \" -- should contain offset character\",\n                    actual.indexOf((char)('a'+offset)) != -1);\n        }\n        assertTrue(message + \" -- should not be greater than maxWidth\",\n                actual.length() <= maxWidth);\n        assertEquals(message, expected, actual);\n    }\n",
        "begin_line": 1577,
        "end_line": 1588,
        "comment": "",
        "child_ranges": [
            "(line 1578,col 9)-(line 1578,col 51)",
            "(line 1579,col 9)-(line 1579,col 61)",
            "(line 1580,col 9)-(line 1580,col 82)",
            "(line 1581,col 9)-(line 1584,col 9)",
            "(line 1585,col 9)-(line 1586,col 45)",
            "(line 1587,col 9)-(line 1587,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviateMiddle()",
        "snippet": "    public void testAbbreviateMiddle() {\n        // javadoc examples\n        assertNull( StringUtils.abbreviateMiddle(null, null, 0) );\n        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", null, 0) );\n        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 0) );\n        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 3) );\n        assertEquals( \"ab.f\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4) );\n\n        // JIRA issue (LANG-405) example (slightly different than actual expected result)\n        assertEquals( \n            \"A very long text with un...f the text is complete.\",\n            StringUtils.abbreviateMiddle(\n                \"A very long text with unimportant stuff in the middle but interesting start and \" +\n                \"end to see if the text is complete.\", \"...\", 50) );\n\n        // Test a much longer text :)\n        String longText = \"Start text\" + StringUtils.repeat(\"x\", 10000) + \"Close text\";\n        assertEquals( \n            \"Start text->Close text\",\n            StringUtils.abbreviateMiddle( longText, \"->\", 22 ) );\n\n        // Test negative length\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", -1));\n\n        // Test boundaries\n        // Fails to change anything as method ensures first and last char are kept\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 1));\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 2));\n\n        // Test length of n=1\n        assertEquals(\"a\", StringUtils.abbreviateMiddle(\"a\", \".\", 1));\n\n        // Test smallest length that can lead to success\n        assertEquals(\"a.d\", StringUtils.abbreviateMiddle(\"abcd\", \".\", 3));\n\n        // More from LANG-405\n        assertEquals(\"a..f\", StringUtils.abbreviateMiddle(\"abcdef\", \"..\", 4));\n        assertEquals(\"ab.ef\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 5));\n    }\n",
        "begin_line": 1590,
        "end_line": 1628,
        "comment": "",
        "child_ranges": [
            "(line 1592,col 9)-(line 1592,col 66)",
            "(line 1593,col 9)-(line 1593,col 76)",
            "(line 1594,col 9)-(line 1594,col 75)",
            "(line 1595,col 9)-(line 1595,col 75)",
            "(line 1596,col 9)-(line 1596,col 79)",
            "(line 1599,col 9)-(line 1603,col 68)",
            "(line 1606,col 9)-(line 1606,col 87)",
            "(line 1607,col 9)-(line 1609,col 65)",
            "(line 1612,col 9)-(line 1612,col 74)",
            "(line 1616,col 9)-(line 1616,col 73)",
            "(line 1617,col 9)-(line 1617,col 73)",
            "(line 1620,col 9)-(line 1620,col 69)",
            "(line 1623,col 9)-(line 1623,col 74)",
            "(line 1626,col 9)-(line 1626,col 78)",
            "(line 1627,col 9)-(line 1627,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifference_StringString()",
        "snippet": "    public void testDifference_StringString() {\n        assertEquals(null, StringUtils.difference(null, null));\n        assertEquals(\"\", StringUtils.difference(\"\", \"\"));\n        assertEquals(\"abc\", StringUtils.difference(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"\"));\n        assertEquals(\"i am a robot\", StringUtils.difference(null, \"i am a robot\"));\n        assertEquals(\"i am a machine\", StringUtils.difference(\"i am a machine\", null));\n        assertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"abc\"));\n        assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n    }\n",
        "begin_line": 1631,
        "end_line": 1641,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1632,col 9)-(line 1632,col 63)",
            "(line 1633,col 9)-(line 1633,col 57)",
            "(line 1634,col 9)-(line 1634,col 63)",
            "(line 1635,col 9)-(line 1635,col 60)",
            "(line 1636,col 9)-(line 1636,col 83)",
            "(line 1637,col 9)-(line 1637,col 87)",
            "(line 1638,col 9)-(line 1638,col 88)",
            "(line 1639,col 9)-(line 1639,col 63)",
            "(line 1640,col 9)-(line 1640,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringString()",
        "snippet": "    public void testDifferenceAt_StringString() {\n        assertEquals(-1, StringUtils.indexOfDifference(null, null));\n        assertEquals(0, StringUtils.indexOfDifference(null, \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"\", \"abc\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"abc\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a machine\", null));\n        assertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"foo\", \"foo\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a robot\", \"you are a robot\"));\n        //System.out.println(\"indexOfDiff: \" + StringUtils.indexOfDifference(\"i am a robot\", \"not machine\"));\n    }\n",
        "begin_line": 1643,
        "end_line": 1654,
        "comment": "",
        "child_ranges": [
            "(line 1644,col 9)-(line 1644,col 68)",
            "(line 1645,col 9)-(line 1645,col 77)",
            "(line 1646,col 9)-(line 1646,col 64)",
            "(line 1647,col 9)-(line 1647,col 66)",
            "(line 1648,col 9)-(line 1648,col 66)",
            "(line 1649,col 9)-(line 1649,col 79)",
            "(line 1650,col 9)-(line 1650,col 89)",
            "(line 1651,col 9)-(line 1651,col 70)",
            "(line 1652,col 9)-(line 1652,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringString()",
        "snippet": "    public void testGetLevenshteinDistance_StringString() {\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\") );\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(\"a\", null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(null, \"a\");\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 1657,
        "end_line": 1682,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1658,col 9)-(line 1658,col 69)",
            "(line 1659,col 9)-(line 1659,col 70)",
            "(line 1660,col 9)-(line 1660,col 76)",
            "(line 1661,col 9)-(line 1661,col 76)",
            "(line 1662,col 9)-(line 1662,col 75)",
            "(line 1663,col 9)-(line 1663,col 82)",
            "(line 1664,col 9)-(line 1664,col 82)",
            "(line 1665,col 9)-(line 1665,col 82)",
            "(line 1666,col 9)-(line 1666,col 82)",
            "(line 1667,col 9)-(line 1667,col 79)",
            "(line 1668,col 9)-(line 1674,col 9)",
            "(line 1675,col 9)-(line 1681,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringStringInt()",
        "snippet": "    public void testGetLevenshteinDistance_StringStringInt() {\n        // empty strings\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\", 0));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 8));\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 7));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 6));\n\n        // unequal strings, zero threshold\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"b\", \"a\", 0));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"b\", 0));\n    \n        // equal strings\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"aa\", \"aa\", 0));\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"aa\", \"aa\", 2));\n\n        // same length\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaa\", \"bbb\", 2));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"aaa\", \"bbb\", 3));\n    \n        // big stripe\n        assertEquals(6, StringUtils.getLevenshteinDistance(\"aaaaaa\", \"b\", 10));\n\n        // distance less than threshold\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 8));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 4));\n    \n        // distance equal to threshold\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 7));\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 3));\n\n        // distance greater than threshold\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 2));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"bbb\", \"a\", 2));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 6));\n\n        // stripe runs off array, strings not similar\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 1));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"bbb\", \"a\", 1));\n\n        // stripe runs off array, strings are similar\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"12345\", \"1234567\", 1));\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"1234567\", \"12345\", 1));\n\n        // old getLevenshteinDistance test cases\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\",1) );\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\",3) );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\",7) );\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\",6) );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\",7) );\n        assertEquals(-1, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\",6) );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\",8) );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\",8) );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\",1) );\n\n        // exceptions\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(\"a\", null, 0);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(null, \"a\", 0);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(\"a\", \"a\", -1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 1684,
        "end_line": 1761,
        "comment": "",
        "child_ranges": [
            "(line 1686,col 9)-(line 1686,col 71)",
            "(line 1687,col 9)-(line 1687,col 78)",
            "(line 1688,col 9)-(line 1688,col 78)",
            "(line 1689,col 9)-(line 1689,col 79)",
            "(line 1692,col 9)-(line 1692,col 74)",
            "(line 1693,col 9)-(line 1693,col 74)",
            "(line 1696,col 9)-(line 1696,col 75)",
            "(line 1697,col 9)-(line 1697,col 75)",
            "(line 1700,col 9)-(line 1700,col 78)",
            "(line 1701,col 9)-(line 1701,col 77)",
            "(line 1704,col 9)-(line 1704,col 79)",
            "(line 1707,col 9)-(line 1707,col 79)",
            "(line 1708,col 9)-(line 1708,col 75)",
            "(line 1711,col 9)-(line 1711,col 79)",
            "(line 1712,col 9)-(line 1712,col 75)",
            "(line 1715,col 9)-(line 1715,col 76)",
            "(line 1716,col 9)-(line 1716,col 76)",
            "(line 1717,col 9)-(line 1717,col 80)",
            "(line 1720,col 9)-(line 1720,col 76)",
            "(line 1721,col 9)-(line 1721,col 76)",
            "(line 1724,col 9)-(line 1724,col 84)",
            "(line 1725,col 9)-(line 1725,col 84)",
            "(line 1728,col 9)-(line 1728,col 78)",
            "(line 1729,col 9)-(line 1729,col 77)",
            "(line 1730,col 9)-(line 1730,col 84)",
            "(line 1731,col 9)-(line 1731,col 85)",
            "(line 1732,col 9)-(line 1732,col 84)",
            "(line 1733,col 9)-(line 1733,col 85)",
            "(line 1734,col 9)-(line 1734,col 84)",
            "(line 1735,col 9)-(line 1735,col 84)",
            "(line 1736,col 9)-(line 1736,col 81)",
            "(line 1739,col 9)-(line 1745,col 9)",
            "(line 1746,col 9)-(line 1752,col 9)",
            "(line 1754,col 9)-(line 1760,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testEMPTY()",
        "snippet": "    public void testEMPTY() {\n        assertNotNull(StringUtils.EMPTY);\n        assertEquals(\"\", StringUtils.EMPTY);\n        assertEquals(0, StringUtils.EMPTY.length());\n    }\n",
        "begin_line": 1766,
        "end_line": 1770,
        "comment": "\n     * A sanity check for {@link StringUtils#EMPTY}.\n     ",
        "child_ranges": [
            "(line 1767,col 9)-(line 1767,col 41)",
            "(line 1768,col 9)-(line 1768,col 44)",
            "(line 1769,col 9)-(line 1769,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllLowerCase()",
        "snippet": "    public void testIsAllLowerCase() {\n        assertFalse(StringUtils.isAllLowerCase(null));\n        assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));\n        assertTrue(StringUtils.isAllLowerCase(\"abc\"));\n        assertFalse(StringUtils.isAllLowerCase(\"abc \"));\n        assertFalse(StringUtils.isAllLowerCase(\"abC\"));\n    }\n",
        "begin_line": 1775,
        "end_line": 1781,
        "comment": "\n     * Test for {@link StringUtils#isAllLowerCase(CharSequence)}.\n     ",
        "child_ranges": [
            "(line 1776,col 9)-(line 1776,col 54)",
            "(line 1777,col 9)-(line 1777,col 67)",
            "(line 1778,col 9)-(line 1778,col 54)",
            "(line 1779,col 9)-(line 1779,col 56)",
            "(line 1780,col 9)-(line 1780,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllUpperCase()",
        "snippet": "    public void testIsAllUpperCase() {\n        assertFalse(StringUtils.isAllUpperCase(null));\n        assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));\n        assertTrue(StringUtils.isAllUpperCase(\"ABC\"));\n        assertFalse(StringUtils.isAllUpperCase(\"ABC \"));\n        assertFalse(StringUtils.isAllUpperCase(\"aBC\"));\n    }\n",
        "begin_line": 1786,
        "end_line": 1792,
        "comment": "\n     * Test for {@link StringUtils#isAllUpperCase(CharSequence)}.\n     ",
        "child_ranges": [
            "(line 1787,col 9)-(line 1787,col 54)",
            "(line 1788,col 9)-(line 1788,col 67)",
            "(line 1789,col 9)-(line 1789,col 54)",
            "(line 1790,col 9)-(line 1790,col 56)",
            "(line 1791,col 9)-(line 1791,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStart()",
        "snippet": "    public void testRemoveStart() {\n        // StringUtils.removeStart(\"\", *)        = \"\"\n        assertNull(StringUtils.removeStart(null, null));\n        assertNull(StringUtils.removeStart(null, \"\"));\n        assertNull(StringUtils.removeStart(null, \"a\"));\n        \n        // StringUtils.removeStart(*, null)      = *\n        assertEquals(StringUtils.removeStart(\"\", null), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(StringUtils.removeStart(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"\"), \"domain.com\");        \n        assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");        \n    }\n",
        "begin_line": 1794,
        "end_line": 1810,
        "comment": "",
        "child_ranges": [
            "(line 1796,col 9)-(line 1796,col 56)",
            "(line 1797,col 9)-(line 1797,col 54)",
            "(line 1798,col 9)-(line 1798,col 55)",
            "(line 1801,col 9)-(line 1801,col 60)",
            "(line 1802,col 9)-(line 1802,col 58)",
            "(line 1803,col 9)-(line 1803,col 59)",
            "(line 1806,col 9)-(line 1806,col 86)",
            "(line 1807,col 9)-(line 1807,col 82)",
            "(line 1808,col 9)-(line 1808,col 78)",
            "(line 1809,col 9)-(line 1809,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase()",
        "snippet": "    public void testRemoveStartIgnoreCase() {\n        // StringUtils.removeStart(\"\", *)        = \"\"\n        assertNull(\"removeStartIgnoreCase(null, null)\", StringUtils.removeStartIgnoreCase(null, null));\n        assertNull(\"removeStartIgnoreCase(null, \\\"\\\")\", StringUtils.removeStartIgnoreCase(null, \"\"));\n        assertNull(\"removeStartIgnoreCase(null, \\\"a\\\")\", StringUtils.removeStartIgnoreCase(null, \"a\"));\n        \n        // StringUtils.removeStart(*, null)      = *\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", null)\", StringUtils.removeStartIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"\"), \"domain.com\");        \n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeStartIgnoreCase(\"domain.com\", null), \"domain.com\");        \n        \n        // Case insensitive:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"WWW.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\"), \"domain.com\");\n    }\n",
        "begin_line": 1812,
        "end_line": 1831,
        "comment": "",
        "child_ranges": [
            "(line 1814,col 9)-(line 1814,col 103)",
            "(line 1815,col 9)-(line 1815,col 101)",
            "(line 1816,col 9)-(line 1816,col 103)",
            "(line 1819,col 9)-(line 1819,col 107)",
            "(line 1820,col 9)-(line 1820,col 105)",
            "(line 1821,col 9)-(line 1821,col 107)",
            "(line 1824,col 9)-(line 1824,col 151)",
            "(line 1825,col 9)-(line 1825,col 143)",
            "(line 1826,col 9)-(line 1826,col 135)",
            "(line 1827,col 9)-(line 1827,col 137)",
            "(line 1830,col 9)-(line 1830,col 151)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEnd()",
        "snippet": "    public void testRemoveEnd() {\n        // StringUtils.removeEnd(\"\", *)        = \"\"\n        assertNull(StringUtils.removeEnd(null, null));\n        assertNull(StringUtils.removeEnd(null, \"\"));\n        assertNull(StringUtils.removeEnd(null, \"a\"));\n        \n        // StringUtils.removeEnd(*, null)      = *\n        assertEquals(StringUtils.removeEnd(\"\", null), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(StringUtils.removeEnd(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(StringUtils.removeEnd(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"domain.com\", \"\"), \"domain.com\");   \n        assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");   \n    }\n",
        "begin_line": 1833,
        "end_line": 1850,
        "comment": "",
        "child_ranges": [
            "(line 1835,col 9)-(line 1835,col 54)",
            "(line 1836,col 9)-(line 1836,col 52)",
            "(line 1837,col 9)-(line 1837,col 53)",
            "(line 1840,col 9)-(line 1840,col 58)",
            "(line 1841,col 9)-(line 1841,col 56)",
            "(line 1842,col 9)-(line 1842,col 57)",
            "(line 1845,col 9)-(line 1845,col 90)",
            "(line 1846,col 9)-(line 1846,col 84)",
            "(line 1847,col 9)-(line 1847,col 80)",
            "(line 1848,col 9)-(line 1848,col 76)",
            "(line 1849,col 9)-(line 1849,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase()",
        "snippet": "    public void testRemoveEndIgnoreCase() {\n        // StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\n        assertNull(\"removeEndIgnoreCase(null, null)\", StringUtils.removeEndIgnoreCase(null, null));\n        assertNull(\"removeEndIgnoreCase(null, \\\"\\\")\", StringUtils.removeEndIgnoreCase(null, \"\"));\n        assertNull(\"removeEndIgnoreCase(null, \\\"a\\\")\", StringUtils.removeEndIgnoreCase(null, \"a\"));\n        \n        // StringUtils.removeEnd(*, null)      = *\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", null)\", StringUtils.removeEndIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com.\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"domain.com\", \"\"), \"domain.com\");   \n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeEndIgnoreCase(\"domain.com\", null), \"domain.com\");   \n\n        // Case insensitive:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".COM\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.COM\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.COM\", \".com\"), \"www.domain\");\n    }\n",
        "begin_line": 1852,
        "end_line": 1873,
        "comment": "",
        "child_ranges": [
            "(line 1854,col 9)-(line 1854,col 99)",
            "(line 1855,col 9)-(line 1855,col 97)",
            "(line 1856,col 9)-(line 1856,col 99)",
            "(line 1859,col 9)-(line 1859,col 103)",
            "(line 1860,col 9)-(line 1860,col 101)",
            "(line 1861,col 9)-(line 1861,col 103)",
            "(line 1864,col 9)-(line 1864,col 154)",
            "(line 1865,col 9)-(line 1865,col 147)",
            "(line 1866,col 9)-(line 1866,col 139)",
            "(line 1867,col 9)-(line 1867,col 131)",
            "(line 1868,col 9)-(line 1868,col 133)",
            "(line 1871,col 9)-(line 1871,col 147)",
            "(line 1872,col 9)-(line 1872,col 147)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_String()",
        "snippet": "    public void testRemove_String() {\n        // StringUtils.remove(null, *)        = null\n        assertEquals(null, StringUtils.remove(null, null));\n        assertEquals(null, StringUtils.remove(null, \"\"));\n        assertEquals(null, StringUtils.remove(null, \"a\"));\n        \n        // StringUtils.remove(\"\", *)          = \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"a\"));\n        \n        // StringUtils.remove(*, null)        = *\n        assertEquals(null, StringUtils.remove(null, null));\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"a\", StringUtils.remove(\"a\", null));\n        \n        // StringUtils.remove(*, \"\")          = *\n        assertEquals(null, StringUtils.remove(null, \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"a\", StringUtils.remove(\"a\", \"\"));\n        \n        // StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n        assertEquals(\"qd\", StringUtils.remove(\"queued\", \"ue\"));\n        \n        // StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", \"zz\"));\n    }\n",
        "begin_line": 1875,
        "end_line": 1901,
        "comment": "",
        "child_ranges": [
            "(line 1877,col 9)-(line 1877,col 59)",
            "(line 1878,col 9)-(line 1878,col 57)",
            "(line 1879,col 9)-(line 1879,col 58)",
            "(line 1882,col 9)-(line 1882,col 55)",
            "(line 1883,col 9)-(line 1883,col 53)",
            "(line 1884,col 9)-(line 1884,col 54)",
            "(line 1887,col 9)-(line 1887,col 59)",
            "(line 1888,col 9)-(line 1888,col 55)",
            "(line 1889,col 9)-(line 1889,col 57)",
            "(line 1892,col 9)-(line 1892,col 57)",
            "(line 1893,col 9)-(line 1893,col 53)",
            "(line 1894,col 9)-(line 1894,col 55)",
            "(line 1897,col 9)-(line 1897,col 63)",
            "(line 1900,col 9)-(line 1900,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_char()",
        "snippet": "    public void testRemove_char() {\n        // StringUtils.remove(null, *)       = null\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        \n        // StringUtils.remove(\"\", *)          = \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        \n        // StringUtils.remove(\"queued\", 'u') = \"qeed\"\n        assertEquals(\"qeed\", StringUtils.remove(\"queued\", 'u'));\n        \n        // StringUtils.remove(\"queued\", 'z') = \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\n    }\n",
        "begin_line": 1903,
        "end_line": 1919,
        "comment": "",
        "child_ranges": [
            "(line 1905,col 9)-(line 1905,col 58)",
            "(line 1906,col 9)-(line 1906,col 58)",
            "(line 1907,col 9)-(line 1907,col 58)",
            "(line 1910,col 9)-(line 1910,col 54)",
            "(line 1911,col 9)-(line 1911,col 54)",
            "(line 1912,col 9)-(line 1912,col 54)",
            "(line 1915,col 9)-(line 1915,col 64)",
            "(line 1918,col 9)-(line 1918,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringArray()",
        "snippet": "    public void testDifferenceAt_StringArray(){        \n        assertEquals(-1, StringUtils.indexOfDifference((String[])null));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"\", \"\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", null, null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}));\n        assertEquals(1, StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}));\n        assertEquals(7, StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}));\n    }\n",
        "begin_line": 1921,
        "end_line": 1939,
        "comment": "",
        "child_ranges": [
            "(line 1922,col 9)-(line 1922,col 72)",
            "(line 1923,col 9)-(line 1923,col 73)",
            "(line 1924,col 9)-(line 1924,col 78)",
            "(line 1925,col 9)-(line 1925,col 83)",
            "(line 1926,col 9)-(line 1926,col 79)",
            "(line 1927,col 9)-(line 1927,col 80)",
            "(line 1928,col 9)-(line 1928,col 89)",
            "(line 1929,col 9)-(line 1929,col 89)",
            "(line 1930,col 9)-(line 1930,col 81)",
            "(line 1931,col 9)-(line 1931,col 81)",
            "(line 1932,col 9)-(line 1932,col 85)",
            "(line 1933,col 9)-(line 1933,col 82)",
            "(line 1934,col 9)-(line 1934,col 85)",
            "(line 1935,col 9)-(line 1935,col 88)",
            "(line 1936,col 9)-(line 1936,col 86)",
            "(line 1937,col 9)-(line 1937,col 86)",
            "(line 1938,col 9)-(line 1938,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testGetCommonPrefix_StringArray()",
        "snippet": "    public void testGetCommonPrefix_StringArray(){\n        assertEquals(\"\", StringUtils.getCommonPrefix((String[])null));\n        assertEquals(\"\", StringUtils.getCommonPrefix());\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(null, null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", \"\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"abc\", null, null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(null, null, \"abc\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"abc\", \"\"));\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\", \"abc\"));\n        assertEquals(\"a\", StringUtils.getCommonPrefix(\"abc\", \"a\"));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(\"ab\", \"abxyz\"));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(\"abcde\", \"abxyz\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"abcde\", \"xyz\"));\n        assertEquals(\"\", StringUtils.getCommonPrefix(\"xyz\", \"abcde\"));\n        assertEquals(\"i am a \", StringUtils.getCommonPrefix(\"i am a machine\", \"i am a robot\"));\n    }\n",
        "begin_line": 1941,
        "end_line": 1959,
        "comment": "",
        "child_ranges": [
            "(line 1942,col 9)-(line 1942,col 70)",
            "(line 1943,col 9)-(line 1943,col 56)",
            "(line 1944,col 9)-(line 1944,col 64)",
            "(line 1945,col 9)-(line 1945,col 66)",
            "(line 1946,col 9)-(line 1946,col 62)",
            "(line 1947,col 9)-(line 1947,col 64)",
            "(line 1948,col 9)-(line 1948,col 73)",
            "(line 1949,col 9)-(line 1949,col 73)",
            "(line 1950,col 9)-(line 1950,col 65)",
            "(line 1951,col 9)-(line 1951,col 65)",
            "(line 1952,col 9)-(line 1952,col 71)",
            "(line 1953,col 9)-(line 1953,col 67)",
            "(line 1954,col 9)-(line 1954,col 71)",
            "(line 1955,col 9)-(line 1955,col 74)",
            "(line 1956,col 9)-(line 1956,col 70)",
            "(line 1957,col 9)-(line 1957,col 70)",
            "(line 1958,col 9)-(line 1958,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testNormalizeSpace()",
        "snippet": "    public void testNormalizeSpace() {\n        assertEquals(null, StringUtils.normalizeSpace(null));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\" \"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\t\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\n\"));        \n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u0009\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u000B\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u000C\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001C\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001D\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001E\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001F\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\f\"));\n        assertEquals(\"\", StringUtils.normalizeSpace(\"\\r\"));\n        assertEquals(\"a\", StringUtils.normalizeSpace(\"  a  \"));\n        assertEquals(\"a b c\", StringUtils.normalizeSpace(\"  a  b   c  \"));\n        assertEquals(\"a b c\", StringUtils.normalizeSpace(\"a\\t\\f\\r  b\\u000B   c\\n\"));\n    }\n",
        "begin_line": 1961,
        "end_line": 1979,
        "comment": "",
        "child_ranges": [
            "(line 1962,col 9)-(line 1962,col 61)",
            "(line 1963,col 9)-(line 1963,col 57)",
            "(line 1964,col 9)-(line 1964,col 58)",
            "(line 1965,col 9)-(line 1965,col 59)",
            "(line 1966,col 9)-(line 1966,col 59)",
            "(line 1967,col 9)-(line 1967,col 63)",
            "(line 1968,col 9)-(line 1968,col 63)",
            "(line 1969,col 9)-(line 1969,col 63)",
            "(line 1970,col 9)-(line 1970,col 63)",
            "(line 1971,col 9)-(line 1971,col 63)",
            "(line 1972,col 9)-(line 1972,col 63)",
            "(line 1973,col 9)-(line 1973,col 63)",
            "(line 1974,col 9)-(line 1974,col 59)",
            "(line 1975,col 9)-(line 1975,col 59)",
            "(line 1976,col 9)-(line 1976,col 63)",
            "(line 1977,col 9)-(line 1977,col 74)",
            "(line 1978,col 9)-(line 1978,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLANG666()",
        "snippet": "    public void testLANG666() {\n        assertEquals(\"12\",StringUtils.stripEnd(\"120.00\", \".0\"));\n        assertEquals(\"121\",StringUtils.stripEnd(\"121.00\", \".0\"));\n    }\n",
        "begin_line": 1981,
        "end_line": 1984,
        "comment": "",
        "child_ranges": [
            "(line 1982,col 9)-(line 1982,col 64)",
            "(line 1983,col 9)-(line 1983,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testStringUtilsCharSequenceContract()",
        "snippet": "    public void testStringUtilsCharSequenceContract() {\n        Class<StringUtils> c = StringUtils.class;\n        Method[] methods = c.getMethods();\n        for (int i=0; i<methods.length; i++) {\n            Method m = methods[i];\n            if (m.getReturnType() == String.class || m.getReturnType() == String[].class) {\n                // Assume this is mutable and ensure the first parameter is not CharSequence.\n                // It may be String or it may be something else (String[], Object, Object[]) so \n                // don't actively test for that.\n                Class<?>[] params = m.getParameterTypes();\n                if ( params.length > 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class)) {\n                    fail(\"The method \" + m + \" appears to be mutable in spirit and therefore must not accept a CharSequence\");\n                }\n            } else {\n                // Assume this is immutable in spirit and ensure the first parameter is not String.\n                // As above, it may be something other than CharSequence.\n                Class<?>[] params = m.getParameterTypes();\n                if ( params.length > 0 && (params[0] == String.class || params[0] == String[].class)) {\n                    fail(\"The method \" + m + \" appears to be immutable in spirit and therefore must not accept a String\");\n                }\n            }\n        }\n    }\n",
        "begin_line": 1990,
        "end_line": 2012,
        "comment": " This test enforces that this is done.",
        "child_ranges": [
            "(line 1991,col 9)-(line 1991,col 49)",
            "(line 1992,col 9)-(line 1992,col 42)",
            "(line 1993,col 9)-(line 2011,col 9)"
        ]
    }
]