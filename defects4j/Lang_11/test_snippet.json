[
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.RandomStringUtilsTest(java.lang.String)",
        "snippet": "    public RandomStringUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "\n     * Construct a new instance of RandomStringUtilsTest with the specified name\n     ",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new RandomStringUtils());\n        Constructor<?>[] cons = RandomStringUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(RandomStringUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(RandomStringUtils.class.getModifiers()));\n    }\n",
        "begin_line": 37,
        "end_line": 44,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 47)",
            "(line 39,col 9)-(line 39,col 82)",
            "(line 40,col 9)-(line 40,col 37)",
            "(line 41,col 9)-(line 41,col 70)",
            "(line 42,col 9)-(line 42,col 86)",
            "(line 43,col 9)-(line 43,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils()",
        "snippet": "    public void testRandomStringUtils() {\n        String r1 = RandomStringUtils.random(50);\n        assertEquals(\"random(50) length\", 50, r1.length());\n        String r2 = RandomStringUtils.random(50);\n        assertEquals(\"random(50) length\", 50, r2.length());\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.randomAscii(50);\n        assertEquals(\"randomAscii(50) length\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertTrue(\"char between 32 and 127\", r1.charAt(i) >= 32 && r1.charAt(i) <= 127);\n        }        \n        r2 = RandomStringUtils.randomAscii(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n\n        r1 = RandomStringUtils.randomAlphabetic(50);\n        assertEquals(\"randomAlphabetic(50)\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertEquals(\"r1 contains alphabetic\", true, Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)));\n        }\n        r2 = RandomStringUtils.randomAlphabetic(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.randomAlphanumeric(50);\n        assertEquals(\"randomAlphanumeric(50)\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertEquals(\"r1 contains alphanumeric\", true, Character.isLetterOrDigit(r1.charAt(i)));\n        }\n        r2 = RandomStringUtils.randomAlphabetic(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.randomNumeric(50);\n        assertEquals(\"randomNumeric(50)\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertEquals(\"r1 contains numeric\", true, Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)));\n        }\n        r2 = RandomStringUtils.randomNumeric(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        String set = \"abcdefg\";\n        r1 = RandomStringUtils.random(50, set);\n        assertEquals(\"random(50, \\\"abcdefg\\\")\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertTrue(\"random char in set\", set.indexOf(r1.charAt(i)) > -1);\n        }\n        r2 = RandomStringUtils.random(50, set);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.random(50, (String) null);\n        assertEquals(\"random(50) length\", 50, r1.length());\n        r2 = RandomStringUtils.random(50, (String) null);\n        assertEquals(\"random(50) length\", 50, r2.length());\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        set = \"stuvwxyz\";\n        r1 = RandomStringUtils.random(50, set.toCharArray());\n        assertEquals(\"random(50, \\\"stuvwxyz\\\")\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertTrue(\"random char in set\", set.indexOf(r1.charAt(i)) > -1);\n        }\n        r2 = RandomStringUtils.random(50, set);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.random(50, (char[]) null);\n        assertEquals(\"random(50) length\", 50, r1.length());\n        r2 = RandomStringUtils.random(50, (char[]) null);\n        assertEquals(\"random(50) length\", 50, r2.length());\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n\n        long seed = System.currentTimeMillis();\n        r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n        r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n        assertEquals(\"r1.equals(r2)\", r1, r2);\n\n        r1 = RandomStringUtils.random(0);\n        assertEquals(\"random(0).equals(\\\"\\\")\", \"\", r1);\n    }\n",
        "begin_line": 50,
        "end_line": 126,
        "comment": "\n     * Test the implementation\n     ",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 49)",
            "(line 52,col 9)-(line 52,col 59)",
            "(line 53,col 9)-(line 53,col 49)",
            "(line 54,col 9)-(line 54,col 59)",
            "(line 55,col 9)-(line 55,col 53)",
            "(line 57,col 9)-(line 57,col 47)",
            "(line 58,col 9)-(line 58,col 64)",
            "(line 59,col 9)-(line 61,col 9)",
            "(line 62,col 9)-(line 62,col 47)",
            "(line 63,col 9)-(line 63,col 53)",
            "(line 65,col 9)-(line 65,col 52)",
            "(line 66,col 9)-(line 66,col 62)",
            "(line 67,col 9)-(line 69,col 9)",
            "(line 70,col 9)-(line 70,col 52)",
            "(line 71,col 9)-(line 71,col 53)",
            "(line 73,col 9)-(line 73,col 54)",
            "(line 74,col 9)-(line 74,col 64)",
            "(line 75,col 9)-(line 77,col 9)",
            "(line 78,col 9)-(line 78,col 52)",
            "(line 79,col 9)-(line 79,col 53)",
            "(line 81,col 9)-(line 81,col 49)",
            "(line 82,col 9)-(line 82,col 59)",
            "(line 83,col 9)-(line 85,col 9)",
            "(line 86,col 9)-(line 86,col 49)",
            "(line 87,col 9)-(line 87,col 53)",
            "(line 89,col 9)-(line 89,col 31)",
            "(line 90,col 9)-(line 90,col 47)",
            "(line 91,col 9)-(line 91,col 65)",
            "(line 92,col 9)-(line 94,col 9)",
            "(line 95,col 9)-(line 95,col 47)",
            "(line 96,col 9)-(line 96,col 53)",
            "(line 98,col 9)-(line 98,col 57)",
            "(line 99,col 9)-(line 99,col 59)",
            "(line 100,col 9)-(line 100,col 57)",
            "(line 101,col 9)-(line 101,col 59)",
            "(line 102,col 9)-(line 102,col 53)",
            "(line 104,col 9)-(line 104,col 25)",
            "(line 105,col 9)-(line 105,col 61)",
            "(line 106,col 9)-(line 106,col 66)",
            "(line 107,col 9)-(line 109,col 9)",
            "(line 110,col 9)-(line 110,col 47)",
            "(line 111,col 9)-(line 111,col 53)",
            "(line 113,col 9)-(line 113,col 57)",
            "(line 114,col 9)-(line 114,col 59)",
            "(line 115,col 9)-(line 115,col 57)",
            "(line 116,col 9)-(line 116,col 59)",
            "(line 117,col 9)-(line 117,col 53)",
            "(line 119,col 9)-(line 119,col 47)",
            "(line 120,col 9)-(line 120,col 78)",
            "(line 121,col 9)-(line 121,col 78)",
            "(line 122,col 9)-(line 122,col 46)",
            "(line 124,col 9)-(line 124,col 41)",
            "(line 125,col 9)-(line 125,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testLANG805()",
        "snippet": "    public void testLANG805() {\n        long seed = System.currentTimeMillis();\n        assertEquals(\"aaa\", RandomStringUtils.random(3,0,0,false,false,new char[]{'a'},new Random(seed)));\n    }\n",
        "begin_line": 128,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 47)",
            "(line 130,col 9)-(line 130,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testLANG807()",
        "snippet": "    public void testLANG807() {\n        try {\n            RandomStringUtils.random(3,5,5,false,false);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) { // distinguish from Random#nextInt message\n            final String msg = ex.getMessage();\n            assertTrue(\"Message (\" + msg + \") must contain 'start'\", msg.contains(\"start\"));\n            assertTrue(\"Message (\" + msg + \") must contain 'end'\", msg.contains(\"end\"));\n        }\n    }\n",
        "begin_line": 133,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 141,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testExceptions()",
        "snippet": "    public void testExceptions() {\n        final char[] DUMMY = new char[]{'a'}; // valid char array\n        try {\n            RandomStringUtils.random(-1);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, true, true);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, DUMMY);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, \"\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, (String)null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 144,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 45)",
            "(line 146,col 9)-(line 149,col 48)",
            "(line 150,col 9)-(line 153,col 48)",
            "(line 154,col 9)-(line 157,col 48)",
            "(line 158,col 9)-(line 161,col 48)",
            "(line 162,col 9)-(line 165,col 48)",
            "(line 166,col 9)-(line 169,col 48)",
            "(line 170,col 9)-(line 173,col 48)",
            "(line 174,col 9)-(line 177,col 48)",
            "(line 178,col 9)-(line 181,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphaNumeric()",
        "snippet": "    public void testRandomAlphaNumeric() {}\n",
        "begin_line": 188,
        "end_line": 188,
        "comment": "\n     * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric\n     * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomNumeric()",
        "snippet": "    public void testRandomNumeric() {}\n",
        "begin_line": 213,
        "end_line": 213,
        "comment": "\n     * Make sure '0' and '9' are generated by randomNumeric\n     * This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphabetic()",
        "snippet": "    public void testRandomAlphabetic() {}\n",
        "begin_line": 238,
        "end_line": 238,
        "comment": "\n     * Make sure boundary alpha characters are generated by randomAlphabetic\n     * This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomAscii()",
        "snippet": "    public void testRandomAscii() {}\n",
        "begin_line": 263,
        "end_line": 263,
        "comment": "\n     * Make sure 32 and 127 are generated by randomNumeric\n     * This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsHomog()",
        "snippet": "    public void testRandomStringUtilsHomog() {}\n",
        "begin_line": 291,
        "end_line": 291,
        "comment": " \n     * Test homogeneity of random strings generated --\n     * i.e., test that characters show up with expected frequencies\n     * in generated strings.  Will fail randomly about 1 in 1000 times.\n     * Repeated failures indicate a problem.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.chiSquare(int[], int[])",
        "snippet": "    private double chiSquare(int[] expected, int[] observed) {\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = observed[i] - expected[i];\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }           \n",
        "begin_line": 320,
        "end_line": 328,
        "comment": "\n     * Computes Chi-Square statistic given observed and expected counts\n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     ",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 28)",
            "(line 322,col 9)-(line 322,col 26)",
            "(line 323,col 9)-(line 326,col 9)",
            "(line 327,col 9)-(line 327,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testLang100()",
        "snippet": "    public void testLang100() throws Exception {\n        int size = 5000;\n        String encoding = \"UTF-8\";\n        String orig = RandomStringUtils.random(size);\n        byte[] bytes = orig.getBytes(encoding);\n        String copy = new String(bytes, encoding);\n\n        // for a verbose compare:\n        for (int i=0; i < orig.length() && i < copy.length(); i++) {\n            char o = orig.charAt(i);\n            char c = copy.charAt(i);\n            assertEquals(\"differs at \" + i + \"(\" + Integer.toHexString(new Character(o).hashCode()) + \",\" +\n            Integer.toHexString(new Character(c).hashCode()) + \")\", o, c);\n        }\n        // compare length also\n        assertEquals(orig.length(), copy.length());\n        // just to be complete\n        assertEquals(orig, copy);\n    }\n",
        "begin_line": 338,
        "end_line": 356,
        "comment": "\n     * Checks if the string got by {@link RandomStringUtils#random(int)}\n     * can be converted to UTF-8 and back without loss.\n     *\n     * @see <a href=\"http://issues.apache.org/jira/browse/LANG-100\">LANG-100</a>\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 24)",
            "(line 340,col 9)-(line 340,col 34)",
            "(line 341,col 9)-(line 341,col 53)",
            "(line 342,col 9)-(line 342,col 47)",
            "(line 343,col 9)-(line 343,col 50)",
            "(line 346,col 9)-(line 351,col 9)",
            "(line 353,col 9)-(line 353,col 51)",
            "(line 355,col 9)-(line 355,col 33)"
        ]
    }
]