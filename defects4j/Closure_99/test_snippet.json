[
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.CheckGlobalThisTest()",
        "snippet": "  public CheckGlobalThisTest() {\n    this.parseTypeInfo = true;\n  }\n",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 5)-(line 26,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(Compiler compiler) {\n    return new CombinedCompilerPass(\n        compiler, new CheckGlobalThis(compiler, CheckLevel.ERROR));\n  }\n",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 31,col 5)-(line 32,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(java.lang.String)",
        "snippet": "  private void testFailure(String js) {\n    test(js, null, CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testGlobalThis1()",
        "snippet": "  public void testGlobalThis1() throws Exception {\n    testSame(\"var a = this;\");\n  }\n",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testGlobalThis2()",
        "snippet": "  public void testGlobalThis2() {\n    testFailure(\"this.foo = 5;\");\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 44,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testGlobalThis3()",
        "snippet": "  public void testGlobalThis3() {\n    testFailure(\"this[foo] = 5;\");\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testGlobalThis4()",
        "snippet": "  public void testGlobalThis4() {\n    testFailure(\"this['foo'] = 5;\");\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 5)-(line 52,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testGlobalThis5()",
        "snippet": "  public void testGlobalThis5() {\n    testFailure(\"(a = this).foo = 4;\");\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 5)-(line 56,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testGlobalThis6()",
        "snippet": "  public void testGlobalThis6() {\n    testSame(\"a = this;\");\n  }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testGlobalThis7()",
        "snippet": "  public void testGlobalThis7() {\n    testFailure(\"var a = this.foo;\");\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction1()",
        "snippet": "  public void testStaticFunction1() {\n    testSame(\"function a() { return this; }\");\n  }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction2()",
        "snippet": "  public void testStaticFunction2() {\n    testFailure(\"function a() { this.complex = 5; }\");\n  }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction3()",
        "snippet": "  public void testStaticFunction3() {\n    testSame(\"var a = function() { return this; }\");\n  }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction4()",
        "snippet": "  public void testStaticFunction4() {\n    testFailure(\"var a = function() { this.foo.bar = 6; }\");\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction5()",
        "snippet": "  public void testStaticFunction5() {\n    testSame(\"function a() { return function() { return this; } }\");\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction6()",
        "snippet": "  public void testStaticFunction6() {\n    testSame(\"function a() { return function() { this = 8; } }\");\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction7()",
        "snippet": "  public void testStaticFunction7() {\n    testSame(\"var a = function() { return function() { this = 8; } }\");\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction8()",
        "snippet": "  public void testStaticFunction8() {\n    testFailure(\"var a = function() { return this.foo; };\");\n  }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 96,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testConstructor1()",
        "snippet": "  public void testConstructor1() {\n    testSame(\"/** @constructor */function A() { this.m2 = 5; }\");\n  }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 100,col 5)-(line 100,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testConstructor2()",
        "snippet": "  public void testConstructor2() {\n    testSame(\"/** @constructor */var A = function() { this.m2 = 5; }\");\n  }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 5)-(line 104,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testConstructor3()",
        "snippet": "  public void testConstructor3() {\n    testSame(\"/** @constructor */a.A = function() { this.m2 = 5; }\");\n  }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 108,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testInterface1()",
        "snippet": "  public void testInterface1() {\n    testSame(\n        \"/** @interface */function A() { /** @type {string} */ this.m2; }\");\n  }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 113,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testOverride1()",
        "snippet": "  public void testOverride1() {\n    testSame(\"/** @constructor */function A() { } var a = new A();\" +\n             \"/** @override */ a.foo = function() { this.bar = 5; };\");\n  }\n",
        "begin_line": 116,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 117,col 5)-(line 118,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testThisJSDoc1()",
        "snippet": "  public void testThisJSDoc1() throws Exception {\n    testSame(\"/** @this whatever */function h() { this.foo = 56; }\");\n  }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 122,col 5)-(line 122,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testThisJSDoc2()",
        "snippet": "  public void testThisJSDoc2() throws Exception {\n    testSame(\"/** @this whatever */var h = function() { this.foo = 56; }\");\n  }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 126,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testThisJSDoc3()",
        "snippet": "  public void testThisJSDoc3() throws Exception {\n    testSame(\"/** @this whatever */foo.bar = function() { this.foo = 56; }\");\n  }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 130,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testThisJSDoc4()",
        "snippet": "  public void testThisJSDoc4() throws Exception {\n    testSame(\"/** @this whatever */function() { this.foo = 56; }\");\n  }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 134,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testThisJSDoc5()",
        "snippet": "  public void testThisJSDoc5() throws Exception {\n    testSame(\"function a() { /** @this x */function() { this.foo = 56; } }\");\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testMethod1()",
        "snippet": "  public void testMethod1() {\n    testSame(\"A.prototype.m1 = function() { this.m2 = 5; }\");\n  }\n",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 142,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testMethod2()",
        "snippet": "  public void testMethod2() {\n    testSame(\"a.B.prototype.m1 = function() { this.m2 = 5; }\");\n  }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testMethod3()",
        "snippet": "  public void testMethod3() {\n    testSame(\"a.b.c.D.prototype.m1 = function() { this.m2 = 5; }\");\n  }\n",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 5)-(line 150,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testMethod4()",
        "snippet": "  public void testMethod4() {\n    testSame(\"a.prototype['x' + 'y'] =  function() { this.foo = 3; };\");\n  }\n",
        "begin_line": 153,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 154,col 5)-(line 154,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testPropertyOfMethod()",
        "snippet": "  public void testPropertyOfMethod() {\n    testFailure(\"a.protoype.b = {}; \" +\n        \"a.prototype.b.c = function() { this.foo = 3; };\");\n  }\n",
        "begin_line": 157,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 158,col 5)-(line 159,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticMethod1()",
        "snippet": "  public void testStaticMethod1() {\n    testFailure(\"a.b = function() { this.m2 = 5; }\");\n  }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticMethod2()",
        "snippet": "  public void testStaticMethod2() {\n    testSame(\"a.b = function() { return function() { this.m2 = 5; } }\");\n  }\n",
        "begin_line": 166,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 167,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticMethod3()",
        "snippet": "  public void testStaticMethod3() {\n    testSame(\"a.b.c = function() { return function() { this.m2 = 5; } }\");\n  }\n",
        "begin_line": 170,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 171,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testMethodInStaticFunction()",
        "snippet": "  public void testMethodInStaticFunction() {\n    testSame(\"function f() { A.prototype.m1 = function() { this.m2 = 5; } }\");\n  }\n",
        "begin_line": 174,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 175,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunctionInMethod1()",
        "snippet": "  public void testStaticFunctionInMethod1() {\n    testSame(\"A.prototype.m1 = function() { function me() { this.m2 = 5; } }\");\n  }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunctionInMethod2()",
        "snippet": "  public void testStaticFunctionInMethod2() {\n    testSame(\"A.prototype.m1 = function() {\" +\n        \"  function me() {\" +\n        \"    function myself() {\" +\n        \"      function andI() { this.m2 = 5; } } } }\");\n  }\n",
        "begin_line": 182,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 183,col 5)-(line 186,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() {\n    testFailure(\"function f() { function g() { return this.x; } }\");\n  }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() {\n    testFailure(\"function f() { var g = function() { return this.x; } }\");\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testInnerFunction3()",
        "snippet": "  public void testInnerFunction3() {\n    testFailure(\n        \"function f() { var x = {}; x.y = function() { return this.x; } }\");\n  }\n",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 199,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThisTest.testInnerFunction4()",
        "snippet": "  public void testInnerFunction4() {\n    testSame(\n        \"function f() { var x = {}; x.y(function() { return this.x; }); }\");\n  }\n",
        "begin_line": 202,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 204,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 101,
        "end_line": 107,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 102,col 5)-(line 104,col 6)",
            "(line 105,col 5)-(line 105,col 39)",
            "(line 106,col 5)-(line 106,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 130,
        "end_line": 130,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 139,
        "end_line": 145,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 52)",
            "(line 141,col 5)-(line 142,col 65)",
            "(line 143,col 5)-(line 143,col 55)",
            "(line 144,col 5)-(line 144,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 148,col 5)-(line 148,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 155,
        "end_line": 159,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 158,col 5)-(line 158,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 179,
        "end_line": 182,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 29)",
            "(line 181,col 5)-(line 181,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 218,
        "end_line": 221,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 28)",
            "(line 220,col 5)-(line 220,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 241,
        "end_line": 249,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 243,col 5)-(line 245,col 40)",
            "(line 247,col 5)-(line 248,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 258,col 5)-(line 258,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 284,
        "end_line": 287,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 286,col 5)-(line 286,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 299,
        "end_line": 302,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 301,col 5)-(line 301,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 315,
        "end_line": 318,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 317,col 5)-(line 317,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 334,
        "end_line": 341,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 337,col 5)-(line 339,col 6)",
            "(line 340,col 5)-(line 340,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 357,
        "end_line": 373,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 360,col 5)-(line 360,col 41)",
            "(line 361,col 5)-(line 361,col 28)",
            "(line 363,col 5)-(line 363,col 43)",
            "(line 366,col 5)-(line 366,col 39)",
            "(line 367,col 5)-(line 368,col 58)",
            "(line 370,col 5)-(line 370,col 71)",
            "(line 372,col 5)-(line 372,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 381,
        "end_line": 383,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 382,col 5)-(line 382,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 393,
        "end_line": 395,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 394,col 5)-(line 394,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 407,
        "end_line": 410,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 409,col 5)-(line 409,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 425,
        "end_line": 436,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 427,col 5)-(line 427,col 41)",
            "(line 428,col 5)-(line 428,col 28)",
            "(line 430,col 5)-(line 430,col 56)",
            "(line 431,col 5)-(line 433,col 5)",
            "(line 434,col 5)-(line 434,col 55)",
            "(line 435,col 5)-(line 435,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 444,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 445,col 5)-(line 445,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 456,
        "end_line": 459,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 458,col 5)-(line 458,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 471,
        "end_line": 478,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 473,col 5)-(line 473,col 41)",
            "(line 474,col 5)-(line 474,col 28)",
            "(line 476,col 5)-(line 476,col 56)",
            "(line 477,col 5)-(line 477,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 485,
        "end_line": 487,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 486,col 5)-(line 486,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 496,
        "end_line": 498,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 497,col 5)-(line 497,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 508,
        "end_line": 514,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 509,col 5)-(line 513,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 524,
        "end_line": 526,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 525,col 5)-(line 525,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 539,
        "end_line": 545,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 541,col 5)-(line 543,col 6)",
            "(line 544,col 5)-(line 544,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 552,
        "end_line": 554,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 553,col 5)-(line 553,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 563,
        "end_line": 565,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 564,col 5)-(line 564,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 575,
        "end_line": 577,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 576,col 5)-(line 576,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 584,
        "end_line": 586,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 585,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 594,
        "end_line": 607,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 595,col 5)-(line 606,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 620,
        "end_line": 623,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 622,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          Normalize normalize = new Normalize(compiler, false);\n          normalize.process(externsRoot, mainRoot);\n          compiler.setNormalized();\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        Normalize normalize = new Normalize(compiler, false);\n        normalize.process(externsRootClone, mainRootClone);\n      }\n\n      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n    }\n  }\n",
        "begin_line": 640,
        "end_line": 821,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 643,col 5)-(line 643,col 51)",
            "(line 644,col 5)-(line 644,col 44)",
            "(line 646,col 5)-(line 646,col 39)",
            "(line 647,col 5)-(line 648,col 66)",
            "(line 650,col 5)-(line 650,col 44)",
            "(line 651,col 5)-(line 651,col 40)",
            "(line 654,col 5)-(line 654,col 38)",
            "(line 655,col 5)-(line 655,col 54)",
            "(line 656,col 5)-(line 656,col 50)",
            "(line 658,col 5)-(line 658,col 45)",
            "(line 659,col 5)-(line 659,col 68)",
            "(line 660,col 5)-(line 660,col 34)",
            "(line 661,col 5)-(line 661,col 59)",
            "(line 662,col 5)-(line 662,col 35)",
            "(line 664,col 5)-(line 665,col 39)",
            "(line 667,col 5)-(line 709,col 5)",
            "(line 711,col 5)-(line 820,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  private Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n      compiler.setNormalized();\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 826,
        "end_line": 845,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 827,col 5)-(line 827,col 41)",
            "(line 828,col 5)-(line 828,col 62)",
            "(line 829,col 5)-(line 831,col 5)",
            "(line 832,col 5)-(line 832,col 55)",
            "(line 833,col 5)-(line 833,col 39)",
            "(line 834,col 5)-(line 835,col 66)",
            "(line 836,col 5)-(line 836,col 44)",
            "(line 837,col 5)-(line 837,col 42)",
            "(line 839,col 5)-(line 843,col 5)",
            "(line 844,col 5)-(line 844,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 847,
        "end_line": 849,
        "comment": "",
        "child_ranges": [
            "(line 848,col 5)-(line 848,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 855,
        "end_line": 861,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 856,col 5)-(line 856,col 47)",
            "(line 857,col 5)-(line 859,col 5)",
            "(line 860,col 5)-(line 860,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 867,
        "end_line": 873,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 868,col 5)-(line 868,col 47)",
            "(line 869,col 5)-(line 871,col 5)",
            "(line 872,col 5)-(line 872,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 879,
        "end_line": 886,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 880,col 5)-(line 880,col 53)",
            "(line 881,col 5)-(line 884,col 5)",
            "(line 885,col 5)-(line 885,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 889,
        "end_line": 891,
        "comment": "",
        "child_ranges": [
            "(line 890,col 7)-(line 890,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 893,
        "end_line": 894,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 896,
        "end_line": 897,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  private Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 900,
        "end_line": 903,
        "comment": "",
        "child_ranges": [
            "(line 901,col 5)-(line 901,col 39)",
            "(line 902,col 5)-(line 902,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckGlobalThisTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 905,
        "end_line": 907,
        "comment": "",
        "child_ranges": [
            "(line 906,col 5)-(line 906,col 41)"
        ]
    }
]