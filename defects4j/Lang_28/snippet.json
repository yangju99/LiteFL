[
    {
        "name": "NumericEntityUnescaper.translate#34",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
        "class_name": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper",
        "signature": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer)",
        "snippet": "    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while(input.charAt(end) != ';') {\n                end++;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                return 0;\n            }\n\n                out.write(entityValue);\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }\n",
        "begin_line": 34,
        "end_line": 67,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang3.text.translate.CharSequenceTranslator": "\n     * Translate a set of codepoints, represented by an int index into a CharSequence, \n     * into another set of codepoints. The number of codepoints consumed must be returned, \n     * and the only IOExceptions thrown must be from interacting with the Writer so that \n     * the top level API may reliable ignore StringWriter IOExceptions. \n     *\n     * @param input CharSequence that is being translated\n     * @param index int representing the current point of translation\n     * @param out Writer to translate the text to\n     * @return int count of codepoints consumed\n     * @throws IOException if and only if the Writer produces an IOException\n     "
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "CharSequenceTranslator.translate#76",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
        "signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer)",
        "snippet": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int sz = Character.codePointCount(input, 0, input.length());\n        for (int i = 0; i < sz; i++) {\n\n            // consumed is the number of codepoints consumed\n            int consumed = translate(input, i, out);\n\n            if(consumed == 0) { \n                out.write( Character.toChars( Character.codePointAt(input, i) ) );\n            } else {\n                // contract with translators is that they have to understand codepoints and they just took care of a surrogate pair\n                for(int j=0; j<consumed; j++) {\n                    if(i < sz - 2) {\n                        i += Character.charCount( Character.codePointAt(input, i) );\n                    } else {\n                        // If the String ends with a high surrogate, just add the 1 and don't worry about such things\n                        i++;\n                    }\n                }\n                // for loop will increment 1 anyway, so remove 1 to account for that\n                i--;\n            }\n        }\n    }\n",
        "begin_line": 76,
        "end_line": 105,
        "comment": "\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "CharSequenceTranslator.translate#53",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
        "signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence)",
        "snippet": "    public final String translate(CharSequence input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(input.length() * 2);  // TODO: Make the 2 part of the API???\n            translate(input, writer);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            throw new RuntimeException(ioe);\n        }\n    }\n",
        "begin_line": 53,
        "end_line": 65,
        "comment": "\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    }
]