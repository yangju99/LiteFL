[
    {
        "name": "Gamma.regularizedGammaP#150",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Gamma.java",
        "class_name": "org.apache.commons.math.special.Gamma",
        "signature": "org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int)",
        "snippet": "    public static double regularizedGammaP(double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException\n    {\n        double ret;\n\n        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n            ret = Double.NaN;\n        } else if (x == 0.0) {\n            ret = 0.0;\n        } else if (a >= 1.0 && x > a) {\n            // use regularizedGammaQ because it should converge faster in this\n            // case.\n            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n        } else {\n            // calculate series\n            double n = 0.0; // current element index\n            double an = 1.0 / a; // n-th element in the series\n            double sum = an; // partial sum\n            while (Math.abs(an) > epsilon && n < maxIterations) {\n                // compute next element in the series\n                n = n + 1.0;\n                an = an * (x / (a + n));\n\n                // update partial sum\n                sum = sum + an;\n            }\n            if (n >= maxIterations) {\n                throw new MaxIterationsExceededException(maxIterations);\n            } else {\n                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n            }\n        }\n\n        return ret;\n    }\n",
        "begin_line": 150,
        "end_line": 187,
        "comment": "\n     * Returns the regularized gamma function P(a, x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\">\n     * Regularized Gamma Function</a>, equation (1).</li>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\">\n     * Incomplete Gamma Function</a>, equation (4).</li>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\">\n     * Confluent Hypergeometric Function of the First Kind</a>, equation (1).\n     * </li>\n     * </ul>\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @param epsilon When the absolute value of the nth item in the\n     *                series is less than epsilon the approximation ceases\n     *                to calculate further elements in the series.\n     * @param maxIterations Maximum number of \"iterations\" to complete. \n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "MaxIterationsExceededException.MaxIterationsExceededException#35",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/MaxIterationsExceededException.java",
        "class_name": "org.apache.commons.math.MaxIterationsExceededException",
        "signature": "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)",
        "snippet": "    public MaxIterationsExceededException(int maxIterations) {\n        super(\"Maximal number of iterations ({0}) exceeded\",\n              new Object[] { new Integer(maxIterations) });\n        this.maxIterations = maxIterations;\n    }\n",
        "begin_line": 35,
        "end_line": 39,
        "comment": "\n     * Constructs an exception with specified formatted detail message.\n     * Message formatting is delegated to {@link java.text.MessageFormat}.\n     * @param maxIterations maximal number of iterations allowed\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathException.translate#81",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale)",
        "snippet": "    private static String translate(String s, Locale locale) {\n        try {\n            if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {\n                // caching the resource bundle\n                cachedResources =\n                    ResourceBundle.getBundle(\"org.apache.commons.math.MessagesResources\", locale);\n            }\n\n            if (cachedResources.getLocale().getLanguage().equals(locale.getLanguage())) {\n                // the value of the resource is the translated string\n                return cachedResources.getString(s);\n            }\n            \n        } catch (MissingResourceException mre) {\n            // do nothing here\n        }\n\n        // the locale is not supported or the resource is unknown\n        // don't translate and fall back to using the string as is\n        return s;\n\n    }\n",
        "begin_line": 81,
        "end_line": 102,
        "comment": "\n     * Translate a string to a given locale.\n     * @param s string to translate\n     * @param locale locale into which to translate the string\n     * @return translated string or original string\n     * for unsupported locales or unknown strings\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathException.buildMessage#111",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.buildMessage(java.lang.String, java.lang.Object[], java.util.Locale)",
        "snippet": "    private static String buildMessage(String pattern, Object[] arguments, Locale locale) {\n        // do it the hard way, for Java 1.3. compatibility\n        MessageFormat mf = new MessageFormat(translate(pattern, locale));\n        mf.setLocale(locale);\n        return mf.format(arguments);        \n    }\n",
        "begin_line": 111,
        "end_line": 116,
        "comment": "\n     * Builds a message string by from a pattern and its arguments.\n     * @param pattern format specifier\n     * @param arguments format arguments\n     * @param locale Locale in which the message should be translated\n     * @return a message string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathException.MathException#150",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[])",
        "snippet": "    public MathException(String pattern, Object[] arguments) {\n      super(buildMessage(pattern, arguments, Locale.US));\n      this.pattern   = pattern;\n      this.arguments = arguments;\n      this.rootCause = null;\n    }\n",
        "begin_line": 150,
        "end_line": 155,
        "comment": "\n     * Constructs a new <code>MathException</code> with specified\n     * formatted detail message.\n     * Message formatting is delegated to {@link java.text.MessageFormat}.\n     * @param pattern format specifier\n     * @param arguments format arguments\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathException.getCause#234",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.getCause()",
        "snippet": "    public Throwable getCause() {\n        return rootCause;\n    }\n",
        "begin_line": 234,
        "end_line": 236,
        "comment": "\n     * Gets the cause of this throwable.\n     * \n     * @return  the cause of this throwable, or <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathException.printStackTrace#264",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/MathException.java",
        "class_name": "org.apache.commons.math.MathException",
        "signature": "org.apache.commons.math.MathException.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out) {\n        synchronized (out) {\n            super.printStackTrace(out);\n            if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n                out.print(\"Caused by: \");\n                rootCause.printStackTrace(out);\n            }\n        }\n    }\n",
        "begin_line": 264,
        "end_line": 272,
        "comment": "\n     * Prints the stack trace of this exception to the specified writer.\n     *\n     * @param out  the <code>PrintWriter</code> to use for output\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "ConvergenceException.ConvergenceException#43",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/ConvergenceException.java",
        "class_name": "org.apache.commons.math.ConvergenceException",
        "signature": "org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.String, java.lang.Object[])",
        "snippet": "    public ConvergenceException(String pattern, Object[] arguments) {\n        super(pattern, arguments);\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Constructs an exception with specified formatted detail message.\n     * Message formatting is delegated to {@link java.text.MessageFormat}.\n     * @param pattern format specifier\n     * @param arguments format arguments\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Erf.erf#55",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Erf.java",
        "class_name": "org.apache.commons.math.special.Erf",
        "signature": "org.apache.commons.math.special.Erf.erf(double)",
        "snippet": "    public static double erf(double x) throws MathException {\n        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);\n        if (x < 0) {\n            ret = -ret;\n        }\n        return ret;\n    }\n",
        "begin_line": 55,
        "end_line": 61,
        "comment": "\n     * Returns the error function erf(x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/Erf.html\">\n     * Erf</a>, equation (3).</li>\n     * </ul>\n     * \n     * @param x the value.\n     * @return the error function erf(x)\n     * @throws MathException if the algorithm fails to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "NormalDistributionImpl.cumulativeProbability#108",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double)",
        "snippet": "    public double cumulativeProbability(double x) throws MathException {\n            return 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n    }\n",
        "begin_line": 108,
        "end_line": 111,
        "comment": "\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "Gamma.logGamma#87",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Gamma.java",
        "class_name": "org.apache.commons.math.special.Gamma",
        "signature": "org.apache.commons.math.special.Gamma.logGamma(double)",
        "snippet": "    public static double logGamma(double x) {\n        double ret;\n\n        if (Double.isNaN(x) || (x <= 0.0)) {\n            ret = Double.NaN;\n        } else {\n            double g = 607.0 / 128.0;\n            \n            double sum = 0.0;\n            for (int i = lanczos.length - 1; i > 0; --i) {\n                sum = sum + (lanczos[i] / (x + i));\n            }\n            sum = sum + lanczos[0];\n\n            double tmp = x + g + .5;\n            ret = ((x + .5) * Math.log(tmp)) - tmp +\n                HALF_LOG_2_PI + Math.log(sum / x);\n        }\n\n        return ret;\n    }\n",
        "begin_line": 87,
        "end_line": 107,
        "comment": "\n     * Returns the natural logarithm of the gamma function &#915;(x).\n     *\n     * The implementation of this method is based on:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/GammaFunction.html\">\n     * Gamma Function</a>, equation (28).</li>\n     * <li><a href=\"http://mathworld.wolfram.com/LanczosApproximation.html\">\n     * Lanczos Approximation</a>, equations (1) through (5).</li>\n     * <li><a href=\"http://my.fit.edu/~gabdo/gamma.txt\">Paul Godfrey, A note on\n     * the computation of the convergent Lanczos complex Gamma approximation\n     * </a></li>\n     * </ul>\n     * \n     * @param x the value.\n     * @return log(&#915;(x))\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NormalDistributionImpl.NormalDistributionImpl#49",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double)",
        "snippet": "    public NormalDistributionImpl(double mean, double sd){\n        super();\n        setMean(mean);\n        setStandardDeviation(sd);\n    }\n",
        "begin_line": 49,
        "end_line": 53,
        "comment": "\n     * Create a normal distribution using the given mean and standard deviation.\n     * @param mean mean for this distribution\n     * @param sd standard deviation for this distribution\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    },
    {
        "name": "NormalDistributionImpl.setMean#75",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double)",
        "snippet": "    public void setMean(double mean) {\n        this.mean = mean;\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Modify the mean.\n     * @param mean for this distribution\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    },
    {
        "name": "NormalDistributionImpl.setStandardDeviation#92",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double)",
        "snippet": "    public void setStandardDeviation(double sd) {\n        if (sd <= 0.0) {\n            throw new IllegalArgumentException(\n                \"Standard deviation must be positive.\");\n        }       \n        standardDeviation = sd;\n    }\n",
        "begin_line": 92,
        "end_line": 98,
        "comment": "\n     * Modify the standard deviation.\n     * @param sd standard deviation for this distribution\n     * @throws IllegalArgumentException if <code>sd</code> is not positive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDistribution.AbstractDistribution#37",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/AbstractDistribution.java",
        "class_name": "org.apache.commons.math.distribution.AbstractDistribution",
        "signature": "org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution()",
        "snippet": "    protected AbstractDistribution() {\n        super();\n    }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractContinuousDistribution.AbstractContinuousDistribution#44",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()",
        "snippet": "    protected AbstractContinuousDistribution() {\n        super();\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    }
]