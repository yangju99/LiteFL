[
    {
        "name": "FieldUtils.verifyValueBounds#215",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/FieldUtils.java",
        "class_name": "org.joda.time.field.FieldUtils",
        "signature": "org.joda.time.field.FieldUtils.verifyValueBounds(org.joda.time.DateTimeField, int, int, int)",
        "snippet": "    public static void verifyValueBounds(DateTimeField field, \n                                         int value, int lowerBound, int upperBound) {\n        if ((value < lowerBound) || (value > upperBound)) {\n            throw new IllegalFieldValueException\n                (field.getType(), Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n        }\n    }\n",
        "begin_line": 215,
        "end_line": 222,
        "comment": "\n     * Verify that input values are within specified bounds.\n     * \n     * @param value  the value to check\n     * @param lowerBound  the lower bound allowed for value\n     * @param upperBound  the upper bound allowed for value\n     * @throws IllegalFieldValueException if value is not in the specified bounds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "IllegalFieldValueException.createMessage#39",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/IllegalFieldValueException.java",
        "class_name": "org.joda.time.IllegalFieldValueException",
        "signature": "org.joda.time.IllegalFieldValueException.createMessage(java.lang.String, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.String)",
        "snippet": "    private static String createMessage(String fieldName, Number value,\n                                        Number lowerBound, Number upperBound, String explain) {\n        StringBuilder buf = new StringBuilder()\n            .append(\"Value \").append(value).append(\" for \").append(fieldName).append(' ');\n\n        if (lowerBound == null) {\n            if (upperBound == null) {\n                buf.append(\"is not supported\");\n            } else {\n                buf.append(\"must not be larger than \").append(upperBound);\n            }\n        } else if (upperBound == null) {\n            buf.append(\"must not be smaller than \").append(lowerBound);\n        } else {\n            buf.append(\"must be in the range [\")\n                .append(lowerBound)\n                .append(',')\n                .append(upperBound)\n                .append(']');\n        }\n        if (explain != null) {\n            buf.append(\": \").append(explain);\n        }\n\n        return buf.toString();\n    }\n",
        "begin_line": 39,
        "end_line": 64,
        "comment": "\n     * Creates a message for the exception.\n     *\n     * @param fieldName  the field name\n     * @param value  the value rejected\n     * @param lowerBound  the lower bound allowed\n     * @param upperBound  the uppe bound allowed\n     * @param explain  an explanation\n     * @return the message\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "IllegalFieldValueException.IllegalFieldValueException#106",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/IllegalFieldValueException.java",
        "class_name": "org.joda.time.IllegalFieldValueException",
        "signature": "org.joda.time.IllegalFieldValueException.IllegalFieldValueException(org.joda.time.DateTimeFieldType, java.lang.Number, java.lang.Number, java.lang.Number)",
        "snippet": "    public IllegalFieldValueException(DateTimeFieldType fieldType,\n                                      Number value, Number lowerBound, Number upperBound) {\n        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n        iDateTimeFieldType = fieldType;\n        iDurationFieldType = null;\n        iFieldName = fieldType.getName();\n        iNumberValue = value;\n        iStringValue = null;\n        iLowerBound = lowerBound;\n        iUpperBound = upperBound;\n        iMessage = super.getMessage();\n    }\n",
        "begin_line": 106,
        "end_line": 117,
        "comment": "\n     * Constructor.\n     * \n     * @param fieldType  type of field being set\n     * @param value  illegal value being set\n     * @param lowerBound  lower legal field value, or null if not applicable\n     * @param upperBound  upper legal field value, or null if not applicable\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "IllegalFieldValueException.getMessage#313",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/IllegalFieldValueException.java",
        "class_name": "org.joda.time.IllegalFieldValueException",
        "signature": "org.joda.time.IllegalFieldValueException.getMessage()",
        "snippet": "    public String getMessage() {\n        return iMessage;\n    }\n",
        "begin_line": 313,
        "end_line": 315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.getName#377",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.getName()",
        "snippet": "    public String getName() {\n        return iName;\n    }\n",
        "begin_line": 377,
        "end_line": 379,
        "comment": "\n     * Get the name of the field.\n     * <p>\n     * By convention, names follow a pattern of \"dddOfRrr\", where \"ddd\" represents\n     * the (singular) duration unit field name and \"Rrr\" represents the (singular)\n     * duration range field name. If the range field is not applicable, then\n     * the name of the field is simply the (singular) duration field name.\n     * \n     * @return field name\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormat.forPattern#169",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormat.java",
        "class_name": "org.joda.time.format.DateTimeFormat",
        "signature": "org.joda.time.format.DateTimeFormat.forPattern(java.lang.String)",
        "snippet": "    public static DateTimeFormatter forPattern(String pattern) {\n        return createFormatterForPattern(pattern);\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\n     * Factory to create a formatter from a pattern string.\n     * The pattern string is described above in the class level javadoc.\n     * It is very similar to SimpleDateFormat patterns.\n     * <p>\n     * The format may contain locale specific output, and this will change as\n     * you change the locale of the formatter.\n     * Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.\n     * For example:\n     * <pre>\n     * DateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt);\n     * </pre>\n     *\n     * @param pattern  pattern specification\n     * @return the formatter\n     * @throws IllegalArgumentException if the pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormat.parsePatternTo#399",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormat.java",
        "class_name": "org.joda.time.format.DateTimeFormat",
        "signature": "org.joda.time.format.DateTimeFormat.parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)",
        "snippet": "    private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\n        int length = pattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i=0; i<length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(pattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                builder.appendEraText();\n                break;\n            case 'C': // century of era (number)\n                builder.appendCenturyOfEra(tokenLen, tokenLen);\n                break;\n            case 'x': // weekyear (number)\n            case 'y': // year (number)\n            case 'Y': // year of era (number)\n                if (tokenLen == 2) {\n                    boolean lenientParse = true;\n\n                    // Peek ahead to next token.\n                    if (i + 1 < length) {\n                        indexRef[0]++;\n                        if (isNumericToken(parseToken(pattern, indexRef))) {\n                            // If next token is a number, cannot support\n                            // lenient parse, because it will consume digits\n                            // that it should not.\n                            lenientParse = false;\n                        }\n                        indexRef[0]--;\n                    }\n\n                    // Use pivots which are compatible with SimpleDateFormat.\n                    switch (c) {\n                    case 'x':\n                        builder.appendTwoDigitWeekyear\n                            (new DateTime().getWeekyear() - 30, lenientParse);\n                        break;\n                    case 'y':\n                    case 'Y':\n                    default:\n                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, lenientParse);\n                        break;\n                    }\n                } else {\n                    // Try to support long year values.\n                    int maxDigits = 9;\n\n                    // Peek ahead to next token.\n                    if (i + 1 < length) {\n                        indexRef[0]++;\n                        if (isNumericToken(parseToken(pattern, indexRef))) {\n                            // If next token is a number, cannot support long years.\n                            maxDigits = tokenLen;\n                        }\n                        indexRef[0]--;\n                    }\n\n                    switch (c) {\n                    case 'x':\n                        builder.appendWeekyear(tokenLen, maxDigits);\n                        break;\n                    case 'y':\n                        builder.appendYear(tokenLen, maxDigits);\n                        break;\n                    case 'Y':\n                        builder.appendYearOfEra(tokenLen, maxDigits);\n                        break;\n                    }\n                }\n                break;\n            case 'M': // month of year (text and number)\n                if (tokenLen >= 3) {\n                    if (tokenLen >= 4) {\n                        builder.appendMonthOfYearText();\n                    } else {\n                        builder.appendMonthOfYearShortText();\n                    }\n                } else {\n                    builder.appendMonthOfYear(tokenLen);\n                }\n                break;\n            case 'd': // day of month (number)\n                builder.appendDayOfMonth(tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                builder.appendHalfdayOfDayText();\n                break;\n            case 'h': // clockhour of halfday (number, 1..12)\n                builder.appendClockhourOfHalfday(tokenLen);\n                break;\n            case 'H': // hour of day (number, 0..23)\n                builder.appendHourOfDay(tokenLen);\n                break;\n            case 'k': // clockhour of day (1..24)\n                builder.appendClockhourOfDay(tokenLen);\n                break;\n            case 'K': // hour of halfday (0..11)\n                builder.appendHourOfHalfday(tokenLen);\n                break;\n            case 'm': // minute of hour (number)\n                builder.appendMinuteOfHour(tokenLen);\n                break;\n            case 's': // second of minute (number)\n                builder.appendSecondOfMinute(tokenLen);\n                break;\n            case 'S': // fraction of second (number)\n                builder.appendFractionOfSecond(tokenLen, tokenLen);\n                break;\n            case 'e': // day of week (number)\n                builder.appendDayOfWeek(tokenLen);\n                break;\n            case 'E': // dayOfWeek (text)\n                if (tokenLen >= 4) {\n                    builder.appendDayOfWeekText();\n                } else {\n                    builder.appendDayOfWeekShortText();\n                }\n                break;\n            case 'D': // day of year (number)\n                builder.appendDayOfYear(tokenLen);\n                break;\n            case 'w': // week of weekyear (number)\n                builder.appendWeekOfWeekyear(tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    builder.appendTimeZoneName();\n                } else {\n                    builder.appendTimeZoneShortName(null);\n                }\n                break;\n            case 'Z': // time zone offset\n                if (tokenLen == 1) {\n                    builder.appendTimeZoneOffset(null, \"Z\", false, 2, 2);\n                } else if (tokenLen == 2) {\n                    builder.appendTimeZoneOffset(null, \"Z\", true, 2, 2);\n                } else {\n                    builder.appendTimeZoneId();\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    builder.appendLiteral(sub.charAt(0));\n                } else {\n                    // Create copy of sub since otherwise the temporary quoted\n                    // string would still be referenced internally.\n                    builder.appendLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException\n                    (\"Illegal pattern component: \" + token);\n            }\n        }\n    }\n",
        "begin_line": 399,
        "end_line": 563,
        "comment": "\n     * Parses the given pattern and appends the rules to the given\n     * DateTimeFormatterBuilder.\n     *\n     * @param pattern  pattern specification\n     * @throws IllegalArgumentException if the pattern is invalid\n     * @see #forPattern\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormat.parseToken#573",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormat.java",
        "class_name": "org.joda.time.format.DateTimeFormat",
        "signature": "org.joda.time.format.DateTimeFormat.parseToken(java.lang.String, int[])",
        "snippet": "    private static String parseToken(String pattern, int[] indexRef) {\n        StringBuilder buf = new StringBuilder();\n\n        int i = indexRef[0];\n        int length = pattern.length();\n\n        char c = pattern.charAt(i);\n        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n            // Scan a run of the same character, which indicates a time\n            // pattern.\n            buf.append(c);\n\n            while (i + 1 < length) {\n                char peek = pattern.charAt(i + 1);\n                if (peek == c) {\n                    buf.append(c);\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } else {\n            // This will identify token as text.\n            buf.append('\\'');\n\n            boolean inLiteral = false;\n\n            for (; i < length; i++) {\n                c = pattern.charAt(i);\n                \n                if (c == '\\'') {\n                    if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n                        // '' is treated as escaped '\n                        i++;\n                        buf.append(c);\n                    } else {\n                        inLiteral = !inLiteral;\n                    }\n                } else if (!inLiteral &&\n                           (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {\n                    i--;\n                    break;\n                } else {\n                    buf.append(c);\n                }\n            }\n        }\n\n        indexRef[0] = i;\n        return buf.toString();\n    }\n",
        "begin_line": 573,
        "end_line": 623,
        "comment": "\n     * Parses an individual token.\n     * \n     * @param pattern  the pattern string\n     * @param indexRef  a single element array, where the input is the start\n     *  location and the output is the location after parsing the token\n     * @return the parsed token\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormat.createFormatterForPattern#673",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormat.java",
        "class_name": "org.joda.time.format.DateTimeFormat",
        "signature": "org.joda.time.format.DateTimeFormat.createFormatterForPattern(java.lang.String)",
        "snippet": "    private static DateTimeFormatter createFormatterForPattern(String pattern) {\n        if (pattern == null || pattern.length() == 0) {\n            throw new IllegalArgumentException(\"Invalid pattern specification\");\n        }\n        DateTimeFormatter formatter = null;\n        synchronized (cPatternedCache) {\n            formatter = cPatternedCache.get(pattern);\n            if (formatter == null) {\n                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n                parsePatternTo(builder, pattern);\n                formatter = builder.toFormatter();\n\n                cPatternedCache.put(pattern, formatter);\n            }\n        }\n        return formatter;\n    }\n",
        "begin_line": 673,
        "end_line": 689,
        "comment": "\n     * Select a format from a custom pattern.\n     *\n     * @param pattern  pattern specification\n     * @throws IllegalArgumentException if the pattern is invalid\n     * @see #appendPatternTo\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicGJChronology.getDaysInMonthMax#128",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.getDaysInMonthMax(int)",
        "snippet": "    int getDaysInMonthMax(int month) {\n        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n    }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicDayOfMonthDateTimeField.getMaximumValue#78",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue(org.joda.time.ReadablePartial, int[])",
        "snippet": "    public int getMaximumValue(ReadablePartial partial, int[] values) {\n        int size = partial.size();\n        for (int i = 0; i < size; i++) {\n            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n                int month = values[i];\n                for (int j = 0; j < size; j++) {\n                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n                        int year = values[j];\n                        return iChronology.getDaysInYearMonth(year, month);\n                    }\n                }\n                return iChronology.getDaysInMonthMax(month);\n            }\n        }\n        return getMaximumValue();\n    }\n",
        "begin_line": 78,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "MonthDay.MonthDay#333",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/MonthDay.java",
        "class_name": "org.joda.time.MonthDay",
        "signature": "org.joda.time.MonthDay.MonthDay(int, int)",
        "snippet": "    public MonthDay(int monthOfYear, int dayOfMonth) {\n        this(monthOfYear, dayOfMonth, null);\n    }\n",
        "begin_line": 333,
        "end_line": 335,
        "comment": "\n     * Constructs a MonthDay with specified year and month\n     * using <code>ISOChronology</code>.\n     * <p>\n     * The constructor uses the no time zone initialising the fields as provided.\n     * Once the constructor is complete, all further calculations\n     * are performed without reference to a time-zone (by switching to UTC).\n     *\n     * @param monthOfYear  the month of the year\n     * @param dayOfMonth  the day of the month\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "MonthDay.MonthDay#351",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/MonthDay.java",
        "class_name": "org.joda.time.MonthDay",
        "signature": "org.joda.time.MonthDay.MonthDay(int, int, org.joda.time.Chronology)",
        "snippet": "    public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n        super(new int[] {monthOfYear, dayOfMonth}, chronology);\n    }\n",
        "begin_line": 351,
        "end_line": 353,
        "comment": "\n     * Constructs an instance set to the specified monthOfYear and dayOfMonth\n     * using the specified chronology, whose zone is ignored.\n     * <p>\n     * If the chronology is null, <code>ISOChronology</code> is used.\n     * <p>\n     * The constructor uses the time zone of the chronology specified.\n     * Once the constructor is complete, all further calculations are performed\n     * without reference to a time-zone (by switching to UTC).\n     *\n     * @param monthOfYear  the month of the year\n     * @param dayOfMonth  the day of the month\n     * @param chronology  the chronology, null means ISOChronology in the default zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "MonthDay.size#394",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/MonthDay.java",
        "class_name": "org.joda.time.MonthDay",
        "signature": "org.joda.time.MonthDay.size()",
        "snippet": "    public int size() {\n        return 2;\n    }\n",
        "begin_line": 394,
        "end_line": 396,
        "comment": "\n     * Gets the number of fields in this partial, which is two.\n     * The supported fields are MonthOfYear and DayOfMonth.\n     * Note that only these fields may be queried.\n     *\n     * @return the field count, two\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "MonthDay.getField#407",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/MonthDay.java",
        "class_name": "org.joda.time.MonthDay",
        "signature": "org.joda.time.MonthDay.getField(int, org.joda.time.Chronology)",
        "snippet": "    protected DateTimeField getField(int index, Chronology chrono) {\n        switch (index) {\n        case MONTH_OF_YEAR:\n            return chrono.monthOfYear();\n        case DAY_OF_MONTH:\n            return chrono.dayOfMonth();\n        default:\n            throw new IndexOutOfBoundsException(\"Invalid index: \" + index);\n        }\n    }\n",
        "begin_line": 407,
        "end_line": 416,
        "comment": "\n     * Gets the field for a specific index in the chronology specified.\n     * <p>\n     * This method must not use any instance variables.\n     * \n     * @param index  the index to retrieve\n     * @param chrono  the chronology to use\n     * @return the field, never null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "MonthDay.getFieldType#425",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/MonthDay.java",
        "class_name": "org.joda.time.MonthDay",
        "signature": "org.joda.time.MonthDay.getFieldType(int)",
        "snippet": "    public DateTimeFieldType getFieldType(int index) {\n        return FIELD_TYPES[index];\n    }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "\n     * Gets the field type at the specified index.\n     *\n     * @param index  the index to retrieve\n     * @return the field at the specified index, never null\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicMonthOfYearDateTimeField.add#91",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(long, int)",
        "snippet": "    public long add(long instant, int months) {\n        if (months == 0) {\n            return instant; // the easy case\n        }\n        //\n        // Save time part first.\n        //\n        long timePart = iChronology.getMillisOfDay(instant);\n        //\n        //\n        // Get this year and month.\n        //\n        int thisYear = iChronology.getYear(instant);\n        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n        // ----------------------------------------------------------\n        //\n        // Do not refactor without careful consideration.\n        // Order of calculation is important.\n        //\n        int yearToUse;\n        // Initially, monthToUse is zero-based\n        int monthToUse = thisMonth - 1 + months;\n        if (monthToUse >= 0) {\n            yearToUse = thisYear + (monthToUse / iMax);\n            monthToUse = (monthToUse % iMax) + 1;\n        } else {\n            yearToUse = thisYear + (monthToUse / iMax) - 1;\n            monthToUse = Math.abs(monthToUse);\n            int remMonthToUse = monthToUse % iMax;\n            // Take care of the boundary condition\n            if (remMonthToUse == 0) {\n                remMonthToUse = iMax;\n            }\n            monthToUse = iMax - remMonthToUse + 1;\n            // Take care of the boundary condition\n            if (monthToUse == 1) {\n                yearToUse += 1;\n            }\n        }\n        // End of do not refactor.\n        // ----------------------------------------------------------\n\n        //\n        // Quietly force DOM to nearest sane value.\n        //\n        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n        if (dayToUse > maxDay) {\n            dayToUse = maxDay;\n        }\n        //\n        // get proper date part, and return result\n        //\n        long datePart =\n            iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n        return datePart + timePart;\n    }\n",
        "begin_line": 91,
        "end_line": 147,
        "comment": "\n     * Add the specified month to the specified time instant.\n     * The amount added may be negative.<p>\n     * If the new month has less total days than the specified\n     * day of the month, this value is coerced to the nearest\n     * sane value. e.g.<p>\n     * 07-31 - (1 month) = 06-30<p>\n     * 03-31 - (1 month) = 02-28 or 02-29 depending<p>\n     * \n     * @see org.joda.time.DateTimeField#add\n     * @see org.joda.time.ReadWritableDateTime#addMonths(int)\n     * @param instant  the time instant in millis to update.\n     * @param months  the months to add (can be negative).\n     * @return the updated time instant.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicMonthOfYearDateTimeField.getDifferenceAsLong#242",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong(long, long)",
        "snippet": "    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n        if (minuendInstant < subtrahendInstant) {\n            return -getDifference(subtrahendInstant, minuendInstant);\n        }\n\n        int minuendYear = iChronology.getYear(minuendInstant);\n        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);\n        int subtrahendYear = iChronology.getYear(subtrahendInstant);\n        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);\n\n        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;\n\n        // Before adjusting for remainder, account for special case of add\n        // where the day-of-month is forced to the nearest sane value.\n        int minuendDom = iChronology.getDayOfMonth\n            (minuendInstant, minuendYear, minuendMonth);\n        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {\n            // Last day of the minuend month...\n            int subtrahendDom = iChronology.getDayOfMonth\n                (subtrahendInstant, subtrahendYear, subtrahendMonth);\n            if (subtrahendDom > minuendDom) {\n                // ...and day of subtrahend month is larger.\n                // Note: This works fine, but it ideally shouldn't invoke other\n                // fields from within a field.\n                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);\n            }\n        }\n\n        // Inlined remainder method to avoid duplicate calls.\n        long minuendRem = minuendInstant\n            - iChronology.getYearMonthMillis(minuendYear, minuendMonth);\n        long subtrahendRem = subtrahendInstant\n            - iChronology.getYearMonthMillis(subtrahendYear, subtrahendMonth);\n\n        if (minuendRem < subtrahendRem) {\n            difference--;\n        }\n\n        return difference;\n    }\n",
        "begin_line": 242,
        "end_line": 281,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ISODateTimeFormat.localDateParser#594",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/ISODateTimeFormat.java",
        "class_name": "org.joda.time.format.ISODateTimeFormat",
        "signature": "org.joda.time.format.ISODateTimeFormat.localDateParser()",
        "snippet": "    public static DateTimeFormatter localDateParser() {\n        if (ldp == null) {\n            ldp = dateElementParser().withZoneUTC();\n        }\n        return ldp;\n    }\n",
        "begin_line": 594,
        "end_line": 599,
        "comment": "\n     * Returns a generic ISO date parser for parsing local dates.\n     * This parser is initialised with the local (UTC) time zone.\n     * <p>\n     * It accepts formats described by the following syntax:\n     * <pre>\n     * date-element      = std-date-element | ord-date-element | week-date-element\n     * std-date-element  = yyyy ['-' MM ['-' dd]]\n     * ord-date-element  = yyyy ['-' DDD]\n     * week-date-element = xxxx '-W' ww ['-' e]\n     * </pre>\n     * @since 1.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatter.withZoneUTC#300",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatter.java",
        "class_name": "org.joda.time.format.DateTimeFormatter",
        "signature": "org.joda.time.format.DateTimeFormatter.withZoneUTC()",
        "snippet": "    public DateTimeFormatter withZoneUTC() {\n        return withZone(DateTimeZone.UTC);\n    }\n",
        "begin_line": 300,
        "end_line": 302,
        "comment": "\n     * Returns a new formatter that will use the UTC zone in preference\n     * to the zone of the printed object, or default zone on a parse.\n     * <p>\n     * When printing, UTC will be used in preference to the zone\n     * from the datetime that would otherwise be used.\n     * <p>\n     * When parsing, UTC will be set on the parsed datetime.\n     * <p>\n     * If both an override chronology and an override zone are set, the\n     * override zone will take precedence over the zone in the chronology.\n     * \n     * @return the new formatter, never null\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatter.withZone#320",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatter.java",
        "class_name": "org.joda.time.format.DateTimeFormatter",
        "signature": "org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)",
        "snippet": "    public DateTimeFormatter withZone(DateTimeZone zone) {\n        if (iZone == zone) {\n            return this;\n        }\n        return new DateTimeFormatter(iPrinter, iParser, iLocale,\n                false, iChrono, zone, iPivotYear, iDefaultYear);\n    }\n",
        "begin_line": 320,
        "end_line": 326,
        "comment": "\n     * Returns a new formatter that will use the specified zone in preference\n     * to the zone of the printed object, or default zone on a parse.\n     * <p>\n     * When printing, this zone will be used in preference to the zone\n     * from the datetime that would otherwise be used.\n     * <p>\n     * When parsing, this zone will be set on the parsed datetime.\n     * <p>\n     * A null zone means of no-override.\n     * If both an override chronology and an override zone are set, the\n     * override zone will take precedence over the zone in the chronology.\n     * \n     * @param zone  the zone to use as an override\n     * @return the new formatter\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicDayOfMonthDateTimeField.getMaximumValue#58",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return iChronology.getDaysInMonthMax();\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getDaysInMonthMax#564",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDaysInMonthMax()",
        "snippet": "    int getDaysInMonthMax() {\n        return 31;\n    }\n",
        "begin_line": 564,
        "end_line": 566,
        "comment": "\n     * Gets the maximum number of days in any month.\n     * \n     * @return 31\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getDaysInMonthMax#574",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDaysInMonthMax(long)",
        "snippet": "    int getDaysInMonthMax(long instant) {\n        int thisYear = getYear(instant);\n        int thisMonth = getMonthOfYear(instant, thisYear);\n        return getDaysInYearMonth(thisYear, thisMonth);\n    }\n",
        "begin_line": 574,
        "end_line": 578,
        "comment": "\n     * Gets the maximum number of days in the month specified by the instant.\n     * \n     * @param instant  millis from 1970-01-01T00:00:00Z\n     * @return the maximum number of days in the month\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4714
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISODateTimeFormat.dateElementParser#612",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/ISODateTimeFormat.java",
        "class_name": "org.joda.time.format.ISODateTimeFormat",
        "signature": "org.joda.time.format.ISODateTimeFormat.dateElementParser()",
        "snippet": "    public static DateTimeFormatter dateElementParser() {\n        if (dpe == null) {\n            dpe = new DateTimeFormatterBuilder()\n                .append(null, new DateTimeParser[] {\n                    new DateTimeFormatterBuilder()\n                    .append(yearElement())\n                    .appendOptional\n                    (new DateTimeFormatterBuilder()\n                     .append(monthElement())\n                     .appendOptional(dayOfMonthElement().getParser())\n                     .toParser())\n                    .toParser(),\n                    new DateTimeFormatterBuilder()\n                    .append(weekyearElement())\n                    .append(weekElement())\n                    .appendOptional(dayOfWeekElement().getParser())\n                    .toParser(),\n                    new DateTimeFormatterBuilder()\n                    .append(yearElement())\n                    .append(dayOfYearElement())\n                    .toParser()\n                })\n                .toFormatter();\n        }\n        return dpe;\n    }\n",
        "begin_line": 612,
        "end_line": 637,
        "comment": "\n     * Returns a generic ISO date parser for parsing dates.\n     * <p>\n     * It accepts formats described by the following syntax:\n     * <pre>\n     * date-element      = std-date-element | ord-date-element | week-date-element\n     * std-date-element  = yyyy ['-' MM ['-' dd]]\n     * ord-date-element  = yyyy ['-' DDD]\n     * week-date-element = xxxx '-W' ww ['-' e]\n     * </pre>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISODateTimeFormat.weekyearElement#1613",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/ISODateTimeFormat.java",
        "class_name": "org.joda.time.format.ISODateTimeFormat",
        "signature": "org.joda.time.format.ISODateTimeFormat.weekyearElement()",
        "snippet": "    private static DateTimeFormatter weekyearElement() {\n        if (we == null) {\n            we = new DateTimeFormatterBuilder()\n                .appendWeekyear(4, 9)\n                .toFormatter();\n        }\n        return we;\n    }\n",
        "begin_line": 1613,
        "end_line": 1620,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISODateTimeFormat.weekElement#1622",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/ISODateTimeFormat.java",
        "class_name": "org.joda.time.format.ISODateTimeFormat",
        "signature": "org.joda.time.format.ISODateTimeFormat.weekElement()",
        "snippet": "    private static DateTimeFormatter weekElement() {\n        if (wwe == null) {\n            wwe = new DateTimeFormatterBuilder()\n                .appendLiteral(\"-W\")\n                .appendWeekOfWeekyear(2)\n                .toFormatter();\n        }\n        return wwe;\n    }\n",
        "begin_line": 1622,
        "end_line": 1630,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISODateTimeFormat.dayOfWeekElement#1632",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/ISODateTimeFormat.java",
        "class_name": "org.joda.time.format.ISODateTimeFormat",
        "signature": "org.joda.time.format.ISODateTimeFormat.dayOfWeekElement()",
        "snippet": "    private static DateTimeFormatter dayOfWeekElement() {\n        if (dwe == null) {\n            dwe = new DateTimeFormatterBuilder()\n                .appendLiteral('-')\n                .appendDayOfWeek(1)\n                .toFormatter();\n        }\n        return dwe;\n    }\n",
        "begin_line": 1632,
        "end_line": 1640,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISODateTimeFormat.dayOfYearElement#1642",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/ISODateTimeFormat.java",
        "class_name": "org.joda.time.format.ISODateTimeFormat",
        "signature": "org.joda.time.format.ISODateTimeFormat.dayOfYearElement()",
        "snippet": "    private static DateTimeFormatter dayOfYearElement() {\n        if (dye == null) {\n            dye = new DateTimeFormatterBuilder()\n                .appendLiteral('-')\n                .appendDayOfYear(3)\n                .toFormatter();\n        }\n        return dye;\n    }\n",
        "begin_line": 1642,
        "end_line": 1650,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.UnpaddedNumber#1398",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber.UnpaddedNumber(org.joda.time.DateTimeFieldType, int, boolean)",
        "snippet": "        protected UnpaddedNumber(DateTimeFieldType fieldType,\n                       int maxParsedDigits, boolean signed)\n        {\n            super(fieldType, maxParsedDigits, signed);\n        }\n",
        "begin_line": 1398,
        "end_line": 1402,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.estimatePrintedLength#1404",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber.estimatePrintedLength()",
        "snippet": "        public int estimatePrintedLength() {\n            return iMaxParsedDigits;\n        }\n",
        "begin_line": 1404,
        "end_line": 1406,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.StringLiteral#1269",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.StringLiteral.StringLiteral(java.lang.String)",
        "snippet": "        StringLiteral(String value) {\n            super();\n            iValue = value;\n        }\n",
        "begin_line": 1269,
        "end_line": 1272,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.estimatePrintedLength#1274",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.StringLiteral.estimatePrintedLength()",
        "snippet": "        public int estimatePrintedLength() {\n            return iValue.length();\n        }\n",
        "begin_line": 1274,
        "end_line": 1276,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.estimateParsedLength#1298",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.StringLiteral.estimateParsedLength()",
        "snippet": "        public int estimateParsedLength() {\n            return iValue.length();\n        }\n",
        "begin_line": 1298,
        "end_line": 1300,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendLiteral#407",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendLiteral(java.lang.String)",
        "snippet": "    public DateTimeFormatterBuilder appendLiteral(String text) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Literal must not be null\");\n        }\n        switch (text.length()) {\n            case 0:\n                return this;\n            case 1:\n                return append0(new CharacterLiteral(text.charAt(0)));\n            default:\n                return append0(new StringLiteral(text));\n        }\n    }\n",
        "begin_line": 407,
        "end_line": 419,
        "comment": "\n     * Instructs the printer to emit specific text, and the parser to expect\n     * it. The parser is case-insensitive.\n     *\n     * @return this DateTimeFormatterBuilder, for chaining\n     * @throws IllegalArgumentException if text is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendDecimal#432",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendDecimal(org.joda.time.DateTimeFieldType, int, int)",
        "snippet": "    public DateTimeFormatterBuilder appendDecimal(\n            DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"Field type must not be null\");\n        }\n        if (maxDigits < minDigits) {\n            maxDigits = minDigits;\n        }\n        if (minDigits < 0 || maxDigits <= 0) {\n            throw new IllegalArgumentException();\n        }\n        if (minDigits <= 1) {\n            return append0(new UnpaddedNumber(fieldType, maxDigits, false));\n        } else {\n            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n        }\n    }\n",
        "begin_line": 432,
        "end_line": 448,
        "comment": "\n     * Instructs the printer to emit a field value as a decimal number, and the\n     * parser to expect an unsigned decimal number.\n     *\n     * @param fieldType  type of field to append\n     * @param minDigits  minimum number of digits to <i>print</i>\n     * @param maxDigits  maximum number of digits to <i>parse</i>, or the estimated\n     * maximum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     * @throws IllegalArgumentException if field type is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendDayOfWeek#764",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeek(int)",
        "snippet": "    public DateTimeFormatterBuilder appendDayOfWeek(int minDigits) {\n        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);\n    }\n",
        "begin_line": 764,
        "end_line": 766,
        "comment": "\n     * Instructs the printer to emit a numeric dayOfWeek field.\n     *\n     * @param minDigits  minimum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendDayOfYear#784",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendDayOfYear(int)",
        "snippet": "    public DateTimeFormatterBuilder appendDayOfYear(int minDigits) {\n        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);\n    }\n",
        "begin_line": 784,
        "end_line": 786,
        "comment": "\n     * Instructs the printer to emit a numeric dayOfYear field.\n     *\n     * @param minDigits  minimum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendWeekOfWeekyear#794",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear(int)",
        "snippet": "    public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits) {\n        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);\n    }\n",
        "begin_line": 794,
        "end_line": 796,
        "comment": "\n     * Instructs the printer to emit a numeric weekOfWeekyear field.\n     *\n     * @param minDigits  minimum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendWeekyear#806",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendWeekyear(int, int)",
        "snippet": "    public DateTimeFormatterBuilder appendWeekyear(int minDigits, int maxDigits) {\n        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);\n    }\n",
        "begin_line": 806,
        "end_line": 808,
        "comment": "\n     * Instructs the printer to emit a numeric weekyear field.\n     *\n     * @param minDigits  minimum number of digits to <i>print</i>\n     * @param maxDigits  maximum number of digits to <i>parse</i>, or the estimated\n     * maximum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.isPrinter#1164",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.isPrinter(java.lang.Object)",
        "snippet": "    private boolean isPrinter(Object f) {\n        if (f instanceof DateTimePrinter) {\n            if (f instanceof Composite) {\n                return ((Composite)f).isPrinter();\n            }\n            return true;\n        }\n        return false;\n    }\n",
        "begin_line": 1164,
        "end_line": 1172,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.MatchingParser#2793",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.MatchingParser.MatchingParser(org.joda.time.format.DateTimeParser[])",
        "snippet": "        MatchingParser(DateTimeParser[] parsers) {\n            super();\n            iParsers = parsers;\n            int est = 0;\n            for (int i=parsers.length; --i>=0 ;) {\n                DateTimeParser parser = parsers[i];\n                if (parser != null) {\n                    int len = parser.estimateParsedLength();\n                    if (len > est) {\n                        est = len;\n                    }\n                }\n            }\n            iParsedLengthEstimate = est;\n        }\n",
        "begin_line": 2793,
        "end_line": 2807,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.estimateParsedLength#2809",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.MatchingParser.estimateParsedLength()",
        "snippet": "        public int estimateParsedLength() {\n            return iParsedLengthEstimate;\n        }\n",
        "begin_line": 2809,
        "end_line": 2811,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.Composite#2614",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.Composite.Composite(java.util.List<java.lang.Object>)",
        "snippet": "        Composite(List<Object> elementPairs) {\n            super();\n\n            List<Object> printerList = new ArrayList<Object>();\n            List<Object> parserList = new ArrayList<Object>();\n\n            decompose(elementPairs, printerList, parserList);\n\n            if (printerList.contains(null) || printerList.isEmpty()) {\n                iPrinters = null;\n                iPrintedLengthEstimate = 0;\n            } else {\n                int size = printerList.size();\n                iPrinters = new DateTimePrinter[size];\n                int printEst = 0;\n                for (int i=0; i<size; i++) {\n                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n                    printEst += printer.estimatePrintedLength();\n                    iPrinters[i] = printer;\n                }\n                iPrintedLengthEstimate = printEst;\n            }\n\n            if (parserList.contains(null) || parserList.isEmpty()) {\n                iParsers = null;\n                iParsedLengthEstimate = 0;\n            } else {\n                int size = parserList.size();\n                iParsers = new DateTimeParser[size];\n                int parseEst = 0;\n                for (int i=0; i<size; i++) {\n                    DateTimeParser parser = (DateTimeParser) parserList.get(i);\n                    parseEst += parser.estimateParsedLength();\n                    iParsers[i] = parser;\n                }\n                iParsedLengthEstimate = parseEst;\n            }\n        }\n",
        "begin_line": 2614,
        "end_line": 2651,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.estimateParsedLength#2729",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.Composite.estimateParsedLength()",
        "snippet": "        public int estimateParsedLength() {\n            return iParsedLengthEstimate;\n        }\n",
        "begin_line": 2729,
        "end_line": 2731,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.toParser#152",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.toParser()",
        "snippet": "    public DateTimeParser toParser() {\n        Object f = getFormatter();\n        if (isParser(f)) {\n            return (DateTimeParser) f;\n        }\n        throw new UnsupportedOperationException(\"Parsing is not supported\");\n    }\n",
        "begin_line": 152,
        "end_line": 158,
        "comment": "\n     * Internal method to create a DateTimeParser instance using all the\n     * appended elements.\n     * <p>\n     * Most applications will not use this method.\n     * If you want a parser in an application, call {@link #toFormatter()}\n     * and just use the parsing API.\n     * <p>\n     * Subsequent changes to this builder do not affect the returned parser.\n     *\n     * @throws UnsupportedOperationException if parsing is not supported\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.append#304",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser[])",
        "snippet": "    public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser[] parsers) {\n        if (printer != null) {\n            checkPrinter(printer);\n        }\n        if (parsers == null) {\n            throw new IllegalArgumentException(\"No parsers supplied\");\n        }\n        int length = parsers.length;\n        if (length == 1) {\n            if (parsers[0] == null) {\n                throw new IllegalArgumentException(\"No parser supplied\");\n            }\n            return append0(printer, parsers[0]);\n        }\n\n        DateTimeParser[] copyOfParsers = new DateTimeParser[length];\n        int i;\n        for (i = 0; i < length - 1; i++) {\n            if ((copyOfParsers[i] = parsers[i]) == null) {\n                throw new IllegalArgumentException(\"Incomplete parser array\");\n            }\n        }\n        copyOfParsers[i] = parsers[i];\n\n        return append0(printer, new MatchingParser(copyOfParsers));\n    }\n",
        "begin_line": 304,
        "end_line": 329,
        "comment": "\n     * Appends a printer and a set of matching parsers. When parsing, the first\n     * parser in the list is selected for parsing. If it fails, the next is\n     * chosen, and so on. If none of these parsers succeeds, then the failed\n     * position of the parser that made the greatest progress is returned.\n     * <p>\n     * Only the printer is optional. In addition, it is illegal for any but the\n     * last of the parser array elements to be null. If the last element is\n     * null, this represents the empty parser. The presence of an empty parser\n     * indicates that the entire array of parse formats is optional.\n     * <p>\n     * The printer and parser interfaces are the low-level part of the formatting API.\n     * Normally, instances are extracted from another formatter.\n     * Note however that any formatter specific information, such as the locale,\n     * time-zone, chronology, offset parsing or pivot/default year, will not be\n     * extracted by this method.\n     *\n     * @param printer  the printer to add\n     * @param parsers  the parsers to add\n     * @return this DateTimeFormatterBuilder, for chaining\n     * @throws IllegalArgumentException if any printer or parser is of an invalid type\n     * @throws IllegalArgumentException if any parser element but the last is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendOptional#344",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendOptional(org.joda.time.format.DateTimeParser)",
        "snippet": "    public DateTimeFormatterBuilder appendOptional(DateTimeParser parser) {\n        checkParser(parser);\n        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};\n        return append0(null, new MatchingParser(parsers));\n    }\n",
        "begin_line": 344,
        "end_line": 348,
        "comment": "\n     * Appends just a parser element which is optional. With no matching\n     * printer, a printer cannot be built from this DateTimeFormatterBuilder.\n     * <p>\n     * The parser interface is part of the low-level part of the formatting API.\n     * Normally, instances are extracted from another formatter.\n     * Note however that any formatter specific information, such as the locale,\n     * time-zone, chronology, offset parsing or pivot/default year, will not be\n     * extracted by this method.\n     *\n     * @return this DateTimeFormatterBuilder, for chaining\n     * @throws IllegalArgumentException if parser is null or of an invalid type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.checkParser#356",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.checkParser(org.joda.time.format.DateTimeParser)",
        "snippet": "    private void checkParser(DateTimeParser parser) {\n        if (parser == null) {\n            throw new IllegalArgumentException(\"No parser supplied\");\n        }\n    }\n",
        "begin_line": 356,
        "end_line": 360,
        "comment": "\n     * Checks if the parser is non null and a provider.\n     * \n     * @param parser  the parser to check\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.getFormatter#1137",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.getFormatter()",
        "snippet": "    private Object getFormatter() {\n        Object f = iFormatter;\n\n        if (f == null) {\n            if (iElementPairs.size() == 2) {\n                Object printer = iElementPairs.get(0);\n                Object parser = iElementPairs.get(1);\n\n                if (printer != null) {\n                    if (printer == parser || parser == null) {\n                        f = printer;\n                    }\n                } else {\n                    f = parser;\n                }\n            }\n\n            if (f == null) {\n                f = new Composite(iElementPairs);\n            }\n\n            iFormatter = f;\n        }\n\n        return f;\n    }\n",
        "begin_line": 1137,
        "end_line": 1162,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicMonthOfYearDateTimeField.getMinimumValue#338",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return MIN;\n    }\n",
        "begin_line": 338,
        "end_line": 340,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicMonthOfYearDateTimeField.getMaximumValue#343",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return iMax;\n    }\n",
        "begin_line": 343,
        "end_line": 345,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseSingleFieldPeriod.between#88",
        "is_bug": true,
        "src_path": "src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
        "class_name": "org.joda.time.base.BaseSingleFieldPeriod",
        "signature": "org.joda.time.base.BaseSingleFieldPeriod.between(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.ReadablePeriod)",
        "snippet": "    protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n        }\n        if (DateTimeUtils.isContiguous(start) == false) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must be contiguous\");\n        }\n        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\n        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));\n        return values[0];\n    }\n",
        "begin_line": 88,
        "end_line": 106,
        "comment": "\n     * Calculates the number of whole units between the two specified partial datetimes.\n     * <p>\n     * The two partials must contain the same fields, for example you can specify\n     * two <code>LocalDate</code> objects.\n     *\n     * @param start  the start partial date, validated to not be null\n     * @param end  the end partial date, validated to not be null\n     * @param zeroInstance  the zero instance constant, must not be null\n     * @return the period\n     * @throws IllegalArgumentException if the partials are null or invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeUtils.isContiguous#363",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeUtils.java",
        "class_name": "org.joda.time.DateTimeUtils",
        "signature": "org.joda.time.DateTimeUtils.isContiguous(org.joda.time.ReadablePartial)",
        "snippet": "    public static final boolean isContiguous(ReadablePartial partial) {\n        if (partial == null) {\n            throw new IllegalArgumentException(\"Partial must not be null\");\n        }\n        DurationFieldType lastType = null;\n        for (int i = 0; i < partial.size(); i++) {\n            DateTimeField loopField = partial.getField(i);\n            if (i > 0) {\n                if (loopField.getRangeDurationField().getType() != lastType) {\n                    return false;\n                }\n            }\n            lastType = loopField.getDurationField().getType();\n        }\n        return true;\n    }\n",
        "begin_line": 363,
        "end_line": 378,
        "comment": "\n     * Checks whether the partial is contiguous.\n     * <p>\n     * A partial is contiguous if one field starts where another ends.\n     * <p>\n     * For example <code>LocalDate</code> is contiguous because DayOfMonth has\n     * the same range (Month) as the unit of the next field (MonthOfYear), and\n     * MonthOfYear has the same range (Year) as the unit of the next field (Year).\n     * <p>\n     * Similarly, <code>LocalTime</code> is contiguous, as it consists of\n     * MillisOfSecond, SecondOfMinute, MinuteOfHour and HourOfDay (note how\n     * the names of each field 'join up').\n     * <p>\n     * However, a Year/HourOfDay partial is not contiguous because the range\n     * field Day is not equal to the next field Year.\n     * Similarly, a DayOfWeek/DayOfMonth partial is not contiguous because\n     * the range Month is not equal to the next field Day.\n     * \n     * @param partial  the partial to check\n     * @return true if the partial is contiguous\n     * @throws IllegalArgumentException if the partial is null\n     * @since 1.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 2
    },
    {
        "name": "Months.monthsBetween#154",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Months.java",
        "class_name": "org.joda.time.Months",
        "signature": "org.joda.time.Months.monthsBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)",
        "snippet": "    public static Months monthsBetween(ReadablePartial start, ReadablePartial end) {\n        if (start instanceof LocalDate && end instanceof LocalDate)   {\n            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());\n            int months = chrono.months().getDifference(\n                    ((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis());\n            return Months.months(months);\n        }\n        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);\n        return Months.months(amount);\n    }\n",
        "begin_line": 154,
        "end_line": 163,
        "comment": "\n     * Creates a <code>Months</code> representing the number of whole months\n     * between the two specified partial datetimes.\n     * <p>\n     * The two partials must contain the same fields, for example you can specify\n     * two <code>LocalDate</code> objects.\n     *\n     * @param start  the start partial date, must not be null\n     * @param end  the end partial date, must not be null\n     * @return the period in months\n     * @throws IllegalArgumentException if the partials are null or invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "Days.daysBetween#134",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Days.java",
        "class_name": "org.joda.time.Days",
        "signature": "org.joda.time.Days.daysBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)",
        "snippet": "    public static Days daysBetween(ReadablePartial start, ReadablePartial end) {\n        if (start instanceof LocalDate && end instanceof LocalDate)   {\n            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());\n            int days = chrono.days().getDifference(\n                    ((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis());\n            return Days.days(days);\n        }\n        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);\n        return Days.days(amount);\n    }\n",
        "begin_line": 134,
        "end_line": 143,
        "comment": "\n     * Creates a <code>Days</code> representing the number of whole days\n     * between the two specified partial datetimes.\n     * <p>\n     * The two partials must contain the same fields, for example you can specify\n     * two <code>LocalDate</code> objects.\n     *\n     * @param start  the start partial date, must not be null\n     * @param end  the end partial date, must not be null\n     * @return the period in days\n     * @throws IllegalArgumentException if the partials are null or invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "ISODateTimeFormat.yearElement#1584",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/ISODateTimeFormat.java",
        "class_name": "org.joda.time.format.ISODateTimeFormat",
        "signature": "org.joda.time.format.ISODateTimeFormat.yearElement()",
        "snippet": "    private static DateTimeFormatter yearElement() {\n        if (ye == null) {\n            ye = new DateTimeFormatterBuilder()\n                .appendYear(4, 9)\n                .toFormatter();\n        }\n        return ye;\n    }\n",
        "begin_line": 1584,
        "end_line": 1591,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3922
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISODateTimeFormat.monthElement#1593",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/ISODateTimeFormat.java",
        "class_name": "org.joda.time.format.ISODateTimeFormat",
        "signature": "org.joda.time.format.ISODateTimeFormat.monthElement()",
        "snippet": "    private static DateTimeFormatter monthElement() {\n        if (mye == null) {\n            mye = new DateTimeFormatterBuilder()\n                .appendLiteral('-')\n                .appendMonthOfYear(2)\n                .toFormatter();\n        }\n        return mye;\n    }\n",
        "begin_line": 1593,
        "end_line": 1601,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3922
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISODateTimeFormat.dayOfMonthElement#1603",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/ISODateTimeFormat.java",
        "class_name": "org.joda.time.format.ISODateTimeFormat",
        "signature": "org.joda.time.format.ISODateTimeFormat.dayOfMonthElement()",
        "snippet": "    private static DateTimeFormatter dayOfMonthElement() {\n        if (dme == null) {\n            dme = new DateTimeFormatterBuilder()\n                .appendLiteral('-')\n                .appendDayOfMonth(2)\n                .toFormatter();\n        }\n        return dme;\n    }\n",
        "begin_line": 1603,
        "end_line": 1611,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3922
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendSignedDecimal#484",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal(org.joda.time.DateTimeFieldType, int, int)",
        "snippet": "    public DateTimeFormatterBuilder appendSignedDecimal(\n            DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"Field type must not be null\");\n        }\n        if (maxDigits < minDigits) {\n            maxDigits = minDigits;\n        }\n        if (minDigits < 0 || maxDigits <= 0) {\n            throw new IllegalArgumentException();\n        }\n        if (minDigits <= 1) {\n            return append0(new UnpaddedNumber(fieldType, maxDigits, true));\n        } else {\n            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));\n        }\n    }\n",
        "begin_line": 484,
        "end_line": 500,
        "comment": "\n     * Instructs the printer to emit a field value as a decimal number, and the\n     * parser to expect a signed decimal number.\n     *\n     * @param fieldType  type of field to append\n     * @param minDigits  minimum number of digits to <i>print</i>\n     * @param maxDigits  maximum number of digits to <i>parse</i>, or the estimated\n     * maximum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     * @throws IllegalArgumentException if field type is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3922
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendDayOfMonth#774",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth(int)",
        "snippet": "    public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\n        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n    }\n",
        "begin_line": 774,
        "end_line": 776,
        "comment": "\n     * Instructs the printer to emit a numeric dayOfMonth field.\n     *\n     * @param minDigits  minimum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3922
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendMonthOfYear#816",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYear(int)",
        "snippet": "    public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\n        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n    }\n",
        "begin_line": 816,
        "end_line": 818,
        "comment": "\n     * Instructs the printer to emit a numeric monthOfYear field.\n     *\n     * @param minDigits  minimum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3922
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendYear#828",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendYear(int, int)",
        "snippet": "    public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits) {\n        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);\n    }\n",
        "begin_line": 828,
        "end_line": 830,
        "comment": "\n     * Instructs the printer to emit a numeric year field.\n     *\n     * @param minDigits  minimum number of digits to <i>print</i>\n     * @param maxDigits  maximum number of digits to <i>parse</i>, or the estimated\n     * maximum number of digits to print\n     * @return this DateTimeFormatterBuilder, for chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3922
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.PaddedNumber#1460",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber.PaddedNumber(org.joda.time.DateTimeFieldType, int, boolean, int)",
        "snippet": "        protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\n                     boolean signed, int minPrintedDigits)\n        {\n            super(fieldType, maxParsedDigits, signed);\n            iMinPrintedDigits = minPrintedDigits;\n        }\n",
        "begin_line": 1460,
        "end_line": 1465,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.estimatePrintedLength#1467",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber.estimatePrintedLength()",
        "snippet": "        public int estimatePrintedLength() {\n            return iMaxParsedDigits;\n        }\n",
        "begin_line": 1467,
        "end_line": 1469,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.NumberFormatter#1317",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter.NumberFormatter(org.joda.time.DateTimeFieldType, int, boolean)",
        "snippet": "        NumberFormatter(DateTimeFieldType fieldType,\n                int maxParsedDigits, boolean signed) {\n            super();\n            iFieldType = fieldType;\n            iMaxParsedDigits = maxParsedDigits;\n            iSigned = signed;\n        }\n",
        "begin_line": 1317,
        "end_line": 1323,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.estimateParsedLength#1325",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter.estimateParsedLength()",
        "snippet": "        public int estimateParsedLength() {\n            return iMaxParsedDigits;\n        }\n",
        "begin_line": 1325,
        "end_line": 1327,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.isPrinter#2746",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.Composite.isPrinter()",
        "snippet": "        boolean isPrinter() {\n            return iPrinters != null;\n        }\n",
        "begin_line": 2746,
        "end_line": 2748,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.isParser#2750",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.Composite.isParser()",
        "snippet": "        boolean isParser() {\n            return iParsers != null;\n        }\n",
        "begin_line": 2750,
        "end_line": 2752,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.decompose#2758",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.Composite.decompose(java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>)",
        "snippet": "        private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n            int size = elementPairs.size();\n            for (int i=0; i<size; i+=2) {\n                Object element = elementPairs.get(i);\n                if (element instanceof Composite) {\n                    addArrayToList(printerList, ((Composite)element).iPrinters);\n                } else {\n                    printerList.add(element);\n                }\n\n                element = elementPairs.get(i + 1);\n                if (element instanceof Composite) {\n                    addArrayToList(parserList, ((Composite)element).iParsers);\n                } else {\n                    parserList.add(element);\n                }\n            }\n        }\n",
        "begin_line": 2758,
        "end_line": 2775,
        "comment": "\n         * Processes the element pairs, putting results into the given printer\n         * and parser lists.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.addArrayToList#2777",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.Composite.addArrayToList(java.util.List<java.lang.Object>, java.lang.Object[])",
        "snippet": "        private void addArrayToList(List<Object> list, Object[] array) {\n            if (array != null) {\n                for (int i=0; i<array.length; i++) {\n                    list.add(array[i]);\n                }\n            }\n        }\n",
        "begin_line": 2777,
        "end_line": 2783,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.CharacterLiteral#1206",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.CharacterLiteral(char)",
        "snippet": "        CharacterLiteral(char value) {\n            super();\n            iValue = value;\n        }\n",
        "begin_line": 1206,
        "end_line": 1209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.estimatePrintedLength#1211",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.estimatePrintedLength()",
        "snippet": "        public int estimatePrintedLength() {\n            return 1;\n        }\n",
        "begin_line": 1211,
        "end_line": 1213,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.estimateParsedLength#1235",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.estimateParsedLength()",
        "snippet": "        public int estimateParsedLength() {\n            return 1;\n        }\n",
        "begin_line": 1235,
        "end_line": 1237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.append#216",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimeFormatter)",
        "snippet": "    public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n        if (formatter == null) {\n            throw new IllegalArgumentException(\"No formatter supplied\");\n        }\n        return append0(formatter.getPrinter(), formatter.getParser());\n    }\n",
        "begin_line": 216,
        "end_line": 221,
        "comment": "\n     * Appends another formatter.\n     * <p>\n     * This extracts the underlying printer and parser and appends them\n     * The printer and parser interfaces are the low-level part of the formatting API.\n     * Normally, instances are extracted from another formatter.\n     * Note however that any formatter specific information, such as the locale,\n     * time-zone, chronology, offset parsing or pivot/default year, will not be\n     * extracted by this method.\n     *\n     * @param formatter  the formatter to add\n     * @return this DateTimeFormatterBuilder, for chaining\n     * @throws IllegalArgumentException if formatter is null or of an invalid type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.append0#381",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.append0(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)",
        "snippet": "    private DateTimeFormatterBuilder append0(\n            DateTimePrinter printer, DateTimeParser parser) {\n        iFormatter = null;\n        iElementPairs.add(printer);\n        iElementPairs.add(parser);\n        return this;\n    }\n",
        "begin_line": 381,
        "end_line": 387,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.appendLiteral#396",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.appendLiteral(char)",
        "snippet": "    public DateTimeFormatterBuilder appendLiteral(char c) {\n        return append0(new CharacterLiteral(c));\n    }\n",
        "begin_line": 396,
        "end_line": 398,
        "comment": "\n     * Instructs the printer to emit a specific character, and the parser to\n     * expect it. The parser is case-insensitive.\n     *\n     * @return this DateTimeFormatterBuilder, for chaining\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.isParser#1174",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.isParser(java.lang.Object)",
        "snippet": "    private boolean isParser(Object f) {\n        if (f instanceof DateTimeParser) {\n            if (f instanceof Composite) {\n                return ((Composite)f).isParser();\n            }\n            return true;\n        }\n        return false;\n    }\n",
        "begin_line": 1174,
        "end_line": 1182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatter.getPrinter#154",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatter.java",
        "class_name": "org.joda.time.format.DateTimeFormatter",
        "signature": "org.joda.time.format.DateTimeFormatter.getPrinter()",
        "snippet": "    public DateTimePrinter getPrinter() {\n        return iPrinter;\n    }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "\n     * Gets the internal printer object that performs the real printing work.\n     * \n     * @return the internal printer; is null if printing not supported\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatter.getParser#172",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatter.java",
        "class_name": "org.joda.time.format.DateTimeFormatter",
        "signature": "org.joda.time.format.DateTimeFormatter.getParser()",
        "snippet": "    public DateTimeParser getParser() {\n        return iParser;\n    }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": "\n     * Gets the internal parser object that performs the real parsing work.\n     * \n     * @return the internal parser; is null if parsing not supported\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseChronology.set#238",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BaseChronology.java",
        "class_name": "org.joda.time.chrono.BaseChronology",
        "signature": "org.joda.time.chrono.BaseChronology.set(org.joda.time.ReadablePartial, long)",
        "snippet": "    public long set(ReadablePartial partial, long instant) {\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\n        }\n        return instant;\n    }\n",
        "begin_line": 238,
        "end_line": 243,
        "comment": "\n     * Sets the partial into the instant.\n     *\n     * @param partial  the partial instant to use\n     * @param instant  the instant to update\n     * @return the updated instant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDateTimeField.getMinimumValue#757",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)",
        "snippet": "    public int getMinimumValue(ReadablePartial instant) {\n        return getMinimumValue();\n    }\n",
        "begin_line": 757,
        "end_line": 759,
        "comment": "\n     * Get the minimum value for this field evaluated at the specified instant.\n     * <p>\n     * This implementation returns the same as {@link #getMinimumValue()}.\n     * \n     * @param instant  the partial instant to query\n     * @return the minimum value for this field, in the units of the field\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDateTimeField.getMinimumValue#771",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.getMinimumValue(org.joda.time.ReadablePartial, int[])",
        "snippet": "    public int getMinimumValue(ReadablePartial instant, int[] values) {\n        return getMinimumValue(instant);\n    }\n",
        "begin_line": 771,
        "end_line": 773,
        "comment": "\n     * Get the minimum value for this field using the partial instant and\n     * the specified values.\n     * <p>\n     * This implementation returns the same as {@link #getMinimumValue(ReadablePartial)}.\n     * \n     * @param instant  the partial instant to query\n     * @param values  the values to use\n     * @return the minimum value for this field, in the units of the field\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDateTimeField.getMaximumValue#803",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)",
        "snippet": "    public int getMaximumValue(ReadablePartial instant) {\n        return getMaximumValue();\n    }\n",
        "begin_line": 803,
        "end_line": 805,
        "comment": "\n     * Get the maximum value for this field evaluated at the specified instant.\n     * <p>\n     * This implementation returns the same as {@link #getMaximumValue()}.\n     * \n     * @param instant  the partial instant to query\n     * @return the maximum value for this field, in the units of the field\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDateTimeField.getMaximumValue#817",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.getMaximumValue(org.joda.time.ReadablePartial, int[])",
        "snippet": "    public int getMaximumValue(ReadablePartial instant, int[] values) {\n        return getMaximumValue(instant);\n    }\n",
        "begin_line": 817,
        "end_line": 819,
        "comment": "\n     * Get the maximum value for this field using the partial instant and\n     * the specified values.\n     * <p>\n     * This implementation returns the same as {@link #getMaximumValue(ReadablePartial)}.\n     * \n     * @param instant  the partial instant to query\n     * @param values  the values to use\n     * @return the maximum value for this field, in the units of the field\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseChronology.validate#180",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BaseChronology.java",
        "class_name": "org.joda.time.chrono.BaseChronology",
        "signature": "org.joda.time.chrono.BaseChronology.validate(org.joda.time.ReadablePartial, int[])",
        "snippet": "    public void validate(ReadablePartial partial, int[] values) {\n        // check values in standard range, catching really stupid cases like -1\n        // this means that the second check will not hit trouble\n        int size = partial.size();\n        for (int i = 0; i < size; i++) {\n            int value = values[i];\n            DateTimeField field = partial.getField(i);\n            if (value < field.getMinimumValue()) {\n                throw new IllegalFieldValueException\n                    (field.getType(), Integer.valueOf(value),\n                     Integer.valueOf(field.getMinimumValue()), null);\n            }\n            if (value > field.getMaximumValue()) {\n                throw new IllegalFieldValueException\n                    (field.getType(), Integer.valueOf(value),\n                     null, Integer.valueOf(field.getMaximumValue()));\n            }\n        }\n        // check values in specific range, catching really odd cases like 30th Feb\n        for (int i = 0; i < size; i++) {\n            int value = values[i];\n            DateTimeField field = partial.getField(i);\n            if (value < field.getMinimumValue(partial, values)) {\n                throw new IllegalFieldValueException\n                    (field.getType(), Integer.valueOf(value),\n                     Integer.valueOf(field.getMinimumValue(partial, values)), null);\n            }\n            if (value > field.getMaximumValue(partial, values)) {\n                throw new IllegalFieldValueException\n                    (field.getType(), Integer.valueOf(value),\n                     null, Integer.valueOf(field.getMaximumValue(partial, values)));\n            }\n        }\n    }\n",
        "begin_line": 180,
        "end_line": 213,
        "comment": "\n     * Validates whether the fields stored in a partial instant are valid.\n     * <p>\n     * This implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\n     * and {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n     *\n     * @param partial  the partial instant to validate\n     * @param values  the values to validate, not null unless the partial is empty\n     * @throws IllegalArgumentException if the instant is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseChronology.get#254",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BaseChronology.java",
        "class_name": "org.joda.time.chrono.BaseChronology",
        "signature": "org.joda.time.chrono.BaseChronology.get(org.joda.time.ReadablePeriod, long, long)",
        "snippet": "    public int[] get(ReadablePeriod period, long startInstant, long endInstant) {\n        int size = period.size();\n        int[] values = new int[size];\n        if (startInstant != endInstant) {\n            for (int i = 0; i < size; i++) {\n                DurationField field = period.getFieldType(i).getField(this);\n                int value = field.getDifference(endInstant, startInstant);\n                startInstant = field.add(startInstant, value);\n                values[i] = value;\n            }\n        }\n        return values;\n    }\n",
        "begin_line": 254,
        "end_line": 266,
        "comment": "\n     * Gets the values of a period from an interval.\n     *\n     * @param period  the period instant to use\n     * @param startInstant  the start instant of an interval to query\n     * @param endInstant  the start instant of an interval to query\n     * @return the values of the period extracted from the interval\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasePartial.BasePartial#179",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/BasePartial.java",
        "class_name": "org.joda.time.base.BasePartial",
        "signature": "org.joda.time.base.BasePartial.BasePartial(int[], org.joda.time.Chronology)",
        "snippet": "    protected BasePartial(int[] values, Chronology chronology) {\n        super();\n        chronology = DateTimeUtils.getChronology(chronology);\n        iChronology = chronology.withUTC();\n        chronology.validate(this, values);\n        iValues = values;\n    }\n",
        "begin_line": 179,
        "end_line": 185,
        "comment": "\n     * Constructs a partial with specified time field values and chronology.\n     * <p>\n     * The constructor uses the time zone of the chronology specified.\n     * Once the constructor is complete, all further calculations are performed\n     * without reference to a timezone (by switching to UTC).\n     * <p>\n     * The array of values is assigned (not cloned) to the new instance.\n     *\n     * @param values  the new set of values\n     * @param chronology  the chronology, null means ISOChronology in the default zone\n     * @throws IllegalArgumentException if the values are invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractPartial.getField#104",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/AbstractPartial.java",
        "class_name": "org.joda.time.base.AbstractPartial",
        "signature": "org.joda.time.base.AbstractPartial.getField(int)",
        "snippet": "    public DateTimeField getField(int index) {\n        return getField(index, getChronology());\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * Gets the field at the specifed index.\n     * \n     * @param index  the index\n     * @return the field\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasePartial.getValue#224",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/BasePartial.java",
        "class_name": "org.joda.time.base.BasePartial",
        "signature": "org.joda.time.base.BasePartial.getValue(int)",
        "snippet": "    public int getValue(int index) {\n        return iValues[index];\n    }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n     * Gets the value of the field at the specifed index.\n     * \n     * @param index  the index\n     * @return the value\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.343
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasePartial.getChronology#248",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/BasePartial.java",
        "class_name": "org.joda.time.base.BasePartial",
        "signature": "org.joda.time.base.BasePartial.getChronology()",
        "snippet": "    public Chronology getChronology() {\n        return iChronology;\n    }\n",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * Gets the chronology of the partial which is never null.\n     * <p>\n     * The {@link Chronology} is the calculation engine behind the partial and\n     * provides conversion and validation of the fields in a particular calendar system.\n     * \n     * @return the chronology, never null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.343
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.getField#479",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.getField(org.joda.time.Chronology)",
        "snippet": "        public DateTimeField getField(Chronology chronology) {\n            chronology = DateTimeUtils.getChronology(chronology);\n\n            switch (iOrdinal) {\n                case ERA:\n                    return chronology.era();\n                case YEAR_OF_ERA:\n                    return chronology.yearOfEra();\n                case CENTURY_OF_ERA:\n                    return chronology.centuryOfEra();\n                case YEAR_OF_CENTURY:\n                    return chronology.yearOfCentury();\n                case YEAR:\n                    return chronology.year();\n                case DAY_OF_YEAR:\n                    return chronology.dayOfYear();\n                case MONTH_OF_YEAR:\n                    return chronology.monthOfYear();\n                case DAY_OF_MONTH:\n                    return chronology.dayOfMonth();\n                case WEEKYEAR_OF_CENTURY:\n                    return chronology.weekyearOfCentury();\n                case WEEKYEAR:\n                    return chronology.weekyear();\n                case WEEK_OF_WEEKYEAR:\n                    return chronology.weekOfWeekyear();\n                case DAY_OF_WEEK:\n                    return chronology.dayOfWeek();\n                case HALFDAY_OF_DAY:\n                    return chronology.halfdayOfDay();\n                case HOUR_OF_HALFDAY:\n                    return chronology.hourOfHalfday();\n                case CLOCKHOUR_OF_HALFDAY:\n                    return chronology.clockhourOfHalfday();\n                case CLOCKHOUR_OF_DAY:\n                    return chronology.clockhourOfDay();\n                case HOUR_OF_DAY:\n                    return chronology.hourOfDay();\n                case MINUTE_OF_DAY:\n                    return chronology.minuteOfDay();\n                case MINUTE_OF_HOUR:\n                    return chronology.minuteOfHour();\n                case SECOND_OF_DAY:\n                    return chronology.secondOfDay();\n                case SECOND_OF_MINUTE:\n                    return chronology.secondOfMinute();\n                case MILLIS_OF_DAY:\n                    return chronology.millisOfDay();\n                case MILLIS_OF_SECOND:\n                    return chronology.millisOfSecond();\n                default:\n                    // Shouldn't happen.\n                    throw new InternalError();\n            }\n        }\n",
        "begin_line": 479,
        "end_line": 533,
        "comment": " @inheritdoc ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 2
    },
    {
        "name": "Months.getFieldType#229",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Months.java",
        "class_name": "org.joda.time.Months",
        "signature": "org.joda.time.Months.getFieldType()",
        "snippet": "    public DurationFieldType getFieldType() {\n        return DurationFieldType.months();\n    }\n",
        "begin_line": 229,
        "end_line": 231,
        "comment": "\n     * Gets the duration field type, which is <code>months</code>.\n     *\n     * @return the period type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "Days.getFieldType#234",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Days.java",
        "class_name": "org.joda.time.Days",
        "signature": "org.joda.time.Days.getFieldType()",
        "snippet": "    public DurationFieldType getFieldType() {\n        return DurationFieldType.days();\n    }\n",
        "begin_line": 234,
        "end_line": 236,
        "comment": "\n     * Gets the duration field type, which is <code>days</code>.\n     *\n     * @return the period type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFormatter.DateTimeFormatter#123",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatter.java",
        "class_name": "org.joda.time.format.DateTimeFormatter",
        "signature": "org.joda.time.format.DateTimeFormatter.DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer, int)",
        "snippet": "    private DateTimeFormatter(\n            DateTimePrinter printer, DateTimeParser parser,\n            Locale locale, boolean offsetParsed,\n            Chronology chrono, DateTimeZone zone,\n            Integer pivotYear, int defaultYear) {\n        super();\n        iPrinter = printer;\n        iParser = parser;\n        iLocale = locale;\n        iOffsetParsed = offsetParsed;\n        iChrono = chrono;\n        iZone = zone;\n        iPivotYear = pivotYear;\n        iDefaultYear = defaultYear;\n    }\n",
        "begin_line": 123,
        "end_line": 137,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseSingleFieldPeriod.getFieldType#215",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
        "class_name": "org.joda.time.base.BaseSingleFieldPeriod",
        "signature": "org.joda.time.base.BaseSingleFieldPeriod.getFieldType(int)",
        "snippet": "    public DurationFieldType getFieldType(int index) {\n        if (index != 0) {\n            throw new IndexOutOfBoundsException(String.valueOf(index));\n        }\n        return getFieldType();\n    }\n",
        "begin_line": 215,
        "end_line": 220,
        "comment": "\n     * Gets the field type at the specified index.\n     * <p>\n     * The only index supported by this period is zero which returns the\n     * field type of this class.\n     *\n     * @param index  the index to retrieve, which must be zero\n     * @return the field at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseSingleFieldPeriod.size#201",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
        "class_name": "org.joda.time.base.BaseSingleFieldPeriod",
        "signature": "org.joda.time.base.BaseSingleFieldPeriod.size()",
        "snippet": "    public int size() {\n        return 1;\n    }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "\n     * Gets the number of fields that this period supports, which is one.\n     *\n     * @return the number of fields supported, which is one\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2949
        },
        "num_failing_tests": 2
    },
    {
        "name": "Months.months#89",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Months.java",
        "class_name": "org.joda.time.Months",
        "signature": "org.joda.time.Months.months(int)",
        "snippet": "    public static Months months(int months) {\n        switch (months) {\n            case 0:\n                return ZERO;\n            case 1:\n                return ONE;\n            case 2:\n                return TWO;\n            case 3:\n                return THREE;\n            case 4:\n                return FOUR;\n            case 5:\n                return FIVE;\n            case 6:\n                return SIX;\n            case 7:\n                return SEVEN;\n            case 8:\n                return EIGHT;\n            case 9:\n                return NINE;\n            case 10:\n                return TEN;\n            case 11:\n                return ELEVEN;\n            case 12:\n                return TWELVE;\n            case Integer.MAX_VALUE:\n                return MAX_VALUE;\n            case Integer.MIN_VALUE:\n                return MIN_VALUE;\n            default:\n                return new Months(months);\n        }\n    }\n",
        "begin_line": 89,
        "end_line": 124,
        "comment": "\n     * Obtains an instance of <code>Months</code> that may be cached.\n     * <code>Months</code> is immutable, so instances can be cached and shared.\n     * This factory method provides access to shared instances.\n     *\n     * @param months  the number of months to obtain an instance for\n     * @return the instance of Months\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeFormatterBuilder.DateTimeFormatterBuilder#83",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.DateTimeFormatterBuilder()",
        "snippet": "    public DateTimeFormatterBuilder() {\n        super();\n        iElementPairs = new ArrayList<Object>();\n    }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "\n     * Creates a DateTimeFormatterBuilder.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2828
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.toFormatter#104",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.toFormatter()",
        "snippet": "    public DateTimeFormatter toFormatter() {\n        Object f = getFormatter();\n        DateTimePrinter printer = null;\n        if (isPrinter(f)) {\n            printer = (DateTimePrinter) f;\n        }\n        DateTimeParser parser = null;\n        if (isParser(f)) {\n            parser = (DateTimeParser) f;\n        }\n        if (printer != null || parser != null) {\n            return new DateTimeFormatter(printer, parser);\n        }\n        throw new UnsupportedOperationException(\"Both printing and parsing not supported\");\n    }\n",
        "begin_line": 104,
        "end_line": 118,
        "comment": "\n     * Constructs a DateTimeFormatter using all the appended elements.\n     * <p>\n     * This is the main method used by applications at the end of the build\n     * process to create a usable formatter.\n     * <p>\n     * Subsequent changes to this builder do not affect the returned formatter.\n     * <p>\n     * The returned formatter may not support both printing and parsing.\n     * The methods {@link DateTimeFormatter#isPrinter()} and\n     * {@link DateTimeFormatter#isParser()} will help you determine the state\n     * of the formatter.\n     *\n     * @throws UnsupportedOperationException if neither printing nor parsing is supported\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2828
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatterBuilder.append0#373",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "class_name": "org.joda.time.format.DateTimeFormatterBuilder",
        "signature": "org.joda.time.format.DateTimeFormatterBuilder.append0(java.lang.Object)",
        "snippet": "    private DateTimeFormatterBuilder append0(Object element) {\n        iFormatter = null;\n        // Add the element as both a printer and parser.\n        iElementPairs.add(element);\n        iElementPairs.add(element);\n        return this;\n    }\n",
        "begin_line": 373,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2828
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFormatter.DateTimeFormatter#107",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/DateTimeFormatter.java",
        "class_name": "org.joda.time.format.DateTimeFormatter",
        "signature": "org.joda.time.format.DateTimeFormatter.DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)",
        "snippet": "    public DateTimeFormatter(\n            DateTimePrinter printer, DateTimeParser parser) {\n        super();\n        iPrinter = printer;\n        iParser = parser;\n        iLocale = null;\n        iOffsetParsed = false;\n        iChrono = null;\n        iZone = null;\n        iPivotYear = null;\n        iDefaultYear = 2000;\n    }\n",
        "begin_line": 107,
        "end_line": 118,
        "comment": "\n     * Creates a new formatter, however you will normally use the factory\n     * or the builder.\n     * \n     * @param printer  the internal printer, null if cannot print\n     * @param parser  the internal parser, null if cannot parse\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2828
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractPartial.AbstractPartial#53",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/AbstractPartial.java",
        "class_name": "org.joda.time.base.AbstractPartial",
        "signature": "org.joda.time.base.AbstractPartial.AbstractPartial()",
        "snippet": "    protected AbstractPartial() {\n        super();\n    }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.254
        },
        "num_failing_tests": 2
    },
    {
        "name": "ImpreciseDateTimeField.add#181",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
        "class_name": "org.joda.time.field.ImpreciseDateTimeField",
        "signature": "org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.add(long, int)",
        "snippet": "        public long add(long instant, int value) {\n            return ImpreciseDateTimeField.this.add(instant, value);\n        }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicGJChronology.getDaysInMonthMaxForSet#133",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet(long, int)",
        "snippet": "    int getDaysInMonthMaxForSet(long instant, int value) {\n        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n    }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicDayOfMonthDateTimeField.getMinimumValue#54",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return 1;\n    }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicDayOfMonthDateTimeField.getMaximumValueForSet#95",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet(long, int)",
        "snippet": "    protected int getMaximumValueForSet(long instant, int value) {\n        return iChronology.getDaysInMonthMaxForSet(instant, value);\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationDateTimeField.set#77",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.set(long, int)",
        "snippet": "    public long set(long instant, int value) {\n        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n                                     getMaximumValueForSet(instant, value));\n        return instant + (value - get(instant)) * iUnitMillis;\n    }\n",
        "begin_line": 77,
        "end_line": 81,
        "comment": "\n     * Set the specified amount of units to the specified time instant.\n     * \n     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in\n     * @param value  value of units to set.\n     * @return the updated time instant.\n     * @throws IllegalArgumentException if value is too large or too small.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "ImpreciseDateTimeField.getDifference#189",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
        "class_name": "org.joda.time.field.ImpreciseDateTimeField",
        "signature": "org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.getDifference(long, long)",
        "snippet": "        public int getDifference(long minuendInstant, long subtrahendInstant) {\n            return ImpreciseDateTimeField.this\n                .getDifference(minuendInstant, subtrahendInstant);\n        }\n",
        "begin_line": 189,
        "end_line": 192,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "ImpreciseDateTimeField.getDifference#90",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
        "class_name": "org.joda.time.field.ImpreciseDateTimeField",
        "signature": "org.joda.time.field.ImpreciseDateTimeField.getDifference(long, long)",
        "snippet": "    public int getDifference(long minuendInstant, long subtrahendInstant) {\n        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n    }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Computes the difference between two instants, as measured in the units\n     * of this field. Any fractional units are dropped from the result. Calling\n     * getDifference reverses the effect of calling add. In the following code:\n     *\n     * <pre>\n     * long instant = ...\n     * int v = ...\n     * int age = getDifference(add(instant, v), instant);\n     * </pre>\n     *\n     * The value 'age' is the same as the value 'v'.\n     * <p>\n     * The default implementation call getDifferenceAsLong and converts the\n     * return value to an int.\n     *\n     * @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to\n     * subtract from\n     * @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to\n     * subtract off the minuend\n     * @return the difference in the units of this field\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicMonthOfYearDateTimeField.set#297",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.set(long, int)",
        "snippet": "    public long set(long instant, int month) {\n        FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n        //\n        int thisYear = iChronology.getYear(instant);\n        //\n        int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n        if (thisDom > maxDom) {\n            // Quietly force DOM to nearest sane value.\n            thisDom = maxDom;\n        }\n        // Return newly calculated millis value\n        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n            iChronology.getMillisOfDay(instant);\n    }\n",
        "begin_line": 297,
        "end_line": 311,
        "comment": "\n     * Set the Month component of the specified time instant.<p>\n     * If the new month has less total days than the specified\n     * day of the month, this value is coerced to the nearest\n     * sane value. e.g.<p>\n     * 07-31 to month 6 = 06-30<p>\n     * 03-31 to month 2 = 02-28 or 02-29 depending<p>\n     * \n     * @param instant  the time instant in millis to update.\n     * @param month  the month (1,12) to update the time to.\n     * @return the updated time instant.\n     * @throws IllegalArgumentException  if month is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getDayOfMonth#457",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDayOfMonth(long, int)",
        "snippet": "    int getDayOfMonth(long millis, int year) {\n        int month = getMonthOfYear(millis, year);\n        return getDayOfMonth(millis, year, month);\n    }\n",
        "begin_line": 457,
        "end_line": 460,
        "comment": "\n     * @param millis from 1970-01-01T00:00:00Z\n     * @param year precalculated year of millis\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicDayOfMonthDateTimeField.get#46",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField.get(long)",
        "snippet": "    public int get(long instant) {\n        return iChronology.getDayOfMonth(instant);\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.198
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getDayOfMonth#447",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDayOfMonth(long)",
        "snippet": "    int getDayOfMonth(long millis) {\n        int year = getYear(millis);\n        int month = getMonthOfYear(millis, year);\n        return getDayOfMonth(millis, year, month);\n    }\n",
        "begin_line": 447,
        "end_line": 451,
        "comment": "\n     * @param millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.198
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getMillisOfDay#550",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getMillisOfDay(long)",
        "snippet": "    int getMillisOfDay(long instant) {\n        if (instant >= 0) {\n            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n        } else {\n            return (DateTimeConstants.MILLIS_PER_DAY - 1)\n                + (int) ((instant + 1) % DateTimeConstants.MILLIS_PER_DAY);\n        }\n    }\n",
        "begin_line": 550,
        "end_line": 557,
        "comment": "\n     * @param instant millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.198
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicGJChronology.getMonthOfYear#79",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.getMonthOfYear(long, int)",
        "snippet": "    int getMonthOfYear(long millis, int year) {\n        // Perform a binary search to get the month. To make it go even faster,\n        // compare using ints instead of longs. The number of milliseconds per\n        // year exceeds the limit of a 32-bit int's capacity, so divide by\n        // 1024. No precision is lost (except time of day) since the number of\n        // milliseconds per day contains 1024 as a factor. After the division,\n        // the instant isn't measured in milliseconds, but in units of\n        // (128/125)seconds.\n\n        int i = (int)((millis - getYearMillis(year)) >> 10);\n\n        // There are 86400000 milliseconds per day, but divided by 1024 is\n        // 84375. There are 84375 (128/125)seconds per day.\n\n        return\n            (isLeapYear(year))\n            ? ((i < 182 * 84375)\n               ? ((i < 91 * 84375)\n                  ? ((i < 31 * 84375) ? 1 : (i < 60 * 84375) ? 2 : 3)\n                  : ((i < 121 * 84375) ? 4 : (i < 152 * 84375) ? 5 : 6))\n               : ((i < 274 * 84375)\n                  ? ((i < 213 * 84375) ? 7 : (i < 244 * 84375) ? 8 : 9)\n                  : ((i < 305 * 84375) ? 10 : (i < 335 * 84375) ? 11 : 12)))\n            : ((i < 181 * 84375)\n               ? ((i < 90 * 84375)\n                  ? ((i < 31 * 84375) ? 1 : (i < 59 * 84375) ? 2 : 3)\n                  : ((i < 120 * 84375) ? 4 : (i < 151 * 84375) ? 5 : 6))\n               : ((i < 273 * 84375)\n                  ? ((i < 212 * 84375) ? 7 : (i < 243 * 84375) ? 8 : 9)\n                  : ((i < 304 * 84375) ? 10 : (i < 334 * 84375) ? 11 : 12)));\n    }\n",
        "begin_line": 79,
        "end_line": 109,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1907
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getDayOfMonth#467",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getDayOfMonth(long, int, int)",
        "snippet": "    int getDayOfMonth(long millis, int year, int month) {\n        long dateMillis = getYearMillis(year);\n        dateMillis += getTotalMillisByYearMonth(year, month);\n        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n    }\n",
        "begin_line": 467,
        "end_line": 471,
        "comment": "\n     * @param millis from 1970-01-01T00:00:00Z\n     * @param year precalculated year of millis\n     * @param month precalculated month of millis\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1907
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.getAverageMillisPerYearDividedByTwo#232",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo()",
        "snippet": "    long getAverageMillisPerYearDividedByTwo() {\n        return MILLIS_PER_YEAR / 2;\n    }\n",
        "begin_line": 232,
        "end_line": 234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.getApproxMillisAtEpochDividedByTwo#240",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo()",
        "snippet": "    long getApproxMillisAtEpochDividedByTwo() {\n        return (1970L * MILLIS_PER_YEAR) / 2;\n    }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicGJChronology.getDaysInYearMonth#119",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth(int, int)",
        "snippet": "    int getDaysInYearMonth(int year, int month) {\n        if (isLeapYear(year)) {\n            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n        } else {\n            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n        }\n    }\n",
        "begin_line": 119,
        "end_line": 125,
        "comment": "\n     * Gets the number of days in the specified month and year.\n     * \n     * @param year  the year\n     * @param month  the month\n     * @return the number of days\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getYear#393",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getYear(long)",
        "snippet": "    int getYear(long instant) {\n        // Get an initial estimate of the year, and the millis value that\n        // represents the start of that year. Then verify estimate and fix if\n        // necessary.\n\n        // Initial estimate uses values divided by two to avoid overflow.\n        long unitMillis = getAverageMillisPerYearDividedByTwo();\n        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n        if (i2 < 0) {\n            i2 = i2 - unitMillis + 1;\n        }\n        int year = (int) (i2 / unitMillis);\n\n        long yearStart = getYearMillis(year);\n        long diff = instant - yearStart;\n\n        if (diff < 0) {\n            year--;\n        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n            // One year may need to be added to fix estimate.\n            long oneYear;\n            if (isLeapYear(year)) {\n                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\n            } else {\n                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n            }\n\n            yearStart += oneYear;\n\n            if (yearStart <= instant) {\n                // Didn't go too far, so actually add one year.\n                year++;\n            }\n        }\n\n        return year;\n    }\n",
        "begin_line": 393,
        "end_line": 429,
        "comment": "\n     * @param instant millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicGJChronology.getTotalMillisByYearMonth#138",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth(int, int)",
        "snippet": "    long getTotalMillisByYearMonth(int year, int month) {\n        if (isLeapYear(year)) {\n            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n        } else {\n            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n        }\n    }\n",
        "begin_line": 138,
        "end_line": 144,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1841
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getYearMonthDayMillis#384",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getYearMonthDayMillis(int, int, int)",
        "snippet": "    long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n        long millis = getYearMillis(year);\n        millis += getTotalMillisByYearMonth(year, month);\n        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n    }\n",
        "begin_line": 384,
        "end_line": 388,
        "comment": "\n     * Get the milliseconds for a particular date.\n     *\n     * @param year The year to use.\n     * @param month The month to use\n     * @param dayOfMonth The day of the month to use\n     * @return millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1841
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.isLeapYear#196",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.isLeapYear(int)",
        "snippet": "    boolean isLeapYear(int year) {\n        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n    }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1811
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.calculateFirstDayOfYearMillis#200",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis(int)",
        "snippet": "    long calculateFirstDayOfYearMillis(int year) {\n        // Initial value is just temporary.\n        int leapYears = year / 100;\n        if (year < 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers. When the expression is written as\n            // (year / 4) - (year / 100) + (year / 400),\n            // it works for both positive and negative values, except this optimization\n            // eliminates two divisions.\n            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;\n        } else {\n            leapYears = (year >> 2) - leapYears + (leapYears >> 2);\n            if (isLeapYear(year)) {\n                leapYears--;\n            }\n        }\n\n        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n    }\n",
        "begin_line": 200,
        "end_line": 218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1811
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.YearInfo#770",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.YearInfo.YearInfo(int, long)",
        "snippet": "        YearInfo(int year, long firstDayMillis) {\n            iYear = year;\n            iFirstDayMillis = firstDayMillis;\n        }\n",
        "begin_line": 770,
        "end_line": 773,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getYearMillis#359",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getYearMillis(int)",
        "snippet": "    long getYearMillis(int year) {\n        return getYearInfo(year).iFirstDayMillis;\n    }\n",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\n     * Get the milliseconds for the start of a year.\n     *\n     * @param year The year to use.\n     * @return millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getYearInfo#737",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getYearInfo(int)",
        "snippet": "    private YearInfo getYearInfo(int year) {\n        YearInfo info = iYearInfoCache[year & CACHE_MASK];\n        if (info == null || info.iYear != year) {\n            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));\n            iYearInfoCache[year & CACHE_MASK] = info;\n        }\n        return info;\n    }\n",
        "begin_line": 737,
        "end_line": 744,
        "comment": " Although accessed by multiple threads, this method doesn't need to be synchronized.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 2
    },
    {
        "name": "Months.getMonths#248",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Months.java",
        "class_name": "org.joda.time.Months",
        "signature": "org.joda.time.Months.getMonths()",
        "snippet": "    public int getMonths() {\n        return getValue();\n    }\n",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * Gets the number of months that this period represents.\n     *\n     * @return the number of months in the period\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicChronology.getYearMonthMillis#370",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getYearMonthMillis(int, int)",
        "snippet": "    long getYearMonthMillis(int year, int month) {\n        long millis = getYearMillis(year);\n        millis += getTotalMillisByYearMonth(year, month);\n        return millis;\n    }\n",
        "begin_line": 370,
        "end_line": 374,
        "comment": "\n     * Get the milliseconds for the start of a month.\n     *\n     * @param year The year to use.\n     * @param month The month to use\n     * @return millis from 1970-01-01T00:00:00Z\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "ISOChronology.getInstance#95",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ISOChronology.java",
        "class_name": "org.joda.time.chrono.ISOChronology",
        "signature": "org.joda.time.chrono.ISOChronology.getInstance(org.joda.time.DateTimeZone)",
        "snippet": "    public static ISOChronology getInstance(DateTimeZone zone) {\n        if (zone == null) {\n            zone = DateTimeZone.getDefault();\n        }\n        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n        ISOChronology chrono = cFastCache[index];\n        if (chrono != null && chrono.getZone() == zone) {\n            return chrono;\n        }\n        synchronized (cCache) {\n            chrono = cCache.get(zone);\n            if (chrono == null) {\n                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n                cCache.put(zone, chrono);\n            }\n        }\n        cFastCache[index] = chrono;\n        return chrono;\n    }\n",
        "begin_line": 95,
        "end_line": 113,
        "comment": "\n     * Gets an instance of the ISOChronology in the given time zone.\n     * \n     * @param zone  the time zone to get the chronology in, null is default\n     * @return a chronology in the specified time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.getField#281",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.StandardDurationFieldType.getField(org.joda.time.Chronology)",
        "snippet": "        public DurationField getField(Chronology chronology) {\n            chronology = DateTimeUtils.getChronology(chronology);\n            \n            switch (iOrdinal) {\n                case ERAS:\n                    return chronology.eras();\n                case CENTURIES:\n                    return chronology.centuries();\n                case WEEKYEARS:\n                    return chronology.weekyears();\n                case YEARS:\n                    return chronology.years();\n                case MONTHS:\n                    return chronology.months();\n                case WEEKS:\n                    return chronology.weeks();\n                case DAYS:\n                    return chronology.days();\n                case HALFDAYS:\n                    return chronology.halfdays();\n                case HOURS:\n                    return chronology.hours();\n                case MINUTES:\n                    return chronology.minutes();\n                case SECONDS:\n                    return chronology.seconds();\n                case MILLIS:\n                    return chronology.millis();\n                default:\n                    // Shouldn't happen.\n                    throw new InternalError();\n            }\n        }\n",
        "begin_line": 281,
        "end_line": 313,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 2
    },
    {
        "name": "Days.getDays#342",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Days.java",
        "class_name": "org.joda.time.Days",
        "signature": "org.joda.time.Days.getDays()",
        "snippet": "    public int getDays() {\n        return getValue();\n    }\n",
        "begin_line": 342,
        "end_line": 344,
        "comment": "\n     * Gets the number of days that this period represents.\n     *\n     * @return the number of days in the period\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "FieldUtils.safeToInt#186",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/FieldUtils.java",
        "class_name": "org.joda.time.field.FieldUtils",
        "signature": "org.joda.time.field.FieldUtils.safeToInt(long)",
        "snippet": "    public static int safeToInt(long value) {\n        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\n            return (int) value;\n        }\n        throw new ArithmeticException(\"Value cannot fit in an int: \" + value);\n    }\n",
        "begin_line": 186,
        "end_line": 191,
        "comment": "\n     * Casts to an int throwing an exception if overflow occurs.\n     * \n     * @param value  the value\n     * @return the value as an int\n     * @throws ArithmeticException if the value is too big or too small\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1562
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.getZone#105",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.getZone()",
        "snippet": "    public DateTimeZone getZone() {\n        Chronology base;\n        if ((base = iBase) != null) {\n            return base.getZone();\n        }\n        return null;\n    }\n",
        "begin_line": 105,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodType.months#371",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/PeriodType.java",
        "class_name": "org.joda.time.PeriodType",
        "signature": "org.joda.time.PeriodType.months()",
        "snippet": "    public static PeriodType months() {\n        PeriodType type = cMonths;\n        if (type == null) {\n            type = new PeriodType(\n                \"Months\",\n                new DurationFieldType[] { DurationFieldType.months() },\n                new int[] { -1, 0, -1, -1, -1, -1, -1, -1, }\n            );\n            cMonths = type;\n        }\n        return type;\n    }\n",
        "begin_line": 371,
        "end_line": 382,
        "comment": "\n     * Gets a type that defines just the months field.\n     *\n     * @return the period type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 1
    },
    {
        "name": "Months.Months#210",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Months.java",
        "class_name": "org.joda.time.Months",
        "signature": "org.joda.time.Months.Months(int)",
        "snippet": "    private Months(int months) {\n        super(months);\n    }\n",
        "begin_line": 210,
        "end_line": 212,
        "comment": "\n     * Creates a new instance representing a number of months.\n     * You should consider using the factory method {@link #months(int)}\n     * instead of the constructor.\n     *\n     * @param months  the number of months to represent\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 1
    },
    {
        "name": "Days.days#79",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Days.java",
        "class_name": "org.joda.time.Days",
        "signature": "org.joda.time.Days.days(int)",
        "snippet": "    public static Days days(int days) {\n        switch (days) {\n            case 0:\n                return ZERO;\n            case 1:\n                return ONE;\n            case 2:\n                return TWO;\n            case 3:\n                return THREE;\n            case 4:\n                return FOUR;\n            case 5:\n                return FIVE;\n            case 6:\n                return SIX;\n            case 7:\n                return SEVEN;\n            case Integer.MAX_VALUE:\n                return MAX_VALUE;\n            case Integer.MIN_VALUE:\n                return MIN_VALUE;\n            default:\n                return new Days(days);\n        }\n    }\n",
        "begin_line": 79,
        "end_line": 104,
        "comment": "\n     * Obtains an instance of <code>Days</code> that may be cached.\n     * <code>Days</code> is immutable, so instances can be cached and shared.\n     * This factory method provides access to shared instances.\n     *\n     * @param days  the number of days to obtain an instance for\n     * @return the instance of Days\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1414
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTimeUtils.getChronology#281",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeUtils.java",
        "class_name": "org.joda.time.DateTimeUtils",
        "signature": "org.joda.time.DateTimeUtils.getChronology(org.joda.time.Chronology)",
        "snippet": "    public static final Chronology getChronology(Chronology chrono) {\n        if (chrono == null) {\n            return ISOChronology.getInstance();\n        }\n        return chrono;\n    }\n",
        "begin_line": 281,
        "end_line": 286,
        "comment": "\n     * Gets the chronology handling null.\n     * <p>\n     * If the chronology is <code>null</code>, {@link ISOChronology#getInstance()}\n     * will be returned. Otherwise, the chronology is returned.\n     * \n     * @param chrono  the chronology to use, null means ISO in the default zone\n     * @return the chronology, never null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1325
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISOChronology.getInstance#85",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ISOChronology.java",
        "class_name": "org.joda.time.chrono.ISOChronology",
        "signature": "org.joda.time.chrono.ISOChronology.getInstance()",
        "snippet": "    public static ISOChronology getInstance() {\n        return getInstance(DateTimeZone.getDefault());\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Gets an instance of the ISOChronology in the default time zone.\n     * \n     * @return a chronology in the default time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1183
        },
        "num_failing_tests": 2
    },
    {
        "name": "Days.Days#215",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/Days.java",
        "class_name": "org.joda.time.Days",
        "signature": "org.joda.time.Days.Days(int)",
        "snippet": "    private Days(int days) {\n        super(days);\n    }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n     * Creates a new instance representing a number of days.\n     * You should consider using the factory method {@link #days(int)}\n     * instead of the constructor.\n     *\n     * @param days  the number of days to represent\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1132
        },
        "num_failing_tests": 1
    },
    {
        "name": "CachedDateTimeZone.hashCode#122",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/CachedDateTimeZone.java",
        "class_name": "org.joda.time.tz.CachedDateTimeZone",
        "signature": "org.joda.time.tz.CachedDateTimeZone.hashCode()",
        "snippet": "    public int hashCode() {\n        return iZone.hashCode();\n    }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZone.hashCode#1247",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.hashCode()",
        "snippet": "    public int hashCode() {\n        return 57 + getID().hashCode();\n    }\n",
        "begin_line": 1247,
        "end_line": 1249,
        "comment": "\n     * Gets a hash code compatable with equals.\n     * \n     * @return suitable hashcode\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodType.days#407",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/PeriodType.java",
        "class_name": "org.joda.time.PeriodType",
        "signature": "org.joda.time.PeriodType.days()",
        "snippet": "    public static PeriodType days() {\n        PeriodType type = cDays;\n        if (type == null) {\n            type = new PeriodType(\n                \"Days\",\n                new DurationFieldType[] { DurationFieldType.days() },\n                new int[] { -1, -1, -1, 0, -1, -1, -1, -1, }\n            );\n            cDays = type;\n        }\n        return type;\n    }\n",
        "begin_line": 407,
        "end_line": 418,
        "comment": "\n     * Gets a type that defines just the days field.\n     *\n     * @return the period type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnsupportedDurationField.getUnitMillis#217",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "class_name": "org.joda.time.field.UnsupportedDurationField",
        "signature": "org.joda.time.field.UnsupportedDurationField.getUnitMillis()",
        "snippet": "    public long getUnitMillis() {\n        return 0;\n    }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\n     * Always returns zero.\n     *\n     * @return zero always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScaledDurationField.getUnitMillis#108",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ScaledDurationField.java",
        "class_name": "org.joda.time.field.ScaledDurationField",
        "signature": "org.joda.time.field.ScaledDurationField.getUnitMillis()",
        "snippet": "    public long getUnitMillis() {\n        return getWrappedField().getUnitMillis() * iScalar;\n    }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ImpreciseDateTimeField.getUnitMillis#159",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
        "class_name": "org.joda.time.field.ImpreciseDateTimeField",
        "signature": "org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.getUnitMillis()",
        "snippet": "        public long getUnitMillis() {\n            return iUnitMillis;\n        }\n",
        "begin_line": 159,
        "end_line": 161,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZonedChronology.ZonedDurationField#280",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "class_name": "org.joda.time.chrono.ZonedChronology",
        "signature": "org.joda.time.chrono.ZonedChronology.ZonedDurationField.ZonedDurationField(org.joda.time.DurationField, org.joda.time.DateTimeZone)",
        "snippet": "        ZonedDurationField(DurationField field, DateTimeZone zone) {\n            super(field.getType());\n            if (!field.isSupported()) {\n                throw new IllegalArgumentException();\n            }\n            iField = field;\n            iTimeField = useTimeArithmetic(field);\n            iZone = zone;\n        }\n",
        "begin_line": 280,
        "end_line": 288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZonedChronology.getUnitMillis#294",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "class_name": "org.joda.time.chrono.ZonedChronology",
        "signature": "org.joda.time.chrono.ZonedChronology.ZonedDurationField.getUnitMillis()",
        "snippet": "        public long getUnitMillis() {\n            return iField.getUnitMillis();\n        }\n",
        "begin_line": 294,
        "end_line": 296,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZonedChronology.ZonedDateTimeField#381",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "class_name": "org.joda.time.chrono.ZonedChronology",
        "signature": "org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.ZonedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeZone, org.joda.time.DurationField, org.joda.time.DurationField, org.joda.time.DurationField)",
        "snippet": "        ZonedDateTimeField(DateTimeField field,\n                           DateTimeZone zone,\n                           DurationField durationField,\n                           DurationField rangeDurationField,\n                           DurationField leapDurationField) {\n            super(field.getType());\n            if (!field.isSupported()) {\n                throw new IllegalArgumentException();\n            }\n            iField = field;\n            iZone = zone;\n            iDurationField = durationField;\n            iTimeField = useTimeArithmetic(durationField);\n            iRangeDurationField = rangeDurationField;\n            iLeapDurationField = leapDurationField;\n        }\n",
        "begin_line": 381,
        "end_line": 396,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZonedChronology.getInstance#54",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "class_name": "org.joda.time.chrono.ZonedChronology",
        "signature": "org.joda.time.chrono.ZonedChronology.getInstance(org.joda.time.Chronology, org.joda.time.DateTimeZone)",
        "snippet": "    public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\n        if (base == null) {\n            throw new IllegalArgumentException(\"Must supply a chronology\");\n        }\n        base = base.withUTC();\n        if (base == null) {\n            throw new IllegalArgumentException(\"UTC chronology must not be null\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"DateTimeZone must not be null\");\n        }\n        return new ZonedChronology(base, zone);\n    }\n",
        "begin_line": 54,
        "end_line": 66,
        "comment": "\n     * Create a ZonedChronology for any chronology, overriding any time zone it\n     * may already have.\n     *\n     * @param base base chronology to wrap\n     * @param zone the time zone\n     * @throws IllegalArgumentException if chronology or time zone is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZonedChronology.useTimeArithmetic#68",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "class_name": "org.joda.time.chrono.ZonedChronology",
        "signature": "org.joda.time.chrono.ZonedChronology.useTimeArithmetic(org.joda.time.DurationField)",
        "snippet": "    static boolean useTimeArithmetic(DurationField field) {\n        // Use time of day arithmetic rules for unit durations less than\n        // typical time zone offsets.\n        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n    }\n",
        "begin_line": 68,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZonedChronology.ZonedChronology#80",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "class_name": "org.joda.time.chrono.ZonedChronology",
        "signature": "org.joda.time.chrono.ZonedChronology.ZonedChronology(org.joda.time.Chronology, org.joda.time.DateTimeZone)",
        "snippet": "    private ZonedChronology(Chronology base, DateTimeZone zone) {\n        super(base, zone);\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Restricted constructor\n     *\n     * @param base base chronology to wrap\n     * @param zone the time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZonedChronology.getZone#84",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "class_name": "org.joda.time.chrono.ZonedChronology",
        "signature": "org.joda.time.chrono.ZonedChronology.getZone()",
        "snippet": "    public DateTimeZone getZone() {\n        return (DateTimeZone)getParam();\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZonedChronology.assemble#147",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "class_name": "org.joda.time.chrono.ZonedChronology",
        "signature": "org.joda.time.chrono.ZonedChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)",
        "snippet": "    protected void assemble(Fields fields) {\n        // Keep a local cache of converted fields so as not to create redundant\n        // objects.\n        HashMap<Object, Object> converted = new HashMap<Object, Object>();\n\n        // Convert duration fields...\n\n        fields.eras = convertField(fields.eras, converted);\n        fields.centuries = convertField(fields.centuries, converted);\n        fields.years = convertField(fields.years, converted);\n        fields.months = convertField(fields.months, converted);\n        fields.weekyears = convertField(fields.weekyears, converted);\n        fields.weeks = convertField(fields.weeks, converted);\n        fields.days = convertField(fields.days, converted);\n\n        fields.halfdays = convertField(fields.halfdays, converted);\n        fields.hours = convertField(fields.hours, converted);\n        fields.minutes = convertField(fields.minutes, converted);\n        fields.seconds = convertField(fields.seconds, converted);\n        fields.millis = convertField(fields.millis, converted);\n\n        // Convert datetime fields...\n\n        fields.year = convertField(fields.year, converted);\n        fields.yearOfEra = convertField(fields.yearOfEra, converted);\n        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);\n        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);\n        fields.era = convertField(fields.era, converted);\n        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);\n        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);\n        fields.dayOfYear = convertField(fields.dayOfYear, converted);\n        fields.monthOfYear = convertField(fields.monthOfYear, converted);\n        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\n        fields.weekyear = convertField(fields.weekyear, converted);\n        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\n\n        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);\n        fields.millisOfDay = convertField(fields.millisOfDay, converted);\n        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);\n        fields.secondOfDay = convertField(fields.secondOfDay, converted);\n        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);\n        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);\n        fields.hourOfDay = convertField(fields.hourOfDay, converted);\n        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\n        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\n        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\n        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n    }\n",
        "begin_line": 147,
        "end_line": 194,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZonedChronology.convertField#196",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "class_name": "org.joda.time.chrono.ZonedChronology",
        "signature": "org.joda.time.chrono.ZonedChronology.convertField(org.joda.time.DurationField, java.util.HashMap<java.lang.Object, java.lang.Object>)",
        "snippet": "    private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\n        if (field == null || !field.isSupported()) {\n            return field;\n        }\n        if (converted.containsKey(field)) {\n            return (DurationField)converted.get(field);\n        }\n        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());\n        converted.put(field, zonedField);\n        return zonedField;\n    }\n",
        "begin_line": 196,
        "end_line": 206,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZonedChronology.convertField#208",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "class_name": "org.joda.time.chrono.ZonedChronology",
        "signature": "org.joda.time.chrono.ZonedChronology.convertField(org.joda.time.DateTimeField, java.util.HashMap<java.lang.Object, java.lang.Object>)",
        "snippet": "    private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\n        if (field == null || !field.isSupported()) {\n            return field;\n        }\n        if (converted.containsKey(field)) {\n            return (DateTimeField)converted.get(field);\n        }\n        ZonedDateTimeField zonedField =\n            new ZonedDateTimeField(field, getZone(),\n                                   convertField(field.getDurationField(), converted),\n                                   convertField(field.getRangeDurationField(), converted),\n                                   convertField(field.getLeapDurationField(), converted));\n        converted.put(field, zonedField);\n        return zonedField;\n    }\n",
        "begin_line": 208,
        "end_line": 222,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "GJEraDateTimeField.getDurationField#126",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJEraDateTimeField",
        "signature": "org.joda.time.chrono.GJEraDateTimeField.getDurationField()",
        "snippet": "    public DurationField getDurationField() {\n        return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n    }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "GJEraDateTimeField.getRangeDurationField#130",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJEraDateTimeField",
        "signature": "org.joda.time.chrono.GJEraDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return null;\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZeroIsMaxDateTimeField.getLeapDurationField#100",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java",
        "class_name": "org.joda.time.field.ZeroIsMaxDateTimeField",
        "signature": "org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField()",
        "snippet": "    public DurationField getLeapDurationField() {\n        return getWrappedField().getLeapDurationField();\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScaledDurationField.hashCode#146",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ScaledDurationField.java",
        "class_name": "org.joda.time.field.ScaledDurationField",
        "signature": "org.joda.time.field.ScaledDurationField.hashCode()",
        "snippet": "    public int hashCode() {\n        long scalar = iScalar;\n        int hash = (int) (scalar ^ (scalar >>> 32));\n        hash += getType().hashCode();\n        hash += getWrappedField().hashCode();\n        return hash;\n    }\n",
        "begin_line": 146,
        "end_line": 152,
        "comment": "\n     * Gets a hash code for this instance.\n     * \n     * @return a suitable hashcode\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemainderDateTimeField.getRangeDurationField#138",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iRangeField;\n    }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\n     * Returns a scaled version of the wrapped field's unit duration field.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationField.hashCode#141",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationField.java",
        "class_name": "org.joda.time.field.PreciseDurationField",
        "signature": "org.joda.time.field.PreciseDurationField.hashCode()",
        "snippet": "    public int hashCode() {\n        long millis = iUnitMillis;\n        int hash = (int) (millis ^ (millis >>> 32));\n        hash += getType().hashCode();\n        return hash;\n    }\n",
        "begin_line": 141,
        "end_line": 146,
        "comment": "\n     * Gets a hash code for this instance.\n     * \n     * @return a suitable hashcode\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationDateTimeField.getDurationField#140",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.getDurationField()",
        "snippet": "    public DurationField getDurationField() {\n        return iUnitField;\n    }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\n     * Returns the duration per unit value of this field. For example, if this\n     * field represents \"minute of hour\", then the duration field is minutes.\n     *\n     * @return the duration of this field, or UnsupportedDurationField if field\n     * has no duration\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDateTimeField.getRangeDurationField#121",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDateTimeField",
        "signature": "org.joda.time.field.PreciseDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iRangeField;\n    }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "\n     * Returns the range duration of this field. For example, if this field\n     * represents \"minute of hour\", then the range duration field is an hours.\n     *\n     * @return the range duration of this field, or null if field has no range\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "MillisDurationField.getType#48",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/MillisDurationField.java",
        "class_name": "org.joda.time.field.MillisDurationField",
        "signature": "org.joda.time.field.MillisDurationField.getType()",
        "snippet": "    public DurationFieldType getType() {\n        return DurationFieldType.millis();\n    }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "------------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "MillisDurationField.hashCode#154",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/MillisDurationField.java",
        "class_name": "org.joda.time.field.MillisDurationField",
        "signature": "org.joda.time.field.MillisDurationField.hashCode()",
        "snippet": "    public int hashCode() {\n        return (int) getUnitMillis();\n    }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "DecoratedDurationField.getWrappedField#68",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDurationField.java",
        "class_name": "org.joda.time.field.DecoratedDurationField",
        "signature": "org.joda.time.field.DecoratedDurationField.getWrappedField()",
        "snippet": "    public final DurationField getWrappedField() {\n        return iField;\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Gets the wrapped duration field.\n     * \n     * @return the wrapped DurationField\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "DecoratedDateTimeField.getRangeDurationField#89",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDateTimeField.java",
        "class_name": "org.joda.time.field.DecoratedDateTimeField",
        "signature": "org.joda.time.field.DecoratedDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iField.getRangeDurationField();\n    }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDurationField.getType#54",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDurationField.java",
        "class_name": "org.joda.time.field.BaseDurationField",
        "signature": "org.joda.time.field.BaseDurationField.getType()",
        "snippet": "    public final DurationFieldType getType() {\n        return iType;\n    }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDateTimeField.getLeapDurationField#725",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.getLeapDurationField()",
        "snippet": "    public DurationField getLeapDurationField() {\n        return null;\n    }\n",
        "begin_line": 725,
        "end_line": 727,
        "comment": "\n     * If this field were to leap, then it would be in units described by the\n     * returned duration. If this field doesn't ever leap, null is returned.\n     * <p>\n     * This implementation returns null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "GJDayOfWeekDateTimeField.getRangeDurationField#93",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJDayOfWeekDateTimeField",
        "signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iChronology.weeks();\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicYearDateTimeField.getRangeDurationField#94",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return null;\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicYearDateTimeField.getLeapDurationField#110",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField()",
        "snippet": "    public DurationField getLeapDurationField() {\n        return iChronology.days();\n    }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicWeekyearDateTimeField.getRangeDurationField#207",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekyearDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return null;\n    }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicWeekyearDateTimeField.getLeapDurationField#219",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField()",
        "snippet": "    public DurationField getLeapDurationField() {\n        return iChronology.weeks();\n    }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicWeekOfWeekyearDateTimeField.getRangeDurationField#57",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iChronology.weekyears();\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicMonthOfYearDateTimeField.getRangeDurationField#314",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iChronology.years();\n    }\n",
        "begin_line": 314,
        "end_line": 316,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicMonthOfYearDateTimeField.getLeapDurationField#333",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField()",
        "snippet": "    public DurationField getLeapDurationField() {\n        return iChronology.days();\n    }\n",
        "begin_line": 333,
        "end_line": 335,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicDayOfYearDateTimeField.getRangeDurationField#55",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iChronology.years();\n    }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicDayOfMonthDateTimeField.getRangeDurationField#50",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField()",
        "snippet": "    public DurationField getRangeDurationField() {\n        return iChronology.months();\n    }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.getParam#314",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.getParam()",
        "snippet": "    protected final Object getParam() {\n        return iParam;\n    }\n",
        "begin_line": 314,
        "end_line": 316,
        "comment": "\n     * Returns the same param object as passed into the constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISOChronology.withUTC#132",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ISOChronology.java",
        "class_name": "org.joda.time.chrono.ISOChronology",
        "signature": "org.joda.time.chrono.ISOChronology.withUTC()",
        "snippet": "    public Chronology withUTC() {\n        return INSTANCE_UTC;\n    }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\n     * Gets the Chronology in the UTC time zone.\n     * \n     * @return the chronology in UTC\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1088
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISOYearOfEraDateTimeField.ISOYearOfEraDateTimeField#45",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.ISOYearOfEraDateTimeField",
        "signature": "org.joda.time.chrono.ISOYearOfEraDateTimeField.ISOYearOfEraDateTimeField()",
        "snippet": "    private ISOYearOfEraDateTimeField() {\n        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());\n    }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISOYearOfEraDateTimeField.getMinimumValue#86",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.ISOYearOfEraDateTimeField",
        "signature": "org.joda.time.chrono.ISOYearOfEraDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return 0;\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISOYearOfEraDateTimeField.getMaximumValue#90",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.ISOYearOfEraDateTimeField",
        "signature": "org.joda.time.chrono.ISOYearOfEraDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return getWrappedField().getMaximumValue();\n    }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISOChronology.ISOChronology#121",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ISOChronology.java",
        "class_name": "org.joda.time.chrono.ISOChronology",
        "signature": "org.joda.time.chrono.ISOChronology.ISOChronology(org.joda.time.Chronology)",
        "snippet": "    private ISOChronology(Chronology base) {\n        super(base, null);\n    }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISOChronology.assemble#168",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/ISOChronology.java",
        "class_name": "org.joda.time.chrono.ISOChronology",
        "signature": "org.joda.time.chrono.ISOChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)",
        "snippet": "    protected void assemble(Fields fields) {\n        if (getBase().getZone() == DateTimeZone.UTC) {\n            // Use zero based century and year of century.\n            fields.centuryOfEra = new DividedDateTimeField(\n                ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra(), 100);\n            fields.yearOfCentury = new RemainderDateTimeField(\n                (DividedDateTimeField) fields.centuryOfEra, DateTimeFieldType.yearOfCentury());\n            fields.weekyearOfCentury = new RemainderDateTimeField(\n                (DividedDateTimeField) fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury());\n\n            fields.centuries = fields.centuryOfEra.getDurationField();\n        }\n    }\n",
        "begin_line": 168,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.getInstanceUTC#80",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getInstanceUTC()",
        "snippet": "    public static GregorianChronology getInstanceUTC() {\n        return INSTANCE_UTC;\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Gets an instance of the GregorianChronology.\n     * The time zone of the returned instance is UTC.\n     * \n     * @return a singleton UTC instance of the chronology\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.getInstance#99",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getInstance(org.joda.time.DateTimeZone)",
        "snippet": "    public static GregorianChronology getInstance(DateTimeZone zone) {\n        return getInstance(zone, 4);\n    }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Gets an instance of the GregorianChronology in the given time zone.\n     * \n     * @param zone  the time zone to get the chronology in, null is default\n     * @return a chronology in the specified time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.getInstance#110",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getInstance(org.joda.time.DateTimeZone, int)",
        "snippet": "    public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n        if (zone == null) {\n            zone = DateTimeZone.getDefault();\n        }\n        GregorianChronology chrono;\n        synchronized (cCache) {\n            GregorianChronology[] chronos = cCache.get(zone);\n            if (chronos == null) {\n                chronos = new GregorianChronology[7];\n                cCache.put(zone, chronos);\n            }\n            try {\n                chrono = chronos[minDaysInFirstWeek - 1];\n            } catch (ArrayIndexOutOfBoundsException e) {\n                throw new IllegalArgumentException\n                    (\"Invalid min days in first week: \" + minDaysInFirstWeek);\n            }\n            if (chrono == null) {\n                if (zone == DateTimeZone.UTC) {\n                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);\n                } else {\n                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                    chrono = new GregorianChronology\n                        (ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n                }\n                chronos[minDaysInFirstWeek - 1] = chrono;\n            }\n        }\n        return chrono;\n    }\n",
        "begin_line": 110,
        "end_line": 139,
        "comment": "\n     * Gets an instance of the GregorianChronology in the given time zone.\n     * \n     * @param zone  the time zone to get the chronology in, null is default\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     * @return a chronology in the specified time zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.GregorianChronology#147",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.GregorianChronology(org.joda.time.Chronology, java.lang.Object, int)",
        "snippet": "    private GregorianChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n        super(base, param, minDaysInFirstWeek);\n    }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.assemble#190",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)",
        "snippet": "    protected void assemble(Fields fields) {\n        if (getBase() == null) {\n            super.assemble(fields);\n        }\n    }\n",
        "begin_line": 190,
        "end_line": 194,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.getMaxYear#224",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getMaxYear()",
        "snippet": "    int getMaxYear() {\n        return MAX_YEAR;\n    }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.getAverageMillisPerYear#228",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getAverageMillisPerYear()",
        "snippet": "    long getAverageMillisPerYear() {\n        return MILLIS_PER_YEAR;\n    }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "GregorianChronology.getAverageMillisPerMonth#236",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GregorianChronology.java",
        "class_name": "org.joda.time.chrono.GregorianChronology",
        "signature": "org.joda.time.chrono.GregorianChronology.getAverageMillisPerMonth()",
        "snippet": "    long getAverageMillisPerMonth() {\n        return MILLIS_PER_MONTH;\n    }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getZone#141",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getZone()",
        "snippet": "    public DateTimeZone getZone() {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getZone();\n        }\n        return DateTimeZone.UTC;\n    }\n",
        "begin_line": 141,
        "end_line": 147,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicGJChronology.BasicGJChronology#74",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "class_name": "org.joda.time.chrono.BasicGJChronology",
        "signature": "org.joda.time.chrono.BasicGJChronology.BasicGJChronology(org.joda.time.Chronology, java.lang.Object, int)",
        "snippet": "    BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n        super(base, param, minDaysInFirstWeek);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.getMaxMonth#690",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.getMaxMonth()",
        "snippet": "    int getMaxMonth() {\n        return 12;\n    }\n",
        "begin_line": 690,
        "end_line": 692,
        "comment": "\n     * Gets the maximum number of months.\n     * \n     * @return 12\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "FixedDateTimeZone.hashCode#101",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/FixedDateTimeZone.java",
        "class_name": "org.joda.time.tz.FixedDateTimeZone",
        "signature": "org.joda.time.tz.FixedDateTimeZone.hashCode()",
        "snippet": "    public int hashCode() {\n        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZeroIsMaxDateTimeField.ZeroIsMaxDateTimeField#44",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java",
        "class_name": "org.joda.time.field.ZeroIsMaxDateTimeField",
        "signature": "org.joda.time.field.ZeroIsMaxDateTimeField.ZeroIsMaxDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType)",
        "snippet": "    public ZeroIsMaxDateTimeField(DateTimeField field, DateTimeFieldType type) {\n        super(field, type);\n        if (field.getMinimumValue() != 0) {\n            throw new IllegalArgumentException(\"Wrapped field's minumum value must be zero\");\n        }\n    }\n",
        "begin_line": 44,
        "end_line": 49,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the base field\n     * @param type  the field type this field will actually use\n     * @throws IllegalArgumentException if wrapped field's minimum value is not zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnsupportedDurationField.isSupported#91",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "class_name": "org.joda.time.field.UnsupportedDurationField",
        "signature": "org.joda.time.field.UnsupportedDurationField.isSupported()",
        "snippet": "    public boolean isSupported() {\n        return false;\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * This field is not supported.\n     *\n     * @return false always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScaledDurationField.ScaledDurationField#46",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ScaledDurationField.java",
        "class_name": "org.joda.time.field.ScaledDurationField",
        "signature": "org.joda.time.field.ScaledDurationField.ScaledDurationField(org.joda.time.DurationField, org.joda.time.DurationFieldType, int)",
        "snippet": "    public ScaledDurationField(DurationField field, DurationFieldType type, int scalar) {\n        super(field, type);\n        if (scalar == 0 || scalar == 1) {\n            throw new IllegalArgumentException(\"The scalar must not be 0 or 1\");\n        }\n        iScalar = scalar;\n    }\n",
        "begin_line": 46,
        "end_line": 52,
        "comment": "\n     * Constructor\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param type  the type this field will actually use\n     * @param scalar  scalar, such as 100 years in a century\n     * @throws IllegalArgumentException if scalar is zero or one.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemainderDateTimeField.RemainderDateTimeField#50",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)",
        "snippet": "    public RemainderDateTimeField(DateTimeField field,\n                                  DateTimeFieldType type, int divisor) {\n        super(field, type);\n\n        if (divisor < 2) {\n            throw new IllegalArgumentException(\"The divisor must be at least 2\");\n        }\n\n        DurationField rangeField = field.getDurationField();\n        if (rangeField == null) {\n            iRangeField = null;\n        } else {\n            iRangeField = new ScaledDurationField(\n                rangeField, type.getRangeDurationType(), divisor);\n        }\n\n        iDivisor = divisor;\n    }\n",
        "begin_line": 50,
        "end_line": 67,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param type  the field type this field actually uses\n     * @param divisor  divisor, such as 100 years in a century\n     * @throws IllegalArgumentException if divisor is less than two\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemainderDateTimeField.RemainderDateTimeField#75",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.field.DividedDateTimeField)",
        "snippet": "    public RemainderDateTimeField(DividedDateTimeField dividedField) {\n        this(dividedField, dividedField.getType());\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Construct a RemainderDateTimeField that compliments the given\n     * DividedDateTimeField.\n     *\n     * @param dividedField  complimentary divided field, like \"century()\".\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemainderDateTimeField.RemainderDateTimeField#86",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.field.DividedDateTimeField, org.joda.time.DateTimeFieldType)",
        "snippet": "    public RemainderDateTimeField(DividedDateTimeField dividedField, DateTimeFieldType type) {\n        super(dividedField.getWrappedField(), type);\n        iDivisor = dividedField.iDivisor;\n        iRangeField = dividedField.iDurationField;\n    }\n",
        "begin_line": 86,
        "end_line": 90,
        "comment": "\n     * Construct a RemainderDateTimeField that compliments the given\n     * DividedDateTimeField.\n     *\n     * @param dividedField  complimentary divided field, like \"century()\".\n     * @param type  the field type this field actually uses\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemainderDateTimeField.getMinimumValue#147",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return 0;\n    }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\n     * Get the minimum value for the field, which is always zero.\n     * \n     * @return the minimum value of zero.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemainderDateTimeField.getMaximumValue#157",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/RemainderDateTimeField.java",
        "class_name": "org.joda.time.field.RemainderDateTimeField",
        "signature": "org.joda.time.field.RemainderDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return iDivisor - 1;\n    }\n",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Get the maximum value for the field, which is always one less than the\n     * divisor.\n     * \n     * @return the maximum value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationField.PreciseDurationField#42",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationField.java",
        "class_name": "org.joda.time.field.PreciseDurationField",
        "signature": "org.joda.time.field.PreciseDurationField.PreciseDurationField(org.joda.time.DurationFieldType, long)",
        "snippet": "    public PreciseDurationField(DurationFieldType type, long unitMillis) {\n        super(type);\n        iUnitMillis = unitMillis;\n    }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n     * Constructor.\n     * \n     * @param type  the field type\n     * @param unitMillis  the unit milliseconds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationField.isPrecise#53",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationField.java",
        "class_name": "org.joda.time.field.PreciseDurationField",
        "signature": "org.joda.time.field.PreciseDurationField.isPrecise()",
        "snippet": "    public final boolean isPrecise() {\n        return true;\n    }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * This field is precise.\n     * \n     * @return true always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationField.getUnitMillis#62",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationField.java",
        "class_name": "org.joda.time.field.PreciseDurationField",
        "signature": "org.joda.time.field.PreciseDurationField.getUnitMillis()",
        "snippet": "    public final long getUnitMillis() {\n        return iUnitMillis;\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\n     * Returns the amount of milliseconds per unit value of this field.\n     *\n     * @return the unit size of this field, in milliseconds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationDateTimeField.PreciseDurationDateTimeField#47",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.PreciseDurationDateTimeField(org.joda.time.DateTimeFieldType, org.joda.time.DurationField)",
        "snippet": "    public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\n        super(type);\n\n        if (!unit.isPrecise()) {\n            throw new IllegalArgumentException(\"Unit duration field must be precise\");\n        }\n\n        iUnitMillis = unit.getUnitMillis();\n        if (iUnitMillis < 1) {\n            throw new IllegalArgumentException(\"The unit milliseconds must be at least 1\");\n        }\n\n        iUnitField = unit;\n    }\n",
        "begin_line": 47,
        "end_line": 60,
        "comment": "\n     * Constructor.\n     * \n     * @param type  the field type\n     * @param unit  precise unit duration, like \"days()\".\n     * @throws IllegalArgumentException if duration field is imprecise\n     * @throws IllegalArgumentException if unit milliseconds is less than one\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationDateTimeField.getMinimumValue#149",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return 0;\n    }\n",
        "begin_line": 149,
        "end_line": 151,
        "comment": "\n     * Get the minimum value for the field.\n     * \n     * @return the minimum value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationDateTimeField.getUnitMillis#153",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDurationDateTimeField",
        "signature": "org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis()",
        "snippet": "    public final long getUnitMillis() {\n        return iUnitMillis;\n    }\n",
        "begin_line": 153,
        "end_line": 155,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDateTimeField.PreciseDateTimeField#55",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDateTimeField.java",
        "class_name": "org.joda.time.field.PreciseDateTimeField",
        "signature": "org.joda.time.field.PreciseDateTimeField.PreciseDateTimeField(org.joda.time.DateTimeFieldType, org.joda.time.DurationField, org.joda.time.DurationField)",
        "snippet": "    public PreciseDateTimeField(DateTimeFieldType type,\n                                DurationField unit, DurationField range) {\n        super(type, unit);\n\n        if (!range.isPrecise()) {\n            throw new IllegalArgumentException(\"Range duration field must be precise\");\n        }\n\n        long rangeMillis = range.getUnitMillis();\n        iRange = (int)(rangeMillis / getUnitMillis());\n        if (iRange < 2) {\n            throw new IllegalArgumentException(\"The effective range must be at least 2\");\n        }\n\n        iRangeField = range;\n    }\n",
        "begin_line": 55,
        "end_line": 70,
        "comment": "\n     * Constructor.\n     * \n     * @param type  the field type this field uses\n     * @param unit  precise unit duration, like \"seconds()\".\n     * @param range precise range duration, preferably a multiple of the unit,\n     * like \"minutes()\".\n     * @throws IllegalArgumentException if either duration field is imprecise\n     * @throws IllegalArgumentException if unit milliseconds is less than one\n     * or effective value range is less than two.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "OffsetDateTimeField.OffsetDateTimeField#45",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/OffsetDateTimeField.java",
        "class_name": "org.joda.time.field.OffsetDateTimeField",
        "signature": "org.joda.time.field.OffsetDateTimeField.OffsetDateTimeField(org.joda.time.DateTimeField, int)",
        "snippet": "    public OffsetDateTimeField(DateTimeField field, int offset) {\n        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param offset  offset to add to field values\n     * @throws IllegalArgumentException if offset is zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "OffsetDateTimeField.OffsetDateTimeField#57",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/OffsetDateTimeField.java",
        "class_name": "org.joda.time.field.OffsetDateTimeField",
        "signature": "org.joda.time.field.OffsetDateTimeField.OffsetDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)",
        "snippet": "    public OffsetDateTimeField(DateTimeField field, DateTimeFieldType type, int offset) {\n        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param type  the field type this field actually uses\n     * @param offset  offset to add to field values\n     * @throws IllegalArgumentException if offset is zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "OffsetDateTimeField.OffsetDateTimeField#71",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/OffsetDateTimeField.java",
        "class_name": "org.joda.time.field.OffsetDateTimeField",
        "signature": "org.joda.time.field.OffsetDateTimeField.OffsetDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int, int, int)",
        "snippet": "    public OffsetDateTimeField(DateTimeField field, DateTimeFieldType type, int offset,\n                               int minValue, int maxValue) {\n        super(field, type);\n                \n        if (offset == 0) {\n            throw new IllegalArgumentException(\"The offset cannot be zero\");\n        }\n\n        iOffset = offset;\n\n        if (minValue < (field.getMinimumValue() + offset)) {\n            iMin = field.getMinimumValue() + offset;\n        } else {\n            iMin = minValue;\n        }\n        if (maxValue > (field.getMaximumValue() + offset)) {\n            iMax = field.getMaximumValue() + offset;\n        } else {\n            iMax = maxValue;\n        }\n    }\n",
        "begin_line": 71,
        "end_line": 91,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param type  the field type this field actually uses\n     * @param offset  offset to add to field values\n     * @param minValue  minimum allowed value\n     * @param maxValue  maximum allowed value\n     * @throws IllegalArgumentException if offset is zero\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "OffsetDateTimeField.getMinimumValue#173",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/OffsetDateTimeField.java",
        "class_name": "org.joda.time.field.OffsetDateTimeField",
        "signature": "org.joda.time.field.OffsetDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return iMin;\n    }\n",
        "begin_line": 173,
        "end_line": 175,
        "comment": "\n     * Get the minimum value for the field.\n     * \n     * @return the minimum value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "OffsetDateTimeField.getMaximumValue#182",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/OffsetDateTimeField.java",
        "class_name": "org.joda.time.field.OffsetDateTimeField",
        "signature": "org.joda.time.field.OffsetDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return iMax;\n    }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n     * Get the maximum value for the field.\n     * \n     * @return the maximum value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "MillisDurationField.MillisDurationField#43",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/MillisDurationField.java",
        "class_name": "org.joda.time.field.MillisDurationField",
        "signature": "org.joda.time.field.MillisDurationField.MillisDurationField()",
        "snippet": "    private MillisDurationField() {\n        super();\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "MillisDurationField.isSupported#61",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/MillisDurationField.java",
        "class_name": "org.joda.time.field.MillisDurationField",
        "signature": "org.joda.time.field.MillisDurationField.isSupported()",
        "snippet": "    public boolean isSupported() {\n        return true;\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n     * Returns true as this field is supported.\n     * \n     * @return true always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "MillisDurationField.isPrecise#70",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/MillisDurationField.java",
        "class_name": "org.joda.time.field.MillisDurationField",
        "signature": "org.joda.time.field.MillisDurationField.isPrecise()",
        "snippet": "    public final boolean isPrecise() {\n        return true;\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns true as this field is precise.\n     * \n     * @return true always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "MillisDurationField.getUnitMillis#79",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/MillisDurationField.java",
        "class_name": "org.joda.time.field.MillisDurationField",
        "signature": "org.joda.time.field.MillisDurationField.getUnitMillis()",
        "snippet": "    public final long getUnitMillis() {\n        return 1;\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the amount of milliseconds per unit value of this field.\n     *\n     * @return one always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "ImpreciseDateTimeField.LinkedDurationField#151",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
        "class_name": "org.joda.time.field.ImpreciseDateTimeField",
        "signature": "org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField.LinkedDurationField(org.joda.time.DurationFieldType)",
        "snippet": "        LinkedDurationField(DurationFieldType type) {\n            super(type);\n        }\n",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "ImpreciseDateTimeField.ImpreciseDateTimeField#54",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
        "class_name": "org.joda.time.field.ImpreciseDateTimeField",
        "signature": "org.joda.time.field.ImpreciseDateTimeField.ImpreciseDateTimeField(org.joda.time.DateTimeFieldType, long)",
        "snippet": "    public ImpreciseDateTimeField(DateTimeFieldType type, long unitMillis) {\n        super(type);\n        iUnitMillis = unitMillis;\n        iDurationField = new LinkedDurationField(type.getDurationType());\n    }\n",
        "begin_line": 54,
        "end_line": 58,
        "comment": "\n     * Constructor.\n     * \n     * @param type  the field type\n     * @param unitMillis  the average duration unit milliseconds\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "ImpreciseDateTimeField.getDurationField#136",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
        "class_name": "org.joda.time.field.ImpreciseDateTimeField",
        "signature": "org.joda.time.field.ImpreciseDateTimeField.getDurationField()",
        "snippet": "    public final DurationField getDurationField() {\n        return iDurationField;\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DividedDateTimeField.DividedDateTimeField#54",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DividedDateTimeField.java",
        "class_name": "org.joda.time.field.DividedDateTimeField",
        "signature": "org.joda.time.field.DividedDateTimeField.DividedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)",
        "snippet": "    public DividedDateTimeField(DateTimeField field,\n                                DateTimeFieldType type, int divisor) {\n        super(field, type);\n                \n        if (divisor < 2) {\n            throw new IllegalArgumentException(\"The divisor must be at least 2\");\n        }\n\n        DurationField unitField = field.getDurationField();\n        if (unitField == null) {\n            iDurationField = null;\n        } else {\n            iDurationField = new ScaledDurationField(\n                unitField, type.getDurationType(), divisor);\n        }\n\n        iDivisor = divisor;\n\n        int i = field.getMinimumValue();\n        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);\n\n        int j = field.getMaximumValue();\n        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);\n\n        iMin = min;\n        iMax = max;\n    }\n",
        "begin_line": 54,
        "end_line": 80,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field to wrap, like \"year()\".\n     * @param type  the field type this field will actually use\n     * @param divisor  divisor, such as 100 years in a century\n     * @throws IllegalArgumentException if divisor is less than two\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DividedDateTimeField.getDurationField#181",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DividedDateTimeField.java",
        "class_name": "org.joda.time.field.DividedDateTimeField",
        "signature": "org.joda.time.field.DividedDateTimeField.getDurationField()",
        "snippet": "    public DurationField getDurationField() {\n        return iDurationField;\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * Returns a scaled version of the wrapped field's unit duration field.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DecoratedDurationField.DecoratedDurationField#51",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDurationField.java",
        "class_name": "org.joda.time.field.DecoratedDurationField",
        "signature": "org.joda.time.field.DecoratedDurationField.DecoratedDurationField(org.joda.time.DurationField, org.joda.time.DurationFieldType)",
        "snippet": "    public DecoratedDurationField(DurationField field, DurationFieldType type) {\n        super(type);\n        if (field == null) {\n            throw new IllegalArgumentException(\"The field must not be null\");\n        }\n        if (!field.isSupported()) {\n            throw new IllegalArgumentException(\"The field must be supported\");\n        }\n        iField = field;\n    }\n",
        "begin_line": 51,
        "end_line": 60,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the base field\n     * @param type  the type to actually use\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DecoratedDateTimeField.DecoratedDateTimeField#53",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDateTimeField.java",
        "class_name": "org.joda.time.field.DecoratedDateTimeField",
        "signature": "org.joda.time.field.DecoratedDateTimeField.DecoratedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType)",
        "snippet": "    protected DecoratedDateTimeField(DateTimeField field, DateTimeFieldType type) {\n        super(type);\n        if (field == null) {\n            throw new IllegalArgumentException(\"The field must not be null\");\n        }\n        if (!field.isSupported()) {\n            throw new IllegalArgumentException(\"The field must be supported\");\n        }\n        iField = field;\n    }\n",
        "begin_line": 53,
        "end_line": 62,
        "comment": "\n     * Constructor.\n     * \n     * @param field  the field being decorated\n     * @param type  allow type to be overridden\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DecoratedDateTimeField.getWrappedField#69",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDateTimeField.java",
        "class_name": "org.joda.time.field.DecoratedDateTimeField",
        "signature": "org.joda.time.field.DecoratedDateTimeField.getWrappedField()",
        "snippet": "    public final DateTimeField getWrappedField() {\n        return iField;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Gets the wrapped date time field.\n     * \n     * @return the wrapped DateTimeField\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DecoratedDateTimeField.getDurationField#85",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/DecoratedDateTimeField.java",
        "class_name": "org.joda.time.field.DecoratedDateTimeField",
        "signature": "org.joda.time.field.DecoratedDateTimeField.getDurationField()",
        "snippet": "    public DurationField getDurationField() {\n        return iField.getDurationField();\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDurationField.BaseDurationField#46",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDurationField.java",
        "class_name": "org.joda.time.field.BaseDurationField",
        "signature": "org.joda.time.field.BaseDurationField.BaseDurationField(org.joda.time.DurationFieldType)",
        "snippet": "    protected BaseDurationField(DurationFieldType type) {\n        super();\n        if (type == null) {\n            throw new IllegalArgumentException(\"The type must not be null\");\n        }\n        iType = type;\n    }\n",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDurationField.isSupported#65",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDurationField.java",
        "class_name": "org.joda.time.field.BaseDurationField",
        "signature": "org.joda.time.field.BaseDurationField.isSupported()",
        "snippet": "    public final boolean isSupported() {\n        return true;\n    }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * @return true always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDateTimeField.BaseDateTimeField#49",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.BaseDateTimeField(org.joda.time.DateTimeFieldType)",
        "snippet": "    protected BaseDateTimeField(DateTimeFieldType type) {\n        super();\n        if (type == null) {\n            throw new IllegalArgumentException(\"The type must not be null\");\n        }\n        iType = type;\n    }\n",
        "begin_line": 49,
        "end_line": 55,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDateTimeField.getType#57",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.getType()",
        "snippet": "    public final DateTimeFieldType getType() {\n        return iType;\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseDateTimeField.isSupported#68",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDateTimeField.java",
        "class_name": "org.joda.time.field.BaseDateTimeField",
        "signature": "org.joda.time.field.BaseDateTimeField.isSupported()",
        "snippet": "    public final boolean isSupported() {\n        return true;\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * @return true always\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "GJYearOfEraDateTimeField.GJYearOfEraDateTimeField#39",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJYearOfEraDateTimeField",
        "signature": "org.joda.time.chrono.GJYearOfEraDateTimeField.GJYearOfEraDateTimeField(org.joda.time.DateTimeField, org.joda.time.chrono.BasicChronology)",
        "snippet": "    GJYearOfEraDateTimeField(DateTimeField yearField, BasicChronology chronology) {\n        super(yearField, DateTimeFieldType.yearOfEra());\n        iChronology = chronology;\n    }\n",
        "begin_line": 39,
        "end_line": 42,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "GJYearOfEraDateTimeField.getMinimumValue#92",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJYearOfEraDateTimeField",
        "signature": "org.joda.time.chrono.GJYearOfEraDateTimeField.getMinimumValue()",
        "snippet": "    public int getMinimumValue() {\n        return 1;\n    }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "GJYearOfEraDateTimeField.getMaximumValue#96",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJYearOfEraDateTimeField",
        "signature": "org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return getWrappedField().getMaximumValue();\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "GJMonthOfYearDateTimeField.GJMonthOfYearDateTimeField#36",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.GJMonthOfYearDateTimeField.GJMonthOfYearDateTimeField(org.joda.time.chrono.BasicChronology)",
        "snippet": "    GJMonthOfYearDateTimeField(BasicChronology chronology) {\n        super(chronology, 2);\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "GJEraDateTimeField.GJEraDateTimeField#45",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJEraDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJEraDateTimeField",
        "signature": "org.joda.time.chrono.GJEraDateTimeField.GJEraDateTimeField(org.joda.time.chrono.BasicChronology)",
        "snippet": "    GJEraDateTimeField(BasicChronology chronology) {\n        super(DateTimeFieldType.era());\n        iChronology = chronology;\n    }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "GJDayOfWeekDateTimeField.GJDayOfWeekDateTimeField#44",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java",
        "class_name": "org.joda.time.chrono.GJDayOfWeekDateTimeField",
        "signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField.GJDayOfWeekDateTimeField(org.joda.time.chrono.BasicChronology, org.joda.time.DurationField)",
        "snippet": "    GJDayOfWeekDateTimeField(BasicChronology chronology, DurationField days) {\n        super(DateTimeFieldType.dayOfWeek(), days);\n        iChronology = chronology;\n    }\n",
        "begin_line": 44,
        "end_line": 47,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicYearDateTimeField.BasicYearDateTimeField#44",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicYearDateTimeField.BasicYearDateTimeField(org.joda.time.chrono.BasicChronology)",
        "snippet": "    BasicYearDateTimeField(BasicChronology chronology) {\n        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());\n        iChronology = chronology;\n    }\n",
        "begin_line": 44,
        "end_line": 47,
        "comment": "\n     * Restricted constructor.\n     * \n     * @param chronology  the chronology this field belogs to\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicYearDateTimeField.getMaximumValue#118",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue()",
        "snippet": "    public int getMaximumValue() {\n        return iChronology.getMaxYear();\n    }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicWeekyearDateTimeField.BasicWeekyearDateTimeField#43",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekyearDateTimeField.BasicWeekyearDateTimeField(org.joda.time.chrono.BasicChronology)",
        "snippet": "    BasicWeekyearDateTimeField(BasicChronology chronology) {\n        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());\n        iChronology = chronology;\n    }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicWeekOfWeekyearDateTimeField.BasicWeekOfWeekyearDateTimeField#41",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField",
        "signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.BasicWeekOfWeekyearDateTimeField(org.joda.time.chrono.BasicChronology, org.joda.time.DurationField)",
        "snippet": "    BasicWeekOfWeekyearDateTimeField(BasicChronology chronology, DurationField weeks) {\n        super(DateTimeFieldType.weekOfWeekyear(), weeks);\n        iChronology = chronology;\n    }\n",
        "begin_line": 41,
        "end_line": 44,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicMonthOfYearDateTimeField.BasicMonthOfYearDateTimeField#50",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField.BasicMonthOfYearDateTimeField(org.joda.time.chrono.BasicChronology, int)",
        "snippet": "    BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) {\n        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());\n        iChronology = chronology;\n        iMax = iChronology.getMaxMonth();\n        iLeapMonth = leapMonth;\n    }\n",
        "begin_line": 50,
        "end_line": 55,
        "comment": "\n     * Restricted constructor.\n     * \n     * @param leapMonth the month of year that leaps\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicDayOfYearDateTimeField.BasicDayOfYearDateTimeField#40",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfYearDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField.BasicDayOfYearDateTimeField(org.joda.time.chrono.BasicChronology, org.joda.time.DurationField)",
        "snippet": "    BasicDayOfYearDateTimeField(BasicChronology chronology, DurationField days) {\n        super(DateTimeFieldType.dayOfYear(), days);\n        iChronology = chronology;\n    }\n",
        "begin_line": 40,
        "end_line": 43,
        "comment": "\n     * Restricted constructor\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicDayOfMonthDateTimeField.BasicDayOfMonthDateTimeField#40",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
        "class_name": "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
        "signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField.BasicDayOfMonthDateTimeField(org.joda.time.chrono.BasicChronology, org.joda.time.DurationField)",
        "snippet": "    BasicDayOfMonthDateTimeField(BasicChronology chronology, DurationField days) {\n        super(DateTimeFieldType.dayOfMonth(), days);\n        iChronology = chronology;\n    }\n",
        "begin_line": 40,
        "end_line": 43,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.HalfdayField#749",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.HalfdayField.HalfdayField()",
        "snippet": "        HalfdayField() {\n            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);\n        }\n",
        "begin_line": 749,
        "end_line": 751,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.BasicChronology#130",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.BasicChronology(org.joda.time.Chronology, java.lang.Object, int)",
        "snippet": "    BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n        super(base, param);\n\n        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {\n            throw new IllegalArgumentException\n                (\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n\n        iMinDaysInFirstWeek = minDaysInFirstWeek;\n    }\n",
        "begin_line": 130,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicChronology.assemble#237",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
        "class_name": "org.joda.time.chrono.BasicChronology",
        "signature": "org.joda.time.chrono.BasicChronology.assemble(org.joda.time.chrono.AssembledChronology.Fields)",
        "snippet": "    protected void assemble(Fields fields) {\n        // First copy fields that are the same for all Gregorian and Julian\n        // chronologies.\n\n        fields.millis = cMillisField;\n        fields.seconds = cSecondsField;\n        fields.minutes = cMinutesField;\n        fields.hours = cHoursField;\n        fields.halfdays = cHalfdaysField;\n        fields.days = cDaysField;\n        fields.weeks = cWeeksField;\n\n        fields.millisOfSecond = cMillisOfSecondField;\n        fields.millisOfDay = cMillisOfDayField;\n        fields.secondOfMinute = cSecondOfMinuteField;\n        fields.secondOfDay = cSecondOfDayField;\n        fields.minuteOfHour = cMinuteOfHourField;\n        fields.minuteOfDay = cMinuteOfDayField;\n        fields.hourOfDay = cHourOfDayField;\n        fields.hourOfHalfday = cHourOfHalfdayField;\n        fields.clockhourOfDay = cClockhourOfDayField;\n        fields.clockhourOfHalfday = cClockhourOfHalfdayField;\n        fields.halfdayOfDay = cHalfdayOfDayField;\n\n        // Now create fields that have unique behavior for Gregorian and Julian\n        // chronologies.\n\n        fields.year = new BasicYearDateTimeField(this);\n        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);\n\n        // Define one-based centuryOfEra and yearOfCentury.\n        DateTimeField field = new OffsetDateTimeField(\n            fields.yearOfEra, 99);\n        fields.centuryOfEra = new DividedDateTimeField(\n            field, DateTimeFieldType.centuryOfEra(), 100);\n        \n        field = new RemainderDateTimeField(\n            (DividedDateTimeField) fields.centuryOfEra);\n        fields.yearOfCentury = new OffsetDateTimeField(\n            field, DateTimeFieldType.yearOfCentury(), 1);\n\n        fields.era = new GJEraDateTimeField(this);\n        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);\n        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);\n        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);\n        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);\n        fields.weekyear = new BasicWeekyearDateTimeField(this);\n        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);\n        \n        field = new RemainderDateTimeField(\n            fields.weekyear, DateTimeFieldType.weekyearOfCentury(), 100);\n        fields.weekyearOfCentury = new OffsetDateTimeField(\n            field, DateTimeFieldType.weekyearOfCentury(), 1);\n        \n        // The remaining (imprecise) durations are available from the newly\n        // created datetime fields.\n\n        fields.years = fields.year.getDurationField();\n        fields.centuries = fields.centuryOfEra.getDurationField();\n        fields.months = fields.monthOfYear.getDurationField();\n        fields.weekyears = fields.weekyear.getDurationField();\n    }\n",
        "begin_line": 237,
        "end_line": 298,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseChronology.eras#659",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BaseChronology.java",
        "class_name": "org.joda.time.chrono.BaseChronology",
        "signature": "org.joda.time.chrono.BaseChronology.eras()",
        "snippet": "    public DurationField eras() {\n        return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n    }\n",
        "begin_line": 659,
        "end_line": 661,
        "comment": "\n     * Get the eras duration field for this chronology.\n     * \n     * @return DurationField or UnsupportedDurationField if unsupported\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.Fields#436",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.Fields.Fields()",
        "snippet": "        Fields() {\n        }\n",
        "begin_line": 436,
        "end_line": 437,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.copyFieldsFrom#442",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.Fields.copyFieldsFrom(org.joda.time.Chronology)",
        "snippet": "        public void copyFieldsFrom(Chronology chrono) {\n            {\n                DurationField f;\n                if (isSupported(f = chrono.millis())) {\n                    millis = f;\n                }\n                if (isSupported(f = chrono.seconds())) {\n                    seconds = f;\n                }\n                if (isSupported(f = chrono.minutes())) {\n                    minutes = f;\n                }\n                if (isSupported(f = chrono.hours())) {\n                    hours = f;\n                }\n                if (isSupported(f = chrono.halfdays())) {\n                    halfdays = f;\n                }\n                if (isSupported(f = chrono.days())) {\n                    days = f;\n                }\n                if (isSupported(f = chrono.weeks())) {\n                    weeks = f;\n                }\n                if (isSupported(f = chrono.weekyears())) {\n                    weekyears = f;\n                }\n                if (isSupported(f = chrono.months())) {\n                    months = f;\n                }\n                if (isSupported(f = chrono.years())) {\n                    years = f;\n                }\n                if (isSupported(f = chrono.centuries())) {\n                    centuries = f;\n                }\n                if (isSupported(f = chrono.eras())) {\n                    eras = f;\n                }\n            }\n\n            {\n                DateTimeField f;\n                if (isSupported(f = chrono.millisOfSecond())) {\n                    millisOfSecond = f;\n                }\n                if (isSupported(f = chrono.millisOfDay())) {\n                    millisOfDay = f;\n                }\n                if (isSupported(f = chrono.secondOfMinute())) {\n                    secondOfMinute = f;\n                }\n                if (isSupported(f = chrono.secondOfDay())) {\n                    secondOfDay = f;\n                }\n                if (isSupported(f = chrono.minuteOfHour())) {\n                    minuteOfHour = f;\n                }\n                if (isSupported(f = chrono.minuteOfDay())) {\n                    minuteOfDay = f;\n                }\n                if (isSupported(f = chrono.hourOfDay())) {\n                    hourOfDay = f;\n                }\n                if (isSupported(f = chrono.clockhourOfDay())) {\n                    clockhourOfDay = f;\n                }\n                if (isSupported(f = chrono.hourOfHalfday())) {\n                    hourOfHalfday = f;\n                }\n                if (isSupported(f = chrono.clockhourOfHalfday())) {\n                    clockhourOfHalfday = f;\n                }\n                if (isSupported(f = chrono.halfdayOfDay())) {\n                    halfdayOfDay = f;\n                }\n                if (isSupported(f = chrono.dayOfWeek())) {\n                    dayOfWeek = f;\n                }\n                if (isSupported(f = chrono.dayOfMonth())) {\n                    dayOfMonth = f;\n                }\n                if (isSupported(f = chrono.dayOfYear())) {\n                    dayOfYear = f;\n                }\n                if (isSupported(f = chrono.weekOfWeekyear())) {\n                    weekOfWeekyear = f;\n                }\n                if (isSupported(f = chrono.weekyear())) {\n                    weekyear = f;\n                }\n                if (isSupported(f = chrono.weekyearOfCentury())) {\n                    weekyearOfCentury = f;\n                }\n                if (isSupported(f = chrono.monthOfYear())) {\n                    monthOfYear = f;\n                }\n                if (isSupported(f = chrono.year())) {\n                    year = f;\n                }\n                if (isSupported(f = chrono.yearOfEra())) {\n                    yearOfEra = f;\n                }\n                if (isSupported(f = chrono.yearOfCentury())) {\n                    yearOfCentury = f;\n                }\n                if (isSupported(f = chrono.centuryOfEra())) {\n                    centuryOfEra = f;\n                }\n                if (isSupported(f = chrono.era())) {\n                    era = f;\n                }\n            }\n        }\n",
        "begin_line": 442,
        "end_line": 555,
        "comment": "\n         * Copy the supported fields from a chronology into this container.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.isSupported#557",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.Fields.isSupported(org.joda.time.DurationField)",
        "snippet": "        private static boolean isSupported(DurationField field) {\n            return field == null ? false : field.isSupported();\n        }\n",
        "begin_line": 557,
        "end_line": 559,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.isSupported#561",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.Fields.isSupported(org.joda.time.DateTimeField)",
        "snippet": "        private static boolean isSupported(DateTimeField field) {\n            return field == null ? false : field.isSupported();\n        }\n",
        "begin_line": 561,
        "end_line": 563,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.AssembledChronology#99",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.AssembledChronology(org.joda.time.Chronology, java.lang.Object)",
        "snippet": "    protected AssembledChronology(Chronology base, Object param) {\n        iBase = base;\n        iParam = param;\n        setFields();\n    }\n",
        "begin_line": 99,
        "end_line": 103,
        "comment": "\n     * Constructor calls the assemble method, enabling subclasses to define its\n     * supported fields. If a base chronology is supplied, the field set\n     * initially contains references to each base chronology field.\n     * <p>\n     * Other methods in this class will delegate to the base chronology, if it\n     * can be determined that the base chronology will produce the same results\n     * as AbstractChronology.\n     *\n     * @param base optional base chronology to copy initial fields from\n     * @param param optional param object avalable for assemble method\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.millis#155",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.millis()",
        "snippet": "    public final DurationField millis() {\n        return iMillis;\n    }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.millisOfSecond#159",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.millisOfSecond()",
        "snippet": "    public final DateTimeField millisOfSecond() {\n        return iMillisOfSecond;\n    }\n",
        "begin_line": 159,
        "end_line": 161,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.millisOfDay#163",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.millisOfDay()",
        "snippet": "    public final DateTimeField millisOfDay() {\n        return iMillisOfDay;\n    }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.seconds#167",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.seconds()",
        "snippet": "    public final DurationField seconds() {\n        return iSeconds;\n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.secondOfMinute#171",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.secondOfMinute()",
        "snippet": "    public final DateTimeField secondOfMinute() {\n        return iSecondOfMinute;\n    }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.secondOfDay#175",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.secondOfDay()",
        "snippet": "    public final DateTimeField secondOfDay() {\n        return iSecondOfDay;\n    }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.minutes#179",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.minutes()",
        "snippet": "    public final DurationField minutes() {\n        return iMinutes;\n    }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.minuteOfHour#183",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.minuteOfHour()",
        "snippet": "    public final DateTimeField minuteOfHour() {\n        return iMinuteOfHour;\n    }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.minuteOfDay#187",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.minuteOfDay()",
        "snippet": "    public final DateTimeField minuteOfDay() {\n        return iMinuteOfDay;\n    }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.hours#191",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.hours()",
        "snippet": "    public final DurationField hours() {\n        return iHours;\n    }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.hourOfDay#195",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.hourOfDay()",
        "snippet": "    public final DateTimeField hourOfDay() {\n        return iHourOfDay;\n    }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.clockhourOfDay#199",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.clockhourOfDay()",
        "snippet": "    public final DateTimeField clockhourOfDay() {\n        return iClockhourOfDay;\n    }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.halfdays#203",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.halfdays()",
        "snippet": "    public final DurationField halfdays() {\n        return iHalfdays;\n    }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.hourOfHalfday#207",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.hourOfHalfday()",
        "snippet": "    public final DateTimeField hourOfHalfday() {\n        return iHourOfHalfday;\n    }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.clockhourOfHalfday#211",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.clockhourOfHalfday()",
        "snippet": "    public final DateTimeField clockhourOfHalfday() {\n        return iClockhourOfHalfday;\n    }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.halfdayOfDay#215",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.halfdayOfDay()",
        "snippet": "    public final DateTimeField halfdayOfDay() {\n        return iHalfdayOfDay;\n    }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.days#219",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.days()",
        "snippet": "    public final DurationField days() {\n        return iDays;\n    }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.dayOfWeek#223",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.dayOfWeek()",
        "snippet": "    public final DateTimeField dayOfWeek() {\n        return iDayOfWeek;\n    }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.dayOfMonth#227",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.dayOfMonth()",
        "snippet": "    public final DateTimeField dayOfMonth() {\n        return iDayOfMonth;\n    }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.dayOfYear#231",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.dayOfYear()",
        "snippet": "    public final DateTimeField dayOfYear() {\n        return iDayOfYear;\n    }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.weeks#235",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.weeks()",
        "snippet": "    public final DurationField weeks() {\n        return iWeeks;\n    }\n",
        "begin_line": 235,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.weekOfWeekyear#239",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.weekOfWeekyear()",
        "snippet": "    public final DateTimeField weekOfWeekyear() {\n        return iWeekOfWeekyear;\n    }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.weekyears#243",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.weekyears()",
        "snippet": "    public final DurationField weekyears() {\n        return iWeekyears;\n    }\n",
        "begin_line": 243,
        "end_line": 245,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.weekyear#247",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.weekyear()",
        "snippet": "    public final DateTimeField weekyear() {\n        return iWeekyear;\n    }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.weekyearOfCentury#251",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.weekyearOfCentury()",
        "snippet": "    public final DateTimeField weekyearOfCentury() {\n        return iWeekyearOfCentury;\n    }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.months#255",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.months()",
        "snippet": "    public final DurationField months() {\n        return iMonths;\n    }\n",
        "begin_line": 255,
        "end_line": 257,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.monthOfYear#259",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.monthOfYear()",
        "snippet": "    public final DateTimeField monthOfYear() {\n        return iMonthOfYear;\n    }\n",
        "begin_line": 259,
        "end_line": 261,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.years#263",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.years()",
        "snippet": "    public final DurationField years() {\n        return iYears;\n    }\n",
        "begin_line": 263,
        "end_line": 265,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.year#267",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.year()",
        "snippet": "    public final DateTimeField year() {\n        return iYear;\n    }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.yearOfEra#271",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.yearOfEra()",
        "snippet": "    public final DateTimeField yearOfEra() {\n        return iYearOfEra;\n    }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.yearOfCentury#275",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.yearOfCentury()",
        "snippet": "    public final DateTimeField yearOfCentury() {\n        return iYearOfCentury;\n    }\n",
        "begin_line": 275,
        "end_line": 277,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.centuries#279",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.centuries()",
        "snippet": "    public final DurationField centuries() {\n        return iCenturies;\n    }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.centuryOfEra#283",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.centuryOfEra()",
        "snippet": "    public final DateTimeField centuryOfEra() {\n        return iCenturyOfEra;\n    }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.eras#287",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.eras()",
        "snippet": "    public final DurationField eras() {\n        return iEras;\n    }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.era#291",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.era()",
        "snippet": "    public final DateTimeField era() {\n        return iEra;\n    }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.getBase#307",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.getBase()",
        "snippet": "    protected final Chronology getBase() {\n        return iBase;\n    }\n",
        "begin_line": 307,
        "end_line": 309,
        "comment": "\n     * Returns the same base chronology as passed into the constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "AssembledChronology.setFields#318",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/AssembledChronology.java",
        "class_name": "org.joda.time.chrono.AssembledChronology",
        "signature": "org.joda.time.chrono.AssembledChronology.setFields()",
        "snippet": "    private void setFields() {\n        Fields fields = new Fields();\n        if (iBase != null) {\n            fields.copyFieldsFrom(iBase);\n        }\n        assemble(fields);\n\n        {\n            DurationField f;\n            iMillis    = (f = fields.millis)    != null ? f : super.millis();\n            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\n            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\n            iHours     = (f = fields.hours)     != null ? f : super.hours();\n            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\n            iDays      = (f = fields.days)      != null ? f : super.days();\n            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\n            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\n            iMonths    = (f = fields.months)    != null ? f : super.months();\n            iYears     = (f = fields.years)     != null ? f : super.years();\n            iCenturies = (f = fields.centuries) != null ? f : super.centuries();\n            iEras      = (f = fields.eras)      != null ? f : super.eras();\n        }\n\n        {\n            DateTimeField f;\n            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\n            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\n            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\n            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\n            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\n            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\n            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\n            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\n            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\n            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\n            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\n            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\n            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\n            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\n            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\n            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\n            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\n            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\n            iYear               = (f = fields.year)               != null ? f : super.year();\n            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\n            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\n            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\n            iEra                = (f = fields.era)                != null ? f : super.era();\n        }\n\n        int flags;\n        if (iBase == null) {\n            flags = 0;\n        } else {\n            flags = \n                ((iHourOfDay      == iBase.hourOfDay()      &&\n                  iMinuteOfHour   == iBase.minuteOfHour()   &&\n                  iSecondOfMinute == iBase.secondOfMinute() &&\n                  iMillisOfSecond == iBase.millisOfSecond()   ) ? 1 : 0) |\n\n                ((iMillisOfDay == iBase.millisOfDay()) ? 2 : 0) |\n\n                ((iYear        == iBase.year()        &&\n                  iMonthOfYear == iBase.monthOfYear() &&\n                  iDayOfMonth  == iBase.dayOfMonth()    ) ? 4 : 0);\n        }\n\n        iBaseFlags = flags;\n    }\n",
        "begin_line": 318,
        "end_line": 386,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.getDurationType#451",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.getDurationType()",
        "snippet": "        public DurationFieldType getDurationType() {\n            return iUnitType;\n        }\n",
        "begin_line": 451,
        "end_line": 453,
        "comment": " @inheritdoc ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.getRangeDurationType#456",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.getRangeDurationType()",
        "snippet": "        public DurationFieldType getRangeDurationType() {\n            return iRangeType;\n        }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": " @inheritdoc ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.millisOfSecond#163",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.millisOfSecond()",
        "snippet": "    public static DateTimeFieldType millisOfSecond() {\n        return MILLIS_OF_SECOND_TYPE;\n    }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "\n     * Get the millis of second field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.millisOfDay#172",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.millisOfDay()",
        "snippet": "    public static DateTimeFieldType millisOfDay() {\n        return MILLIS_OF_DAY_TYPE;\n    }\n",
        "begin_line": 172,
        "end_line": 174,
        "comment": "\n     * Get the millis of day field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.secondOfMinute#181",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.secondOfMinute()",
        "snippet": "    public static DateTimeFieldType secondOfMinute() {\n        return SECOND_OF_MINUTE_TYPE;\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * Get the second of minute field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.secondOfDay#190",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.secondOfDay()",
        "snippet": "    public static DateTimeFieldType secondOfDay() {\n        return SECOND_OF_DAY_TYPE;\n    }\n",
        "begin_line": 190,
        "end_line": 192,
        "comment": "\n     * Get the second of day field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.minuteOfHour#199",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.minuteOfHour()",
        "snippet": "    public static DateTimeFieldType minuteOfHour() {\n        return MINUTE_OF_HOUR_TYPE;\n    }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n     * Get the minute of hour field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.minuteOfDay#208",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.minuteOfDay()",
        "snippet": "    public static DateTimeFieldType minuteOfDay() {\n        return MINUTE_OF_DAY_TYPE;\n    }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n     * Get the minute of day field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.hourOfDay#217",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.hourOfDay()",
        "snippet": "    public static DateTimeFieldType hourOfDay() {\n        return HOUR_OF_DAY_TYPE;\n    }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\n     * Get the hour of day (0-23) field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.hourOfHalfday#235",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.hourOfHalfday()",
        "snippet": "    public static DateTimeFieldType hourOfHalfday() {\n        return HOUR_OF_HALFDAY_TYPE;\n    }\n",
        "begin_line": 235,
        "end_line": 237,
        "comment": "\n     * Get the hour of am/pm (0-11) field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.clockhourOfHalfday#244",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.clockhourOfHalfday()",
        "snippet": "    public static DateTimeFieldType clockhourOfHalfday() {\n        return CLOCKHOUR_OF_HALFDAY_TYPE;\n    }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "\n     * Get the hour of am/pm (offset to 1-12) field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.halfdayOfDay#253",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.halfdayOfDay()",
        "snippet": "    public static DateTimeFieldType halfdayOfDay() {\n        return HALFDAY_OF_DAY_TYPE;\n    }\n",
        "begin_line": 253,
        "end_line": 255,
        "comment": "\n     * Get the AM(0) PM(1) field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.dayOfWeek#263",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.dayOfWeek()",
        "snippet": "    public static DateTimeFieldType dayOfWeek() {\n        return DAY_OF_WEEK_TYPE;\n    }\n",
        "begin_line": 263,
        "end_line": 265,
        "comment": "\n     * Get the day of week field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.dayOfMonth#272",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.dayOfMonth()",
        "snippet": "    public static DateTimeFieldType dayOfMonth() {\n        return DAY_OF_MONTH_TYPE;\n    }\n",
        "begin_line": 272,
        "end_line": 274,
        "comment": "\n     * Get the day of month field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.dayOfYear#281",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.dayOfYear()",
        "snippet": "    public static DateTimeFieldType dayOfYear() {\n        return DAY_OF_YEAR_TYPE;\n    }\n",
        "begin_line": 281,
        "end_line": 283,
        "comment": "\n     * Get the day of year field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.weekOfWeekyear#290",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.weekOfWeekyear()",
        "snippet": "    public static DateTimeFieldType weekOfWeekyear() {\n        return WEEK_OF_WEEKYEAR_TYPE;\n    }\n",
        "begin_line": 290,
        "end_line": 292,
        "comment": "\n     * Get the week of a week based year field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.weekyear#299",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.weekyear()",
        "snippet": "    public static DateTimeFieldType weekyear() {\n        return WEEKYEAR_TYPE;\n    }\n",
        "begin_line": 299,
        "end_line": 301,
        "comment": "\n     * Get the year of a week based year field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.weekyearOfCentury#308",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.weekyearOfCentury()",
        "snippet": "    public static DateTimeFieldType weekyearOfCentury() {\n        return WEEKYEAR_OF_CENTURY_TYPE;\n    }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n     * Get the year of a week based year within a century field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.monthOfYear#317",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.monthOfYear()",
        "snippet": "    public static DateTimeFieldType monthOfYear() {\n        return MONTH_OF_YEAR_TYPE;\n    }\n",
        "begin_line": 317,
        "end_line": 319,
        "comment": "\n     * Get the month of year field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.yearOfEra#335",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.yearOfEra()",
        "snippet": "    public static DateTimeFieldType yearOfEra() {\n        return YEAR_OF_ERA_TYPE;\n    }\n",
        "begin_line": 335,
        "end_line": 337,
        "comment": "\n     * Get the year of era field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.yearOfCentury#344",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.yearOfCentury()",
        "snippet": "    public static DateTimeFieldType yearOfCentury() {\n        return YEAR_OF_CENTURY_TYPE;\n    }\n",
        "begin_line": 344,
        "end_line": 346,
        "comment": "\n     * Get the year of century field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.centuryOfEra#353",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.centuryOfEra()",
        "snippet": "    public static DateTimeFieldType centuryOfEra() {\n        return CENTURY_OF_ERA_TYPE;\n    }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n     * Get the century of era field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.era#362",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.era()",
        "snippet": "    public static DateTimeFieldType era() {\n        return ERA_TYPE;\n    }\n",
        "begin_line": 362,
        "end_line": 364,
        "comment": "\n     * Get the era field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1063
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnsupportedDurationField.getInstance#47",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "class_name": "org.joda.time.field.UnsupportedDurationField",
        "signature": "org.joda.time.field.UnsupportedDurationField.getInstance(org.joda.time.DurationFieldType)",
        "snippet": "    public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n        UnsupportedDurationField field;\n        if (cCache == null) {\n            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);\n            field = null;\n        } else {\n            field = cCache.get(type);\n        }\n        if (field == null) {\n            field = new UnsupportedDurationField(type);\n            cCache.put(type, field);\n        }\n        return field;\n    }\n",
        "begin_line": 47,
        "end_line": 60,
        "comment": "\n     * Gets an instance of UnsupportedDurationField for a specific named field.\n     * The returned instance is cached.\n     * \n     * @param type  the type to obtain\n     * @return the instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.106
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnsupportedDurationField.UnsupportedDurationField#70",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "class_name": "org.joda.time.field.UnsupportedDurationField",
        "signature": "org.joda.time.field.UnsupportedDurationField.UnsupportedDurationField(org.joda.time.DurationFieldType)",
        "snippet": "    private UnsupportedDurationField(DurationFieldType type) {\n        iType = type;\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Constructor.\n     * \n     * @param type  the type to use\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.106
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.hashCode#276",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.StandardDurationFieldType.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            return (1 << iOrdinal);\n        }\n",
        "begin_line": 276,
        "end_line": 279,
        "comment": " @inheritdoc ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.106
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.clockhourOfDay#226",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.clockhourOfDay()",
        "snippet": "    public static DateTimeFieldType clockhourOfDay() {\n        return CLOCKHOUR_OF_DAY_TYPE;\n    }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": "\n     * Get the hour of day (offset to 1-24) field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.106
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.year#326",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.year()",
        "snippet": "    public static DateTimeFieldType year() {\n        return YEAR_TYPE;\n    }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "\n     * Get the year field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.106
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseChronology.BaseChronology#53",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/chrono/BaseChronology.java",
        "class_name": "org.joda.time.chrono.BaseChronology",
        "signature": "org.joda.time.chrono.BaseChronology.BaseChronology()",
        "snippet": "    protected BaseChronology() {\n        super();\n    }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * Restricted constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1057
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.halfdays#140",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.halfdays()",
        "snippet": "    public static DurationFieldType halfdays() {\n        return HALFDAYS_TYPE;\n    }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\n     * Get the halfdays field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1057
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.weekyears#168",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.weekyears()",
        "snippet": "    public static DurationFieldType weekyears() {\n        return WEEKYEARS_TYPE;\n    }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "\n     * Get the weekyears field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1057
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.centuries#195",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.centuries()",
        "snippet": "    public static DurationFieldType centuries() {\n        return CENTURIES_TYPE;\n    }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "\n     * Get the centuries field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1057
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.eras#204",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.eras()",
        "snippet": "    public static DurationFieldType eras() {\n        return ERAS_TYPE;\n    }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n     * Get the eras field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1057
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.StandardDateTimeFieldType#442",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.StandardDateTimeFieldType.StandardDateTimeFieldType(java.lang.String, byte, org.joda.time.DurationFieldType, org.joda.time.DurationFieldType)",
        "snippet": "        StandardDateTimeFieldType(String name, byte ordinal,\n                                  DurationFieldType unitType, DurationFieldType rangeType) {\n            super(name);\n            iOrdinal = ordinal;\n            iUnitType = unitType;\n            iRangeType = rangeType;\n        }\n",
        "begin_line": 442,
        "end_line": 448,
        "comment": "\n         * Constructor.\n         * \n         * @param name  the name to use\n         * @param ordinal  the byte value for the oridinal index\n         * @param unitType  the unit duration type\n         * @param rangeType  the range duration type\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1057
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeFieldType.DateTimeFieldType#152",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeFieldType.java",
        "class_name": "org.joda.time.DateTimeFieldType",
        "signature": "org.joda.time.DateTimeFieldType.DateTimeFieldType(java.lang.String)",
        "snippet": "    protected DateTimeFieldType(String name) {\n        super();\n        iName = name;\n    }\n",
        "begin_line": 152,
        "end_line": 155,
        "comment": "\n     * Constructor.\n     * \n     * @param name  the name to use\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1057
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.millis#104",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.millis()",
        "snippet": "    public static DurationFieldType millis() {\n        return MILLIS_TYPE;\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * Get the millis field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.months#177",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.months()",
        "snippet": "    public static DurationFieldType months() {\n        return MONTHS_TYPE;\n    }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "\n     * Get the months field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1008
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.years#186",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.years()",
        "snippet": "    public static DurationFieldType years() {\n        return YEARS_TYPE;\n    }\n",
        "begin_line": 186,
        "end_line": 188,
        "comment": "\n     * Get the years field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1008
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationField.getDifferenceAsLong#113",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationField.java",
        "class_name": "org.joda.time.field.PreciseDurationField",
        "signature": "org.joda.time.field.PreciseDurationField.getDifferenceAsLong(long, long)",
        "snippet": "    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\n        return difference / iUnitMillis;\n    }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "FieldUtils.safeSubtract#99",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/FieldUtils.java",
        "class_name": "org.joda.time.field.FieldUtils",
        "signature": "org.joda.time.field.FieldUtils.safeSubtract(long, long)",
        "snippet": "    public static long safeSubtract(long val1, long val2) {\n        long diff = val1 - val2;\n        // If there is a sign change, but the two values have different signs...\n        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\n            throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" - \" + val2);\n        }\n        return diff;\n    }\n",
        "begin_line": 99,
        "end_line": 107,
        "comment": "\n     * Subtracts two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value, to be taken away from\n     * @param val2  the second value, the amount to take away\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseDurationField.getDifference#140",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/BaseDurationField.java",
        "class_name": "org.joda.time.field.BaseDurationField",
        "signature": "org.joda.time.field.BaseDurationField.getDifference(long, long)",
        "snippet": "    public int getDifference(long minuendInstant, long subtrahendInstant) {\n        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n    }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "------------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseSingleFieldPeriod.getValue#166",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
        "class_name": "org.joda.time.base.BaseSingleFieldPeriod",
        "signature": "org.joda.time.base.BaseSingleFieldPeriod.getValue()",
        "snippet": "    protected int getValue() {\n        return iPeriod;\n    }\n",
        "begin_line": 166,
        "end_line": 168,
        "comment": "\n     * Gets the amount of this period.\n     *\n     * @return the period value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0995
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZone.getDefault#132",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.getDefault()",
        "snippet": "    public static DateTimeZone getDefault() {\n        DateTimeZone zone = cDefault;\n        if (zone == null) {\n            synchronized(DateTimeZone.class) {\n                zone = cDefault;\n                if (zone == null) {\n                    DateTimeZone temp = null;\n                    try {\n                        try {\n                            String id = System.getProperty(\"user.timezone\");\n                            if (id != null) {  // null check avoids stack overflow\n                                temp = forID(id);\n                            }\n                        } catch (RuntimeException ex) {\n                            // ignored\n                        }\n                        if (temp == null) {\n                            temp = forTimeZone(TimeZone.getDefault());\n                        }\n                    } catch (IllegalArgumentException ex) {\n                        // ignored\n                    }\n                    if (temp == null) {\n                        temp = UTC;\n                    }\n                    cDefault = zone = temp;\n                }\n            }\n        }\n        return zone;\n    }\n",
        "begin_line": 132,
        "end_line": 162,
        "comment": "\n     * Gets the default time zone.\n     * <p>\n     * The default time zone is derived from the system property {@code user.timezone}.\n     * If that is {@code null} or is not a valid identifier, then the value of the\n     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n     * <p>\n     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this\n     * method, then the change will not be picked up here.\n     * \n     * @return the default datetime zone object\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0993
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.weeks#159",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.weeks()",
        "snippet": "    public static DurationFieldType weeks() {\n        return WEEKS_TYPE;\n    }\n",
        "begin_line": 159,
        "end_line": 161,
        "comment": "\n     * Get the weeks field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0985
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.seconds#113",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.seconds()",
        "snippet": "    public static DurationFieldType seconds() {\n        return SECONDS_TYPE;\n    }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n     * Get the seconds field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.minutes#122",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.minutes()",
        "snippet": "    public static DurationFieldType minutes() {\n        return MINUTES_TYPE;\n    }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\n     * Get the minutes field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.hours#131",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.hours()",
        "snippet": "    public static DurationFieldType hours() {\n        return HOURS_TYPE;\n    }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n     * Get the hours field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.days#150",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.days()",
        "snippet": "    public static DurationFieldType days() {\n        return DAYS_TYPE;\n    }\n",
        "begin_line": 150,
        "end_line": 152,
        "comment": "\n     * Get the days field type.\n     * \n     * @return the DateTimeFieldType constant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0978
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatter.PeriodFormatter#102",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatter.java",
        "class_name": "org.joda.time.format.PeriodFormatter",
        "signature": "org.joda.time.format.PeriodFormatter.PeriodFormatter(org.joda.time.format.PeriodPrinter, org.joda.time.format.PeriodParser, java.util.Locale, org.joda.time.PeriodType)",
        "snippet": "    private PeriodFormatter(\n            PeriodPrinter printer, PeriodParser parser,\n            Locale locale, PeriodType type) {\n        super();\n        iPrinter = printer;\n        iParser = parser;\n        iLocale = locale;\n        iParseType = type;\n    }\n",
        "begin_line": 102,
        "end_line": 110,
        "comment": "\n     * Constructor.\n     * \n     * @param printer  the internal printer, null if cannot print\n     * @param parser  the internal parser, null if cannot parse\n     * @param locale  the locale to use\n     * @param type  the parse period type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatter.withParseType#186",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatter.java",
        "class_name": "org.joda.time.format.PeriodFormatter",
        "signature": "org.joda.time.format.PeriodFormatter.withParseType(org.joda.time.PeriodType)",
        "snippet": "    public PeriodFormatter withParseType(PeriodType type) {\n        if (type == iParseType) {\n            return this;\n        }\n        return new PeriodFormatter(iPrinter, iParser, iLocale, type);\n    }\n",
        "begin_line": 186,
        "end_line": 191,
        "comment": "\n     * Returns a new formatter with a different PeriodType for parsing.\n     * <p>\n     * A PeriodFormatter is immutable, so a new instance is returned,\n     * and the original is unaltered and still usable.\n     * \n     * @param type  the type to use in parsing\n     * @return the new formatter\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.SimpleAffix#859",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.SimpleAffix.SimpleAffix(java.lang.String)",
        "snippet": "        SimpleAffix(String text) {\n            iText = text;\n        }\n",
        "begin_line": 859,
        "end_line": 861,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0964
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.Separator#1597",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.Separator.Separator(java.lang.String, java.lang.String, java.lang.String[], org.joda.time.format.PeriodPrinter, org.joda.time.format.PeriodParser, boolean, boolean)",
        "snippet": "        Separator(String text, String finalText, String[] variants,\n                PeriodPrinter beforePrinter, PeriodParser beforeParser,\n                boolean useBefore, boolean useAfter) {\n            iText = text;\n            iFinalText = finalText;\n\n            if ((finalText == null || text.equals(finalText)) &&\n                (variants == null || variants.length == 0)) {\n\n                iParsedForms = new String[] {text};\n            } else {\n                // Filter and reverse sort the parsed forms.\n                TreeSet<String> parsedSet = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);\n                parsedSet.add(text);\n                parsedSet.add(finalText);\n                if (variants != null) {\n                    for (int i=variants.length; --i>=0; ) {\n                        parsedSet.add(variants[i]);\n                    }\n                }\n                ArrayList<String> parsedList = new ArrayList<String>(parsedSet);\n                Collections.reverse(parsedList);\n                iParsedForms = parsedList.toArray(new String[parsedList.size()]);\n            }\n\n            iBeforePrinter = beforePrinter;\n            iBeforeParser = beforeParser;\n            iUseBefore = useBefore;\n            iUseAfter = useAfter;\n        }\n",
        "begin_line": 1597,
        "end_line": 1626,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0964
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.Literal#1548",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.Literal.Literal(java.lang.String)",
        "snippet": "        Literal(String text) {\n            iText = text;\n        }\n",
        "begin_line": 1548,
        "end_line": 1550,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0964
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendLiteral#227",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendLiteral(java.lang.String)",
        "snippet": "    public PeriodFormatterBuilder appendLiteral(String text) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Literal must not be null\");\n        }\n        clearPrefix();\n        Literal literal = new Literal(text);\n        append0(literal, literal);\n        return this;\n    }\n",
        "begin_line": 227,
        "end_line": 235,
        "comment": "\n     * Instructs the printer to emit specific text, and the parser to expect it.\n     * The parser is case-insensitive.\n     *\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalArgumentException if text is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0964
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendSecondsWithOptionalMillis#499",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendSecondsWithOptionalMillis()",
        "snippet": "    public PeriodFormatterBuilder appendSecondsWithOptionalMillis() {\n        appendField(SECONDS_OPTIONAL_MILLIS);\n        return this;\n    }\n",
        "begin_line": 499,
        "end_line": 502,
        "comment": "\n     * Instruct the printer to emit a combined seconds and millis field, if supported.\n     * The millis will overflow into the seconds if necessary.\n     * The millis are only output if non-zero.\n     *\n     * @return this PeriodFormatterBuilder\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0964
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendSuffix#551",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendSuffix(java.lang.String)",
        "snippet": "    public PeriodFormatterBuilder appendSuffix(String text) {\n        if (text == null) {\n            throw new IllegalArgumentException();\n        }\n        return appendSuffix(new SimpleAffix(text));\n    }\n",
        "begin_line": 551,
        "end_line": 556,
        "comment": "\n     * Append a field suffix which applies only to the last appended field. If\n     * the field is not printed, neither is the suffix.\n     *\n     * @param text text to print after field only if field is printed\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if no field exists to append to\n     * @see #appendPrefix\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0964
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendSeparatorIfFieldsAfter#651",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendSeparatorIfFieldsAfter(java.lang.String)",
        "snippet": "    public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text) {\n        return appendSeparator(text, text, null, false, true);\n    }\n",
        "begin_line": 651,
        "end_line": 653,
        "comment": "\n     * Append a separator, which is output only if fields are printed after the separator.\n     * <p>\n     * For example,\n     * <code>builder.appendDays().appendSeparatorIfFieldsAfter(\",\").appendHours()</code>\n     * will only output the comma if the hours fields is output.\n     * <p>\n     * The text will be parsed case-insensitively.\n     * <p>\n     * Note: appending a separator discontinues any further work on the latest\n     * appended field.\n     *\n     * @param text  the text to use as a separator\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if this separator follows a previous one\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0964
        },
        "num_failing_tests": 2
    },
    {
        "name": "ISOPeriodFormat.standard#64",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/ISOPeriodFormat.java",
        "class_name": "org.joda.time.format.ISOPeriodFormat",
        "signature": "org.joda.time.format.ISOPeriodFormat.standard()",
        "snippet": "    public static PeriodFormatter standard() {\n        if (cStandard == null) {\n            cStandard = new PeriodFormatterBuilder()\n                .appendLiteral(\"P\")\n                .appendYears()\n                .appendSuffix(\"Y\")\n                .appendMonths()\n                .appendSuffix(\"M\")\n                .appendWeeks()\n                .appendSuffix(\"W\")\n                .appendDays()\n                .appendSuffix(\"D\")\n                .appendSeparatorIfFieldsAfter(\"T\")\n                .appendHours()\n                .appendSuffix(\"H\")\n                .appendMinutes()\n                .appendSuffix(\"M\")\n                .appendSecondsWithOptionalMillis()\n                .appendSuffix(\"S\")\n                .toFormatter();\n        }\n        return cStandard;\n    }\n",
        "begin_line": 64,
        "end_line": 86,
        "comment": "\n     * The standard ISO format - PyYmMwWdDThHmMsS.\n     * Milliseconds are not output.\n     * Note that the ISO8601 standard actually indicates weeks should not\n     * be shown if any other field is present and vice versa.\n     * \n     * @return the formatter\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0964
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.finish#1755",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.Separator.finish(org.joda.time.format.PeriodPrinter, org.joda.time.format.PeriodParser)",
        "snippet": "        Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser) {\n            iAfterPrinter = afterPrinter;\n            iAfterParser = afterParser;\n            return this;\n        }\n",
        "begin_line": 1755,
        "end_line": 1759,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.FieldFormatter#1050",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.FieldFormatter.FieldFormatter(int, int, int, boolean, int, org.joda.time.format.PeriodFormatterBuilder.FieldFormatter[], org.joda.time.format.PeriodFormatterBuilder.PeriodFieldAffix, org.joda.time.format.PeriodFormatterBuilder.PeriodFieldAffix)",
        "snippet": "        FieldFormatter(int minPrintedDigits, int printZeroSetting,\n                       int maxParsedDigits, boolean rejectSignedValues,\n                       int fieldType, FieldFormatter[] fieldFormatters,\n                       PeriodFieldAffix prefix, PeriodFieldAffix suffix) {\n            iMinPrintedDigits = minPrintedDigits;\n            iPrintZeroSetting = printZeroSetting;\n            iMaxParsedDigits = maxParsedDigits;\n            iRejectSignedValues = rejectSignedValues;\n            iFieldType = fieldType;\n            iFieldFormatters = fieldFormatters;\n            iPrefix = prefix;\n            iSuffix = suffix;\n        }\n",
        "begin_line": 1050,
        "end_line": 1062,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.FieldFormatter#1064",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.FieldFormatter.FieldFormatter(org.joda.time.format.PeriodFormatterBuilder.FieldFormatter, org.joda.time.format.PeriodFormatterBuilder.PeriodFieldAffix)",
        "snippet": "        FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {\n            iMinPrintedDigits = field.iMinPrintedDigits;\n            iPrintZeroSetting = field.iPrintZeroSetting;\n            iMaxParsedDigits = field.iMaxParsedDigits;\n            iRejectSignedValues = field.iRejectSignedValues;\n            iFieldType = field.iFieldType;\n            iFieldFormatters = field.iFieldFormatters;\n            iPrefix = field.iPrefix;\n            if (field.iSuffix != null) {\n                suffix = new CompositeAffix(field.iSuffix, suffix);\n            }\n            iSuffix = suffix;\n        }\n",
        "begin_line": 1064,
        "end_line": 1076,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.getFieldType#1534",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.FieldFormatter.getFieldType()",
        "snippet": "        int getFieldType() {\n            return iFieldType;\n        }\n",
        "begin_line": 1534,
        "end_line": 1536,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.Composite#1772",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.Composite.Composite(java.util.List<java.lang.Object>)",
        "snippet": "        Composite(List<Object> elementPairs) {\n            List<Object> printerList = new ArrayList<Object>();\n            List<Object> parserList = new ArrayList<Object>();\n\n            decompose(elementPairs, printerList, parserList);\n\n            if (printerList.size() <= 0) {\n                iPrinters = null;\n            } else {\n                iPrinters = printerList.toArray(\n                        new PeriodPrinter[printerList.size()]);\n            }\n\n            if (parserList.size() <= 0) {\n                iParsers = null;\n            } else {\n                iParsers = parserList.toArray(\n                        new PeriodParser[parserList.size()]);\n            }\n        }\n",
        "begin_line": 1772,
        "end_line": 1791,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.decompose#1842",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.Composite.decompose(java.util.List<java.lang.Object>, java.util.List<java.lang.Object>, java.util.List<java.lang.Object>)",
        "snippet": "        private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n            int size = elementPairs.size();\n            for (int i=0; i<size; i+=2) {\n                Object element = elementPairs.get(i);\n                if (element instanceof PeriodPrinter) {\n                    if (element instanceof Composite) {\n                        addArrayToList(printerList, ((Composite) element).iPrinters);\n                    } else {\n                        printerList.add(element);\n                    }\n                }\n\n                element = elementPairs.get(i + 1);\n                if (element instanceof PeriodParser) {\n                    if (element instanceof Composite) {\n                        addArrayToList(parserList, ((Composite) element).iParsers);\n                    } else {\n                        parserList.add(element);\n                    }\n                }\n            }\n        }\n",
        "begin_line": 1842,
        "end_line": 1863,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.PeriodFormatterBuilder#101",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.PeriodFormatterBuilder()",
        "snippet": "    public PeriodFormatterBuilder() {\n        clear();\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.toFormatter#122",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.toFormatter()",
        "snippet": "    public PeriodFormatter toFormatter() {\n        PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);\n        iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();\n        return formatter;\n    }\n",
        "begin_line": 122,
        "end_line": 126,
        "comment": "\n     * Constructs a PeriodFormatter using all the appended elements.\n     * <p>\n     * This is the main method used by applications at the end of the build\n     * process to create a usable formatter.\n     * <p>\n     * Subsequent changes to this builder do not affect the returned formatter.\n     * <p>\n     * The returned formatter may not support both printing and parsing.\n     * The methods {@link PeriodFormatter#isPrinter()} and\n     * {@link PeriodFormatter#isParser()} will help you determine the state\n     * of the formatter.\n     * \n     * @return the newly created formatter\n     * @throws IllegalStateException if the builder can produce neither a printer nor a parser\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.clear#170",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.clear()",
        "snippet": "    public void clear() {\n        iMinPrintedDigits = 1;\n        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;\n        iMaxParsedDigits = 10;\n        iRejectSignedValues = false;\n        iPrefix = null;\n        if (iElementPairs == null) {\n            iElementPairs = new ArrayList<Object>();\n        } else {\n            iElementPairs.clear();\n        }\n        iNotPrinter = false;\n        iNotParser = false;\n        iFieldFormatters = new FieldFormatter[10];\n    }\n",
        "begin_line": 170,
        "end_line": 184,
        "comment": "\n     * Clears out all the appended elements, allowing this builder to be reused.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendYears#397",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendYears()",
        "snippet": "    public PeriodFormatterBuilder appendYears() {\n        appendField(YEARS);\n        return this;\n    }\n",
        "begin_line": 397,
        "end_line": 400,
        "comment": "\n     * Instruct the printer to emit an integer years field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendMonths#410",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendMonths()",
        "snippet": "    public PeriodFormatterBuilder appendMonths() {\n        appendField(MONTHS);\n        return this;\n    }\n",
        "begin_line": 410,
        "end_line": 413,
        "comment": "\n     * Instruct the printer to emit an integer months field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendWeeks#423",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendWeeks()",
        "snippet": "    public PeriodFormatterBuilder appendWeeks() {\n        appendField(WEEKS);\n        return this;\n    }\n",
        "begin_line": 423,
        "end_line": 426,
        "comment": "\n     * Instruct the printer to emit an integer weeks field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendDays#436",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendDays()",
        "snippet": "    public PeriodFormatterBuilder appendDays() {\n        appendField(DAYS);\n        return this;\n    }\n",
        "begin_line": 436,
        "end_line": 439,
        "comment": "\n     * Instruct the printer to emit an integer days field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendHours#449",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendHours()",
        "snippet": "    public PeriodFormatterBuilder appendHours() {\n        appendField(HOURS);\n        return this;\n    }\n",
        "begin_line": 449,
        "end_line": 452,
        "comment": "\n     * Instruct the printer to emit an integer hours field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendMinutes#462",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendMinutes()",
        "snippet": "    public PeriodFormatterBuilder appendMinutes() {\n        appendField(MINUTES);\n        return this;\n    }\n",
        "begin_line": 462,
        "end_line": 465,
        "comment": "\n     * Instruct the printer to emit an integer minutes field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendField#529",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendField(int)",
        "snippet": "    private void appendField(int type) {\n        appendField(type, iMinPrintedDigits);\n    }\n",
        "begin_line": 529,
        "end_line": 531,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendField#533",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendField(int, int)",
        "snippet": "    private void appendField(int type, int minPrinted) {\n        FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,\n            iMaxParsedDigits, iRejectSignedValues, type, iFieldFormatters, iPrefix, null);\n        append0(field, field);\n        iFieldFormatters[type] = field;\n        iPrefix = null;\n    }\n",
        "begin_line": 533,
        "end_line": 539,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendSuffix#588",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendSuffix(org.joda.time.format.PeriodFormatterBuilder.PeriodFieldAffix)",
        "snippet": "    private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) {\n        final Object originalPrinter;\n        final Object originalParser;\n        if (iElementPairs.size() > 0) {\n            originalPrinter = iElementPairs.get(iElementPairs.size() - 2);\n            originalParser = iElementPairs.get(iElementPairs.size() - 1);\n        } else {\n            originalPrinter = null;\n            originalParser = null;\n        }\n\n        if (originalPrinter == null || originalParser == null ||\n                originalPrinter != originalParser ||\n                !(originalPrinter instanceof FieldFormatter)) {\n            throw new IllegalStateException(\"No field to apply suffix to\");\n        }\n\n        clearPrefix();\n        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);\n        iElementPairs.set(iElementPairs.size() - 2, newField);\n        iElementPairs.set(iElementPairs.size() - 1, newField);\n        iFieldFormatters[newField.getFieldType()] = newField;\n        \n        return this;\n    }\n",
        "begin_line": 588,
        "end_line": 612,
        "comment": "\n     * Append a field suffix which applies only to the last appended field. If\n     * the field is not printed, neither is the suffix.\n     *\n     * @param suffix custom suffix\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if no field exists to append to\n     * @see #appendPrefix\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.appendSeparator#727",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.appendSeparator(java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)",
        "snippet": "    private PeriodFormatterBuilder appendSeparator(String text, String finalText,\n                                                   String[] variants,\n                                                   boolean useBefore, boolean useAfter) {\n        if (text == null || finalText == null) {\n            throw new IllegalArgumentException();\n        }\n\n        clearPrefix();\n        \n        // optimise zero formatter case\n        List<Object> pairs = iElementPairs;\n        if (pairs.size() == 0) {\n            if (useAfter && useBefore == false) {\n                Separator separator = new Separator(\n                        text, finalText, variants,\n                        Literal.EMPTY, Literal.EMPTY, useBefore, useAfter);\n                append0(separator, separator);\n            }\n            return this;\n        }\n        \n        // find the last separator added\n        int i;\n        Separator lastSeparator = null;\n        for (i=pairs.size(); --i>=0; ) {\n            if (pairs.get(i) instanceof Separator) {\n                lastSeparator = (Separator) pairs.get(i);\n                pairs = pairs.subList(i + 1, pairs.size());\n                break;\n            }\n            i--;  // element pairs\n        }\n        \n        // merge formatters\n        if (lastSeparator != null && pairs.size() == 0) {\n            throw new IllegalStateException(\"Cannot have two adjacent separators\");\n        } else {\n            Object[] comp = createComposite(pairs);\n            pairs.clear();\n            Separator separator = new Separator(\n                    text, finalText, variants,\n                    (PeriodPrinter) comp[0], (PeriodParser) comp[1],\n                    useBefore, useAfter);\n            pairs.add(separator);\n            pairs.add(separator);\n        }\n        \n        return this;\n    }\n",
        "begin_line": 727,
        "end_line": 775,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.clearPrefix#778",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.clearPrefix()",
        "snippet": "    private void clearPrefix() throws IllegalStateException {\n        if (iPrefix != null) {\n            throw new IllegalStateException(\"Prefix not followed by field\");\n        }\n        iPrefix = null;\n    }\n",
        "begin_line": 778,
        "end_line": 783,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.append0#785",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.append0(org.joda.time.format.PeriodPrinter, org.joda.time.format.PeriodParser)",
        "snippet": "    private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser) {\n        iElementPairs.add(printer);\n        iElementPairs.add(parser);\n        iNotPrinter |= (printer == null);\n        iNotParser |= (parser == null);\n        return this;\n    }\n",
        "begin_line": 785,
        "end_line": 791,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.toFormatter#794",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.toFormatter(java.util.List<java.lang.Object>, boolean, boolean)",
        "snippet": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {\n                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n                sep = sep.finish(f.getPrinter(), f.getParser());\n                return new PeriodFormatter(sep, sep);\n            }\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n",
        "begin_line": 794,
        "end_line": 815,
        "comment": "-----------------------------------------------------------------------",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatterBuilder.createComposite#817",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "class_name": "org.joda.time.format.PeriodFormatterBuilder",
        "signature": "org.joda.time.format.PeriodFormatterBuilder.createComposite(java.util.List<java.lang.Object>)",
        "snippet": "    private static Object[] createComposite(List<Object> elementPairs) {\n        switch (elementPairs.size()) {\n            case 0:\n                return new Object[] {Literal.EMPTY, Literal.EMPTY};\n            case 1:\n                return new Object[] {elementPairs.get(0), elementPairs.get(1)};\n            default:\n                Composite comp = new Composite(elementPairs);\n                return new Object[] {comp, comp};\n        }\n    }\n",
        "begin_line": 817,
        "end_line": 827,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatter.PeriodFormatter#85",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatter.java",
        "class_name": "org.joda.time.format.PeriodFormatter",
        "signature": "org.joda.time.format.PeriodFormatter.PeriodFormatter(org.joda.time.format.PeriodPrinter, org.joda.time.format.PeriodParser)",
        "snippet": "    public PeriodFormatter(\n            PeriodPrinter printer, PeriodParser parser) {\n        super();\n        iPrinter = printer;\n        iParser = parser;\n        iLocale = null;\n        iParseType = null;\n    }\n",
        "begin_line": 85,
        "end_line": 92,
        "comment": "\n     * Creates a new formatter, however you will normally use the factory\n     * or the builder.\n     * \n     * @param printer  the internal printer, null if cannot print\n     * @param parser  the internal parser, null if cannot parse\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatter.getPrinter#127",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatter.java",
        "class_name": "org.joda.time.format.PeriodFormatter",
        "signature": "org.joda.time.format.PeriodFormatter.getPrinter()",
        "snippet": "    public PeriodPrinter getPrinter() {\n        return iPrinter;\n    }\n",
        "begin_line": 127,
        "end_line": 129,
        "comment": "\n     * Gets the internal printer object that performs the real printing work.\n     * \n     * @return the internal printer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeriodFormatter.getParser#145",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/format/PeriodFormatter.java",
        "class_name": "org.joda.time.format.PeriodFormatter",
        "signature": "org.joda.time.format.PeriodFormatter.getParser()",
        "snippet": "    public PeriodParser getParser() {\n        return iParser;\n    }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n     * Gets the internal parser object that performs the real parsing work.\n     * \n     * @return the internal parser\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 2
    },
    {
        "name": "BaseSingleFieldPeriod.BaseSingleFieldPeriod#155",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
        "class_name": "org.joda.time.base.BaseSingleFieldPeriod",
        "signature": "org.joda.time.base.BaseSingleFieldPeriod.BaseSingleFieldPeriod(int)",
        "snippet": "    protected BaseSingleFieldPeriod(int period) {\n        super();\n        iPeriod = period;\n    }\n",
        "begin_line": 155,
        "end_line": 158,
        "comment": "\n     * Creates a new instance representing the specified period.\n     *\n     * @param period  the period to represent\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0956
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeUtils.put#61",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeUtils.java",
        "class_name": "org.joda.time.DateTimeUtils",
        "signature": "org.joda.time.DateTimeUtils.put(java.util.Map<java.lang.String, org.joda.time.DateTimeZone>, java.lang.String, java.lang.String)",
        "snippet": "    private static void put(Map<String, DateTimeZone> map, String name, String id) {\n        try {\n            map.put(name, DateTimeZone.forID(id));\n        } catch (RuntimeException ex) {\n            // ignore\n        }\n    }\n",
        "begin_line": 61,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 2
    },
    {
        "name": "PreciseDurationField.add#103",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/PreciseDurationField.java",
        "class_name": "org.joda.time.field.PreciseDurationField",
        "signature": "org.joda.time.field.PreciseDurationField.add(long, int)",
        "snippet": "    public long add(long instant, int value) {\n        long addition = value * iUnitMillis;  // safe\n        return FieldUtils.safeAdd(instant, addition);\n    }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeriodType.PeriodType#594",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/PeriodType.java",
        "class_name": "org.joda.time.PeriodType",
        "signature": "org.joda.time.PeriodType.PeriodType(java.lang.String, org.joda.time.DurationFieldType[], int[])",
        "snippet": "    protected PeriodType(String name, DurationFieldType[] types, int[] indices) {\n        super();\n        iName = name;\n        iTypes = types;\n        iIndices = indices;\n    }\n",
        "begin_line": 594,
        "end_line": 599,
        "comment": "\n     * Constructor.\n     *\n     * @param name  the name\n     * @param types  the types\n     * @param indices  the indices\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0841
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.StandardDurationFieldType#258",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.StandardDurationFieldType.StandardDurationFieldType(java.lang.String, byte)",
        "snippet": "        StandardDurationFieldType(String name, byte ordinal) {\n            super(name);\n            iOrdinal = ordinal;\n        }\n",
        "begin_line": 258,
        "end_line": 261,
        "comment": "\n         * Constructor.\n         * \n         * @param name  the name to use\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0786
        },
        "num_failing_tests": 2
    },
    {
        "name": "DurationFieldType.DurationFieldType#93",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DurationFieldType.java",
        "class_name": "org.joda.time.DurationFieldType",
        "signature": "org.joda.time.DurationFieldType.DurationFieldType(java.lang.String)",
        "snippet": "    protected DurationFieldType(String name) {\n        super();\n        iName = name;\n    }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Constructor.\n     * \n     * @param name  the name to use, which by convention, are plural.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0786
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZoneInfoProvider.ZoneInfoProvider#81",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.ZoneInfoProvider(java.lang.String)",
        "snippet": "    public ZoneInfoProvider(String resourcePath) throws IOException {\n        this(resourcePath, null, false);\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * ZoneInfoProvider searches the given ClassLoader resource path for\n     * compiled data files. Resources are loaded from the ClassLoader that\n     * loaded this class.\n     *\n     * @throws IOException if directory or map file cannot be read\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZoneInfoProvider.ZoneInfoProvider#103",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.ZoneInfoProvider(java.lang.String, java.lang.ClassLoader, boolean)",
        "snippet": "    private ZoneInfoProvider(String resourcePath,\n                             ClassLoader loader, boolean favorSystemLoader) \n        throws IOException\n    {\n        if (resourcePath == null) {\n            throw new IllegalArgumentException(\"No resource path provided\");\n        }\n        if (!resourcePath.endsWith(\"/\")) {\n            resourcePath += '/';\n        }\n\n        iFileDir = null;\n        iResourcePath = resourcePath;\n\n        if (loader == null && !favorSystemLoader) {\n            loader = getClass().getClassLoader();\n        }\n\n        iLoader = loader;\n\n        iZoneInfoMap = loadZoneInfoMap(openResource(\"ZoneInfoMap\"));\n    }\n",
        "begin_line": 103,
        "end_line": 124,
        "comment": "\n     * @param favorSystemLoader when true, use the system class loader if\n     * loader null. When false, use the current class loader if loader is null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZoneInfoProvider.getZone#135",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.getZone(java.lang.String)",
        "snippet": "    public DateTimeZone getZone(String id) {\n        if (id == null) {\n            return null;\n        }\n\n        Object obj = iZoneInfoMap.get(id);\n        if (obj == null) {\n            return null;\n        }\n\n        if (id.equals(obj)) {\n            // Load zone data for the first time.\n            return loadZoneData(id);\n        }\n\n        if (obj instanceof SoftReference<?>) {\n            @SuppressWarnings(\"unchecked\")\n            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n            DateTimeZone tz = ref.get();\n            if (tz != null) {\n                return tz;\n            }\n            // Reference cleared; load data again.\n            return loadZoneData(id);\n        }\n\n        // If this point is reached, mapping must link to another.\n        return getZone((String)obj);\n    }\n",
        "begin_line": 135,
        "end_line": 163,
        "comment": "\n     * If an error is thrown while loading zone data, uncaughtException is\n     * called to log the error and null is returned for this and all future\n     * requests.\n     * \n     * @param id  the id to load\n     * @return the loaded zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZoneInfoProvider.getAvailableIDs#170",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.getAvailableIDs()",
        "snippet": "    public Set<String> getAvailableIDs() {\n        // Return a copy of the keys rather than an umodifiable collection.\n        // This prevents ConcurrentModificationExceptions from being thrown by\n        // some JVMs if zones are opened while this set is iterated over.\n        return new TreeSet<String>(iZoneInfoMap.keySet());\n    }\n",
        "begin_line": 170,
        "end_line": 175,
        "comment": "\n     * Gets a list of all the available zone ids.\n     * \n     * @return the zone ids\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZoneInfoProvider.openResource#194",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.openResource(java.lang.String)",
        "snippet": "    private InputStream openResource(String name) throws IOException {\n        InputStream in;\n        if (iFileDir != null) {\n            in = new FileInputStream(new File(iFileDir, name));\n        } else {\n            String path = iResourcePath.concat(name);\n            if (iLoader != null) {\n                in = iLoader.getResourceAsStream(path);\n            } else {\n                in = ClassLoader.getSystemResourceAsStream(path);\n            }\n            if (in == null) {\n                StringBuilder buf = new StringBuilder(40)\n                    .append(\"Resource not found: \\\"\")\n                    .append(path)\n                    .append(\"\\\" ClassLoader: \")\n                    .append(iLoader != null ? iLoader.toString() : \"system\");\n                throw new IOException(buf.toString());\n            }\n        }\n        return in;\n    }\n",
        "begin_line": 194,
        "end_line": 215,
        "comment": "\n     * Opens a resource from file or classpath.\n     * \n     * @param name  the name to open\n     * @return the input stream\n     * @throws IOException if an error occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZoneInfoProvider.loadZoneData#223",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.loadZoneData(java.lang.String)",
        "snippet": "    private DateTimeZone loadZoneData(String id) {\n        InputStream in = null;\n        try {\n            in = openResource(id);\n            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\n            return tz;\n        } catch (IOException ex) {\n            uncaughtException(ex);\n            iZoneInfoMap.remove(id);\n            return null;\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException ex) {\n            }\n        }\n    }\n",
        "begin_line": 223,
        "end_line": 242,
        "comment": "\n     * Loads the time zone data for one id.\n     * \n     * @param id  the id to load\n     * @return the zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZoneInfoProvider.loadZoneInfoMap#251",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap(java.io.InputStream)",
        "snippet": "    private static Map<String, Object> loadZoneInfoMap(InputStream in) throws IOException {\n        Map<String, Object> map = new ConcurrentHashMap<String, Object>();\n        DataInputStream din = new DataInputStream(in);\n        try {\n            readZoneInfoMap(din, map);\n        } finally {\n            try {\n                din.close();\n            } catch (IOException ex) {\n            }\n        }\n        map.put(\"UTC\", new SoftReference<DateTimeZone>(DateTimeZone.UTC));\n        return map;\n    }\n",
        "begin_line": 251,
        "end_line": 264,
        "comment": "\n     * Loads the zone info map.\n     * \n     * @param in  the input stream\n     * @return the map\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "ZoneInfoProvider.readZoneInfoMap#272",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
        "class_name": "org.joda.time.tz.ZoneInfoProvider",
        "signature": "org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap(java.io.DataInputStream, java.util.Map<java.lang.String, java.lang.Object>)",
        "snippet": "    private static void readZoneInfoMap(DataInputStream din, Map<String, Object> zimap) throws IOException {\n        // Read the string pool.\n        int size = din.readUnsignedShort();\n        String[] pool = new String[size];\n        for (int i=0; i<size; i++) {\n            pool[i] = din.readUTF().intern();\n        }\n\n        // Read the mappings.\n        size = din.readUnsignedShort();\n        for (int i=0; i<size; i++) {\n            try {\n                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);\n            } catch (ArrayIndexOutOfBoundsException ex) {\n                throw new IOException(\"Corrupt zone info map\");\n            }\n        }\n    }\n",
        "begin_line": 272,
        "end_line": 289,
        "comment": "\n     * Reads the zone info map from file.\n     * \n     * @param din  the input stream\n     * @param zimap  gets filled with string id to string id mappings\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "FixedDateTimeZone.FixedDateTimeZone#36",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/FixedDateTimeZone.java",
        "class_name": "org.joda.time.tz.FixedDateTimeZone",
        "signature": "org.joda.time.tz.FixedDateTimeZone.FixedDateTimeZone(java.lang.String, java.lang.String, int, int)",
        "snippet": "    public FixedDateTimeZone(String id, String nameKey,\n                             int wallOffset, int standardOffset) {\n        super(id);\n        iNameKey = nameKey;\n        iWallOffset = wallOffset;\n        iStandardOffset = standardOffset;\n    }\n",
        "begin_line": 36,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "FixedDateTimeZone.equals#87",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/FixedDateTimeZone.java",
        "class_name": "org.joda.time.tz.FixedDateTimeZone",
        "signature": "org.joda.time.tz.FixedDateTimeZone.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj instanceof FixedDateTimeZone) {\n            FixedDateTimeZone other = (FixedDateTimeZone) obj;\n            return\n                getID().equals(other.getID()) &&\n                iStandardOffset == other.iStandardOffset &&\n                iWallOffset == other.iWallOffset;\n        }\n        return false;\n    }\n",
        "begin_line": 87,
        "end_line": 99,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultNameProvider.DefaultNameProvider#39",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DefaultNameProvider.java",
        "class_name": "org.joda.time.tz.DefaultNameProvider",
        "signature": "org.joda.time.tz.DefaultNameProvider.DefaultNameProvider()",
        "snippet": "    public DefaultNameProvider() {\n    }\n",
        "begin_line": 39,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultNameProvider.createCache#98",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DefaultNameProvider.java",
        "class_name": "org.joda.time.tz.DefaultNameProvider",
        "signature": "org.joda.time.tz.DefaultNameProvider.createCache()",
        "snippet": "    private HashMap createCache() {\n        return new HashMap(7);\n    }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#739",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.Recurrence.readFrom(java.io.DataInput)",
        "snippet": "        static Recurrence readFrom(DataInput in) throws IOException {\n            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n        }\n",
        "begin_line": 739,
        "end_line": 741,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.Recurrence#747",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.Recurrence.Recurrence(org.joda.time.tz.DateTimeZoneBuilder.OfYear, java.lang.String, int)",
        "snippet": "        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\n            iOfYear = ofYear;\n            iNameKey = nameKey;\n            iSaveMillis = saveMillis;\n        }\n",
        "begin_line": 747,
        "end_line": 751,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#1339",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.readFrom(java.io.DataInput, java.lang.String)",
        "snippet": "        static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n            // Read string pool.\n            int poolSize = in.readUnsignedShort();\n            String[] pool = new String[poolSize];\n            for (int i=0; i<poolSize; i++) {\n                pool[i] = in.readUTF();\n            }\n\n            int size = in.readInt();\n            long[] transitions = new long[size];\n            int[] wallOffsets = new int[size];\n            int[] standardOffsets = new int[size];\n            String[] nameKeys = new String[size];\n            \n            for (int i=0; i<size; i++) {\n                transitions[i] = readMillis(in);\n                wallOffsets[i] = (int)readMillis(in);\n                standardOffsets[i] = (int)readMillis(in);\n                try {\n                    int index;\n                    if (poolSize < 256) {\n                        index = in.readUnsignedByte();\n                    } else {\n                        index = in.readUnsignedShort();\n                    }\n                    nameKeys[i] = pool[index];\n                } catch (ArrayIndexOutOfBoundsException e) {\n                    throw new IOException(\"Invalid encoding\");\n                }\n            }\n\n            DSTZone tailZone = null;\n            if (in.readBoolean()) {\n                tailZone = DSTZone.readFrom(in, id);\n            }\n\n            return new PrecalculatedZone\n                (id, transitions, wallOffsets, standardOffsets, nameKeys, tailZone);\n        }\n",
        "begin_line": 1339,
        "end_line": 1377,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.PrecalculatedZone#1497",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone.PrecalculatedZone(java.lang.String, long[], int[], int[], java.lang.String[], org.joda.time.tz.DateTimeZoneBuilder.DSTZone)",
        "snippet": "        private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\n                          int[] standardOffsets, String[] nameKeys, DSTZone tailZone)\n        {\n            super(id);\n            iTransitions = transitions;\n            iWallOffsets = wallOffsets;\n            iStandardOffsets = standardOffsets;\n            iNameKeys = nameKeys;\n            iTailZone = tailZone;\n        }\n",
        "begin_line": 1497,
        "end_line": 1506,
        "comment": "\n         * Constructor used ONLY for valid input, loaded via static methods.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#481",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.OfYear.readFrom(java.io.DataInput)",
        "snippet": "        static OfYear readFrom(DataInput in) throws IOException {\n            return new OfYear((char)in.readUnsignedByte(),\n                              (int)in.readUnsignedByte(),\n                              (int)in.readByte(),\n                              (int)in.readUnsignedByte(),\n                              in.readBoolean(),\n                              (int)readMillis(in));\n        }\n",
        "begin_line": 481,
        "end_line": 488,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.OfYear#499",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.OfYear.OfYear(char, int, int, int, boolean, int)",
        "snippet": "        OfYear(char mode,\n               int monthOfYear,\n               int dayOfMonth,\n               int dayOfWeek, boolean advanceDayOfWeek,\n               int millisOfDay)\n        {\n            if (mode != 'u' && mode != 'w' && mode != 's') {\n                throw new IllegalArgumentException(\"Unknown mode: \" + mode);\n            }\n\n            iMode = mode;\n            iMonthOfYear = monthOfYear;\n            iDayOfMonth = dayOfMonth;\n            iDayOfWeek = dayOfWeek;\n            iAdvance = advanceDayOfWeek;\n            iMillisOfDay = millisOfDay;\n        }\n",
        "begin_line": 499,
        "end_line": 515,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#1165",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.DSTZone.readFrom(java.io.DataInput, java.lang.String)",
        "snippet": "        static DSTZone readFrom(DataInput in, String id) throws IOException {\n            return new DSTZone(id, (int)readMillis(in), \n                               Recurrence.readFrom(in), Recurrence.readFrom(in));\n        }\n",
        "begin_line": 1165,
        "end_line": 1168,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.DSTZone#1174",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.DSTZone.DSTZone(java.lang.String, int, org.joda.time.tz.DateTimeZoneBuilder.Recurrence, org.joda.time.tz.DateTimeZoneBuilder.Recurrence)",
        "snippet": "        DSTZone(String id, int standardOffset,\n                Recurrence startRecurrence, Recurrence endRecurrence) {\n            super(id);\n            iStandardOffset = standardOffset;\n            iStartRecurrence = startRecurrence;\n            iEndRecurrence = endRecurrence;\n        }\n",
        "begin_line": 1174,
        "end_line": 1180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#94",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.readFrom(java.io.InputStream, java.lang.String)",
        "snippet": "    public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\n        if (in instanceof DataInput) {\n            return readFrom((DataInput)in, id);\n        } else {\n            return readFrom((DataInput)new DataInputStream(in), id);\n        }\n    }\n",
        "begin_line": 94,
        "end_line": 100,
        "comment": "\n     * Decodes a built DateTimeZone from the given stream, as encoded by\n     * writeTo.\n     *\n     * @param in input stream to read encoded DateTimeZone from.\n     * @param id time zone id to assign\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.readFrom#109",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.readFrom(java.io.DataInput, java.lang.String)",
        "snippet": "    public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\n        switch (in.readUnsignedByte()) {\n        case 'F':\n            DateTimeZone fixed = new FixedDateTimeZone\n                (id, in.readUTF(), (int)readMillis(in), (int)readMillis(in));\n            if (fixed.equals(DateTimeZone.UTC)) {\n                fixed = DateTimeZone.UTC;\n            }\n            return fixed;\n        case 'C':\n            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n        case 'P':\n            return PrecalculatedZone.readFrom(in, id);\n        default:\n            throw new IOException(\"Invalid encoding\");\n        }\n    }\n",
        "begin_line": 109,
        "end_line": 125,
        "comment": "\n     * Decodes a built DateTimeZone from the given stream, as encoded by\n     * writeTo.\n     *\n     * @param in input stream to read encoded DateTimeZone from.\n     * @param id time zone id to assign\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZoneBuilder.readMillis#182",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "class_name": "org.joda.time.tz.DateTimeZoneBuilder",
        "signature": "org.joda.time.tz.DateTimeZoneBuilder.readMillis(java.io.DataInput)",
        "snippet": "    static long readMillis(DataInput in) throws IOException {\n        int v = in.readUnsignedByte();\n        switch (v >> 6) {\n        case 0: default:\n            // Form 00 (6 bits effective precision)\n            v = (v << (32 - 6)) >> (32 - 6);\n            return v * (30 * 60000L);\n\n        case 1:\n            // Form 01 (30 bits effective precision)\n            v = (v << (32 - 6)) >> (32 - 30);\n            v |= (in.readUnsignedByte()) << 16;\n            v |= (in.readUnsignedByte()) << 8;\n            v |= (in.readUnsignedByte());\n            return v * 60000L;\n\n        case 2:\n            // Form 10 (38 bits effective precision)\n            long w = (((long)v) << (64 - 6)) >> (64 - 38);\n            w |= (in.readUnsignedByte()) << 24;\n            w |= (in.readUnsignedByte()) << 16;\n            w |= (in.readUnsignedByte()) << 8;\n            w |= (in.readUnsignedByte());\n            return w * 1000L;\n\n        case 3:\n            // Form 11 (64 bits effective precision)\n            return in.readLong();\n        }\n    }\n",
        "begin_line": 182,
        "end_line": 211,
        "comment": "\n     * Reads encoding generated by writeMillis.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "CachedDateTimeZone.forZone#67",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/CachedDateTimeZone.java",
        "class_name": "org.joda.time.tz.CachedDateTimeZone",
        "signature": "org.joda.time.tz.CachedDateTimeZone.forZone(org.joda.time.DateTimeZone)",
        "snippet": "    public static CachedDateTimeZone forZone(DateTimeZone zone) {\n        if (zone instanceof CachedDateTimeZone) {\n            return (CachedDateTimeZone)zone;\n        }\n        return new CachedDateTimeZone(zone);\n    }\n",
        "begin_line": 67,
        "end_line": 72,
        "comment": "\n     * Returns a new CachedDateTimeZone unless given zone is already cached.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "CachedDateTimeZone.CachedDateTimeZone#86",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/tz/CachedDateTimeZone.java",
        "class_name": "org.joda.time.tz.CachedDateTimeZone",
        "signature": "org.joda.time.tz.CachedDateTimeZone.CachedDateTimeZone(org.joda.time.DateTimeZone)",
        "snippet": "    private CachedDateTimeZone(DateTimeZone zone) {\n        super(zone.getID());\n        iZone = zone;\n    }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZone.forID#202",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.forID(java.lang.String)",
        "snippet": "    @FromString\n    public static DateTimeZone forID(String id) {\n        if (id == null) {\n            return getDefault();\n        }\n        if (id.equals(\"UTC\")) {\n            return DateTimeZone.UTC;\n        }\n        DateTimeZone zone = cProvider.getZone(id);\n        if (zone != null) {\n            return zone;\n        }\n        if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n            int offset = parseOffset(id);\n            if (offset == 0L) {\n                return DateTimeZone.UTC;\n            } else {\n                id = printOffset(offset);\n                return fixedOffsetZone(id, offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");\n    }\n",
        "begin_line": 202,
        "end_line": 224,
        "comment": "\n     * Gets a time zone instance for the specified time zone id.\n     * <p>\n     * The time zone id may be one of those returned by getAvailableIDs.\n     * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n     * All IDs must be specified in the long format.\n     * The exception is UTC, which is an acceptable id.\n     * <p>\n     * Alternatively a locale independent, fixed offset, datetime zone can\n     * be specified. The form <code>[+-]hh:mm</code> can be used.\n     * \n     * @param id  the ID of the datetime zone, null means default\n     * @return the DateTimeZone object for the ID\n     * @throws IllegalArgumentException if the ID is not recognised\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZone.setProvider0#414",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.setProvider0(org.joda.time.tz.Provider)",
        "snippet": "    private static void setProvider0(Provider provider) {\n        if (provider == null) {\n            provider = getDefaultProvider();\n        }\n        Set<String> ids = provider.getAvailableIDs();\n        if (ids == null || ids.size() == 0) {\n            throw new IllegalArgumentException\n                (\"The provider doesn't have any available ids\");\n        }\n        if (!ids.contains(\"UTC\")) {\n            throw new IllegalArgumentException(\"The provider doesn't support UTC\");\n        }\n        if (!UTC.equals(provider.getZone(\"UTC\"))) {\n            throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n        }\n        cProvider = provider;\n        cAvailableIDs = ids;\n    }\n",
        "begin_line": 414,
        "end_line": 431,
        "comment": "\n     * Sets the zone provider factory without performing the security check.\n     * \n     * @param provider  provider to use, or null for default\n     * @throws IllegalArgumentException if the provider is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZone.getDefaultProvider#442",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.getDefaultProvider()",
        "snippet": "    private static Provider getDefaultProvider() {\n        Provider provider = null;\n\n        try {\n            String providerClass =\n                System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n            if (providerClass != null) {\n                try {\n                    provider = (Provider) Class.forName(providerClass).newInstance();\n                } catch (Exception ex) {\n                    Thread thread = Thread.currentThread();\n                    thread.getThreadGroup().uncaughtException(thread, ex);\n                }\n            }\n        } catch (SecurityException ex) {\n            // ignored\n        }\n\n        if (provider == null) {\n            try {\n                provider = new ZoneInfoProvider(\"org/joda/time/tz/data\");\n            } catch (Exception ex) {\n                Thread thread = Thread.currentThread();\n                thread.getThreadGroup().uncaughtException(thread, ex);\n            }\n        }\n\n        if (provider == null) {\n            provider = new UTCProvider();\n        }\n\n        return provider;\n    }\n",
        "begin_line": 442,
        "end_line": 474,
        "comment": "\n     * Gets the default zone provider.\n     * <p>\n     * Tries the system property <code>org.joda.time.DateTimeZone.Provider</code>.\n     * Then tries a <code>ZoneInfoProvider</code> using the data in <code>org/joda/time/tz/data</code>.\n     * Then uses <code>UTCProvider</code>.\n     * \n     * @return the default name provider\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZone.setNameProvider0#513",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.setNameProvider0(org.joda.time.tz.NameProvider)",
        "snippet": "    private static void setNameProvider0(NameProvider nameProvider) {\n        if (nameProvider == null) {\n            nameProvider = getDefaultNameProvider();\n        }\n        cNameProvider = nameProvider;\n    }\n",
        "begin_line": 513,
        "end_line": 518,
        "comment": "\n     * Sets the name provider factory without performing the security check.\n     * \n     * @param nameProvider  provider to use, or null for default\n     * @throws IllegalArgumentException if the provider is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZone.getDefaultNameProvider#528",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.getDefaultNameProvider()",
        "snippet": "    private static NameProvider getDefaultNameProvider() {\n        NameProvider nameProvider = null;\n        try {\n            String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");\n            if (providerClass != null) {\n                try {\n                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();\n                } catch (Exception ex) {\n                    Thread thread = Thread.currentThread();\n                    thread.getThreadGroup().uncaughtException(thread, ex);\n                }\n            }\n        } catch (SecurityException ex) {\n            // ignore\n        }\n\n        if (nameProvider == null) {\n            nameProvider = new DefaultNameProvider();\n        }\n\n        return nameProvider;\n    }\n",
        "begin_line": 528,
        "end_line": 549,
        "comment": "\n     * Gets the default name provider.\n     * <p>\n     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.\n     * Then uses <code>DefaultNameProvider</code>.\n     * \n     * @return the default name provider\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZone.DateTimeZone#689",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.DateTimeZone(java.lang.String)",
        "snippet": "    protected DateTimeZone(String id) {\n        if (id == null) {\n            throw new IllegalArgumentException(\"Id must not be null\");\n        }\n        iID = id;\n    }\n",
        "begin_line": 689,
        "end_line": 694,
        "comment": "\n     * Constructor.\n     * \n     * @param id  the id to use\n     * @throws IllegalArgumentException if the id is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTimeZone.getID#704",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/DateTimeZone.java",
        "class_name": "org.joda.time.DateTimeZone",
        "signature": "org.joda.time.DateTimeZone.getID()",
        "snippet": "    @ToString\n    public final String getID() {\n        return iID;\n    }\n",
        "begin_line": 704,
        "end_line": 707,
        "comment": "\n     * Gets the ID of this datetime zone.\n     * \n     * @return the ID of this datetime zone\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0734
        },
        "num_failing_tests": 2
    },
    {
        "name": "FieldUtils.safeAdd#81",
        "is_bug": false,
        "src_path": "src/main/java/org/joda/time/field/FieldUtils.java",
        "class_name": "org.joda.time.field.FieldUtils",
        "signature": "org.joda.time.field.FieldUtils.safeAdd(long, long)",
        "snippet": "    public static long safeAdd(long val1, long val2) {\n        long sum = val1 + val2;\n        // If there is a sign change, but the two values have the same sign...\n        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n            throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);\n        }\n        return sum;\n    }\n",
        "begin_line": 81,
        "end_line": 89,
        "comment": "\n     * Add two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0718
        },
        "num_failing_tests": 1
    }
]