[
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestDays.class);\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.TestDays(java.lang.String)",
        "snippet": "    public TestDays(String name) {\n        super(name);\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n    }\n",
        "begin_line": 48,
        "end_line": 49,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n    }\n",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testConstants()",
        "snippet": "    public void testConstants() {\n        assertEquals(0, Days.ZERO.getDays());\n        assertEquals(1, Days.ONE.getDays());\n        assertEquals(2, Days.TWO.getDays());\n        assertEquals(3, Days.THREE.getDays());\n        assertEquals(4, Days.FOUR.getDays());\n        assertEquals(5, Days.FIVE.getDays());\n        assertEquals(6, Days.SIX.getDays());\n        assertEquals(7, Days.SEVEN.getDays());\n        assertEquals(Integer.MAX_VALUE, Days.MAX_VALUE.getDays());\n        assertEquals(Integer.MIN_VALUE, Days.MIN_VALUE.getDays());\n    }\n",
        "begin_line": 55,
        "end_line": 66,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 45)",
            "(line 57,col 9)-(line 57,col 44)",
            "(line 58,col 9)-(line 58,col 44)",
            "(line 59,col 9)-(line 59,col 46)",
            "(line 60,col 9)-(line 60,col 45)",
            "(line 61,col 9)-(line 61,col 45)",
            "(line 62,col 9)-(line 62,col 44)",
            "(line 63,col 9)-(line 63,col 46)",
            "(line 64,col 9)-(line 64,col 66)",
            "(line 65,col 9)-(line 65,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testFactory_days_int()",
        "snippet": "    public void testFactory_days_int() {\n        assertSame(Days.ZERO, Days.days(0));\n        assertSame(Days.ONE, Days.days(1));\n        assertSame(Days.TWO, Days.days(2));\n        assertSame(Days.THREE, Days.days(3));\n        assertSame(Days.FOUR, Days.days(4));\n        assertSame(Days.FIVE, Days.days(5));\n        assertSame(Days.SIX, Days.days(6));\n        assertSame(Days.SEVEN, Days.days(7));\n        assertSame(Days.MAX_VALUE, Days.days(Integer.MAX_VALUE));\n        assertSame(Days.MIN_VALUE, Days.days(Integer.MIN_VALUE));\n        assertEquals(-1, Days.days(-1).getDays());\n        assertEquals(8, Days.days(8).getDays());\n    }\n",
        "begin_line": 69,
        "end_line": 82,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 44)",
            "(line 71,col 9)-(line 71,col 43)",
            "(line 72,col 9)-(line 72,col 43)",
            "(line 73,col 9)-(line 73,col 45)",
            "(line 74,col 9)-(line 74,col 44)",
            "(line 75,col 9)-(line 75,col 44)",
            "(line 76,col 9)-(line 76,col 43)",
            "(line 77,col 9)-(line 77,col 45)",
            "(line 78,col 9)-(line 78,col 65)",
            "(line 79,col 9)-(line 79,col 65)",
            "(line 80,col 9)-(line 80,col 50)",
            "(line 81,col 9)-(line 81,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testFactory_daysBetween_RInstant()",
        "snippet": "    public void testFactory_daysBetween_RInstant() {\n        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n        DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);\n        DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);\n        \n        assertEquals(3, Days.daysBetween(start, end1).getDays());\n        assertEquals(0, Days.daysBetween(start, start).getDays());\n        assertEquals(0, Days.daysBetween(end1, end1).getDays());\n        assertEquals(-3, Days.daysBetween(end1, start).getDays());\n        assertEquals(6, Days.daysBetween(start, end2).getDays());\n    }\n",
        "begin_line": 85,
        "end_line": 95,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 70)",
            "(line 87,col 9)-(line 87,col 70)",
            "(line 88,col 9)-(line 88,col 70)",
            "(line 90,col 9)-(line 90,col 65)",
            "(line 91,col 9)-(line 91,col 66)",
            "(line 92,col 9)-(line 92,col 64)",
            "(line 93,col 9)-(line 93,col 66)",
            "(line 94,col 9)-(line 94,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testFactory_daysBetween_RPartial_LocalDate()",
        "snippet": "    public void testFactory_daysBetween_RPartial_LocalDate() {\n        LocalDate start = new LocalDate(2006, 6, 9);\n        LocalDate end1 = new LocalDate(2006, 6, 12);\n        YearMonthDay end2 = new YearMonthDay(2006, 6, 15);\n        \n        assertEquals(3, Days.daysBetween(start, end1).getDays());\n        assertEquals(0, Days.daysBetween(start, start).getDays());\n        assertEquals(0, Days.daysBetween(end1, end1).getDays());\n        assertEquals(-3, Days.daysBetween(end1, start).getDays());\n        assertEquals(6, Days.daysBetween(start, end2).getDays());\n    }\n",
        "begin_line": 98,
        "end_line": 108,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 52)",
            "(line 100,col 9)-(line 100,col 52)",
            "(line 101,col 9)-(line 101,col 58)",
            "(line 103,col 9)-(line 103,col 65)",
            "(line 104,col 9)-(line 104,col 66)",
            "(line 105,col 9)-(line 105,col 64)",
            "(line 106,col 9)-(line 106,col 66)",
            "(line 107,col 9)-(line 107,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testFactory_daysBetween_RPartial_YearMonth()",
        "snippet": "    public void testFactory_daysBetween_RPartial_YearMonth() {\n        YearMonth start1 = new YearMonth(2011, 1);\n        YearMonth start2 = new YearMonth(2012, 1);\n        YearMonth end1 = new YearMonth(2011, 3);\n        YearMonth end2 = new YearMonth(2012, 3);\n        \n        assertEquals(59, Days.daysBetween(start1, end1).getDays());\n        assertEquals(60, Days.daysBetween(start2, end2).getDays());\n        \n        assertEquals(-59, Days.daysBetween(end1, start1).getDays());\n        assertEquals(-60, Days.daysBetween(end2, start2).getDays());\n    }\n",
        "begin_line": 110,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 50)",
            "(line 112,col 9)-(line 112,col 50)",
            "(line 113,col 9)-(line 113,col 48)",
            "(line 114,col 9)-(line 114,col 48)",
            "(line 116,col 9)-(line 116,col 67)",
            "(line 117,col 9)-(line 117,col 67)",
            "(line 119,col 9)-(line 119,col 68)",
            "(line 120,col 9)-(line 120,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testFactory_daysBetween_RPartial_MonthDay()",
        "snippet": "    public void testFactory_daysBetween_RPartial_MonthDay() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        assertEquals(27, Days.daysBetween(start1, end1).getDays());\n        assertEquals(28, Days.daysBetween(start1, end2).getDays());\n        assertEquals(0, Days.daysBetween(start2, end1).getDays());\n        assertEquals(1, Days.daysBetween(start2, end2).getDays());\n        \n        assertEquals(-27, Days.daysBetween(end1, start1).getDays());\n        assertEquals(-28, Days.daysBetween(end2, start1).getDays());\n        assertEquals(0, Days.daysBetween(end1, start2).getDays());\n        assertEquals(-1, Days.daysBetween(end2, start2).getDays());\n    }\n",
        "begin_line": 123,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 45)",
            "(line 125,col 9)-(line 125,col 46)",
            "(line 126,col 9)-(line 126,col 44)",
            "(line 127,col 9)-(line 127,col 44)",
            "(line 129,col 9)-(line 129,col 67)",
            "(line 130,col 9)-(line 130,col 67)",
            "(line 131,col 9)-(line 131,col 66)",
            "(line 132,col 9)-(line 132,col 66)",
            "(line 134,col 9)-(line 134,col 68)",
            "(line 135,col 9)-(line 135,col 68)",
            "(line 136,col 9)-(line 136,col 66)",
            "(line 137,col 9)-(line 137,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testFactory_daysIn_RInterval()",
        "snippet": "    public void testFactory_daysIn_RInterval() {\n        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n        DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);\n        DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);\n        \n        assertEquals(0, Days.daysIn((ReadableInterval) null).getDays());\n        assertEquals(3, Days.daysIn(new Interval(start, end1)).getDays());\n        assertEquals(0, Days.daysIn(new Interval(start, start)).getDays());\n        assertEquals(0, Days.daysIn(new Interval(end1, end1)).getDays());\n        assertEquals(6, Days.daysIn(new Interval(start, end2)).getDays());\n    }\n",
        "begin_line": 141,
        "end_line": 151,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 70)",
            "(line 143,col 9)-(line 143,col 70)",
            "(line 144,col 9)-(line 144,col 70)",
            "(line 146,col 9)-(line 146,col 72)",
            "(line 147,col 9)-(line 147,col 74)",
            "(line 148,col 9)-(line 148,col 75)",
            "(line 149,col 9)-(line 149,col 73)",
            "(line 150,col 9)-(line 150,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testFactory_standardDaysIn_RPeriod()",
        "snippet": "    public void testFactory_standardDaysIn_RPeriod() {\n        assertEquals(0, Days.standardDaysIn((ReadablePeriod) null).getDays());\n        assertEquals(0, Days.standardDaysIn(Period.ZERO).getDays());\n        assertEquals(1, Days.standardDaysIn(new Period(0, 0, 0, 1, 0, 0, 0, 0)).getDays());\n        assertEquals(123, Days.standardDaysIn(Period.days(123)).getDays());\n        assertEquals(-987, Days.standardDaysIn(Period.days(-987)).getDays());\n        assertEquals(1, Days.standardDaysIn(Period.hours(47)).getDays());\n        assertEquals(2, Days.standardDaysIn(Period.hours(48)).getDays());\n        assertEquals(2, Days.standardDaysIn(Period.hours(49)).getDays());\n        assertEquals(14, Days.standardDaysIn(Period.weeks(2)).getDays());\n        try {\n            Days.standardDaysIn(Period.months(1));\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expeceted\n        }\n    }\n",
        "begin_line": 154,
        "end_line": 170,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 78)",
            "(line 156,col 9)-(line 156,col 68)",
            "(line 157,col 9)-(line 157,col 91)",
            "(line 158,col 9)-(line 158,col 75)",
            "(line 159,col 9)-(line 159,col 77)",
            "(line 160,col 9)-(line 160,col 73)",
            "(line 161,col 9)-(line 161,col 73)",
            "(line 162,col 9)-(line 162,col 73)",
            "(line 163,col 9)-(line 163,col 73)",
            "(line 164,col 9)-(line 169,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testFactory_parseDays_String()",
        "snippet": "    public void testFactory_parseDays_String() {\n        assertEquals(0, Days.parseDays((String) null).getDays());\n        assertEquals(0, Days.parseDays(\"P0D\").getDays());\n        assertEquals(1, Days.parseDays(\"P1D\").getDays());\n        assertEquals(-3, Days.parseDays(\"P-3D\").getDays());\n        assertEquals(2, Days.parseDays(\"P0Y0M2D\").getDays());\n        assertEquals(2, Days.parseDays(\"P2DT0H0M\").getDays());\n        try {\n            Days.parseDays(\"P1Y1D\");\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expeceted\n        }\n        try {\n            Days.parseDays(\"P1DT1H\");\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expeceted\n        }\n    }\n",
        "begin_line": 172,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 65)",
            "(line 174,col 9)-(line 174,col 57)",
            "(line 175,col 9)-(line 175,col 57)",
            "(line 176,col 9)-(line 176,col 59)",
            "(line 177,col 9)-(line 177,col 61)",
            "(line 178,col 9)-(line 178,col 62)",
            "(line 179,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 190,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testGetMethods()",
        "snippet": "    public void testGetMethods() {\n        Days test = Days.days(20);\n        assertEquals(20, test.getDays());\n    }\n",
        "begin_line": 194,
        "end_line": 197,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 34)",
            "(line 196,col 9)-(line 196,col 41)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testGetFieldType()",
        "snippet": "    public void testGetFieldType() {\n        Days test = Days.days(20);\n        assertEquals(DurationFieldType.days(), test.getFieldType());\n    }\n",
        "begin_line": 199,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 34)",
            "(line 201,col 9)-(line 201,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testGetPeriodType()",
        "snippet": "    public void testGetPeriodType() {\n        Days test = Days.days(20);\n        assertEquals(PeriodType.days(), test.getPeriodType());\n    }\n",
        "begin_line": 204,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 34)",
            "(line 206,col 9)-(line 206,col 62)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testIsGreaterThan()",
        "snippet": "    public void testIsGreaterThan() {\n        assertEquals(true, Days.THREE.isGreaterThan(Days.TWO));\n        assertEquals(false, Days.THREE.isGreaterThan(Days.THREE));\n        assertEquals(false, Days.TWO.isGreaterThan(Days.THREE));\n        assertEquals(true, Days.ONE.isGreaterThan(null));\n        assertEquals(false, Days.days(-1).isGreaterThan(null));\n    }\n",
        "begin_line": 210,
        "end_line": 216,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 63)",
            "(line 212,col 9)-(line 212,col 66)",
            "(line 213,col 9)-(line 213,col 64)",
            "(line 214,col 9)-(line 214,col 57)",
            "(line 215,col 9)-(line 215,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testIsLessThan()",
        "snippet": "    public void testIsLessThan() {\n        assertEquals(false, Days.THREE.isLessThan(Days.TWO));\n        assertEquals(false, Days.THREE.isLessThan(Days.THREE));\n        assertEquals(true, Days.TWO.isLessThan(Days.THREE));\n        assertEquals(false, Days.ONE.isLessThan(null));\n        assertEquals(true, Days.days(-1).isLessThan(null));\n    }\n",
        "begin_line": 218,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 61)",
            "(line 220,col 9)-(line 220,col 63)",
            "(line 221,col 9)-(line 221,col 60)",
            "(line 222,col 9)-(line 222,col 55)",
            "(line 223,col 9)-(line 223,col 59)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testToString()",
        "snippet": "    public void testToString() {\n        Days test = Days.days(20);\n        assertEquals(\"P20D\", test.toString());\n        \n        test = Days.days(-20);\n        assertEquals(\"P-20D\", test.toString());\n    }\n",
        "begin_line": 227,
        "end_line": 233,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 34)",
            "(line 229,col 9)-(line 229,col 46)",
            "(line 231,col 9)-(line 231,col 30)",
            "(line 232,col 9)-(line 232,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testSerialization()",
        "snippet": "    public void testSerialization() throws Exception {\n        Days test = Days.SEVEN;\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(test);\n        byte[] bytes = baos.toByteArray();\n        oos.close();\n        \n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        Days result = (Days) ois.readObject();\n        ois.close();\n        \n        assertSame(test, result);\n    }\n",
        "begin_line": 236,
        "end_line": 251,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 31)",
            "(line 239,col 9)-(line 239,col 65)",
            "(line 240,col 9)-(line 240,col 62)",
            "(line 241,col 9)-(line 241,col 30)",
            "(line 242,col 9)-(line 242,col 42)",
            "(line 243,col 9)-(line 243,col 20)",
            "(line 245,col 9)-(line 245,col 68)",
            "(line 246,col 9)-(line 246,col 60)",
            "(line 247,col 9)-(line 247,col 46)",
            "(line 248,col 9)-(line 248,col 20)",
            "(line 250,col 9)-(line 250,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testToStandardWeeks()",
        "snippet": "    public void testToStandardWeeks() {\n        Days test = Days.days(14);\n        Weeks expected = Weeks.weeks(2);\n        assertEquals(expected, test.toStandardWeeks());\n    }\n",
        "begin_line": 254,
        "end_line": 258,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 34)",
            "(line 256,col 9)-(line 256,col 40)",
            "(line 257,col 9)-(line 257,col 55)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testToStandardHours()",
        "snippet": "    public void testToStandardHours() {\n        Days test = Days.days(2);\n        Hours expected = Hours.hours(2 * 24);\n        assertEquals(expected, test.toStandardHours());\n        \n        try {\n            Days.MAX_VALUE.toStandardHours();\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 260,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 33)",
            "(line 262,col 9)-(line 262,col 45)",
            "(line 263,col 9)-(line 263,col 55)",
            "(line 265,col 9)-(line 270,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testToStandardMinutes()",
        "snippet": "    public void testToStandardMinutes() {\n        Days test = Days.days(2);\n        Minutes expected = Minutes.minutes(2 * 24 * 60);\n        assertEquals(expected, test.toStandardMinutes());\n        \n        try {\n            Days.MAX_VALUE.toStandardMinutes();\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 273,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 33)",
            "(line 275,col 9)-(line 275,col 56)",
            "(line 276,col 9)-(line 276,col 57)",
            "(line 278,col 9)-(line 283,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testToStandardSeconds()",
        "snippet": "    public void testToStandardSeconds() {\n        Days test = Days.days(2);\n        Seconds expected = Seconds.seconds(2 * 24 * 60 * 60);\n        assertEquals(expected, test.toStandardSeconds());\n        \n        try {\n            Days.MAX_VALUE.toStandardSeconds();\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 286,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 33)",
            "(line 288,col 9)-(line 288,col 61)",
            "(line 289,col 9)-(line 289,col 57)",
            "(line 291,col 9)-(line 296,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testToStandardDuration()",
        "snippet": "    public void testToStandardDuration() {\n        Days test = Days.days(20);\n        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_DAY);\n        assertEquals(expected, test.toStandardDuration());\n        \n        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_DAY);\n        assertEquals(expected, Days.MAX_VALUE.toStandardDuration());\n    }\n",
        "begin_line": 299,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 34)",
            "(line 301,col 9)-(line 301,col 81)",
            "(line 302,col 9)-(line 302,col 58)",
            "(line 304,col 9)-(line 304,col 95)",
            "(line 305,col 9)-(line 305,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testPlus_int()",
        "snippet": "    public void testPlus_int() {\n        Days test2 = Days.days(2);\n        Days result = test2.plus(3);\n        assertEquals(2, test2.getDays());\n        assertEquals(5, result.getDays());\n        \n        assertEquals(1, Days.ONE.plus(0).getDays());\n        \n        try {\n            Days.MAX_VALUE.plus(1);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 309,
        "end_line": 323,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 34)",
            "(line 311,col 9)-(line 311,col 36)",
            "(line 312,col 9)-(line 312,col 41)",
            "(line 313,col 9)-(line 313,col 42)",
            "(line 315,col 9)-(line 315,col 52)",
            "(line 317,col 9)-(line 322,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testPlus_Days()",
        "snippet": "    public void testPlus_Days() {\n        Days test2 = Days.days(2);\n        Days test3 = Days.days(3);\n        Days result = test2.plus(test3);\n        assertEquals(2, test2.getDays());\n        assertEquals(3, test3.getDays());\n        assertEquals(5, result.getDays());\n        \n        assertEquals(1, Days.ONE.plus(Days.ZERO).getDays());\n        assertEquals(1, Days.ONE.plus((Days) null).getDays());\n        \n        try {\n            Days.MAX_VALUE.plus(Days.ONE);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 325,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 34)",
            "(line 327,col 9)-(line 327,col 34)",
            "(line 328,col 9)-(line 328,col 40)",
            "(line 329,col 9)-(line 329,col 41)",
            "(line 330,col 9)-(line 330,col 41)",
            "(line 331,col 9)-(line 331,col 42)",
            "(line 333,col 9)-(line 333,col 60)",
            "(line 334,col 9)-(line 334,col 62)",
            "(line 336,col 9)-(line 341,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testMinus_int()",
        "snippet": "    public void testMinus_int() {\n        Days test2 = Days.days(2);\n        Days result = test2.minus(3);\n        assertEquals(2, test2.getDays());\n        assertEquals(-1, result.getDays());\n        \n        assertEquals(1, Days.ONE.minus(0).getDays());\n        \n        try {\n            Days.MIN_VALUE.minus(1);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 344,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 34)",
            "(line 346,col 9)-(line 346,col 37)",
            "(line 347,col 9)-(line 347,col 41)",
            "(line 348,col 9)-(line 348,col 43)",
            "(line 350,col 9)-(line 350,col 53)",
            "(line 352,col 9)-(line 357,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testMinus_Days()",
        "snippet": "    public void testMinus_Days() {\n        Days test2 = Days.days(2);\n        Days test3 = Days.days(3);\n        Days result = test2.minus(test3);\n        assertEquals(2, test2.getDays());\n        assertEquals(3, test3.getDays());\n        assertEquals(-1, result.getDays());\n        \n        assertEquals(1, Days.ONE.minus(Days.ZERO).getDays());\n        assertEquals(1, Days.ONE.minus((Days) null).getDays());\n        \n        try {\n            Days.MIN_VALUE.minus(Days.ONE);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 360,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 361,col 9)-(line 361,col 34)",
            "(line 362,col 9)-(line 362,col 34)",
            "(line 363,col 9)-(line 363,col 41)",
            "(line 364,col 9)-(line 364,col 41)",
            "(line 365,col 9)-(line 365,col 41)",
            "(line 366,col 9)-(line 366,col 43)",
            "(line 368,col 9)-(line 368,col 61)",
            "(line 369,col 9)-(line 369,col 63)",
            "(line 371,col 9)-(line 376,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testMultipliedBy_int()",
        "snippet": "    public void testMultipliedBy_int() {\n        Days test = Days.days(2);\n        assertEquals(6, test.multipliedBy(3).getDays());\n        assertEquals(2, test.getDays());\n        assertEquals(-6, test.multipliedBy(-3).getDays());\n        assertSame(test, test.multipliedBy(1));\n        \n        Days halfMax = Days.days(Integer.MAX_VALUE / 2 + 1);\n        try {\n            halfMax.multipliedBy(2);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 379,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 33)",
            "(line 381,col 9)-(line 381,col 56)",
            "(line 382,col 9)-(line 382,col 40)",
            "(line 383,col 9)-(line 383,col 58)",
            "(line 384,col 9)-(line 384,col 47)",
            "(line 386,col 9)-(line 386,col 60)",
            "(line 387,col 9)-(line 392,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testDividedBy_int()",
        "snippet": "    public void testDividedBy_int() {\n        Days test = Days.days(12);\n        assertEquals(6, test.dividedBy(2).getDays());\n        assertEquals(12, test.getDays());\n        assertEquals(4, test.dividedBy(3).getDays());\n        assertEquals(3, test.dividedBy(4).getDays());\n        assertEquals(2, test.dividedBy(5).getDays());\n        assertEquals(2, test.dividedBy(6).getDays());\n        assertSame(test, test.dividedBy(1));\n        \n        try {\n            Days.ONE.dividedBy(0);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 395,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 34)",
            "(line 397,col 9)-(line 397,col 53)",
            "(line 398,col 9)-(line 398,col 41)",
            "(line 399,col 9)-(line 399,col 53)",
            "(line 400,col 9)-(line 400,col 53)",
            "(line 401,col 9)-(line 401,col 53)",
            "(line 402,col 9)-(line 402,col 53)",
            "(line 403,col 9)-(line 403,col 44)",
            "(line 405,col 9)-(line 410,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testNegated()",
        "snippet": "    public void testNegated() {\n        Days test = Days.days(12);\n        assertEquals(-12, test.negated().getDays());\n        assertEquals(12, test.getDays());\n        \n        try {\n            Days.MIN_VALUE.negated();\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 413,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 414,col 9)-(line 414,col 34)",
            "(line 415,col 9)-(line 415,col 52)",
            "(line 416,col 9)-(line 416,col 41)",
            "(line 418,col 9)-(line 423,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDays",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDays.java",
        "signature": "org.joda.time.TestDays.testAddToLocalDate()",
        "snippet": "    public void testAddToLocalDate() {\n        Days test = Days.days(20);\n        LocalDate date = new LocalDate(2006, 6, 1);\n        LocalDate expected = new LocalDate(2006, 6, 21);\n        assertEquals(expected, date.plus(test));\n    }\n",
        "begin_line": 427,
        "end_line": 432,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 428,col 9)-(line 428,col 34)",
            "(line 429,col 9)-(line 429,col 51)",
            "(line 430,col 9)-(line 430,col 56)",
            "(line 431,col 9)-(line 431,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestMonths.class);\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.TestMonths(java.lang.String)",
        "snippet": "    public TestMonths(String name) {\n        super(name);\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n    }\n",
        "begin_line": 48,
        "end_line": 49,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n    }\n",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testConstants()",
        "snippet": "    public void testConstants() {\n        assertEquals(0, Months.ZERO.getMonths());\n        assertEquals(1, Months.ONE.getMonths());\n        assertEquals(2, Months.TWO.getMonths());\n        assertEquals(3, Months.THREE.getMonths());\n        assertEquals(4, Months.FOUR.getMonths());\n        assertEquals(5, Months.FIVE.getMonths());\n        assertEquals(6, Months.SIX.getMonths());\n        assertEquals(7, Months.SEVEN.getMonths());\n        assertEquals(8, Months.EIGHT.getMonths());\n        assertEquals(9, Months.NINE.getMonths());\n        assertEquals(10, Months.TEN.getMonths());\n        assertEquals(11, Months.ELEVEN.getMonths());\n        assertEquals(12, Months.TWELVE.getMonths());\n        assertEquals(Integer.MAX_VALUE, Months.MAX_VALUE.getMonths());\n        assertEquals(Integer.MIN_VALUE, Months.MIN_VALUE.getMonths());\n    }\n",
        "begin_line": 55,
        "end_line": 71,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 49)",
            "(line 57,col 9)-(line 57,col 48)",
            "(line 58,col 9)-(line 58,col 48)",
            "(line 59,col 9)-(line 59,col 50)",
            "(line 60,col 9)-(line 60,col 49)",
            "(line 61,col 9)-(line 61,col 49)",
            "(line 62,col 9)-(line 62,col 48)",
            "(line 63,col 9)-(line 63,col 50)",
            "(line 64,col 9)-(line 64,col 50)",
            "(line 65,col 9)-(line 65,col 49)",
            "(line 66,col 9)-(line 66,col 49)",
            "(line 67,col 9)-(line 67,col 52)",
            "(line 68,col 9)-(line 68,col 52)",
            "(line 69,col 9)-(line 69,col 70)",
            "(line 70,col 9)-(line 70,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testFactory_months_int()",
        "snippet": "    public void testFactory_months_int() {\n        assertSame(Months.ZERO, Months.months(0));\n        assertSame(Months.ONE, Months.months(1));\n        assertSame(Months.TWO, Months.months(2));\n        assertSame(Months.THREE, Months.months(3));\n        assertSame(Months.FOUR, Months.months(4));\n        assertSame(Months.FIVE, Months.months(5));\n        assertSame(Months.SIX, Months.months(6));\n        assertSame(Months.SEVEN, Months.months(7));\n        assertSame(Months.EIGHT, Months.months(8));\n        assertSame(Months.NINE, Months.months(9));\n        assertSame(Months.TEN, Months.months(10));\n        assertSame(Months.ELEVEN, Months.months(11));\n        assertSame(Months.TWELVE, Months.months(12));\n        assertSame(Months.MAX_VALUE, Months.months(Integer.MAX_VALUE));\n        assertSame(Months.MIN_VALUE, Months.months(Integer.MIN_VALUE));\n        assertEquals(-1, Months.months(-1).getMonths());\n        assertEquals(13, Months.months(13).getMonths());\n    }\n",
        "begin_line": 74,
        "end_line": 92,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 50)",
            "(line 76,col 9)-(line 76,col 49)",
            "(line 77,col 9)-(line 77,col 49)",
            "(line 78,col 9)-(line 78,col 51)",
            "(line 79,col 9)-(line 79,col 50)",
            "(line 80,col 9)-(line 80,col 50)",
            "(line 81,col 9)-(line 81,col 49)",
            "(line 82,col 9)-(line 82,col 51)",
            "(line 83,col 9)-(line 83,col 51)",
            "(line 84,col 9)-(line 84,col 50)",
            "(line 85,col 9)-(line 85,col 50)",
            "(line 86,col 9)-(line 86,col 53)",
            "(line 87,col 9)-(line 87,col 53)",
            "(line 88,col 9)-(line 88,col 71)",
            "(line 89,col 9)-(line 89,col 71)",
            "(line 90,col 9)-(line 90,col 56)",
            "(line 91,col 9)-(line 91,col 56)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testFactory_monthsBetween_RInstant()",
        "snippet": "    public void testFactory_monthsBetween_RInstant() {\n        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n        DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS);\n        DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS);\n        \n        assertEquals(3, Months.monthsBetween(start, end1).getMonths());\n        assertEquals(0, Months.monthsBetween(start, start).getMonths());\n        assertEquals(0, Months.monthsBetween(end1, end1).getMonths());\n        assertEquals(-3, Months.monthsBetween(end1, start).getMonths());\n        assertEquals(6, Months.monthsBetween(start, end2).getMonths());\n    }\n",
        "begin_line": 95,
        "end_line": 105,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 70)",
            "(line 97,col 9)-(line 97,col 69)",
            "(line 98,col 9)-(line 98,col 70)",
            "(line 100,col 9)-(line 100,col 71)",
            "(line 101,col 9)-(line 101,col 72)",
            "(line 102,col 9)-(line 102,col 70)",
            "(line 103,col 9)-(line 103,col 72)",
            "(line 104,col 9)-(line 104,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_LocalDate()",
        "snippet": "    public void testFactory_monthsBetween_RPartial_LocalDate() {\n        LocalDate start = new LocalDate(2006, 6, 9);\n        LocalDate end1 = new LocalDate(2006, 9, 9);\n        YearMonthDay end2 = new YearMonthDay(2006, 12, 9);\n        \n        assertEquals(3, Months.monthsBetween(start, end1).getMonths());\n        assertEquals(0, Months.monthsBetween(start, start).getMonths());\n        assertEquals(0, Months.monthsBetween(end1, end1).getMonths());\n        assertEquals(-3, Months.monthsBetween(end1, start).getMonths());\n        assertEquals(6, Months.monthsBetween(start, end2).getMonths());\n    }\n",
        "begin_line": 108,
        "end_line": 118,
        "comment": "-------------------------------------------------------------------------",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 52)",
            "(line 110,col 9)-(line 110,col 51)",
            "(line 111,col 9)-(line 111,col 58)",
            "(line 113,col 9)-(line 113,col 71)",
            "(line 114,col 9)-(line 114,col 72)",
            "(line 115,col 9)-(line 115,col 70)",
            "(line 116,col 9)-(line 116,col 72)",
            "(line 117,col 9)-(line 117,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_YearMonth()",
        "snippet": "    public void testFactory_monthsBetween_RPartial_YearMonth() {\n        YearMonth start1 = new YearMonth(2011, 1);\n        for (int i = 0; i < 6; i++) {\n            YearMonth start2 = new YearMonth(2011 + i, 1);\n            YearMonth end = new YearMonth(2011 + i, 3);\n            assertEquals(i * 12 + 2, Months.monthsBetween(start1, end).getMonths());\n            assertEquals(2, Months.monthsBetween(start2, end).getMonths());\n        }\n    }\n",
        "begin_line": 120,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 50)",
            "(line 122,col 9)-(line 127,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay()",
        "snippet": "    public void testFactory_monthsBetween_RPartial_MonthDay() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        assertEquals(0, Months.monthsBetween(start, end1).getMonths());\n        assertEquals(0, Months.monthsBetween(start, end2).getMonths());\n        assertEquals(1, Months.monthsBetween(start, end3).getMonths());\n        \n        assertEquals(0, Months.monthsBetween(end1, start).getMonths());\n        assertEquals(0, Months.monthsBetween(end2, start).getMonths());\n        assertEquals(-1, Months.monthsBetween(end3, start).getMonths());\n    }\n",
        "begin_line": 130,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 44)",
            "(line 132,col 9)-(line 132,col 44)",
            "(line 133,col 9)-(line 133,col 44)",
            "(line 134,col 9)-(line 134,col 43)",
            "(line 136,col 9)-(line 136,col 71)",
            "(line 137,col 9)-(line 137,col 71)",
            "(line 138,col 9)-(line 138,col 71)",
            "(line 140,col 9)-(line 140,col 71)",
            "(line 141,col 9)-(line 141,col 71)",
            "(line 142,col 9)-(line 142,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testFactory_monthsIn_RInterval()",
        "snippet": "    public void testFactory_monthsIn_RInterval() {\n        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n        DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS);\n        DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS);\n        \n        assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths());\n        assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths());\n        assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths());\n        assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths());\n        assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths());\n    }\n",
        "begin_line": 146,
        "end_line": 156,
        "comment": "-------------------------------------------------------------------------",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 70)",
            "(line 148,col 9)-(line 148,col 69)",
            "(line 149,col 9)-(line 149,col 70)",
            "(line 151,col 9)-(line 151,col 78)",
            "(line 152,col 9)-(line 152,col 80)",
            "(line 153,col 9)-(line 153,col 81)",
            "(line 154,col 9)-(line 154,col 79)",
            "(line 155,col 9)-(line 155,col 80)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testFactory_parseMonths_String()",
        "snippet": "    public void testFactory_parseMonths_String() {\n        assertEquals(0, Months.parseMonths((String) null).getMonths());\n        assertEquals(0, Months.parseMonths(\"P0M\").getMonths());\n        assertEquals(1, Months.parseMonths(\"P1M\").getMonths());\n        assertEquals(-3, Months.parseMonths(\"P-3M\").getMonths());\n        assertEquals(2, Months.parseMonths(\"P0Y2M\").getMonths());\n        assertEquals(2, Months.parseMonths(\"P2MT0H0M\").getMonths());\n        try {\n            Months.parseMonths(\"P1Y1D\");\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expeceted\n        }\n        try {\n            Months.parseMonths(\"P1MT1H\");\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expeceted\n        }\n    }\n",
        "begin_line": 158,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 71)",
            "(line 160,col 9)-(line 160,col 63)",
            "(line 161,col 9)-(line 161,col 63)",
            "(line 162,col 9)-(line 162,col 65)",
            "(line 163,col 9)-(line 163,col 65)",
            "(line 164,col 9)-(line 164,col 68)",
            "(line 165,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 176,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testGetMethods()",
        "snippet": "    public void testGetMethods() {\n        Months test = Months.months(20);\n        assertEquals(20, test.getMonths());\n    }\n",
        "begin_line": 180,
        "end_line": 183,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 40)",
            "(line 182,col 9)-(line 182,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testGetFieldType()",
        "snippet": "    public void testGetFieldType() {\n        Months test = Months.months(20);\n        assertEquals(DurationFieldType.months(), test.getFieldType());\n    }\n",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 40)",
            "(line 187,col 9)-(line 187,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testGetPeriodType()",
        "snippet": "    public void testGetPeriodType() {\n        Months test = Months.months(20);\n        assertEquals(PeriodType.months(), test.getPeriodType());\n    }\n",
        "begin_line": 190,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 40)",
            "(line 192,col 9)-(line 192,col 64)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testIsGreaterThan()",
        "snippet": "    public void testIsGreaterThan() {\n        assertEquals(true, Months.THREE.isGreaterThan(Months.TWO));\n        assertEquals(false, Months.THREE.isGreaterThan(Months.THREE));\n        assertEquals(false, Months.TWO.isGreaterThan(Months.THREE));\n        assertEquals(true, Months.ONE.isGreaterThan(null));\n        assertEquals(false, Months.months(-1).isGreaterThan(null));\n    }\n",
        "begin_line": 196,
        "end_line": 202,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 67)",
            "(line 198,col 9)-(line 198,col 70)",
            "(line 199,col 9)-(line 199,col 68)",
            "(line 200,col 9)-(line 200,col 59)",
            "(line 201,col 9)-(line 201,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testIsLessThan()",
        "snippet": "    public void testIsLessThan() {\n        assertEquals(false, Months.THREE.isLessThan(Months.TWO));\n        assertEquals(false, Months.THREE.isLessThan(Months.THREE));\n        assertEquals(true, Months.TWO.isLessThan(Months.THREE));\n        assertEquals(false, Months.ONE.isLessThan(null));\n        assertEquals(true, Months.months(-1).isLessThan(null));\n    }\n",
        "begin_line": 204,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 65)",
            "(line 206,col 9)-(line 206,col 67)",
            "(line 207,col 9)-(line 207,col 64)",
            "(line 208,col 9)-(line 208,col 57)",
            "(line 209,col 9)-(line 209,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testToString()",
        "snippet": "    public void testToString() {\n        Months test = Months.months(20);\n        assertEquals(\"P20M\", test.toString());\n        \n        test = Months.months(-20);\n        assertEquals(\"P-20M\", test.toString());\n    }\n",
        "begin_line": 213,
        "end_line": 219,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 40)",
            "(line 215,col 9)-(line 215,col 46)",
            "(line 217,col 9)-(line 217,col 34)",
            "(line 218,col 9)-(line 218,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testSerialization()",
        "snippet": "    public void testSerialization() throws Exception {\n        Months test = Months.THREE;\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(test);\n        byte[] bytes = baos.toByteArray();\n        oos.close();\n        \n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        Months result = (Months) ois.readObject();\n        ois.close();\n        \n        assertSame(test, result);\n    }\n",
        "begin_line": 222,
        "end_line": 237,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 35)",
            "(line 225,col 9)-(line 225,col 65)",
            "(line 226,col 9)-(line 226,col 62)",
            "(line 227,col 9)-(line 227,col 30)",
            "(line 228,col 9)-(line 228,col 42)",
            "(line 229,col 9)-(line 229,col 20)",
            "(line 231,col 9)-(line 231,col 68)",
            "(line 232,col 9)-(line 232,col 60)",
            "(line 233,col 9)-(line 233,col 50)",
            "(line 234,col 9)-(line 234,col 20)",
            "(line 236,col 9)-(line 236,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testPlus_int()",
        "snippet": "    public void testPlus_int() {\n        Months test2 = Months.months(2);\n        Months result = test2.plus(3);\n        assertEquals(2, test2.getMonths());\n        assertEquals(5, result.getMonths());\n        \n        assertEquals(1, Months.ONE.plus(0).getMonths());\n        \n        try {\n            Months.MAX_VALUE.plus(1);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 240,
        "end_line": 254,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 40)",
            "(line 242,col 9)-(line 242,col 38)",
            "(line 243,col 9)-(line 243,col 43)",
            "(line 244,col 9)-(line 244,col 44)",
            "(line 246,col 9)-(line 246,col 56)",
            "(line 248,col 9)-(line 253,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testPlus_Months()",
        "snippet": "    public void testPlus_Months() {\n        Months test2 = Months.months(2);\n        Months test3 = Months.months(3);\n        Months result = test2.plus(test3);\n        assertEquals(2, test2.getMonths());\n        assertEquals(3, test3.getMonths());\n        assertEquals(5, result.getMonths());\n        \n        assertEquals(1, Months.ONE.plus(Months.ZERO).getMonths());\n        assertEquals(1, Months.ONE.plus((Months) null).getMonths());\n        \n        try {\n            Months.MAX_VALUE.plus(Months.ONE);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 256,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 40)",
            "(line 258,col 9)-(line 258,col 40)",
            "(line 259,col 9)-(line 259,col 42)",
            "(line 260,col 9)-(line 260,col 43)",
            "(line 261,col 9)-(line 261,col 43)",
            "(line 262,col 9)-(line 262,col 44)",
            "(line 264,col 9)-(line 264,col 66)",
            "(line 265,col 9)-(line 265,col 68)",
            "(line 267,col 9)-(line 272,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testMinus_int()",
        "snippet": "    public void testMinus_int() {\n        Months test2 = Months.months(2);\n        Months result = test2.minus(3);\n        assertEquals(2, test2.getMonths());\n        assertEquals(-1, result.getMonths());\n        \n        assertEquals(1, Months.ONE.minus(0).getMonths());\n        \n        try {\n            Months.MIN_VALUE.minus(1);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 275,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 40)",
            "(line 277,col 9)-(line 277,col 39)",
            "(line 278,col 9)-(line 278,col 43)",
            "(line 279,col 9)-(line 279,col 45)",
            "(line 281,col 9)-(line 281,col 57)",
            "(line 283,col 9)-(line 288,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testMinus_Months()",
        "snippet": "    public void testMinus_Months() {\n        Months test2 = Months.months(2);\n        Months test3 = Months.months(3);\n        Months result = test2.minus(test3);\n        assertEquals(2, test2.getMonths());\n        assertEquals(3, test3.getMonths());\n        assertEquals(-1, result.getMonths());\n        \n        assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths());\n        assertEquals(1, Months.ONE.minus((Months) null).getMonths());\n        \n        try {\n            Months.MIN_VALUE.minus(Months.ONE);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 291,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 40)",
            "(line 293,col 9)-(line 293,col 40)",
            "(line 294,col 9)-(line 294,col 43)",
            "(line 295,col 9)-(line 295,col 43)",
            "(line 296,col 9)-(line 296,col 43)",
            "(line 297,col 9)-(line 297,col 45)",
            "(line 299,col 9)-(line 299,col 67)",
            "(line 300,col 9)-(line 300,col 69)",
            "(line 302,col 9)-(line 307,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testMultipliedBy_int()",
        "snippet": "    public void testMultipliedBy_int() {\n        Months test = Months.months(2);\n        assertEquals(6, test.multipliedBy(3).getMonths());\n        assertEquals(2, test.getMonths());\n        assertEquals(-6, test.multipliedBy(-3).getMonths());\n        assertSame(test, test.multipliedBy(1));\n        \n        Months halfMax = Months.months(Integer.MAX_VALUE / 2 + 1);\n        try {\n            halfMax.multipliedBy(2);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 310,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 39)",
            "(line 312,col 9)-(line 312,col 58)",
            "(line 313,col 9)-(line 313,col 42)",
            "(line 314,col 9)-(line 314,col 60)",
            "(line 315,col 9)-(line 315,col 47)",
            "(line 317,col 9)-(line 317,col 66)",
            "(line 318,col 9)-(line 323,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testDividedBy_int()",
        "snippet": "    public void testDividedBy_int() {\n        Months test = Months.months(12);\n        assertEquals(6, test.dividedBy(2).getMonths());\n        assertEquals(12, test.getMonths());\n        assertEquals(4, test.dividedBy(3).getMonths());\n        assertEquals(3, test.dividedBy(4).getMonths());\n        assertEquals(2, test.dividedBy(5).getMonths());\n        assertEquals(2, test.dividedBy(6).getMonths());\n        assertSame(test, test.dividedBy(1));\n        \n        try {\n            Months.ONE.dividedBy(0);\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 326,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 40)",
            "(line 328,col 9)-(line 328,col 55)",
            "(line 329,col 9)-(line 329,col 43)",
            "(line 330,col 9)-(line 330,col 55)",
            "(line 331,col 9)-(line 331,col 55)",
            "(line 332,col 9)-(line 332,col 55)",
            "(line 333,col 9)-(line 333,col 55)",
            "(line 334,col 9)-(line 334,col 44)",
            "(line 336,col 9)-(line 341,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testNegated()",
        "snippet": "    public void testNegated() {\n        Months test = Months.months(12);\n        assertEquals(-12, test.negated().getMonths());\n        assertEquals(12, test.getMonths());\n        \n        try {\n            Months.MIN_VALUE.negated();\n            fail();\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 344,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 40)",
            "(line 346,col 9)-(line 346,col 54)",
            "(line 347,col 9)-(line 347,col 43)",
            "(line 349,col 9)-(line 354,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMonths",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMonths.java",
        "signature": "org.joda.time.TestMonths.testAddToLocalDate()",
        "snippet": "    public void testAddToLocalDate() {\n        Months test = Months.months(3);\n        LocalDate date = new LocalDate(2006, 6, 1);\n        LocalDate expected = new LocalDate(2006, 9, 1);\n        assertEquals(expected, date.plus(test));\n    }\n",
        "begin_line": 358,
        "end_line": 363,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 39)",
            "(line 360,col 9)-(line 360,col 51)",
            "(line 361,col 9)-(line 361,col 55)",
            "(line 362,col 9)-(line 362,col 48)"
        ]
    }
]