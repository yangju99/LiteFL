[
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(KeyedObjects2DTests.class);\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.KeyedObjects2DTests(java.lang.String)",
        "snippet": "    public KeyedObjects2DTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testEquals()",
        "snippet": "    public void testEquals() {\n        KeyedObjects2D k1 = new KeyedObjects2D();\n        KeyedObjects2D k2 = new KeyedObjects2D();\n        assertTrue(k1.equals(k2));\n        assertTrue(k2.equals(k1));\n        \n        k1.addObject(new Integer(99), \"R1\", \"C1\");\n        assertFalse(k1.equals(k2));\n        k2.addObject(new Integer(99), \"R1\", \"C1\");\n        assertTrue(k1.equals(k2)); \n    }\n",
        "begin_line": 85,
        "end_line": 95,
        "comment": "\n     * Some checks for the equals() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 49)",
            "(line 87,col 9)-(line 87,col 49)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 92,col 9)-(line 92,col 35)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testCloning()",
        "snippet": "    public void testCloning() {\n        KeyedObjects2D o1 = new KeyedObjects2D();\n        o1.setObject(new Integer(1), \"V1\", \"C1\");\n        o1.setObject(null, \"V2\", \"C1\");\n        o1.setObject(new Integer(3), \"V3\", \"C2\");\n        KeyedObjects2D o2 = null;\n        try {\n            o2 = (KeyedObjects2D) o1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(o1 != o2);\n        assertTrue(o1.getClass() == o2.getClass());\n        assertTrue(o1.equals(o2));\n        \n        // check independence\n        o1.addObject(\"XX\", \"R1\", \"C1\");\n        assertFalse(o1.equals(o2));\n    }\n",
        "begin_line": 100,
        "end_line": 119,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 49)",
            "(line 103,col 9)-(line 103,col 39)",
            "(line 104,col 9)-(line 104,col 49)",
            "(line 105,col 9)-(line 105,col 33)",
            "(line 106,col 9)-(line 111,col 9)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 113,col 51)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 117,col 9)-(line 117,col 39)",
            "(line 118,col 9)-(line 118,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        KeyedObjects2D ko2D1 = new KeyedObjects2D();\n        ko2D1.addObject(new Double(234.2), \"Row1\", \"Col1\");\n        ko2D1.addObject(null, \"Row1\", \"Col2\");\n        ko2D1.addObject(new Double(345.9), \"Row2\", \"Col1\");\n        ko2D1.addObject(new Double(452.7), \"Row2\", \"Col2\");\n\n        KeyedObjects2D ko2D2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(ko2D1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            ko2D2 = (KeyedObjects2D) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(ko2D1, ko2D2);\n\n    }\n",
        "begin_line": 124,
        "end_line": 150,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 52)",
            "(line 127,col 9)-(line 127,col 59)",
            "(line 128,col 9)-(line 128,col 46)",
            "(line 129,col 9)-(line 129,col 59)",
            "(line 130,col 9)-(line 130,col 59)",
            "(line 132,col 9)-(line 132,col 36)",
            "(line 134,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 148,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testGetValueByIndex()",
        "snippet": "    public void testGetValueByIndex() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n        assertEquals(\"Obj2\", data.getObject(1, 1));\n        assertNull(data.getObject(0, 1));\n        assertNull(data.getObject(1, 0));\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(-1, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            data.getObject(0, -1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            data.getObject(2, 0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            data.getObject(0, 2);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 155,
        "end_line": 200,
        "comment": "\n     * Some checks for the getValue(int, int) method.\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 51)",
            "(line 157,col 9)-(line 157,col 43)",
            "(line 158,col 9)-(line 158,col 43)",
            "(line 159,col 9)-(line 159,col 51)",
            "(line 160,col 9)-(line 160,col 51)",
            "(line 161,col 9)-(line 161,col 41)",
            "(line 162,col 9)-(line 162,col 41)",
            "(line 165,col 9)-(line 165,col 29)",
            "(line 166,col 9)-(line 171,col 9)",
            "(line 172,col 9)-(line 172,col 25)",
            "(line 174,col 9)-(line 174,col 21)",
            "(line 175,col 9)-(line 180,col 9)",
            "(line 181,col 9)-(line 181,col 25)",
            "(line 183,col 9)-(line 183,col 21)",
            "(line 184,col 9)-(line 189,col 9)",
            "(line 190,col 9)-(line 190,col 25)",
            "(line 192,col 9)-(line 192,col 21)",
            "(line 193,col 9)-(line 198,col 9)",
            "(line 199,col 9)-(line 199,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testGetValueByKey()",
        "snippet": "    public void testGetValueByKey() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));\n        assertNull(data.getObject(\"R1\", \"C2\"));\n        assertNull(data.getObject(\"R2\", \"C1\"));\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 205,
        "end_line": 250,
        "comment": "\n     * Some checks for the getValue(Comparable, Comparable) method.\n     ",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 51)",
            "(line 207,col 9)-(line 207,col 43)",
            "(line 208,col 9)-(line 208,col 43)",
            "(line 209,col 9)-(line 209,col 57)",
            "(line 210,col 9)-(line 210,col 57)",
            "(line 211,col 9)-(line 211,col 47)",
            "(line 212,col 9)-(line 212,col 47)",
            "(line 215,col 9)-(line 215,col 29)",
            "(line 216,col 9)-(line 221,col 9)",
            "(line 222,col 9)-(line 222,col 25)",
            "(line 224,col 9)-(line 224,col 21)",
            "(line 225,col 9)-(line 230,col 9)",
            "(line 231,col 9)-(line 231,col 25)",
            "(line 233,col 9)-(line 233,col 21)",
            "(line 234,col 9)-(line 239,col 9)",
            "(line 240,col 9)-(line 240,col 25)",
            "(line 242,col 9)-(line 242,col 21)",
            "(line 243,col 9)-(line 248,col 9)",
            "(line 249,col 9)-(line 249,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testSetObject()",
        "snippet": "    public void testSetObject() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));\n        assertNull(data.getObject(\"R1\", \"C2\"));\n        assertNull(data.getObject(\"R2\", \"C1\"));\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 255,
        "end_line": 286,
        "comment": "\n     * Some checks for the setObject(Object, Comparable, Comparable) method.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 51)",
            "(line 257,col 9)-(line 257,col 43)",
            "(line 258,col 9)-(line 258,col 43)",
            "(line 259,col 9)-(line 259,col 57)",
            "(line 260,col 9)-(line 260,col 57)",
            "(line 261,col 9)-(line 261,col 47)",
            "(line 262,col 9)-(line 262,col 47)",
            "(line 265,col 9)-(line 265,col 42)",
            "(line 266,col 9)-(line 266,col 56)",
            "(line 269,col 9)-(line 269,col 29)",
            "(line 270,col 9)-(line 275,col 9)",
            "(line 276,col 9)-(line 276,col 25)",
            "(line 278,col 9)-(line 278,col 21)",
            "(line 279,col 9)-(line 284,col 9)",
            "(line 285,col 9)-(line 285,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testRemoveRowByIndex()",
        "snippet": "    public void testRemoveRowByIndex() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(0);\n        assertEquals(1, data.getRowCount());\n        assertEquals(\"Obj2\", data.getObject(0, 1));\n        \n        // try negative row index\n        boolean pass = false;\n        try {\n            data.removeRow(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try row index too high\n        pass = false;\n        try {\n            data.removeRow(data.getRowCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 291,
        "end_line": 318,
        "comment": "\n     * Some checks for the removeRow(int) method.\n     ",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 51)",
            "(line 293,col 9)-(line 293,col 43)",
            "(line 294,col 9)-(line 294,col 43)",
            "(line 295,col 9)-(line 295,col 26)",
            "(line 296,col 9)-(line 296,col 44)",
            "(line 297,col 9)-(line 297,col 51)",
            "(line 300,col 9)-(line 300,col 29)",
            "(line 301,col 9)-(line 306,col 9)",
            "(line 307,col 9)-(line 307,col 25)",
            "(line 310,col 9)-(line 310,col 21)",
            "(line 311,col 9)-(line 316,col 9)",
            "(line 317,col 9)-(line 317,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testRemoveColumnByIndex()",
        "snippet": "    public void testRemoveColumnByIndex() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        assertEquals(1, data.getColumnCount());\n        assertEquals(\"Obj2\", data.getObject(1, 0));\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 323,
        "end_line": 350,
        "comment": "\n     * Some checks for the removeColumn(int) method.\n     ",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 51)",
            "(line 325,col 9)-(line 325,col 43)",
            "(line 326,col 9)-(line 326,col 43)",
            "(line 327,col 9)-(line 327,col 29)",
            "(line 328,col 9)-(line 328,col 47)",
            "(line 329,col 9)-(line 329,col 51)",
            "(line 332,col 9)-(line 332,col 29)",
            "(line 333,col 9)-(line 338,col 9)",
            "(line 339,col 9)-(line 339,col 25)",
            "(line 342,col 9)-(line 342,col 21)",
            "(line 343,col 9)-(line 348,col 9)",
            "(line 349,col 9)-(line 349,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testRemoveRowByKey()",
        "snippet": "    public void testRemoveRowByKey() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        assertEquals(1, data.getRowCount());\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 355,
        "end_line": 382,
        "comment": "\n     * Some checks for the removeRow(Comparable) method.\n     ",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 51)",
            "(line 357,col 9)-(line 357,col 43)",
            "(line 358,col 9)-(line 358,col 43)",
            "(line 359,col 9)-(line 359,col 29)",
            "(line 360,col 9)-(line 360,col 44)",
            "(line 361,col 9)-(line 361,col 51)",
            "(line 364,col 9)-(line 364,col 29)",
            "(line 365,col 9)-(line 370,col 9)",
            "(line 371,col 9)-(line 371,col 25)",
            "(line 374,col 9)-(line 374,col 21)",
            "(line 375,col 9)-(line 380,col 9)",
            "(line 381,col 9)-(line 381,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testRemoveColumnByKey()",
        "snippet": "    public void testRemoveColumnByKey() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        assertEquals(1, data.getColumnCount());\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 387,
        "end_line": 414,
        "comment": "\n     * Some checks for the removeColumn(Comparable) method.\n     ",
        "child_ranges": [
            "(line 388,col 9)-(line 388,col 51)",
            "(line 389,col 9)-(line 389,col 43)",
            "(line 390,col 9)-(line 390,col 43)",
            "(line 391,col 9)-(line 391,col 32)",
            "(line 392,col 9)-(line 392,col 47)",
            "(line 393,col 9)-(line 393,col 51)",
            "(line 396,col 9)-(line 396,col 29)",
            "(line 397,col 9)-(line 402,col 9)",
            "(line 403,col 9)-(line 403,col 25)",
            "(line 406,col 9)-(line 406,col 21)",
            "(line 407,col 9)-(line 412,col 9)",
            "(line 413,col 9)-(line 413,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.junit.KeyedObjects2DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "signature": "org.jfree.data.junit.KeyedObjects2DTests.testRemoveValue()",
        "snippet": "    public void testRemoveValue() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        assertEquals(1, data.getRowCount());\n        assertEquals(1, data.getColumnCount());\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n    }\n",
        "begin_line": 419,
        "end_line": 427,
        "comment": "\n     * A simple check for the removeValue() method.\n     ",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 51)",
            "(line 421,col 9)-(line 421,col 43)",
            "(line 422,col 9)-(line 422,col 43)",
            "(line 423,col 9)-(line 423,col 38)",
            "(line 424,col 9)-(line 424,col 44)",
            "(line 425,col 9)-(line 425,col 47)",
            "(line 426,col 9)-(line 426,col 51)"
        ]
    }
]